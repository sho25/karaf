begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|dto
operator|.
name|ServiceReferenceDTO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|ServiceComponentRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|ComponentConfigurationDTO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|ComponentDescriptionDTO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|ReferenceDTO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|SatisfiedReferenceDTO
import|;
end_import

begin_class
specifier|public
class|class
name|ScrService
block|{
specifier|private
specifier|final
name|BundleContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|ServiceComponentRuntime
name|runtime
decl_stmt|;
specifier|public
name|ScrService
parameter_list|(
name|BundleContext
name|context
parameter_list|,
specifier|final
name|ServiceComponentRuntime
name|runtime
parameter_list|)
block|{
comment|// we always use the system bundle to avoid problems if subsystems etc.
comment|// are used and the SCR implemented extends those "invisible" bundles
name|this
operator|.
name|context
operator|=
name|context
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|runtime
operator|=
name|runtime
expr_stmt|;
block|}
comment|// ScrService
specifier|public
name|Component
index|[]
name|getComponents
parameter_list|()
block|{
name|List
argument_list|<
name|Component
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|ComponentDescriptionDTO
argument_list|>
name|descriptions
init|=
name|this
operator|.
name|runtime
operator|.
name|getComponentDescriptionDTOs
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ComponentDescriptionDTO
name|descDTO
range|:
name|descriptions
control|)
block|{
specifier|final
name|Collection
argument_list|<
name|ComponentConfigurationDTO
argument_list|>
name|configs
init|=
name|this
operator|.
name|runtime
operator|.
name|getComponentConfigurationDTOs
argument_list|(
name|descDTO
argument_list|)
decl_stmt|;
name|ComponentConfigurationDTO
name|configDTO
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|configDTO
operator|=
name|configs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|Component
argument_list|(
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|runtime
argument_list|,
name|descDTO
argument_list|,
name|configDTO
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|Component
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Component
index|[]
name|getComponents
parameter_list|(
specifier|final
name|String
name|componentName
parameter_list|)
block|{
name|List
argument_list|<
name|Component
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Component
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Collection
argument_list|<
name|ComponentDescriptionDTO
argument_list|>
name|descriptions
init|=
name|this
operator|.
name|runtime
operator|.
name|getComponentDescriptionDTOs
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ComponentDescriptionDTO
name|descDTO
range|:
name|descriptions
control|)
block|{
if|if
condition|(
name|descDTO
operator|.
name|name
operator|.
name|equals
argument_list|(
name|componentName
argument_list|)
condition|)
block|{
specifier|final
name|Collection
argument_list|<
name|ComponentConfigurationDTO
argument_list|>
name|configs
init|=
name|this
operator|.
name|runtime
operator|.
name|getComponentConfigurationDTOs
argument_list|(
name|descDTO
argument_list|)
decl_stmt|;
name|ComponentConfigurationDTO
name|configDTO
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|configs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|configDTO
operator|=
name|configs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|Component
argument_list|(
name|this
operator|.
name|context
argument_list|,
name|this
operator|.
name|runtime
argument_list|,
name|descDTO
argument_list|,
name|configDTO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|Component
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Component
block|{
comment|/**          * The Component has just been created and is still disabled or it has          * been disabled by calling the {@link #disable()} method (value is 1).          */
specifier|public
specifier|static
specifier|final
name|int
name|STATE_DISABLED
init|=
literal|1
decl_stmt|;
comment|/**          * The Component is being enabled (value is 512). After the component has          * been enabled it enters the {@link #STATE_UNSATISFIED} state.          * @since 1.2          * @deprecated since 1.8.0          */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|int
name|STATE_ENABLING
init|=
literal|512
decl_stmt|;
comment|/**          * The Component has been enabled and is now going to be activated (value          * is 2).          * @deprecated as of version 1.2 the enabled state is collapsed into the          *      {@link #STATE_UNSATISFIED} state. This status code is never returned          *      from the {@link #getState()} method.          */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|int
name|STATE_ENABLED
init|=
literal|2
decl_stmt|;
comment|/**          * The Component activation failed because any dependency is not satisfied          * (value is 4).          */
specifier|public
specifier|static
specifier|final
name|int
name|STATE_UNSATISFIED
init|=
literal|4
decl_stmt|;
comment|/**          * The Component is currently being activated either because it has been          * enabled or because any dependency which was previously unsatisfied has          * become satisfied (value is 8).          * @deprecated since 1.8.0 transient states are no longer used          */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|int
name|STATE_ACTIVATING
init|=
literal|8
decl_stmt|;
comment|/**          * The Component has successfully been activated and is fully functional          * (value is 16). This is the state of immediate components after          * successful activation. Delayed and Service Factory Components enter          * this state when the service instance has actually been instantiated because          * the service has been acquired.          */
specifier|public
specifier|static
specifier|final
name|int
name|STATE_ACTIVE
init|=
literal|16
decl_stmt|;
comment|/**          * The Component has successfully been activated but is a Delayed or Service          * Factory Component pending instantiation on first use (value is 32).          */
specifier|public
specifier|static
specifier|final
name|int
name|STATE_REGISTERED
init|=
literal|32
decl_stmt|;
comment|/**          * The Component is a Component Factory ready to create Component instances          * with the<code>ComponentFactory.newInstance(Dictionary)</code> method          * or (if enabled with the<code>ds.factory.enabled</code> configuration) to          * manage Component instances from configuration data received from the          * Configuration Admin Service (value is 64).          */
specifier|public
specifier|static
specifier|final
name|int
name|STATE_FACTORY
init|=
literal|64
decl_stmt|;
comment|/**          * The Component is being deactivated either because it is being disabled          * or because a dependency is not satisfied any more (value is 128). After          * deactivation the Component enters the {@link #STATE_UNSATISFIED} state.          * @deprecated since 1.8.0 transient states are no longer used          */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|int
name|STATE_DEACTIVATING
init|=
literal|128
decl_stmt|;
comment|/**          * The Component is being disabled (value is 1024). After the component has          * been disabled it enters the {@link #STATE_DISABLED} state.          * @since 1.2          * @deprecated since 1.8.0 transient states are no longer used          */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|int
name|STATE_DISABLING
init|=
literal|1024
decl_stmt|;
comment|/**          * The Component is being disposed off (value is 2048). After the component          * has been disposed off it enters the {@link #STATE_DESTROYED} state.          * @since 1.2          * @deprecated since 1.8.0 transient states are no longer used          */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|int
name|STATE_DISPOSING
init|=
literal|2048
decl_stmt|;
comment|/**          * The Component has been destroyed and cannot be used any more (value is          * 256). This state is only used when the bundle declaring the component          * is being stopped and all components have to be removed.          * @deprecated as of version 1.2 this constant has been renamed to          *      {@link #STATE_DISPOSED}.          */
annotation|@
name|Deprecated
specifier|public
specifier|static
specifier|final
name|int
name|STATE_DESTROYED
init|=
literal|256
decl_stmt|;
comment|/**          * The Component has been disposed off and cannot be used any more (value is          * 256). This state is used when the bundle declaring the component          * is being stopped and all components have to be removed. This status is          * also the final status of a component after the          *<code>ComponentInstance.dispose()</code> method has been called.          * @since 1.2          */
specifier|public
specifier|static
specifier|final
name|int
name|STATE_DISPOSED
init|=
literal|256
decl_stmt|;
specifier|private
specifier|final
name|ComponentDescriptionDTO
name|description
decl_stmt|;
specifier|private
specifier|final
name|ComponentConfigurationDTO
name|configuration
decl_stmt|;
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|final
name|ServiceComponentRuntime
name|runtime
decl_stmt|;
specifier|public
name|Component
parameter_list|(
specifier|final
name|BundleContext
name|bundleContext
parameter_list|,
specifier|final
name|ServiceComponentRuntime
name|runtime
parameter_list|,
specifier|final
name|ComponentDescriptionDTO
name|description
parameter_list|,
specifier|final
name|ComponentConfigurationDTO
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|configuration
operator|=
name|configuration
expr_stmt|;
name|this
operator|.
name|runtime
operator|=
name|runtime
expr_stmt|;
block|}
specifier|public
name|long
name|getId
parameter_list|()
block|{
return|return
name|configuration
operator|!=
literal|null
condition|?
name|configuration
operator|.
name|id
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|description
operator|.
name|name
return|;
block|}
specifier|public
name|int
name|getState
parameter_list|()
block|{
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
return|return
name|STATE_UNSATISFIED
return|;
comment|// TODO Check!
block|}
specifier|final
name|int
name|s
init|=
name|configuration
operator|.
name|state
decl_stmt|;
switch|switch
condition|(
name|s
condition|)
block|{
case|case
name|ComponentConfigurationDTO
operator|.
name|ACTIVE
case|:
return|return
name|STATE_ACTIVE
return|;
case|case
name|ComponentConfigurationDTO
operator|.
name|SATISFIED
case|:
return|return
name|STATE_ENABLED
return|;
case|case
name|ComponentConfigurationDTO
operator|.
name|UNSATISFIED_CONFIGURATION
case|:
return|return
name|STATE_UNSATISFIED
return|;
case|case
name|ComponentConfigurationDTO
operator|.
name|UNSATISFIED_REFERENCE
case|:
return|return
name|STATE_UNSATISFIED
return|;
default|default:
comment|// satisfied
return|return
name|STATE_ENABLED
return|;
block|}
block|}
specifier|public
name|Bundle
name|getBundle
parameter_list|()
block|{
return|return
name|this
operator|.
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|this
operator|.
name|description
operator|.
name|bundle
operator|.
name|id
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFactory
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|factory
return|;
block|}
specifier|public
name|boolean
name|isServiceFactory
parameter_list|()
block|{
return|return
operator|!
literal|"singleton"
operator|.
name|equals
argument_list|(
name|this
operator|.
name|description
operator|.
name|scope
argument_list|)
return|;
block|}
specifier|public
name|String
name|getClassName
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|implementationClass
return|;
block|}
specifier|public
name|boolean
name|isDefaultEnabled
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|defaultEnabled
return|;
block|}
specifier|public
name|boolean
name|isImmediate
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|immediate
return|;
block|}
specifier|public
name|String
index|[]
name|getServices
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|serviceInterfaces
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|this
operator|.
name|description
operator|.
name|serviceInterfaces
return|;
block|}
specifier|public
name|Dictionary
name|getProperties
parameter_list|()
block|{
return|return
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|this
operator|.
name|description
operator|.
name|properties
argument_list|)
return|;
block|}
specifier|public
name|Reference
index|[]
name|getReferences
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|configuration
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|Reference
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Reference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|ReferenceDTO
name|dto
range|:
name|this
operator|.
name|description
operator|.
name|references
control|)
block|{
name|SatisfiedReferenceDTO
name|sRef
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|SatisfiedReferenceDTO
name|r
range|:
name|this
operator|.
name|configuration
operator|.
name|satisfiedReferences
control|)
block|{
if|if
condition|(
name|r
operator|.
name|name
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|name
argument_list|)
condition|)
block|{
name|sRef
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|Reference
argument_list|(
name|this
operator|.
name|bundleContext
argument_list|,
name|dto
argument_list|,
name|sRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|Reference
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ComponentInstance
name|getComponentInstance
parameter_list|()
block|{
comment|// returning null as we should have never returned this in the first place
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getActivate
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|activate
return|;
block|}
specifier|public
name|boolean
name|isActivateDeclared
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|activate
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getDeactivate
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|deactivate
return|;
block|}
specifier|public
name|boolean
name|isDeactivateDeclared
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|deactivate
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getModified
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|modified
return|;
block|}
specifier|public
name|String
name|getConfigurationPolicy
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
operator|.
name|configurationPolicy
return|;
block|}
specifier|public
name|String
name|getConfigurationPid
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|pids
init|=
name|this
operator|.
name|description
operator|.
name|configurationPid
decl_stmt|;
return|return
name|pids
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|boolean
name|isConfigurationPidDeclared
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|enable
parameter_list|()
block|{
comment|// noop as the old model was broken
block|}
specifier|public
name|void
name|disable
parameter_list|()
block|{
comment|// noop as the old model was broken
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Reference
block|{
comment|// constant for option single reference - 0..1
specifier|private
specifier|static
specifier|final
name|String
name|CARDINALITY_0_1
init|=
literal|"0..1"
decl_stmt|;
comment|// constant for option multiple reference - 0..n
specifier|private
specifier|static
specifier|final
name|String
name|CARDINALITY_0_N
init|=
literal|"0..n"
decl_stmt|;
comment|// constant for required multiple reference - 1..n
specifier|private
specifier|static
specifier|final
name|String
name|CARDINALITY_1_N
init|=
literal|"1..n"
decl_stmt|;
comment|// constant for static policy
specifier|private
specifier|static
specifier|final
name|String
name|POLICY_STATIC
init|=
literal|"static"
decl_stmt|;
comment|// constant for reluctant policy option
specifier|private
specifier|static
specifier|final
name|String
name|POLICY_OPTION_RELUCTANT
init|=
literal|"reluctant"
decl_stmt|;
specifier|private
specifier|final
name|ReferenceDTO
name|dto
decl_stmt|;
specifier|private
specifier|final
name|SatisfiedReferenceDTO
name|satisfiedDTO
decl_stmt|;
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|Reference
parameter_list|(
specifier|final
name|BundleContext
name|bundleContext
parameter_list|,
specifier|final
name|ReferenceDTO
name|dto
parameter_list|,
specifier|final
name|SatisfiedReferenceDTO
name|satisfied
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|dto
operator|=
name|dto
expr_stmt|;
name|this
operator|.
name|satisfiedDTO
operator|=
name|satisfied
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|dto
operator|.
name|name
return|;
block|}
specifier|public
name|String
name|getServiceName
parameter_list|()
block|{
return|return
name|dto
operator|.
name|interfaceName
return|;
block|}
specifier|public
name|ServiceReference
index|[]
name|getServiceReferences
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|satisfiedDTO
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|refs
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceReferenceDTO
name|dto
range|:
name|this
operator|.
name|satisfiedDTO
operator|.
name|boundServices
control|)
block|{
try|try
block|{
specifier|final
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[]
name|serviceRefs
init|=
name|this
operator|.
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|"("
operator|+
name|Constants
operator|.
name|SERVICE_ID
operator|+
literal|"="
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|dto
operator|.
name|id
argument_list|)
operator|+
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceRefs
operator|!=
literal|null
operator|&&
name|serviceRefs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|refs
operator|.
name|add
argument_list|(
name|serviceRefs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|InvalidSyntaxException
name|ise
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|refs
operator|.
name|toArray
argument_list|(
operator|new
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[
name|refs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[]
name|getBoundServiceReferences
parameter_list|()
block|{
return|return
name|this
operator|.
name|getServiceReferences
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
name|this
operator|.
name|satisfiedDTO
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|CARDINALITY_0_1
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|cardinality
argument_list|)
operator|||
name|CARDINALITY_0_N
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|cardinality
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMultiple
parameter_list|()
block|{
return|return
name|CARDINALITY_1_N
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|cardinality
argument_list|)
operator|||
name|CARDINALITY_0_N
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|cardinality
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isStatic
parameter_list|()
block|{
return|return
name|POLICY_STATIC
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|policy
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isReluctant
parameter_list|()
block|{
return|return
name|POLICY_OPTION_RELUCTANT
operator|.
name|equals
argument_list|(
name|dto
operator|.
name|policyOption
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|this
operator|.
name|dto
operator|.
name|target
return|;
block|}
specifier|public
name|String
name|getBindMethodName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dto
operator|.
name|bind
return|;
block|}
specifier|public
name|String
name|getUnbindMethodName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dto
operator|.
name|unbind
return|;
block|}
specifier|public
name|String
name|getUpdatedMethodName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dto
operator|.
name|unbind
return|;
block|}
block|}
block|}
end_class

end_unit

