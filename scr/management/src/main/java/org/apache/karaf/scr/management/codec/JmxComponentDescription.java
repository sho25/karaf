begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|ServiceComponentRuntimeMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|ComponentDescriptionDTO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
class|class
name|JmxComponentDescription
block|{
comment|/**      * The CompositeType which represents a single component      */
specifier|public
specifier|final
specifier|static
name|CompositeType
name|COMPONENT
init|=
name|createComponentType
argument_list|()
decl_stmt|;
comment|/**      * The TabularType which represents a list of components      */
specifier|public
specifier|final
specifier|static
name|TabularType
name|COMPONENT_TABLE
init|=
name|createComponentTableType
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CompositeData
name|data
decl_stmt|;
specifier|public
name|JmxComponentDescription
parameter_list|(
name|ComponentDescriptionDTO
name|component
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|itemNames
init|=
name|ServiceComponentRuntimeMBean
operator|.
name|COMPONENT_DESCRIPTION
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
operator|new
name|Object
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemValues
index|[
literal|0
index|]
operator|=
name|component
operator|.
name|bundle
operator|.
name|id
expr_stmt|;
name|itemValues
index|[
literal|1
index|]
operator|=
name|component
operator|.
name|name
expr_stmt|;
name|itemValues
index|[
literal|2
index|]
operator|=
name|component
operator|.
name|factory
expr_stmt|;
name|itemValues
index|[
literal|3
index|]
operator|=
name|component
operator|.
name|scope
expr_stmt|;
name|itemValues
index|[
literal|4
index|]
operator|=
name|component
operator|.
name|implementationClass
expr_stmt|;
name|itemValues
index|[
literal|5
index|]
operator|=
name|component
operator|.
name|defaultEnabled
expr_stmt|;
name|itemValues
index|[
literal|6
index|]
operator|=
name|component
operator|.
name|immediate
expr_stmt|;
name|itemValues
index|[
literal|7
index|]
operator|=
name|component
operator|.
name|serviceInterfaces
expr_stmt|;
name|itemValues
index|[
literal|8
index|]
operator|=
name|JmxProperty
operator|.
name|tableFrom
argument_list|(
name|component
operator|.
name|properties
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|9
index|]
operator|=
name|JmxReference
operator|.
name|tableFrom
argument_list|(
name|component
operator|.
name|references
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|10
index|]
operator|=
name|component
operator|.
name|activate
expr_stmt|;
name|itemValues
index|[
literal|11
index|]
operator|=
name|component
operator|.
name|deactivate
expr_stmt|;
name|itemValues
index|[
literal|12
index|]
operator|=
name|component
operator|.
name|modified
expr_stmt|;
name|itemValues
index|[
literal|13
index|]
operator|=
name|component
operator|.
name|configurationPolicy
expr_stmt|;
name|itemValues
index|[
literal|14
index|]
operator|=
name|component
operator|.
name|configurationPid
expr_stmt|;
name|data
operator|=
operator|new
name|CompositeDataSupport
argument_list|(
name|COMPONENT
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot form feature open data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CompositeData
name|asCompositeData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
specifier|static
name|TabularData
name|tableFrom
parameter_list|(
name|ComponentDescriptionDTO
modifier|...
name|components
parameter_list|)
block|{
return|return
name|tableFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|components
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TabularData
name|tableFrom
parameter_list|(
name|Iterable
argument_list|<
name|ComponentDescriptionDTO
argument_list|>
name|components
parameter_list|)
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|COMPONENT_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|ComponentDescriptionDTO
name|component
range|:
name|components
control|)
block|{
name|table
operator|.
name|put
argument_list|(
operator|new
name|JmxComponentDescription
argument_list|(
name|component
argument_list|)
operator|.
name|asCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|private
specifier|static
name|CompositeType
name|createComponentType
parameter_list|()
block|{
try|try
block|{
name|String
name|description
init|=
literal|"This type encapsulates Scr references"
decl_stmt|;
name|String
index|[]
name|itemNames
init|=
name|ServiceComponentRuntimeMBean
operator|.
name|COMPONENT_DESCRIPTION
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
operator|new
name|String
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemTypes
index|[
literal|0
index|]
operator|=
name|SimpleType
operator|.
name|LONG
expr_stmt|;
name|itemTypes
index|[
literal|1
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|2
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|3
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|4
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|5
index|]
operator|=
name|SimpleType
operator|.
name|BOOLEAN
expr_stmt|;
name|itemTypes
index|[
literal|6
index|]
operator|=
name|SimpleType
operator|.
name|BOOLEAN
expr_stmt|;
name|itemTypes
index|[
literal|7
index|]
operator|=
operator|new
name|ArrayType
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|itemTypes
index|[
literal|8
index|]
operator|=
name|JmxProperty
operator|.
name|PROPERTY_TABLE
expr_stmt|;
name|itemTypes
index|[
literal|9
index|]
operator|=
name|JmxReference
operator|.
name|REFERENCE_TABLE
expr_stmt|;
name|itemTypes
index|[
literal|10
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|11
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|12
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|13
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|14
index|]
operator|=
operator|new
name|ArrayType
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|itemDescriptions
index|[
literal|0
index|]
operator|=
literal|"The bundle id of the component"
expr_stmt|;
name|itemDescriptions
index|[
literal|1
index|]
operator|=
literal|"The name of the component"
expr_stmt|;
name|itemDescriptions
index|[
literal|2
index|]
operator|=
literal|"factory"
expr_stmt|;
name|itemDescriptions
index|[
literal|3
index|]
operator|=
literal|"scope"
expr_stmt|;
name|itemDescriptions
index|[
literal|4
index|]
operator|=
literal|"implementationClass"
expr_stmt|;
name|itemDescriptions
index|[
literal|5
index|]
operator|=
literal|"defaultEnabled"
expr_stmt|;
name|itemDescriptions
index|[
literal|6
index|]
operator|=
literal|"immediate"
expr_stmt|;
name|itemDescriptions
index|[
literal|7
index|]
operator|=
literal|"serviceInterfaces"
expr_stmt|;
name|itemDescriptions
index|[
literal|8
index|]
operator|=
literal|"properties"
expr_stmt|;
name|itemDescriptions
index|[
literal|9
index|]
operator|=
literal|"references"
expr_stmt|;
name|itemDescriptions
index|[
literal|10
index|]
operator|=
literal|"activate"
expr_stmt|;
name|itemDescriptions
index|[
literal|11
index|]
operator|=
literal|"deactivate"
expr_stmt|;
name|itemDescriptions
index|[
literal|12
index|]
operator|=
literal|"modified"
expr_stmt|;
name|itemDescriptions
index|[
literal|13
index|]
operator|=
literal|"configurationPolicy"
expr_stmt|;
name|itemDescriptions
index|[
literal|14
index|]
operator|=
literal|"configurationPid"
expr_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
literal|"Component"
argument_list|,
name|description
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build component type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TabularType
name|createComponentTableType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TabularType
argument_list|(
literal|"ComponentDescription"
argument_list|,
literal|"The table of all components"
argument_list|,
name|COMPONENT
argument_list|,
name|ServiceComponentRuntimeMBean
operator|.
name|COMPONENT_DESCRIPTION
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build components table type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

