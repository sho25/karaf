begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|ScrServiceMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|internal
operator|.
name|ScrService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
class|class
name|JmxComponent
block|{
comment|/**      * The CompositeType which represents a single component      */
specifier|public
specifier|final
specifier|static
name|CompositeType
name|COMPONENT
init|=
name|createComponentType
argument_list|()
decl_stmt|;
comment|/**      * The TabularType which represents a list of components      */
specifier|public
specifier|final
specifier|static
name|TabularType
name|COMPONENT_TABLE
init|=
name|createComponentTableType
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CompositeData
name|data
decl_stmt|;
specifier|public
name|JmxComponent
parameter_list|(
name|ScrService
operator|.
name|Component
name|component
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|itemNames
init|=
name|ScrServiceMBean
operator|.
name|COMPONENT
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
operator|new
name|Object
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemValues
index|[
literal|0
index|]
operator|=
name|component
operator|.
name|getId
argument_list|()
expr_stmt|;
name|itemValues
index|[
literal|1
index|]
operator|=
name|component
operator|.
name|getName
argument_list|()
expr_stmt|;
name|itemValues
index|[
literal|2
index|]
operator|=
name|getState
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|3
index|]
operator|=
name|JmxProperty
operator|.
name|tableFrom
argument_list|(
name|component
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|4
index|]
operator|=
name|JmxReference
operator|.
name|tableFrom
argument_list|(
name|component
operator|.
name|getReferences
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|CompositeDataSupport
argument_list|(
name|COMPONENT
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot form feature open data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CompositeData
name|asCompositeData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
specifier|static
name|TabularData
name|tableFrom
parameter_list|(
name|ScrService
operator|.
name|Component
modifier|...
name|components
parameter_list|)
block|{
return|return
name|tableFrom
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|components
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TabularData
name|tableFrom
parameter_list|(
name|Iterable
argument_list|<
name|ScrService
operator|.
name|Component
argument_list|>
name|components
parameter_list|)
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|COMPONENT_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|ScrService
operator|.
name|Component
name|component
range|:
name|components
control|)
block|{
name|table
operator|.
name|put
argument_list|(
operator|new
name|JmxComponent
argument_list|(
name|component
argument_list|)
operator|.
name|asCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|private
specifier|static
name|CompositeType
name|createComponentType
parameter_list|()
block|{
try|try
block|{
name|String
name|description
init|=
literal|"This type encapsulates Scr references"
decl_stmt|;
name|String
index|[]
name|itemNames
init|=
name|ScrServiceMBean
operator|.
name|COMPONENT
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
operator|new
name|String
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemTypes
index|[
literal|0
index|]
operator|=
name|SimpleType
operator|.
name|LONG
expr_stmt|;
name|itemTypes
index|[
literal|1
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|2
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|3
index|]
operator|=
name|JmxProperty
operator|.
name|PROPERTY_TABLE
expr_stmt|;
name|itemTypes
index|[
literal|4
index|]
operator|=
name|JmxReference
operator|.
name|REFERENCE_TABLE
expr_stmt|;
name|itemDescriptions
index|[
literal|0
index|]
operator|=
literal|"The id of the component"
expr_stmt|;
name|itemDescriptions
index|[
literal|1
index|]
operator|=
literal|"The name of the component"
expr_stmt|;
name|itemDescriptions
index|[
literal|2
index|]
operator|=
literal|"The state of the component"
expr_stmt|;
name|itemDescriptions
index|[
literal|3
index|]
operator|=
literal|"The properties of the component"
expr_stmt|;
name|itemDescriptions
index|[
literal|4
index|]
operator|=
literal|"The references of the component"
expr_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
literal|"Component"
argument_list|,
name|description
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build component type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TabularType
name|createComponentTableType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TabularType
argument_list|(
literal|"Component"
argument_list|,
literal|"The table of all components"
argument_list|,
name|COMPONENT
argument_list|,
name|ScrServiceMBean
operator|.
name|COMPONENT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build components table type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns a literal for the {@link ScrService.Component} state.      * @param component     The target {@link ScrService.Component}.      * @return      */
specifier|private
specifier|static
name|String
name|getState
parameter_list|(
name|ScrService
operator|.
name|Component
name|component
parameter_list|)
block|{
switch|switch
condition|(
name|component
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_ACTIVE
case|:
return|return
literal|"Active"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_ACTIVATING
case|:
return|return
literal|"Activating"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_DEACTIVATING
case|:
return|return
literal|"Deactivating"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_DISABLED
case|:
return|return
literal|"Disabled"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_DISABLING
case|:
return|return
literal|"Disabling"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_DISPOSED
case|:
return|return
literal|"Disposed"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_DISPOSING
case|:
return|return
literal|"Disposing"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_ENABLING
case|:
return|return
literal|"Enabling"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_FACTORY
case|:
return|return
literal|"Factory"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_REGISTERED
case|:
return|return
literal|"Registered"
return|;
case|case
name|ScrService
operator|.
name|Component
operator|.
name|STATE_UNSATISFIED
case|:
return|return
literal|"Unsatisfied"
return|;
block|}
return|return
literal|"Unknown"
return|;
block|}
block|}
end_class

end_unit

