begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|ScrService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|ScrsMBean
import|;
end_import

begin_class
specifier|public
class|class
name|Scrs
extends|extends
name|StandardMBean
implements|implements
name|ScrsMBean
block|{
specifier|private
name|ScrService
name|scrService
decl_stmt|;
comment|/**      * Creates new Declarative Services mbean.      *       * @throws NotCompliantMBeanException      */
specifier|public
name|Scrs
parameter_list|(
name|ScrService
name|scrService
parameter_list|)
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|ScrsMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|scrService
operator|=
name|scrService
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|listComponents
parameter_list|()
throws|throws
name|Exception
block|{
name|Component
index|[]
name|components
init|=
name|safe
argument_list|(
name|scrService
operator|.
name|getComponents
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|componentNames
init|=
operator|new
name|String
index|[
name|components
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|componentNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|componentNames
index|[
name|i
index|]
operator|=
name|components
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|componentNames
return|;
block|}
specifier|public
name|boolean
name|isComponentActive
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|state
init|=
literal|false
decl_stmt|;
name|Component
index|[]
name|components
init|=
name|scrService
operator|.
name|getComponents
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|safe
argument_list|(
name|components
argument_list|)
control|)
block|{
name|state
operator|=
operator|(
name|component
operator|.
name|getState
argument_list|()
operator|==
name|Component
operator|.
name|STATE_ACTIVE
operator|)
condition|?
literal|true
else|:
literal|false
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
specifier|public
name|void
name|activateComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|scrService
operator|.
name|getComponents
argument_list|(
name|componentName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Component
index|[]
name|components
init|=
name|scrService
operator|.
name|getComponents
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|safe
argument_list|(
name|components
argument_list|)
control|)
block|{
name|component
operator|.
name|enable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|deactiveateComponent
parameter_list|(
name|String
name|componentName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|scrService
operator|.
name|getComponents
argument_list|(
name|componentName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Component
index|[]
name|components
init|=
name|scrService
operator|.
name|getComponents
argument_list|(
name|componentName
argument_list|)
decl_stmt|;
for|for
control|(
name|Component
name|component
range|:
name|safe
argument_list|(
name|components
argument_list|)
control|)
block|{
name|component
operator|.
name|disable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Component
index|[]
name|safe
parameter_list|(
name|Component
index|[]
name|components
parameter_list|)
block|{
return|return
name|components
operator|==
literal|null
condition|?
operator|new
name|Component
index|[
literal|0
index|]
else|:
name|components
return|;
block|}
block|}
end_class

end_unit

