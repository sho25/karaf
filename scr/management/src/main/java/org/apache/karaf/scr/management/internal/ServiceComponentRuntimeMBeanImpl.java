begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|ServiceComponentRuntimeMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|codec
operator|.
name|JmxComponentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
operator|.
name|codec
operator|.
name|JmxComponentDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|ServiceComponentRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|ComponentDescriptionDTO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_class
annotation|@
name|Component
argument_list|(
name|name
operator|=
name|ServiceComponentRuntimeMBeanImpl
operator|.
name|COMPONENT_NAME
argument_list|,
name|enabled
operator|=
literal|true
argument_list|,
name|immediate
operator|=
literal|true
argument_list|,
name|properties
operator|=
block|{
literal|"org/apache/karaf/scr/management/internal/ServiceComponentRuntimeMBeanImpl.properties"
block|}
argument_list|)
specifier|public
class|class
name|ServiceComponentRuntimeMBeanImpl
extends|extends
name|StandardMBean
implements|implements
name|ServiceComponentRuntimeMBean
block|{
specifier|public
specifier|static
specifier|final
name|String
name|OBJECT_NAME
init|=
literal|"org.apache.karaf:type=scr,name="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|,
literal|"root"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"ServiceComponentRuntimeMBean"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_LABEL
init|=
literal|"Apache Karaf ServiceComponentRuntime MBean"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ServiceComponentRuntimeMBeanImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MBeanServer
name|mBeanServer
decl_stmt|;
specifier|private
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|ServiceComponentRuntime
name|scrService
decl_stmt|;
specifier|private
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * Creates new Declarative Services MBean.      *      * @throws NotCompliantMBeanException If the MBean is not a valid MBean.      */
specifier|public
name|ServiceComponentRuntimeMBeanImpl
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|ServiceComponentRuntimeMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Service component activation call back.  Called when all dependencies are satisfied.      *      * @throws Exception If the activation fails.      */
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Activating the "
operator|+
name|COMPONENT_LABEL
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|mbeans
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|mbeans
operator|.
name|put
argument_list|(
name|this
argument_list|,
literal|"org.apache.karaf:type=scr,name=${karaf.name}"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
if|if
condition|(
name|mBeanServer
operator|!=
literal|null
condition|)
block|{
name|mBeanServer
operator|.
name|registerMBean
argument_list|(
name|this
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|OBJECT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Exception registering the SCR Management MBean: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Service component deactivation call back.  Called after the component is in an active      * state when any dependencies become unsatisfied.      *      * @throws Exception If the deactivation fails.      */
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Deactivating the "
operator|+
name|COMPONENT_LABEL
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|mBeanServer
operator|!=
literal|null
condition|)
block|{
name|mBeanServer
operator|.
name|unregisterMBean
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|OBJECT_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getComponents
parameter_list|()
block|{
return|return
name|JmxComponentDescription
operator|.
name|tableFrom
argument_list|(
name|scrService
operator|.
name|getComponentDescriptionDTOs
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getComponentConfigs
parameter_list|()
block|{
return|return
name|JmxComponentConfiguration
operator|.
name|tableFrom
argument_list|(
name|scrService
operator|.
name|getComponentDescriptionDTOs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
name|scrService
operator|.
name|getComponentConfigurationDTOs
argument_list|(
name|c
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Collection
operator|::
name|stream
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getComponentConfigs
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
return|return
name|JmxComponentConfiguration
operator|.
name|tableFrom
argument_list|(
name|scrService
operator|.
name|getComponentConfigurationDTOs
argument_list|(
name|findComponent
argument_list|(
name|bundleId
argument_list|,
name|componentName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isComponentEnabled
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
return|return
name|scrService
operator|.
name|isComponentEnabled
argument_list|(
name|findComponent
argument_list|(
name|bundleId
argument_list|,
name|componentName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|enableComponent
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
name|scrService
operator|.
name|enableComponent
argument_list|(
name|findComponent
argument_list|(
name|bundleId
argument_list|,
name|componentName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disableComponent
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
name|scrService
operator|.
name|disableComponent
argument_list|(
name|findComponent
argument_list|(
name|bundleId
argument_list|,
name|componentName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ComponentDescriptionDTO
name|findComponent
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|context
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
return|return
name|scrService
operator|.
name|getComponentDescriptionDTO
argument_list|(
name|bundle
argument_list|,
name|componentName
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No component found for name: "
operator|+
name|componentName
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Reference
specifier|public
name|void
name|setmBeanServer
parameter_list|(
name|MBeanServer
name|mBeanServer
parameter_list|)
block|{
name|this
operator|.
name|mBeanServer
operator|=
name|mBeanServer
expr_stmt|;
block|}
specifier|public
name|void
name|unsetmBeanServer
parameter_list|(
name|MBeanServer
name|mBeanServer
parameter_list|)
block|{
name|this
operator|.
name|mBeanServer
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Reference
specifier|public
name|void
name|setScrService
parameter_list|(
name|ServiceComponentRuntime
name|scrService
parameter_list|)
block|{
name|this
operator|.
name|scrService
operator|=
name|scrService
expr_stmt|;
block|}
specifier|public
name|void
name|unsetScrService
parameter_list|(
name|ServiceComponentRuntime
name|scrService
parameter_list|)
block|{
name|this
operator|.
name|scrService
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

