begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_comment
comment|/**  * The management interface for SCR Components.  */
end_comment

begin_interface
specifier|public
interface|interface
name|ServiceComponentRuntimeMBean
block|{
name|String
name|COMPONENT_BUNDLE_ID
init|=
literal|"BundleId"
decl_stmt|;
name|String
name|COMPONENT_NAME
init|=
literal|"Name"
decl_stmt|;
name|String
name|COMPONENT_FACTORY
init|=
literal|"Factory"
decl_stmt|;
name|String
name|COMPONENT_SCOPE
init|=
literal|"Scope"
decl_stmt|;
name|String
name|COMPONENT_IMPLEMENTATION_CLASS
init|=
literal|"ImplementationClass"
decl_stmt|;
name|String
name|COMPONENT_DEFAULT_ENABLED
init|=
literal|"DefaultEnabled"
decl_stmt|;
name|String
name|COMPONENT_IMMEDIATE
init|=
literal|"Immediate"
decl_stmt|;
name|String
name|COMPONENT_SERVICE_INTERFACES
init|=
literal|"ServiceInterfaces"
decl_stmt|;
name|String
name|COMPONENT_PROPERTIES
init|=
literal|"Properties"
decl_stmt|;
name|String
name|COMPONENT_REFERENCES
init|=
literal|"References"
decl_stmt|;
name|String
name|COMPONENT_ACTIVATE
init|=
literal|"Activate"
decl_stmt|;
name|String
name|COMPONENT_DEACTIVATE
init|=
literal|"Deactivate"
decl_stmt|;
name|String
name|COMPONENT_MODIFIED
init|=
literal|"Modified"
decl_stmt|;
name|String
name|COMPONENT_CONFIGURATION_POLICY
init|=
literal|"ConfigurationPolicy"
decl_stmt|;
name|String
name|COMPONENT_CONFIGURATION_PID
init|=
literal|"ConfigurationId"
decl_stmt|;
name|String
name|COMPONENT_STATE
init|=
literal|"State"
decl_stmt|;
name|String
name|COMPONENT_ID
init|=
literal|"Id"
decl_stmt|;
name|String
name|COMPONENT_SATISFIED_REFERENCES
init|=
literal|"SatisfiedReferences"
decl_stmt|;
name|String
name|COMPONENT_UNSATISFIED_REFERENCES
init|=
literal|"UnsatisfiedReferences"
decl_stmt|;
name|String
name|PROPERTY_KEY
init|=
literal|"Key"
decl_stmt|;
name|String
name|PROPERTY_VALUE
init|=
literal|"Value"
decl_stmt|;
comment|/*                itemValues[0] = reference.name;             itemValues[1] = reference.interfaceName;             itemValues[2] = reference.cardinality;             itemValues[3] = reference.policy;             itemValues[4] = reference.policyOption;             itemValues[5] = reference.target;             itemValues[6] = reference.bind;             itemValues[7] = reference.unbind;             itemValues[8] = reference.updated;             itemValues[9] = reference.field;             itemValues[10] = reference.fieldOption;             itemValues[11] = reference.scope;       */
name|String
name|REFERENCE_NAME
init|=
literal|"Name"
decl_stmt|;
name|String
name|REFERENCE_INTERFACE_NAME
init|=
literal|"InterfaceName"
decl_stmt|;
name|String
name|REFERENCE_CARDINALITY
init|=
literal|"Cardinality"
decl_stmt|;
name|String
name|REFERENCE_POLICY
init|=
literal|"Policy"
decl_stmt|;
name|String
name|REFERENCE_POLICY_OPTION
init|=
literal|"PolicyOption"
decl_stmt|;
name|String
name|REFERENCE_TARGET
init|=
literal|"Target"
decl_stmt|;
name|String
name|REFERENCE_BIND
init|=
literal|"Bind"
decl_stmt|;
name|String
name|REFERENCE_UNBIND
init|=
literal|"Unbind"
decl_stmt|;
name|String
name|REFERENCE_UPDATED
init|=
literal|"Updated"
decl_stmt|;
name|String
name|REFERENCE_FIELD
init|=
literal|"Field"
decl_stmt|;
name|String
name|REFERENCE_FIELD_OPTION
init|=
literal|"FieldOption"
decl_stmt|;
name|String
name|REFERENCE_SCOPE
init|=
literal|"Scope"
decl_stmt|;
name|String
name|REFERENCE_BOUND_SERVICES
init|=
literal|"BoundServices"
decl_stmt|;
comment|/**      * The item names in the CompositeData representing a component      */
name|String
index|[]
name|COMPONENT_DESCRIPTION
init|=
block|{
name|COMPONENT_BUNDLE_ID
block|,
name|COMPONENT_NAME
block|,
name|COMPONENT_FACTORY
block|,
name|COMPONENT_SCOPE
block|,
name|COMPONENT_IMPLEMENTATION_CLASS
block|,
name|COMPONENT_DEFAULT_ENABLED
block|,
name|COMPONENT_IMMEDIATE
block|,
name|COMPONENT_SERVICE_INTERFACES
block|,
name|COMPONENT_PROPERTIES
block|,
name|COMPONENT_REFERENCES
block|,
name|COMPONENT_ACTIVATE
block|,
name|COMPONENT_DEACTIVATE
block|,
name|COMPONENT_MODIFIED
block|,
name|COMPONENT_CONFIGURATION_POLICY
block|,
name|COMPONENT_CONFIGURATION_PID
block|}
decl_stmt|;
name|String
index|[]
name|COMPONENT_CONFIGURATION
init|=
block|{
name|COMPONENT_BUNDLE_ID
block|,
name|COMPONENT_NAME
block|,
name|COMPONENT_STATE
block|,
name|COMPONENT_ID
block|,
name|COMPONENT_PROPERTIES
block|,
name|COMPONENT_SATISFIED_REFERENCES
block|,
name|COMPONENT_UNSATISFIED_REFERENCES
block|}
decl_stmt|;
name|String
index|[]
name|PROPERTY
init|=
block|{
name|PROPERTY_KEY
block|,
name|PROPERTY_VALUE
block|}
decl_stmt|;
name|String
index|[]
name|REFERENCE
init|=
block|{
name|REFERENCE_NAME
block|,
name|REFERENCE_INTERFACE_NAME
block|,
name|REFERENCE_CARDINALITY
block|,
name|REFERENCE_POLICY
block|,
name|REFERENCE_POLICY_OPTION
block|,
name|REFERENCE_TARGET
block|,
name|REFERENCE_BIND
block|,
name|REFERENCE_UNBIND
block|,
name|REFERENCE_UPDATED
block|,
name|REFERENCE_FIELD
block|,
name|REFERENCE_FIELD_OPTION
block|,
name|REFERENCE_SCOPE
block|}
decl_stmt|;
name|String
index|[]
name|SVC_REFERENCE
init|=
block|{
name|REFERENCE_NAME
block|,
name|REFERENCE_TARGET
block|,
name|REFERENCE_BOUND_SERVICES
block|}
decl_stmt|;
comment|/**      * Display a {@link TabularData} with all the component details.      *      * @return A {@link TabularData} containing all SCR components.      */
name|TabularData
name|getComponents
parameter_list|()
function_decl|;
comment|/**      * Display a {@link TabularData} with all the component configurations details.      *      * @return A {@link TabularData} containing all SCR components.      */
name|TabularData
name|getComponentConfigs
parameter_list|()
function_decl|;
comment|/**      * Present a {@code String} array of components currently registered with the SCR.      *      * @return A {@code String[]} containing all SCR components ID.      */
name|TabularData
name|getComponentConfigs
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
function_decl|;
comment|/**      * Check if the named component is currently enabled.      *      * @param componentName The component name.      * @return True if the component is ACTIVE, otherwise false.      */
name|boolean
name|isComponentEnabled
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
function_decl|;
comment|/**      * Enable a component.      *      * @param componentName The component name.      */
name|void
name|enableComponent
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
function_decl|;
comment|/**      * Disable a component.      *      * @param componentName The component name.      */
name|void
name|disableComponent
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|componentName
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

