begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|state
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|ServiceComponentRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|ComponentConfigurationDTO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|ComponentDescriptionDTO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|runtime
operator|.
name|dto
operator|.
name|UnsatisfiedReferenceDTO
import|;
end_import

begin_class
specifier|public
class|class
name|ScrBundleStateService
implements|implements
name|BundleStateService
block|{
name|ServiceComponentRuntime
name|scr
decl_stmt|;
specifier|public
name|ScrBundleStateService
parameter_list|(
name|ServiceComponentRuntime
name|scr
parameter_list|)
block|{
name|this
operator|.
name|scr
operator|=
name|scr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|BundleStateService
operator|.
name|NAME_DS
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDiag
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ComponentDescriptionDTO
name|desc
range|:
name|scr
operator|.
name|getComponentDescriptionDTOs
argument_list|(
name|bundle
argument_list|)
control|)
block|{
for|for
control|(
name|ComponentConfigurationDTO
name|cfg
range|:
name|scr
operator|.
name|getComponentConfigurationDTOs
argument_list|(
name|desc
argument_list|)
control|)
block|{
if|if
condition|(
name|cfg
operator|.
name|state
operator|!=
name|ComponentConfigurationDTO
operator|.
name|ACTIVE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|cfg
operator|.
name|description
operator|.
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|cfg
operator|.
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|")\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|cfg
operator|.
name|state
operator|&
name|ComponentConfigurationDTO
operator|.
name|UNSATISFIED_CONFIGURATION
operator|)
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"  missing configurations: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|cfg
operator|.
name|description
operator|.
name|configurationPid
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|cfg
operator|.
name|state
operator|&
name|ComponentConfigurationDTO
operator|.
name|UNSATISFIED_REFERENCE
operator|)
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"  missing references: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|UnsatisfiedReferenceDTO
name|ur
range|:
name|cfg
operator|.
name|unsatisfiedReferences
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ur
operator|.
name|name
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BundleState
name|getState
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
for|for
control|(
name|ComponentDescriptionDTO
name|desc
range|:
name|scr
operator|.
name|getComponentDescriptionDTOs
argument_list|(
name|bundle
argument_list|)
control|)
block|{
for|for
control|(
name|ComponentConfigurationDTO
name|cfg
range|:
name|scr
operator|.
name|getComponentConfigurationDTOs
argument_list|(
name|desc
argument_list|)
control|)
block|{
if|if
condition|(
name|cfg
operator|.
name|state
operator|!=
name|ComponentConfigurationDTO
operator|.
name|ACTIVE
condition|)
block|{
return|return
name|BundleState
operator|.
name|Waiting
return|;
block|}
block|}
block|}
block|}
return|return
name|BundleState
operator|.
name|Unknown
return|;
block|}
block|}
end_class

end_unit

