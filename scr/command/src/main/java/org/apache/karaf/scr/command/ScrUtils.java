begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|Component
import|;
end_import

begin_class
specifier|public
class|class
name|ScrUtils
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|emptyIfNull
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|T
index|[]
name|objects
parameter_list|)
block|{
return|return
name|objects
operator|==
literal|null
condition|?
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
literal|0
argument_list|)
else|:
name|objects
return|;
block|}
specifier|public
specifier|static
name|String
name|getState
parameter_list|(
name|int
name|componentState
parameter_list|)
block|{
name|String
name|retVal
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|componentState
condition|)
block|{
case|case
name|Component
operator|.
name|STATE_ACTIVE
case|:
name|retVal
operator|=
literal|"ACTIVE"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_ACTIVATING
case|:
name|retVal
operator|=
literal|"ACTIVATING"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_DEACTIVATING
case|:
name|retVal
operator|=
literal|"DEACTIVATING"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_DISABLED
case|:
name|retVal
operator|=
literal|"DISABLED"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_DISABLING
case|:
name|retVal
operator|=
literal|"DISABLING"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_DISPOSED
case|:
name|retVal
operator|=
literal|"DISPOSED"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_DISPOSING
case|:
name|retVal
operator|=
literal|"DISPOSING"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_ENABLING
case|:
name|retVal
operator|=
literal|"ENABLING"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_FACTORY
case|:
name|retVal
operator|=
literal|"FACTORY"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_REGISTERED
case|:
name|retVal
operator|=
literal|"REGISTERED"
expr_stmt|;
break|break;
case|case
name|Component
operator|.
name|STATE_UNSATISFIED
case|:
name|retVal
operator|=
literal|"UNSATISFIED"
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|retVal
return|;
block|}
block|}
end_class

end_unit

