begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|basic
operator|.
name|AbstractCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|ScrService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|command
operator|.
name|action
operator|.
name|ScrActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|command
operator|.
name|completer
operator|.
name|ScrCompleterSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|CompletableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|ScrCommandSupport
extends|extends
name|AbstractCommand
implements|implements
name|CompletableFunction
block|{
specifier|protected
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ScrService
name|scrService
decl_stmt|;
specifier|private
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|abstract
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|getActionClass
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Completer
argument_list|>
argument_list|>
name|getCompleterClasses
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|Action
name|createNewAction
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ScrActionSupport
name|action
init|=
operator|(
name|ScrActionSupport
operator|)
name|getActionClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|action
operator|.
name|setScrService
argument_list|(
name|getScrService
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Completer
argument_list|>
name|getCompleters
parameter_list|()
block|{
name|List
argument_list|<
name|Completer
argument_list|>
name|completers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getCompleterClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|completers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Completer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|Completer
argument_list|>
name|completerClass
range|:
name|getCompleterClasses
argument_list|()
control|)
block|{
name|ScrCompleterSupport
name|ccs
init|=
operator|(
name|ScrCompleterSupport
operator|)
name|completerClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|ccs
operator|.
name|setScrService
argument_list|(
name|scrService
argument_list|)
expr_stmt|;
name|completers
operator|.
name|add
argument_list|(
name|ccs
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|completers
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Completer
argument_list|>
name|getOptionalCompleters
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Returns the instance of ScrService for this instance of ScrCommandSupport.      *      * @return the ScrCommandSupport or null      */
specifier|public
name|ScrService
name|getScrService
parameter_list|()
block|{
return|return
name|scrService
return|;
block|}
specifier|public
name|void
name|setScrService
parameter_list|(
name|ScrService
name|scrService
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|scrService
operator|=
name|scrService
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unsetScrService
parameter_list|(
name|ScrService
name|scrService
parameter_list|)
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|scrService
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

