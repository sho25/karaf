begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|component
operator|.
name|HeaderReader
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|component
operator|.
name|TagResource
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|header
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|ClassDataCollector
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Clazz
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Instruction
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|URLResource
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|service
operator|.
name|AnalyzerPlugin
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|lib
operator|.
name|tag
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|support
operator|.
name|ScrCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|CommandWithAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|basic
operator|.
name|AbstractCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|CompletableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Destroy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Init
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Service
import|;
end_import

begin_import
import|import static
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Constants
operator|.
name|COMPONENT_ACTIVATE
import|;
end_import

begin_import
import|import static
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Constants
operator|.
name|COMPONENT_DEACTIVATE
import|;
end_import

begin_import
import|import static
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Constants
operator|.
name|COMPONENT_PROPERTIES
import|;
end_import

begin_import
import|import static
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Constants
operator|.
name|COMPONENT_PROVIDE
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|InjectAnnotations
implements|implements
name|AnalyzerPlugin
block|{
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|analyzeJar
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|doAnalyzeJar
argument_list|(
name|analyzer
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
specifier|protected
name|boolean
name|doAnalyzeJar
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nLooking for @Service annotated classes\n"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Clazz
argument_list|>
name|annotatedComponents
init|=
name|analyzer
operator|.
name|getClasses
argument_list|(
literal|""
argument_list|,
name|Clazz
operator|.
name|QUERY
operator|.
name|ANNOTATED
operator|.
name|toString
argument_list|()
argument_list|,
name|Service
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Clazz
name|clazz
range|:
name|annotatedComponents
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFound @Service annotated class: "
operator|+
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|is
argument_list|(
name|Clazz
operator|.
name|QUERY
operator|.
name|ANNOTATED
argument_list|,
operator|new
name|Instruction
argument_list|(
name|Command
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|analyzer
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tCommand"
argument_list|)
expr_stmt|;
name|Collector
name|collector
init|=
operator|new
name|Collector
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|parseClassFileWithCollector
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_ACTIVATE
argument_list|,
literal|"activate"
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_DEACTIVATE
argument_list|,
literal|"deactivate"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|collector
operator|.
name|references
operator|.
name|keySet
argument_list|()
control|)
block|{
name|info
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|collector
operator|.
name|references
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_PROVIDE
argument_list|,
name|Processor
operator|.
name|join
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|Function
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|CompletableFunction
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|CommandWithAction
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
comment|//                        AbstractCommand.class.getName()
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|properties
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
operator|+
literal|"="
operator|+
name|collector
operator|.
name|command
operator|.
name|get
argument_list|(
literal|"scope"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
operator|+
literal|"="
operator|+
name|collector
operator|.
name|command
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|add
argument_list|(
literal|"hidden.component=true"
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_PROPERTIES
argument_list|,
name|Processor
operator|.
name|join
argument_list|(
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|TagResource
name|resource
init|=
name|createComponentResource
argument_list|(
name|clazz
operator|.
name|getFQN
argument_list|()
argument_list|,
name|ScrCommandSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|getJar
argument_list|()
operator|.
name|putResource
argument_list|(
literal|"OSGI-INF/"
operator|+
name|clazz
operator|.
name|getFQN
argument_list|()
operator|+
literal|".xml"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"OSGI-INF/"
operator|+
name|clazz
operator|.
name|getFQN
argument_list|()
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|write
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tNot a command"
argument_list|)
expr_stmt|;
name|Collector
name|collector
init|=
operator|new
name|Collector
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|parseClassFileWithCollector
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|collector
operator|.
name|init
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_ACTIVATE
argument_list|,
name|collector
operator|.
name|init
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|collector
operator|.
name|destroy
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_DEACTIVATE
argument_list|,
name|collector
operator|.
name|destroy
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|collector
operator|.
name|references
operator|.
name|keySet
argument_list|()
control|)
block|{
name|info
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|collector
operator|.
name|references
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_PROVIDE
argument_list|,
name|Processor
operator|.
name|join
argument_list|(
name|collector
operator|.
name|allClasses
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|properties
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|add
argument_list|(
literal|"hidden.component=true"
argument_list|)
expr_stmt|;
name|info
operator|.
name|put
argument_list|(
name|COMPONENT_PROPERTIES
argument_list|,
name|Processor
operator|.
name|join
argument_list|(
name|properties
argument_list|)
argument_list|)
expr_stmt|;
name|TagResource
name|resource
init|=
name|createComponentResource
argument_list|(
name|clazz
operator|.
name|getFQN
argument_list|()
argument_list|,
name|clazz
operator|.
name|getFQN
argument_list|()
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|analyzer
operator|.
name|getJar
argument_list|()
operator|.
name|putResource
argument_list|(
literal|"OSGI-INF/"
operator|+
name|clazz
operator|.
name|getFQN
argument_list|()
operator|+
literal|".xml"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
literal|"OSGI-INF/"
operator|+
name|clazz
operator|.
name|getFQN
argument_list|()
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|write
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|ScrCommandSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|analyzer
operator|.
name|getJar
argument_list|()
operator|.
name|putResource
argument_list|(
name|name
argument_list|,
operator|new
name|URLResource
argument_list|(
name|ScrCommandSupport
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pkg
init|=
name|ScrCommandSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|pkg
operator|=
name|pkg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pkg
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|Descriptors
operator|.
name|PackageRef
name|pkgRef
init|=
name|analyzer
operator|.
name|getPackageRef
argument_list|(
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|analyzer
operator|.
name|getContained
argument_list|()
operator|.
name|containsKey
argument_list|(
name|pkgRef
argument_list|)
condition|)
block|{
name|analyzer
operator|.
name|getContained
argument_list|()
operator|.
name|put
argument_list|(
name|pkgRef
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|imports
init|=
operator|new
name|String
index|[]
block|{
literal|"org.apache.felix.gogo.commands"
block|,
literal|"org.apache.karaf.shell.commands.basic"
block|,
literal|"org.apache.karaf.shell.console"
block|,
literal|"org.apache.karaf.shell.inject"
block|,
literal|"org.osgi.framework"
block|,
literal|"org.osgi.service.component"
block|,
literal|"org.slf4j"
block|}
decl_stmt|;
for|for
control|(
name|String
name|importPkg
range|:
name|imports
control|)
block|{
name|pkgRef
operator|=
name|analyzer
operator|.
name|getPackageRef
argument_list|(
name|importPkg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|analyzer
operator|.
name|getReferred
argument_list|()
operator|.
name|containsKey
argument_list|(
name|pkgRef
argument_list|)
condition|)
block|{
name|analyzer
operator|.
name|getReferred
argument_list|()
operator|.
name|put
argument_list|(
name|pkgRef
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|prop
init|=
name|analyzer
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_COMPONENT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|comp
range|:
name|components
control|)
block|{
if|if
condition|(
name|prop
operator|==
literal|null
operator|||
name|prop
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prop
operator|=
name|comp
expr_stmt|;
block|}
else|else
block|{
name|prop
operator|=
name|prop
operator|+
literal|","
operator|+
name|comp
expr_stmt|;
block|}
block|}
name|analyzer
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_COMPONENT
argument_list|,
name|prop
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|TagResource
name|createComponentResource
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|impl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|Tag
name|tag
init|=
operator|new
name|HeaderReader
argument_list|(
name|analyzer
argument_list|)
operator|.
name|createComponentTag
argument_list|(
name|name
argument_list|,
name|impl
argument_list|,
name|info
argument_list|)
decl_stmt|;
return|return
operator|new
name|TagResource
argument_list|(
name|tag
argument_list|)
return|;
block|}
class|class
name|Collector
extends|extends
name|ClassDataCollector
block|{
name|Descriptors
operator|.
name|TypeRef
name|zuper
decl_stmt|;
name|Clazz
operator|.
name|MethodDef
name|method
decl_stmt|;
name|Clazz
operator|.
name|FieldDef
name|field
decl_stmt|;
name|String
name|init
decl_stmt|;
name|String
name|destroy
decl_stmt|;
name|Annotation
name|command
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|references
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|classBegin
parameter_list|(
name|int
name|access
parameter_list|,
name|Descriptors
operator|.
name|TypeRef
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|getFQN
argument_list|()
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|allClasses
operator|.
name|add
argument_list|(
name|name
operator|.
name|getFQN
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|implementsInterfaces
parameter_list|(
name|Descriptors
operator|.
name|TypeRef
index|[]
name|interfaces
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|interfaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Descriptors
operator|.
name|TypeRef
name|ref
range|:
name|interfaces
control|)
block|{
name|allClasses
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getFQN
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|extendsClass
parameter_list|(
name|Descriptors
operator|.
name|TypeRef
name|zuper
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|zuper
operator|=
name|zuper
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|field
parameter_list|(
name|Clazz
operator|.
name|FieldDef
name|defined
parameter_list|)
block|{
name|field
operator|=
name|defined
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|method
parameter_list|(
name|Clazz
operator|.
name|MethodDef
name|defined
parameter_list|)
block|{
name|method
operator|=
name|defined
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|annotation
parameter_list|(
name|Annotation
name|annotation
parameter_list|)
block|{
name|String
name|name
init|=
name|annotation
operator|.
name|getName
argument_list|()
operator|.
name|getFQN
argument_list|()
decl_stmt|;
if|if
condition|(
name|Command
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tCommand: "
operator|+
name|annotation
operator|.
name|get
argument_list|(
literal|"scope"
argument_list|)
operator|+
literal|":"
operator|+
name|annotation
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|=
name|annotation
expr_stmt|;
block|}
if|if
condition|(
name|Reference
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tReference: field="
operator|+
name|field
operator|.
name|getName
argument_list|()
operator|+
literal|", type="
operator|+
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getFQN
argument_list|()
argument_list|)
expr_stmt|;
name|references
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
operator|.
name|getFQN
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Init
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|init
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tInit method: "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|init
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Destroy
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|destroy
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tDestroy method: "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|destroy
operator|=
name|method
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|classEnd
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|zuper
operator|!=
literal|null
condition|)
block|{
name|Clazz
name|clazz
init|=
name|analyzer
operator|.
name|findClass
argument_list|(
name|zuper
argument_list|)
decl_stmt|;
name|zuper
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|.
name|parseClassFileWithCollector
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
name|boolean
name|isAnnotated
parameter_list|(
name|Clazz
operator|.
name|Def
name|def
parameter_list|,
name|Class
name|annotation
parameter_list|)
block|{
name|Collection
argument_list|<
name|Descriptors
operator|.
name|TypeRef
argument_list|>
name|anns
init|=
name|def
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|anns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Descriptors
operator|.
name|TypeRef
name|ann
range|:
name|anns
control|)
block|{
if|if
condition|(
name|annotation
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|ann
operator|.
name|getFQN
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

