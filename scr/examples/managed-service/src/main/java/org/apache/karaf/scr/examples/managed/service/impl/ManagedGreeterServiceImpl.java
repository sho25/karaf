begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|examples
operator|.
name|managed
operator|.
name|service
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scr
operator|.
name|examples
operator|.
name|managed
operator|.
name|service
operator|.
name|ManagedGreeterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * An implementation of the ManagedGreeterService interface. Component configuration includes setting  * the name attribute and setting the configuration policy to required. The default is optional and when the  * component attempts to activate it will throw a RuntimeException.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|name
operator|=
name|ManagedGreeterServiceImpl
operator|.
name|COMPONENT_NAME
argument_list|,
name|configurationPolicy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
specifier|public
class|class
name|ManagedGreeterServiceImpl
implements|implements
name|ManagedGreeterService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"ManagedGreeterService"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_LABEL
init|=
literal|"Managed Greeter Service"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ManagedGreeterServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
specifier|private
name|Worker
name|worker
init|=
operator|new
name|Worker
argument_list|()
decl_stmt|;
specifier|private
name|ReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * Called when all of the SCR Components required dependencies have been satisfied.      *      * @param properties The activation properties.      */
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Activating the {}"
argument_list|,
name|COMPONENT_LABEL
argument_list|)
expr_stmt|;
comment|// just because our component has a policy of required doesn't help to ensure our properties are set
comment|// first check that salutation is set
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"salutation"
argument_list|)
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|worker
operator|.
name|setSalutation
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"salutation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The salutation property may not be null or empty: "
operator|+
name|properties
operator|.
name|get
argument_list|(
literal|"salutation"
argument_list|)
argument_list|)
throw|;
block|}
comment|// now verify that name is set
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|worker
operator|.
name|setName
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The name property may not be null or empty: "
operator|+
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**      * Called when any of the SCR Components required dependencies become unsatisfied.      */
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deactivating the {}"
argument_list|,
name|COMPONENT_LABEL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called when the configuration associated with this component has been updated.      *      * @param properties The updated configuration.      */
annotation|@
name|Modified
specifier|public
name|void
name|modified
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Modifying the {}"
argument_list|,
name|COMPONENT_LABEL
argument_list|)
expr_stmt|;
comment|// this time we really only need to make sure if it changed it isn't empty
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"salutation"
argument_list|)
operator|&&
operator|!
name|properties
operator|.
name|get
argument_list|(
literal|"salutation"
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|worker
operator|.
name|setSalutation
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"salutation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// same for name
if|if
condition|(
name|properties
operator|.
name|containsKey
argument_list|(
literal|"name"
argument_list|)
operator|&&
operator|!
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|worker
operator|.
name|setName
argument_list|(
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|startGreeter
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|worker
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopGreeter
parameter_list|()
block|{
try|try
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|executor
operator|.
name|isTerminated
argument_list|()
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Thread worker that continuously prints a message.      */
specifier|private
class|class
name|Worker
implements|implements
name|Runnable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|salutation
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|running
init|=
literal|true
decl_stmt|;
name|int
name|messageCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Message {}: {} {}"
argument_list|,
name|messageCount
argument_list|,
name|salutation
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Thread shutting down"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|setSalutation
parameter_list|(
name|String
name|salutation
parameter_list|)
block|{
name|this
operator|.
name|salutation
operator|=
name|salutation
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

