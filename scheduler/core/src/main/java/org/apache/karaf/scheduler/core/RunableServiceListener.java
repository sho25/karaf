begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_comment
comment|/**  * @author: iocanel  */
end_comment

begin_class
specifier|public
class|class
name|RunableServiceListener
implements|implements
name|ServiceListener
block|{
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|final
name|TaskScheduler
name|scheduler
decl_stmt|;
comment|/**      * Constructor      *      * @param bundleContext      * @param scheduler      */
specifier|public
name|RunableServiceListener
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|TaskScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ServiceEvent
operator|.
name|REGISTERED
case|:
name|scheduleRunnableService
argument_list|(
name|event
argument_list|)
expr_stmt|;
break|break;
case|case
name|ServiceEvent
operator|.
name|UNREGISTERING
case|:
block|{
name|unscheduleRunnableService
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
comment|/**      * Schedules the execution of the Runnable Service of the {@link ServiceEvent}.      *      * @param event      */
specifier|protected
name|void
name|scheduleRunnableService
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
name|ServiceReference
name|reference
init|=
name|event
operator|.
name|getServiceReference
argument_list|()
decl_stmt|;
name|Runnable
name|service
init|=
operator|(
name|Runnable
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
name|KarafTimerTask
operator|.
name|ID_PROPERTY
argument_list|)
decl_stmt|;
name|String
name|periodValue
init|=
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
name|KarafTimerTask
operator|.
name|PERIOD_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|periodValue
operator|!=
literal|null
condition|)
block|{
name|Long
name|period
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|periodValue
argument_list|)
decl_stmt|;
name|KarafTimerTask
name|task
init|=
operator|new
name|KarafTimerTask
argument_list|(
name|id
argument_list|,
name|service
argument_list|,
name|period
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|schedule
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unschedules the execution of the Runnable Service of the {@link ServiceEvent}.      *      * @param event      */
specifier|protected
name|void
name|unscheduleRunnableService
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
name|ServiceReference
name|reference
init|=
name|event
operator|.
name|getServiceReference
argument_list|()
decl_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
name|KarafTimerTask
operator|.
name|ID_PROPERTY
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|unschedule
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

