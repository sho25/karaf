begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
block|{
specifier|private
name|TaskScheduler
name|scheduler
init|=
operator|new
name|TaskScheduler
argument_list|()
decl_stmt|;
specifier|private
name|RunableServiceListener
name|listener
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|filter
init|=
literal|"(&(objectclass=%s)(&(%s>= 0)(%s>= 0)))"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|listener
operator|=
operator|new
name|RunableServiceListener
argument_list|(
name|context
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|//register scheduler service
name|context
operator|.
name|registerService
argument_list|(
name|scheduler
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|scheduler
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
comment|//register service listener
name|context
operator|.
name|addServiceListener
argument_list|(
name|listener
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|filter
argument_list|,
name|Runnable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|KarafTimerTask
operator|.
name|ID_PROPERTY
argument_list|,
name|KarafTimerTask
operator|.
name|PERIOD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{      }
block|}
end_class

end_unit

