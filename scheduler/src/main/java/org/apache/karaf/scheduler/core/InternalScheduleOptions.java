begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|ScheduleOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|CronExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|CronScheduleBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SimpleScheduleBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|TriggerBuilder
import|;
end_import

begin_comment
comment|/**  * Scheduler options provide an extensible way of defining how to schedule a job.  * @since 2.3  */
end_comment

begin_class
specifier|public
class|class
name|InternalScheduleOptions
implements|implements
name|ScheduleOptions
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|2632689849349264449L
decl_stmt|;
specifier|public
name|String
name|name
decl_stmt|;
specifier|public
name|boolean
name|canRunConcurrently
init|=
literal|false
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Serializable
argument_list|>
name|configuration
decl_stmt|;
specifier|public
name|String
name|schedule
decl_stmt|;
specifier|private
name|Date
name|date
decl_stmt|;
specifier|private
name|int
name|times
decl_stmt|;
specifier|private
name|long
name|period
decl_stmt|;
specifier|private
name|String
name|expression
decl_stmt|;
specifier|public
name|InternalScheduleOptions
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|this
operator|.
name|times
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|period
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|schedule
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|expression
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|InternalScheduleOptions
parameter_list|(
name|Date
name|date
parameter_list|,
name|int
name|times
parameter_list|,
name|long
name|period
parameter_list|)
block|{
name|this
operator|.
name|date
operator|=
name|date
expr_stmt|;
name|this
operator|.
name|times
operator|=
name|times
expr_stmt|;
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
name|this
operator|.
name|schedule
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|expression
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|InternalScheduleOptions
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|this
operator|.
name|date
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|times
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|period
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|schedule
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
comment|/**      * @see org.apache.karaf.scheduler.ScheduleOptions#config(java.util.Map)      */
specifier|public
name|ScheduleOptions
name|config
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Serializable
argument_list|>
name|config
parameter_list|)
block|{
name|this
operator|.
name|configuration
operator|=
name|config
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @see org.apache.karaf.scheduler.ScheduleOptions#name(java.lang.String)      */
specifier|public
name|ScheduleOptions
name|name
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * @see org.apache.karaf.scheduler.ScheduleOptions#canRunConcurrently(boolean)      */
specifier|public
name|ScheduleOptions
name|canRunConcurrently
parameter_list|(
specifier|final
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|canRunConcurrently
operator|=
name|flag
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canRunConcurrently
parameter_list|()
block|{
return|return
name|this
operator|.
name|canRunConcurrently
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|schedule
parameter_list|()
block|{
return|return
name|schedule
return|;
block|}
specifier|private
name|String
name|formatDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
name|Calendar
name|c
init|=
name|GregorianCalendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
return|return
name|DatatypeConverter
operator|.
name|printDateTime
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|public
name|TriggerBuilder
argument_list|<
name|?
extends|extends
name|Trigger
argument_list|>
name|compile
parameter_list|()
block|{
name|TriggerBuilder
argument_list|<
name|?
extends|extends
name|Trigger
argument_list|>
name|trigger
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|expression
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Date can't be null"
argument_list|)
throw|;
block|}
else|else
block|{
name|boolean
name|dateOnly
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|times
operator|<
literal|2
operator|&&
name|times
operator|!=
operator|-
literal|1
condition|)
block|{
name|dateOnly
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|period
operator|<
literal|1
condition|)
block|{
name|dateOnly
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dateOnly
condition|)
block|{
name|trigger
operator|=
name|TriggerBuilder
operator|.
name|newTrigger
argument_list|()
operator|.
name|startAt
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|this
operator|.
name|schedule
operator|=
literal|"at("
operator|+
name|formatDate
argument_list|(
name|date
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|SimpleScheduleBuilder
name|simpleScheduleBuilder
decl_stmt|;
if|if
condition|(
name|times
operator|==
operator|-
literal|1
condition|)
block|{
name|simpleScheduleBuilder
operator|=
name|SimpleScheduleBuilder
operator|.
name|simpleSchedule
argument_list|()
operator|.
name|repeatForever
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|simpleScheduleBuilder
operator|=
name|SimpleScheduleBuilder
operator|.
name|simpleSchedule
argument_list|()
operator|.
name|withRepeatCount
argument_list|(
name|times
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|trigger
operator|=
name|TriggerBuilder
operator|.
name|newTrigger
argument_list|()
operator|.
name|startAt
argument_list|(
name|date
argument_list|)
operator|.
name|withSchedule
argument_list|(
name|simpleScheduleBuilder
operator|.
name|withIntervalInMilliseconds
argument_list|(
name|period
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|schedule
operator|=
literal|"at("
operator|+
name|formatDate
argument_list|(
name|date
argument_list|)
operator|+
literal|", "
operator|+
name|times
operator|+
literal|", "
operator|+
name|period
operator|+
literal|")"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|CronExpression
operator|.
name|isValidExpression
argument_list|(
name|expression
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expression is not valid: "
operator|+
name|expression
argument_list|)
throw|;
block|}
name|trigger
operator|=
name|TriggerBuilder
operator|.
name|newTrigger
argument_list|()
operator|.
name|withSchedule
argument_list|(
name|CronScheduleBuilder
operator|.
name|cronSchedule
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|schedule
operator|=
literal|"cron("
operator|+
name|expression
operator|+
literal|")"
expr_stmt|;
block|}
return|return
name|trigger
return|;
block|}
block|}
end_class

end_unit

