begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDetail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SchedulerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|TriggerKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|StdScheduler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|KarafStdScheduler
extends|extends
name|StdScheduler
block|{
specifier|private
specifier|final
name|QuartzSchedulerStorage
name|storage
decl_stmt|;
specifier|public
name|KarafStdScheduler
parameter_list|(
specifier|final
name|org
operator|.
name|quartz
operator|.
name|core
operator|.
name|QuartzScheduler
name|scheduler
parameter_list|)
block|{
name|super
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|this
operator|.
name|storage
operator|=
operator|new
name|QuartzSchedulerStorage
argument_list|()
expr_stmt|;
block|}
name|QuartzSchedulerStorage
name|getStorage
parameter_list|()
block|{
return|return
name|this
operator|.
name|storage
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|scheduleJob
parameter_list|(
specifier|final
name|JobDetail
name|jobDetail
parameter_list|,
specifier|final
name|Trigger
name|trigger
parameter_list|)
throws|throws
name|SchedulerException
block|{
name|JobDataMap
name|context
init|=
operator|(
name|JobDataMap
operator|)
name|jobDetail
operator|.
name|getJobDataMap
argument_list|()
operator|.
name|get
argument_list|(
name|QuartzScheduler
operator|.
name|DATA_MAP_CONTEXT
argument_list|)
decl_stmt|;
name|storage
operator|.
name|put
argument_list|(
name|jobDetail
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|jobDetail
operator|.
name|getJobDataMap
argument_list|()
operator|.
name|remove
argument_list|(
name|QuartzScheduler
operator|.
name|DATA_MAP_CONTEXT
argument_list|)
expr_stmt|;
specifier|final
name|Date
name|date
init|=
name|super
operator|.
name|scheduleJob
argument_list|(
name|jobDetail
argument_list|,
name|trigger
argument_list|)
decl_stmt|;
return|return
name|date
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteJob
parameter_list|(
name|JobKey
name|jobKey
parameter_list|)
throws|throws
name|SchedulerException
block|{
specifier|final
name|String
name|contextKey
init|=
name|jobKey
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextKey
operator|!=
literal|null
condition|)
block|{
name|storage
operator|.
name|release
argument_list|(
name|contextKey
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|deleteJob
argument_list|(
name|jobKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteJobs
parameter_list|(
name|List
argument_list|<
name|JobKey
argument_list|>
name|jobKeys
parameter_list|)
throws|throws
name|SchedulerException
block|{
if|if
condition|(
name|jobKeys
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|contextKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JobKey
name|jobKey
range|:
name|jobKeys
control|)
block|{
name|contextKeys
operator|.
name|add
argument_list|(
name|jobKey
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|contextKey
range|:
name|contextKeys
control|)
block|{
name|storage
operator|.
name|release
argument_list|(
name|contextKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|deleteJobs
argument_list|(
name|jobKeys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|unscheduleJob
parameter_list|(
name|TriggerKey
name|triggerKey
parameter_list|)
throws|throws
name|SchedulerException
block|{
specifier|final
name|Trigger
name|trigger
init|=
name|getTrigger
argument_list|(
name|triggerKey
argument_list|)
decl_stmt|;
specifier|final
name|String
name|contextKey
init|=
operator|(
name|trigger
operator|.
name|getJobKey
argument_list|()
operator|!=
literal|null
operator|)
condition|?
name|trigger
operator|.
name|getJobKey
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|contextKey
operator|!=
literal|null
condition|)
block|{
name|storage
operator|.
name|release
argument_list|(
name|contextKey
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|unscheduleJob
argument_list|(
name|triggerKey
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|unscheduleJobs
parameter_list|(
name|List
argument_list|<
name|TriggerKey
argument_list|>
name|triggerKeys
parameter_list|)
throws|throws
name|SchedulerException
block|{
if|if
condition|(
name|triggerKeys
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|contextKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TriggerKey
name|triggerKey
range|:
name|triggerKeys
control|)
block|{
specifier|final
name|Trigger
name|trigger
init|=
name|getTrigger
argument_list|(
name|triggerKey
argument_list|)
decl_stmt|;
specifier|final
name|String
name|contextKey
init|=
name|trigger
operator|.
name|getJobKey
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|contextKey
operator|!=
literal|null
condition|)
block|{
name|contextKeys
operator|.
name|add
argument_list|(
name|contextKey
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|contextKey
range|:
name|contextKeys
control|)
block|{
name|storage
operator|.
name|release
argument_list|(
name|contextKey
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|unscheduleJobs
argument_list|(
name|triggerKeys
argument_list|)
return|;
block|}
block|}
end_class

end_unit

