begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|BaseActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|annotation
operator|.
name|Managed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|annotation
operator|.
name|ProvideService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|annotation
operator|.
name|Services
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|jdbcjobstore
operator|.
name|JobStoreSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|jdbcjobstore
operator|.
name|JobStoreTX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|jdbcjobstore
operator|.
name|StdJDBCDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|simpl
operator|.
name|RAMJobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|simpl
operator|.
name|SimpleThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|spi
operator|.
name|JobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|spi
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|utils
operator|.
name|ConnectionProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
annotation|@
name|Services
argument_list|(
name|provides
operator|=
annotation|@
name|ProvideService
argument_list|(
name|Scheduler
operator|.
name|class
argument_list|)
argument_list|)
annotation|@
name|Managed
argument_list|(
literal|"org.apache.karaf.scheduler.quartz"
argument_list|)
specifier|public
class|class
name|Activator
extends|extends
name|BaseActivator
implements|implements
name|ManagedService
block|{
specifier|private
name|QuartzScheduler
name|scheduler
decl_stmt|;
specifier|private
name|WhiteboardHandler
name|whiteboardHandler
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|getConfiguration
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|getConfiguration
argument_list|()
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"org.quartz"
argument_list|)
condition|)
block|{
name|Object
name|value
init|=
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|scheduler
operator|=
operator|new
name|QuartzScheduler
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|Scheduler
operator|.
name|class
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|whiteboardHandler
operator|=
operator|new
name|WhiteboardHandler
argument_list|(
name|bundleContext
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|SchedulerMBeanImpl
name|mBean
init|=
operator|new
name|SchedulerMBeanImpl
argument_list|()
decl_stmt|;
name|mBean
operator|.
name|setScheduler
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|registerMBean
argument_list|(
name|mBean
argument_list|,
literal|"type=scheduler"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|whiteboardHandler
operator|!=
literal|null
condition|)
block|{
name|whiteboardHandler
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|whiteboardHandler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

