begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The quartz based implementation of the scheduler.  *  */
end_comment

begin_class
specifier|public
class|class
name|WhiteboardHandler
block|{
comment|/** Default logger. */
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Scheduler
name|scheduler
decl_stmt|;
specifier|private
name|ServiceTracker
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|serviceTracker
decl_stmt|;
specifier|public
name|WhiteboardHandler
parameter_list|(
specifier|final
name|BundleContext
name|context
parameter_list|,
name|Scheduler
name|scheduler
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
name|this
operator|.
name|serviceTracker
operator|=
operator|new
name|ServiceTracker
argument_list|<>
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|createFilter
argument_list|(
literal|"(|("
operator|+
name|Constants
operator|.
name|OBJECTCLASS
operator|+
literal|"="
operator|+
name|Runnable
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|+
literal|"("
operator|+
name|Constants
operator|.
name|OBJECTCLASS
operator|+
literal|"="
operator|+
name|Job
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"))"
argument_list|)
argument_list|,
operator|new
name|ServiceTrackerCustomizer
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
specifier|synchronized
name|void
name|removedService
parameter_list|(
specifier|final
name|ServiceReference
name|reference
parameter_list|,
specifier|final
name|Object
name|service
parameter_list|)
block|{
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|unregister
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|modifiedService
parameter_list|(
specifier|final
name|ServiceReference
name|reference
parameter_list|,
specifier|final
name|Object
name|service
parameter_list|)
block|{
name|unregister
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Object
name|addingService
parameter_list|(
specifier|final
name|ServiceReference
name|reference
parameter_list|)
block|{
specifier|final
name|Object
name|obj
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|register
argument_list|(
name|reference
argument_list|,
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
comment|/**      * Deactivate this component.      */
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|this
operator|.
name|serviceTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create unique identifier      */
specifier|private
name|String
name|getServiceIdentifier
parameter_list|(
specifier|final
name|ServiceReference
name|ref
parameter_list|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|"Registered Service"
expr_stmt|;
block|}
block|}
comment|// now append service id to create a unique identifier
name|name
operator|=
name|name
operator|+
literal|"."
operator|+
name|ref
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
comment|/**      * Register a job or task      */
specifier|private
name|void
name|register
parameter_list|(
specifier|final
name|ServiceReference
name|ref
parameter_list|,
specifier|final
name|Object
name|job
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|getServiceIdentifier
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|Boolean
name|concurrent
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_CONCURRENT
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_CONCURRENT
argument_list|)
operator|instanceof
name|Boolean
condition|)
block|{
name|concurrent
operator|=
operator|(
name|Boolean
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_CONCURRENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|concurrent
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_CONCURRENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|expression
init|=
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_EXPRESSION
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|expression
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scheduler
operator|.
name|schedule
argument_list|(
name|job
argument_list|,
name|this
operator|.
name|scheduler
operator|.
name|EXPR
argument_list|(
name|expression
argument_list|)
operator|.
name|name
argument_list|(
name|name
argument_list|)
operator|.
name|canRunConcurrently
argument_list|(
name|concurrent
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|times
init|=
operator|-
literal|1
decl_stmt|;
block|{
specifier|final
name|Object
name|v
init|=
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_TIMES
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|v
condition|)
block|{
if|if
condition|(
name|v
operator|instanceof
name|Integer
condition|)
block|{
name|times
operator|=
operator|(
name|Integer
operator|)
name|v
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Long
condition|)
block|{
name|times
operator|=
operator|(
operator|(
name|Long
operator|)
name|v
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Number
condition|)
block|{
name|times
operator|=
operator|(
operator|(
name|Number
operator|)
name|v
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|times
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Long
name|period
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_PERIOD
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_PERIOD
argument_list|)
operator|instanceof
name|Long
condition|)
block|{
name|period
operator|=
operator|(
name|Long
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_PERIOD
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|period
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_PERIOD
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|period
operator|<
literal|1
condition|)
block|{
name|this
operator|.
name|logger
operator|.
name|debug
argument_list|(
literal|"Ignoring service {} : scheduler period is less than 1."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|times
operator|<
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|logger
operator|.
name|debug
argument_list|(
literal|"Ignoring service {} : scheduler times is defined but is less than -1."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|immediate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_IMMEDIATE
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_IMMEDIATE
argument_list|)
operator|instanceof
name|Boolean
condition|)
block|{
name|immediate
operator|=
operator|(
name|Boolean
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_IMMEDIATE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|immediate
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_IMMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Date
name|date
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|immediate
condition|)
block|{
name|date
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|period
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scheduler
operator|.
name|schedule
argument_list|(
name|job
argument_list|,
name|this
operator|.
name|scheduler
operator|.
name|AT
argument_list|(
name|date
argument_list|,
name|times
argument_list|,
name|period
argument_list|)
operator|.
name|name
argument_list|(
name|name
argument_list|)
operator|.
name|canRunConcurrently
argument_list|(
operator|(
name|concurrent
operator|!=
literal|null
condition|?
name|concurrent
else|:
literal|true
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|logger
operator|.
name|debug
argument_list|(
literal|"Ignoring service {} : no scheduling property found."
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error scheduling job"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unregister a service.      */
specifier|private
name|void
name|unregister
parameter_list|(
specifier|final
name|ServiceReference
name|reference
parameter_list|,
specifier|final
name|Object
name|service
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|getServiceIdentifier
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|unschedule
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

