begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_class
specifier|public
class|class
name|PackageRequirement
block|{
specifier|private
name|String
name|filter
decl_stmt|;
specifier|private
name|boolean
name|optional
decl_stmt|;
specifier|private
name|Bundle
name|bundle
decl_stmt|;
specifier|private
name|boolean
name|resolveable
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|packagePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
literal|"(osgi.wiring.package="
argument_list|)
operator|+
literal|"(.*?)\\).*"
argument_list|)
decl_stmt|;
specifier|public
name|PackageRequirement
parameter_list|(
name|String
name|filter
parameter_list|,
name|boolean
name|optional
parameter_list|,
name|Bundle
name|bundle
parameter_list|,
name|boolean
name|resolveable
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|resolveable
operator|=
name|resolveable
expr_stmt|;
block|}
specifier|public
name|Bundle
name|getBundle
parameter_list|()
block|{
return|return
name|bundle
return|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
specifier|public
name|boolean
name|isResolveable
parameter_list|()
block|{
return|return
name|resolveable
return|;
block|}
specifier|public
name|String
name|getPackageName
parameter_list|()
block|{
name|Matcher
name|matcher
init|=
name|packagePattern
operator|.
name|matcher
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|matcher
operator|.
name|matches
argument_list|()
expr_stmt|;
return|return
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

