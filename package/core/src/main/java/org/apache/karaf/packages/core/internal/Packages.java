begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackagesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Bundles MBean implementation.  */
end_comment

begin_class
specifier|public
class|class
name|Packages
extends|extends
name|StandardMBean
implements|implements
name|PackagesMBean
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PackageService
name|packageService
decl_stmt|;
specifier|public
name|Packages
parameter_list|(
name|PackageService
name|packageService
parameter_list|)
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|PackagesMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|packageService
operator|=
name|packageService
expr_stmt|;
block|}
specifier|public
name|TabularData
name|getExports
parameter_list|()
block|{
try|try
block|{
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Version"
block|,
literal|"ID"
block|,
literal|"Bundle Name"
block|}
decl_stmt|;
name|CompositeType
name|bundleType
init|=
operator|new
name|CompositeType
argument_list|(
literal|"PackageExport"
argument_list|,
literal|"Exported packages"
argument_list|,
name|names
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Package name"
block|,
literal|"Version of the Package"
block|,
literal|"ID of the Bundle"
block|,
literal|"Bundle symbolic name"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
decl_stmt|;
name|TabularType
name|tableType
init|=
operator|new
name|TabularType
argument_list|(
literal|"PackageExports"
argument_list|,
literal|"Exported packages"
argument_list|,
name|bundleType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Name"
block|,
literal|"Version"
block|,
literal|"ID"
block|}
argument_list|)
decl_stmt|;
name|TabularData
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tableType
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|PackageVersion
argument_list|>
name|exports
init|=
name|packageService
operator|.
name|getExports
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|exports
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PackageVersion
name|export
init|=
name|exports
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|export
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|Object
index|[]
name|data
init|=
operator|new
name|Object
index|[]
block|{
name|export
operator|.
name|getPackageName
argument_list|()
block|,
name|export
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|bundle
operator|.
name|getBundleId
argument_list|()
block|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
block|}
decl_stmt|;
name|CompositeData
name|comp
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|bundleType
argument_list|,
name|names
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|comp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|table
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// To avoid the exception gets swallowed by jmx
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getImports
parameter_list|()
block|{
try|try
block|{
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[]
block|{
literal|"PackageName"
block|,
literal|"Filter"
block|,
literal|"Optional"
block|,
literal|"ID"
block|,
literal|"Bundle Name"
block|,
literal|"Resolvable"
block|}
decl_stmt|;
name|CompositeType
name|bundleType
init|=
operator|new
name|CompositeType
argument_list|(
literal|"PackageImports"
argument_list|,
literal|"Imported packages"
argument_list|,
name|names
argument_list|,
name|names
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|}
argument_list|)
decl_stmt|;
name|TabularType
name|tableType
init|=
operator|new
name|TabularType
argument_list|(
literal|"PackageImports"
argument_list|,
literal|"Imported packages"
argument_list|,
name|bundleType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Filter"
block|,
literal|"ID"
block|}
argument_list|)
decl_stmt|;
name|TabularData
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tableType
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|PackageRequirement
argument_list|>
name|imports
init|=
name|packageService
operator|.
name|getImports
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|imports
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PackageRequirement
name|req
init|=
name|imports
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
index|[]
name|data
init|=
operator|new
name|Object
index|[]
block|{
name|req
operator|.
name|getPackageName
argument_list|()
block|,
name|req
operator|.
name|getFilter
argument_list|()
block|,
name|req
operator|.
name|isOptional
argument_list|()
block|,
name|req
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
block|,
name|req
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
block|,
name|req
operator|.
name|isResolveable
argument_list|()
block|}
decl_stmt|;
name|CompositeData
name|comp
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|bundleType
argument_list|,
name|names
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|comp
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// To avoid the exception gets swallowed by jmx
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

