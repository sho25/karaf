begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|AndExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|FilterParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|NotExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|SimpleItem
import|;
end_import

begin_comment
comment|/**  * Helps to parse the expression  *   * This class is internal to hide the FilterParser in the PackageService api  */
end_comment

begin_class
class|class
name|ImportDetails
block|{
name|String
name|name
decl_stmt|;
name|String
name|minVersion
decl_stmt|;
name|String
name|maxVersion
decl_stmt|;
specifier|public
name|ImportDetails
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|Expression
name|filterExpr
init|=
operator|new
name|FilterParser
argument_list|()
operator|.
name|parse
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterExpr
operator|instanceof
name|AndExpression
condition|)
block|{
name|AndExpression
name|andExpr
init|=
operator|(
name|AndExpression
operator|)
name|filterExpr
decl_stmt|;
for|for
control|(
name|Expression
name|expr
range|:
name|andExpr
operator|.
name|expressions
control|)
block|{
name|parseSimpleItem
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
name|parseSimpleItem
argument_list|(
name|filterExpr
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseSimpleItem
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|SimpleItem
condition|)
block|{
name|SimpleItem
name|simpleItem
init|=
operator|(
name|SimpleItem
operator|)
name|expr
decl_stmt|;
if|if
condition|(
literal|"osgi.wiring.package"
operator|.
name|equals
argument_list|(
name|simpleItem
operator|.
name|attr
argument_list|)
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|simpleItem
operator|.
name|value
expr_stmt|;
block|}
if|if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|simpleItem
operator|.
name|attr
argument_list|)
condition|)
block|{
name|this
operator|.
name|minVersion
operator|=
name|simpleItem
operator|.
name|value
expr_stmt|;
block|}
block|}
if|if
condition|(
name|expr
operator|instanceof
name|NotExpression
condition|)
block|{
name|SimpleItem
name|simpleItem
init|=
call|(
name|SimpleItem
call|)
argument_list|(
operator|(
name|NotExpression
operator|)
name|expr
argument_list|)
operator|.
name|expression
decl_stmt|;
name|this
operator|.
name|maxVersion
operator|=
name|simpleItem
operator|.
name|value
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

