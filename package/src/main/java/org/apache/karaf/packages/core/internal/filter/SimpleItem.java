begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
package|;
end_package

begin_class
specifier|public
class|class
name|SimpleItem
implements|implements
name|Expression
block|{
enum|enum
name|FilterType
block|{
name|equal
block|,
name|gt
block|,
name|lt
block|}
empty_stmt|;
specifier|public
name|String
name|attr
decl_stmt|;
specifier|public
name|FilterType
name|filterType
decl_stmt|;
specifier|public
name|String
name|value
decl_stmt|;
specifier|public
name|SimpleItem
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|filterType
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|attr
operator|=
name|attr
expr_stmt|;
name|this
operator|.
name|filterType
operator|=
name|toFilterType
argument_list|(
name|filterType
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|private
name|FilterType
name|toFilterType
parameter_list|(
name|String
name|typeSt
parameter_list|)
block|{
if|if
condition|(
literal|"="
operator|.
name|equals
argument_list|(
name|typeSt
argument_list|)
condition|)
block|{
return|return
name|FilterType
operator|.
name|equal
return|;
block|}
if|if
condition|(
literal|">="
operator|.
name|equals
argument_list|(
name|typeSt
argument_list|)
condition|)
block|{
return|return
name|FilterType
operator|.
name|gt
return|;
block|}
if|if
condition|(
literal|"<="
operator|.
name|equals
argument_list|(
name|typeSt
argument_list|)
condition|)
block|{
return|return
name|FilterType
operator|.
name|lt
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid FilterType "
operator|+
name|typeSt
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

