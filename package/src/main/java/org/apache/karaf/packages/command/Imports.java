begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|table
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|table
operator|.
name|ShellTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"package"
argument_list|,
name|name
operator|=
literal|"imports"
argument_list|,
name|description
operator|=
literal|"Lists imported packages and the bundles that import them"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|Imports
implements|implements
name|Action
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--filter"
argument_list|,
name|description
operator|=
literal|"Only show package instead of full filter"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|showFilter
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--no-format"
argument_list|,
name|description
operator|=
literal|"Disable table rendered output"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|noFormat
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--show-name-only"
argument_list|,
name|description
operator|=
literal|"Show only package name"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|showOnlyName
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-p"
argument_list|,
name|description
operator|=
literal|"Only show package starting with given name"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|String
name|packageName
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-b"
argument_list|,
name|description
operator|=
literal|"Only show imports of the given bundle id"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|Integer
name|bundleId
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|PackageService
name|packageService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|PackageRequirement
argument_list|>
name|imports
init|=
name|packageService
operator|.
name|getImports
argument_list|()
decl_stmt|;
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|showFilter
condition|)
block|{
name|table
operator|.
name|column
argument_list|(
literal|"Filter"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Optional"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Bundle Name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|column
argument_list|(
literal|"Package"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|showOnlyName
condition|)
block|{
name|table
operator|.
name|column
argument_list|(
literal|"Version"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Optional"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Bundle Name"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|PackageRequirement
name|req
range|:
name|imports
control|)
block|{
if|if
condition|(
name|matchesFilter
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|Bundle
name|bundle
init|=
name|req
operator|.
name|getBundle
argument_list|()
decl_stmt|;
name|Row
name|row
init|=
name|table
operator|.
name|addRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|showFilter
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|req
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|getOptional
argument_list|(
name|req
argument_list|)
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|addContent
argument_list|(
name|req
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|showOnlyName
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|req
operator|.
name|getVersionRange
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|getOptional
argument_list|(
name|req
argument_list|)
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|table
operator|.
name|print
argument_list|(
name|System
operator|.
name|out
argument_list|,
operator|!
name|noFormat
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|matchesFilter
parameter_list|(
name|PackageRequirement
name|req
parameter_list|)
block|{
return|return
operator|(
name|packageName
operator|==
literal|null
operator|||
name|req
operator|.
name|getPackageName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|packageName
argument_list|)
operator|)
operator|&&
operator|(
name|bundleId
operator|==
literal|null
operator|||
name|req
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|==
name|bundleId
operator|)
return|;
block|}
specifier|private
name|String
name|getOptional
parameter_list|(
name|PackageRequirement
name|req
parameter_list|)
block|{
if|if
condition|(
operator|!
name|req
operator|.
name|isOptional
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|(
name|req
operator|.
name|isResolveable
argument_list|()
condition|?
literal|"resolved"
else|:
literal|"unresolved"
operator|)
return|;
block|}
block|}
end_class

end_unit

