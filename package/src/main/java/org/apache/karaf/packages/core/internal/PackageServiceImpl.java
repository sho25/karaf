begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|PackageVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_class
specifier|public
class|class
name|PackageServiceImpl
implements|implements
name|PackageService
block|{
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|PackageServiceImpl
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|PackageVersion
argument_list|>
name|getExports
parameter_list|()
block|{
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|PackageVersion
argument_list|>
name|packageVersionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|PackageVersion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|BundleRevision
name|rev
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|caps
init|=
name|rev
operator|.
name|getDeclaredCapabilities
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleCapability
name|cap
range|:
name|caps
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attr
init|=
name|cap
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|packageName
init|=
operator|(
name|String
operator|)
name|attr
operator|.
name|get
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
operator|(
name|Version
operator|)
name|attr
operator|.
name|get
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|packageName
operator|+
literal|":"
operator|+
name|version
operator|.
name|toString
argument_list|()
decl_stmt|;
name|PackageVersion
name|pVer
init|=
name|packageVersionMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pVer
operator|==
literal|null
condition|)
block|{
name|pVer
operator|=
operator|new
name|PackageVersion
argument_list|(
name|packageName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|packageVersionMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|pVer
argument_list|)
expr_stmt|;
block|}
name|pVer
operator|.
name|addBundle
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|packageVersionMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|SortedMap
argument_list|<
name|String
argument_list|,
name|PackageRequirement
argument_list|>
name|getImports
parameter_list|()
block|{
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|PackageRequirement
argument_list|>
name|filterMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|PackageRequirement
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|BundleRevision
name|rev
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|reqs
init|=
name|rev
operator|.
name|getDeclaredRequirements
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleRequirement
name|req
range|:
name|reqs
control|)
block|{
name|PackageRequirement
name|preq
init|=
name|create
argument_list|(
name|req
argument_list|,
name|bundle
argument_list|)
decl_stmt|;
name|filterMap
operator|.
name|put
argument_list|(
name|preq
operator|.
name|getFilter
argument_list|()
argument_list|,
name|preq
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|filterMap
return|;
block|}
specifier|private
name|boolean
name|checkResolveAble
parameter_list|(
name|BundleRequirement
name|req
parameter_list|)
block|{
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|BundleRevision
name|rev
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|caps
init|=
name|rev
operator|.
name|getDeclaredCapabilities
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleCapability
name|cap
range|:
name|caps
control|)
block|{
if|if
condition|(
name|req
operator|.
name|matches
argument_list|(
name|cap
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExports
parameter_list|(
name|long
name|bundleId
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
name|BundleRevision
name|rev
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|caps
init|=
name|rev
operator|.
name|getDeclaredCapabilities
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|exports
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleCapability
name|cap
range|:
name|caps
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attr
init|=
name|cap
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|packageName
init|=
operator|(
name|String
operator|)
name|attr
operator|.
name|get
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
name|exports
operator|.
name|add
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
block|}
return|return
name|exports
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getImports
parameter_list|(
name|long
name|bundleId
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
name|BundleRevision
name|rev
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|reqs
init|=
name|rev
operator|.
name|getDeclaredRequirements
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|imports
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleRequirement
name|req
range|:
name|reqs
control|)
block|{
name|PackageRequirement
name|packageReq
init|=
name|create
argument_list|(
name|req
argument_list|,
name|bundle
argument_list|)
decl_stmt|;
name|imports
operator|.
name|add
argument_list|(
name|packageReq
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|imports
return|;
block|}
name|PackageRequirement
name|create
parameter_list|(
name|BundleRequirement
name|req
parameter_list|,
name|Bundle
name|bundle
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attr
init|=
name|req
operator|.
name|getDirectives
argument_list|()
decl_stmt|;
name|String
name|filter
init|=
name|attr
operator|.
name|get
argument_list|(
literal|"filter"
argument_list|)
decl_stmt|;
name|String
name|resolution
init|=
name|attr
operator|.
name|get
argument_list|(
literal|"resolution"
argument_list|)
decl_stmt|;
name|boolean
name|optional
init|=
literal|"optional"
operator|.
name|equals
argument_list|(
name|resolution
argument_list|)
decl_stmt|;
name|boolean
name|resolveable
init|=
name|checkResolveAble
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|ImportDetails
name|details
init|=
operator|new
name|ImportDetails
argument_list|(
name|filter
argument_list|)
decl_stmt|;
return|return
operator|new
name|PackageRequirement
argument_list|(
name|filter
argument_list|,
name|optional
argument_list|,
name|bundle
argument_list|,
name|resolveable
argument_list|,
name|details
operator|.
name|name
argument_list|,
name|details
operator|.
name|minVersion
argument_list|,
name|details
operator|.
name|maxVersion
argument_list|)
return|;
block|}
block|}
end_class

end_unit

