begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|ExprTokenizer
block|{
specifier|private
name|String
name|expr
decl_stmt|;
specifier|private
name|int
name|currentPos
decl_stmt|;
name|String
index|[]
name|operators
init|=
block|{
literal|"("
block|,
literal|")"
block|,
literal|"!"
block|,
literal|"&"
block|,
literal|"="
block|,
literal|">="
block|}
decl_stmt|;
name|Map
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
name|operatorMap
decl_stmt|;
specifier|public
name|ExprTokenizer
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expr
expr_stmt|;
name|this
operator|.
name|currentPos
operator|=
literal|0
expr_stmt|;
name|operatorMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Character
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|operator
range|:
name|operators
control|)
block|{
name|operatorMap
operator|.
name|put
argument_list|(
name|operator
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|operator
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|peekNextToken
parameter_list|()
block|{
name|int
name|oldPos
init|=
name|currentPos
decl_stmt|;
name|String
name|token
init|=
name|nextToken
argument_list|()
decl_stmt|;
name|currentPos
operator|=
name|oldPos
expr_stmt|;
return|return
name|token
return|;
block|}
specifier|public
name|String
name|nextToken
parameter_list|()
block|{
if|if
condition|(
name|currentPos
operator|>=
name|expr
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
while|while
condition|(
name|isWhiteSpace
argument_list|()
condition|)
block|{
name|currentPos
operator|++
expr_stmt|;
block|}
name|Character
name|first
init|=
name|expr
operator|.
name|charAt
argument_list|(
name|currentPos
argument_list|)
decl_stmt|;
name|String
name|operator
init|=
name|operatorMap
operator|.
name|get
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|operator
operator|!=
literal|null
condition|)
block|{
name|currentPos
operator|+=
name|operator
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|operator
return|;
block|}
name|int
name|firstPos
init|=
name|currentPos
decl_stmt|;
while|while
condition|(
name|currentPos
operator|<
name|expr
operator|.
name|length
argument_list|()
operator|&&
operator|!
name|operatorMap
operator|.
name|containsKey
argument_list|(
name|expr
operator|.
name|charAt
argument_list|(
name|currentPos
argument_list|)
argument_list|)
operator|&&
operator|!
name|isWhiteSpace
argument_list|()
condition|)
block|{
name|currentPos
operator|++
expr_stmt|;
block|}
return|return
name|expr
operator|.
name|substring
argument_list|(
name|firstPos
argument_list|,
name|currentPos
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isWhiteSpace
parameter_list|()
block|{
return|return
name|expr
operator|.
name|charAt
argument_list|(
name|currentPos
argument_list|)
operator|==
literal|' '
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|expr
operator|.
name|substring
argument_list|(
name|currentPos
argument_list|)
return|;
block|}
block|}
end_class

end_unit

