begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|AndExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|FilterParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|NotExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|SimpleItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|packages
operator|.
name|core
operator|.
name|internal
operator|.
name|filter
operator|.
name|SimpleItem
operator|.
name|FilterType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FilterParserTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSimpleItem
parameter_list|()
block|{
name|Expression
name|expr
init|=
operator|new
name|FilterParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|" (a= b)"
argument_list|)
decl_stmt|;
name|SimpleItem
name|item
init|=
operator|(
name|SimpleItem
operator|)
name|expr
decl_stmt|;
name|checkItem
argument_list|(
name|item
argument_list|,
literal|"a"
argument_list|,
name|FilterType
operator|.
name|equal
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkItem
parameter_list|(
name|Expression
name|expr
parameter_list|,
name|String
name|expectedAttr
parameter_list|,
name|FilterType
name|expectedFilterType
parameter_list|,
name|String
name|expectedValue
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|expr
operator|instanceof
name|SimpleItem
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"SimpleItem expected"
argument_list|)
expr_stmt|;
block|}
name|SimpleItem
name|item
init|=
operator|(
name|SimpleItem
operator|)
name|expr
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAttr
argument_list|,
name|item
operator|.
name|attr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedFilterType
argument_list|,
name|item
operator|.
name|filterType
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedValue
argument_list|,
name|item
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotSimpleItem
parameter_list|()
block|{
name|NotExpression
name|not
init|=
operator|(
name|NotExpression
operator|)
operator|new
name|FilterParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"(!(a=b))"
argument_list|)
decl_stmt|;
name|checkItem
argument_list|(
name|not
operator|.
name|expression
argument_list|,
literal|"a"
argument_list|,
name|FilterType
operator|.
name|equal
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPackageImport
parameter_list|()
block|{
name|AndExpression
name|expr
init|=
operator|(
name|AndExpression
operator|)
operator|new
name|FilterParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"(&(osgi.wiring.package=org.mypackage)(version>=1.9.0)(!(version>=2.0.0)))"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|expr
operator|.
name|expressions
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkItem
argument_list|(
name|expr
operator|.
name|expressions
index|[
literal|0
index|]
argument_list|,
literal|"osgi.wiring.package"
argument_list|,
name|FilterType
operator|.
name|equal
argument_list|,
literal|"org.mypackage"
argument_list|)
expr_stmt|;
name|checkItem
argument_list|(
name|expr
operator|.
name|expressions
index|[
literal|1
index|]
argument_list|,
literal|"version"
argument_list|,
name|FilterType
operator|.
name|gt
argument_list|,
literal|"1.9.0"
argument_list|)
expr_stmt|;
name|NotExpression
name|notVersion
init|=
operator|(
name|NotExpression
operator|)
name|expr
operator|.
name|expressions
index|[
literal|2
index|]
decl_stmt|;
name|checkItem
argument_list|(
name|notVersion
operator|.
name|expression
argument_list|,
literal|"version"
argument_list|,
name|FilterType
operator|.
name|gt
argument_list|,
literal|"2.0.0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPackageImportNoVersions
parameter_list|()
block|{
name|Expression
name|expr
init|=
operator|new
name|FilterParser
argument_list|()
operator|.
name|parse
argument_list|(
literal|"(osgi.wiring.package=org.mypackage)"
argument_list|)
decl_stmt|;
name|checkItem
argument_list|(
name|expr
argument_list|,
literal|"osgi.wiring.package"
argument_list|,
name|FilterType
operator|.
name|equal
argument_list|,
literal|"org.mypackage"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

