begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|region
operator|.
name|persist
operator|.
name|internal
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|ManifestHeaderUtils
block|{
comment|/**      *      * Splits a delimiter separated string, tolerating presence of non separator commas      * within double quoted segments.      *      * Eg.      * com.ibm.ws.eba.helloWorldService;version="[1.0.0, 1.0.0]"&      * com.ibm.ws.eba.helloWorldService;version="1.0.0"      * com.ibm.ws.eba.helloWorld;version="2";bundle-version="[2,30)"      * com.acme.foo;weirdAttr="one;two;three";weirdDir:="1;2;3"      *  @param value          the value to be split      *  @param delimiter      the delimiter string such as ',' etc.      *  @return List<String>  the components of the split String in a list      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|packages
init|=
name|value
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packages
operator|.
name|length
condition|;
control|)
block|{
name|String
name|tmp
init|=
name|packages
index|[
name|i
operator|++
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// if there is a odd number of " in a string, we need to append
while|while
condition|(
name|count
argument_list|(
name|tmp
argument_list|,
literal|"\""
argument_list|)
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
comment|// check to see if we need to append the next package[i++]
if|if
condition|(
name|i
operator|<
name|packages
operator|.
name|length
condition|)
name|tmp
operator|=
name|tmp
operator|+
name|delimiter
operator|+
name|packages
index|[
name|i
operator|++
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
else|else
comment|// oops. The double quotes are not paired up. We have reached to the end of the string.
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unmatched double quotes: "
operator|+
name|tmp
argument_list|)
throw|;
block|}
name|result
operator|.
name|add
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * count the number of characters in a string      * @param parent The string to be searched      * @param subString The substring to be found      * @return the number of occurrence of the subString      */
specifier|private
specifier|static
name|int
name|count
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|subString
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
name|parent
operator|.
name|indexOf
argument_list|(
name|subString
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|length
argument_list|()
operator|>=
name|i
operator|+
literal|1
condition|)
name|parent
operator|=
name|parent
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|i
operator|=
name|parent
operator|.
name|indexOf
argument_list|(
name|subString
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

