begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|region
operator|.
name|persist
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|region
operator|.
name|persist
operator|.
name|RegionsPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|BundleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|BundleTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RegionsBundleTracker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionsBundleTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BundleTracker
name|bundleTracker
decl_stmt|;
specifier|private
name|RegionsPersistence
name|regionsPersistence
decl_stmt|;
name|void
name|start
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|RegionsPersistence
name|regionsPersistence
parameter_list|)
block|{
name|this
operator|.
name|regionsPersistence
operator|=
name|regionsPersistence
expr_stmt|;
name|int
name|stateMask
init|=
name|Bundle
operator|.
name|INSTALLED
decl_stmt|;
name|bundleTracker
operator|=
operator|new
name|BundleTracker
argument_list|(
name|bundleContext
argument_list|,
name|stateMask
argument_list|,
operator|new
name|BundleTrackerCustomizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|addingBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|bundleEvent
parameter_list|)
block|{
return|return
name|RegionsBundleTracker
operator|.
name|this
operator|.
name|addingBundle
argument_list|(
name|bundle
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|bundleEvent
parameter_list|,
name|Object
name|o
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|removedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|bundleEvent
parameter_list|,
name|Object
name|o
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
name|bundleTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Object
name|addingBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|String
name|region
init|=
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"Region"
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|regionsPersistence
operator|.
name|install
argument_list|(
name|bundle
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Installed bundle "
operator|+
name|bundle
operator|+
literal|" in region "
operator|+
name|region
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Could not install bundle "
operator|+
name|bundle
operator|+
literal|" in region "
operator|+
name|region
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
name|void
name|stop
parameter_list|()
block|{
name|bundleTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

