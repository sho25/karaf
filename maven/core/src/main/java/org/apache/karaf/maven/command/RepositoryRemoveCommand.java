begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|core
operator|.
name|MavenRepositoryURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"maven"
argument_list|,
name|name
operator|=
literal|"repository-remove"
argument_list|,
name|description
operator|=
literal|"Removes Maven repository"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|RepositoryRemoveCommand
extends|extends
name|RepositoryEditCommandSupport
block|{
annotation|@
name|Override
specifier|protected
name|void
name|edit
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|MavenRepositoryURL
index|[]
name|allRepos
parameter_list|,
name|MavenRepositoryURL
index|[]
name|pidRepos
parameter_list|,
name|MavenRepositoryURL
index|[]
name|settingsRepos
parameter_list|)
throws|throws
name|Exception
block|{
name|Optional
argument_list|<
name|MavenRepositoryURL
argument_list|>
name|first
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|allRepos
argument_list|)
operator|.
name|filter
argument_list|(
parameter_list|(
name|repo
parameter_list|)
lambda|->
name|id
operator|.
name|equals
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|first
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Can't find %s repository with ID \"%s\"\n"
argument_list|,
operator|(
name|defaultRepository
condition|?
literal|"default"
else|:
literal|"remote"
operator|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|force
operator|||
name|confirm
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Are you sure to remove repository with ID \"%s\" for URL %s? (y/N) "
argument_list|,
name|id
argument_list|,
name|first
operator|.
name|get
argument_list|()
operator|.
name|getURL
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|defaultRepository
operator|&&
name|first
operator|.
name|get
argument_list|()
operator|.
name|getFrom
argument_list|()
operator|==
name|MavenRepositoryURL
operator|.
name|FROM
operator|.
name|SETTINGS
condition|)
block|{
comment|// remove<server> (credentials) if available
name|List
argument_list|<
name|Server
argument_list|>
name|newServers
init|=
name|mavenSettings
operator|.
name|getServers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|s
parameter_list|)
lambda|->
operator|!
name|id
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|mavenSettings
operator|.
name|setServers
argument_list|(
name|newServers
argument_list|)
expr_stmt|;
comment|// find<repository> in any active profile and remove it
for|for
control|(
name|Profile
name|profile
range|:
name|mavenSettings
operator|.
name|getProfiles
argument_list|()
control|)
block|{
if|if
condition|(
name|profile
operator|.
name|getRepositories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
lambda|r
argument_list|)
operator|->
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|)
block|{
name|List
argument_list|<
name|Repository
argument_list|>
name|newRepos
init|=
name|profile
operator|.
name|getRepositories
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|r
parameter_list|)
lambda|->
operator|!
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|profile
operator|.
name|setRepositories
argument_list|(
name|newRepos
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Repository with ID \"%s\" was removed from profile \"%s\"\n"
argument_list|,
name|id
argument_list|,
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|updateSettings
argument_list|(
name|prefix
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|first
operator|.
name|get
argument_list|()
operator|.
name|getFrom
argument_list|()
operator|==
name|MavenRepositoryURL
operator|.
name|FROM
operator|.
name|PID
condition|)
block|{
name|List
argument_list|<
name|MavenRepositoryURL
argument_list|>
name|newRepos
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|pidRepos
argument_list|)
operator|.
name|filter
argument_list|(
parameter_list|(
name|r
parameter_list|)
lambda|->
operator|!
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|updatePidRepositories
argument_list|(
name|prefix
argument_list|,
name|config
argument_list|,
name|defaultRepository
argument_list|,
name|newRepos
argument_list|,
name|settingsRepos
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// if there are credentials for this repository, we have to remove them from settings.xml
if|if
condition|(
name|mavenSettings
operator|.
name|getServers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
parameter_list|(
lambda|s
argument_list|)
operator|->
name|id
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|)
block|{
comment|// remove<server> (credentials) if available
name|List
argument_list|<
name|Server
argument_list|>
name|newServers
init|=
name|mavenSettings
operator|.
name|getServers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|s
parameter_list|)
lambda|->
operator|!
name|id
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|mavenSettings
operator|.
name|setServers
argument_list|(
name|newServers
argument_list|)
expr_stmt|;
name|updateSettings
argument_list|(
name|prefix
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
block|}
name|Configuration
name|cmConfig
init|=
name|cm
operator|.
name|getConfiguration
argument_list|(
name|PID
argument_list|)
decl_stmt|;
name|cmConfig
operator|.
name|update
parameter_list|(
name|config
parameter_list|)
constructor_decl|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
end_class

unit|}  }
end_unit

