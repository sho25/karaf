begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|core
operator|.
name|MavenRepositoryURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|table
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|building
operator|.
name|DefaultSettingsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|building
operator|.
name|DefaultSettingsBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|building
operator|.
name|DefaultSettingsBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|building
operator|.
name|SettingsBuildingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|building
operator|.
name|SettingsBuildingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|building
operator|.
name|SettingsBuildingResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|building
operator|.
name|SettingsProblem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|crypto
operator|.
name|DefaultSettingsDecrypter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|crypto
operator|.
name|DefaultSettingsDecryptionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|crypto
operator|.
name|SettingsDecryptionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|io
operator|.
name|xpp3
operator|.
name|SettingsXpp3Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|ServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|components
operator|.
name|cipher
operator|.
name|DefaultPlexusCipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|components
operator|.
name|sec
operator|.
name|dispatcher
operator|.
name|DefaultSecDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|components
operator|.
name|sec
operator|.
name|dispatcher
operator|.
name|SecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|components
operator|.
name|sec
operator|.
name|dispatcher
operator|.
name|model
operator|.
name|SettingsSecurity
import|;
end_import

begin_comment
comment|/**  *<p>Base class for<code>maven:</code> commands.</p>  *<p>Important: even if it duplicates some code from pax-url-aether, this should be treated as verification code of  * how pax-url-aether should interact with<code>org.ops4j.pax.url.mvn</code> PID configuration.</p>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MavenConfigurationSupport
implements|implements
name|Action
block|{
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MavenConfigurationSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PID
init|=
literal|"org.ops4j.pax.url.mvn"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PATTERN_PID_PROPERTY
init|=
literal|"Explicit %s PID configuration (%s)"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PATTERN_SECURITY_SETTINGS
init|=
literal|"maven-security-settings-%d.xml"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Pattern
name|RE_SECURITY_SETTINGS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"maven-security-settings-(\\d+)\\.xml"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PATTERN_SETTINGS
init|=
literal|"maven-settings-%d.xml"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Pattern
name|RE_SETTINGS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"maven-settings-(\\d+)\\.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SEQUENCE_SIZE
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_LOCAL_REPOSITORY
init|=
literal|"localRepository"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_DEFAULT_REPOSITORIES
init|=
literal|"defaultRepositories"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_REPOSITORIES
init|=
literal|"repositories"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SETTINGS_FILE
init|=
literal|"settings"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SECURITY_FILE
init|=
literal|"security"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_GLOBAL_UPDATE_POLICY
init|=
literal|"globalUpdatePolicy"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_GLOBAL_CHECKSUM_POLICY
init|=
literal|"globalChecksumPolicy"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_UPDATE_RELEASES
init|=
literal|"updateReleases"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|REQUIRE_CONFIG_ADMIN_CONFIG
init|=
literal|"requireConfigAdminConfig"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_USE_FALLBACK_REPOSITORIES
init|=
literal|"useFallbackRepositories"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_OFFLINE
init|=
literal|"offline"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_CERTIFICATE_CHECK
init|=
literal|"certificateCheck"
decl_stmt|;
comment|// TODO timeout options {
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_TIMEOUT
init|=
literal|"timeout"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SOCKET_SO_TIMEOUT
init|=
literal|"socket.readTimeout"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SOCKET_SO_KEEPALIVE
init|=
literal|"socket.keepAlive"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SOCKET_SO_LINGER
init|=
literal|"socket.linger"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SOCKET_SO_REUSEADDRESS
init|=
literal|"socket.reuseAddress"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SOCKET_TCP_NODELAY
init|=
literal|"socket.tcpNoDelay"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_SOCKET_CONNECTION_TIMEOUT
init|=
literal|"socket.connectionTimeout"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_CONNECTION_BUFFER_SIZE
init|=
literal|"connection.bufferSize"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|PROPERTY_CONNECTION_RETRY_COUNT
init|=
literal|"connection.retryCount"
decl_stmt|;
comment|// }
specifier|protected
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|localRepository
decl_stmt|;
specifier|protected
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|settings
decl_stmt|;
specifier|protected
name|Settings
name|mavenSettings
decl_stmt|;
specifier|protected
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|securitySettings
decl_stmt|;
specifier|protected
name|SettingsSecurity
name|mavenSecuritySettings
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Server
argument_list|>
name|servers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serverPasswords
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|proxyPasswords
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|warnings
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|masterMasterPassword
init|=
name|DefaultSecDispatcher
operator|.
name|SYSTEM_PROPERTY_SEC_LOCATION
decl_stmt|;
specifier|protected
name|String
name|masterPassword
decl_stmt|;
specifier|protected
name|DefaultPlexusCipher
name|cipher
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|ConfigurationAdmin
name|cm
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|BundleContext
name|context
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|Session
name|session
decl_stmt|;
annotation|@
name|Override
specifier|final
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
name|cm
operator|.
name|getConfiguration
argument_list|(
name|PID
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getProperties
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cipher
operator|=
operator|new
name|DefaultPlexusCipher
argument_list|()
expr_stmt|;
name|securitySettings
operator|=
name|securitySettings
argument_list|(
operator|(
name|String
operator|)
name|c
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_SECURITY_FILE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|securitySettings
operator|!=
literal|null
operator|&&
name|securitySettings
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|mavenSecuritySettings
operator|=
name|readSecuritySettings
argument_list|(
name|securitySettings
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|settings
operator|=
name|settings
argument_list|(
operator|(
name|String
operator|)
name|c
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_SETTINGS_FILE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|!=
literal|null
operator|&&
name|settings
operator|.
name|value
operator|!=
literal|null
condition|)
block|{
name|mavenSettings
operator|=
name|readSettings
argument_list|(
name|settings
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|localRepository
operator|=
name|localRepository
argument_list|(
operator|(
name|String
operator|)
name|c
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_LOCAL_REPOSITORY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showPasswords
argument_list|()
condition|)
block|{
name|decryptSettings
argument_list|()
expr_stmt|;
block|}
name|doAction
argument_list|(
name|PID
operator|+
literal|"."
argument_list|,
name|c
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Can't access \"%s\" configuration\n"
argument_list|,
name|PID
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Performs command action on<strong>existing</strong><code>org.ops4j.pax.url.mvn</code>      * PID configuration      * @param prefix prefix for properties inside<code>org.ops4j.pax.url.mvn</code> PID      * @param config<code>org.ops4j.pax.url.mvn</code> PID configuration taken from {@link ConfigurationAdmin}      */
specifier|abstract
specifier|protected
name|void
name|doAction
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Gets effective location of<code>settings.xml</code> file - according to pax-url-aether rules      * @param cmProperty property obtained from Config Admin      * @return      */
specifier|protected
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|settings
parameter_list|(
name|String
name|cmProperty
parameter_list|)
block|{
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|result
init|=
operator|new
name|SourceAnd
argument_list|<>
argument_list|()
decl_stmt|;
name|URL
name|locationUrl
init|=
literal|null
decl_stmt|;
name|String
name|probableErrorMessage
init|=
literal|null
decl_stmt|;
comment|// 1. PID + ".settings"
if|if
condition|(
name|cmProperty
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|cmProperty
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|source
operator|=
name|String
operator|.
name|format
argument_list|(
name|PATTERN_PID_PROPERTY
argument_list|,
name|PID
argument_list|,
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_SETTINGS_FILE
argument_list|)
expr_stmt|;
try|try
block|{
name|locationUrl
operator|=
operator|new
name|URL
argument_list|(
name|cmProperty
argument_list|)
expr_stmt|;
name|probableErrorMessage
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s configured in %s.%s is not accessible"
argument_list|,
name|locationUrl
argument_list|,
name|PID
argument_list|,
name|PROPERTY_SETTINGS_FILE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|cmProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
if|if
condition|(
name|locationUrl
operator|==
literal|null
condition|)
block|{
comment|// 2. System.getProperty("user.home") + "/.m2/settings.xml"
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.m2/settings.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit ${user.home}/.m2/settings.xml"
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// 3. System.getProperty("maven.home") + "/conf/settings.xml"
name|file
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"maven.home"
argument_list|)
operator|+
literal|"/conf/settings.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit ${maven.home}/conf/settings.xml"
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// 4. System.getenv("M2_HOME") + "/conf/settings.xml"
name|file
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getenv
argument_list|(
literal|"M2_HOME"
argument_list|)
operator|+
literal|"/conf/settings.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit $M2_HOME/conf/settings.xml"
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
else|else
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|locationUrl
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|source
operator|=
name|probableErrorMessage
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// 5. new org.apache.maven.settings.Settings()
name|result
operator|.
name|value
operator|=
literal|null
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"No implicit settings.xml location is available"
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Gets effective location of<code>settings-security.xml</code> file - according to pax-url-aether rules      * @param cmProperty property obtained from Config Admin      * @return      */
specifier|protected
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|securitySettings
parameter_list|(
name|String
name|cmProperty
parameter_list|)
block|{
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|result
init|=
operator|new
name|SourceAnd
argument_list|<>
argument_list|()
decl_stmt|;
name|URL
name|locationUrl
init|=
literal|null
decl_stmt|;
name|String
name|probableErrorMessage
init|=
literal|null
decl_stmt|;
comment|// 1. PID + ".security"
if|if
condition|(
name|cmProperty
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|cmProperty
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|source
operator|=
name|String
operator|.
name|format
argument_list|(
name|PATTERN_PID_PROPERTY
argument_list|,
name|PID
argument_list|,
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_SECURITY_FILE
argument_list|)
expr_stmt|;
try|try
block|{
name|locationUrl
operator|=
operator|new
name|URL
argument_list|(
name|cmProperty
argument_list|)
expr_stmt|;
name|probableErrorMessage
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s configured in %s.%s is not accessible"
argument_list|,
name|locationUrl
argument_list|,
name|PID
argument_list|,
name|PROPERTY_SECURITY_FILE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|cmProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
comment|// 2. System.getProperty("user.home") + "/.m2/settings-security.xml"
if|if
condition|(
name|locationUrl
operator|==
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.m2/settings-security.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit ${user.home}/.m2/settings-security.xml"
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
else|else
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|locationUrl
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|result
operator|.
name|source
operator|=
name|probableErrorMessage
expr_stmt|;
block|}
block|}
name|result
operator|.
name|value
operator|=
literal|null
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"No implicit settings-security.xml location is available"
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Gets effective location of<em>local repository</em> - according to pax-url-aether rules      * @param cmProperty property obtained from Config Admin      * @return      */
specifier|protected
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|localRepository
parameter_list|(
name|String
name|cmProperty
parameter_list|)
block|{
name|SourceAnd
argument_list|<
name|File
argument_list|>
name|result
init|=
operator|new
name|SourceAnd
argument_list|<>
argument_list|()
decl_stmt|;
name|URL
name|locationUrl
init|=
literal|null
decl_stmt|;
name|String
name|probableErrorMessage
init|=
literal|null
decl_stmt|;
comment|// 1. PID + ".localRepository"
if|if
condition|(
name|cmProperty
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|cmProperty
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|source
operator|=
name|String
operator|.
name|format
argument_list|(
name|PATTERN_PID_PROPERTY
argument_list|,
name|PID
argument_list|,
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_LOCAL_REPOSITORY
argument_list|)
expr_stmt|;
try|try
block|{
name|locationUrl
operator|=
operator|new
name|URL
argument_list|(
name|cmProperty
argument_list|)
expr_stmt|;
name|probableErrorMessage
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s configured in %s.%s is not accessible"
argument_list|,
name|locationUrl
argument_list|,
name|PID
argument_list|,
name|PROPERTY_LOCAL_REPOSITORY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|cmProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
comment|// 2. from settings.xml
if|if
condition|(
name|locationUrl
operator|==
literal|null
operator|&&
name|mavenSettings
operator|!=
literal|null
operator|&&
name|mavenSettings
operator|.
name|getLocalRepository
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|source
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"Explicit<localRepository> in %s"
argument_list|,
name|settings
operator|.
name|value
argument_list|)
expr_stmt|;
try|try
block|{
name|locationUrl
operator|=
operator|new
name|URL
argument_list|(
name|mavenSettings
operator|.
name|getLocalRepository
argument_list|()
argument_list|)
expr_stmt|;
name|probableErrorMessage
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s configured in %s is not accessible"
argument_list|,
name|mavenSettings
operator|.
name|getLocalRepository
argument_list|()
argument_list|,
name|settings
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|mavenSettings
operator|.
name|getLocalRepository
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
comment|// 3. System.getProperty("user.home") + "/.m2/repository";
if|if
condition|(
name|locationUrl
operator|==
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.m2/repository"
argument_list|)
decl_stmt|;
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
comment|// whether it exists or not
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|.
name|source
operator|=
literal|"Implicit ${user.home}/.m2/repository"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|source
operator|=
literal|"Implicit ${user.home}/.m2/repository (not accessible)"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|locationUrl
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|value
operator|=
name|file
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|.
name|source
operator|=
name|probableErrorMessage
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Reads on demand<code>settings.xml</code> file - without password decryption. Also      * collects declared servers by ID.      * @param settingsFile      */
specifier|protected
specifier|synchronized
name|Settings
name|readSettings
parameter_list|(
name|File
name|settingsFile
parameter_list|)
throws|throws
name|SettingsBuildingException
block|{
if|if
condition|(
operator|!
name|settingsFile
operator|.
name|isFile
argument_list|()
operator|||
operator|!
name|settingsFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|DefaultSettingsBuilderFactory
name|factory
init|=
operator|new
name|DefaultSettingsBuilderFactory
argument_list|()
decl_stmt|;
name|DefaultSettingsBuilder
name|builder
init|=
name|factory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|SettingsBuildingRequest
name|request
init|=
operator|new
name|DefaultSettingsBuildingRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setUserSettingsFile
argument_list|(
name|settingsFile
argument_list|)
expr_stmt|;
name|SettingsBuildingResult
name|result
init|=
name|builder
operator|.
name|build
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getProblems
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|SettingsProblem
name|problem
range|:
name|result
operator|.
name|getProblems
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|problem
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|Settings
name|settings
init|=
name|result
operator|.
name|getEffectiveSettings
argument_list|()
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|getServers
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Server
name|server
range|:
name|settings
operator|.
name|getServers
argument_list|()
control|)
block|{
name|servers
operator|.
name|put
argument_list|(
name|server
operator|.
name|getId
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|settings
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Re-reads on demand<code>settings-security.xml</code> file      * @param securitySettingsFile      */
specifier|protected
specifier|synchronized
name|SettingsSecurity
name|readSecuritySettings
parameter_list|(
name|File
name|securitySettingsFile
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|securitySettingsFile
operator|.
name|isFile
argument_list|()
operator|||
operator|!
name|securitySettingsFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|SecUtil
operator|.
name|read
argument_list|(
name|securitySettingsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      *<p>Decrypts passwords inside correctly read<code>settings.xml</code>. Also tries to decrypt master password.</p>      *<p>Not called implicitly for each action invocation.</p>      */
specifier|private
name|void
name|decryptSettings
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mavenSecuritySettings
operator|!=
literal|null
operator|&&
name|mavenSettings
operator|!=
literal|null
condition|)
block|{
name|masterPassword
operator|=
name|cipher
operator|.
name|decryptDecorated
argument_list|(
name|mavenSecuritySettings
operator|.
name|getMaster
argument_list|()
argument_list|,
name|masterMasterPassword
argument_list|)
expr_stmt|;
name|DefaultSecDispatcher
name|dispatcher
init|=
operator|new
name|DefaultSecDispatcher
argument_list|()
decl_stmt|;
name|DefaultSettingsDecrypter
name|decrypter
init|=
operator|new
name|DefaultSettingsDecrypter
argument_list|()
decl_stmt|;
try|try
block|{
name|dispatcher
operator|.
name|setConfigurationFile
argument_list|(
name|securitySettings
operator|.
name|value
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
name|dispatcher
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"_cipher"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|dispatcher
argument_list|,
name|cipher
argument_list|)
expr_stmt|;
name|f
operator|=
name|decrypter
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"securityDispatcher"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|decrypter
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|DefaultSettingsDecryptionRequest
name|req
init|=
operator|new
name|DefaultSettingsDecryptionRequest
argument_list|(
name|mavenSettings
argument_list|)
decl_stmt|;
name|SettingsDecryptionResult
name|res
init|=
name|decrypter
operator|.
name|decrypt
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|getProblems
argument_list|()
operator|!=
literal|null
operator|&&
name|res
operator|.
name|getProblems
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|SettingsProblem
name|sp
range|:
name|res
operator|.
name|getProblems
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Proxy
name|proxy
range|:
name|res
operator|.
name|getProxies
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cipher
operator|.
name|isEncryptedString
argument_list|(
name|proxy
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|proxyPasswords
operator|.
name|put
argument_list|(
name|proxy
operator|.
name|getId
argument_list|()
argument_list|,
name|proxy
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Server
name|server
range|:
name|res
operator|.
name|getServers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cipher
operator|.
name|isEncryptedString
argument_list|(
name|server
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|serverPasswords
operator|.
name|put
argument_list|(
name|server
operator|.
name|getId
argument_list|()
argument_list|,
name|server
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't decrypt "
operator|+
name|securitySettings
operator|.
name|value
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns list of configured remote (<code>remote=true</code>) or default (<code>remote=false</code>)      * repositories.      * @param remote      * @return      */
specifier|protected
name|MavenRepositoryURL
index|[]
name|repositories
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|boolean
name|remote
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|property
init|=
name|remote
condition|?
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_REPOSITORIES
else|:
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_DEFAULT_REPOSITORIES
decl_stmt|;
name|String
index|[]
name|repositories
init|=
name|listOfValues
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|remote
condition|)
block|{
if|if
condition|(
name|repositories
operator|.
name|length
operator|==
literal|0
operator|||
name|repositories
index|[
literal|0
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'+'
condition|)
block|{
if|if
condition|(
name|repositories
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|repositories
index|[
literal|0
index|]
operator|=
name|repositories
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|newRepositories
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|newRepositories
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|repositories
argument_list|)
argument_list|)
expr_stmt|;
comment|// append all repositories from all active profiles from available settings.xml
if|if
condition|(
name|mavenSettings
operator|!=
literal|null
condition|)
block|{
comment|// see org.ops4j.pax.url.mvn.internal.config.MavenConfigurationImpl.getRepositories()
name|Set
argument_list|<
name|String
argument_list|>
name|activeProfiles
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|mavenSettings
operator|.
name|getActiveProfiles
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|profiles
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
operator|)
name|mavenSettings
operator|.
name|getProfilesAsMap
argument_list|()
decl_stmt|;
name|profiles
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|profile
parameter_list|)
lambda|->
name|profile
operator|.
name|getActivation
argument_list|()
operator|!=
literal|null
operator|&&
name|profile
operator|.
name|getActivation
argument_list|()
operator|.
name|isActiveByDefault
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|Profile
operator|::
name|getId
argument_list|)
operator|.
name|forEach
argument_list|(
name|activeProfiles
operator|::
name|add
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|activeProfile
range|:
name|activeProfiles
control|)
block|{
name|Profile
name|profile
init|=
name|profiles
operator|.
name|get
argument_list|(
name|activeProfile
argument_list|)
decl_stmt|;
if|if
condition|(
name|profile
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Repository
name|repo
range|:
name|profile
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|repo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"@id="
argument_list|)
operator|.
name|append
argument_list|(
name|repo
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"@_from="
argument_list|)
operator|.
name|append
argument_list|(
name|MavenRepositoryURL
operator|.
name|FROM
operator|.
name|SETTINGS
argument_list|)
expr_stmt|;
if|if
condition|(
name|repo
operator|.
name|getReleases
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|repo
operator|.
name|getReleases
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ServiceConstants
operator|.
name|SEPARATOR_OPTIONS
operator|+
name|ServiceConstants
operator|.
name|OPTION_DISALLOW_RELEASES
argument_list|)
expr_stmt|;
block|}
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|up
init|=
name|updatePolicy
argument_list|(
name|repo
operator|.
name|getReleases
argument_list|()
operator|.
name|getUpdatePolicy
argument_list|()
argument_list|)
decl_stmt|;
name|addPolicy
argument_list|(
name|builder
argument_list|,
literal|""
operator|.
name|equals
argument_list|(
name|up
operator|.
name|val
argument_list|()
argument_list|)
condition|?
literal|"never"
else|:
name|up
operator|.
name|val
argument_list|()
argument_list|,
name|ServiceConstants
operator|.
name|OPTION_RELEASES_UPDATE
argument_list|)
expr_stmt|;
comment|// not used in pax-url-aether
comment|//addPolicy(builder, repo.getReleases().getChecksumPolicy(), "releasesChecksum");
block|}
if|if
condition|(
name|repo
operator|.
name|getSnapshots
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|repo
operator|.
name|getSnapshots
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|ServiceConstants
operator|.
name|SEPARATOR_OPTIONS
operator|+
name|ServiceConstants
operator|.
name|OPTION_ALLOW_SNAPSHOTS
argument_list|)
expr_stmt|;
block|}
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|up
init|=
name|updatePolicy
argument_list|(
name|repo
operator|.
name|getSnapshots
argument_list|()
operator|.
name|getUpdatePolicy
argument_list|()
argument_list|)
decl_stmt|;
name|addPolicy
argument_list|(
name|builder
argument_list|,
literal|""
operator|.
name|equals
argument_list|(
name|up
operator|.
name|val
argument_list|()
argument_list|)
condition|?
literal|"never"
else|:
name|up
operator|.
name|val
argument_list|()
argument_list|,
name|ServiceConstants
operator|.
name|OPTION_SNAPSHOTS_UPDATE
argument_list|)
expr_stmt|;
comment|// not used in pax-url-aether
comment|//addPolicy(builder, repo.getSnapshots().getChecksumPolicy(), "snapshotsChecksum");
block|}
name|newRepositories
operator|.
name|add
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|repositories
operator|=
name|newRepositories
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|newRepositories
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|MavenRepositoryURL
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
name|repositories
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|MavenRepositoryURL
argument_list|(
name|repo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|MavenRepositoryURL
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|addPolicy
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|String
name|policy
parameter_list|,
name|String
name|option
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|!=
literal|null
operator|&&
operator|!
name|policy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Splits comma separated list of values into String array      * @param list      * @return      */
specifier|protected
name|String
index|[]
name|listOfValues
parameter_list|(
name|String
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|String
index|[]
name|values
init|=
name|list
operator|.
name|split
argument_list|(
literal|"\\s*,\\s*"
argument_list|)
decl_stmt|;
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|)
operator|.
name|filter
argument_list|(
parameter_list|(
name|value
parameter_list|)
lambda|->
operator|(
name|value
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
operator|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
comment|/**      * Adds information used by proxy/server      * @param row {@link org.apache.karaf.shell.support.table.ShellTable}'s row to add information to      * @param id2Password mapping of ids (servers/proxies to decrypted passwords)      * @param id ID of proxy or server from<code>settings.xml</code>      * @param password password to use if decryption failed      */
specifier|protected
name|void
name|addPasswordInfo
parameter_list|(
name|Row
name|row
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|id2Password
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|id2Password
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|id2Password
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|cipher
operator|.
name|isEncryptedString
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|password
operator|+
literal|" (can't decrypt)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|addContent
argument_list|(
name|password
operator|==
literal|null
condition|?
literal|""
else|:
name|password
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Asks for confirmation (user has to press<code>y</code>) after presenting a prompt      * @param prompt      * @return      */
specifier|protected
name|boolean
name|confirm
parameter_list|(
name|String
name|prompt
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|response
init|=
name|session
operator|.
name|readLine
argument_list|(
name|prompt
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
literal|"y"
operator|.
name|equals
argument_list|(
name|response
argument_list|)
return|;
block|}
comment|/**      * Returns new {@link File} that's part of fixed-size sequence. Keeps the sequence bounded.      * @param dataDir      * @param pattern      * @param fileNameFormat      * @return      */
specifier|protected
name|File
name|nextSequenceFile
parameter_list|(
name|File
name|dataDir
parameter_list|,
name|Pattern
name|pattern
parameter_list|,
name|String
name|fileNameFormat
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|dataDir
operator|.
name|listFiles
argument_list|(
parameter_list|(
name|dir
parameter_list|,
name|name
parameter_list|)
lambda|->
name|pattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|files
argument_list|)
operator|.
name|map
argument_list|(
name|File
operator|::
name|getName
argument_list|)
operator|.
name|collect
argument_list|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|::
operator|new
argument_list|,
name|TreeSet
operator|::
name|add
argument_list|,
name|TreeSet
operator|::
name|addAll
argument_list|)
argument_list|)
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|fileNameFormat
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|names
operator|.
name|size
argument_list|()
operator|>
name|MAX_SEQUENCE_SIZE
condition|)
block|{
name|String
name|name
init|=
name|names
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|name
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|names
operator|.
name|get
argument_list|(
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|fileNameFormat
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * This method controls whether passwords are tried to be decrypted.      * @return      */
specifier|protected
name|boolean
name|showPasswords
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Parses update policy value and returns {@link SourceAnd}<code>&lt;String&gt;</code> about the value      * @param policy      * @return      */
specifier|protected
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|updatePolicy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|SourceAnd
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|value
operator|=
name|policy
expr_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|policy
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|value
operator|=
literal|""
expr_stmt|;
name|result
operator|.
name|valid
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit \"never\", but doesn't override repository-specific value"
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|source
operator|=
name|String
operator|.
name|format
argument_list|(
name|PATTERN_PID_PROPERTY
argument_list|,
name|PID
argument_list|,
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_GLOBAL_UPDATE_POLICY
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"always"
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
operator|||
literal|"never"
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
operator|||
literal|"daily"
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
condition|)
block|{
comment|// ok
name|result
operator|.
name|valid
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|policy
operator|.
name|startsWith
argument_list|(
literal|"interval"
argument_list|)
condition|)
block|{
name|int
name|minutes
init|=
literal|1440
decl_stmt|;
try|try
block|{
name|String
name|n
init|=
name|policy
operator|.
name|substring
argument_list|(
literal|"interval"
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|minutes
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|result
operator|.
name|valid
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|result
operator|.
name|valid
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|value
operator|=
literal|"interval:1440"
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit \"interval:1440\" (error parsing \""
operator|+
name|policy
operator|+
literal|"\")"
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|valid
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|value
operator|=
literal|"never"
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit \"never\" (unknown value \""
operator|+
name|policy
operator|+
literal|"\")"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Parses checksum policy value and returns {@link SourceAnd}<code>&lt;String&gt;</code> about the value      * @param policy      * @return      */
specifier|protected
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|checksumPolicy
parameter_list|(
name|String
name|policy
parameter_list|)
block|{
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|SourceAnd
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|value
operator|=
name|policy
expr_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|policy
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|valid
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|value
operator|=
literal|"warn"
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Default \"warn\""
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|source
operator|=
name|String
operator|.
name|format
argument_list|(
name|PATTERN_PID_PROPERTY
argument_list|,
name|PID
argument_list|,
name|PID
operator|+
literal|"."
operator|+
name|PROPERTY_GLOBAL_CHECKSUM_POLICY
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"ignore"
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
operator|||
literal|"warn"
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
operator|||
literal|"fail"
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
condition|)
block|{
comment|// ok
name|result
operator|.
name|valid
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|valid
operator|=
literal|false
expr_stmt|;
name|result
operator|.
name|value
operator|=
literal|"warn"
expr_stmt|;
name|result
operator|.
name|source
operator|=
literal|"Implicit \"warn\" (unknown value \""
operator|+
name|policy
operator|+
literal|"\")"
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Stores changed {@link org.apache.maven.settings.Settings} in new settings.xml file and updates      *<code>org.ops4j.pax.url.mvn.settings</code> property. Does<string>not</string> update      * {@link org.osgi.service.cm.ConfigurationAdmin} config.      * @param prefix      * @param config      */
specifier|protected
name|void
name|updateSettings
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dataDir
init|=
name|context
operator|.
name|getDataFile
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dataDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't access data directory for "
operator|+
name|context
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" bundle"
argument_list|)
throw|;
block|}
name|File
name|newSettingsFile
init|=
name|nextSequenceFile
argument_list|(
name|dataDir
argument_list|,
name|RE_SETTINGS
argument_list|,
name|PATTERN_SETTINGS
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|PROPERTY_SETTINGS_FILE
argument_list|,
name|newSettingsFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|newSettingsFile
argument_list|)
init|)
block|{
operator|new
name|SettingsXpp3Writer
argument_list|()
operator|.
name|write
argument_list|(
name|fw
argument_list|,
name|mavenSettings
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"New settings stored in \""
operator|+
name|newSettingsFile
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Handy class containing value and information about its origin.<code>valid</code> may be used to indicate      * if the value is correct. It may be implicit, but the interpretation of<code>valid</code> is not defined.      * @param<T>      */
specifier|protected
specifier|static
class|class
name|SourceAnd
parameter_list|<
name|T
parameter_list|>
block|{
name|String
name|source
decl_stmt|;
name|T
name|value
decl_stmt|;
name|boolean
name|valid
decl_stmt|;
specifier|public
name|SourceAnd
parameter_list|()
block|{         }
specifier|public
name|SourceAnd
parameter_list|(
name|String
name|source
parameter_list|,
name|T
name|value
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|val
parameter_list|()
block|{
return|return
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

