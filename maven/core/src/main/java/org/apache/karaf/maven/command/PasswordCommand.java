begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|components
operator|.
name|sec
operator|.
name|dispatcher
operator|.
name|DefaultSecDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|components
operator|.
name|sec
operator|.
name|dispatcher
operator|.
name|model
operator|.
name|SettingsSecurity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|plexus
operator|.
name|components
operator|.
name|sec
operator|.
name|dispatcher
operator|.
name|model
operator|.
name|io
operator|.
name|xpp3
operator|.
name|SecurityConfigurationXpp3Writer
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"maven"
argument_list|,
name|name
operator|=
literal|"password"
argument_list|,
name|description
operator|=
literal|"Manage passwords for remote repositories and proxies"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|PasswordCommand
extends|extends
name|MavenConfigurationSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-ep"
argument_list|,
name|aliases
operator|=
block|{
literal|"--encrypt-password"
block|}
argument_list|,
name|description
operator|=
literal|"Encrypts passwords to use for remote repositories and proxies, see \"mvn -ep\""
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|ep
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-emp"
argument_list|,
name|aliases
operator|=
block|{
literal|"--encrypt-master-password"
block|}
argument_list|,
name|description
operator|=
literal|"Encrypts master password used to encrypt/decrypt other passwords, see \"mvn -emp\""
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|emp
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-p"
argument_list|,
name|aliases
operator|=
block|{
literal|"--persist"
block|}
argument_list|,
name|description
operator|=
literal|""
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|persist
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doAction
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ep
operator|&&
name|emp
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify only one of --encrypt-password and --encrypt-master-password"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ep
operator|&&
name|persist
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ordinary passwords are not persisted - use the encrypted password in either<proxy> or<server>"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ep
condition|)
block|{
comment|// encrypt password using master password
if|if
condition|(
name|masterPassword
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Master password is not available"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|password
init|=
name|session
operator|.
name|readLine
argument_list|(
literal|"Password to encrypt: "
argument_list|,
literal|'*'
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Encrypted password: "
operator|+
name|cipher
operator|.
name|encryptAndDecorate
argument_list|(
name|password
argument_list|,
name|masterPassword
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"You can use this encrypted password when defining repositories and proxies"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|emp
condition|)
block|{
if|if
condition|(
name|persist
operator|&&
operator|!
name|confirm
argument_list|(
literal|"Maven security settings will be stored in new file. This file will be used in org.ops4j.pax.url.mvn.security property. Continue? (y/N) "
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// encrypt master password using DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION
name|String
name|password
init|=
name|session
operator|.
name|readLine
argument_list|(
literal|"Master password to encrypt: "
argument_list|,
literal|'*'
argument_list|)
decl_stmt|;
name|String
name|encryptedPassword
init|=
name|cipher
operator|.
name|encryptAndDecorate
argument_list|(
name|password
argument_list|,
name|DefaultSecDispatcher
operator|.
name|SYSTEM_PROPERTY_SEC_LOCATION
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Encrypted master password: "
operator|+
name|encryptedPassword
argument_list|)
expr_stmt|;
if|if
condition|(
name|persist
condition|)
block|{
name|SettingsSecurity
name|settingsSecurity
init|=
operator|new
name|SettingsSecurity
argument_list|()
decl_stmt|;
name|settingsSecurity
operator|.
name|setMaster
argument_list|(
name|encryptedPassword
argument_list|)
expr_stmt|;
name|File
name|dataDir
init|=
name|context
operator|.
name|getDataFile
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dataDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can't access data directory for "
operator|+
name|context
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" bundle"
argument_list|)
expr_stmt|;
return|return;
block|}
name|File
name|newSecuritySettingsFile
init|=
name|nextSequenceFile
argument_list|(
name|dataDir
argument_list|,
name|RE_SECURITY_SETTINGS
argument_list|,
name|PATTERN_SECURITY_SETTINGS
argument_list|)
decl_stmt|;
try|try
init|(
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|newSecuritySettingsFile
argument_list|)
init|)
block|{
operator|new
name|SecurityConfigurationXpp3Writer
argument_list|()
operator|.
name|write
argument_list|(
name|fw
argument_list|,
name|settingsSecurity
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"New security settings stored in \""
operator|+
name|newSecuritySettingsFile
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|Configuration
name|cmConfig
init|=
name|cm
operator|.
name|getConfiguration
argument_list|(
name|PID
argument_list|)
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|PROPERTY_SECURITY_FILE
argument_list|,
name|newSecuritySettingsFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|cmConfig
operator|.
name|update
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|showPasswords
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

