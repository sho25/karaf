begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|core
operator|.
name|MavenRepositoryURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|table
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|table
operator|.
name|ShellTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Server
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"maven"
argument_list|,
name|name
operator|=
literal|"repository-list"
argument_list|,
name|description
operator|=
literal|"Maven repository summary."
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|RepositoryListCommand
extends|extends
name|MavenConfigurationSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-v"
argument_list|,
name|aliases
operator|=
block|{
literal|"--verbose"
block|}
argument_list|,
name|description
operator|=
literal|"Show additional information (policies, source)"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|verbose
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doAction
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"URL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|table
operator|.
name|column
argument_list|(
literal|"Releases"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Snapshots"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Defined in"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showPasswords
condition|)
block|{
name|table
operator|.
name|column
argument_list|(
literal|"Username"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Password"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"== Remote repositories"
argument_list|)
expr_stmt|;
name|MavenRepositoryURL
index|[]
name|repositories
init|=
name|repositories
argument_list|(
name|config
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|MavenRepositoryURL
name|repoURL
range|:
name|repositories
control|)
block|{
name|Row
name|row
init|=
name|table
operator|.
name|addRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|repoURL
operator|.
name|getId
argument_list|()
argument_list|,
name|repoURL
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|repositoryKindInfo
argument_list|(
name|repoURL
argument_list|,
literal|false
argument_list|)
argument_list|,
name|repositoryKindInfo
argument_list|(
name|repoURL
argument_list|,
literal|true
argument_list|)
argument_list|,
name|repoURL
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showPasswords
condition|)
block|{
if|if
condition|(
name|servers
operator|.
name|containsKey
argument_list|(
name|repoURL
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|Server
name|server
init|=
name|servers
operator|.
name|get
argument_list|(
name|repoURL
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|server
operator|.
name|getUsername
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|server
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|addPasswordInfo
argument_list|(
name|row
argument_list|,
name|serverPasswords
argument_list|,
name|repoURL
operator|.
name|getId
argument_list|()
argument_list|,
name|server
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|addContent
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|table
operator|.
name|print
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|ShellTable
argument_list|()
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"ID"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"URL"
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|table
operator|.
name|column
argument_list|(
literal|"Releases"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Snapshots"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"== Default repositories"
argument_list|)
expr_stmt|;
name|repositories
operator|=
name|repositories
argument_list|(
name|config
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|MavenRepositoryURL
name|repoURL
range|:
name|repositories
control|)
block|{
name|Row
name|row
init|=
name|table
operator|.
name|addRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|addContent
argument_list|(
name|repoURL
operator|.
name|getId
argument_list|()
argument_list|,
name|repoURL
operator|.
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|row
operator|.
name|addContent
argument_list|(
name|repositoryKindInfo
argument_list|(
name|repoURL
argument_list|,
literal|false
argument_list|)
argument_list|,
name|repositoryKindInfo
argument_list|(
name|repoURL
argument_list|,
literal|true
argument_list|)
argument_list|,
name|repoURL
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|print
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
comment|/**      * Information about release/snapshot handing for give repository URL      * @param repoURL      * @param snapshots      * @return      */
specifier|private
name|Object
name|repositoryKindInfo
parameter_list|(
name|MavenRepositoryURL
name|repoURL
parameter_list|,
name|boolean
name|snapshots
parameter_list|)
block|{
if|if
condition|(
name|snapshots
condition|)
block|{
if|if
condition|(
name|repoURL
operator|.
name|isSnapshotsEnabled
argument_list|()
condition|)
block|{
name|String
name|snapshotsUpdatePolicy
init|=
name|repoURL
operator|.
name|getSnapshotsUpdatePolicy
argument_list|()
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"yes (%s)"
argument_list|,
name|snapshotsUpdatePolicy
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|snapshotsUpdatePolicy
operator|.
name|trim
argument_list|()
argument_list|)
condition|?
literal|"daily"
else|:
name|snapshotsUpdatePolicy
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|repoURL
operator|.
name|isReleasesEnabled
argument_list|()
condition|)
block|{
name|String
name|releasesUpdatePolicy
init|=
name|repoURL
operator|.
name|getReleasesUpdatePolicy
argument_list|()
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"yes (%s)"
argument_list|,
name|releasesUpdatePolicy
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|releasesUpdatePolicy
operator|.
name|trim
argument_list|()
argument_list|)
condition|?
literal|"daily"
else|:
name|releasesUpdatePolicy
argument_list|)
return|;
block|}
block|}
return|return
literal|"no"
return|;
block|}
block|}
end_class

end_unit

