begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|maven
operator|.
name|core
operator|.
name|MavenRepositoryURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|settings
operator|.
name|Server
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|RepositoryEditCommandSupport
extends|extends
name|MavenSecuritySupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-id"
argument_list|,
name|description
operator|=
literal|"Identifier of repository"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|String
name|id
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-d"
argument_list|,
name|aliases
operator|=
block|{
literal|"--default"
block|}
argument_list|,
name|description
operator|=
literal|"Edit default repository instead of remote one"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|defaultRepository
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-f"
argument_list|,
name|aliases
operator|=
block|{
literal|"--force"
block|}
argument_list|,
name|description
operator|=
literal|"Do not ask for confirmation"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|force
init|=
literal|false
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|doAction
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|id
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|id
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify ID of repository"
argument_list|)
expr_stmt|;
return|return;
block|}
name|MavenRepositoryURL
index|[]
name|repositories
init|=
name|repositories
argument_list|(
name|config
argument_list|,
operator|!
name|defaultRepository
argument_list|)
decl_stmt|;
name|MavenRepositoryURL
index|[]
name|repositoriesFromPidProperty
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|repositories
argument_list|)
operator|.
name|filter
argument_list|(
parameter_list|(
name|repo
parameter_list|)
lambda|->
name|repo
operator|.
name|getFrom
argument_list|()
operator|==
name|MavenRepositoryURL
operator|.
name|FROM
operator|.
name|PID
argument_list|)
operator|.
name|toArray
argument_list|(
name|MavenRepositoryURL
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|MavenRepositoryURL
index|[]
name|repositoriesFromSettings
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|repositories
argument_list|)
operator|.
name|filter
argument_list|(
parameter_list|(
name|repo
parameter_list|)
lambda|->
name|repo
operator|.
name|getFrom
argument_list|()
operator|==
name|MavenRepositoryURL
operator|.
name|FROM
operator|.
name|SETTINGS
argument_list|)
operator|.
name|toArray
argument_list|(
name|MavenRepositoryURL
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|edit
argument_list|(
name|prefix
argument_list|,
name|config
argument_list|,
name|repositories
argument_list|,
name|repositoriesFromPidProperty
argument_list|,
name|repositoriesFromSettings
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
if|if
condition|(
name|showPasswords
condition|)
block|{
name|session
operator|.
name|execute
argument_list|(
literal|"maven:repository-list -v -x"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|.
name|execute
argument_list|(
literal|"maven:repository-list -v"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Peform action on repository (add, remove, change)      * @param prefix property prefix for<code>org.ops4j.pax.url.mvn</code> PID      * @param config      * @param allRepos      * @param pidRepos      * @param settingsRepos      * @throws Exception      */
specifier|protected
specifier|abstract
name|void
name|edit
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|MavenRepositoryURL
index|[]
name|allRepos
parameter_list|,
name|MavenRepositoryURL
index|[]
name|pidRepos
parameter_list|,
name|MavenRepositoryURL
index|[]
name|settingsRepos
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Stores new repository list in relevant<code>org.ops4j.pax.url.mvn</code> PID property      * @param prefix      * @param config      * @param defaultRepository default (<code>true</code>) or remote repositories?      * @param newRepos new list of repositories      * @param hasSettingsRepositories whether we have repositories stored in<code>settings.xml</code> as well      */
specifier|protected
name|void
name|updatePidRepositories
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|boolean
name|defaultRepository
parameter_list|,
name|List
argument_list|<
name|MavenRepositoryURL
argument_list|>
name|newRepos
parameter_list|,
name|boolean
name|hasSettingsRepositories
parameter_list|)
block|{
name|String
name|newList
init|=
name|newRepos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MavenRepositoryURL
operator|::
name|asRepositorySpec
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultRepository
condition|)
block|{
name|config
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|PROPERTY_DEFAULT_REPOSITORIES
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasSettingsRepositories
condition|)
block|{
name|newList
operator|=
literal|"+"
operator|+
name|newList
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|PROPERTY_REPOSITORIES
argument_list|,
name|newList
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Stores credential information in settings, without persisting them      * @param force      * @param id      * @param username      * @param password      * @param prefix      * @param config      */
specifier|protected
name|boolean
name|updateCredentials
parameter_list|(
name|boolean
name|force
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|force
operator|&&
operator|!
name|confirm
argument_list|(
literal|"Maven settings will be updated and org.ops4j.pax.url.mvn.settings property will change. Continue? (y/N) "
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Optional
argument_list|<
name|Server
argument_list|>
name|existingServer
init|=
name|mavenSettings
operator|.
name|getServers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|s
parameter_list|)
lambda|->
name|id
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findAny
argument_list|()
decl_stmt|;
name|Server
name|server
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|existingServer
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|server
operator|=
name|existingServer
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|server
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|server
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|mavenSettings
operator|.
name|getServers
argument_list|()
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|server
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Takes passed-in repository URI and performs basic validation      * @param uri      * @param defaultRepository      * @return      */
specifier|protected
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|validateRepositoryURL
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|defaultRepository
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|MalformedURLException
block|{
name|SourceAnd
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|SourceAnd
argument_list|<>
argument_list|()
decl_stmt|;
name|result
operator|.
name|valid
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify repository location"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|String
name|urlResolved
init|=
name|InterpolationHelper
operator|.
name|substVars
argument_list|(
name|uri
argument_list|,
literal|"uri"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlResolved
argument_list|)
expr_stmt|;
name|urlResolved
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
operator|&&
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Location \""
operator|+
name|urlResolved
operator|+
literal|"\" is not accessible"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// a directory?
name|File
name|location
init|=
operator|new
name|File
argument_list|(
name|urlResolved
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|location
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|location
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Location \""
operator|+
name|urlResolved
operator|+
literal|"\" is not accessible"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
name|url
operator|=
name|location
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|urlResolved
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|defaultRepository
operator|&&
operator|!
literal|"file"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Default repositories should be locally accessible (use file:// protocol or normal directory path)"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|valid
operator|=
literal|true
expr_stmt|;
name|result
operator|.
name|value
operator|=
name|urlResolved
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

