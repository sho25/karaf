begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_class
specifier|public
class|class
name|EventCollector
implements|implements
name|EventHandler
block|{
specifier|private
name|Deque
argument_list|<
name|Event
argument_list|>
name|events
decl_stmt|;
specifier|private
name|int
name|maxSize
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Consumer
argument_list|<
name|Event
argument_list|>
argument_list|>
name|consumers
decl_stmt|;
specifier|public
name|EventCollector
parameter_list|()
block|{
name|events
operator|=
operator|new
name|ConcurrentLinkedDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|maxSize
operator|=
literal|100
expr_stmt|;
name|consumers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|handleEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|events
operator|.
name|addLast
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|events
operator|.
name|size
argument_list|()
operator|>
name|maxSize
condition|)
block|{
name|events
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
block|}
name|consumers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|c
operator|.
name|accept
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Stream
argument_list|<
name|Event
argument_list|>
name|getEvents
parameter_list|()
block|{
return|return
name|events
operator|.
name|stream
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|addConsumer
parameter_list|(
name|Consumer
argument_list|<
name|Event
argument_list|>
name|eventConsumer
parameter_list|)
block|{
name|events
operator|.
name|forEach
argument_list|(
name|eventConsumer
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|add
argument_list|(
name|eventConsumer
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeConsumer
parameter_list|(
name|Consumer
argument_list|<
name|Event
argument_list|>
name|eventConsumer
parameter_list|)
block|{
name|consumers
operator|.
name|remove
argument_list|(
name|eventConsumer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

