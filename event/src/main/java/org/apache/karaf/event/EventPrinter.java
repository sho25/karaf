begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_class
specifier|public
class|class
name|EventPrinter
implements|implements
name|Consumer
argument_list|<
name|Event
argument_list|>
block|{
specifier|private
name|PrintStream
name|out
decl_stmt|;
specifier|private
name|boolean
name|verbose
decl_stmt|;
specifier|public
name|EventPrinter
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|verbose
operator|=
name|verbose
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|getTimeStamp
argument_list|(
name|event
argument_list|)
operator|+
literal|" - "
operator|+
name|event
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
for|for
control|(
name|String
name|key
range|:
name|event
operator|.
name|getPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
literal|"event.topics"
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|equals
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|": "
operator|+
name|getPrintValue
argument_list|(
name|event
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getTimeStamp
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Long
name|ts
init|=
operator|(
name|Long
operator|)
name|event
operator|.
name|getProperty
argument_list|(
literal|"timestamp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|==
literal|null
condition|)
block|{
return|return
literal|"0000-00-00 00:00:00"
return|;
block|}
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
return|return
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|ts
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Object
name|getPrintValue
parameter_list|(
name|Event
name|event
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|Object
name|value
init|=
name|event
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|)
return|;
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

