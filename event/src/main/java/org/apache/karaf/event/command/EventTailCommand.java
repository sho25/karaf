begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
operator|.
name|service
operator|.
name|TopicPredicate
operator|.
name|matchTopic
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
operator|.
name|service
operator|.
name|EventCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"event"
argument_list|,
name|name
operator|=
literal|"tail"
argument_list|,
name|description
operator|=
literal|"Shows events and listens for incoming events"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|EventTailCommand
implements|implements
name|Action
block|{
annotation|@
name|Reference
name|Session
name|session
decl_stmt|;
annotation|@
name|Reference
name|BundleContext
name|context
decl_stmt|;
annotation|@
name|Reference
name|EventCollector
name|collector
decl_stmt|;
annotation|@
name|Argument
name|String
name|topicFilter
init|=
literal|"*"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-v"
argument_list|)
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|EventPrinter
name|printer
init|=
operator|new
name|EventPrinter
argument_list|(
name|session
operator|.
name|getConsole
argument_list|()
argument_list|,
name|verbose
argument_list|)
decl_stmt|;
name|Consumer
argument_list|<
name|Event
argument_list|>
name|filteredPrinter
init|=
name|executeIf
argument_list|(
name|matchTopic
argument_list|(
name|topicFilter
argument_list|)
argument_list|,
name|printer
argument_list|)
decl_stmt|;
name|collector
operator|.
name|addConsumer
argument_list|(
name|filteredPrinter
argument_list|)
expr_stmt|;
try|try
block|{
name|waitTillInterrupted
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|collector
operator|.
name|removeConsumer
argument_list|(
name|filteredPrinter
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Consumer
argument_list|<
name|T
argument_list|>
name|executeIf
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|pred
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
block|{
return|return
name|t
lambda|->
block|{
if|if
condition|(
name|pred
operator|.
name|test
argument_list|(
name|t
argument_list|)
condition|)
name|consumer
operator|.
name|accept
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|;
block|}
specifier|private
name|void
name|waitTillInterrupted
parameter_list|()
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

