begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|capture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|newCapture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|EventAdmin
import|;
end_import

begin_class
specifier|public
class|class
name|EventSendCommandTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|EventSendCommand
name|send
init|=
operator|new
name|EventSendCommand
argument_list|()
decl_stmt|;
name|send
operator|.
name|eventAdmin
operator|=
name|mock
argument_list|(
name|EventAdmin
operator|.
name|class
argument_list|)
expr_stmt|;
name|Capture
argument_list|<
name|Event
argument_list|>
name|eventCapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|send
operator|.
name|eventAdmin
operator|.
name|sendEvent
argument_list|(
name|capture
argument_list|(
name|eventCapture
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|send
operator|.
name|eventAdmin
argument_list|)
expr_stmt|;
name|send
operator|.
name|topic
operator|=
literal|"myTopic"
expr_stmt|;
name|send
operator|.
name|propertiesSt
operator|=
literal|"a=b"
expr_stmt|;
name|send
operator|.
name|execute
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|send
operator|.
name|eventAdmin
argument_list|)
expr_stmt|;
name|Event
name|event
init|=
name|eventCapture
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|event
operator|.
name|getTopic
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"myTopic"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|event
operator|.
name|getProperty
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParse
parameter_list|()
block|{
name|String
name|propSt
init|=
literal|"a=b,b=c"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expectedMap
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|expectedMap
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|EventSendCommand
argument_list|()
operator|.
name|parse
argument_list|(
name|propSt
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|props
operator|.
name|entrySet
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedMap
operator|.
name|entrySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseError
parameter_list|()
block|{
name|String
name|propSt
init|=
literal|"a=b,c="
decl_stmt|;
operator|new
name|EventSendCommand
argument_list|()
operator|.
name|parse
argument_list|(
name|propSt
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

