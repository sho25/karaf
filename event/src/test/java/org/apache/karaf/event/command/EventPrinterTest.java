begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|event
operator|.
name|command
operator|.
name|EventPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_class
specifier|public
class|class
name|EventPrinterTest
block|{
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPrint
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
operator|new
name|EventPrinter
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
operator|.
name|accept
argument_list|(
name|event
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|equalTo
argument_list|(
literal|"2016-01-01 12:00:00 - myTopic\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrintVerbose
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
operator|new
name|EventPrinter
argument_list|(
name|out
argument_list|,
literal|true
argument_list|)
operator|.
name|accept
argument_list|(
name|event
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|result
argument_list|,
name|equalTo
argument_list|(
literal|"2016-01-01 12:00:00 - myTopic\n"
operator|+
literal|"a: b\n"
operator|+
literal|"c: [d, e]\n\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Event
name|event
parameter_list|()
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"d"
block|,
literal|"e"
block|}
argument_list|)
expr_stmt|;
name|Date
name|date
decl_stmt|;
try|try
block|{
name|date
operator|=
name|df
operator|.
name|parse
argument_list|(
literal|"2016-01-01 12:00:00"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|props
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|date
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Event
argument_list|(
literal|"myTopic"
argument_list|,
name|props
argument_list|)
return|;
block|}
block|}
end_class

end_unit

