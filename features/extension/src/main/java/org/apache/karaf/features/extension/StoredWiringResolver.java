begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|extension
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|hooks
operator|.
name|resolver
operator|.
name|ResolverHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|HostNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_class
class|class
name|StoredWiringResolver
implements|implements
name|ResolverHook
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|BundleWires
argument_list|>
name|wiring
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|path
decl_stmt|;
name|StoredWiringResolver
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|load
argument_list|()
expr_stmt|;
block|}
name|void
name|load
parameter_list|()
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Files
operator|.
name|list
argument_list|(
name|path
argument_list|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
block|{
name|String
name|name
init|=
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|matches
argument_list|(
literal|"[0-9]+"
argument_list|)
condition|)
block|{
name|long
name|id
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|p
argument_list|)
init|)
block|{
name|wiring
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|BundleWires
argument_list|(
name|id
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|filterResolvable
parameter_list|(
name|Collection
argument_list|<
name|BundleRevision
argument_list|>
name|candidates
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|filterSingletonCollisions
parameter_list|(
name|BundleCapability
name|singleton
parameter_list|,
name|Collection
argument_list|<
name|BundleCapability
argument_list|>
name|collisionCandidates
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|filterMatches
parameter_list|(
name|BundleRequirement
name|requirement
parameter_list|,
name|Collection
argument_list|<
name|BundleCapability
argument_list|>
name|candidates
parameter_list|)
block|{
name|long
name|sourceId
init|=
name|getBundleId
argument_list|(
name|requirement
argument_list|)
decl_stmt|;
name|wiring
operator|.
name|get
argument_list|(
name|sourceId
argument_list|)
operator|.
name|filterMatches
argument_list|(
name|requirement
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|()
block|{     }
specifier|private
name|long
name|getBundleId
parameter_list|(
name|BundleRequirement
name|requirement
parameter_list|)
block|{
name|long
name|sourceId
init|=
name|requirement
operator|.
name|getRevision
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFragment
argument_list|(
name|requirement
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|&&
operator|!
name|requirement
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|HostNamespace
operator|.
name|HOST_NAMESPACE
argument_list|)
condition|)
block|{
name|sourceId
operator|=
name|wiring
operator|.
name|get
argument_list|(
name|sourceId
argument_list|)
operator|.
name|getFragmentHost
argument_list|()
expr_stmt|;
block|}
return|return
name|sourceId
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isFragment
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
for|for
control|(
name|Capability
name|cap
range|:
name|resource
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|cap
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|IdentityNamespace
operator|.
name|TYPE_FRAGMENT
operator|.
name|equals
argument_list|(
name|cap
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|synchronized
name|void
name|update
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|BundleWires
name|bw
init|=
operator|new
name|BundleWires
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|bw
operator|.
name|save
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|wiring
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|bw
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|delete
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|wiring
operator|.
name|get
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

