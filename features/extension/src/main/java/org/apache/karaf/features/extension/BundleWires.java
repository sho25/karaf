begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|extension
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|WRITE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|HostNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_class
class|class
name|BundleWires
block|{
name|long
name|bundleId
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|wiring
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|BundleWires
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|bundleId
operator|=
name|bundle
operator|.
name|getBundleId
argument_list|()
expr_stmt|;
for|for
control|(
name|BundleWire
name|wire
range|:
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
operator|.
name|getRequiredWires
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|String
name|requirementId
init|=
name|getRequirementId
argument_list|(
name|wire
operator|.
name|getRequirement
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|capabilityId
init|=
name|getCapabilityId
argument_list|(
name|wire
operator|.
name|getCapability
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|capabilityIds
init|=
name|this
operator|.
name|wiring
operator|.
name|computeIfAbsent
argument_list|(
name|requirementId
argument_list|,
name|key
lambda|->
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|capabilityIds
operator|.
name|add
argument_list|(
name|capabilityId
argument_list|)
expr_stmt|;
block|}
block|}
name|BundleWires
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|bundleId
operator|=
name|bundleId
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|key
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|val
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|capabilityIds
init|=
name|this
operator|.
name|wiring
operator|.
name|computeIfAbsent
argument_list|(
name|key
argument_list|,
name|k
lambda|->
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|capabilityIds
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
name|void
name|save
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|path
operator|.
name|resolve
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|this
operator|.
name|bundleId
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedWriter
name|fw
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|file
argument_list|,
name|TRUNCATE_EXISTING
argument_list|,
name|WRITE
argument_list|,
name|CREATE
argument_list|)
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|wires
range|:
name|wiring
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|requirementId
init|=
name|wires
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|capabilityIds
init|=
name|wires
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|capabilityId
range|:
name|capabilityIds
control|)
block|{
name|fw
operator|.
name|append
argument_list|(
name|requirementId
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
name|capabilityId
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|void
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|path
operator|.
name|resolve
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|this
operator|.
name|bundleId
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|long
index|[]
name|getFragmentHosts
parameter_list|()
block|{
return|return
name|wiring
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
comment|//
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HostNamespace
operator|.
name|HOST_NAMESPACE
argument_list|)
argument_list|)
comment|//
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
comment|//
operator|.
name|flatMap
argument_list|(
name|Set
operator|::
name|stream
argument_list|)
comment|//
operator|.
name|mapToLong
argument_list|(
name|this
operator|::
name|getBundleId
argument_list|)
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|private
name|long
name|getBundleId
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|idx
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|BundleCapability
argument_list|>
name|filterCandidates
parameter_list|(
name|BundleRequirement
name|requirement
parameter_list|,
name|Collection
argument_list|<
name|BundleCapability
argument_list|>
name|candidates
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|wiredCapabilityIds
init|=
name|wiring
operator|.
name|get
argument_list|(
name|getRequirementId
argument_list|(
name|requirement
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|candidates
operator|.
name|stream
argument_list|()
comment|//
operator|.
name|filter
argument_list|(
name|capability
lambda|->
name|isCapabilityWiredToBundle
argument_list|(
name|wiredCapabilityIds
argument_list|,
name|capability
argument_list|)
argument_list|)
comment|//
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isCapabilityWiredToBundle
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|capabilityIds
parameter_list|,
name|BundleCapability
name|capability
parameter_list|)
block|{
return|return
comment|// is this bundle wired to the candidate capability?
operator|(
name|capabilityIds
operator|!=
literal|null
operator|&&
name|capabilityIds
operator|.
name|contains
argument_list|(
name|getCapabilityId
argument_list|(
name|capability
argument_list|)
argument_list|)
operator|)
comment|// if not and the bundle has no wirings to the capability check if itself satisfies it
operator|||
operator|(
name|capabilityIds
operator|==
literal|null
operator|&&
name|capability
operator|.
name|getRevision
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|==
name|this
operator|.
name|bundleId
operator|)
return|;
block|}
specifier|private
name|String
name|getRequirementId
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
name|String
name|filter
init|=
name|requirement
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|Namespace
operator|.
name|REQUIREMENT_FILTER_DIRECTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
name|requirement
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"; "
operator|+
name|filter
return|;
block|}
else|else
block|{
return|return
name|requirement
operator|.
name|getNamespace
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|getCapabilityId
parameter_list|(
name|BundleCapability
name|capability
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|capability
operator|.
name|getRevision
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|v
init|=
name|capability
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; version="
argument_list|)
operator|.
name|append
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

