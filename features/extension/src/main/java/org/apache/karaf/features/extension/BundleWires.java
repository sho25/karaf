begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|extension
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|WRITE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|HostNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_class
class|class
name|BundleWires
block|{
name|long
name|bundleId
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wiring
decl_stmt|;
name|BundleWires
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|bundleId
operator|=
name|bundle
operator|.
name|getBundleId
argument_list|()
expr_stmt|;
name|this
operator|.
name|wiring
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bw
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleWire
name|wire
range|:
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
operator|.
name|getRequiredWires
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|bw
operator|.
name|put
argument_list|(
name|getRequirementId
argument_list|(
name|wire
operator|.
name|getRequirement
argument_list|()
argument_list|)
argument_list|,
name|getCapabilityId
argument_list|(
name|wire
operator|.
name|getCapability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|BundleWires
parameter_list|(
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|key
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|val
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
name|void
name|save
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|path
operator|.
name|resolve
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|this
operator|.
name|bundleId
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|file
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedWriter
name|fw
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|file
argument_list|,
name|TRUNCATE_EXISTING
argument_list|,
name|WRITE
argument_list|,
name|CREATE
argument_list|)
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|wire
range|:
name|wiring
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|fw
operator|.
name|append
argument_list|(
name|wire
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|fw
operator|.
name|append
argument_list|(
name|wire
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|void
name|delete
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|path
operator|.
name|resolve
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|this
operator|.
name|bundleId
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|long
name|getFragmentHost
parameter_list|()
block|{
return|return
name|wiring
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HostNamespace
operator|.
name|HOST_NAMESPACE
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|s
lambda|->
block|{
name|int
name|idx
operator|=
name|s
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
argument_list|;             if
operator|(
name|idx
operator|>
literal|0
operator|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
block|;             }
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
block|)
operator|.
name|findFirst
argument_list|()
operator|.
name|orElse
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
end_class

begin_expr_stmt
unit|} 	 	void
name|filterMatches
argument_list|(
name|BundleRequirement
name|requirement
argument_list|,
name|Collection
argument_list|<
name|BundleCapability
argument_list|>
name|candidates
argument_list|)
block|{
name|String
name|cap
operator|=
name|wiring
operator|.
name|get
argument_list|(
name|getRequirementId
argument_list|(
name|requirement
argument_list|)
argument_list|)
block|;
for|for
control|(
name|Iterator
argument_list|<
name|BundleCapability
argument_list|>
name|candIter
init|=
name|candidates
operator|.
name|iterator
argument_list|()
init|;
name|candIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BundleCapability
name|cand
init|=
name|candIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cap
operator|!=
literal|null
operator|&&
operator|!
name|cap
operator|.
name|equals
argument_list|(
name|getCapabilityId
argument_list|(
name|cand
argument_list|)
argument_list|)
operator|||
name|cap
operator|==
literal|null
operator|&&
name|cand
operator|.
name|getRevision
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|!=
name|this
operator|.
name|bundleId
condition|)
block|{
name|candIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_function
unit|} 	}
specifier|private
name|String
name|getRequirementId
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
name|String
name|filter
init|=
name|requirement
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|Namespace
operator|.
name|REQUIREMENT_FILTER_DIRECTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
name|requirement
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"; "
operator|+
name|filter
return|;
block|}
else|else
block|{
return|return
name|requirement
operator|.
name|getNamespace
argument_list|()
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|String
name|getCapabilityId
parameter_list|(
name|BundleCapability
name|capability
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|capability
operator|.
name|getRevision
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|v
init|=
name|capability
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; version="
argument_list|)
operator|.
name|append
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

