begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|extension
package|;
end_package

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|PackageNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|StoredWiringResolverTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_RESOURCES_WIRINGS
init|=
literal|"target/test-classes/wirings/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EXPECTED_STOCK_WIRINGS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PACKAGE_FILTER
init|=
literal|"(&(osgi.wiring.package=org.osgi.framework)(version>=1.6.0)(!(version>=2.0.0)))"
decl_stmt|;
specifier|private
name|IMocksControl
name|c
decl_stmt|;
specifier|private
name|StoredWiringResolver
name|wiringResolver
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
block|{
name|c
operator|=
name|EasyMock
operator|.
name|createControl
argument_list|()
expr_stmt|;
name|wiringResolver
operator|=
operator|new
name|StoredWiringResolver
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_RESOURCES_WIRINGS
argument_list|)
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|wiringResolver
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
operator|new
name|File
argument_list|(
name|TEST_RESOURCES_WIRINGS
operator|+
literal|"25"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|load
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
literal|9L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filterMatches
parameter_list|()
block|{
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|sourceBundleId
init|=
literal|1L
decl_stmt|;
name|long
name|targetBundleId
init|=
literal|2L
decl_stmt|;
name|String
name|targetBundleVersion
init|=
literal|"1.0.1"
decl_stmt|;
name|BundleCapability
name|candidate1
init|=
name|mockBundleCapability
argument_list|(
name|targetBundleId
argument_list|,
name|targetBundleVersion
argument_list|)
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|candidate1
argument_list|)
expr_stmt|;
name|BundleCapability
name|candidate2
init|=
name|mockBundleCapability
argument_list|(
name|targetBundleId
argument_list|,
literal|"2.1.0"
argument_list|)
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|candidate2
argument_list|)
expr_stmt|;
name|BundleRequirement
name|req
init|=
name|packageRequirement
argument_list|(
name|sourceBundleId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|wiringResolver
operator|.
name|filterMatches
argument_list|(
name|req
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|candidates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|candidate1
argument_list|,
name|candidates
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|filterMatchesFragmentBundle
parameter_list|()
block|{
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|sourceBundleId
init|=
literal|5L
decl_stmt|;
name|long
name|targetBundleId
init|=
literal|2L
decl_stmt|;
name|String
name|targetBundleVersion
init|=
literal|"1.0.1"
decl_stmt|;
name|BundleCapability
name|candidate1
init|=
name|mockBundleCapability
argument_list|(
name|targetBundleId
argument_list|,
name|targetBundleVersion
argument_list|)
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|candidate1
argument_list|)
expr_stmt|;
name|BundleCapability
name|candidate2
init|=
name|mockBundleCapability
argument_list|(
name|targetBundleId
argument_list|,
literal|"2.1.0"
argument_list|)
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|candidate2
argument_list|)
expr_stmt|;
name|BundleRequirement
name|req
init|=
name|packageRequirement
argument_list|(
name|sourceBundleId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|wiringResolver
operator|.
name|filterMatches
argument_list|(
name|req
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|candidates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|candidate1
argument_list|,
name|candidates
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateNew
parameter_list|()
block|{
name|long
name|newBundleId
init|=
literal|25L
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_RESOURCES_WIRINGS
operator|+
name|newBundleId
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|wiredMockBundle
argument_list|(
name|newBundleId
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
comment|// preconditions
name|Assert
operator|.
name|assertFalse
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|newBundleId
argument_list|)
argument_list|)
expr_stmt|;
name|wiringResolver
operator|.
name|update
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// assertions
name|Assert
operator|.
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
operator|+
literal|1
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|newBundleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateExisting
parameter_list|()
block|{
name|long
name|newBundleId
init|=
literal|9L
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_RESOURCES_WIRINGS
operator|+
name|newBundleId
argument_list|)
decl_stmt|;
name|BundleWire
name|wire
init|=
name|mockBundleWire
argument_list|(
name|PackageNamespace
operator|.
name|PACKAGE_NAMESPACE
argument_list|,
name|PACKAGE_FILTER
argument_list|,
name|mockBundleCapability
argument_list|(
literal|25L
argument_list|,
literal|"1.7.8"
argument_list|)
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|wiredMockBundle
argument_list|(
name|newBundleId
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|wire
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
comment|// preconditions
name|Assert
operator|.
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|newBundleId
argument_list|)
argument_list|)
expr_stmt|;
name|wiringResolver
operator|.
name|update
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// assertions
name|Assert
operator|.
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|newBundleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|delete
parameter_list|()
block|{
name|long
name|newBundleId
init|=
literal|25L
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_RESOURCES_WIRINGS
operator|+
name|newBundleId
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|wiredMockBundle
argument_list|(
name|newBundleId
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|wiringResolver
operator|.
name|update
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
comment|// preconditions
name|Assert
operator|.
name|assertTrue
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
operator|+
literal|1
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|newBundleId
argument_list|)
argument_list|)
expr_stmt|;
name|wiringResolver
operator|.
name|delete
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// assertions
name|Assert
operator|.
name|assertFalse
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|newBundleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteNonExisting
parameter_list|()
block|{
name|long
name|otherBundleId
init|=
literal|30L
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|TEST_RESOURCES_WIRINGS
operator|+
name|otherBundleId
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|mockBundle
argument_list|(
name|otherBundleId
argument_list|)
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
comment|// preconditions
name|Assert
operator|.
name|assertFalse
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|otherBundleId
argument_list|)
argument_list|)
expr_stmt|;
name|wiringResolver
operator|.
name|delete
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
comment|// assertions
name|Assert
operator|.
name|assertFalse
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|EXPECTED_STOCK_WIRINGS
argument_list|,
name|wiringResolver
operator|.
name|wiring
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|wiringResolver
operator|.
name|wiring
operator|.
name|containsKey
argument_list|(
name|otherBundleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Bundle
name|mockBundle
parameter_list|(
name|long
name|bundleId
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|c
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleId
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|private
name|Bundle
name|wiredMockBundle
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|List
argument_list|<
name|BundleWire
argument_list|>
name|wires
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|mockBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
name|BundleWiring
name|wiring
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|wiring
operator|.
name|getRequiredWires
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|wires
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|wiring
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|private
name|BundleWire
name|mockBundleWire
parameter_list|(
name|String
name|packageNamespace
parameter_list|,
name|String
name|packageFilter
parameter_list|,
name|BundleCapability
name|capability
parameter_list|)
block|{
name|BundleWire
name|wire
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleWire
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleRequirement
name|req
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleRequirement
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|packageNamespace
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|directives
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|directives
operator|.
name|put
argument_list|(
name|Namespace
operator|.
name|REQUIREMENT_FILTER_DIRECTIVE
argument_list|,
name|packageFilter
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getDirectives
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|directives
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|wire
operator|.
name|getRequirement
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|wire
operator|.
name|getCapability
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|capability
argument_list|)
expr_stmt|;
return|return
name|wire
return|;
block|}
specifier|private
name|BundleRequirement
name|packageRequirement
parameter_list|(
name|long
name|sourceBundleId
parameter_list|,
name|boolean
name|isFragment
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|c
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sourceBundleId
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|BundleRevision
name|rev
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|rev
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Capability
argument_list|>
name|bundleCapabilities
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFragment
condition|)
block|{
name|BundleCapability
name|cap
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleCapability
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|cap
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|IdentityNamespace
operator|.
name|TYPE_FRAGMENT
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|cap
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
name|bundleCapabilities
operator|.
name|add
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
name|expect
argument_list|(
name|rev
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleCapabilities
argument_list|)
expr_stmt|;
name|BundleRequirement
name|req
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleRequirement
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|directives
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|directives
operator|.
name|put
argument_list|(
name|Namespace
operator|.
name|REQUIREMENT_FILTER_DIRECTIVE
argument_list|,
name|PACKAGE_FILTER
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getDirectives
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|directives
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|PackageNamespace
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|req
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rev
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
return|return
name|req
return|;
block|}
specifier|private
name|BundleCapability
name|mockBundleCapability
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|mockBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
name|BundleRevision
name|rev
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|rev
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|BundleCapability
name|cap
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleCapability
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|cap
operator|.
name|getRevision
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|VERSION_ATTRIBUTE
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|cap
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
return|return
name|cap
return|;
block|}
block|}
end_class

end_unit

