begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_class
specifier|public
class|class
name|CapabilityImpl
extends|extends
name|BaseClause
implements|implements
name|Capability
block|{
specifier|private
specifier|final
name|Resource
name|m_resource
decl_stmt|;
specifier|private
specifier|final
name|String
name|m_namespace
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m_dirs
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m_attrs
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|m_uses
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|m_includeFilter
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|m_excludeFilter
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|m_mandatory
decl_stmt|;
specifier|public
name|CapabilityImpl
parameter_list|(
name|Capability
name|capability
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|capability
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|capability
operator|.
name|getDirectives
argument_list|()
argument_list|,
name|capability
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CapabilityImpl
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dirs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
parameter_list|)
block|{
name|m_namespace
operator|=
name|namespace
expr_stmt|;
name|m_resource
operator|=
name|resource
expr_stmt|;
name|m_dirs
operator|=
name|dirs
expr_stmt|;
name|m_attrs
operator|=
name|attrs
expr_stmt|;
comment|// Find all export directives: uses, mandatory, include, and exclude.
name|List
argument_list|<
name|String
argument_list|>
name|uses
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|m_dirs
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|USES_DIRECTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// Parse these uses directive.
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|value
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|uses
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tok
operator|.
name|countTokens
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|uses
operator|.
name|add
argument_list|(
name|tok
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|m_uses
operator|=
name|uses
expr_stmt|;
name|value
operator|=
name|m_dirs
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|INCLUDE_DIRECTIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filters
init|=
name|ResourceBuilder
operator|.
name|parseDelimitedString
argument_list|(
name|value
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|m_includeFilter
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|filter
range|:
name|filters
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|substrings
init|=
name|SimpleFilter
operator|.
name|parseSubstring
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|m_includeFilter
operator|.
name|add
argument_list|(
name|substrings
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_includeFilter
operator|=
literal|null
expr_stmt|;
block|}
name|value
operator|=
name|m_dirs
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|EXCLUDE_DIRECTIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filters
init|=
name|ResourceBuilder
operator|.
name|parseDelimitedString
argument_list|(
name|value
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|m_excludeFilter
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|filters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|filter
range|:
name|filters
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|substrings
init|=
name|SimpleFilter
operator|.
name|parseSubstring
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|m_excludeFilter
operator|.
name|add
argument_list|(
name|substrings
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|m_excludeFilter
operator|=
literal|null
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|mandatory
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
name|value
operator|=
name|m_dirs
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|MANDATORY_DIRECTIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ResourceBuilder
operator|.
name|parseDelimitedString
argument_list|(
name|value
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|mandatory
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
comment|// If attribute exists, then record it as mandatory.
if|if
condition|(
name|m_attrs
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|mandatory
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Otherwise, report an error.
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Mandatory attribute '"
operator|+
name|name
operator|+
literal|"' does not exist."
argument_list|)
throw|;
block|}
block|}
block|}
name|m_mandatory
operator|=
name|mandatory
expr_stmt|;
block|}
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|m_resource
return|;
block|}
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|m_namespace
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDirectives
parameter_list|()
block|{
return|return
name|m_dirs
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|m_attrs
return|;
block|}
specifier|public
name|boolean
name|isAttributeMandatory
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|!
name|m_mandatory
operator|.
name|isEmpty
argument_list|()
operator|&&
name|m_mandatory
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUses
parameter_list|()
block|{
return|return
name|m_uses
return|;
block|}
specifier|public
name|boolean
name|isIncluded
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|(
name|m_includeFilter
operator|==
literal|null
operator|)
operator|&&
operator|(
name|m_excludeFilter
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Get the class name portion of the target class.
name|String
name|className
init|=
name|getClassName
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// If there are no include filters then all classes are included
comment|// by default, otherwise try to find one match.
name|boolean
name|included
init|=
operator|(
name|m_includeFilter
operator|==
literal|null
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|included
operator|&&
name|m_includeFilter
operator|!=
literal|null
operator|&&
name|i
operator|<
name|m_includeFilter
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|included
operator|=
name|SimpleFilter
operator|.
name|compareSubstring
argument_list|(
name|m_includeFilter
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
comment|// If there are no exclude filters then no classes are excluded
comment|// by default, otherwise try to find one match.
name|boolean
name|excluded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
operator|!
name|excluded
operator|)
operator|&&
operator|(
name|m_excludeFilter
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
name|m_excludeFilter
operator|.
name|size
argument_list|()
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|excluded
operator|=
name|SimpleFilter
operator|.
name|compareSubstring
argument_list|(
name|m_excludeFilter
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
return|return
name|included
operator|&&
operator|!
name|excluded
return|;
block|}
specifier|private
specifier|static
name|String
name|getClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
name|className
operator|=
literal|""
expr_stmt|;
block|}
return|return
operator|(
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
operator|)
condition|?
literal|""
else|:
name|className
operator|.
name|substring
argument_list|(
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

