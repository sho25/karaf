begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseClause
block|{
specifier|public
specifier|abstract
name|Resource
name|getResource
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|String
name|getNamespace
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getDirectives
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAttributes
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|getResource
argument_list|()
argument_list|,
name|getNamespace
argument_list|()
argument_list|,
name|getAttributes
argument_list|()
argument_list|,
name|getDirectives
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Resource
name|res
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dirs
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|res
argument_list|)
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|attrs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
name|key
argument_list|,
name|attrs
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|dirs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|sb
argument_list|,
name|key
argument_list|,
name|dirs
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|append
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|,
name|boolean
name|attribute
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Version
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":Version="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Long
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":Long="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Double
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":Double="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Iterable
condition|)
block|{
name|Iterable
name|it
init|=
operator|(
name|Iterable
operator|)
name|val
decl_stmt|;
name|String
name|scalar
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|it
control|)
block|{
name|String
name|ts
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|ts
operator|=
literal|"String"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
block|{
name|ts
operator|=
literal|"Long"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Double
condition|)
block|{
name|ts
operator|=
literal|"Double"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Version
condition|)
block|{
name|ts
operator|=
literal|"Version"
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported scalar type: "
operator|+
name|o
argument_list|)
throw|;
block|}
if|if
condition|(
name|scalar
operator|==
literal|null
condition|)
block|{
name|scalar
operator|=
name|ts
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|scalar
operator|.
name|equals
argument_list|(
name|ts
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unconsistent list type for attribute "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|":List<"
argument_list|)
operator|.
name|append
argument_list|(
name|scalar
argument_list|)
operator|.
name|append
argument_list|(
literal|">="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|it
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|o
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\""
argument_list|)
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|"\\,"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|attribute
condition|?
literal|"="
else|:
literal|":="
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|val
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|matches
argument_list|(
literal|"[0-9a-zA-Z_\\-.]*"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|s
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\\\\"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

