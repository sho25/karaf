begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|RequirementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|SimpleFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|RequirementSort
block|{
comment|/**      * Sorts {@link Resource} based on their {@link Requirement}s and {@link Capability}s.      * @param resources      * @return      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Resource
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|sort
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|resources
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|sorted
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|T
argument_list|>
name|visited
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|r
range|:
name|resources
control|)
block|{
name|visit
argument_list|(
name|r
argument_list|,
name|resources
argument_list|,
name|visited
argument_list|,
name|sorted
argument_list|)
expr_stmt|;
block|}
return|return
name|sorted
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Resource
parameter_list|>
name|void
name|visit
parameter_list|(
name|T
name|resource
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|resources
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|visited
parameter_list|,
name|Set
argument_list|<
name|T
argument_list|>
name|sorted
parameter_list|)
block|{
if|if
condition|(
name|visited
operator|.
name|contains
argument_list|(
name|resource
argument_list|)
condition|)
block|{
return|return;
block|}
name|visited
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
for|for
control|(
name|T
name|r
range|:
name|collectDependencies
argument_list|(
name|resource
argument_list|,
name|resources
argument_list|)
control|)
block|{
name|visit
argument_list|(
name|r
argument_list|,
name|resources
argument_list|,
name|visited
argument_list|,
name|sorted
argument_list|)
expr_stmt|;
block|}
name|sorted
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Finds the dependencies of the current resource.      * @param resource      * @param allResources      * @return      */
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Resource
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|collectDependencies
parameter_list|(
name|T
name|resource
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|allResources
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Requirement
argument_list|>
name|requirements
init|=
name|resource
operator|.
name|getRequirements
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Requirement
name|requirement
range|:
name|requirements
control|)
block|{
name|boolean
name|isSatisfied
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Resource
name|r
range|:
name|result
control|)
block|{
for|for
control|(
name|Capability
name|capability
range|:
name|r
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|isSatisfied
argument_list|(
name|requirement
argument_list|,
name|capability
argument_list|)
condition|)
block|{
name|isSatisfied
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
name|T
name|r
range|:
name|allResources
control|)
block|{
if|if
condition|(
operator|!
name|isSatisfied
condition|)
block|{
for|for
control|(
name|Capability
name|capability
range|:
name|r
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|isSatisfied
argument_list|(
name|requirement
argument_list|,
name|capability
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isSatisfied
parameter_list|(
name|Requirement
name|requirement
parameter_list|,
name|Capability
name|capability
parameter_list|)
block|{
name|RequirementImpl
name|br
decl_stmt|;
if|if
condition|(
name|requirement
operator|instanceof
name|RequirementImpl
condition|)
block|{
name|br
operator|=
operator|(
name|RequirementImpl
operator|)
name|requirement
expr_stmt|;
block|}
else|else
block|{
name|String
name|filter
init|=
name|requirement
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FILTER_DIRECTIVE
argument_list|)
decl_stmt|;
name|SimpleFilter
name|sf
init|=
operator|(
name|filter
operator|!=
literal|null
operator|)
condition|?
name|SimpleFilter
operator|.
name|parse
argument_list|(
name|filter
argument_list|)
else|:
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|SimpleFilter
operator|.
name|MATCH_ALL
argument_list|)
decl_stmt|;
name|br
operator|=
operator|new
name|RequirementImpl
argument_list|(
literal|null
argument_list|,
name|requirement
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|requirement
operator|.
name|getDirectives
argument_list|()
argument_list|,
name|requirement
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|sf
argument_list|)
expr_stmt|;
block|}
return|return
name|br
operator|.
name|matches
argument_list|(
name|capability
argument_list|)
return|;
block|}
block|}
end_class

end_unit

