begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_NOT_MODIFIED
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
operator|.
name|HTTP_OK
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|UrlLoader
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HEADER_ACCEPT_ENCODING
init|=
literal|"Accept-Encoding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GZIP
init|=
literal|"gzip"
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
specifier|final
name|long
name|expiration
decl_stmt|;
specifier|private
name|long
name|lastModified
decl_stmt|;
specifier|private
name|long
name|lastChecked
decl_stmt|;
specifier|public
name|UrlLoader
parameter_list|(
name|String
name|url
parameter_list|,
name|long
name|expiration
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|expiration
operator|=
name|expiration
expr_stmt|;
block|}
specifier|protected
name|boolean
name|checkAndLoadCache
parameter_list|()
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastChecked
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|expiration
operator|<
literal|0
operator|||
name|time
operator|-
name|lastChecked
operator|<
name|expiration
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
try|try
block|{
name|URLConnection
name|connection
init|=
operator|new
name|java
operator|.
name|net
operator|.
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|instanceof
name|HttpURLConnection
condition|)
block|{
name|HttpURLConnection
name|con
init|=
operator|(
name|HttpURLConnection
operator|)
name|connection
decl_stmt|;
if|if
condition|(
name|lastModified
operator|>
literal|0
condition|)
block|{
name|con
operator|.
name|setIfModifiedSince
argument_list|(
name|lastModified
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|setRequestProperty
argument_list|(
name|HEADER_ACCEPT_ENCODING
argument_list|,
name|GZIP
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|con
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|==
name|HTTP_NOT_MODIFIED
condition|)
block|{
name|lastChecked
operator|=
name|time
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|rc
operator|!=
name|HTTP_OK
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected http response loading "
operator|+
name|url
operator|+
literal|" : "
operator|+
name|rc
operator|+
literal|" "
operator|+
name|con
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|long
name|lm
init|=
name|connection
operator|.
name|getLastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|lm
operator|>
literal|0
operator|&&
name|lm
operator|<=
name|lastModified
condition|)
block|{
name|lastChecked
operator|=
name|time
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
init|(
name|BufferedInputStream
name|bis
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
init|)
block|{
comment|// Auto-detect gzipped streams
name|InputStream
name|is
init|=
name|bis
decl_stmt|;
name|bis
operator|.
name|mark
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|int
name|b0
init|=
name|bis
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|b1
init|=
name|bis
operator|.
name|read
argument_list|()
decl_stmt|;
name|bis
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|b0
operator|==
literal|0x1f
operator|&&
name|b1
operator|==
literal|0x8b
condition|)
block|{
name|is
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|bis
argument_list|)
expr_stmt|;
block|}
name|boolean
name|r
init|=
name|doRead
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|lastModified
operator|=
name|lm
expr_stmt|;
name|lastChecked
operator|=
name|time
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|abstract
name|boolean
name|doRead
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

