begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|FeaturesServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|JsonWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|internal
operator|.
name|region
operator|.
name|StandardRegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionFilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|DigraphHelper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DIGRAPH_FILE
init|=
literal|"digraph.json"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGIONS
init|=
literal|"regions"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EDGES
init|=
literal|"edges"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TAIL
init|=
literal|"tail"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEAD
init|=
literal|"head"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|POLICY
init|=
literal|"policy"
decl_stmt|;
specifier|private
name|DigraphHelper
parameter_list|()
block|{     }
specifier|public
specifier|static
name|StandardRegionDigraph
name|loadDigraph
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
throws|throws
name|BundleException
throws|,
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|StandardRegionDigraph
name|digraph
decl_stmt|;
name|ThreadLocal
argument_list|<
name|Region
argument_list|>
name|threadLocal
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
name|File
name|digraphFile
init|=
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|DIGRAPH_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|digraphFile
operator|==
literal|null
operator|||
operator|!
name|digraphFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|digraph
operator|=
operator|new
name|StandardRegionDigraph
argument_list|(
name|bundleContext
argument_list|,
name|threadLocal
argument_list|)
expr_stmt|;
name|Region
name|root
init|=
name|digraph
operator|.
name|createRegion
argument_list|(
name|FeaturesServiceImpl
operator|.
name|ROOT_REGION
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|root
operator|.
name|addBundle
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|digraphFile
argument_list|)
init|)
block|{
name|digraph
operator|=
name|readDigraph
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|in
argument_list|)
argument_list|,
name|bundleContext
argument_list|,
name|threadLocal
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|digraph
return|;
block|}
specifier|public
specifier|static
name|void
name|saveDigraph
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|RegionDigraph
name|digraph
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|digraphFile
init|=
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|DIGRAPH_FILE
argument_list|)
decl_stmt|;
try|try
init|(
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|digraphFile
argument_list|)
init|)
block|{
name|saveDigraph
argument_list|(
name|digraph
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
name|StandardRegionDigraph
name|readDigraph
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|BundleContext
name|bundleContext
parameter_list|,
name|ThreadLocal
argument_list|<
name|Region
argument_list|>
name|threadLocal
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
throws|,
name|InvalidSyntaxException
block|{
name|StandardRegionDigraph
name|digraph
init|=
operator|new
name|StandardRegionDigraph
argument_list|(
name|bundleContext
argument_list|,
name|threadLocal
argument_list|)
decl_stmt|;
name|Map
name|json
init|=
operator|(
name|Map
operator|)
name|JsonReader
operator|.
name|read
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Number
argument_list|>
argument_list|>
name|regions
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Number
argument_list|>
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|REGIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|Number
argument_list|>
argument_list|>
name|rmap
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|rmap
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|digraph
operator|.
name|createRegion
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|Number
name|b
range|:
name|rmap
operator|.
name|getValue
argument_list|()
control|)
block|{
name|region
operator|.
name|addBundle
argument_list|(
name|b
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|edges
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
name|EDGES
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|edges
control|)
block|{
name|String
name|tail
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|get
argument_list|(
name|TAIL
argument_list|)
decl_stmt|;
name|String
name|head
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|get
argument_list|(
name|HEAD
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|policy
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|e
operator|.
name|get
argument_list|(
name|POLICY
argument_list|)
decl_stmt|;
name|RegionFilterBuilder
name|builder
init|=
name|digraph
operator|.
name|createRegionFilterBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|rf
range|:
name|policy
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|ns
init|=
name|rf
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|rf
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|allow
argument_list|(
name|ns
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|digraph
operator|.
name|connect
argument_list|(
name|digraph
operator|.
name|getRegion
argument_list|(
name|tail
argument_list|)
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|digraph
operator|.
name|getRegion
argument_list|(
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|digraph
return|;
block|}
specifier|static
name|void
name|saveDigraph
parameter_list|(
name|RegionDigraph
name|digraph
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|regions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|REGIONS
argument_list|,
name|regions
argument_list|)
expr_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|digraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
name|regions
operator|.
name|put
argument_list|(
name|region
operator|.
name|getName
argument_list|()
argument_list|,
name|region
operator|.
name|getBundleIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|edges
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|json
operator|.
name|put
argument_list|(
name|EDGES
argument_list|,
name|edges
argument_list|)
expr_stmt|;
for|for
control|(
name|Region
name|tail
range|:
name|digraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
for|for
control|(
name|RegionDigraph
operator|.
name|FilteredRegion
name|fr
range|:
name|digraph
operator|.
name|getEdges
argument_list|(
name|tail
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|edge
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|edge
operator|.
name|put
argument_list|(
name|TAIL
argument_list|,
name|tail
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|edge
operator|.
name|put
argument_list|(
name|HEAD
argument_list|,
name|fr
operator|.
name|getRegion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|edge
operator|.
name|put
argument_list|(
name|POLICY
argument_list|,
name|fr
operator|.
name|getFilter
argument_list|()
operator|.
name|getSharingPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|edges
operator|.
name|add
argument_list|(
name|edge
argument_list|)
expr_stmt|;
block|}
block|}
name|JsonWriter
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|json
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

