begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|ResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|BaseRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|RequirementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|SimpleFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|HostedCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|ResolveContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|RESOLUTION_DIRECTIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|RESOLUTION_OPTIONAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
import|;
end_import

begin_class
specifier|public
class|class
name|OfflineResolver
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|==
literal|null
operator|||
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"File path expected"
argument_list|)
throw|;
block|}
name|resolve
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|resolve
parameter_list|(
name|String
name|resolutionFile
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resolution
decl_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|resolutionFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|resolution
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|JsonReader
operator|.
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Repository
name|globalRepository
decl_stmt|;
if|if
condition|(
name|resolution
operator|.
name|containsKey
argument_list|(
literal|"globalRepository"
argument_list|)
condition|)
block|{
name|globalRepository
operator|=
name|readRepository
argument_list|(
name|resolution
operator|.
name|get
argument_list|(
literal|"globalRepository"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|globalRepository
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|Repository
name|repository
init|=
name|readRepository
argument_list|(
name|resolution
operator|.
name|get
argument_list|(
literal|"repository"
argument_list|)
argument_list|)
decl_stmt|;
name|Resolver
name|resolver
init|=
operator|new
name|ResolverImpl
argument_list|(
operator|new
name|Logger
argument_list|(
name|Logger
operator|.
name|LOG_ERROR
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
init|=
name|resolver
operator|.
name|resolve
argument_list|(
operator|new
name|ResolveContext
argument_list|()
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Resource
argument_list|>
name|mandatory
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CandidateComparator
name|candidateComparator
init|=
operator|new
name|CandidateComparator
argument_list|(
name|mandatory
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|getMandatoryResources
parameter_list|()
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Requirement
name|req
init|=
operator|new
name|RequirementImpl
argument_list|(
literal|null
argument_list|,
name|IDENTITY_NAMESPACE
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|parse
argument_list|(
literal|"("
operator|+
name|IDENTITY_NAMESPACE
operator|+
literal|"=root)"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Capability
argument_list|>
name|identities
init|=
name|repository
operator|.
name|findProviders
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|req
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
for|for
control|(
name|Capability
name|identity
range|:
name|identities
control|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|identity
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Capability
argument_list|>
name|findProviders
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
name|List
argument_list|<
name|Capability
argument_list|>
name|caps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Requirement
argument_list|,
name|Collection
argument_list|<
name|Capability
argument_list|>
argument_list|>
name|resMap
init|=
name|repository
operator|.
name|findProviders
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|requirement
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Capability
argument_list|>
name|res
init|=
name|resMap
operator|!=
literal|null
condition|?
name|resMap
operator|.
name|get
argument_list|(
name|requirement
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
operator|&&
operator|!
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|caps
operator|.
name|addAll
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|globalRepository
operator|!=
literal|null
condition|)
block|{
comment|// Only bring in external resources for non optional requirements
if|if
condition|(
operator|!
name|RESOLUTION_OPTIONAL
operator|.
name|equals
argument_list|(
name|requirement
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|RESOLUTION_DIRECTIVE
argument_list|)
argument_list|)
condition|)
block|{
name|resMap
operator|=
name|globalRepository
operator|.
name|findProviders
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|requirement
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|resMap
operator|!=
literal|null
condition|?
name|resMap
operator|.
name|get
argument_list|(
name|requirement
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
operator|&&
operator|!
name|res
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|caps
operator|.
name|addAll
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Sort caps
name|Collections
operator|.
name|sort
argument_list|(
name|caps
argument_list|,
name|candidateComparator
argument_list|)
expr_stmt|;
return|return
name|caps
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|insertHostedCapability
parameter_list|(
name|List
argument_list|<
name|Capability
argument_list|>
name|capabilities
parameter_list|,
name|HostedCapability
name|hostedCapability
parameter_list|)
block|{
name|int
name|idx
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|capabilities
argument_list|,
name|hostedCapability
argument_list|,
name|candidateComparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|capabilities
operator|.
name|add
argument_list|(
name|idx
argument_list|,
name|hostedCapability
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEffective
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|Wiring
argument_list|>
name|getWirings
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
block|}
specifier|private
specifier|static
name|Repository
name|readRepository
parameter_list|(
name|Object
name|repository
parameter_list|)
throws|throws
name|BundleException
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|metadatas
decl_stmt|;
if|if
condition|(
name|repository
operator|instanceof
name|Map
condition|)
block|{
name|metadatas
operator|=
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
operator|)
name|repository
operator|)
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|metadatas
operator|=
operator|(
name|Collection
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
operator|)
name|repository
expr_stmt|;
block|}
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|metadata
range|:
name|metadatas
control|)
block|{
name|ResourceImpl
name|res
init|=
operator|new
name|ResourceImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cap
range|:
name|metadata
operator|.
name|get
argument_list|(
literal|"capabilities"
argument_list|)
control|)
block|{
name|res
operator|.
name|addCapabilities
argument_list|(
name|ResourceBuilder
operator|.
name|parseCapability
argument_list|(
name|res
argument_list|,
name|cap
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metadata
operator|.
name|containsKey
argument_list|(
literal|"requirements"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|req
range|:
name|metadata
operator|.
name|get
argument_list|(
literal|"requirements"
argument_list|)
control|)
block|{
name|res
operator|.
name|addRequirements
argument_list|(
name|ResourceBuilder
operator|.
name|parseRequirement
argument_list|(
name|res
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|resources
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BaseRepository
argument_list|(
name|resources
argument_list|)
return|;
block|}
block|}
end_class

end_unit

