begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|HostedCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|ResolveContext
import|;
end_import

begin_comment
comment|/** */
end_comment

begin_class
specifier|public
class|class
name|ResolveContextImpl
extends|extends
name|ResolveContext
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Resource
argument_list|>
name|mandatory
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Resource
argument_list|>
name|optional
decl_stmt|;
specifier|private
specifier|final
name|Repository
name|repository
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Resource
argument_list|,
name|Wiring
argument_list|>
name|wirings
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|resolveOptional
decl_stmt|;
specifier|private
specifier|final
name|CandidateComparator
name|candidateComparator
init|=
operator|new
name|CandidateComparator
argument_list|()
decl_stmt|;
specifier|public
name|ResolveContextImpl
parameter_list|(
name|Set
argument_list|<
name|Resource
argument_list|>
name|mandatory
parameter_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
name|optional
parameter_list|,
name|Repository
name|repository
parameter_list|,
name|boolean
name|resolveOptional
parameter_list|)
block|{
name|this
operator|.
name|mandatory
operator|=
name|mandatory
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
name|this
operator|.
name|repository
operator|=
name|repository
expr_stmt|;
name|this
operator|.
name|wirings
operator|=
operator|new
name|HashMap
argument_list|<
name|Resource
argument_list|,
name|Wiring
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|resolveOptional
operator|=
name|resolveOptional
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|getMandatoryResources
parameter_list|()
block|{
return|return
name|mandatory
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|getOptionalResources
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Capability
argument_list|>
name|findProviders
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
name|List
argument_list|<
name|Capability
argument_list|>
name|caps
init|=
operator|new
name|ArrayList
argument_list|<
name|Capability
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Requirement
argument_list|,
name|Collection
argument_list|<
name|Capability
argument_list|>
argument_list|>
name|resMap
init|=
name|repository
operator|.
name|findProviders
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|requirement
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Capability
argument_list|>
name|res
init|=
name|resMap
operator|!=
literal|null
condition|?
name|resMap
operator|.
name|get
argument_list|(
name|requirement
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|caps
operator|.
name|addAll
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|caps
argument_list|,
name|candidateComparator
argument_list|)
expr_stmt|;
return|return
name|caps
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|insertHostedCapability
parameter_list|(
name|List
name|capabilities
parameter_list|,
name|HostedCapability
name|hostedCapability
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capabilities
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Capability
name|cap
init|=
operator|(
name|Capability
operator|)
name|capabilities
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidateComparator
operator|.
name|compare
argument_list|(
name|hostedCapability
argument_list|,
name|cap
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|capabilities
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|hostedCapability
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
name|capabilities
operator|.
name|add
argument_list|(
name|hostedCapability
argument_list|)
expr_stmt|;
return|return
name|capabilities
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEffective
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
return|return
name|resolveOptional
operator|||
operator|!
name|Constants
operator|.
name|RESOLUTION_OPTIONAL
operator|.
name|equals
argument_list|(
name|requirement
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|RESOLUTION_DIRECTIVE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|Wiring
argument_list|>
name|getWirings
parameter_list|()
block|{
return|return
name|wirings
return|;
block|}
block|}
end_class

end_unit

