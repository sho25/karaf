begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|region
operator|.
name|persist
operator|.
name|RegionsPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_class
specifier|public
class|class
name|PersistentBundleManager
extends|extends
name|BundleManager
block|{
specifier|private
specifier|final
name|RegionsPersistence
name|regionsPersistence
decl_stmt|;
specifier|public
name|PersistentBundleManager
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|RegionsPersistence
name|regionsPersistence
parameter_list|)
block|{
name|super
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsPersistence
operator|=
name|regionsPersistence
expr_stmt|;
block|}
specifier|public
name|PersistentBundleManager
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|long
name|refreshTimeout
parameter_list|,
name|RegionsPersistence
name|regionsPersistence
parameter_list|)
block|{
name|super
argument_list|(
name|bundleContext
argument_list|,
name|refreshTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsPersistence
operator|=
name|regionsPersistence
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BundleInstallerResult
name|installBundleIfNeeded
parameter_list|(
name|String
name|bundleLocation
parameter_list|,
name|int
name|startLevel
parameter_list|,
name|String
name|regionName
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
block|{
name|BundleInstallerResult
name|result
init|=
name|super
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundleLocation
argument_list|,
name|startLevel
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|installToRegion
argument_list|(
name|regionName
argument_list|,
name|result
operator|.
name|bundle
argument_list|,
name|result
operator|.
name|isNew
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|installToRegion
parameter_list|(
name|String
name|region
parameter_list|,
name|Bundle
name|bundle
parameter_list|,
name|boolean
name|isNew
parameter_list|)
throws|throws
name|BundleException
block|{
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|isNew
condition|)
block|{
if|if
condition|(
name|regionsPersistence
operator|!=
literal|null
condition|)
block|{
name|regionsPersistence
operator|.
name|install
argument_list|(
name|bundle
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find RegionsPersistence service, while installing "
operator|+
name|region
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

