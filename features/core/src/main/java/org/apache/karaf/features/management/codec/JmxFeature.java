begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|management
operator|.
name|codec
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|ConfigFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|ConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|management
operator|.
name|FeaturesServiceMBean
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
class|class
name|JmxFeature
block|{
comment|/**      * The CompositeType which represents a single feature      */
specifier|public
specifier|static
specifier|final
name|CompositeType
name|FEATURE
decl_stmt|;
comment|/**      * The TabularType which represents a list of features      */
specifier|public
specifier|static
specifier|final
name|TabularType
name|FEATURE_TABLE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CompositeType
name|FEATURE_IDENTIFIER
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TabularType
name|FEATURE_IDENTIFIER_TABLE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CompositeType
name|FEATURE_CONFIG_ELEMENT
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TabularType
name|FEATURE_CONFIG_ELEMENT_TABLE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CompositeType
name|FEATURE_CONFIG
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TabularType
name|FEATURE_CONFIG_TABLE
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|CompositeType
name|FEATURE_CONFIG_FILES
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TabularType
name|FEATURE_CONFIG_FILES_TABLE
decl_stmt|;
specifier|private
specifier|final
name|CompositeData
name|data
decl_stmt|;
specifier|public
name|JmxFeature
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|boolean
name|installed
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
operator|new
name|Object
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemValues
index|[
literal|0
index|]
operator|=
name|feature
operator|.
name|getName
argument_list|()
expr_stmt|;
name|itemValues
index|[
literal|1
index|]
operator|=
name|feature
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|itemValues
index|[
literal|2
index|]
operator|=
name|getDependencyIdentifierTable
argument_list|(
name|feature
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|3
index|]
operator|=
name|getBundleUris
argument_list|(
name|feature
operator|.
name|getBundles
argument_list|()
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|4
index|]
operator|=
name|getConfigList
argument_list|(
name|feature
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|5
index|]
operator|=
name|getConfigFileList
argument_list|(
name|feature
operator|.
name|getConfigurationFiles
argument_list|()
argument_list|)
expr_stmt|;
name|itemValues
index|[
literal|6
index|]
operator|=
name|installed
expr_stmt|;
name|data
operator|=
operator|new
name|CompositeDataSupport
argument_list|(
name|FEATURE
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot form feature open data"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CompositeData
name|asCompositeData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
specifier|static
name|TabularData
name|tableFrom
parameter_list|(
name|Collection
argument_list|<
name|JmxFeature
argument_list|>
name|features
parameter_list|)
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|FEATURE_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|JmxFeature
name|feature
range|:
name|features
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|feature
operator|.
name|asCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|private
specifier|static
name|TabularData
name|getDependencyIdentifierTable
parameter_list|(
name|List
argument_list|<
name|Dependency
argument_list|>
name|features
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|FEATURE_IDENTIFIER_TABLE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|featureSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Dependency
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|featureSet
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|featureSet
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|itemNames
init|=
operator|new
name|String
index|[]
block|{
name|FeaturesServiceMBean
operator|.
name|FEATURE_NAME
block|,
name|FeaturesServiceMBean
operator|.
name|FEATURE_VERSION
block|}
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
operator|new
name|Object
index|[]
block|{
name|feature
operator|.
name|getName
argument_list|()
block|,
name|feature
operator|.
name|getVersion
argument_list|()
block|}
decl_stmt|;
name|CompositeData
name|ident
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|FEATURE_IDENTIFIER
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|ident
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|static
name|String
index|[]
name|getBundleUris
parameter_list|(
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|infos
parameter_list|)
block|{
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
name|infos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|infos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
specifier|static
name|TabularData
name|getConfigList
parameter_list|(
name|List
argument_list|<
name|ConfigInfo
argument_list|>
name|config
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|FEATURE_CONFIG_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|ConfigInfo
name|configInfo
range|:
name|config
control|)
block|{
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
block|{
name|configInfo
operator|.
name|getName
argument_list|()
block|,
name|getConfigElementTable
argument_list|(
name|configInfo
operator|.
name|getProperties
argument_list|()
argument_list|)
block|,
operator|new
name|Boolean
argument_list|(
name|configInfo
operator|.
name|isAppend
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|CompositeData
name|configComposite
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|FEATURE_CONFIG
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|configComposite
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|static
name|TabularData
name|getConfigFileList
parameter_list|(
name|List
argument_list|<
name|ConfigFileInfo
argument_list|>
name|configFiles
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|FEATURE_CONFIG_FILES_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|ConfigFileInfo
name|configFile
range|:
name|configFiles
control|)
block|{
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_FILES
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
block|{
name|configFile
operator|.
name|getFinalname
argument_list|()
block|}
decl_stmt|;
name|CompositeData
name|config
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|FEATURE_CONFIG_FILES
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|static
name|TabularData
name|getConfigElementTable
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|FEATURE_CONFIG_ELEMENT_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_ELEMENT
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
block|{
name|entry
operator|.
name|getKey
argument_list|()
block|,
name|entry
operator|.
name|getValue
argument_list|()
block|}
decl_stmt|;
name|CompositeData
name|element
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|FEATURE_CONFIG_ELEMENT
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|static
name|TabularData
name|getConfigElementTable
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|FEATURE_CONFIG_ELEMENT_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|props
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_ELEMENT
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
block|{
operator|(
name|String
operator|)
name|key
block|,
name|props
operator|.
name|getProperty
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|)
block|}
decl_stmt|;
name|CompositeData
name|element
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|FEATURE_CONFIG_ELEMENT
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
static|static
block|{
name|FEATURE_IDENTIFIER
operator|=
name|createFeatureIdentifierType
argument_list|()
expr_stmt|;
name|FEATURE_IDENTIFIER_TABLE
operator|=
name|createFeatureIdentifierTableType
argument_list|()
expr_stmt|;
name|FEATURE_CONFIG_ELEMENT
operator|=
name|createFeatureConfigElementType
argument_list|()
expr_stmt|;
name|FEATURE_CONFIG_ELEMENT_TABLE
operator|=
name|createFeatureConfigElementTableType
argument_list|()
expr_stmt|;
name|FEATURE_CONFIG
operator|=
name|createFeatureConfigType
argument_list|()
expr_stmt|;
name|FEATURE_CONFIG_TABLE
operator|=
name|createFeatureConfigTableType
argument_list|()
expr_stmt|;
name|FEATURE_CONFIG_FILES
operator|=
name|createFeatureConfigFilesType
argument_list|()
expr_stmt|;
name|FEATURE_CONFIG_FILES_TABLE
operator|=
name|createFeatureConfigFilesTableType
argument_list|()
expr_stmt|;
name|FEATURE
operator|=
name|createFeatureType
argument_list|()
expr_stmt|;
name|FEATURE_TABLE
operator|=
name|createFeatureTableType
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|CompositeType
name|createFeatureIdentifierType
parameter_list|()
block|{
try|try
block|{
name|String
name|description
init|=
literal|"This type identify a Karaf features"
decl_stmt|;
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_IDENTIFIER
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
operator|new
name|String
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemTypes
index|[
literal|0
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|1
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemDescriptions
index|[
literal|0
index|]
operator|=
literal|"The id of the feature"
expr_stmt|;
name|itemDescriptions
index|[
literal|1
index|]
operator|=
literal|"The version of the feature"
expr_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
literal|"FeatureIdentifier"
argument_list|,
name|description
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build featureIdentifier type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TabularType
name|createFeatureIdentifierTableType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TabularType
argument_list|(
literal|"Features"
argument_list|,
literal|"The table of featureIdentifiers"
argument_list|,
name|FEATURE_IDENTIFIER
argument_list|,
operator|new
name|String
index|[]
block|{
name|FeaturesServiceMBean
operator|.
name|FEATURE_NAME
block|,
name|FeaturesServiceMBean
operator|.
name|FEATURE_VERSION
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build featureIdentifier table type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|CompositeType
name|createFeatureConfigElementType
parameter_list|()
block|{
try|try
block|{
name|String
name|description
init|=
literal|"This type encapsulates Karaf feature config element"
decl_stmt|;
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_ELEMENT
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
operator|new
name|String
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemTypes
index|[
literal|0
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|1
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemDescriptions
index|[
literal|0
index|]
operator|=
literal|"The key"
expr_stmt|;
name|itemDescriptions
index|[
literal|1
index|]
operator|=
literal|"The value"
expr_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
literal|"ConfigElement"
argument_list|,
name|description
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build configElement type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TabularType
name|createFeatureConfigElementTableType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TabularType
argument_list|(
literal|"ConfigElement"
argument_list|,
literal|"The table of configurations elements"
argument_list|,
name|FEATURE_CONFIG_ELEMENT
argument_list|,
operator|new
name|String
index|[]
block|{
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_ELEMENT_KEY
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build feature table type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|CompositeType
name|createFeatureConfigType
parameter_list|()
block|{
try|try
block|{
name|String
name|description
init|=
literal|"This type encapsulates Karaf feature config"
decl_stmt|;
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
operator|new
name|String
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemTypes
index|[
literal|0
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|1
index|]
operator|=
name|FEATURE_CONFIG_ELEMENT_TABLE
expr_stmt|;
name|itemTypes
index|[
literal|2
index|]
operator|=
name|SimpleType
operator|.
name|BOOLEAN
expr_stmt|;
name|itemDescriptions
index|[
literal|0
index|]
operator|=
literal|"The PID of the config"
expr_stmt|;
name|itemDescriptions
index|[
literal|1
index|]
operator|=
literal|"The configuration elements"
expr_stmt|;
name|itemDescriptions
index|[
literal|2
index|]
operator|=
literal|"The Append flag"
expr_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
literal|"Config"
argument_list|,
name|description
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build configElement type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|CompositeType
name|createFeatureConfigFilesType
parameter_list|()
block|{
try|try
block|{
name|String
name|description
init|=
literal|"This type encapsulates Karaf feature config files"
decl_stmt|;
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_FILES
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
operator|new
name|String
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemTypes
index|[
literal|0
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemDescriptions
index|[
literal|0
index|]
operator|=
literal|"The configuration file"
expr_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
literal|"Config"
argument_list|,
name|description
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build configElement type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TabularType
name|createFeatureConfigTableType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TabularType
argument_list|(
literal|"Features"
argument_list|,
literal|"The table of configurations"
argument_list|,
name|FEATURE_CONFIG
argument_list|,
operator|new
name|String
index|[]
block|{
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_PID
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build feature table type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TabularType
name|createFeatureConfigFilesTableType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TabularType
argument_list|(
literal|"Features"
argument_list|,
literal|"The table of configuration files"
argument_list|,
name|FEATURE_CONFIG_FILES
argument_list|,
operator|new
name|String
index|[]
block|{
name|FeaturesServiceMBean
operator|.
name|FEATURE_CONFIG_FILES_ELEMENTS
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build feature table type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|CompositeType
name|createFeatureType
parameter_list|()
block|{
try|try
block|{
name|String
name|description
init|=
literal|"This type encapsulates Karaf features"
decl_stmt|;
name|String
index|[]
name|itemNames
init|=
name|FeaturesServiceMBean
operator|.
name|FEATURE
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
operator|new
name|String
index|[
name|itemNames
operator|.
name|length
index|]
decl_stmt|;
name|itemTypes
index|[
literal|0
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|1
index|]
operator|=
name|SimpleType
operator|.
name|STRING
expr_stmt|;
name|itemTypes
index|[
literal|2
index|]
operator|=
name|FEATURE_IDENTIFIER_TABLE
expr_stmt|;
name|itemTypes
index|[
literal|3
index|]
operator|=
operator|new
name|ArrayType
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|itemTypes
index|[
literal|4
index|]
operator|=
name|FEATURE_CONFIG_TABLE
expr_stmt|;
name|itemTypes
index|[
literal|5
index|]
operator|=
name|FEATURE_CONFIG_FILES_TABLE
expr_stmt|;
name|itemTypes
index|[
literal|6
index|]
operator|=
name|SimpleType
operator|.
name|BOOLEAN
expr_stmt|;
name|itemDescriptions
index|[
literal|0
index|]
operator|=
literal|"The name of the feature"
expr_stmt|;
name|itemDescriptions
index|[
literal|1
index|]
operator|=
literal|"The version of the feature"
expr_stmt|;
name|itemDescriptions
index|[
literal|2
index|]
operator|=
literal|"The feature dependencies"
expr_stmt|;
name|itemDescriptions
index|[
literal|3
index|]
operator|=
literal|"The feature bundles"
expr_stmt|;
name|itemDescriptions
index|[
literal|4
index|]
operator|=
literal|"The feature configurations"
expr_stmt|;
name|itemDescriptions
index|[
literal|5
index|]
operator|=
literal|"The feature configuration files"
expr_stmt|;
name|itemDescriptions
index|[
literal|6
index|]
operator|=
literal|"Whether the feature is installed"
expr_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
literal|"Feature"
argument_list|,
name|description
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build feature type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|TabularType
name|createFeatureTableType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|TabularType
argument_list|(
literal|"Features"
argument_list|,
literal|"The table of all features"
argument_list|,
name|FEATURE
argument_list|,
operator|new
name|String
index|[]
block|{
name|FeaturesServiceMBean
operator|.
name|FEATURE_NAME
block|,
name|FeaturesServiceMBean
operator|.
name|FEATURE_VERSION
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to build feature table type"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

