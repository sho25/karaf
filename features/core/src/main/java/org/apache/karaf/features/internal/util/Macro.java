begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_class
specifier|public
class|class
name|Macro
block|{
specifier|public
specifier|static
name|String
name|transform
parameter_list|(
name|String
name|macro
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|macro
operator|.
name|startsWith
argument_list|(
literal|"${"
argument_list|)
operator|&&
name|macro
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|)
block|{
name|String
index|[]
name|args
init|=
name|macro
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
name|macro
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid syntax for macro: "
operator|+
name|macro
argument_list|)
throw|;
block|}
return|return
name|version
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"range"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid syntax for macro: "
operator|+
name|macro
argument_list|)
throw|;
block|}
return|return
name|range
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown macro: "
operator|+
name|macro
argument_list|)
throw|;
block|}
block|}
return|return
name|value
return|;
block|}
comment|/**      * Modify a version to set a version policy. Thed policy is a mask that is      * mapped to a version.      *      *<pre>      * +           increment      * -           decrement      * =           maintain      *&tilde;           discard      *      * ==+      = maintain major, minor, increment micro, discard qualifier      *&tilde;&tilde;&tilde;=     = just get the qualifier      * version=&quot;[${version;==;${@}},${version;=+;${@}})&quot; 	 *</pre> 	 * 	 * @param args      * @return      */
specifier|final
specifier|static
name|String
name|MASK_STRING
init|=
literal|"[\\-+=~0123456789]{0,3}[=~]?"
decl_stmt|;
specifier|static
name|String
name|version
parameter_list|(
name|String
name|mask
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|del
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mask
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|mask
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'~'
condition|)
block|{
if|if
condition|(
name|i
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Version mask can only specify 3 digits"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|result
operator|=
name|version
operator|.
name|getQualifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// Handle masks like +00, =+0
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|x
operator|=
name|version
operator|.
name|getMajor
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|x
operator|=
name|version
operator|.
name|getMinor
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|x
operator|=
name|version
operator|.
name|getMicro
argument_list|()
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'+'
case|:
name|x
operator|++
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|x
operator|--
expr_stmt|;
break|break;
case|case
literal|'='
case|:
break|break;
block|}
name|result
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|del
operator|=
literal|"."
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Schortcut for version policy      *      *<pre>      * -provide-policy : ${policy;[==,=+)}      * -consume-policy : ${policy;[==,+)}      *</pre>      *      * @param args      * @return      */
specifier|static
name|Pattern
name|RANGE_MASK
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\[|\\()("
operator|+
name|MASK_STRING
operator|+
literal|"),("
operator|+
name|MASK_STRING
operator|+
literal|")(\\]|\\))"
argument_list|)
decl_stmt|;
specifier|static
name|String
name|range
parameter_list|(
name|String
name|spec
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|RANGE_MASK
operator|.
name|matcher
argument_list|(
name|spec
argument_list|)
decl_stmt|;
name|m
operator|.
name|matches
argument_list|()
expr_stmt|;
name|String
name|floor
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|floorMask
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|ceilingMask
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|ceiling
init|=
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|left
init|=
name|version
argument_list|(
name|floorMask
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|String
name|right
init|=
name|version
argument_list|(
name|ceilingMask
argument_list|,
name|version
argument_list|)
decl_stmt|;
return|return
name|floor
operator|+
name|left
operator|+
literal|","
operator|+
name|right
operator|+
name|ceiling
return|;
block|}
block|}
end_class

end_unit

