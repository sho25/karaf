begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|DownloadManagerHelper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_IGNORED_PROTOCOL_PATTERN
init|=
literal|"jar|war|war-i|warref|webbundle|wrap|spring|blueprint"
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|ignoredProtocolPattern
decl_stmt|;
static|static
block|{
name|setIgnoredProtocolPattern
argument_list|(
name|DEFAULT_IGNORED_PROTOCOL_PATTERN
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DownloadManagerHelper
parameter_list|()
block|{
comment|//Utility Class
block|}
specifier|public
specifier|static
name|Pattern
name|getIgnoredProtocolPattern
parameter_list|()
block|{
return|return
name|ignoredProtocolPattern
return|;
block|}
specifier|private
specifier|static
name|void
name|setIgnoredProtocolPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|String
name|defaultPattRegex
init|=
literal|"^("
operator|+
name|pattern
operator|+
literal|"):.*$"
decl_stmt|;
name|ignoredProtocolPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|defaultPattRegex
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setExtraProtocols
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|protocols
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|DEFAULT_IGNORED_PROTOCOL_PATTERN
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|proto
range|:
name|protocols
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"|"
operator|+
name|proto
argument_list|)
expr_stmt|;
block|}
name|setIgnoredProtocolPattern
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Strips download urls from wrapper protocols.      *      * @param url the given url.      * @return the stripped URL for the wrapper protocols.      */
specifier|public
specifier|static
name|String
name|stripUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|String
name|strippedUrl
init|=
name|url
decl_stmt|;
name|Matcher
name|matcher
init|=
name|ignoredProtocolPattern
operator|.
name|matcher
argument_list|(
name|strippedUrl
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|protocol
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|strippedUrl
operator|=
name|strippedUrl
operator|.
name|substring
argument_list|(
name|protocol
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|ignoredProtocolPattern
operator|.
name|matcher
argument_list|(
name|strippedUrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|strippedUrl
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|strippedUrl
operator|=
name|strippedUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strippedUrl
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|strippedUrl
operator|.
name|contains
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|strippedUrl
operator|=
name|strippedUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strippedUrl
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|strippedUrl
operator|.
name|contains
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|strippedUrl
operator|=
name|strippedUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strippedUrl
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|strippedUrl
operator|.
name|contains
argument_list|(
literal|";start-level="
argument_list|)
condition|)
block|{
name|strippedUrl
operator|=
name|strippedUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strippedUrl
operator|.
name|indexOf
argument_list|(
literal|";start-level="
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|strippedUrl
return|;
block|}
specifier|public
specifier|static
name|String
name|stripStartLevel
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|String
name|strippedUrl
init|=
name|url
decl_stmt|;
if|if
condition|(
name|strippedUrl
operator|.
name|contains
argument_list|(
literal|";start-level="
argument_list|)
condition|)
block|{
name|strippedUrl
operator|=
name|strippedUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|strippedUrl
operator|.
name|indexOf
argument_list|(
literal|";start-level="
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|strippedUrl
return|;
block|}
specifier|public
specifier|static
name|String
name|stripInlinedMavenRepositoryUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
operator|&&
name|url
operator|.
name|contains
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
return|return
name|url
operator|.
name|substring
argument_list|(
literal|4
argument_list|,
name|url
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|removeInlinedMavenRepositoryUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
operator|&&
name|url
operator|.
name|contains
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
return|return
literal|"mvn:"
operator|+
name|url
operator|.
name|substring
argument_list|(
name|url
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
name|url
return|;
block|}
block|}
end_class

end_unit

