begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Manages installation of the boot features in the background  */
end_comment

begin_class
specifier|public
class|class
name|BootFeaturesInstaller
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BootFeaturesInstaller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|VERSION_PREFIX
init|=
literal|"version="
decl_stmt|;
specifier|private
specifier|final
name|FeaturesService
name|featuresService
decl_stmt|;
specifier|private
specifier|final
name|String
name|boot
decl_stmt|;
comment|/**      *       * @param featuresService      * @param boot list of boot features separated by comma. Optionally contains ;version=x.x.x to specify a specific feature version      */
specifier|public
name|BootFeaturesInstaller
parameter_list|(
name|FeaturesService
name|featuresService
parameter_list|,
name|String
name|boot
parameter_list|)
block|{
name|this
operator|.
name|featuresService
operator|=
name|featuresService
expr_stmt|;
name|this
operator|.
name|boot
operator|=
name|boot
expr_stmt|;
block|}
comment|/**      * Install boot features      * @throws Exception      */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|boot
operator|!=
literal|null
condition|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|installBootFeatures
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|installBootFeatures
parameter_list|()
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|determineFeaturesToInstall
argument_list|()
decl_stmt|;
try|try
block|{
name|featuresService
operator|.
name|installFeatures
argument_list|(
name|features
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|NoCleanIfFailure
argument_list|,
name|Option
operator|.
name|ContinueBatchOnFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error installing boot features"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Set
argument_list|<
name|Feature
argument_list|>
name|determineFeaturesToInstall
parameter_list|()
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|installedFeatures
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|featuresService
operator|.
name|listInstalledFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|list
init|=
name|boot
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|list
control|)
block|{
name|f
operator|=
name|f
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|featureVersion
init|=
literal|null
decl_stmt|;
comment|// first we split the parts of the feature string to gain access to the version info
comment|// if specified
name|String
index|[]
name|parts
init|=
name|f
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|String
name|featureName
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
comment|// if the part starts with "version=" it contains the version info
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|VERSION_PREFIX
argument_list|)
condition|)
block|{
name|featureVersion
operator|=
name|part
operator|.
name|substring
argument_list|(
name|VERSION_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|featureVersion
operator|==
literal|null
condition|)
block|{
comment|// no version specified - use default version
name|featureVersion
operator|=
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
expr_stmt|;
block|}
try|try
block|{
comment|// try to grab specific feature version
name|Feature
name|feature
init|=
name|featuresService
operator|.
name|getFeature
argument_list|(
name|featureName
argument_list|,
name|featureVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
operator|&&
operator|!
name|installedFeatures
operator|.
name|contains
argument_list|(
name|feature
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error installing boot feature "
operator|+
name|f
operator|+
literal|": feature not found"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error installing boot feature "
operator|+
name|f
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|features
return|;
block|}
block|}
end_class

end_unit

