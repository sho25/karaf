begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|CapabilityImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|RequirementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
operator|.
name|CHARACTERS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
operator|.
name|END_ELEMENT
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
operator|.
name|START_ELEMENT
import|;
end_import

begin_comment
comment|/**  * Repository XML xml based on StaX  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|StaxParser
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REPOSITORY
init|=
literal|"repository"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REPO_NAME
init|=
literal|"name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INCREMENT
init|=
literal|"increment"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REFERRAL
init|=
literal|"referral"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEPTH
init|=
literal|"depth"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|URL
init|=
literal|"url"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCE
init|=
literal|"resource"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CAPABILITY
init|=
literal|"capability"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REQUIREMENT
init|=
literal|"requirement"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"namespace"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ATTRIBUTE
init|=
literal|"attribute"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DIRECTIVE
init|=
literal|"directive"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|"type"
decl_stmt|;
specifier|static
name|XMLInputFactory
name|factory
decl_stmt|;
specifier|private
name|StaxParser
parameter_list|()
block|{     }
specifier|public
specifier|static
class|class
name|Referral
block|{
name|String
name|url
decl_stmt|;
name|int
name|depth
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|XmlRepository
block|{
name|String
name|name
decl_stmt|;
name|long
name|increment
decl_stmt|;
name|List
argument_list|<
name|Referral
argument_list|>
name|referrals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
block|}
specifier|public
specifier|static
name|XmlRepository
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|XMLStreamException
block|{
return|return
name|parse
argument_list|(
name|is
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XmlRepository
name|parse
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|XmlRepository
name|previous
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|reader
init|=
name|getFactory
argument_list|()
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|int
name|event
init|=
name|reader
operator|.
name|nextTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
name|START_ELEMENT
operator|||
operator|!
name|REPOSITORY
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected element 'repository' at the root of the document"
argument_list|)
throw|;
block|}
name|XmlRepository
name|repo
init|=
operator|new
name|XmlRepository
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|nb
init|=
name|reader
operator|.
name|getAttributeCount
argument_list|()
init|;
name|i
operator|<
name|nb
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attrValue
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|attrName
condition|)
block|{
case|case
name|REPO_NAME
case|:
name|repo
operator|.
name|name
operator|=
name|attrName
expr_stmt|;
break|break;
case|case
name|INCREMENT
case|:
name|repo
operator|.
name|increment
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|attrValue
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected attribute '"
operator|+
name|attrName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|previous
operator|!=
literal|null
operator|&&
name|repo
operator|.
name|increment
operator|==
name|previous
operator|.
name|increment
condition|)
block|{
return|return
name|previous
return|;
block|}
while|while
condition|(
operator|(
name|event
operator|=
name|reader
operator|.
name|nextTag
argument_list|()
operator|)
operator|==
name|START_ELEMENT
condition|)
block|{
name|String
name|element
init|=
name|reader
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|REFERRAL
case|:
name|Referral
name|referral
init|=
operator|new
name|Referral
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|nb
init|=
name|reader
operator|.
name|getAttributeCount
argument_list|()
init|;
name|i
operator|<
name|nb
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attrName
init|=
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attrValue
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|attrName
condition|)
block|{
case|case
name|DEPTH
case|:
name|referral
operator|.
name|depth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|attrValue
argument_list|)
expr_stmt|;
break|break;
case|case
name|URL
case|:
name|referral
operator|.
name|url
operator|=
name|attrValue
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected attribute '"
operator|+
name|attrName
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|referral
operator|.
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected attribute '"
operator|+
name|URL
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|repo
operator|.
name|referrals
operator|.
name|add
argument_list|(
name|referral
argument_list|)
expr_stmt|;
name|sanityCheckEndElement
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|nextTag
argument_list|()
argument_list|,
name|REFERRAL
argument_list|)
expr_stmt|;
break|break;
case|case
name|RESOURCE
case|:
name|repo
operator|.
name|resources
operator|.
name|add
argument_list|(
name|parseResource
argument_list|(
name|reader
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported element '"
operator|+
name|element
operator|+
literal|"'. Expected 'referral' or 'resource'"
argument_list|)
throw|;
block|}
block|}
comment|// Sanity check
name|sanityCheckEndElement
argument_list|(
name|reader
argument_list|,
name|event
argument_list|,
name|REPOSITORY
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|private
specifier|static
name|void
name|sanityCheckEndElement
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|int
name|event
parameter_list|,
name|String
name|element
parameter_list|)
block|{
if|if
condition|(
name|event
operator|!=
name|END_ELEMENT
operator|||
operator|!
name|element
operator|.
name|equals
argument_list|(
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected state while finishing element "
operator|+
name|element
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ResourceImpl
name|parseResource
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|.
name|getAttributeCount
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected attribute '"
operator|+
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
literal|0
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|ResourceImpl
name|resource
init|=
operator|new
name|ResourceImpl
argument_list|()
decl_stmt|;
name|int
name|event
decl_stmt|;
while|while
condition|(
operator|(
name|event
operator|=
name|reader
operator|.
name|nextTag
argument_list|()
operator|)
operator|==
name|START_ELEMENT
condition|)
block|{
name|String
name|element
init|=
name|reader
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|CAPABILITY
case|:
name|resource
operator|.
name|addCapability
argument_list|(
name|parseCapability
argument_list|(
name|reader
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|REQUIREMENT
case|:
name|resource
operator|.
name|addRequirement
argument_list|(
name|parseRequirement
argument_list|(
name|reader
argument_list|,
name|resource
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
while|while
condition|(
operator|(
name|event
operator|=
name|reader
operator|.
name|next
argument_list|()
operator|)
operator|!=
name|END_ELEMENT
condition|)
block|{
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|START_ELEMENT
case|:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected element '"
operator|+
name|reader
operator|.
name|getLocalName
argument_list|()
operator|+
literal|"' inside 'resource' element"
argument_list|)
throw|;
case|case
name|CHARACTERS
case|:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected text inside 'resource' element"
argument_list|)
throw|;
default|default:
break|break;
block|}
block|}
break|break;
block|}
block|}
comment|// Sanity check
name|sanityCheckEndElement
argument_list|(
name|reader
argument_list|,
name|event
argument_list|,
name|RESOURCE
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Location
name|loc
init|=
name|reader
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|loc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error while parsing resource at line "
operator|+
name|loc
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" and column "
operator|+
name|loc
operator|.
name|getColumnNumber
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error while parsing resource"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|CapabilityImpl
name|parseCapability
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|ResourceImpl
name|resource
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
index|[]
name|namespace
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|directives
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parseClause
argument_list|(
name|reader
argument_list|,
name|namespace
argument_list|,
name|directives
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|sanityCheckEndElement
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|getEventType
argument_list|()
argument_list|,
name|CAPABILITY
argument_list|)
expr_stmt|;
return|return
operator|new
name|CapabilityImpl
argument_list|(
name|resource
argument_list|,
name|namespace
index|[
literal|0
index|]
argument_list|,
name|directives
argument_list|,
name|attributes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RequirementImpl
name|parseRequirement
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|ResourceImpl
name|resource
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
index|[]
name|namespace
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|directives
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parseClause
argument_list|(
name|reader
argument_list|,
name|namespace
argument_list|,
name|directives
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|sanityCheckEndElement
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|getEventType
argument_list|()
argument_list|,
name|REQUIREMENT
argument_list|)
expr_stmt|;
return|return
operator|new
name|RequirementImpl
argument_list|(
name|resource
argument_list|,
name|namespace
index|[
literal|0
index|]
argument_list|,
name|directives
argument_list|,
name|attributes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|parseClause
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|String
index|[]
name|namespace
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|directives
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|namespace
index|[
literal|0
index|]
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|nb
init|=
name|reader
operator|.
name|getAttributeCount
argument_list|()
init|;
name|i
operator|<
name|nb
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|namespace
index|[
literal|0
index|]
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected attribute: '"
operator|+
name|name
operator|+
literal|"'. Expected 'namespace'"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|namespace
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected attribute 'namespace'"
argument_list|)
throw|;
block|}
while|while
condition|(
name|reader
operator|.
name|nextTag
argument_list|()
operator|==
name|START_ELEMENT
condition|)
block|{
name|String
name|element
init|=
name|reader
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|element
condition|)
block|{
case|case
name|DIRECTIVE
case|:
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|nb
init|=
name|reader
operator|.
name|getAttributeCount
argument_list|()
init|;
name|i
operator|<
name|nb
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attValue
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|attName
condition|)
block|{
case|case
name|NAME
case|:
name|name
operator|=
name|attValue
expr_stmt|;
break|break;
case|case
name|VALUE
case|:
name|value
operator|=
name|attValue
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected attribute: '"
operator|+
name|attName
operator|+
literal|"'. Expected 'name', or 'value'."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected attribute 'name' and 'value'"
argument_list|)
throw|;
block|}
name|directives
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|sanityCheckEndElement
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|nextTag
argument_list|()
argument_list|,
name|DIRECTIVE
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ATTRIBUTE
case|:
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|value
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
literal|"String"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|nb
init|=
name|reader
operator|.
name|getAttributeCount
argument_list|()
init|;
name|i
operator|<
name|nb
condition|;
name|i
operator|++
control|)
block|{
name|String
name|attName
init|=
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|attValue
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|attName
condition|)
block|{
case|case
name|NAME
case|:
name|name
operator|=
name|attValue
expr_stmt|;
break|break;
case|case
name|VALUE
case|:
name|value
operator|=
name|attValue
expr_stmt|;
break|break;
case|case
name|TYPE
case|:
name|type
operator|=
name|attValue
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected attribute: '"
operator|+
name|attName
operator|+
literal|"'. Expected 'name', 'value' or 'type'."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected attribute 'name' and 'value'"
argument_list|)
throw|;
block|}
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|parseAttribute
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|sanityCheckEndElement
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|nextTag
argument_list|()
argument_list|,
name|ATTRIBUTE
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected element: '"
operator|+
name|element
operator|+
literal|". Expected 'directive' or 'attribute'"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Object
name|parseAttribute
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
literal|"String"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
elseif|else
if|if
condition|(
literal|"Version"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"Long"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"Double"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|startsWith
argument_list|(
literal|"List<"
argument_list|)
operator|&&
name|type
operator|.
name|endsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|"List<"
operator|.
name|length
argument_list|()
argument_list|,
name|type
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|parseAttribute
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected type: '"
operator|+
name|type
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|synchronized
name|XMLInputFactory
name|getFactory
parameter_list|()
block|{
if|if
condition|(
name|StaxParser
operator|.
name|factory
operator|==
literal|null
condition|)
block|{
name|XMLInputFactory
name|factory
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setProperty
argument_list|(
name|XMLInputFactory
operator|.
name|IS_NAMESPACE_AWARE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StaxParser
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
return|return
name|StaxParser
operator|.
name|factory
return|;
block|}
block|}
end_class

end_unit

