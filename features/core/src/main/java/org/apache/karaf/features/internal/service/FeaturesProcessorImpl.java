begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|processing
operator|.
name|BundleReplacements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|processing
operator|.
name|FeatureReplacements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|processing
operator|.
name|FeaturesProcessing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|processing
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|processing
operator|.
name|OverrideBundleDependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<p>Configurable {@link FeaturesProcessor}, controlled by several files from<code>etc/</code> directory:<ul>  *<li><code>etc/overrides.properties</code>: may alter bundle versions in features</li>  *<li><code>etc/blacklisted.properties</code>: may filter out some features/bundles</li>  *<li><code>etc/org.apache.karaf.features.xml</code> (<strong>new!</strong>): incorporates two above files  *     and may define additional processing (changing G/A/V, adding bundles to features, changing<code>dependency</code>  *     attributes, ...)</li>  *</ul></p>  */
end_comment

begin_class
specifier|public
class|class
name|FeaturesProcessorImpl
implements|implements
name|FeaturesProcessor
block|{
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FeaturesProcessorImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|JAXBContext
name|FEATURES_PROCESSING_CONTEXT
decl_stmt|;
specifier|private
name|FeaturesProcessing
name|processing
decl_stmt|;
static|static
block|{
try|try
block|{
name|FEATURES_PROCESSING_CONTEXT
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|ObjectFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      *<p>Creates instance of features processor using {@link FeaturesServiceConfig configuration object} where      * three files may be specified: overrides.properties, blacklisted.properties and org.apache.karaf.features.xml.</p>      * @param configuration      */
specifier|public
name|FeaturesProcessorImpl
parameter_list|(
name|FeaturesServiceConfig
name|configuration
parameter_list|)
block|{
comment|// org.apache.karaf.features.xml - highest priority
name|String
name|featureModificationsURI
init|=
name|configuration
operator|.
name|featureModifications
decl_stmt|;
comment|// blacklisted.properties - if available, adds to main configuration of feature processing
name|String
name|blacklistedURI
init|=
name|configuration
operator|.
name|blacklisted
decl_stmt|;
comment|// overrides.properties - if available, adds to main configuration of feature processing
name|String
name|overridesURI
init|=
name|configuration
operator|.
name|overrides
decl_stmt|;
comment|// these two are not changed - they still may be used, but if etc/org.apache.karaf.features.xml is available
comment|// both of the below are merged into single processing configuration
name|Blacklist
name|blacklist
init|=
operator|new
name|Blacklist
argument_list|(
name|blacklistedURI
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|overrides
init|=
name|Overrides
operator|.
name|loadOverrides
argument_list|(
name|overridesURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|featureModificationsURI
operator|!=
literal|null
condition|)
block|{
try|try
block|{
try|try
init|(
name|InputStream
name|stream
init|=
operator|new
name|URL
argument_list|(
name|featureModificationsURI
argument_list|)
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Unmarshaller
name|unmarshaller
init|=
name|FEATURES_PROCESSING_CONTEXT
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|processing
operator|=
operator|(
name|FeaturesProcessing
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't find feature processing file ("
operator|+
name|featureModificationsURI
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't initialize feature processor: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|processing
operator|==
literal|null
condition|)
block|{
name|processing
operator|=
operator|new
name|FeaturesProcessing
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|processing
operator|.
name|getBundleReplacements
argument_list|()
operator|==
literal|null
condition|)
block|{
name|processing
operator|.
name|setBundleReplacements
argument_list|(
operator|new
name|BundleReplacements
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processing
operator|.
name|getFeatureReplacements
argument_list|()
operator|==
literal|null
condition|)
block|{
name|processing
operator|.
name|setFeatureReplacements
argument_list|(
operator|new
name|FeatureReplacements
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processing
operator|.
name|getOverrideBundleDependency
argument_list|()
operator|==
literal|null
condition|)
block|{
name|processing
operator|.
name|setOverrideBundleDependency
argument_list|(
operator|new
name|OverrideBundleDependency
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|processing
operator|.
name|postUnmarshall
argument_list|(
name|blacklist
argument_list|,
name|overrides
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FeaturesProcessing
name|getInstructions
parameter_list|()
block|{
return|return
name|processing
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|Features
name|features
parameter_list|)
block|{
comment|// blacklisting features
for|for
control|(
name|Feature
name|feature
range|:
name|features
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|feature
operator|.
name|setBlacklisted
argument_list|(
name|isFeatureBlacklisted
argument_list|(
name|feature
argument_list|)
argument_list|)
expr_stmt|;
comment|// blacklisting bundles
name|processBundles
argument_list|(
name|feature
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Conditional
name|c
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|processBundles
argument_list|(
name|c
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: changing "dependency" flag of features
comment|// TODO: changing "dependency" flag of bundles
comment|// TODO: overriding features
block|}
specifier|private
name|void
name|processBundles
parameter_list|(
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|boolean
name|bundleBlacklisted
init|=
name|isBundleBlacklisted
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleBlacklisted
condition|)
block|{
comment|// blacklisting has higher priority
name|bundle
operator|.
name|setBlacklisted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if not blacklisted, it may be overriden
name|staticOverrideBundle
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Processes {@link Bundle bundle definition} and (according to override instructions) maybe sets different target      * location and {@link BundleInfo#isOverriden()} flag      * @param bundle      */
specifier|private
name|void
name|staticOverrideBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
for|for
control|(
name|BundleReplacements
operator|.
name|OverrideBundle
name|override
range|:
name|this
operator|.
name|getInstructions
argument_list|()
operator|.
name|getBundleReplacements
argument_list|()
operator|.
name|getOverrideBundles
argument_list|()
control|)
block|{
name|String
name|originalLocation
init|=
name|bundle
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|override
operator|.
name|getOriginalUriPattern
argument_list|()
operator|.
name|matches
argument_list|(
name|originalLocation
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overriding bundle location \""
operator|+
name|originalLocation
operator|+
literal|"\" with \""
operator|+
name|override
operator|.
name|getReplacement
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|setOriginalLocation
argument_list|(
name|originalLocation
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|setOverriden
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|setLocation
argument_list|(
name|override
operator|.
name|getReplacement
argument_list|()
argument_list|)
expr_stmt|;
comment|// last rule wins - no break!!!
comment|//break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRepositoryBlacklisted
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
for|for
control|(
name|LocationPattern
name|lp
range|:
name|processing
operator|.
name|getBlacklistedRepositoryLocationPatterns
argument_list|()
control|)
block|{
if|if
condition|(
name|lp
operator|.
name|matches
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Matching name and version of given feature, checks whether this feature is blacklisted      * @param feature      * @return      */
specifier|private
name|boolean
name|isFeatureBlacklisted
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
return|return
name|getInstructions
argument_list|()
operator|.
name|getBlacklist
argument_list|()
operator|.
name|isFeatureBlacklisted
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Matching location of the bundle, checks whether this bundle is blacklisted      * @param location      * @return      */
specifier|private
name|boolean
name|isBundleBlacklisted
parameter_list|(
name|String
name|location
parameter_list|)
block|{
return|return
name|getInstructions
argument_list|()
operator|.
name|getBlacklist
argument_list|()
operator|.
name|isBundleBlacklisted
argument_list|(
name|location
argument_list|)
return|;
block|}
block|}
end_class

end_unit

