begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|deployment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|ResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|AggregateRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|StaticRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|FeatureNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|FeatureResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|RequirementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResolveContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|Slf4jResolverLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Overrides
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|Macro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|ResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|ResolveContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|DeploymentBuilder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DeploymentBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REQ_PROTOCOL
init|=
literal|"req:"
decl_stmt|;
specifier|private
specifier|final
name|Collection
argument_list|<
name|Repository
argument_list|>
name|repositories
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
argument_list|>
name|resourceRepos
decl_stmt|;
name|String
name|featureRange
init|=
literal|"${range;[====,====]}"
decl_stmt|;
name|Downloader
name|downloader
decl_stmt|;
name|ResourceImpl
name|requirements
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resources
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|providers
decl_stmt|;
name|Set
argument_list|<
name|Feature
argument_list|>
name|featuresToRegister
init|=
operator|new
name|HashSet
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DeploymentBuilder
parameter_list|(
name|Downloader
name|downloader
parameter_list|,
name|Collection
argument_list|<
name|Repository
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|downloader
operator|=
name|downloader
expr_stmt|;
name|this
operator|.
name|repositories
operator|=
name|repositories
expr_stmt|;
name|this
operator|.
name|resourceRepos
operator|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|addResourceRepository
parameter_list|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
name|repository
parameter_list|)
block|{
name|resourceRepos
operator|.
name|add
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|getProviders
parameter_list|()
block|{
return|return
name|providers
return|;
block|}
specifier|public
name|void
name|setFeatureRange
parameter_list|(
name|String
name|featureRange
parameter_list|)
block|{
name|this
operator|.
name|featureRange
operator|=
name|featureRange
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|download
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|bundles
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|reqs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|overrides
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|optionals
parameter_list|)
throws|throws
name|IOException
throws|,
name|MultiException
throws|,
name|InterruptedException
throws|,
name|ResolutionException
throws|,
name|BundleException
block|{
name|this
operator|.
name|resources
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|providers
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|requirements
operator|=
operator|new
name|ResourceImpl
argument_list|(
literal|"dummy"
argument_list|,
literal|"dummy"
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|)
expr_stmt|;
comment|// First, gather all bundle resources
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|registerMatchingFeatures
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|downloadAndBuildResource
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|req
range|:
name|reqs
control|)
block|{
name|buildRequirement
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|override
range|:
name|overrides
control|)
block|{
comment|// TODO: ignore download failures for overrides
name|downloadAndBuildResource
argument_list|(
name|Overrides
operator|.
name|extractUrl
argument_list|(
name|override
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|optional
range|:
name|optionals
control|)
block|{
name|downloadAndBuildResource
argument_list|(
name|optional
argument_list|)
expr_stmt|;
block|}
comment|// Wait for all resources to be created
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Do override replacement
name|Overrides
operator|.
name|override
argument_list|(
name|resources
argument_list|,
name|overrides
argument_list|)
expr_stmt|;
comment|// Build features resources
for|for
control|(
name|Feature
name|feature
range|:
name|featuresToRegister
control|)
block|{
name|Resource
name|resource
init|=
name|FeatureResource
operator|.
name|build
argument_list|(
name|feature
argument_list|,
name|featureRange
argument_list|,
name|resources
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
literal|"feature:"
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
comment|// Build requirements
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|requireFeature
argument_list|(
name|feature
argument_list|,
name|requirements
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|requireResource
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|req
range|:
name|reqs
control|)
block|{
name|requireResource
argument_list|(
name|REQ_PROTOCOL
operator|+
name|req
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|resolve
parameter_list|(
name|List
argument_list|<
name|Resource
argument_list|>
name|systemBundles
parameter_list|,
name|boolean
name|resolveOptionalImports
parameter_list|)
throws|throws
name|ResolutionException
block|{
comment|// Resolve
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|systemBundles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|resources
operator|.
name|put
argument_list|(
literal|"system-bundle-"
operator|+
name|i
argument_list|,
name|systemBundles
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
argument_list|>
name|repos
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
argument_list|>
argument_list|()
decl_stmt|;
name|repos
operator|.
name|add
argument_list|(
operator|new
name|StaticRepository
argument_list|(
name|resources
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|repos
operator|.
name|addAll
argument_list|(
name|resourceRepos
argument_list|)
expr_stmt|;
name|ResolverImpl
name|resolver
init|=
operator|new
name|ResolverImpl
argument_list|(
operator|new
name|Slf4jResolverLog
argument_list|(
name|LOGGER
argument_list|)
argument_list|)
decl_stmt|;
name|ResolveContext
name|context
init|=
operator|new
name|ResolveContextImpl
argument_list|(
name|Collections
operator|.
expr|<
name|Resource
operator|>
name|singleton
argument_list|(
name|requirements
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|Resource
operator|>
name|emptySet
argument_list|()
argument_list|,
operator|new
name|AggregateRepository
argument_list|(
name|repos
argument_list|)
argument_list|,
name|resolveOptionalImports
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|resolution
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
name|resolution
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|void
name|requireFeature
parameter_list|(
name|String
name|feature
parameter_list|,
name|ResourceImpl
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find name and version range
name|String
index|[]
name|split
init|=
name|feature
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|split
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|version
init|=
operator|(
name|split
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|split
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
operator|!
name|version
operator|.
name|equals
argument_list|(
literal|"0.0.0"
argument_list|)
operator|&&
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|version
operator|=
name|Macro
operator|.
name|transform
argument_list|(
name|featureRange
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|VersionRange
name|range
init|=
name|version
operator|!=
literal|null
condition|?
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|)
else|:
name|VersionRange
operator|.
name|ANY_VERSION
decl_stmt|;
comment|// Add requirement
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|FeatureNamespace
operator|.
name|TYPE_FEATURE
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_VERSION_ATTRIBUTE
argument_list|,
name|range
argument_list|)
expr_stmt|;
name|resource
operator|.
name|addRequirement
argument_list|(
operator|new
name|RequirementImpl
argument_list|(
name|resource
argument_list|,
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|attrs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|requireResource
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|Resource
name|res
init|=
name|resources
operator|.
name|get
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find resource for "
operator|+
name|location
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Capability
argument_list|>
name|caps
init|=
name|res
operator|.
name|getCapabilities
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|caps
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource does not have a single "
operator|+
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
operator|+
literal|" capability"
argument_list|)
throw|;
block|}
name|Capability
name|cap
init|=
name|caps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Add requirement
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|,
name|cap
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|cap
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_VERSION_ATTRIBUTE
argument_list|,
operator|new
name|VersionRange
argument_list|(
operator|(
name|Version
operator|)
name|cap
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_VERSION_ATTRIBUTE
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|requirements
operator|.
name|addRequirement
argument_list|(
operator|new
name|RequirementImpl
argument_list|(
name|requirements
argument_list|,
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|attrs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerMatchingFeatures
parameter_list|(
name|String
name|feature
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find name and version range
name|String
index|[]
name|split
init|=
name|feature
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|split
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|version
init|=
operator|(
name|split
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|split
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
else|:
name|Version
operator|.
name|emptyVersion
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// Register matching features
name|registerMatchingFeatures
argument_list|(
name|name
argument_list|,
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerMatchingFeatures
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
operator|!
name|version
operator|.
name|equals
argument_list|(
literal|"0.0.0"
argument_list|)
operator|&&
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|version
operator|=
name|Macro
operator|.
name|transform
argument_list|(
name|featureRange
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|registerMatchingFeatures
argument_list|(
name|name
argument_list|,
name|version
operator|!=
literal|null
condition|?
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|)
else|:
name|VersionRange
operator|.
name|ANY_VERSION
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|registerMatchingFeatures
parameter_list|(
name|String
name|name
parameter_list|,
name|VersionRange
name|range
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|repositories
control|)
block|{
name|Feature
index|[]
name|features
decl_stmt|;
try|try
block|{
name|features
operator|=
name|repo
operator|.
name|getFeatures
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// This should not happen as the repository has been loaded already
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|Feature
name|f
range|:
name|features
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Version
name|v
init|=
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|featuresToRegister
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|Dependency
name|dep
range|:
name|f
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|registerMatchingFeatures
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BundleInfo
name|bundle
range|:
name|f
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|downloadAndBuildResource
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|f
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|Feature
name|c
init|=
name|cond
operator|.
name|asFeature
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|featuresToRegister
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|BundleInfo
name|bundle
range|:
name|c
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|downloadAndBuildResource
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|buildRequirement
parameter_list|(
name|String
name|requirement
parameter_list|)
block|{
try|try
block|{
name|String
name|location
init|=
name|REQ_PROTOCOL
operator|+
name|requirement
decl_stmt|;
name|ResourceImpl
name|resource
init|=
operator|new
name|ResourceImpl
argument_list|(
name|location
argument_list|,
literal|"dummy"
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|)
decl_stmt|;
for|for
control|(
name|Requirement
name|req
range|:
name|ResourceBuilder
operator|.
name|parseRequirement
argument_list|(
name|resource
argument_list|,
name|requirement
argument_list|)
control|)
block|{
name|resource
operator|.
name|addRequirement
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|resources
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error parsing requirement: "
operator|+
name|requirement
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|downloadAndBuildResource
parameter_list|(
specifier|final
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|resources
operator|.
name|containsKey
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|location
argument_list|,
operator|new
name|Downloader
operator|.
name|DownloadCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
name|manageResource
argument_list|(
name|location
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|manageResource
parameter_list|(
name|String
name|location
parameter_list|,
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|resources
operator|.
name|containsKey
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|Attributes
name|attributes
init|=
name|getAttributes
argument_list|(
name|location
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|createResource
argument_list|(
name|location
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|providers
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Resource
name|createResource
parameter_list|(
name|String
name|uri
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|ResourceBuilder
operator|.
name|build
argument_list|(
name|uri
argument_list|,
name|headers
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to create resource for bundle "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Attributes
name|getAttributes
parameter_list|(
name|String
name|uri
parameter_list|,
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|provider
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"META-INF/MANIFEST.MF"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|Manifest
argument_list|(
name|zis
argument_list|)
operator|.
name|getMainAttributes
argument_list|()
return|;
block|}
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|uri
operator|+
literal|" does not contain a manifest"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

