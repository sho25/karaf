begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Repository using a JSON representation of resource metadata.  * The json should be a map: the key is the resource uri and the  * value is a map of resource headers.  * The content of the URL can be gzipped.  */
end_comment

begin_class
specifier|public
class|class
name|JsonRepository
extends|extends
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|repository
operator|.
name|JsonRepository
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonRepository
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|ignoreFailures
decl_stmt|;
specifier|public
name|JsonRepository
parameter_list|(
name|String
name|url
parameter_list|,
name|long
name|expiration
parameter_list|,
name|boolean
name|ignoreFailures
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|,
name|expiration
argument_list|)
expr_stmt|;
name|this
operator|.
name|ignoreFailures
operator|=
name|ignoreFailures
expr_stmt|;
block|}
specifier|protected
name|void
name|checkAndLoadCache
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|checkAndLoadCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|ignoreFailures
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Ignoring failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

