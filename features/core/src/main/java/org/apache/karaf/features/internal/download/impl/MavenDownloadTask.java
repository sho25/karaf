begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|maven
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_class
specifier|public
class|class
name|MavenDownloadTask
extends|extends
name|AbstractRetryableDownloadTask
block|{
specifier|private
specifier|final
name|MavenResolver
name|resolver
decl_stmt|;
specifier|public
name|MavenDownloadTask
parameter_list|(
name|ScheduledExecutorService
name|executor
parameter_list|,
name|MavenResolver
name|resolver
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|executor
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
try|try
block|{
comment|// This ensures the version of the artifact is resolved in the returned url
return|return
name|Parser
operator|.
name|pathToMaven
argument_list|(
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|url
argument_list|,
name|getFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|super
operator|.
name|getUrl
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|File
name|download
parameter_list|(
name|Exception
name|previousException
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|resolver
operator|.
name|resolve
argument_list|(
name|url
argument_list|,
name|previousException
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//try again with removing timestamp from snapshot
return|return
name|resolver
operator|.
name|resolve
argument_list|(
name|Parser
operator|.
name|pathToMaven
argument_list|(
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|url
argument_list|)
argument_list|)
argument_list|,
name|previousException
argument_list|)
return|;
block|}
block|}
comment|/**      * Maven artifact may be looked up in several repositories. Only if exception for<strong>each</strong>      * repository is not retryable, we won't retry.      * @param e      * @return      */
annotation|@
name|Override
specifier|protected
name|Retry
name|isRetryable
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// convert pax-url-aether "retry" to features.core "retry" concept
switch|switch
condition|(
name|resolver
operator|.
name|isRetryableException
argument_list|(
name|e
argument_list|)
condition|)
block|{
case|case
name|NEVER
case|:
return|return
name|Retry
operator|.
name|NO_RETRY
return|;
case|case
name|LOW
case|:
case|case
name|HIGH
case|:
comment|// no need to repeat many times
return|return
name|Retry
operator|.
name|QUICK_RETRY
return|;
case|case
name|UNKNOWN
case|:
default|default:
return|return
name|Retry
operator|.
name|DEFAULT_RETRY
return|;
block|}
block|}
block|}
end_class

end_unit

