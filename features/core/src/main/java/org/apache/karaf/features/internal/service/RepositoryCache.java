begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|repositoryCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Clause
index|[]
name|blacklisted
decl_stmt|;
specifier|public
name|RepositoryCache
parameter_list|(
name|String
name|blacklisted
parameter_list|)
block|{
name|this
operator|.
name|blacklisted
operator|=
name|loadBlacklist
argument_list|(
name|blacklisted
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Clause
index|[]
name|loadBlacklist
parameter_list|(
name|String
name|blacklisted
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistStrings
init|=
name|Blacklist
operator|.
name|loadBlacklist
argument_list|(
name|blacklisted
argument_list|)
decl_stmt|;
return|return
name|Parser
operator|.
name|parseClauses
argument_list|(
name|blacklistStrings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|blacklistStrings
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Repository
name|load
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|,
name|blacklisted
argument_list|)
return|;
block|}
specifier|public
name|Repository
name|loadAndValidate
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|,
name|blacklisted
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|addRepository
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|repoUriSt
init|=
name|repository
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|repositoryCache
operator|.
name|put
argument_list|(
name|repoUriSt
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeRepository
parameter_list|(
name|URI
name|repositoryUri
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|repositoryUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Repository
name|rep
init|=
name|repositoryCache
operator|.
name|remove
argument_list|(
name|toRemove
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URI
name|u
range|:
name|rep
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|Repository
index|[]
name|listRepositories
parameter_list|()
block|{
return|return
name|repositoryCache
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Repository
index|[
name|repositoryCache
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Repository
index|[]
name|listRequiredRepositories
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|topLevelRepoUris
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|entry
range|:
name|repositoryCache
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|topLevelRepoUris
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|repos
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|repos
operator|.
name|toArray
argument_list|(
operator|new
name|Repository
index|[
name|repos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Repository
name|getRepository
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|this
operator|.
name|repositoryCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|synchronized
name|Repository
name|getRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|this
operator|.
name|repositoryCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|repo
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getRepositoryName
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Repository
name|repo
init|=
name|getRepository
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
operator|(
name|repo
operator|!=
literal|null
operator|)
condition|?
name|repo
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|loadDependent
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|topLevelRepoUris
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|loaded
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toLoad
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|topLevelRepoUris
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|toLoad
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|uri
init|=
name|toLoad
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Repository
name|repo
init|=
name|repositoryCache
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|repo
operator|=
name|load
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|repositoryCache
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loaded
operator|.
name|add
argument_list|(
name|uri
argument_list|)
condition|)
block|{
for|for
control|(
name|URI
name|u
range|:
name|repo
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|toLoad
operator|.
name|add
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Can't load features repository {}"
argument_list|,
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

