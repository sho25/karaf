begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|region
operator|.
name|persist
operator|.
name|RegionsPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|FrameworkWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|url
operator|.
name|URLStreamHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BundleManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|final
name|RegionsPersistence
name|regionsPersistence
decl_stmt|;
specifier|private
specifier|final
name|long
name|refreshTimeout
decl_stmt|;
specifier|public
name|BundleManager
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
argument_list|(
name|bundleContext
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BundleManager
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|RegionsPersistence
name|regionsPersistence
parameter_list|)
block|{
name|this
argument_list|(
name|bundleContext
argument_list|,
name|regionsPersistence
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BundleManager
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|RegionsPersistence
name|regionsPersistence
parameter_list|,
name|long
name|refreshTimeout
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|regionsPersistence
operator|=
name|regionsPersistence
expr_stmt|;
name|this
operator|.
name|refreshTimeout
operator|=
name|refreshTimeout
expr_stmt|;
block|}
specifier|public
name|BundleInstallerResult
name|installBundleIfNeeded
parameter_list|(
name|String
name|bundleLocation
parameter_list|,
name|int
name|startLevel
parameter_list|,
name|String
name|regionName
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
block|{
name|BundleInstallerResult
name|result
init|=
name|doInstallBundleIfNeeded
argument_list|(
name|bundleLocation
argument_list|,
name|startLevel
argument_list|)
decl_stmt|;
name|installToRegion
argument_list|(
name|regionName
argument_list|,
name|result
operator|.
name|bundle
argument_list|,
name|result
operator|.
name|isNew
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|BundleInstallerResult
name|doInstallBundleIfNeeded
parameter_list|(
name|String
name|bundleLocation
parameter_list|,
name|int
name|startLevel
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
block|{
name|InputStream
name|is
init|=
name|getInputStreamForBundle
argument_list|(
name|bundleLocation
argument_list|)
decl_stmt|;
try|try
block|{
name|is
operator|.
name|mark
argument_list|(
literal|256
operator|*
literal|1024
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|JarInputStream
name|jar
init|=
operator|new
name|JarInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Manifest
name|m
init|=
name|jar
operator|.
name|getManifest
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BundleException
argument_list|(
literal|"Manifest not present in the first entry of the zip "
operator|+
name|bundleLocation
argument_list|)
throw|;
block|}
name|String
name|sn
init|=
name|m
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BundleException
argument_list|(
literal|"Jar is not a bundle, no Bundle-SymbolicName "
operator|+
name|bundleLocation
argument_list|)
throw|;
block|}
comment|// remove attributes from the symbolic name (like
comment|// ;blueprint.graceperiod:=false suffix)
name|int
name|attributeIndexSep
init|=
name|sn
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributeIndexSep
operator|!=
operator|-
literal|1
condition|)
block|{
name|sn
operator|=
name|sn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|attributeIndexSep
argument_list|)
expr_stmt|;
block|}
name|String
name|vStr
init|=
name|m
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|vStr
operator|==
literal|null
condition|?
name|Version
operator|.
name|emptyVersion
else|:
name|Version
operator|.
name|parseVersion
argument_list|(
name|vStr
argument_list|)
decl_stmt|;
name|Bundle
name|existingBundle
init|=
name|findInstalled
argument_list|(
name|sn
argument_list|,
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingBundle
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Found installed bundle: "
operator|+
name|existingBundle
argument_list|)
expr_stmt|;
return|return
operator|new
name|BundleInstallerResult
argument_list|(
name|existingBundle
argument_list|,
literal|false
argument_list|)
return|;
block|}
try|try
block|{
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|=
operator|new
name|URL
argument_list|(
name|bundleLocation
argument_list|)
operator|.
name|openStream
argument_list|()
expr_stmt|;
comment|// is = new BufferedInputStream(new
comment|// URL(bundleLocation).openStream());
block|}
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FilterInputStream
argument_list|(
name|is
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Installing bundle "
operator|+
name|bundleLocation
argument_list|)
expr_stmt|;
name|Bundle
name|b
init|=
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|bundleLocation
argument_list|,
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLevel
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|startLevel
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|BundleInstallerResult
argument_list|(
name|b
argument_list|,
literal|true
argument_list|)
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Bundle
name|findInstalled
parameter_list|(
name|String
name|symbolicName
parameter_list|,
name|Version
name|version
parameter_list|)
block|{
name|String
name|vStr
decl_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|!=
literal|null
operator|&&
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|symbolicName
argument_list|)
condition|)
block|{
name|vStr
operator|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
expr_stmt|;
name|Version
name|bv
init|=
name|vStr
operator|==
literal|null
condition|?
name|Version
operator|.
name|emptyVersion
else|:
name|Version
operator|.
name|parseVersion
argument_list|(
name|vStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|bv
argument_list|)
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|InputStream
name|getInputStreamForBundle
parameter_list|(
name|String
name|bundleLocation
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|InputStream
name|is
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Checking "
operator|+
name|bundleLocation
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|protocolIndex
init|=
name|bundleLocation
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocolIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|protocol
init|=
name|bundleLocation
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|protocolIndex
argument_list|)
decl_stmt|;
name|waitForUrlHandler
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
name|URL
name|bundleUrl
init|=
operator|new
name|URL
argument_list|(
name|bundleLocation
argument_list|)
decl_stmt|;
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|bundleUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|is
return|;
block|}
specifier|private
name|void
name|installToRegion
parameter_list|(
name|String
name|region
parameter_list|,
name|Bundle
name|b
parameter_list|,
name|boolean
name|isNew
parameter_list|)
throws|throws
name|BundleException
block|{
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|isNew
condition|)
block|{
if|if
condition|(
name|regionsPersistence
operator|!=
literal|null
condition|)
block|{
name|regionsPersistence
operator|.
name|install
argument_list|(
name|b
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to find RegionsPersistence service, while installing "
operator|+
name|region
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Will wait for the {@link URLStreamHandlerService} service for the      * specified protocol to be registered.      *      * @param protocol      */
specifier|private
name|void
name|waitForUrlHandler
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
try|try
block|{
name|Filter
name|filter
init|=
name|bundleContext
operator|.
name|createFilter
argument_list|(
literal|"(&("
operator|+
name|Constants
operator|.
name|OBJECTCLASS
operator|+
literal|"="
operator|+
name|URLStreamHandlerService
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")(url.handler.protocol="
operator|+
name|protocol
operator|+
literal|"))"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ServiceTracker
argument_list|<
name|URLStreamHandlerService
argument_list|,
name|URLStreamHandlerService
argument_list|>
name|urlHandlerTracker
init|=
operator|new
name|ServiceTracker
argument_list|<
name|URLStreamHandlerService
argument_list|,
name|URLStreamHandlerService
argument_list|>
argument_list|(
name|bundleContext
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|urlHandlerTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|urlHandlerTracker
operator|.
name|waitForService
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Interrupted while waiting for URL handler for protocol {}."
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|urlHandlerTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error creating service tracker."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|Bundle
argument_list|>
name|findBundlesToRefresh
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|existing
parameter_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
name|installed
parameter_list|)
block|{
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|bundles
operator|.
name|addAll
argument_list|(
name|findBundlesWithOptionalPackagesToRefresh
argument_list|(
name|existing
argument_list|,
name|installed
argument_list|)
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|addAll
argument_list|(
name|findBundlesWithFragmentsToRefresh
argument_list|(
name|existing
argument_list|,
name|installed
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bundles
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Bundle
argument_list|>
name|findBundlesWithFragmentsToRefresh
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|existing
parameter_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
name|installed
parameter_list|)
block|{
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bundle
argument_list|>
name|oldBundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|(
name|existing
argument_list|)
decl_stmt|;
name|oldBundles
operator|.
name|removeAll
argument_list|(
name|installed
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oldBundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|installed
control|)
block|{
name|String
name|hostHeader
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostHeader
operator|!=
literal|null
condition|)
block|{
name|Clause
index|[]
name|clauses
init|=
name|Parser
operator|.
name|parseHeader
argument_list|(
name|hostHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|clauses
operator|!=
literal|null
operator|&&
name|clauses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Clause
name|path
init|=
name|clauses
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|Bundle
name|hostBundle
range|:
name|oldBundles
control|)
block|{
if|if
condition|(
name|hostBundle
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|ver
init|=
name|path
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ver
operator|!=
literal|null
condition|)
block|{
name|VersionRange
name|v
init|=
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|ver
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
name|hostBundle
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|bundles
operator|.
name|add
argument_list|(
name|hostBundle
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|bundles
operator|.
name|add
argument_list|(
name|hostBundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|bundles
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Bundle
argument_list|>
name|findBundlesWithOptionalPackagesToRefresh
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|existing
parameter_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
name|installed
parameter_list|)
block|{
comment|// First pass: include all bundles contained in these features
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|(
name|existing
argument_list|)
decl_stmt|;
name|bundles
operator|.
name|removeAll
argument_list|(
name|installed
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|bundles
return|;
block|}
comment|// Second pass: for each bundle, check if there is any unresolved
comment|// optional package that could be resolved
name|Map
argument_list|<
name|Bundle
argument_list|,
name|List
argument_list|<
name|Clause
argument_list|>
argument_list|>
name|imports
init|=
operator|new
name|HashMap
argument_list|<
name|Bundle
argument_list|,
name|List
argument_list|<
name|Clause
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Bundle
argument_list|>
name|it
init|=
name|bundles
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Bundle
name|b
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|importsStr
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|IMPORT_PACKAGE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|importsList
init|=
name|getOptionalImports
argument_list|(
name|importsStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|importsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|imports
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|importsList
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|bundles
return|;
block|}
comment|// Third pass: compute a list of packages that are exported by our
comment|// bundles and see if
comment|// some exported packages can be wired to the optional imports
name|List
argument_list|<
name|Clause
argument_list|>
name|exports
init|=
operator|new
name|ArrayList
argument_list|<
name|Clause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|installed
control|)
block|{
name|String
name|exportsStr
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|exportsStr
operator|!=
literal|null
condition|)
block|{
name|Clause
index|[]
name|exportsList
init|=
name|Parser
operator|.
name|parseHeader
argument_list|(
name|exportsStr
argument_list|)
decl_stmt|;
name|exports
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|exportsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Bundle
argument_list|>
name|it
init|=
name|bundles
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Bundle
name|b
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|importsList
init|=
name|imports
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Clause
argument_list|>
name|itpi
init|=
name|importsList
operator|.
name|iterator
argument_list|()
init|;
name|itpi
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Clause
name|pi
init|=
name|itpi
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|matching
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Clause
name|pe
range|:
name|exports
control|)
block|{
if|if
condition|(
name|pi
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|evStr
init|=
name|pe
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
name|String
name|ivStr
init|=
name|pi
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
name|Version
name|exported
init|=
name|evStr
operator|!=
literal|null
condition|?
name|Version
operator|.
name|parseVersion
argument_list|(
name|evStr
argument_list|)
else|:
name|Version
operator|.
name|emptyVersion
decl_stmt|;
name|VersionRange
name|imported
init|=
name|ivStr
operator|!=
literal|null
condition|?
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|ivStr
argument_list|)
else|:
name|VersionRange
operator|.
name|ANY_VERSION
decl_stmt|;
if|if
condition|(
name|imported
operator|.
name|contains
argument_list|(
name|exported
argument_list|)
condition|)
block|{
name|matching
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|matching
condition|)
block|{
name|itpi
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|importsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Refeshing bundle {} ({}) to solve the following optional imports"
argument_list|,
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|,
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Clause
name|p
range|:
name|importsList
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"    {}"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|bundles
return|;
block|}
comment|/*      * Get the list of optional imports from an OSGi Import-Package string      */
specifier|protected
name|List
argument_list|<
name|Clause
argument_list|>
name|getOptionalImports
parameter_list|(
name|String
name|importsStr
parameter_list|)
block|{
name|Clause
index|[]
name|imports
init|=
name|Parser
operator|.
name|parseHeader
argument_list|(
name|importsStr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|Clause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Clause
name|anImport
range|:
name|imports
control|)
block|{
name|String
name|resolution
init|=
name|anImport
operator|.
name|getDirective
argument_list|(
name|Constants
operator|.
name|RESOLUTION_DIRECTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|RESOLUTION_OPTIONAL
operator|.
name|equals
argument_list|(
name|resolution
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|anImport
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|refreshPackages
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
specifier|final
name|Object
name|refreshLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|FrameworkWiring
name|wiring
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|adapt
argument_list|(
name|FrameworkWiring
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiring
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|refreshLock
init|)
block|{
name|wiring
operator|.
name|refreshBundles
argument_list|(
name|bundles
argument_list|,
operator|new
name|FrameworkListener
argument_list|()
block|{
specifier|public
name|void
name|frameworkEvent
parameter_list|(
name|FrameworkEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|FrameworkEvent
operator|.
name|PACKAGES_REFRESHED
condition|)
block|{
synchronized|synchronized
init|(
name|refreshLock
init|)
block|{
name|refreshLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|refreshLock
operator|.
name|wait
argument_list|(
name|refreshTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|uninstall
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
name|uninstall
argument_list|(
name|bundles
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uninstall
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|boolean
name|refresh
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|bundles
control|)
block|{
try|try
block|{
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|refresh
condition|)
block|{
name|refreshPackages
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|uninstall
parameter_list|(
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
name|uninstall
argument_list|(
name|bundles
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uninstall
parameter_list|(
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|boolean
name|refresh
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|bundles
control|)
block|{
try|try
block|{
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|refresh
condition|)
block|{
name|refreshPackages
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|uninstallById
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|BundleException
throws|,
name|InterruptedException
block|{
name|uninstallById
argument_list|(
name|bundles
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uninstallById
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|bundles
parameter_list|,
name|boolean
name|refresh
parameter_list|)
throws|throws
name|BundleException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|long
name|bundleId
range|:
name|bundles
control|)
block|{
name|Bundle
name|b
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refresh
condition|)
block|{
name|refreshPackages
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|File
name|getDataFile
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|fileName
argument_list|)
return|;
block|}
name|EventAdminListener
name|createAndRegisterEventAdminListener
parameter_list|()
block|{
name|EventAdminListener
name|listener
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.bundles.service.event.EventAdmin"
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|EventAdminListener
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore, if the EventAdmin package is not available, just don't
comment|// use it
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"EventAdmin package is not available, just don't use it"
argument_list|)
expr_stmt|;
block|}
return|return
name|listener
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
name|ServiceTracker
name|createServiceTrackerForResolverName
parameter_list|(
name|String
name|resolver
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|String
name|filter
init|=
literal|"(&("
operator|+
name|Constants
operator|.
name|OBJECTCLASS
operator|+
literal|"="
operator|+
name|Resolver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")(name="
operator|+
name|resolver
operator|+
literal|"))"
decl_stmt|;
return|return
operator|new
name|ServiceTracker
argument_list|(
name|bundleContext
argument_list|,
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|void
name|refreshBundles
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|existing
parameter_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
name|installed
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
block|{
name|boolean
name|print
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PrintBundlesToRefresh
argument_list|)
decl_stmt|;
name|boolean
name|refresh
init|=
operator|!
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
decl_stmt|;
if|if
condition|(
name|print
operator|||
name|refresh
condition|)
block|{
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundlesToRefresh
init|=
name|findBundlesToRefresh
argument_list|(
name|existing
argument_list|,
name|installed
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|bundlesToRefresh
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Bundles to refresh: {}"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundlesToRefresh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|print
condition|)
block|{
if|if
condition|(
name|refresh
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refreshing bundles "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The following bundles may need to be refreshed: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refresh
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Refreshing bundles: {}"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|refreshPackages
argument_list|(
name|bundlesToRefresh
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|bundleContext
return|;
block|}
specifier|public
specifier|static
class|class
name|BundleInstallerResult
block|{
name|Bundle
name|bundle
decl_stmt|;
name|boolean
name|isNew
decl_stmt|;
specifier|public
name|BundleInstallerResult
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|boolean
name|isNew
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|isNew
operator|=
name|isNew
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

