begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
operator|.
name|SubsystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|FeatureResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|ChecksumUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|Macro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|collections
operator|.
name|CopyOnWriteArrayIdentityList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|BundleNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|HostNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|PackageNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|ROOT_REGION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|UPDATEABLE_URIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|UPDATE_SNAPSHOTS_ALWAYS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|UPDATE_SNAPSHOTS_CRC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResolverUtil
operator|.
name|getSymbolicName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResolverUtil
operator|.
name|getVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_SUBSYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|getFeatureId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|getType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|getUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|add
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|addToMapSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|apply
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|copy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|diff
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|flatten
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|removeFromMapSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
operator|.
name|ACTIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
operator|.
name|RESOLVED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
operator|.
name|STARTING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
operator|.
name|STOPPING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
operator|.
name|STOP_TRANSIENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
operator|.
name|UNINSTALLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|HostNamespace
operator|.
name|HOST_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|TYPE_BUNDLE
import|;
end_import

begin_class
specifier|public
class|class
name|Deployer
block|{
specifier|public
interface|interface
name|DeployCallback
block|{
name|void
name|print
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|verbose
parameter_list|)
function_decl|;
name|void
name|saveState
parameter_list|(
name|State
name|state
parameter_list|)
function_decl|;
name|void
name|persistResolveRequest
parameter_list|(
name|DeploymentRequest
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|installFeature
parameter_list|(
name|Feature
name|feature
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
function_decl|;
name|void
name|callListeners
parameter_list|(
name|FeatureEvent
name|featureEvent
parameter_list|)
function_decl|;
name|Bundle
name|installBundle
parameter_list|(
name|String
name|region
parameter_list|,
name|String
name|uri
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|BundleException
function_decl|;
name|void
name|updateBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|uri
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|BundleException
function_decl|;
name|void
name|uninstall
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|BundleException
function_decl|;
name|void
name|startBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|BundleException
function_decl|;
name|void
name|stopBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|int
name|options
parameter_list|)
throws|throws
name|BundleException
function_decl|;
name|void
name|setBundleStartLevel
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|int
name|startLevel
parameter_list|)
function_decl|;
name|void
name|refreshPackages
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
name|void
name|resolveBundles
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
name|resToBnd
parameter_list|)
function_decl|;
name|void
name|replaceDigraph
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|policies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|BundleException
throws|,
name|InvalidSyntaxException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|PartialDeploymentException
extends|extends
name|Exception
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|missing
decl_stmt|;
specifier|public
name|PartialDeploymentException
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|missing
parameter_list|)
block|{
name|this
operator|.
name|missing
operator|=
name|missing
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMissing
parameter_list|()
block|{
return|return
name|missing
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DeploymentState
block|{
specifier|public
name|State
name|state
decl_stmt|;
specifier|public
name|Bundle
name|serviceBundle
decl_stmt|;
specifier|public
name|int
name|initialBundleStartLevel
decl_stmt|;
specifier|public
name|int
name|currentStartLevel
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|Bundle
argument_list|>
name|bundles
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|features
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|bundlesPerRegion
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|filtersPerRegion
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|DeploymentRequest
block|{
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|overrides
decl_stmt|;
specifier|public
name|String
name|featureResolutionRange
decl_stmt|;
specifier|public
name|String
name|bundleUpdateRange
decl_stmt|;
specifier|public
name|String
name|updateSnaphots
decl_stmt|;
specifier|public
name|Repository
name|globalRepository
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
decl_stmt|;
specifier|public
name|EnumSet
argument_list|<
name|FeaturesService
operator|.
name|Option
argument_list|>
name|options
decl_stmt|;
specifier|public
name|String
name|outputFile
decl_stmt|;
block|}
specifier|static
class|class
name|Deployment
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|bundleChecksums
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
name|resToBnd
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RegionDeployment
argument_list|>
name|regions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
block|}
specifier|static
class|class
name|RegionDeployment
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|toInstall
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Bundle
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|toUpdate
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Deployer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|DownloadManager
name|manager
decl_stmt|;
specifier|private
specifier|final
name|Resolver
name|resolver
decl_stmt|;
specifier|private
specifier|final
name|DeployCallback
name|callback
decl_stmt|;
specifier|public
name|Deployer
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|Resolver
name|resolver
parameter_list|,
name|DeployCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
comment|/**      *      * @param dstate  deployment state      * @param request deployment request      * @throws Exception      */
specifier|public
name|void
name|deploy
parameter_list|(
name|DeploymentState
name|dstate
parameter_list|,
name|DeploymentRequest
name|request
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|noRefreshUnmanaged
init|=
name|request
operator|.
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshUnmanagedBundles
argument_list|)
decl_stmt|;
name|boolean
name|noRefreshManaged
init|=
name|request
operator|.
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshManagedBundles
argument_list|)
decl_stmt|;
name|boolean
name|noRefresh
init|=
name|request
operator|.
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
decl_stmt|;
name|boolean
name|noStart
init|=
name|request
operator|.
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoStartBundles
argument_list|)
decl_stmt|;
name|boolean
name|verbose
init|=
name|request
operator|.
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|Verbose
argument_list|)
decl_stmt|;
name|boolean
name|simulate
init|=
name|request
operator|.
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|Simulate
argument_list|)
decl_stmt|;
name|boolean
name|noManageBundles
init|=
name|request
operator|.
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoManageBundles
argument_list|)
decl_stmt|;
comment|// TODO: add an option to unmanage bundles instead of uninstalling those
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|managedBundles
init|=
name|copy
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|managedBundles
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
argument_list|>
name|unmanagedBundles
init|=
name|apply
argument_list|(
name|diff
argument_list|(
name|dstate
operator|.
name|bundlesPerRegion
argument_list|,
name|dstate
operator|.
name|state
operator|.
name|managedBundles
argument_list|)
argument_list|,
name|map
argument_list|(
name|dstate
operator|.
name|bundles
argument_list|)
argument_list|)
decl_stmt|;
comment|// Resolve
name|SubsystemResolver
name|resolver
init|=
operator|new
name|SubsystemResolver
argument_list|(
name|this
operator|.
name|resolver
argument_list|,
name|manager
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|prepare
argument_list|(
name|dstate
operator|.
name|features
operator|.
name|values
argument_list|()
argument_list|,
name|request
operator|.
name|requirements
argument_list|,
name|apply
argument_list|(
name|unmanagedBundles
argument_list|,
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|prereqs
init|=
name|resolver
operator|.
name|collectPrerequisites
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prereqs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|prereqs
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|prereq
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|prereq
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|version
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|VersionRange
name|range
init|=
name|getRange
argument_list|(
name|version
argument_list|,
name|request
operator|.
name|featureResolutionRange
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|featureSet
range|:
name|dstate
operator|.
name|state
operator|.
name|installedFeatures
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|feature
range|:
name|featureSet
control|)
block|{
name|String
index|[]
name|p
init|=
name|feature
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|found
operator|=
name|name
operator|.
name|equals
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
operator|&&
name|range
operator|.
name|contains
argument_list|(
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|p
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|found
condition|)
break|break;
block|}
if|if
condition|(
name|found
condition|)
break|break;
block|}
if|if
condition|(
name|found
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|prereqs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DeploymentRequest
name|newRequest
init|=
operator|new
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|newRequest
operator|.
name|bundleUpdateRange
operator|=
name|request
operator|.
name|bundleUpdateRange
expr_stmt|;
name|newRequest
operator|.
name|featureResolutionRange
operator|=
name|request
operator|.
name|featureResolutionRange
expr_stmt|;
name|newRequest
operator|.
name|globalRepository
operator|=
name|request
operator|.
name|globalRepository
expr_stmt|;
name|newRequest
operator|.
name|options
operator|=
name|request
operator|.
name|options
expr_stmt|;
name|newRequest
operator|.
name|overrides
operator|=
name|request
operator|.
name|overrides
expr_stmt|;
name|newRequest
operator|.
name|requirements
operator|=
name|copy
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|requirements
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|prereq
range|:
name|prereqs
control|)
block|{
name|addToMapSet
argument_list|(
name|newRequest
operator|.
name|requirements
argument_list|,
name|ROOT_REGION
argument_list|,
name|prereq
argument_list|)
expr_stmt|;
block|}
name|newRequest
operator|.
name|stateChanges
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|newRequest
operator|.
name|updateSnaphots
operator|=
name|request
operator|.
name|updateSnaphots
expr_stmt|;
name|deploy
argument_list|(
name|dstate
argument_list|,
name|newRequest
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PartialDeploymentException
argument_list|(
name|prereqs
argument_list|)
throw|;
block|}
name|resolver
operator|.
name|resolve
argument_list|(
name|request
operator|.
name|overrides
argument_list|,
name|request
operator|.
name|featureResolutionRange
argument_list|,
name|request
operator|.
name|globalRepository
argument_list|,
name|request
operator|.
name|outputFile
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|providers
init|=
name|resolver
operator|.
name|getProviders
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|featuresPerRegion
init|=
name|resolver
operator|.
name|getFeaturesPerRegions
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|installedFeatures
init|=
name|apply
argument_list|(
name|featuresPerRegion
argument_list|,
name|featureId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newFeatures
init|=
name|diff
argument_list|(
name|installedFeatures
argument_list|,
name|dstate
operator|.
name|state
operator|.
name|installedFeatures
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|delFeatures
init|=
name|diff
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|installedFeatures
argument_list|,
name|installedFeatures
argument_list|)
decl_stmt|;
comment|//
comment|// Compute requested features state
comment|//
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|stateFeatures
init|=
name|copy
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|stateFeatures
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|delFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|stateFeatures
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stateFeatures
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|entry1
range|:
name|request
operator|.
name|stateChanges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|region
init|=
name|entry1
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|regionStates
init|=
name|stateFeatures
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionStates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
name|entry2
range|:
name|entry1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|feature
init|=
name|entry2
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionStates
operator|.
name|containsKey
argument_list|(
name|feature
argument_list|)
condition|)
block|{
name|regionStates
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|entry2
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|newFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|feature
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|stateFeatures
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
name|map
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|stateFeatures
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|noStart
condition|?
name|FeatureState
operator|.
name|Installed
operator|.
name|name
argument_list|()
else|:
name|FeatureState
operator|.
name|Started
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Compute information for each bundle
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|bundleInfos
init|=
name|resolver
operator|.
name|getBundleInfos
argument_list|()
decl_stmt|;
comment|//
comment|// Compute deployment
comment|//
name|Deployer
operator|.
name|Deployment
name|deployment
init|=
name|computeDeployment
argument_list|(
name|dstate
argument_list|,
name|request
argument_list|,
name|resolver
argument_list|)
decl_stmt|;
comment|//
comment|// Compute the set of bundles to refresh
comment|//
name|Map
argument_list|<
name|Bundle
argument_list|,
name|String
argument_list|>
name|toRefresh
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|BundleComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// sort is only used for display
for|for
control|(
name|Deployer
operator|.
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|regionDeployment
operator|.
name|toDelete
control|)
block|{
name|toRefresh
operator|.
name|put
argument_list|(
name|b
argument_list|,
literal|"Bundle will be uninstalled"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Bundle
name|b
range|:
name|regionDeployment
operator|.
name|toUpdate
operator|.
name|keySet
argument_list|()
control|)
block|{
name|toRefresh
operator|.
name|put
argument_list|(
name|b
argument_list|,
literal|"Bundle will be updated"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|noRefreshManaged
condition|)
block|{
name|computeBundlesToRefresh
argument_list|(
name|toRefresh
argument_list|,
name|dstate
operator|.
name|bundles
operator|.
name|values
argument_list|()
argument_list|,
name|deployment
operator|.
name|resToBnd
argument_list|,
name|resolver
operator|.
name|getWiring
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noRefreshUnmanaged
condition|)
block|{
name|toRefresh
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|flatten
argument_list|(
name|unmanagedBundles
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Automatically turn unmanaged bundles into managed bundles
comment|// if they are required by a feature and no other unmanaged
comment|// bundles have a requirement on it
name|Set
argument_list|<
name|Bundle
argument_list|>
name|toManage
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
operator|new
name|BundleComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// sort is only used for display
if|if
condition|(
operator|!
name|noManageBundles
condition|)
block|{
name|Set
argument_list|<
name|Resource
argument_list|>
name|features
init|=
name|resolver
operator|.
name|getFeatures
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|?
extends|extends
name|Resource
argument_list|>
name|unmanaged
init|=
name|apply
argument_list|(
name|flatten
argument_list|(
name|unmanagedBundles
argument_list|)
argument_list|,
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Resource
argument_list|>
name|requested
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Gather bundles required by a feature
for|for
control|(
name|List
argument_list|<
name|Wire
argument_list|>
name|wires
range|:
name|resolver
operator|.
name|getWiring
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Wire
name|wire
range|:
name|wires
control|)
block|{
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|wire
operator|.
name|getRequirer
argument_list|()
argument_list|)
operator|&&
name|unmanaged
operator|.
name|contains
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
condition|)
block|{
name|requested
operator|.
name|add
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Now, we know which bundles are completely unmanaged
name|unmanaged
operator|.
name|removeAll
argument_list|(
name|requested
argument_list|)
expr_stmt|;
comment|// Check if bundles have wires from really unmanaged bundles
for|for
control|(
name|List
argument_list|<
name|Wire
argument_list|>
name|wires
range|:
name|resolver
operator|.
name|getWiring
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Wire
name|wire
range|:
name|wires
control|)
block|{
if|if
condition|(
name|requested
operator|.
name|contains
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
operator|&&
name|unmanaged
operator|.
name|contains
argument_list|(
name|wire
operator|.
name|getRequirer
argument_list|()
argument_list|)
condition|)
block|{
name|requested
operator|.
name|remove
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|requested
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|bundleToRegion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|dstate
operator|.
name|bundlesPerRegion
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|long
name|id
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|bundleToRegion
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Resource
name|rev
range|:
name|requested
control|)
block|{
name|Bundle
name|bundle
init|=
operator|(
operator|(
name|BundleRevision
operator|)
name|rev
operator|)
operator|.
name|getBundle
argument_list|()
decl_stmt|;
name|long
name|id
init|=
name|bundle
operator|.
name|getBundleId
argument_list|()
decl_stmt|;
name|addToMapSet
argument_list|(
name|managedBundles
argument_list|,
name|bundleToRegion
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|toManage
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Set
argument_list|<
name|Bundle
argument_list|>
name|toStart
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bundle
argument_list|>
name|toResolve
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bundle
argument_list|>
name|toStop
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|//
comment|// Compute bundle states
comment|//
name|Map
argument_list|<
name|Resource
argument_list|,
name|FeatureState
argument_list|>
name|states
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Find all features state
name|Map
argument_list|<
name|Resource
argument_list|,
name|FeatureState
argument_list|>
name|featuresState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|conditionals
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|entry
range|:
name|resolver
operator|.
name|getFeaturesPerRegions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fss
init|=
name|stateFeatures
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
for|for
control|(
name|Resource
name|feature
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Resource
argument_list|>
name|conditions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Wire
name|wire
range|:
name|resolver
operator|.
name|getWiring
argument_list|()
operator|.
name|get
argument_list|(
name|feature
argument_list|)
control|)
block|{
if|if
condition|(
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|wire
operator|.
name|getRequirement
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|FeatureResource
operator|.
name|CONDITIONAL_TRUE
operator|.
name|equals
argument_list|(
name|wire
operator|.
name|getRequirement
argument_list|()
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|FeatureResource
operator|.
name|REQUIREMENT_CONDITIONAL_DIRECTIVE
argument_list|)
argument_list|)
condition|)
block|{
name|conditions
operator|.
name|add
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|conditions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|fs
init|=
name|fss
operator|.
name|get
argument_list|(
name|getFeatureId
argument_list|(
name|feature
argument_list|)
argument_list|)
decl_stmt|;
name|featuresState
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|FeatureState
operator|.
name|valueOf
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conditionals
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|conditions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Compute conditional features state
for|for
control|(
name|Resource
name|feature
range|:
name|conditionals
operator|.
name|keySet
argument_list|()
control|)
block|{
name|FeatureState
name|state
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Resource
name|cond
range|:
name|conditionals
operator|.
name|get
argument_list|(
name|feature
argument_list|)
control|)
block|{
name|FeatureState
name|s
init|=
name|featuresState
operator|.
name|get
argument_list|(
name|cond
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
name|s
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|FeatureState
operator|.
name|Started
operator|&&
name|s
operator|==
name|FeatureState
operator|.
name|Resolved
condition|)
block|{
name|state
operator|=
name|FeatureState
operator|.
name|Resolved
expr_stmt|;
block|}
block|}
name|featuresState
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|// Propagate Resolved state
for|for
control|(
name|Resource
name|feature
range|:
name|featuresState
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|featuresState
operator|.
name|get
argument_list|(
name|feature
argument_list|)
operator|==
name|FeatureState
operator|.
name|Resolved
condition|)
block|{
name|propagateState
argument_list|(
name|states
argument_list|,
name|feature
argument_list|,
name|FeatureState
operator|.
name|Resolved
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Propagate Started state
for|for
control|(
name|Resource
name|feature
range|:
name|featuresState
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|featuresState
operator|.
name|get
argument_list|(
name|feature
argument_list|)
operator|==
name|FeatureState
operator|.
name|Started
condition|)
block|{
name|propagateState
argument_list|(
name|states
argument_list|,
name|feature
argument_list|,
name|FeatureState
operator|.
name|Started
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Put default Started state for other bundles
for|for
control|(
name|Resource
name|resource
range|:
name|resolver
operator|.
name|getBundles
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|states
operator|.
name|containsKey
argument_list|(
name|resource
argument_list|)
condition|)
block|{
name|states
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|FeatureState
operator|.
name|Started
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Only keep bundles resources
name|states
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|resolver
operator|.
name|getBundles
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|//
comment|// Compute bundles to start, stop and resolve
comment|//
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|FeatureState
argument_list|>
name|entry
range|:
name|states
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bundle
name|bundle
init|=
name|deployment
operator|.
name|resToBnd
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
case|case
name|Started
case|:
name|toResolve
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|toStart
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
break|break;
case|case
name|Resolved
case|:
name|toResolve
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|toStop
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|//
comment|// Compute bundle all start levels and start levels to update
comment|//
name|Map
argument_list|<
name|Resource
argument_list|,
name|Integer
argument_list|>
name|startLevels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Bundle
argument_list|,
name|Integer
argument_list|>
name|toUpdateStartLevel
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|entry
range|:
name|resolver
operator|.
name|getBundlesPerRegions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|BundleInfo
name|bi
init|=
name|bundleInfos
operator|.
name|get
argument_list|(
name|region
argument_list|)
operator|.
name|get
argument_list|(
name|getUri
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
condition|)
block|{
name|int
name|sl
init|=
name|bi
operator|.
name|getStartLevel
argument_list|()
operator|>
literal|0
condition|?
name|bi
operator|.
name|getStartLevel
argument_list|()
else|:
name|dstate
operator|.
name|initialBundleStartLevel
decl_stmt|;
name|startLevels
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|sl
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
init|=
name|deployment
operator|.
name|resToBnd
operator|.
name|get
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|int
name|curSl
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|sl
operator|!=
name|curSl
condition|)
block|{
name|toUpdateStartLevel
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|sl
argument_list|)
expr_stmt|;
if|if
condition|(
name|sl
operator|>
name|dstate
operator|.
name|currentStartLevel
condition|)
block|{
name|toStop
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|//
comment|// Log deployment
comment|//
name|logDeployment
argument_list|(
name|deployment
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
if|if
condition|(
name|simulate
condition|)
block|{
if|if
condition|(
operator|!
name|noRefresh
operator|&&
operator|!
name|toRefresh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"  Bundles to refresh:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|toRefresh
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bundle
name|bundle
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|print
argument_list|(
literal|"    "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
operator|+
literal|" ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|toManage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"  Managing bundle:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|toManage
control|)
block|{
name|print
argument_list|(
literal|"    "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
comment|//
comment|// Execute deployment
comment|//
comment|// #1: stop bundles that needs to be updated or uninstalled in order
comment|// #2: uninstall needed bundles
comment|// #3: update regions
comment|// #4: update bundles
comment|// #5: install bundles
comment|// #6: save state
comment|// #7: install configuration
comment|// #8: refresh bundles
comment|// #9: start bundles in order
comment|// #10: send events
comment|//
comment|//
comment|// Handle updates on the FeaturesService bundle
comment|//
name|Deployer
operator|.
name|RegionDeployment
name|rootRegionDeployment
init|=
name|deployment
operator|.
name|regions
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
comment|// We don't support uninstalling the bundle
if|if
condition|(
name|rootRegionDeployment
operator|!=
literal|null
operator|&&
name|rootRegionDeployment
operator|.
name|toDelete
operator|.
name|contains
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Uninstalling the FeaturesService bundle is not supported"
argument_list|)
throw|;
block|}
comment|// If the bundle needs to be updated, do the following:
comment|//  - persist the request to indicate the resolution must be continued after restart
comment|//  - update the checksum and save the state
comment|//  - compute bundles wired to the FeaturesService bundle that will be refreshed
comment|//  - stop the bundle
comment|//  - update the bundle
comment|//  - refresh wired bundles
comment|//  - start the bundle
comment|//  - exit
comment|// When restarting, the resolution will be attempted again
if|if
condition|(
name|rootRegionDeployment
operator|!=
literal|null
operator|&&
name|rootRegionDeployment
operator|.
name|toUpdate
operator|.
name|containsKey
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|)
condition|)
block|{
name|callback
operator|.
name|persistResolveRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// If the bundle is updated because of a different checksum,
comment|// save the new checksum persistently
if|if
condition|(
name|deployment
operator|.
name|bundleChecksums
operator|.
name|containsKey
argument_list|(
name|dstate
operator|.
name|serviceBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
condition|)
block|{
name|State
name|state
init|=
name|dstate
operator|.
name|state
operator|.
name|copy
argument_list|()
decl_stmt|;
name|state
operator|.
name|bundleChecksums
operator|.
name|put
argument_list|(
name|dstate
operator|.
name|serviceBundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|deployment
operator|.
name|bundleChecksums
operator|.
name|get
argument_list|(
name|dstate
operator|.
name|serviceBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|callback
operator|.
name|saveState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|Resource
name|resource
init|=
name|rootRegionDeployment
operator|.
name|toUpdate
operator|.
name|get
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"The FeaturesService bundle needs is being updated with "
operator|+
name|uri
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|toRefresh
operator|.
name|clear
argument_list|()
expr_stmt|;
name|toRefresh
operator|.
name|put
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|,
literal|"FeaturesService bundle is being updated"
argument_list|)
expr_stmt|;
name|computeBundlesToRefresh
argument_list|(
name|toRefresh
argument_list|,
name|dstate
operator|.
name|bundles
operator|.
name|values
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Resource
argument_list|,
name|Bundle
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|stopBundle
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|,
name|STOP_TRANSIENT
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|providers
argument_list|)
init|)
block|{
name|callback
operator|.
name|updateBundle
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|,
name|uri
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|refreshPackages
argument_list|(
name|toRefresh
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|startBundle
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//
comment|// Perform bundle operations
comment|//
comment|//
comment|// Stop bundles by chunks
comment|//
for|for
control|(
name|Deployer
operator|.
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
name|toStop
operator|.
name|addAll
argument_list|(
name|regionDeployment
operator|.
name|toUpdate
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|toStop
operator|.
name|addAll
argument_list|(
name|regionDeployment
operator|.
name|toDelete
argument_list|)
expr_stmt|;
block|}
name|removeFragmentsAndBundlesInState
argument_list|(
name|toStop
argument_list|,
name|UNINSTALLED
operator||
name|RESOLVED
operator||
name|STOPPING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"Stopping bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bs
init|=
name|getBundlesToStop
argument_list|(
name|toStop
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bs
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
comment|// If the bundle start level will be changed, stop it persistently to
comment|// avoid a restart when the start level is actually changed
name|callback
operator|.
name|stopBundle
argument_list|(
name|bundle
argument_list|,
name|toUpdateStartLevel
operator|.
name|containsKey
argument_list|(
name|bundle
argument_list|)
condition|?
literal|0
else|:
name|STOP_TRANSIENT
argument_list|)
expr_stmt|;
name|toStop
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Delete bundles
comment|//
name|boolean
name|hasToDelete
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Deployer
operator|.
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasToDelete
operator|=
operator|!
name|regionDeployment
operator|.
name|toDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|hasToDelete
condition|)
block|{
name|print
argument_list|(
literal|"Uninstalling bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Deployer
operator|.
name|RegionDeployment
argument_list|>
name|entry
range|:
name|deployment
operator|.
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Deployer
operator|.
name|RegionDeployment
name|regionDeployment
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|regionDeployment
operator|.
name|toDelete
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|callback
operator|.
name|uninstall
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|removeFromMapSet
argument_list|(
name|managedBundles
argument_list|,
name|name
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Update regions
comment|//
block|{
comment|// Add bundles
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|bundles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|add
argument_list|(
name|bundles
argument_list|,
name|apply
argument_list|(
name|unmanagedBundles
argument_list|,
name|bundleId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|bundles
argument_list|,
name|managedBundles
argument_list|)
expr_stmt|;
comment|// Compute policies
name|RegionDigraph
name|computedDigraph
init|=
name|resolver
operator|.
name|getFlatDigraph
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|policies
init|=
name|copy
argument_list|(
name|dstate
operator|.
name|filtersPerRegion
argument_list|)
decl_stmt|;
comment|// Only keep regions which still have bundles
name|policies
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|bundles
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Fix broken filters
for|for
control|(
name|String
name|name
range|:
name|policies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|policies
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|keySet
argument_list|()
operator|.
name|retainAll
argument_list|(
name|policies
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Update managed regions
for|for
control|(
name|Region
name|computedRegion
range|:
name|computedDigraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|computedRegion
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|policy
init|=
name|policies
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
name|policy
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|policies
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionDigraph
operator|.
name|FilteredRegion
name|fr
range|:
name|computedRegion
operator|.
name|getEdges
argument_list|()
control|)
block|{
name|String
name|r2
init|=
name|fr
operator|.
name|getRegion
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|filters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|current
init|=
name|fr
operator|.
name|getFilter
argument_list|()
operator|.
name|getSharingPolicy
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|current
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|f
range|:
name|current
operator|.
name|get
argument_list|(
name|ns
argument_list|)
control|)
block|{
name|addToMapSet
argument_list|(
name|filters
argument_list|,
name|ns
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|policy
operator|.
name|put
argument_list|(
name|r2
argument_list|,
name|filters
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Apply all changes
name|callback
operator|.
name|replaceDigraph
argument_list|(
name|policies
argument_list|,
name|bundles
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Update bundles
comment|//
name|boolean
name|hasToUpdate
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Deployer
operator|.
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasToUpdate
operator|=
operator|!
name|regionDeployment
operator|.
name|toUpdate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|hasToUpdate
condition|)
block|{
name|print
argument_list|(
literal|"Updating bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Deployer
operator|.
name|RegionDeployment
argument_list|>
name|rde
range|:
name|deployment
operator|.
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|rde
operator|.
name|getValue
argument_list|()
operator|.
name|toUpdate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bundle
name|bundle
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"  "
operator|+
name|uri
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|providers
argument_list|)
init|)
block|{
name|callback
operator|.
name|updateBundle
argument_list|(
name|bundle
argument_list|,
name|uri
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
name|toStart
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Update start levels
comment|//
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|toUpdateStartLevel
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bundle
name|bundle
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|int
name|sl
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|callback
operator|.
name|setBundleStartLevel
argument_list|(
name|bundle
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Install bundles
comment|//
name|boolean
name|hasToInstall
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Deployer
operator|.
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasToInstall
operator|=
operator|!
name|regionDeployment
operator|.
name|toInstall
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|hasToInstall
condition|)
block|{
name|print
argument_list|(
literal|"Installing bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Deployer
operator|.
name|RegionDeployment
argument_list|>
name|entry
range|:
name|deployment
operator|.
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Deployer
operator|.
name|RegionDeployment
name|regionDeployment
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|regionDeployment
operator|.
name|toInstall
control|)
block|{
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"  "
operator|+
name|uri
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
decl_stmt|;
name|long
name|crc
decl_stmt|;
try|try
init|(
name|ChecksumUtils
operator|.
name|CRCInputStream
name|is
init|=
operator|new
name|ChecksumUtils
operator|.
name|CRCInputStream
argument_list|(
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|providers
argument_list|)
argument_list|)
init|)
block|{
name|bundle
operator|=
name|callback
operator|.
name|installBundle
argument_list|(
name|name
argument_list|,
name|uri
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|crc
operator|=
name|is
operator|.
name|getCRC
argument_list|()
expr_stmt|;
block|}
name|addToMapSet
argument_list|(
name|managedBundles
argument_list|,
name|name
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|deployment
operator|.
name|resToBnd
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
comment|// save a checksum of installed snapshot bundle
if|if
condition|(
name|UPDATE_SNAPSHOTS_CRC
operator|.
name|equals
argument_list|(
name|request
operator|.
name|updateSnaphots
argument_list|)
operator|&&
name|isUpdateable
argument_list|(
name|resource
argument_list|)
operator|&&
operator|!
name|deployment
operator|.
name|bundleChecksums
operator|.
name|containsKey
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
condition|)
block|{
name|deployment
operator|.
name|bundleChecksums
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|crc
argument_list|)
expr_stmt|;
block|}
name|int
name|startLevel
init|=
name|startLevels
operator|.
name|get
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLevel
operator|!=
name|dstate
operator|.
name|initialBundleStartLevel
condition|)
block|{
name|callback
operator|.
name|setBundleStartLevel
argument_list|(
name|bundle
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
name|FeatureState
name|reqState
init|=
name|states
operator|.
name|get
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqState
operator|==
literal|null
condition|)
block|{
name|reqState
operator|=
name|FeatureState
operator|.
name|Started
expr_stmt|;
block|}
switch|switch
condition|(
name|reqState
condition|)
block|{
case|case
name|Started
case|:
name|toResolve
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|toStart
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
break|break;
case|case
name|Resolved
case|:
name|toResolve
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|//
comment|// Update and save state
comment|//
name|State
name|newState
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|newState
operator|.
name|bundleChecksums
operator|.
name|putAll
argument_list|(
name|deployment
operator|.
name|bundleChecksums
argument_list|)
expr_stmt|;
name|newState
operator|.
name|requirements
operator|.
name|putAll
argument_list|(
name|request
operator|.
name|requirements
argument_list|)
expr_stmt|;
name|newState
operator|.
name|installedFeatures
operator|.
name|putAll
argument_list|(
name|installedFeatures
argument_list|)
expr_stmt|;
name|newState
operator|.
name|stateFeatures
operator|.
name|putAll
argument_list|(
name|stateFeatures
argument_list|)
expr_stmt|;
name|newState
operator|.
name|managedBundles
operator|.
name|putAll
argument_list|(
name|managedBundles
argument_list|)
expr_stmt|;
name|callback
operator|.
name|saveState
argument_list|(
name|newState
argument_list|)
expr_stmt|;
comment|//
comment|// Install configurations and libraries
comment|//
if|if
condition|(
operator|!
name|newFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|featureIds
init|=
name|flatten
argument_list|(
name|newFeatures
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|dstate
operator|.
name|features
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|featureIds
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|callback
operator|.
name|installFeature
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|Feature
name|condFeature
init|=
name|cond
operator|.
name|asFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|featureIds
operator|.
name|contains
argument_list|(
name|condFeature
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|callback
operator|.
name|installFeature
argument_list|(
name|condFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|noRefresh
condition|)
block|{
name|toStop
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|toStop
operator|.
name|addAll
argument_list|(
name|toRefresh
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|removeFragmentsAndBundlesInState
argument_list|(
name|toStop
argument_list|,
name|UNINSTALLED
operator||
name|RESOLVED
operator||
name|STOPPING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"Stopping bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bs
init|=
name|getBundlesToStop
argument_list|(
name|toStop
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bs
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|callback
operator|.
name|stopBundle
argument_list|(
name|bundle
argument_list|,
name|STOP_TRANSIENT
argument_list|)
expr_stmt|;
name|toStop
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|toStart
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|toRefresh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"Refreshing bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|toRefresh
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bundle
name|bundle
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|print
argument_list|(
literal|"    "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
operator|+
literal|" ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|")"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
comment|// Ensure all classes are loaded in case the bundle will be refreshed
if|if
condition|(
name|dstate
operator|.
name|serviceBundle
operator|!=
literal|null
operator|&&
name|toRefresh
operator|.
name|containsKey
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|)
condition|)
block|{
name|ensureAllClassesLoaded
argument_list|(
name|dstate
operator|.
name|serviceBundle
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|refreshPackages
argument_list|(
name|toRefresh
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Resolve bundles
name|toResolve
operator|.
name|addAll
argument_list|(
name|toStart
argument_list|)
expr_stmt|;
name|toResolve
operator|.
name|addAll
argument_list|(
name|toRefresh
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|removeBundlesInState
argument_list|(
name|toResolve
argument_list|,
name|UNINSTALLED
argument_list|)
expr_stmt|;
name|callback
operator|.
name|resolveBundles
argument_list|(
name|toResolve
argument_list|,
name|resolver
operator|.
name|getWiring
argument_list|()
argument_list|,
name|deployment
operator|.
name|resToBnd
argument_list|)
expr_stmt|;
comment|// Compute bundles to start
name|removeFragmentsAndBundlesInState
argument_list|(
name|toStart
argument_list|,
name|UNINSTALLED
operator||
name|ACTIVE
operator||
name|STARTING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toStart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Compute correct start order
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|print
argument_list|(
literal|"Starting bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toStart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bs
init|=
name|getBundlesToStart
argument_list|(
name|toStart
argument_list|,
name|dstate
operator|.
name|serviceBundle
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bs
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
try|try
block|{
name|callback
operator|.
name|startBundle
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|toStart
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MultiException
argument_list|(
literal|"Error restarting bundles"
argument_list|,
name|exceptions
argument_list|)
throw|;
block|}
block|}
comment|// Call listeners
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|delFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Feature
name|feature
init|=
name|dstate
operator|.
name|features
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|callListeners
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureUninstalled
argument_list|,
name|feature
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|newFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Feature
name|feature
init|=
name|dstate
operator|.
name|features
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|callListeners
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
name|feature
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|print
argument_list|(
literal|"Done."
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VersionRange
name|getRange
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|featureResolutionRange
parameter_list|)
block|{
name|VersionRange
name|range
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
literal|"0.0.0"
argument_list|)
condition|)
block|{
name|range
operator|=
name|VersionRange
operator|.
name|ANY_VERSION
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|range
operator|=
operator|new
name|VersionRange
argument_list|(
name|Macro
operator|.
name|transform
argument_list|(
name|featureResolutionRange
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|range
operator|=
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
return|return
name|range
return|;
block|}
specifier|private
name|void
name|propagateState
parameter_list|(
name|Map
argument_list|<
name|Resource
argument_list|,
name|FeatureState
argument_list|>
name|states
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|FeatureState
name|state
parameter_list|,
name|SubsystemResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSubsystem
argument_list|(
name|resource
argument_list|)
condition|)
block|{
name|FeatureState
name|reqState
init|=
name|mergeStates
argument_list|(
name|state
argument_list|,
name|states
operator|.
name|get
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqState
operator|!=
name|states
operator|.
name|get
argument_list|(
name|resource
argument_list|)
condition|)
block|{
name|states
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|reqState
argument_list|)
expr_stmt|;
for|for
control|(
name|Wire
name|wire
range|:
name|resolver
operator|.
name|getWiring
argument_list|()
operator|.
name|get
argument_list|(
name|resource
argument_list|)
control|)
block|{
if|if
condition|(
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|wire
operator|.
name|getCapability
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|propagateState
argument_list|(
name|states
argument_list|,
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|,
name|reqState
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isSubsystem
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|TYPE_SUBSYSTEM
operator|.
name|equals
argument_list|(
name|getType
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isBundle
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|TYPE_BUNDLE
operator|.
name|equals
argument_list|(
name|getType
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns the most active state of the given states      */
specifier|private
name|FeatureState
name|mergeStates
parameter_list|(
name|FeatureState
name|s1
parameter_list|,
name|FeatureState
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
name|FeatureState
operator|.
name|Started
operator|||
name|s2
operator|==
name|FeatureState
operator|.
name|Started
condition|)
block|{
return|return
name|FeatureState
operator|.
name|Started
return|;
block|}
if|if
condition|(
name|s1
operator|==
name|FeatureState
operator|.
name|Resolved
operator|||
name|s2
operator|==
name|FeatureState
operator|.
name|Resolved
condition|)
block|{
return|return
name|FeatureState
operator|.
name|Resolved
return|;
block|}
return|return
name|FeatureState
operator|.
name|Installed
return|;
block|}
specifier|private
name|void
name|computeBundlesToRefresh
parameter_list|(
name|Map
argument_list|<
name|Bundle
argument_list|,
name|String
argument_list|>
name|toRefresh
parameter_list|,
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
name|resources
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|resolution
parameter_list|)
block|{
comment|// Compute the new list of fragments
name|Map
argument_list|<
name|Bundle
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|newFragments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|newFragments
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Resource
name|res
range|:
name|resolution
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|Wire
name|wire
range|:
name|resolution
operator|.
name|get
argument_list|(
name|res
argument_list|)
control|)
block|{
if|if
condition|(
name|HOST_NAMESPACE
operator|.
name|equals
argument_list|(
name|wire
operator|.
name|getCapability
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|Bundle
name|bundle
init|=
name|resources
operator|.
name|get
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|Bundle
name|b
init|=
name|resources
operator|.
name|get
argument_list|(
name|wire
operator|.
name|getRequirer
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|r
init|=
name|b
operator|!=
literal|null
condition|?
name|b
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
else|:
name|wire
operator|.
name|getRequirer
argument_list|()
decl_stmt|;
name|newFragments
operator|.
name|get
argument_list|(
name|bundle
argument_list|)
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Main loop
name|int
name|size
decl_stmt|;
name|Map
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|bndToRes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
name|entry
range|:
name|resources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|bndToRes
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|do
block|{
name|size
operator|=
name|toRefresh
operator|.
name|size
argument_list|()
expr_stmt|;
name|main
label|:
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|Resource
name|resource
init|=
name|bndToRes
operator|.
name|get
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
comment|// This bundle is not managed
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|// Continue if we already know about this bundle
if|if
condition|(
name|toRefresh
operator|.
name|containsKey
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Ignore non resolved bundle
name|BundleWiring
name|wiring
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiring
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Ignore bundles that won't be wired
name|List
argument_list|<
name|Wire
argument_list|>
name|newWires
init|=
name|resolution
operator|.
name|get
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|newWires
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Check if this bundle is a host and its fragments changed
name|Set
argument_list|<
name|Resource
argument_list|>
name|oldFragments
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleWire
name|wire
range|:
name|wiring
operator|.
name|getProvidedWires
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|HOST_NAMESPACE
operator|.
name|equals
argument_list|(
name|wire
operator|.
name|getCapability
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|oldFragments
operator|.
name|add
argument_list|(
name|wire
operator|.
name|getRequirer
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldFragments
operator|.
name|equals
argument_list|(
name|newFragments
operator|.
name|get
argument_list|(
name|bundle
argument_list|)
argument_list|)
condition|)
block|{
name|toRefresh
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
literal|"Attached fragments changed: "
operator|+
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|newFragments
operator|.
name|get
argument_list|(
name|bundle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Compare the old and new resolutions
name|Set
argument_list|<
name|Resource
argument_list|>
name|wiredBundles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleWire
name|wire
range|:
name|wiring
operator|.
name|getRequiredWires
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|BundleRevision
name|rev
init|=
name|wire
operator|.
name|getProvider
argument_list|()
decl_stmt|;
name|Bundle
name|provider
init|=
name|rev
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|toRefresh
operator|.
name|containsKey
argument_list|(
name|provider
argument_list|)
condition|)
block|{
comment|// The bundle is wired to a bundle being refreshed,
comment|// so we need to refresh it too
name|toRefresh
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
literal|"Wired to "
operator|+
name|provider
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"/"
operator|+
name|provider
operator|.
name|getVersion
argument_list|()
operator|+
literal|" which is being refreshed"
argument_list|)
expr_stmt|;
continue|continue
name|main
continue|;
block|}
name|Resource
name|res
init|=
name|bndToRes
operator|.
name|get
argument_list|(
name|provider
argument_list|)
decl_stmt|;
name|wiredBundles
operator|.
name|add
argument_list|(
name|res
operator|!=
literal|null
condition|?
name|res
else|:
name|rev
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Resource
argument_list|,
name|Requirement
argument_list|>
name|wiredResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Wire
name|wire
range|:
name|newWires
control|)
block|{
comment|// Handle only packages, hosts, and required bundles
name|String
name|namespace
init|=
name|wire
operator|.
name|getRequirement
argument_list|()
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|BundleNamespace
operator|.
name|BUNDLE_NAMESPACE
argument_list|)
operator|&&
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|PackageNamespace
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
operator|&&
operator|!
name|namespace
operator|.
name|equals
argument_list|(
name|HostNamespace
operator|.
name|HOST_NAMESPACE
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Ignore non-resolution time requirements
name|String
name|effective
init|=
name|wire
operator|.
name|getRequirement
argument_list|()
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|Namespace
operator|.
name|CAPABILITY_EFFECTIVE_DIRECTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|effective
operator|!=
literal|null
operator|&&
operator|!
name|Namespace
operator|.
name|EFFECTIVE_RESOLVE
operator|.
name|equals
argument_list|(
name|effective
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Ignore non bundle resources
if|if
condition|(
operator|!
name|isBundle
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|wiredResources
operator|.
name|containsKey
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
condition|)
block|{
name|wiredResources
operator|.
name|put
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|,
name|wire
operator|.
name|getRequirement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|wiredBundles
operator|.
name|containsAll
argument_list|(
name|wiredResources
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Resource
argument_list|,
name|Requirement
argument_list|>
name|newResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|wiredResources
argument_list|)
decl_stmt|;
name|newResources
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|wiredBundles
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Should be wired to: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|Requirement
argument_list|>
name|entry
range|:
name|newResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|Resource
name|res
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Requirement
name|req
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getSymbolicName
argument_list|(
name|res
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|getVersion
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" (through "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|toRefresh
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|toRefresh
operator|.
name|size
argument_list|()
operator|>
name|size
condition|)
do|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|callback
operator|.
name|print
argument_list|(
name|message
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeFragmentsAndBundlesInState
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|int
name|state
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Bundle
argument_list|>
name|iterator
init|=
name|bundles
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Bundle
name|bundle
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bundle
operator|.
name|getState
argument_list|()
operator|&
name|state
operator|)
operator|!=
literal|0
operator|||
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|removeBundlesInState
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|int
name|state
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Bundle
argument_list|>
name|iterator
init|=
name|bundles
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Bundle
name|bundle
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|bundle
operator|.
name|getState
argument_list|()
operator|&
name|state
operator|)
operator|!=
literal|0
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|logDeployment
parameter_list|(
name|Deployer
operator|.
name|Deployment
name|overallDeployment
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
if|if
condition|(
name|overallDeployment
operator|.
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"No deployment change."
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return;
block|}
name|print
argument_list|(
literal|"Changes to perform:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Deployer
operator|.
name|RegionDeployment
argument_list|>
name|region
range|:
name|overallDeployment
operator|.
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Deployer
operator|.
name|RegionDeployment
name|deployment
init|=
name|region
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|print
argument_list|(
literal|"  Region: "
operator|+
name|region
operator|.
name|getKey
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deployment
operator|.
name|toDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"    Bundles to uninstall:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|deployment
operator|.
name|toDelete
control|)
block|{
name|print
argument_list|(
literal|"      "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|deployment
operator|.
name|toUpdate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"    Bundles to update:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|deployment
operator|.
name|toUpdate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|print
argument_list|(
literal|"      "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|+
literal|" with "
operator|+
name|getUri
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|deployment
operator|.
name|toInstall
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"    Bundles to install:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|deployment
operator|.
name|toInstall
control|)
block|{
name|print
argument_list|(
literal|"      "
operator|+
name|getUri
argument_list|(
name|resource
argument_list|)
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Deployment
name|computeDeployment
parameter_list|(
name|DeploymentState
name|dstate
parameter_list|,
name|DeploymentRequest
name|request
parameter_list|,
name|SubsystemResolver
name|resolver
parameter_list|)
throws|throws
name|IOException
block|{
name|Deployment
name|result
init|=
operator|new
name|Deployment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|bundlesPerRegions
init|=
name|resolver
operator|.
name|getBundlesPerRegions
argument_list|()
decl_stmt|;
comment|// Gather all regions, including old ones and new ones
name|Set
argument_list|<
name|String
argument_list|>
name|regions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|regions
operator|.
name|addAll
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|managedBundles
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|.
name|addAll
argument_list|(
name|bundlesPerRegions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|Deployer
operator|.
name|RegionDeployment
name|deployment
init|=
operator|new
name|Deployer
operator|.
name|RegionDeployment
argument_list|()
decl_stmt|;
comment|// Get the list of bundles currently assigned in the region
name|Set
argument_list|<
name|Long
argument_list|>
name|managed
init|=
name|dstate
operator|.
name|state
operator|.
name|managedBundles
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|managed
operator|==
literal|null
condition|)
block|{
name|managed
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
comment|// Compute the list of resources to deploy in the region
name|Set
argument_list|<
name|Resource
argument_list|>
name|bundlesInRegion
init|=
name|bundlesPerRegions
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Resource
argument_list|>
name|toDeploy
init|=
name|bundlesInRegion
operator|!=
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bundlesInRegion
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Remove the system bundle
name|Bundle
name|systemBundle
init|=
name|dstate
operator|.
name|bundles
operator|.
name|get
argument_list|(
literal|0l
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemBundle
operator|!=
literal|null
condition|)
block|{
comment|// It may be null when unit testing, so ignore that
name|toDeploy
operator|.
name|remove
argument_list|(
name|systemBundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// First pass: go through all installed bundles and mark them
comment|// as either to ignore or delete
for|for
control|(
name|long
name|bundleId
range|:
name|managed
control|)
block|{
comment|// Look for the installed bundle
name|Bundle
name|bundle
init|=
name|dstate
operator|.
name|bundles
operator|.
name|get
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
comment|// Bundle has been manually uninstalled ?
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
comment|// Look for a matching resource
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Resource
name|res
range|:
name|toDeploy
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|getSymbolicName
argument_list|(
name|res
argument_list|)
argument_list|)
operator|&&
name|bundle
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|getVersion
argument_list|(
name|res
argument_list|)
argument_list|)
condition|)
block|{
name|resource
operator|=
name|res
expr_stmt|;
break|break;
block|}
block|}
comment|// We found a matching bundle
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
comment|// In case of snapshots, check if the snapshot is out of date
comment|// and flag it as to update
if|if
condition|(
name|isUpdateable
argument_list|(
name|resource
argument_list|)
condition|)
block|{
comment|// Always update snapshots
if|if
condition|(
name|UPDATE_SNAPSHOTS_ALWAYS
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|updateSnaphots
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Update snapshot for "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|deployment
operator|.
name|toUpdate
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UPDATE_SNAPSHOTS_CRC
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|updateSnaphots
argument_list|)
condition|)
block|{
comment|// Retrieve current bundle checksum
name|long
name|oldCrc
decl_stmt|;
if|if
condition|(
name|dstate
operator|.
name|state
operator|.
name|bundleChecksums
operator|.
name|containsKey
argument_list|(
name|bundleId
argument_list|)
condition|)
block|{
name|oldCrc
operator|=
name|dstate
operator|.
name|state
operator|.
name|bundleChecksums
operator|.
name|get
argument_list|(
name|bundleId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Load bundle checksums if not already done
comment|// This is a bit hacky, but we can't get a hold on the real bundle location
comment|// in a standard way in OSGi.  Therefore, hack into Felix/Equinox to obtain the
comment|// corresponding jar url and use that one to compute the checksum of the bundle.
name|oldCrc
operator|=
literal|0l
expr_stmt|;
try|try
block|{
name|URL
name|url
init|=
name|bundle
operator|.
name|getResource
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
decl_stmt|;
name|URLConnection
name|con
init|=
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|con
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getLocalURL"
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|jarUrl
init|=
operator|(
operator|(
name|URL
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|con
argument_list|)
operator|)
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
if|if
condition|(
name|jarUrl
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
condition|)
block|{
name|String
name|jar
init|=
name|jarUrl
operator|.
name|substring
argument_list|(
literal|"jar:"
operator|.
name|length
argument_list|()
argument_list|,
name|jarUrl
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
argument_list|)
decl_stmt|;
name|jar
operator|=
operator|new
name|URL
argument_list|(
name|jar
argument_list|)
operator|.
name|getFile
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|jar
argument_list|)
init|)
block|{
name|oldCrc
operator|=
name|ChecksumUtils
operator|.
name|checksum
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|bundleChecksums
operator|.
name|put
argument_list|(
name|bundleId
argument_list|,
name|oldCrc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Error calculating checksum for bundle: %s"
argument_list|,
name|bundle
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Compute new bundle checksum
name|long
name|newCrc
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|resolver
operator|.
name|getProviders
argument_list|()
argument_list|)
init|)
block|{
name|newCrc
operator|=
name|ChecksumUtils
operator|.
name|checksum
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|result
operator|.
name|bundleChecksums
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|newCrc
argument_list|)
expr_stmt|;
block|}
comment|// if the checksum are different
if|if
condition|(
name|newCrc
operator|!=
name|oldCrc
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"New snapshot available for "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|deployment
operator|.
name|toUpdate
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// We're done for this resource
name|toDeploy
operator|.
name|remove
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|result
operator|.
name|resToBnd
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
comment|// There's no matching resource
comment|// If the bundle is managed, we need to delete it
block|}
elseif|else
if|if
condition|(
name|managed
operator|.
name|contains
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
condition|)
block|{
name|deployment
operator|.
name|toDelete
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Second pass on remaining resources
for|for
control|(
name|Resource
name|resource
range|:
name|toDeploy
control|)
block|{
name|TreeMap
argument_list|<
name|Version
argument_list|,
name|Bundle
argument_list|>
name|matching
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|VersionRange
name|range
init|=
operator|new
name|VersionRange
argument_list|(
name|Macro
operator|.
name|transform
argument_list|(
name|request
operator|.
name|bundleUpdateRange
argument_list|,
name|getVersion
argument_list|(
name|resource
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|deployment
operator|.
name|toDelete
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|getSymbolicName
argument_list|(
name|resource
argument_list|)
argument_list|)
operator|&&
name|range
operator|.
name|contains
argument_list|(
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|matching
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|matching
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Bundle
name|bundle
init|=
name|matching
operator|.
name|lastEntry
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|deployment
operator|.
name|toUpdate
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|deployment
operator|.
name|toDelete
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|result
operator|.
name|resToBnd
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deployment
operator|.
name|toInstall
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|deployment
operator|.
name|toInstall
argument_list|,
operator|new
name|ResourceComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add this region if there is something to do
if|if
condition|(
operator|!
name|deployment
operator|.
name|toDelete
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|deployment
operator|.
name|toUpdate
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|deployment
operator|.
name|toInstall
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|regions
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|deployment
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|MapUtils
operator|.
name|Function
argument_list|<
name|Bundle
argument_list|,
name|T
argument_list|>
name|adapt
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|MapUtils
operator|.
name|Function
argument_list|<
name|Bundle
argument_list|,
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|apply
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
return|return
name|bundle
operator|.
name|adapt
argument_list|(
name|clazz
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|MapUtils
operator|.
name|Function
argument_list|<
name|Bundle
argument_list|,
name|Long
argument_list|>
name|bundleId
parameter_list|()
block|{
return|return
operator|new
name|MapUtils
operator|.
name|Function
argument_list|<
name|Bundle
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|apply
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
return|return
name|bundle
operator|.
name|getBundleId
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|MapUtils
operator|.
name|Function
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|featureId
parameter_list|()
block|{
return|return
operator|new
name|MapUtils
operator|.
name|Function
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|apply
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|getFeatureId
argument_list|(
name|resource
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|boolean
name|isUpdateable
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|uri
operator|.
name|matches
argument_list|(
name|UPDATEABLE_URIS
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Bundle
argument_list|>
name|getBundlesToStart
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|Bundle
name|serviceBundle
parameter_list|)
block|{
comment|// Restart the features service last, regardless of any other consideration
comment|// so that we don't end up with the service trying to do stuff before we're done
name|boolean
name|restart
init|=
literal|false
decl_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
argument_list|>
name|bundlesPerStartLevel
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
if|if
condition|(
name|bundle
operator|==
name|serviceBundle
condition|)
block|{
name|restart
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|int
name|sl
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
name|addToMapSet
argument_list|(
name|bundlesPerStartLevel
argument_list|,
name|sl
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bundlesPerStartLevel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bundles
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bundles
operator|=
name|bundlesPerStartLevel
operator|.
name|remove
argument_list|(
name|bundlesPerStartLevel
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We hit FELIX-2949 if we don't use the correct order as Felix resolver isn't greedy.
comment|// In order to minimize that, we make sure we resolve the bundles in the order they
comment|// are given back by the resolution, meaning that all root bundles (i.e. those that were
comment|// not flagged as dependencies in features) are started before the others.   This should
comment|// make sure those important bundles are started first and minimize the problem.
name|List
argument_list|<
name|BundleRevision
argument_list|>
name|revs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|revs
operator|.
name|add
argument_list|(
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Bundle
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleRevision
name|rev
range|:
name|RequirementSort
operator|.
name|sort
argument_list|(
name|revs
argument_list|)
control|)
block|{
name|sorted
operator|.
name|add
argument_list|(
name|rev
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sorted
operator|.
name|isEmpty
argument_list|()
operator|&&
name|restart
condition|)
block|{
name|sorted
operator|.
name|add
argument_list|(
name|serviceBundle
argument_list|)
expr_stmt|;
block|}
return|return
name|sorted
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Bundle
argument_list|>
name|getBundlesToStop
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
argument_list|>
name|bundlesPerStartLevel
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|int
name|sl
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
name|addToMapSet
argument_list|(
name|bundlesPerStartLevel
argument_list|,
name|sl
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
name|bundles
operator|=
name|bundlesPerStartLevel
operator|.
name|get
argument_list|(
name|bundlesPerStartLevel
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundlesToDestroy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|ServiceReference
index|[]
name|references
init|=
name|bundle
operator|.
name|getRegisteredServices
argument_list|()
decl_stmt|;
name|int
name|usage
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
name|reference
range|:
name|references
control|)
block|{
name|usage
operator|+=
name|getServiceUsage
argument_list|(
name|reference
argument_list|,
name|bundles
argument_list|)
expr_stmt|;
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Usage for bundle {} is {}"
argument_list|,
name|bundle
argument_list|,
name|usage
argument_list|)
expr_stmt|;
if|if
condition|(
name|usage
operator|==
literal|0
condition|)
block|{
name|bundlesToDestroy
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bundlesToDestroy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|bundlesToDestroy
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Bundle
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Bundle
name|b1
parameter_list|,
name|Bundle
name|b2
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|b2
operator|.
name|getLastModified
argument_list|()
operator|-
name|b1
operator|.
name|getLastModified
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Selected bundles {} for destroy (no services in use)"
argument_list|,
name|bundlesToDestroy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ServiceReference
name|ref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|ServiceReference
index|[]
name|references
init|=
name|bundle
operator|.
name|getRegisteredServices
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceReference
name|reference
range|:
name|references
control|)
block|{
if|if
condition|(
name|getServiceUsage
argument_list|(
name|reference
argument_list|,
name|bundles
argument_list|)
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|reference
operator|.
name|compareTo
argument_list|(
name|ref
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Currently selecting bundle {} for destroy (with reference {})"
argument_list|,
name|bundle
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|ref
operator|=
name|reference
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|bundlesToDestroy
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Selected bundle {} for destroy (lowest ranking service)"
argument_list|,
name|bundlesToDestroy
argument_list|)
expr_stmt|;
block|}
return|return
name|bundlesToDestroy
return|;
block|}
specifier|private
specifier|static
name|int
name|getServiceUsage
parameter_list|(
name|ServiceReference
name|ref
parameter_list|,
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
name|Bundle
index|[]
name|usingBundles
init|=
name|ref
operator|.
name|getUsingBundles
argument_list|()
decl_stmt|;
name|int
name|nb
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|usingBundles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|usingBundles
control|)
block|{
if|if
condition|(
name|bundles
operator|.
name|contains
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
name|nb
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|nb
return|;
block|}
specifier|protected
name|InputStream
name|getBundleInputStream
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|providers
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource has no uri"
argument_list|)
throw|;
block|}
name|StreamProvider
name|provider
init|=
name|providers
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource "
operator|+
name|uri
operator|+
literal|" has no StreamProvider"
argument_list|)
throw|;
block|}
return|return
name|provider
operator|.
name|open
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|ensureAllClassesLoaded
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|BundleWiring
name|wiring
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiring
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|path
range|:
name|wiring
operator|.
name|listResources
argument_list|(
literal|"/"
argument_list|,
literal|"*.class"
argument_list|,
name|BundleWiring
operator|.
name|LISTRESOURCES_RECURSE
argument_list|)
control|)
block|{
name|String
name|className
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|".class"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|className
operator|=
name|className
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

