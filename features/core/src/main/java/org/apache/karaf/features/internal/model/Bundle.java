begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_comment
comment|/**  *<p>Deployable element to install.</p>  *  *<p>Java class for bundle complex type.</p>  *  *<p>The following schema fragment specifies the expected content contained within this class.</p>  *  *<pre>  *&lt;complexType name="bundle"&gt;  *&lt;simpleContent&gt;  *&lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;anyURI"&gt;  *&lt;attribute name="start-level" type="{http://www.w3.org/2001/XMLSchema}int" /&gt;  *&lt;attribute name="start" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;  *&lt;attribute name="dependency" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;  *&lt;/extension&gt;  *&lt;/simpleContent&gt;  *&lt;/complexType&gt;  *</pre>  */
end_comment

begin_class
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
annotation|@
name|XmlType
argument_list|(
name|name
operator|=
literal|"bundle"
argument_list|,
name|propOrder
operator|=
block|{
literal|"value"
block|}
argument_list|)
specifier|public
class|class
name|Bundle
implements|implements
name|BundleInfo
block|{
annotation|@
name|XmlValue
annotation|@
name|XmlSchemaType
argument_list|(
name|name
operator|=
literal|"anyURI"
argument_list|)
specifier|protected
name|String
name|value
decl_stmt|;
annotation|@
name|XmlAttribute
argument_list|(
name|name
operator|=
literal|"start-level"
argument_list|)
specifier|protected
name|Integer
name|startLevel
decl_stmt|;
annotation|@
name|XmlAttribute
specifier|protected
name|Boolean
name|start
decl_stmt|;
comment|// = true;
annotation|@
name|XmlAttribute
specifier|protected
name|Boolean
name|dependency
decl_stmt|;
specifier|public
name|Bundle
parameter_list|()
block|{     }
specifier|public
name|Bundle
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Gets the value of the value property.      *      * @return possible object is      * {@link String }      */
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|value
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**      * Sets the value of the value property.      *      * @param value allowed object is      *              {@link String }      */
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Gets the value of the startLevel property.      *      * @return possible object is      * {@link Integer }      */
specifier|public
name|int
name|getStartLevel
parameter_list|()
block|{
return|return
name|startLevel
operator|==
literal|null
condition|?
literal|0
else|:
name|startLevel
return|;
block|}
comment|/**      * Sets the value of the startLevel property.      *      * @param value allowed object is      *              {@link Integer }      */
specifier|public
name|void
name|setStartLevel
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|this
operator|.
name|startLevel
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Gets the value of the start property.      *      * @return possible object is      * {@link Boolean }      */
specifier|public
name|boolean
name|isStart
parameter_list|()
block|{
return|return
name|start
operator|==
literal|null
condition|?
literal|true
else|:
name|start
return|;
block|}
comment|/**      * Sets the value of the start property.      *      * @param value allowed object is      *              {@link Boolean }      */
specifier|public
name|void
name|setStart
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * Gets the value of the dependency property.      *      * @return possible object is      * {@link Boolean }      */
specifier|public
name|boolean
name|isDependency
parameter_list|()
block|{
return|return
name|dependency
operator|==
literal|null
condition|?
literal|false
else|:
name|dependency
return|;
block|}
comment|/**      * Sets the value of the dependency property.      *      * @param value allowed object is      *              {@link Boolean }      */
specifier|public
name|void
name|setDependency
parameter_list|(
name|Boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|dependency
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Bundle
name|bundle
init|=
operator|(
name|Bundle
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|dependency
operator|!=
name|bundle
operator|.
name|dependency
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|start
operator|!=
name|bundle
operator|.
name|start
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|startLevel
operator|!=
literal|null
condition|?
name|startLevel
else|:
literal|0
operator|)
operator|!=
operator|(
name|bundle
operator|.
name|startLevel
operator|!=
literal|null
condition|?
name|bundle
operator|.
name|startLevel
else|:
literal|0
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|equals
argument_list|(
name|bundle
operator|.
name|value
argument_list|)
else|:
name|bundle
operator|.
name|value
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|getStartLevel
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|isStart
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|isDependency
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

