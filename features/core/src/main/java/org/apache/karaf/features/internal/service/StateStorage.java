begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|StateStorage
block|{
specifier|public
name|void
name|load
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|.
name|repositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|state
operator|.
name|features
operator|.
name|clear
argument_list|()
expr_stmt|;
name|state
operator|.
name|installedFeatures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|state
operator|.
name|managedBundles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|state
operator|.
name|bootDone
operator|.
name|set
argument_list|(
name|loadBool
argument_list|(
name|props
argument_list|,
literal|"bootDone"
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|repositories
operator|.
name|addAll
argument_list|(
name|loadSet
argument_list|(
name|props
argument_list|,
literal|"repositories."
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|features
operator|.
name|addAll
argument_list|(
name|loadSet
argument_list|(
name|props
argument_list|,
literal|"features."
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|installedFeatures
operator|.
name|addAll
argument_list|(
name|loadSet
argument_list|(
name|props
argument_list|,
literal|"installed."
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|managedBundles
operator|.
name|addAll
argument_list|(
name|toLongSet
argument_list|(
name|loadSet
argument_list|(
name|props
argument_list|,
literal|"managed."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|bundleChecksums
operator|.
name|putAll
argument_list|(
name|toStringLongMap
argument_list|(
name|loadMap
argument_list|(
name|props
argument_list|,
literal|"checksums."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|save
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
name|getOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|saveBool
argument_list|(
name|props
argument_list|,
literal|"bootDone"
argument_list|,
name|state
operator|.
name|bootDone
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|saveSet
argument_list|(
name|props
argument_list|,
literal|"repositories."
argument_list|,
name|state
operator|.
name|repositories
argument_list|)
expr_stmt|;
name|saveSet
argument_list|(
name|props
argument_list|,
literal|"features."
argument_list|,
name|state
operator|.
name|features
argument_list|)
expr_stmt|;
name|saveSet
argument_list|(
name|props
argument_list|,
literal|"installed."
argument_list|,
name|state
operator|.
name|installedFeatures
argument_list|)
expr_stmt|;
name|saveSet
argument_list|(
name|props
argument_list|,
literal|"managed."
argument_list|,
name|toStringSet
argument_list|(
name|state
operator|.
name|managedBundles
argument_list|)
argument_list|)
expr_stmt|;
name|saveMap
argument_list|(
name|props
argument_list|,
literal|"checksums."
argument_list|,
name|toStringStringMap
argument_list|(
name|state
operator|.
name|bundleChecksums
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|"FeaturesService State"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|protected
name|boolean
name|loadBool
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|key
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|saveBool
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|val
parameter_list|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|toStringSet
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|set
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ns
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|l
range|:
name|set
control|)
block|{
name|ns
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ns
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|toLongSet
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|ns
init|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|set
control|)
block|{
name|ns
operator|.
name|add
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ns
return|;
block|}
specifier|protected
name|void
name|saveSet
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"item."
operator|+
name|i
argument_list|,
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|loadSet
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|countStr
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"count"
argument_list|)
decl_stmt|;
if|if
condition|(
name|countStr
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|countStr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"item."
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toStringStringMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nm
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nm
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nm
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|toStringLongMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nm
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|nm
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nm
return|;
block|}
specifier|protected
name|void
name|saveMap
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
name|map
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"key."
operator|+
name|i
argument_list|,
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"val."
operator|+
name|i
argument_list|,
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|loadMap
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|l
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|countStr
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"count"
argument_list|)
decl_stmt|;
if|if
condition|(
name|countStr
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|countStr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"key."
operator|+
name|i
argument_list|)
decl_stmt|;
name|String
name|val
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"val."
operator|+
name|i
argument_list|)
decl_stmt|;
name|l
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
specifier|protected
name|void
name|close
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
end_class

end_unit

