begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|BaseRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|JsonRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|XmlRepository
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryManager
block|{
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|BaseRepository
argument_list|>
name|repositories
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|BaseRepository
name|getRepository
parameter_list|(
name|String
name|base
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|BaseRepository
name|repo
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"xml:"
argument_list|)
condition|)
block|{
name|String
name|u
init|=
name|URI
operator|.
name|create
argument_list|(
name|base
argument_list|)
operator|.
name|resolve
argument_list|(
name|uri
operator|.
name|substring
argument_list|(
literal|"xml:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|uri
operator|=
literal|"xml:"
operator|+
name|u
expr_stmt|;
name|repo
operator|=
operator|new
name|XmlRepository
argument_list|(
name|u
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"json:"
argument_list|)
condition|)
block|{
name|String
name|u
init|=
name|URI
operator|.
name|create
argument_list|(
name|base
argument_list|)
operator|.
name|resolve
argument_list|(
name|uri
operator|.
name|substring
argument_list|(
literal|"json:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|uri
operator|=
literal|"json:"
operator|+
name|u
expr_stmt|;
name|repo
operator|=
operator|new
name|JsonRepository
argument_list|(
name|u
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|u
init|=
name|URI
operator|.
name|create
argument_list|(
name|base
argument_list|)
operator|.
name|resolve
argument_list|(
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|uri
operator|=
literal|"xml:"
operator|+
name|u
expr_stmt|;
name|repo
operator|=
operator|new
name|XmlRepository
argument_list|(
name|u
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|repositories
operator|.
name|putIfAbsent
argument_list|(
name|uri
argument_list|,
name|repo
argument_list|)
expr_stmt|;
return|return
name|repositories
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
block|}
end_class

end_unit

