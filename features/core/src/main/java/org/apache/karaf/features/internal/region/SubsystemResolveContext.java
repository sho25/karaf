begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|StaticRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|HostedCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|ResolveContext
import|;
end_import

begin_class
specifier|public
class|class
name|SubsystemResolveContext
extends|extends
name|ResolveContext
block|{
specifier|private
specifier|final
name|Subsystem
name|root
decl_stmt|;
specifier|private
specifier|final
name|RegionDigraph
name|digraph
decl_stmt|;
specifier|private
specifier|final
name|CandidateComparator
name|candidateComparator
init|=
operator|new
name|CandidateComparator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Resource
argument_list|,
name|Subsystem
argument_list|>
name|resToSub
init|=
operator|new
name|HashMap
argument_list|<
name|Resource
argument_list|,
name|Subsystem
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Repository
name|repository
decl_stmt|;
specifier|public
name|SubsystemResolveContext
parameter_list|(
name|Subsystem
name|root
parameter_list|,
name|RegionDigraph
name|digraph
parameter_list|)
throws|throws
name|BundleException
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|digraph
operator|=
name|digraph
expr_stmt|;
name|prepare
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|repository
operator|=
operator|new
name|StaticRepository
argument_list|(
name|resToSub
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|prepare
parameter_list|(
name|Subsystem
name|subsystem
parameter_list|)
block|{
name|resToSub
operator|.
name|put
argument_list|(
name|subsystem
argument_list|,
name|subsystem
argument_list|)
expr_stmt|;
for|for
control|(
name|Resource
name|res
range|:
name|subsystem
operator|.
name|getInstallable
argument_list|()
control|)
block|{
name|resToSub
operator|.
name|put
argument_list|(
name|res
argument_list|,
name|subsystem
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|prepare
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Resource
argument_list|>
name|getMandatoryResources
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|Resource
operator|>
name|singleton
argument_list|(
name|root
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Capability
argument_list|>
name|findProviders
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
name|List
argument_list|<
name|Capability
argument_list|>
name|caps
init|=
operator|new
name|ArrayList
argument_list|<
name|Capability
argument_list|>
argument_list|()
decl_stmt|;
name|Region
name|requirerRegion
init|=
name|getRegion
argument_list|(
name|requirement
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requirerRegion
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Requirement
argument_list|,
name|Collection
argument_list|<
name|Capability
argument_list|>
argument_list|>
name|resMap
init|=
name|repository
operator|.
name|findProviders
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|requirement
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Capability
argument_list|>
name|res
init|=
name|resMap
operator|!=
literal|null
condition|?
name|resMap
operator|.
name|get
argument_list|(
name|requirement
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
name|caps
operator|.
name|addAll
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
comment|// Use the digraph to prune non visible capabilities
name|Visitor
name|visitor
init|=
operator|new
name|Visitor
argument_list|(
name|caps
argument_list|)
decl_stmt|;
name|requirerRegion
operator|.
name|visitSubgraph
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Capability
argument_list|>
name|allowed
init|=
name|visitor
operator|.
name|getAllowed
argument_list|()
decl_stmt|;
name|caps
operator|.
name|retainAll
argument_list|(
name|allowed
argument_list|)
expr_stmt|;
comment|// Handle cases where the same bundle is requested from both
comment|// a subsystem and one of its ascendant.  In such cases, we
comment|// need to remove the one from the child if it can view
comment|// the parent one
if|if
condition|(
name|caps
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|providers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Capability
name|cap
range|:
name|caps
control|)
block|{
name|Resource
name|resource
init|=
name|cap
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|Util
operator|.
name|getSymbolicName
argument_list|(
name|resource
argument_list|)
operator|+
literal|"|"
operator|+
name|Util
operator|.
name|getVersion
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Resource
name|prev
init|=
name|providers
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|prev
operator|!=
name|resource
condition|)
block|{
name|String
name|r1
init|=
name|getRegion
argument_list|(
name|prev
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|r2
init|=
name|getRegion
argument_list|(
name|resource
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
comment|// This should never happen because resource have been
comment|// de-duplicated during the pre-resolution phase.
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|resource
operator|=
name|c
operator|<
literal|0
condition|?
name|prev
else|:
name|resource
expr_stmt|;
block|}
name|providers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Capability
argument_list|>
name|it
init|=
name|caps
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Capability
name|cap
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|providers
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|cap
operator|.
name|getResource
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Sort caps
name|Collections
operator|.
name|sort
argument_list|(
name|caps
argument_list|,
name|candidateComparator
argument_list|)
expr_stmt|;
block|}
return|return
name|caps
return|;
block|}
specifier|private
name|Subsystem
name|getSubsystem
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|resToSub
operator|.
name|get
argument_list|(
name|resource
argument_list|)
return|;
block|}
specifier|private
name|Region
name|getRegion
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|digraph
operator|.
name|getRegion
argument_list|(
name|getSubsystem
argument_list|(
name|resource
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|insertHostedCapability
parameter_list|(
name|List
argument_list|<
name|Capability
argument_list|>
name|capabilities
parameter_list|,
name|HostedCapability
name|hostedCapability
parameter_list|)
block|{
name|int
name|idx
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|capabilities
argument_list|,
name|hostedCapability
argument_list|,
name|candidateComparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|capabilities
operator|.
name|add
argument_list|(
name|idx
argument_list|,
name|hostedCapability
argument_list|)
expr_stmt|;
return|return
name|idx
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEffective
parameter_list|(
name|Requirement
name|requirement
parameter_list|)
block|{
name|String
name|resolution
init|=
name|requirement
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|RESOLUTION_DIRECTIVE
argument_list|)
decl_stmt|;
return|return
name|requirement
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|)
operator|||
operator|!
name|Constants
operator|.
name|RESOLUTION_OPTIONAL
operator|.
name|equals
argument_list|(
name|resolution
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|Wiring
argument_list|>
name|getWirings
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
class|class
name|Visitor
extends|extends
name|AbstractRegionDigraphVisitor
argument_list|<
name|Capability
argument_list|>
block|{
name|Visitor
parameter_list|(
name|Collection
argument_list|<
name|Capability
argument_list|>
name|candidates
parameter_list|)
block|{
name|super
argument_list|(
name|candidates
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|contains
parameter_list|(
name|Region
name|region
parameter_list|,
name|Capability
name|candidate
parameter_list|)
block|{
return|return
name|region
operator|.
name|equals
argument_list|(
name|getRegion
argument_list|(
name|candidate
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isAllowed
parameter_list|(
name|Capability
name|candidate
parameter_list|,
name|RegionFilter
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|.
name|isAllowed
argument_list|(
name|candidate
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|candidate
operator|.
name|getAttributes
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Resource
name|resource
init|=
name|candidate
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Capability
argument_list|>
name|identities
init|=
name|resource
operator|.
name|getCapabilities
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|identities
operator|!=
literal|null
operator|&&
operator|!
name|identities
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Capability
name|identity
init|=
name|identities
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME_ATTRIBUTE
argument_list|,
name|identity
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION_ATTRIBUTE
argument_list|,
name|identity
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IdentityNamespace
operator|.
name|CAPABILITY_VERSION_ATTRIBUTE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|filter
operator|.
name|isAllowed
argument_list|(
name|RegionFilter
operator|.
name|VISIBLE_BUNDLE_NAMESPACE
argument_list|,
name|attrs
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

