begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesNamespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|XmlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|XMLFilterImpl
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JaxbUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JaxbUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|JAXBContext
name|FEATURES_CONTEXT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Schema
argument_list|>
name|SCHEMAS
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
name|FEATURES_CONTEXT
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|Features
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|JaxbUtil
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|marshal
parameter_list|(
name|Features
name|features
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Marshaller
name|marshaller
init|=
name|FEATURES_CONTEXT
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
literal|"jaxb.formatted.output"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|features
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|marshal
parameter_list|(
name|Features
name|features
parameter_list|,
name|Writer
name|out
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Marshaller
name|marshaller
init|=
name|FEATURES_CONTEXT
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
literal|"jaxb.formatted.output"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|features
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read in a Features from the input stream.      *      * @param uri      uri to read      * @param validate whether to validate the input.      * @return a Features read from the input stream      */
specifier|public
specifier|static
name|Features
name|unmarshal
parameter_list|(
name|String
name|uri
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
return|return
name|unmarshal
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|,
name|validate
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Features
name|unmarshal
parameter_list|(
name|String
name|uri
parameter_list|,
name|InputStream
name|stream
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|Features
name|features
decl_stmt|;
if|if
condition|(
name|validate
condition|)
block|{
name|features
operator|=
name|unmarshalValidate
argument_list|(
name|uri
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|features
operator|=
name|unmarshalNoValidate
argument_list|(
name|uri
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
name|features
operator|.
name|postUnmarshall
argument_list|()
expr_stmt|;
return|return
name|features
return|;
block|}
specifier|private
specifier|static
name|Features
name|unmarshalValidate
parameter_list|(
name|String
name|uri
parameter_list|,
name|InputStream
name|stream
parameter_list|)
block|{
try|try
block|{
name|Document
name|doc
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|doc
operator|=
name|XmlUtils
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setDocumentURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|XmlUtils
operator|.
name|parse
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|String
name|nsuri
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsuri
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Old style feature file without namespace found (URI: {}). This format is deprecated and support for it will soon be removed"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Schema
name|schema
init|=
name|getSchema
argument_list|(
name|nsuri
argument_list|)
decl_stmt|;
try|try
block|{
name|schema
operator|.
name|newValidator
argument_list|()
operator|.
name|validate
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to validate "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|fixDom
argument_list|(
name|doc
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
expr_stmt|;
name|Unmarshaller
name|unmarshaller
init|=
name|FEATURES_CONTEXT
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|Features
name|features
init|=
operator|(
name|Features
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
decl_stmt|;
name|features
operator|.
name|setNamespace
argument_list|(
name|nsuri
argument_list|)
expr_stmt|;
return|return
name|features
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to load "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Schema
name|getSchema
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|SAXException
block|{
name|Schema
name|schema
init|=
name|SCHEMAS
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|String
name|schemaLocation
decl_stmt|;
switch|switch
condition|(
name|namespace
condition|)
block|{
case|case
name|FeaturesNamespaces
operator|.
name|URI_1_0_0
case|:
name|schemaLocation
operator|=
literal|"/org/apache/karaf/features/karaf-features-1.0.0.xsd"
expr_stmt|;
break|break;
case|case
name|FeaturesNamespaces
operator|.
name|URI_1_1_0
case|:
name|schemaLocation
operator|=
literal|"/org/apache/karaf/features/karaf-features-1.1.0.xsd"
expr_stmt|;
break|break;
case|case
name|FeaturesNamespaces
operator|.
name|URI_1_2_0
case|:
name|schemaLocation
operator|=
literal|"/org/apache/karaf/features/karaf-features-1.2.0.xsd"
expr_stmt|;
break|break;
case|case
name|FeaturesNamespaces
operator|.
name|URI_1_2_1
case|:
name|schemaLocation
operator|=
literal|"/org/apache/karaf/features/karaf-features-1.2.1.xsd"
expr_stmt|;
break|break;
case|case
name|FeaturesNamespaces
operator|.
name|URI_1_3_0
case|:
name|schemaLocation
operator|=
literal|"/org/apache/karaf/features/karaf-features-1.3.0.xsd"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported namespace: "
operator|+
name|namespace
argument_list|)
throw|;
block|}
name|SchemaFactory
name|factory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
comment|// root element has namespace - we can use schema validation
name|URL
name|url
init|=
name|JaxbUtil
operator|.
name|class
operator|.
name|getResource
argument_list|(
name|schemaLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find resource: "
operator|+
name|schemaLocation
argument_list|)
throw|;
block|}
name|schema
operator|=
name|factory
operator|.
name|newSchema
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SCHEMAS
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|schema
return|;
block|}
specifier|private
specifier|static
name|void
name|fixDom
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
if|if
condition|(
operator|!
name|FeaturesNamespaces
operator|.
name|URI_CURRENT
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|.
name|renameNode
argument_list|(
name|node
argument_list|,
name|FeaturesNamespaces
operator|.
name|URI_CURRENT
argument_list|,
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fixDom
argument_list|(
name|doc
argument_list|,
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Features
name|unmarshalNoValidate
parameter_list|(
name|String
name|uri
parameter_list|,
name|InputStream
name|stream
parameter_list|)
block|{
try|try
block|{
name|Unmarshaller
name|unmarshaller
init|=
name|FEATURES_CONTEXT
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|NoSourceAndNamespaceFilter
name|xmlFilter
init|=
operator|new
name|NoSourceAndNamespaceFilter
argument_list|(
name|XmlUtils
operator|.
name|xmlReader
argument_list|()
argument_list|)
decl_stmt|;
name|xmlFilter
operator|.
name|setContentHandler
argument_list|(
name|unmarshaller
operator|.
name|getUnmarshallerHandler
argument_list|()
argument_list|)
expr_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|setByteStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|SAXSource
name|source
init|=
operator|new
name|SAXSource
argument_list|(
name|xmlFilter
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|Features
name|features
init|=
operator|(
name|Features
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|features
operator|.
name|setNamespace
argument_list|(
name|xmlFilter
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|features
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to load "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Provides an empty inputsource for the entity resolver.      * Converts all elements to the features namespace to make old feature files      * compatible to the new format      */
specifier|public
specifier|static
class|class
name|NoSourceAndNamespaceFilter
extends|extends
name|XMLFilterImpl
block|{
specifier|private
specifier|static
specifier|final
name|InputSource
name|EMPTY_INPUT_SOURCE
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|String
name|namespace
decl_stmt|;
specifier|public
name|NoSourceAndNamespaceFilter
parameter_list|(
name|XMLReader
name|xmlReader
parameter_list|)
block|{
name|super
argument_list|(
name|xmlReader
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
return|return
name|EMPTY_INPUT_SOURCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|namespace
operator|=
name|uri
expr_stmt|;
block|}
name|super
operator|.
name|startElement
argument_list|(
name|FeaturesNamespaces
operator|.
name|URI_CURRENT
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endElement
argument_list|(
name|FeaturesNamespaces
operator|.
name|URI_CURRENT
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
block|}
block|}
end_class

end_unit

