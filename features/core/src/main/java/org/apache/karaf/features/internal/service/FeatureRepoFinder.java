begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_class
specifier|public
class|class
name|FeatureRepoFinder
implements|implements
name|ManagedService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FEATURES_REPOS_PID
init|=
literal|"org.apache.karaf.features.repos"
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameToArtifactMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceProperties
parameter_list|()
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|FeatureRepoFinder
operator|.
name|FEATURES_REPOS_PID
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
specifier|synchronized
name|String
index|[]
name|getNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|nameToArtifactMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|strings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|strings
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|URI
name|getUriFor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|String
name|artifactUri
init|=
name|nameToArtifactMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifactUri
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|artifactUri
operator|=
name|FeatureRepoFinder
operator|.
name|replaceVersion
argument_list|(
name|artifactUri
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
return|return
name|URI
operator|.
name|create
argument_list|(
name|artifactUri
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
specifier|synchronized
name|void
name|updated
parameter_list|(
name|Dictionary
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|nameToArtifactMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Enumeration
name|keys
init|=
name|properties
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSystemKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|nameToArtifactMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isSystemKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
literal|"felix.fileinstall.filename"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|||
literal|"service.pid"
operator|.
name|equals
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Replace the version in the URL with the provided one.       * Only processes mvn urls like mvn:groupId/artifactId/version...       *       * @param url      * @param version      * @return      */
specifier|private
specifier|static
name|String
name|replaceVersion
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|int
name|firstSlash
init|=
name|url
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|int
name|secondSlash
init|=
name|url
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|firstSlash
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|before
init|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|secondSlash
argument_list|)
decl_stmt|;
name|int
name|thirdSlash
init|=
name|url
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|secondSlash
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|after
init|=
name|url
operator|.
name|substring
argument_list|(
name|thirdSlash
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|before
operator|+
literal|"/"
operator|+
name|version
operator|+
literal|"/"
operator|+
name|after
return|;
block|}
return|return
name|url
return|;
block|}
block|}
end_class

end_unit

