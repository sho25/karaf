begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleFilter
block|{
specifier|public
specifier|static
specifier|final
name|int
name|MATCH_ALL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|AND
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OR
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NOT
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|EQ
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LTE
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|GTE
init|=
literal|6
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SUBSTRING
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PRESENT
init|=
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|APPROX
init|=
literal|9
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Object
name|value
decl_stmt|;
specifier|private
specifier|final
name|int
name|op
decl_stmt|;
specifier|public
name|SimpleFilter
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|,
name|int
name|op
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|int
name|getOperation
parameter_list|()
block|{
return|return
name|op
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|toString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|toString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|AND
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"(&"
argument_list|)
expr_stmt|;
name|toString
argument_list|(
name|sb
argument_list|,
operator|(
name|List
operator|)
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|OR
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"(|"
argument_list|)
expr_stmt|;
name|toString
argument_list|(
name|sb
argument_list|,
operator|(
name|List
operator|)
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|NOT
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"(!"
argument_list|)
expr_stmt|;
name|toString
argument_list|(
name|sb
argument_list|,
operator|(
name|List
operator|)
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|EQ
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|toEncodedString
argument_list|(
name|sb
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|LTE
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"<="
argument_list|)
expr_stmt|;
name|toEncodedString
argument_list|(
name|sb
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|GTE
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|">="
argument_list|)
expr_stmt|;
name|toEncodedString
argument_list|(
name|sb
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUBSTRING
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|unparseSubstring
argument_list|(
name|sb
argument_list|,
operator|(
name|List
operator|)
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|PRESENT
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"=*)"
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPROX
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"~="
argument_list|)
expr_stmt|;
name|toEncodedString
argument_list|(
name|sb
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
break|break;
case|case
name|MATCH_ALL
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"(*)"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
specifier|static
name|void
name|toString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|List
name|list
parameter_list|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
name|SimpleFilter
name|sf
init|=
operator|(
name|SimpleFilter
operator|)
name|o
decl_stmt|;
name|sf
operator|.
name|toString
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|toDecodedString
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|startIdx
parameter_list|,
name|int
name|endIdx
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
literal|null
decl_stmt|;
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIdx
init|;
name|i
operator|<
name|endIdx
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|escaped
operator|&&
operator|(
name|c
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
name|endIdx
operator|-
name|startIdx
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|,
name|startIdx
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|escaped
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|escaped
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|sb
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sb
operator|!=
literal|null
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
name|s
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|toEncodedString
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|==
literal|'\\'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'('
operator|)
operator|||
operator|(
name|c
operator|==
literal|')'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'*'
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|SimpleFilter
name|parse
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|int
name|idx
init|=
name|skipWhitespace
argument_list|(
name|filter
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|filter
operator|==
literal|null
operator|)
operator|||
operator|(
name|filter
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>=
name|filter
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null or empty filter."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|!=
literal|'('
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing opening parenthesis: "
operator|+
name|filter
argument_list|)
throw|;
block|}
name|SimpleFilter
name|sf
init|=
literal|null
decl_stmt|;
name|Deque
argument_list|<
name|Object
argument_list|>
name|stack
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isEscaped
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|filter
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only one top-level operation allowed: "
operator|+
name|filter
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isEscaped
operator|&&
operator|(
name|filter
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'('
operator|)
condition|)
block|{
comment|// Skip paren and following whitespace.
name|idx
operator|=
name|skipWhitespace
argument_list|(
name|filter
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'&'
condition|)
block|{
name|int
name|peek
init|=
name|skipWhitespace
argument_list|(
name|filter
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|peek
argument_list|)
operator|==
literal|'('
condition|)
block|{
name|idx
operator|=
name|peek
operator|-
literal|1
expr_stmt|;
name|stack
operator|.
name|addFirst
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|AND
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stack
operator|.
name|addFirst
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'|'
condition|)
block|{
name|int
name|peek
init|=
name|skipWhitespace
argument_list|(
name|filter
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|peek
argument_list|)
operator|==
literal|'('
condition|)
block|{
name|idx
operator|=
name|peek
operator|-
literal|1
expr_stmt|;
name|stack
operator|.
name|addFirst
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|OR
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stack
operator|.
name|addFirst
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'!'
condition|)
block|{
name|int
name|peek
init|=
name|skipWhitespace
argument_list|(
name|filter
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|peek
argument_list|)
operator|==
literal|'('
condition|)
block|{
name|idx
operator|=
name|peek
operator|-
literal|1
expr_stmt|;
name|stack
operator|.
name|addFirst
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|NOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stack
operator|.
name|addFirst
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stack
operator|.
name|addFirst
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isEscaped
operator|&&
operator|(
name|filter
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|')'
operator|)
condition|)
block|{
name|Object
name|top
init|=
name|stack
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|Object
name|next
init|=
name|stack
operator|.
name|peekFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|top
operator|instanceof
name|SimpleFilter
condition|)
block|{
if|if
condition|(
name|next
operator|instanceof
name|SimpleFilter
condition|)
block|{
operator|(
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|SimpleFilter
operator|)
name|next
argument_list|)
operator|.
name|value
operator|)
operator|.
name|add
argument_list|(
name|top
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sf
operator|=
operator|(
name|SimpleFilter
operator|)
name|top
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|next
operator|instanceof
name|SimpleFilter
condition|)
block|{
operator|(
call|(
name|List
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|SimpleFilter
operator|)
name|next
argument_list|)
operator|.
name|value
operator|)
operator|.
name|add
argument_list|(
name|SimpleFilter
operator|.
name|subfilter
argument_list|(
name|filter
argument_list|,
operator|(
name|Integer
operator|)
name|top
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sf
operator|=
name|SimpleFilter
operator|.
name|subfilter
argument_list|(
name|filter
argument_list|,
operator|(
name|Integer
operator|)
name|top
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|isEscaped
operator|=
operator|!
name|isEscaped
operator|&&
operator|(
name|filter
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'\\'
operator|)
expr_stmt|;
block|}
name|idx
operator|=
name|skipWhitespace
argument_list|(
name|filter
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing closing parenthesis: "
operator|+
name|filter
argument_list|)
throw|;
block|}
return|return
name|sf
return|;
block|}
specifier|private
specifier|static
name|SimpleFilter
name|subfilter
parameter_list|(
name|String
name|filter
parameter_list|,
name|int
name|startIdx
parameter_list|,
name|int
name|endIdx
parameter_list|)
block|{
specifier|final
name|String
name|opChars
init|=
literal|"=<>~"
decl_stmt|;
comment|// Determine the ending index of the attribute name.
name|int
name|attrEndIdx
init|=
name|startIdx
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|endIdx
operator|-
name|startIdx
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|filter
operator|.
name|charAt
argument_list|(
name|startIdx
operator|+
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|opChars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|>=
literal|0
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|attrEndIdx
operator|=
name|startIdx
operator|+
name|i
operator|+
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|attrEndIdx
operator|==
name|startIdx
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing attribute name: "
operator|+
name|filter
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
argument_list|)
throw|;
block|}
name|String
name|attr
init|=
name|filter
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|attrEndIdx
argument_list|)
decl_stmt|;
comment|// Skip the attribute name and any following whitespace.
name|startIdx
operator|=
name|skipWhitespace
argument_list|(
name|filter
argument_list|,
name|attrEndIdx
argument_list|)
expr_stmt|;
comment|// Determine the operator type.
name|int
name|op
decl_stmt|;
switch|switch
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|startIdx
argument_list|)
condition|)
block|{
case|case
literal|'='
case|:
name|op
operator|=
name|EQ
expr_stmt|;
name|startIdx
operator|++
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|startIdx
operator|+
literal|1
argument_list|)
operator|!=
literal|'='
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown operator: "
operator|+
name|filter
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
argument_list|)
throw|;
block|}
name|op
operator|=
name|LTE
expr_stmt|;
name|startIdx
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|startIdx
operator|+
literal|1
argument_list|)
operator|!=
literal|'='
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown operator: "
operator|+
name|filter
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
argument_list|)
throw|;
block|}
name|op
operator|=
name|GTE
expr_stmt|;
name|startIdx
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|'~'
case|:
if|if
condition|(
name|filter
operator|.
name|charAt
argument_list|(
name|startIdx
operator|+
literal|1
argument_list|)
operator|!=
literal|'='
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown operator: "
operator|+
name|filter
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
argument_list|)
throw|;
block|}
name|op
operator|=
name|APPROX
expr_stmt|;
name|startIdx
operator|+=
literal|2
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown operator: "
operator|+
name|filter
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
argument_list|)
throw|;
block|}
comment|// Parse value.
name|Object
name|value
init|=
name|toDecodedString
argument_list|(
name|filter
argument_list|,
name|startIdx
argument_list|,
name|endIdx
argument_list|)
decl_stmt|;
comment|// Check if the equality comparison is actually a substring
comment|// or present operation.
if|if
condition|(
name|op
operator|==
name|EQ
condition|)
block|{
name|String
name|valueStr
init|=
name|filter
operator|.
name|substring
argument_list|(
name|startIdx
argument_list|,
name|endIdx
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|parseSubstring
argument_list|(
name|valueStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
operator|&&
operator|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|op
operator|=
name|PRESENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|op
operator|=
name|SUBSTRING
expr_stmt|;
name|value
operator|=
name|values
expr_stmt|;
block|}
block|}
return|return
operator|new
name|SimpleFilter
argument_list|(
name|attr
argument_list|,
name|value
argument_list|,
name|op
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|parseSubstring
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pieces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|value
operator|.
name|length
argument_list|()
decl_stmt|;
name|boolean
name|isSimple
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'*'
operator|||
name|c
operator|==
literal|'\\'
condition|)
block|{
name|isSimple
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isSimple
condition|)
block|{
name|pieces
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|pieces
return|;
block|}
name|StringBuilder
name|ss
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// int kind = SIMPLE; // assume until proven otherwise
name|boolean
name|wasStar
init|=
literal|false
decl_stmt|;
comment|// indicates last piece was a star
name|boolean
name|leftstar
init|=
literal|false
decl_stmt|;
comment|// track if the initial piece is a star
name|boolean
name|rightstar
init|=
literal|false
decl_stmt|;
comment|// track if the final piece is a star
name|int
name|idx
init|=
literal|0
decl_stmt|;
comment|// We assume (sub)strings can contain leading and trailing blanks
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|idx
operator|>=
name|length
condition|)
block|{
if|if
condition|(
name|wasStar
condition|)
block|{
comment|// insert last piece as "" to handle trailing star
name|rightstar
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|pieces
operator|.
name|add
argument_list|(
name|ss
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// accumulate the last piece
comment|// note that in the case of
comment|// (cn=); this might be
comment|// the string "" (!=null)
block|}
name|ss
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// Read the next character and account for escapes.
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|idx
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|escaped
operator|&&
operator|(
name|c
operator|==
literal|'*'
operator|)
condition|)
block|{
comment|// If we have successive '*' characters, then we can
comment|// effectively collapse them by ignoring succeeding ones.
if|if
condition|(
operator|!
name|wasStar
condition|)
block|{
if|if
condition|(
name|ss
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pieces
operator|.
name|add
argument_list|(
name|ss
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// accumulate the pieces
comment|// between '*' occurrences
block|}
name|ss
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// if this is a leading star, then track it
if|if
condition|(
name|pieces
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|leftstar
operator|=
literal|true
expr_stmt|;
block|}
name|wasStar
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|escaped
operator|&&
operator|(
name|c
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|escaped
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|escaped
operator|=
literal|false
expr_stmt|;
name|wasStar
operator|=
literal|false
expr_stmt|;
name|ss
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|leftstar
operator|||
name|rightstar
operator|||
name|pieces
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// insert leading and/or trailing "" to anchor ends
if|if
condition|(
name|rightstar
condition|)
block|{
name|pieces
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|leftstar
condition|)
block|{
name|pieces
operator|.
name|add
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pieces
return|;
block|}
specifier|public
specifier|static
name|void
name|unparseSubstring
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pieces
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pieces
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
name|toEncodedString
argument_list|(
name|sb
argument_list|,
name|pieces
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|compareSubstring
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|pieces
parameter_list|,
name|String
name|s
parameter_list|)
block|{
comment|// Walk the pieces to match the string
comment|// There are implicit stars between each piece,
comment|// and the first and last pieces might be "" to anchor the match.
comment|// assert (pieces.length> 1)
comment|// minimal case is<string>*<string>
name|boolean
name|result
init|=
literal|true
decl_stmt|;
name|int
name|len
init|=
name|pieces
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Special case, if there is only one piece, then
comment|// we must perform an equality test.
if|if
condition|(
name|len
operator|==
literal|1
condition|)
block|{
return|return
name|s
operator|.
name|equals
argument_list|(
name|pieces
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|// Otherwise, check whether the pieces match
comment|// the specified string.
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|String
name|piece
init|=
name|pieces
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// If this is the first piece, then make sure the
comment|// string starts with it.
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|startsWith
argument_list|(
name|piece
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// If this is the last piece, then make sure the
comment|// string ends with it.
if|if
condition|(
name|i
operator|==
operator|(
name|len
operator|-
literal|1
operator|)
condition|)
block|{
name|result
operator|=
name|s
operator|.
name|endsWith
argument_list|(
name|piece
argument_list|)
operator|&&
operator|(
name|s
operator|.
name|length
argument_list|()
operator|>=
operator|(
name|index
operator|+
name|piece
operator|.
name|length
argument_list|()
operator|)
operator|)
expr_stmt|;
break|break;
block|}
comment|// If this is neither the first or last piece, then
comment|// make sure the string contains it.
if|if
condition|(
operator|(
name|i
operator|>
literal|0
operator|)
operator|&&
operator|(
name|i
operator|<
operator|(
name|len
operator|-
literal|1
operator|)
operator|)
condition|)
block|{
name|index
operator|=
name|s
operator|.
name|indexOf
argument_list|(
name|piece
argument_list|,
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// Move string index beyond the matching piece.
name|index
operator|+=
name|piece
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|int
name|skipWhitespace
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|startIdx
parameter_list|)
block|{
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|startIdx
operator|<
name|len
operator|)
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|startIdx
argument_list|)
argument_list|)
condition|)
block|{
name|startIdx
operator|++
expr_stmt|;
block|}
return|return
name|startIdx
return|;
block|}
comment|/**      * Converts a attribute map to a filter. The filter is created by iterating      * over the map's entry set. If ordering of attributes is important (e.g.,      * for hitting attribute indices), then the map's entry set should iterate      * in the desired order. Equality testing is assumed for all attribute types      * other than version ranges, which are handled appropriated. If the attribute      * map is empty, then a filter that matches anything is returned.      *      * @param attrs Map of attributes to convert to a filter.      * @return A filter corresponding to the attributes.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|SimpleFilter
name|convert
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
parameter_list|)
block|{
comment|// Rather than building a filter string to be parsed into a SimpleFilter,
comment|// we will just create the parsed SimpleFilter directly.
name|List
argument_list|<
name|SimpleFilter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|attrs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|attrs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|VersionRange
condition|)
block|{
name|VersionRange
name|vr
init|=
operator|(
name|VersionRange
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|vr
operator|.
name|isOpenFloor
argument_list|()
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|vr
operator|.
name|getFloor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|GTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleFilter
name|not
init|=
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|NOT
argument_list|)
decl_stmt|;
operator|(
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|not
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|add
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|vr
operator|.
name|getFloor
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|LTE
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|not
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vr
operator|.
name|getCeiling
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|vr
operator|.
name|isOpenCeiling
argument_list|()
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|vr
operator|.
name|getCeiling
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|LTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|vr
operator|.
name|getCeiling
argument_list|()
operator|.
name|equals
argument_list|(
name|VersionRange
operator|.
name|INFINITE_VERSION
argument_list|)
condition|)
block|{
name|SimpleFilter
name|not
init|=
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|NOT
argument_list|)
decl_stmt|;
operator|(
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|not
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|add
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|vr
operator|.
name|getCeiling
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|SimpleFilter
operator|.
name|GTE
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|not
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|SimpleFilter
operator|.
name|parseSubstring
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|,
name|SimpleFilter
operator|.
name|SUBSTRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SimpleFilter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SimpleFilter
operator|.
name|EQ
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SimpleFilter
name|sf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filters
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sf
operator|=
name|filters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attrs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sf
operator|=
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
name|filters
argument_list|,
name|SimpleFilter
operator|.
name|AND
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sf
operator|=
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|SimpleFilter
operator|.
name|MATCH_ALL
argument_list|)
expr_stmt|;
block|}
return|return
name|sf
return|;
block|}
block|}
end_class

end_unit

