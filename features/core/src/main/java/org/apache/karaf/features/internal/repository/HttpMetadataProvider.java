begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|JsonReader
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|HttpMetadataProvider
implements|implements
name|MetadataProvider
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HEADER_ACCEPT_ENCODING
init|=
literal|"Accept-Encoding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HEADER_CONTENT_ENCODING
init|=
literal|"Content-Encoding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|GZIP
init|=
literal|"gzip"
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
name|long
name|lastModified
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metadatas
decl_stmt|;
specifier|public
name|HttpMetadataProvider
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|getMetadatas
parameter_list|()
block|{
try|try
block|{
name|HttpURLConnection
operator|.
name|setFollowRedirects
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|con
init|=
operator|(
name|HttpURLConnection
operator|)
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastModified
operator|>
literal|0
condition|)
block|{
name|con
operator|.
name|setIfModifiedSince
argument_list|(
name|lastModified
argument_list|)
expr_stmt|;
block|}
name|con
operator|.
name|setRequestProperty
argument_list|(
name|HEADER_ACCEPT_ENCODING
argument_list|,
name|GZIP
argument_list|)
expr_stmt|;
if|if
condition|(
name|con
operator|.
name|getResponseCode
argument_list|()
operator|==
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
name|lastModified
operator|=
name|con
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|con
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|GZIP
operator|.
name|equals
argument_list|(
name|con
operator|.
name|getHeaderField
argument_list|(
name|HEADER_CONTENT_ENCODING
argument_list|)
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|metadatas
operator|=
name|verify
argument_list|(
name|JsonReader
operator|.
name|read
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|con
operator|.
name|getResponseCode
argument_list|()
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_NOT_MODIFIED
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected http response: "
operator|+
name|con
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" "
operator|+
name|con
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|metadatas
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|verify
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|obj
init|=
name|Map
operator|.
name|class
operator|.
name|cast
argument_list|(
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|obj
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
operator|.
name|class
operator|.
name|cast
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|child
init|=
name|Map
operator|.
name|class
operator|.
name|cast
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|ce
range|:
name|child
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
operator|.
name|class
operator|.
name|cast
argument_list|(
name|ce
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|String
operator|.
name|class
operator|.
name|cast
argument_list|(
name|ce
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
operator|)
name|obj
return|;
block|}
block|}
end_class

end_unit

