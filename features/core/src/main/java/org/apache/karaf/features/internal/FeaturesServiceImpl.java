begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|ConfigFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|RepositoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|region
operator|.
name|persist
operator|.
name|RegionsPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|collections
operator|.
name|CopyOnWriteArrayIdentityList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|FrameworkWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|url
operator|.
name|URLStreamHandlerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_comment
comment|/**  * The Features service implementation.  * Adding a repository url will load the features contained in this repository and  * create dummy sub shells.  When invoked, these commands will prompt the user for  * installing the needed bundles.  */
end_comment

begin_class
specifier|public
class|class
name|FeaturesServiceImpl
implements|implements
name|FeaturesService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_KEY
init|=
literal|"org.apache.karaf.features.configKey"
decl_stmt|;
specifier|public
specifier|static
name|String
name|VERSION_PREFIX
init|=
literal|"version="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FeaturesServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|ConfigurationAdmin
name|configAdmin
decl_stmt|;
specifier|private
name|long
name|resolverTimeout
init|=
literal|5000
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|URI
argument_list|>
name|uris
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|URI
argument_list|,
name|RepositoryImpl
argument_list|>
name|repositories
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|RepositoryImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|features
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|installed
init|=
operator|new
name|HashMap
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|boot
decl_stmt|;
name|AtomicBoolean
name|bootFeaturesInstalled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FeaturesListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayIdentityList
argument_list|<
name|FeaturesListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ThreadLocal
argument_list|<
name|Repository
argument_list|>
name|repo
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Repository
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|EventAdminListener
name|eventAdminListener
decl_stmt|;
specifier|private
name|long
name|refreshTimeout
init|=
literal|5000
decl_stmt|;
specifier|private
name|RegionsPersistence
name|regionsPersistence
decl_stmt|;
specifier|public
name|FeaturesServiceImpl
parameter_list|()
block|{     }
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|ConfigurationAdmin
name|getConfigAdmin
parameter_list|()
block|{
return|return
name|configAdmin
return|;
block|}
specifier|public
name|void
name|setConfigAdmin
parameter_list|(
name|ConfigurationAdmin
name|configAdmin
parameter_list|)
block|{
name|this
operator|.
name|configAdmin
operator|=
name|configAdmin
expr_stmt|;
block|}
specifier|public
name|long
name|getResolverTimeout
parameter_list|()
block|{
return|return
name|resolverTimeout
return|;
block|}
specifier|public
name|void
name|setResolverTimeout
parameter_list|(
name|long
name|resolverTimeout
parameter_list|)
block|{
name|this
operator|.
name|resolverTimeout
operator|=
name|resolverTimeout
expr_stmt|;
block|}
specifier|public
name|long
name|getRefreshTimeout
parameter_list|()
block|{
return|return
name|refreshTimeout
return|;
block|}
specifier|public
name|void
name|setRefreshTimeout
parameter_list|(
name|long
name|refreshTimeout
parameter_list|)
block|{
name|this
operator|.
name|refreshTimeout
operator|=
name|refreshTimeout
expr_stmt|;
block|}
specifier|public
name|RegionsPersistence
name|getRegionsPersistence
parameter_list|()
block|{
return|return
name|regionsPersistence
return|;
block|}
specifier|public
name|void
name|setRegionsPersistence
parameter_list|(
name|RegionsPersistence
name|regionsPersistence
parameter_list|)
block|{
name|this
operator|.
name|regionsPersistence
operator|=
name|regionsPersistence
expr_stmt|;
block|}
specifier|public
name|void
name|registerListener
parameter_list|(
name|FeaturesListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
for|for
control|(
name|Repository
name|repository
range|:
name|listRepositories
argument_list|()
control|)
block|{
name|listener
operator|.
name|repositoryEvent
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repository
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryAdded
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Feature
name|feature
range|:
name|listInstalledFeatures
argument_list|()
control|)
block|{
name|listener
operator|.
name|featureEvent
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|feature
argument_list|,
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregisterListener
parameter_list|(
name|FeaturesListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUrls
parameter_list|(
name|String
name|uris
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|String
index|[]
name|s
init|=
name|uris
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|this
operator|.
name|uris
operator|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|s
control|)
block|{
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|uris
operator|.
name|add
argument_list|(
operator|new
name|URI
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setBoot
parameter_list|(
name|String
name|boot
parameter_list|)
block|{
name|this
operator|.
name|boot
operator|=
name|boot
expr_stmt|;
block|}
comment|/**      * Validate a features repository XML.      *      * @param uri the features repository URI.      */
specifier|public
name|void
name|validateRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|FeatureValidationUtil
operator|.
name|validate
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a features repository.      *      * @param uri the features repository URI.      * @throws Exception in case of adding failure.      */
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a features repository.      *      * @param uri the features repository URI.      * @param install if true, install all features contained in the features repository.      * @throws Exception in case of adding failure.      */
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|install
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|repositories
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|RepositoryImpl
name|repositoryImpl
init|=
name|this
operator|.
name|internalAddRepository
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|saveState
argument_list|()
expr_stmt|;
if|if
condition|(
name|install
condition|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|repositoryImpl
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|installFeature
argument_list|(
name|feature
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|refreshRepository
argument_list|(
name|uri
argument_list|,
name|install
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Refresh a features repository.      *      * @param uri the features repository URI.      * @throws Exception in case of refresh failure.      */
specifier|protected
name|void
name|refreshRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|refreshRepository
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Refresh a features repository.      *      * @param uri the features repository URI.      * @param install if true, install all features in the features repository.      * @throws Exception in case of refresh failure.      */
specifier|protected
name|void
name|refreshRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|install
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|removeRepository
argument_list|(
name|uri
argument_list|,
name|install
argument_list|)
expr_stmt|;
name|addRepository
argument_list|(
name|uri
argument_list|,
name|install
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//get chance to restore previous, fix for KARAF-4
name|restoreRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to refresh features repository "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Add a features repository into the internal container.      *      * @param uri the features repository URI.      * @return the internal<code>RepositoryImpl</code> representation.      * @throws Exception in case of adding failure.      */
specifier|protected
name|RepositoryImpl
name|internalAddRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|validateRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|repositories
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|repo
operator|.
name|load
argument_list|()
expr_stmt|;
name|callListeners
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repo
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryAdded
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|features
operator|=
literal|null
expr_stmt|;
return|return
name|repo
return|;
block|}
comment|/**      * Remove a features repository.      *      * @param uri the features repository URI.      * @throws Exception in case of remove failure.      */
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|removeRepository
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a features repository.      *      * @param uri the features repository URI.      * @param uninstall if true, uninstall all features from the features repository.      * @throws Exception in case of remove failure.      */
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|uninstall
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|repositories
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
name|uninstall
condition|)
block|{
name|RepositoryImpl
name|repositoryImpl
init|=
name|repositories
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|repositoryImpl
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|this
operator|.
name|uninstallFeature
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|internalRemoveRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Remove a features repository from the internal container.      *      * @param uri the features repository URI.      */
specifier|protected
name|void
name|internalRemoveRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|Repository
name|repo
init|=
name|repositories
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|this
operator|.
name|repo
operator|.
name|set
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|callListeners
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repo
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryRemoved
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|features
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Restore a features repository.      *      * @param uri the features repository URI.      * @throws Exception in case of restore failure.      */
specifier|public
name|void
name|restoreRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|repositories
operator|.
name|put
argument_list|(
name|uri
argument_list|,
operator|(
name|RepositoryImpl
operator|)
name|repo
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|callListeners
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repo
operator|.
name|get
argument_list|()
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryAdded
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|features
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Get the list of features repository.      *      * @return the list of features repository.      */
specifier|public
name|Repository
index|[]
name|listRepositories
parameter_list|()
block|{
name|Collection
argument_list|<
name|RepositoryImpl
argument_list|>
name|repos
init|=
name|repositories
operator|.
name|values
argument_list|()
decl_stmt|;
return|return
name|repos
operator|.
name|toArray
argument_list|(
operator|new
name|Repository
index|[
name|repos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|String
name|repoName
parameter_list|)
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|this
operator|.
name|repositories
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|repoName
operator|.
name|equals
argument_list|(
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Install a feature identified by a name.      *      * @param name the name of the feature.      * @throws Exception in case of install failure.      */
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|name
argument_list|,
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
argument_list|)
expr_stmt|;
block|}
comment|/**      * Install a feature identified by a name, including a set of options.      *      * @param name the name of the feature.      * @param options the installation options.      * @throws Exception in case of install failure.      */
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|name
argument_list|,
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Install a feature identified by a name and a version.      *      * @param name the name of the feature.      * @param version the version of the feature.      * @throws Exception in case of install failure.      */
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|name
argument_list|,
name|version
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Install a feature identified by a name and a version, including a set of options.      *      * @param name the name of the feature.      * @param version the version of the feature.      * @param options the installation options.      * @throws Exception in case of install failure.      */
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|Feature
name|f
init|=
name|getFeature
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No feature named '"
operator|+
name|name
operator|+
literal|"' with version '"
operator|+
name|version
operator|+
literal|"' available"
argument_list|)
throw|;
block|}
name|installFeature
argument_list|(
name|f
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Install a feature including a set of options.      *      * @param feature the<code>Feature</code> to install.      * @param options the installation options set.      * @throws Exception in case of install failure.      */
specifier|public
name|void
name|installFeature
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeatures
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|feature
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Install a set of features, including a set of options.      *      * @param features a set of<code>Feature</code>.      * @param options the installation options set.      * @throws Exception in case of install failure.      */
specifier|public
name|void
name|installFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|InstallationState
name|state
init|=
operator|new
name|InstallationState
argument_list|()
decl_stmt|;
name|InstallationState
name|failure
init|=
operator|new
name|InstallationState
argument_list|()
decl_stmt|;
name|boolean
name|verbose
init|=
name|options
operator|.
name|contains
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|Verbose
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Install everything
for|for
control|(
name|Feature
name|f
range|:
name|features
control|)
block|{
name|InstallationState
name|s
init|=
operator|new
name|InstallationState
argument_list|()
decl_stmt|;
try|try
block|{
name|doInstallFeature
argument_list|(
name|s
argument_list|,
name|f
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|doInstallFeatureConditionals
argument_list|(
name|s
argument_list|,
name|f
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|state
operator|.
name|bundleInfos
operator|.
name|putAll
argument_list|(
name|s
operator|.
name|bundleInfos
argument_list|)
expr_stmt|;
name|state
operator|.
name|bundles
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|bundles
argument_list|)
expr_stmt|;
name|state
operator|.
name|features
operator|.
name|putAll
argument_list|(
name|s
operator|.
name|features
argument_list|)
expr_stmt|;
name|state
operator|.
name|installed
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|installed
argument_list|)
expr_stmt|;
comment|//Check if current feature satisfies the conditionals of existing features
for|for
control|(
name|Feature
name|installedFeautre
range|:
name|listInstalledFeatures
argument_list|()
control|)
block|{
for|for
control|(
name|Conditional
name|conditional
range|:
name|installedFeautre
operator|.
name|getConditional
argument_list|()
control|)
block|{
if|if
condition|(
name|dependenciesSatisfied
argument_list|(
name|conditional
operator|.
name|getCondition
argument_list|()
argument_list|,
name|state
argument_list|)
condition|)
block|{
name|doInstallFeatureConditionals
argument_list|(
name|s
argument_list|,
name|installedFeautre
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|state
operator|.
name|bundleInfos
operator|.
name|putAll
argument_list|(
name|s
operator|.
name|bundleInfos
argument_list|)
expr_stmt|;
name|state
operator|.
name|bundles
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|bundles
argument_list|)
expr_stmt|;
name|state
operator|.
name|features
operator|.
name|putAll
argument_list|(
name|s
operator|.
name|features
argument_list|)
expr_stmt|;
name|state
operator|.
name|installed
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|installed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failure
operator|.
name|bundles
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|bundles
argument_list|)
expr_stmt|;
name|failure
operator|.
name|features
operator|.
name|putAll
argument_list|(
name|s
operator|.
name|features
argument_list|)
expr_stmt|;
name|failure
operator|.
name|installed
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|installed
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|ContinueBatchOnFailure
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error when installing feature {}: {}"
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|// Find bundles to refresh
name|boolean
name|print
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|PrintBundlesToRefresh
argument_list|)
decl_stmt|;
name|boolean
name|refresh
init|=
operator|!
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
decl_stmt|;
if|if
condition|(
name|print
operator|||
name|refresh
condition|)
block|{
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundlesToRefresh
init|=
name|findBundlesToRefresh
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|bundlesToRefresh
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
operator|.
name|append
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Bundles to refresh: {}"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundlesToRefresh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|print
condition|)
block|{
if|if
condition|(
name|refresh
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Refreshing bundles "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The following bundles may need to be refreshed: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|refresh
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Refreshing bundles: {}"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|refreshPackages
argument_list|(
name|bundlesToRefresh
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Start all bundles
for|for
control|(
name|Bundle
name|b
range|:
name|state
operator|.
name|bundles
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Starting bundle: {}"
argument_list|,
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|startBundle
argument_list|(
name|state
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
comment|// Clean up for batch
if|if
condition|(
operator|!
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoCleanIfFailure
argument_list|)
condition|)
block|{
name|failure
operator|.
name|installed
operator|.
name|removeAll
argument_list|(
name|state
operator|.
name|bundles
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|failure
operator|.
name|installed
control|)
block|{
try|try
block|{
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
for|for
control|(
name|Feature
name|f
range|:
name|features
control|)
block|{
name|callListeners
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|f
argument_list|,
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|e
range|:
name|state
operator|.
name|features
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|installed
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|saveState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|boolean
name|noCleanIfFailure
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoCleanIfFailure
argument_list|)
decl_stmt|;
name|cleanUpOnFailure
argument_list|(
name|state
argument_list|,
name|failure
argument_list|,
name|noCleanIfFailure
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * Start a bundle.      *      * @param state the current bundle installation state.      * @param bundle the bundle to start.      * @throws Exception in case of start failure.      */
specifier|private
name|void
name|startBundle
parameter_list|(
name|InstallationState
name|state
parameter_list|,
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isFragment
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
comment|// do not start bundles that are persistently stopped
if|if
condition|(
name|state
operator|.
name|installed
operator|.
name|contains
argument_list|(
name|bundle
argument_list|)
operator|||
operator|(
name|bundle
operator|.
name|getState
argument_list|()
operator|!=
name|Bundle
operator|.
name|STARTING
operator|&&
name|bundle
operator|.
name|getState
argument_list|()
operator|!=
name|Bundle
operator|.
name|ACTIVE
operator|&&
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|isPersistentlyStarted
argument_list|()
operator|)
condition|)
block|{
comment|// do no start bundles when user request it
name|Long
name|bundleId
init|=
name|bundle
operator|.
name|getBundleId
argument_list|()
decl_stmt|;
name|BundleInfo
name|bundleInfo
init|=
name|state
operator|.
name|bundleInfos
operator|.
name|get
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleInfo
operator|==
literal|null
operator|||
name|bundleInfo
operator|.
name|isStart
argument_list|()
condition|)
block|{
try|try
block|{
name|bundle
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|be
parameter_list|)
block|{
name|String
name|msg
init|=
name|format
argument_list|(
literal|"Could not start bundle %s in feature(s) %s: %s"
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|,
name|getFeaturesContainingBundleList
argument_list|(
name|bundle
argument_list|)
argument_list|,
name|be
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
argument_list|,
name|be
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isFragment
parameter_list|(
name|Bundle
name|b
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Dictionary
name|d
init|=
name|b
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|fragmentHostHeader
init|=
operator|(
name|String
operator|)
name|d
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
decl_stmt|;
return|return
name|fragmentHostHeader
operator|!=
literal|null
operator|&&
name|fragmentHostHeader
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|private
name|void
name|cleanUpOnFailure
parameter_list|(
name|InstallationState
name|state
parameter_list|,
name|InstallationState
name|failure
parameter_list|,
name|boolean
name|noCleanIfFailure
parameter_list|)
block|{
comment|// cleanup on error
if|if
condition|(
operator|!
name|noCleanIfFailure
condition|)
block|{
comment|// Uninstall everything
for|for
control|(
name|Bundle
name|b
range|:
name|state
operator|.
name|installed
control|)
block|{
try|try
block|{
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
for|for
control|(
name|Bundle
name|b
range|:
name|failure
operator|.
name|installed
control|)
block|{
try|try
block|{
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
else|else
block|{
comment|// Force start of bundles so that they are flagged as persistently started
for|for
control|(
name|Bundle
name|b
range|:
name|state
operator|.
name|installed
control|)
block|{
try|try
block|{
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
specifier|protected
specifier|static
class|class
name|InstallationState
block|{
specifier|final
name|Set
argument_list|<
name|Bundle
argument_list|>
name|installed
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|BundleInfo
argument_list|>
name|bundleInfos
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|BundleInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
block|}
specifier|protected
name|void
name|doInstallFeature
parameter_list|(
name|InstallationState
name|state
parameter_list|,
name|Feature
name|feature
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Installing feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Installing feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Dependency
name|dependency
range|:
name|feature
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|installFeatureDependency
argument_list|(
name|dependency
argument_list|,
name|state
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
name|installFeatureConfigs
argument_list|(
name|feature
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|bundles
init|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleInfo
name|bInfo
range|:
name|resolve
argument_list|(
name|feature
argument_list|)
control|)
block|{
name|Bundle
name|b
init|=
name|installBundleIfNeeded
argument_list|(
name|state
argument_list|,
name|bInfo
argument_list|,
name|feature
operator|.
name|getStartLevel
argument_list|()
argument_list|,
name|verbose
argument_list|)
decl_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|bundleInfos
operator|.
name|put
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|bInfo
argument_list|)
expr_stmt|;
name|String
name|region
init|=
name|feature
operator|.
name|getRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|region
operator|!=
literal|null
operator|&&
name|state
operator|.
name|installed
operator|.
name|contains
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|RegionsPersistence
name|regionsPersistence
init|=
name|getRegionsPersistence
argument_list|()
decl_stmt|;
if|if
condition|(
name|regionsPersistence
operator|!=
literal|null
condition|)
block|{
name|regionsPersistence
operator|.
name|install
argument_list|(
name|b
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find RegionsPersistence service, while installing "
operator|+
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|state
operator|.
name|features
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|bundles
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doInstallFeatureConditionals
parameter_list|(
name|InstallationState
name|state
parameter_list|,
name|Feature
name|feature
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Check conditions of the current feature.
for|for
control|(
name|Conditional
name|conditional
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
if|if
condition|(
name|dependenciesSatisfied
argument_list|(
name|conditional
operator|.
name|getCondition
argument_list|()
argument_list|,
name|state
argument_list|)
condition|)
block|{
name|InstallationState
name|s
init|=
operator|new
name|InstallationState
argument_list|()
decl_stmt|;
name|doInstallFeature
argument_list|(
name|s
argument_list|,
name|conditional
operator|.
name|asFeature
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|state
operator|.
name|bundleInfos
operator|.
name|putAll
argument_list|(
name|s
operator|.
name|bundleInfos
argument_list|)
expr_stmt|;
name|state
operator|.
name|bundles
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|bundles
argument_list|)
expr_stmt|;
name|state
operator|.
name|features
operator|.
name|putAll
argument_list|(
name|s
operator|.
name|features
argument_list|)
expr_stmt|;
name|state
operator|.
name|installed
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|installed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|installFeatureDependency
parameter_list|(
name|Dependency
name|dependency
parameter_list|,
name|InstallationState
name|state
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|Feature
name|fi
init|=
name|getFeatureForDependency
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No feature named '"
operator|+
name|dependency
operator|.
name|getName
argument_list|()
operator|+
literal|"' with version '"
operator|+
name|dependency
operator|.
name|getVersion
argument_list|()
operator|+
literal|"' available"
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|.
name|features
operator|.
name|containsKey
argument_list|(
name|fi
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Feature {} with version {} is already being installed"
argument_list|,
name|fi
operator|.
name|getName
argument_list|()
argument_list|,
name|fi
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doInstallFeature
argument_list|(
name|state
argument_list|,
name|fi
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|installFeatureConfigs
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
for|for
control|(
name|String
name|config
range|:
name|feature
operator|.
name|getConfigurations
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|feature
operator|.
name|getConfigurations
argument_list|()
operator|.
name|get
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|pid
init|=
name|parsePid
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Configuration
name|cfg
init|=
name|findExistingConfiguration
argument_list|(
name|configAdmin
argument_list|,
name|pid
index|[
literal|0
index|]
argument_list|,
name|pid
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cfg
operator|==
literal|null
condition|)
block|{
name|cfg
operator|=
name|createConfiguration
argument_list|(
name|configAdmin
argument_list|,
name|pid
index|[
literal|0
index|]
argument_list|,
name|pid
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|createConfigurationKey
argument_list|(
name|pid
index|[
literal|0
index|]
argument_list|,
name|pid
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CONFIG_KEY
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getBundleLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cfg
operator|.
name|setBundleLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|cfg
operator|.
name|update
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ConfigFileInfo
name|configFile
range|:
name|feature
operator|.
name|getConfigurationFiles
argument_list|()
control|)
block|{
name|installConfigurationFile
argument_list|(
name|configFile
operator|.
name|getLocation
argument_list|()
argument_list|,
name|configFile
operator|.
name|getFinalname
argument_list|()
argument_list|,
name|configFile
operator|.
name|isOverride
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createConfigurationKey
parameter_list|(
name|String
name|pid
parameter_list|,
name|String
name|factoryPid
parameter_list|)
block|{
return|return
name|factoryPid
operator|==
literal|null
condition|?
name|pid
else|:
name|pid
operator|+
literal|"-"
operator|+
name|factoryPid
return|;
block|}
specifier|protected
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|resolve
parameter_list|(
name|Feature
name|feature
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|resolver
init|=
name|feature
operator|.
name|getResolver
argument_list|()
decl_stmt|;
comment|// If no resolver is specified, we expect a list of uris
if|if
condition|(
name|resolver
operator|==
literal|null
operator|||
name|resolver
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|feature
operator|.
name|getBundles
argument_list|()
return|;
block|}
name|boolean
name|optional
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|resolver
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
operator|&&
name|resolver
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
name|resolver
operator|=
name|resolver
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|resolver
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|optional
operator|=
literal|true
expr_stmt|;
block|}
comment|// Else, find the resolver
name|String
name|filter
init|=
literal|"(&("
operator|+
name|Constants
operator|.
name|OBJECTCLASS
operator|+
literal|"="
operator|+
name|Resolver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")(name="
operator|+
name|resolver
operator|+
literal|"))"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
name|ServiceTracker
name|tracker
init|=
operator|new
name|ServiceTracker
argument_list|(
name|bundleContext
argument_list|,
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|optional
condition|)
block|{
name|Resolver
name|r
init|=
operator|(
name|Resolver
operator|)
name|tracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
return|return
name|r
operator|.
name|resolve
argument_list|(
name|feature
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Optional resolver '"
operator|+
name|resolver
operator|+
literal|"' not found, using the default resolver"
argument_list|)
expr_stmt|;
return|return
name|feature
operator|.
name|getBundles
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|Resolver
name|r
init|=
operator|(
name|Resolver
operator|)
name|tracker
operator|.
name|waitForService
argument_list|(
name|resolverTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find required resolver '"
operator|+
name|resolver
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
name|r
operator|.
name|resolve
argument_list|(
name|feature
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|Bundle
argument_list|>
name|findBundlesToRefresh
parameter_list|(
name|InstallationState
name|state
parameter_list|)
block|{
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|bundles
operator|.
name|addAll
argument_list|(
name|findBundlesWithOptionalPackagesToRefresh
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|addAll
argument_list|(
name|findBundlesWithFragmentsToRefresh
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bundles
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Bundle
argument_list|>
name|findBundlesWithFragmentsToRefresh
parameter_list|(
name|InstallationState
name|state
parameter_list|)
block|{
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Bundle
argument_list|>
name|oldBundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|(
name|state
operator|.
name|bundles
argument_list|)
decl_stmt|;
name|oldBundles
operator|.
name|removeAll
argument_list|(
name|state
operator|.
name|installed
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oldBundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|state
operator|.
name|installed
control|)
block|{
name|String
name|hostHeader
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostHeader
operator|!=
literal|null
condition|)
block|{
name|Clause
index|[]
name|clauses
init|=
name|Parser
operator|.
name|parseHeader
argument_list|(
name|hostHeader
argument_list|)
decl_stmt|;
if|if
condition|(
name|clauses
operator|!=
literal|null
operator|&&
name|clauses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Clause
name|path
init|=
name|clauses
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|Bundle
name|hostBundle
range|:
name|oldBundles
control|)
block|{
if|if
condition|(
name|hostBundle
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|ver
init|=
name|path
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ver
operator|!=
literal|null
condition|)
block|{
name|VersionRange
name|v
init|=
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|ver
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
name|hostBundle
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|bundles
operator|.
name|add
argument_list|(
name|hostBundle
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|bundles
operator|.
name|add
argument_list|(
name|hostBundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|bundles
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Bundle
argument_list|>
name|findBundlesWithOptionalPackagesToRefresh
parameter_list|(
name|InstallationState
name|state
parameter_list|)
block|{
comment|// First pass: include all bundles contained in these features
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|(
name|state
operator|.
name|bundles
argument_list|)
decl_stmt|;
name|bundles
operator|.
name|removeAll
argument_list|(
name|state
operator|.
name|installed
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|bundles
return|;
block|}
comment|// Second pass: for each bundle, check if there is any unresolved optional package that could be resolved
name|Map
argument_list|<
name|Bundle
argument_list|,
name|List
argument_list|<
name|Clause
argument_list|>
argument_list|>
name|imports
init|=
operator|new
name|HashMap
argument_list|<
name|Bundle
argument_list|,
name|List
argument_list|<
name|Clause
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Bundle
argument_list|>
name|it
init|=
name|bundles
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Bundle
name|b
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|importsStr
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|IMPORT_PACKAGE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|importsList
init|=
name|getOptionalImports
argument_list|(
name|importsStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|importsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|imports
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|importsList
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|bundles
return|;
block|}
comment|// Third pass: compute a list of packages that are exported by our bundles and see if
comment|//             some exported packages can be wired to the optional imports
name|List
argument_list|<
name|Clause
argument_list|>
name|exports
init|=
operator|new
name|ArrayList
argument_list|<
name|Clause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|state
operator|.
name|installed
control|)
block|{
name|String
name|exportsStr
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|exportsStr
operator|!=
literal|null
condition|)
block|{
name|Clause
index|[]
name|exportsList
init|=
name|Parser
operator|.
name|parseHeader
argument_list|(
name|exportsStr
argument_list|)
decl_stmt|;
name|exports
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|exportsList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Bundle
argument_list|>
name|it
init|=
name|bundles
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Bundle
name|b
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|importsList
init|=
name|imports
operator|.
name|get
argument_list|(
name|b
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Clause
argument_list|>
name|itpi
init|=
name|importsList
operator|.
name|iterator
argument_list|()
init|;
name|itpi
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Clause
name|pi
init|=
name|itpi
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|matching
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Clause
name|pe
range|:
name|exports
control|)
block|{
if|if
condition|(
name|pi
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pe
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|evStr
init|=
name|pe
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
name|String
name|ivStr
init|=
name|pi
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
name|Version
name|exported
init|=
name|evStr
operator|!=
literal|null
condition|?
name|Version
operator|.
name|parseVersion
argument_list|(
name|evStr
argument_list|)
else|:
name|Version
operator|.
name|emptyVersion
decl_stmt|;
name|VersionRange
name|imported
init|=
name|ivStr
operator|!=
literal|null
condition|?
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|ivStr
argument_list|)
else|:
name|VersionRange
operator|.
name|ANY_VERSION
decl_stmt|;
if|if
condition|(
name|imported
operator|.
name|contains
argument_list|(
name|exported
argument_list|)
condition|)
block|{
name|matching
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|matching
condition|)
block|{
name|itpi
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|importsList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Refeshing bundle {} ({}) to solve the following optional imports"
argument_list|,
name|b
operator|.
name|getSymbolicName
argument_list|()
argument_list|,
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Clause
name|p
range|:
name|importsList
control|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"    {}"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|bundles
return|;
block|}
comment|/*      * Get the list of optional imports from an OSGi Import-Package string      */
specifier|protected
name|List
argument_list|<
name|Clause
argument_list|>
name|getOptionalImports
parameter_list|(
name|String
name|importsStr
parameter_list|)
block|{
name|Clause
index|[]
name|imports
init|=
name|Parser
operator|.
name|parseHeader
argument_list|(
name|importsStr
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|Clause
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Clause
name|anImport
range|:
name|imports
control|)
block|{
name|String
name|resolution
init|=
name|anImport
operator|.
name|getDirective
argument_list|(
name|Constants
operator|.
name|RESOLUTION_DIRECTIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|RESOLUTION_OPTIONAL
operator|.
name|equals
argument_list|(
name|resolution
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|anImport
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|Bundle
name|installBundleIfNeeded
parameter_list|(
name|InstallationState
name|state
parameter_list|,
name|BundleInfo
name|bundleInfo
parameter_list|,
name|int
name|defaultStartLevel
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
block|{
name|InputStream
name|is
decl_stmt|;
name|String
name|bundleLocation
init|=
name|bundleInfo
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Checking "
operator|+
name|bundleLocation
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|protocol
init|=
name|bundleLocation
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bundleLocation
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForUrlHandler
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|URL
name|bundleUrl
init|=
operator|new
name|URL
argument_list|(
name|bundleLocation
argument_list|)
decl_stmt|;
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|bundleUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|is
operator|.
name|mark
argument_list|(
literal|256
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|JarInputStream
name|jar
init|=
operator|new
name|JarInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|Manifest
name|m
init|=
name|jar
operator|.
name|getManifest
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BundleException
argument_list|(
literal|"Manifest not present in the first entry of the zip "
operator|+
name|bundleLocation
argument_list|)
throw|;
block|}
name|String
name|sn
init|=
name|m
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|BundleException
argument_list|(
literal|"Jar is not a bundle, no Bundle-SymbolicName "
operator|+
name|bundleLocation
argument_list|)
throw|;
block|}
comment|// remove attributes from the symbolic name (like ;blueprint.graceperiod:=false suffix)
name|int
name|attributeIndexSep
init|=
name|sn
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributeIndexSep
operator|!=
operator|-
literal|1
condition|)
block|{
name|sn
operator|=
name|sn
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|attributeIndexSep
argument_list|)
expr_stmt|;
block|}
name|String
name|vStr
init|=
name|m
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|vStr
operator|==
literal|null
condition|?
name|Version
operator|.
name|emptyVersion
else|:
name|Version
operator|.
name|parseVersion
argument_list|(
name|vStr
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|b
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|!=
literal|null
operator|&&
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
condition|)
block|{
name|vStr
operator|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
expr_stmt|;
name|Version
name|bv
init|=
name|vStr
operator|==
literal|null
condition|?
name|Version
operator|.
name|emptyVersion
else|:
name|Version
operator|.
name|parseVersion
argument_list|(
name|vStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|bv
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Found installed bundle: "
operator|+
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found installed bundle: "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|bundles
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
block|}
try|try
block|{
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|URL
argument_list|(
name|bundleLocation
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Installing bundle "
operator|+
name|bundleLocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Installing bundle "
operator|+
name|bundleLocation
argument_list|)
expr_stmt|;
block|}
name|Bundle
name|b
init|=
name|getBundleContext
argument_list|()
operator|.
name|installBundle
argument_list|(
name|bundleLocation
argument_list|,
name|is
argument_list|)
decl_stmt|;
comment|// Define the startLevel for the bundle when defined
name|int
name|ibsl
init|=
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|ibsl
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|ibsl
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|defaultStartLevel
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|defaultStartLevel
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|bundles
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|state
operator|.
name|installed
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|installConfigurationFile
parameter_list|(
name|String
name|fileLocation
parameter_list|,
name|String
name|finalname
parameter_list|,
name|boolean
name|override
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|IOException
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Checking configuration file "
operator|+
name|fileLocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking configuration file "
operator|+
name|fileLocation
argument_list|)
expr_stmt|;
block|}
name|String
name|basePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
decl_stmt|;
if|if
condition|(
name|finalname
operator|.
name|indexOf
argument_list|(
literal|"${"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//remove any placeholder or variable part, this is not valid.
name|int
name|marker
init|=
name|finalname
operator|.
name|indexOf
argument_list|(
literal|"}"
argument_list|)
decl_stmt|;
name|finalname
operator|=
name|finalname
operator|.
name|substring
argument_list|(
name|marker
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|finalname
operator|=
name|basePath
operator|+
name|File
operator|.
name|separator
operator|+
name|finalname
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|finalname
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|override
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"configFile already exist, don't override it"
argument_list|)
expr_stmt|;
return|return;
block|}
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|fop
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|URL
argument_list|(
name|fileLocation
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|parentFile
init|=
name|file
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentFile
operator|!=
literal|null
condition|)
name|parentFile
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|fop
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|int
name|bytesRead
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|bytesRead
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|fop
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fop
operator|!=
literal|null
condition|)
block|{
name|fop
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fop
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|versions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|installed
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|versions
operator|.
name|add
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|versions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Feature named '"
operator|+
name|name
operator|+
literal|"' is not installed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|versions
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Feature named '"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"' has multiple versions installed ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|versions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|versions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"). Please specify the version to uninstall."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|uninstallFeature
argument_list|(
name|name
argument_list|,
name|versions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Feature
name|feature
init|=
name|getFeature
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|==
literal|null
operator|||
operator|!
name|installed
operator|.
name|containsKey
argument_list|(
name|feature
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Feature named '"
operator|+
name|name
operator|+
literal|"' with version '"
operator|+
name|version
operator|+
literal|"' is not installed"
argument_list|)
throw|;
block|}
comment|// Grab all the bundles installed by this feature
comment|// and remove all those who will still be in use.
comment|// This gives this list of bundles to uninstall.
name|Set
argument_list|<
name|Long
argument_list|>
name|bundles
init|=
name|installed
operator|.
name|remove
argument_list|(
name|feature
argument_list|)
decl_stmt|;
comment|//Also remove bundles installed as conditionals
for|for
control|(
name|Conditional
name|conditional
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|bundles
operator|.
name|addAll
argument_list|(
name|installed
operator|.
name|remove
argument_list|(
name|conditional
operator|.
name|asFeature
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Set
argument_list|<
name|Long
argument_list|>
name|b
range|:
name|installed
operator|.
name|values
argument_list|()
control|)
block|{
name|bundles
operator|.
name|removeAll
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|long
name|bundleId
range|:
name|bundles
control|)
block|{
name|Bundle
name|b
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
block|}
name|refreshPackages
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|callListeners
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|feature
argument_list|,
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureUninstalled
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Feature
index|[]
name|listFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureWithDifferentVersion
range|:
name|getFeatures
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureWithDifferentVersion
operator|.
name|values
argument_list|()
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Feature
index|[]
name|listInstalledFeatures
parameter_list|()
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|result
init|=
name|installed
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isInstalled
parameter_list|(
name|Feature
name|f
parameter_list|)
block|{
return|return
name|installed
operator|.
name|containsKey
argument_list|(
name|f
argument_list|)
return|;
block|}
specifier|public
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getFeature
argument_list|(
name|name
argument_list|,
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
argument_list|)
return|;
block|}
specifier|public
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|version
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
name|getFeatures
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|versions
operator|==
literal|null
operator|||
name|versions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Feature
name|feature
init|=
name|versions
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|Version
name|latest
init|=
operator|new
name|Version
argument_list|(
name|cleanupVersion
argument_list|(
name|version
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|available
range|:
name|versions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Version
name|availableVersion
init|=
operator|new
name|Version
argument_list|(
name|cleanupVersion
argument_list|(
name|available
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableVersion
operator|.
name|compareTo
argument_list|(
name|latest
argument_list|)
operator|>
literal|0
condition|)
block|{
name|feature
operator|=
name|versions
operator|.
name|get
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|latest
operator|=
name|availableVersion
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Version
name|latest
init|=
operator|new
name|Version
argument_list|(
name|cleanupVersion
argument_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
argument_list|)
argument_list|)
decl_stmt|;
name|VersionRange
name|versionRange
init|=
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|available
range|:
name|versions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Version
name|availableVersion
init|=
operator|new
name|Version
argument_list|(
name|cleanupVersion
argument_list|(
name|available
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableVersion
operator|.
name|compareTo
argument_list|(
name|latest
argument_list|)
operator|>
literal|0
operator|&&
name|versionRange
operator|.
name|contains
argument_list|(
name|availableVersion
argument_list|)
condition|)
block|{
name|feature
operator|=
name|versions
operator|.
name|get
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|latest
operator|=
name|availableVersion
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|feature
return|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|features
operator|==
literal|null
condition|)
block|{
comment|//the outer map's key is feature name, the inner map's key is feature version
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Two phase load:
comment|// * first load dependent repositories
for|for
control|(
init|;
condition|;
control|)
block|{
name|boolean
name|newRepo
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Repository
name|repo
range|:
name|listRepositories
argument_list|()
control|)
block|{
for|for
control|(
name|URI
name|uri
range|:
name|repo
operator|.
name|getRepositories
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|repositories
operator|.
name|containsKey
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|internalAddRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|newRepo
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|newRepo
condition|)
block|{
break|break;
block|}
block|}
comment|// * then load all features
for|for
control|(
name|Repository
name|repo
range|:
name|repositories
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|repo
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|versionMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|features
operator|=
name|map
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register EventAdmin listener
name|EventAdminListener
name|listener
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.bundles.service.event.EventAdmin"
argument_list|)
expr_stmt|;
name|listener
operator|=
operator|new
name|EventAdminListener
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore, if the EventAdmin package is not available, just don't use it
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"EventAdmin package is not available, just don't use it"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|eventAdminListener
operator|=
name|listener
expr_stmt|;
comment|// Load State
if|if
condition|(
operator|!
name|loadState
argument_list|()
condition|)
block|{
if|if
condition|(
name|uris
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URI
name|uri
range|:
name|uris
control|)
block|{
try|try
block|{
name|internalAddRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|format
argument_list|(
literal|"Unable to add features repository %s at startup"
argument_list|,
name|uri
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|saveState
argument_list|()
expr_stmt|;
block|}
comment|// Install boot features
if|if
condition|(
name|boot
operator|!=
literal|null
operator|&&
operator|!
name|bootFeaturesInstalled
operator|.
name|get
argument_list|()
condition|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// splitting the features
name|String
index|[]
name|list
init|=
name|boot
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|list
control|)
block|{
name|f
operator|=
name|f
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|featureVersion
init|=
literal|null
decl_stmt|;
comment|// first we split the parts of the feature string to gain access to the version info
comment|// if specified
name|String
index|[]
name|parts
init|=
name|f
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|String
name|featureName
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
comment|// if the part starts with "version=" it contains the version info
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|VERSION_PREFIX
argument_list|)
condition|)
block|{
name|featureVersion
operator|=
name|part
operator|.
name|substring
argument_list|(
name|VERSION_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|featureVersion
operator|==
literal|null
condition|)
block|{
comment|// no version specified - use default version
name|featureVersion
operator|=
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
expr_stmt|;
block|}
try|try
block|{
comment|// try to grab specific feature version
name|Feature
name|feature
init|=
name|getFeature
argument_list|(
name|featureName
argument_list|,
name|featureVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error installing boot feature "
operator|+
name|f
operator|+
literal|": feature not found"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error installing boot feature "
operator|+
name|f
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|installFeatures
argument_list|(
name|features
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|NoCleanIfFailure
argument_list|,
name|Option
operator|.
name|ContinueBatchOnFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error installing boot features"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|bootFeaturesInstalled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|uris
operator|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|(
name|repositories
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|repositories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|internalRemoveRepository
argument_list|(
name|repositories
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|refreshPackages
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|Object
name|refreshLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|FrameworkWiring
name|wiring
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|adapt
argument_list|(
name|FrameworkWiring
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiring
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|refreshLock
init|)
block|{
name|wiring
operator|.
name|refreshBundles
argument_list|(
name|bundles
argument_list|,
operator|new
name|FrameworkListener
argument_list|()
block|{
specifier|public
name|void
name|frameworkEvent
parameter_list|(
name|FrameworkEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|FrameworkEvent
operator|.
name|PACKAGES_REFRESHED
condition|)
block|{
synchronized|synchronized
init|(
name|refreshLock
init|)
block|{
name|refreshLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|refreshLock
operator|.
name|wait
argument_list|(
name|refreshTimeout
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
index|[]
name|parsePid
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|int
name|n
init|=
name|pid
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|String
name|factoryPid
init|=
name|pid
operator|.
name|substring
argument_list|(
name|n
operator|+
literal|1
argument_list|)
decl_stmt|;
name|pid
operator|=
name|pid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|pid
block|,
name|factoryPid
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|pid
block|,
literal|null
block|}
return|;
block|}
block|}
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|(
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|,
name|String
name|pid
parameter_list|,
name|String
name|factoryPid
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
if|if
condition|(
name|factoryPid
operator|!=
literal|null
condition|)
block|{
return|return
name|configurationAdmin
operator|.
name|createFactoryConfiguration
argument_list|(
name|pid
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|configurationAdmin
operator|.
name|getConfiguration
argument_list|(
name|pid
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Configuration
name|findExistingConfiguration
parameter_list|(
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|,
name|String
name|pid
parameter_list|,
name|String
name|factoryPid
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|String
name|filter
decl_stmt|;
if|if
condition|(
name|factoryPid
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
literal|"("
operator|+
name|Constants
operator|.
name|SERVICE_PID
operator|+
literal|"="
operator|+
name|pid
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|String
name|key
init|=
name|createConfigurationKey
argument_list|(
name|pid
argument_list|,
name|factoryPid
argument_list|)
decl_stmt|;
name|filter
operator|=
literal|"("
operator|+
name|CONFIG_KEY
operator|+
literal|"="
operator|+
name|key
operator|+
literal|")"
expr_stmt|;
block|}
name|Configuration
index|[]
name|configurations
init|=
name|configurationAdmin
operator|.
name|listConfigurations
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurations
operator|!=
literal|null
operator|&&
name|configurations
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|configurations
index|[
literal|0
index|]
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|saveState
parameter_list|()
block|{
try|try
block|{
name|File
name|file
init|=
name|bundleContext
operator|.
name|getDataFile
argument_list|(
literal|"FeaturesServiceState.properties"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|saveSet
argument_list|(
name|props
argument_list|,
literal|"repositories."
argument_list|,
name|repositories
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|saveMap
argument_list|(
name|props
argument_list|,
literal|"features."
argument_list|,
name|installed
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"bootFeaturesInstalled"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|bootFeaturesInstalled
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"FeaturesService State"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error persisting FeaturesService state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|loadState
parameter_list|()
block|{
try|try
block|{
name|File
name|file
init|=
name|bundleContext
operator|.
name|getDataFile
argument_list|(
literal|"FeaturesServiceState.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|URI
argument_list|>
name|repositories
init|=
name|loadSet
argument_list|(
name|props
argument_list|,
literal|"repositories."
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|repo
range|:
name|repositories
control|)
block|{
try|try
block|{
name|internalAddRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|format
argument_list|(
literal|"Unable to add features repository %s at startup"
argument_list|,
name|repo
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|installed
operator|=
name|loadMap
argument_list|(
name|props
argument_list|,
literal|"features."
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|installed
operator|.
name|keySet
argument_list|()
control|)
block|{
name|callListeners
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|f
argument_list|,
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bootFeaturesInstalled
operator|.
name|set
argument_list|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
literal|"bootFeaturesInstalled"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error loading FeaturesService state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|saveSet
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Set
argument_list|<
name|URI
argument_list|>
name|set
parameter_list|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|props
operator|.
name|clear
argument_list|()
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|"item."
operator|+
name|i
argument_list|,
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|URI
argument_list|>
name|loadSet
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|l
init|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|countStr
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"count"
argument_list|)
decl_stmt|;
if|if
condition|(
name|countStr
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|countStr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|add
argument_list|(
name|URI
operator|.
name|create
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prefix
operator|+
literal|"item."
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
specifier|protected
name|void
name|saveMap
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Map
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Feature
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|createValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|prefix
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|loadMap
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Feature
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Enumeration
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|set
init|=
name|readValue
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|valueOf
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|protected
name|String
name|createValue
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|set
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
range|:
name|set
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|readValue
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|String
name|str
range|:
name|val
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
specifier|protected
name|void
name|callListeners
parameter_list|(
name|FeatureEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventAdminListener
operator|!=
literal|null
condition|)
block|{
name|eventAdminListener
operator|.
name|featureEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeaturesListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|featureEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|callListeners
parameter_list|(
name|RepositoryEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventAdminListener
operator|!=
literal|null
condition|)
block|{
name|eventAdminListener
operator|.
name|repositoryEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeaturesListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|repositoryEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|Pattern
name|fuzzyVersion
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)(\\.(\\d+)(\\.(\\d+))?)?([^a-zA-Z0-9](.*))?"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
specifier|static
name|Pattern
name|fuzzyModifier
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+[.-])*(.*)"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
comment|/**      * Clean up version parameters. Other builders use more fuzzy definitions of      * the version syntax. This method cleans up such a version to match an OSGi      * version.      *      * @param version possibly bundles-non-compliant version      * @return osgi compliant version      */
specifier|static
specifier|public
name|String
name|cleanupVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|fuzzyVersion
operator|.
name|matcher
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|d1
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|d2
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|d3
init|=
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|qualifier
init|=
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|d1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d2
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|d2
argument_list|)
expr_stmt|;
if|if
condition|(
name|d3
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|d3
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|cleanupModifier
argument_list|(
name|result
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|".0."
argument_list|)
expr_stmt|;
name|cleanupModifier
argument_list|(
name|result
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|qualifier
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|".0.0."
argument_list|)
expr_stmt|;
name|cleanupModifier
argument_list|(
name|result
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
name|version
return|;
block|}
specifier|static
name|void
name|cleanupModifier
parameter_list|(
name|StringBuffer
name|result
parameter_list|,
name|String
name|modifier
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|fuzzyModifier
operator|.
name|matcher
argument_list|(
name|modifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
name|modifier
operator|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifier
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|modifier
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
operator|||
name|c
operator|==
literal|'_'
operator|||
name|c
operator|==
literal|'-'
condition|)
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|Feature
argument_list|>
name|getFeaturesContainingBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureMap
range|:
name|this
operator|.
name|getFeatures
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|BundleInfo
name|bi
range|:
name|f
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
name|bi
operator|.
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|features
return|;
block|}
specifier|private
name|String
name|getFeaturesContainingBundleList
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|getFeaturesContainingBundle
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Feature
argument_list|>
name|iter
init|=
name|features
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Feature
name|feature
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Returns the {@link Feature} that matches the {@link Dependency}.      * @param dependency      * @return      * @throws Exception      */
specifier|private
name|Feature
name|getFeatureForDependency
parameter_list|(
name|Dependency
name|dependency
parameter_list|)
throws|throws
name|Exception
block|{
name|VersionRange
name|range
init|=
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|?
name|VersionRange
operator|.
name|ANY_VERSION
else|:
operator|new
name|VersionRange
argument_list|(
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Feature
name|fi
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|installed
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Version
name|v
init|=
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|v
argument_list|)
condition|)
block|{
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|fi
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|<
literal|0
condition|)
block|{
name|fi
operator|=
name|f
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|avail
init|=
name|getFeatures
argument_list|()
operator|.
name|get
argument_list|(
name|dependency
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|avail
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|avail
operator|.
name|values
argument_list|()
control|)
block|{
name|Version
name|v
init|=
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|v
argument_list|)
condition|)
block|{
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|fi
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|<
literal|0
condition|)
block|{
name|fi
operator|=
name|f
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|fi
return|;
block|}
comment|/**      * Estimates if the {@link List} of {@link Dependency} is satisfied.      * The method will look into {@link Feature}s that are already installed or now being installed (if {@link InstallationState} is provided (not null)).      * @param dependencies      * @param state      * @return      */
specifier|private
name|boolean
name|dependenciesSatisfied
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Dependency
argument_list|>
name|dependencies
parameter_list|,
name|InstallationState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|satisfied
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Dependency
name|dep
range|:
name|dependencies
control|)
block|{
name|Feature
name|f
init|=
name|getFeatureForDependency
argument_list|(
name|dep
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
operator|&&
operator|!
name|isInstalled
argument_list|(
name|f
argument_list|)
operator|&&
operator|(
name|state
operator|!=
literal|null
operator|&&
operator|!
name|state
operator|.
name|features
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|f
argument_list|)
operator|)
condition|)
block|{
name|satisfied
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|satisfied
return|;
block|}
comment|/**      * Will wait for the {@link URLStreamHandlerService} service for the specified protocol to be registered.      * @param protocol      */
specifier|private
name|void
name|waitForUrlHandler
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
try|try
block|{
name|Filter
name|filter
init|=
name|bundleContext
operator|.
name|createFilter
argument_list|(
literal|"(&("
operator|+
name|Constants
operator|.
name|OBJECTCLASS
operator|+
literal|"="
operator|+
name|URLStreamHandlerService
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")(url.handler.protocol="
operator|+
name|protocol
operator|+
literal|"))"
argument_list|)
decl_stmt|;
name|ServiceTracker
argument_list|<
name|URLStreamHandlerService
argument_list|,
name|URLStreamHandlerService
argument_list|>
name|urlHandlerTracker
init|=
operator|new
name|ServiceTracker
argument_list|<
name|URLStreamHandlerService
argument_list|,
name|URLStreamHandlerService
argument_list|>
argument_list|(
name|bundleContext
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|urlHandlerTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|urlHandlerTracker
operator|.
name|waitForService
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Interrupted while waiting for URL handler for protocol {}."
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|urlHandlerTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error creating service tracker."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

