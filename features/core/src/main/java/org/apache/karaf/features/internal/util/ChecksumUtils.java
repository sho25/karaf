begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ChecksumUtils
block|{
specifier|private
name|ChecksumUtils
parameter_list|()
block|{     }
comment|/**      * Compute a cheksum for the file or directory that consists of the name, length and the last modified date      * for a file and its children in case of a directory      *      * @param is the input stream      * @return a checksum identifying any change      */
specifier|public
specifier|static
name|long
name|checksum
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|l
decl_stmt|;
while|while
condition|(
operator|(
name|l
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|crc
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
return|return
name|crc
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|CRCInputStream
extends|extends
name|FilterInputStream
block|{
specifier|private
specifier|final
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
specifier|public
name|CRCInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getCRC
parameter_list|()
block|{
return|return
name|crc
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|int
name|nb
init|=
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|nb
operator|==
literal|1
condition|?
name|b
index|[
literal|0
index|]
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nb
init|=
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|nb
operator|>
literal|0
condition|)
block|{
name|crc
operator|.
name|update
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|nb
argument_list|)
expr_stmt|;
block|}
return|return
name|nb
return|;
block|}
block|}
block|}
end_class

end_unit

