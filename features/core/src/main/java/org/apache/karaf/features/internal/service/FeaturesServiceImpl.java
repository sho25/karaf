begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|RepositoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
operator|.
name|ResourceComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
operator|.
name|SubsystemResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|ChecksumUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|Macro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|collections
operator|.
name|CopyOnWriteArrayIdentityList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionFilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|FrameworkWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|Util
operator|.
name|getSymbolicName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|Util
operator|.
name|getVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|addToMapSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|copyMapSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|removeFromMapSet
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|FeaturesServiceImpl
implements|implements
name|FeaturesService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROOT_REGION
init|=
literal|"root"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_SNAPSHOTS_NONE
init|=
literal|"none"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_SNAPSHOTS_CRC
init|=
literal|"crc"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UPDATE_SNAPSHOTS_ALWAYS
init|=
literal|"always"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_UPDATE_SNAPSHOTS
init|=
name|UPDATE_SNAPSHOTS_CRC
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEATURE_RESOLUTION_RANGE
init|=
literal|"${range;[====,====]}"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_BUNDLE_UPDATE_RANGE
init|=
literal|"${range;[==,=+)}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FeaturesServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT
init|=
literal|"SNAPSHOT"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MAVEN
init|=
literal|"mvn:"
decl_stmt|;
comment|/**      * Our bundle.      * We use it to check bundle operations affecting our own bundle.      */
specifier|private
specifier|final
name|Bundle
name|bundle
decl_stmt|;
comment|/**      * The system bundle context.      * For all bundles related operations, we use the system bundle context      * to allow this bundle to be stopped and still allow the deployment to      * take place.      */
specifier|private
specifier|final
name|BundleContext
name|systemBundleContext
decl_stmt|;
comment|/**      * Used to load and save the {@link State} of this service.      */
specifier|private
specifier|final
name|StateStorage
name|storage
decl_stmt|;
specifier|private
specifier|final
name|FeatureFinder
name|featureFinder
decl_stmt|;
specifier|private
specifier|final
name|EventAdminListener
name|eventAdminListener
decl_stmt|;
specifier|private
specifier|final
name|FeatureConfigInstaller
name|configInstaller
decl_stmt|;
specifier|private
specifier|final
name|RegionDigraph
name|digraph
decl_stmt|;
specifier|private
specifier|final
name|String
name|overrides
decl_stmt|;
comment|/**      * Range to use when a version is specified on a feature dependency.      * The default is {@link FeaturesServiceImpl#DEFAULT_FEATURE_RESOLUTION_RANGE}      */
specifier|private
specifier|final
name|String
name|featureResolutionRange
decl_stmt|;
comment|/**      * Range to use when verifying if a bundle should be updated or      * new bundle installed.      * The default is {@link FeaturesServiceImpl#DEFAULT_BUNDLE_UPDATE_RANGE}      */
specifier|private
specifier|final
name|String
name|bundleUpdateRange
decl_stmt|;
comment|/**      * Use CRC to check snapshot bundles and update them if changed.      * Either:      *   - none : never update snapshots      *   - always : always update snapshots      *   - crc : use CRC to detect changes      */
specifier|private
specifier|final
name|String
name|updateSnaphots
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|FeaturesListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayIdentityList
argument_list|<
name|FeaturesListener
argument_list|>
argument_list|()
decl_stmt|;
comment|// Synchronized on lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|State
name|state
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|repositoryCache
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|featureCache
decl_stmt|;
specifier|public
name|FeaturesServiceImpl
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleContext
name|systemBundleContext
parameter_list|,
name|StateStorage
name|storage
parameter_list|,
name|FeatureFinder
name|featureFinder
parameter_list|,
name|EventAdminListener
name|eventAdminListener
parameter_list|,
name|FeatureConfigInstaller
name|configInstaller
parameter_list|,
name|RegionDigraph
name|digraph
parameter_list|,
name|String
name|overrides
parameter_list|,
name|String
name|featureResolutionRange
parameter_list|,
name|String
name|bundleUpdateRange
parameter_list|,
name|String
name|updateSnaphots
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|systemBundleContext
operator|=
name|systemBundleContext
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
name|this
operator|.
name|featureFinder
operator|=
name|featureFinder
expr_stmt|;
name|this
operator|.
name|eventAdminListener
operator|=
name|eventAdminListener
expr_stmt|;
name|this
operator|.
name|configInstaller
operator|=
name|configInstaller
expr_stmt|;
name|this
operator|.
name|digraph
operator|=
name|digraph
expr_stmt|;
name|this
operator|.
name|overrides
operator|=
name|overrides
expr_stmt|;
name|this
operator|.
name|featureResolutionRange
operator|=
name|featureResolutionRange
expr_stmt|;
name|this
operator|.
name|bundleUpdateRange
operator|=
name|bundleUpdateRange
expr_stmt|;
name|this
operator|.
name|updateSnaphots
operator|=
name|updateSnaphots
expr_stmt|;
name|loadState
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// State support
comment|//
specifier|protected
name|void
name|loadState
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|storage
operator|.
name|load
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error loading FeaturesService state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|saveState
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// Make sure we don't store bundle checksums if
comment|// it has been disabled through configadmin
comment|// so that we don't keep out-of-date checksums.
if|if
condition|(
operator|!
name|UPDATE_SNAPSHOTS_CRC
operator|.
name|equalsIgnoreCase
argument_list|(
name|updateSnaphots
argument_list|)
condition|)
block|{
name|state
operator|.
name|bundleChecksums
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|storage
operator|.
name|save
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error saving FeaturesService state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isBootDone
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|state
operator|.
name|bootDone
operator|.
name|get
argument_list|()
return|;
block|}
block|}
name|void
name|bootDone
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|state
operator|.
name|bootDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
comment|//
comment|// Listeners support
comment|//
specifier|public
name|void
name|registerListener
parameter_list|(
name|FeaturesListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|repositories
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|installedFeatures
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repositories
operator|.
name|addAll
argument_list|(
name|state
operator|.
name|repositories
argument_list|)
expr_stmt|;
name|installedFeatures
operator|.
name|addAll
argument_list|(
name|state
operator|.
name|installedFeatures
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|uri
range|:
name|repositories
control|)
block|{
name|Repository
name|repository
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|listener
operator|.
name|repositoryEvent
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repository
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryAdded
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|id
range|:
name|installedFeatures
control|)
block|{
name|Feature
name|feature
init|=
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|listener
operator|.
name|featureEvent
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|feature
argument_list|,
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error notifying listener about the current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregisterListener
parameter_list|(
name|FeaturesListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|callListeners
parameter_list|(
name|FeatureEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventAdminListener
operator|!=
literal|null
condition|)
block|{
name|eventAdminListener
operator|.
name|featureEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeaturesListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|featureEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|callListeners
parameter_list|(
name|RepositoryEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventAdminListener
operator|!=
literal|null
condition|)
block|{
name|eventAdminListener
operator|.
name|repositoryEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeaturesListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|repositoryEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Feature Finder support
comment|//
annotation|@
name|Override
specifier|public
name|URI
name|getRepositoryUriFor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|featureFinder
operator|.
name|getUriFor
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRepositoryNames
parameter_list|()
block|{
return|return
name|featureFinder
operator|.
name|getNames
argument_list|()
return|;
block|}
comment|//
comment|// Repositories support
comment|//
specifier|public
name|Repository
name|loadRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|addRepository
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|install
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|install
condition|)
block|{
comment|// TODO: implement
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
name|Repository
name|repository
init|=
name|loadRepository
argument_list|(
name|uri
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// Clean cache
name|repositoryCache
operator|.
name|put
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|featureCache
operator|=
literal|null
expr_stmt|;
comment|// Add repo
if|if
condition|(
operator|!
name|state
operator|.
name|repositories
operator|.
name|add
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|saveState
argument_list|()
expr_stmt|;
block|}
name|callListeners
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repository
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryAdded
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|removeRepository
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|uninstall
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: check we don't have any feature installed from this repository
name|Repository
name|repo
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// Remove repo
if|if
condition|(
operator|!
name|state
operator|.
name|repositories
operator|.
name|remove
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Clean cache
name|featureCache
operator|=
literal|null
expr_stmt|;
name|repo
operator|=
name|repositoryCache
operator|.
name|get
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Repository
name|rep
init|=
name|repositoryCache
operator|.
name|remove
argument_list|(
name|toRemove
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URI
name|u
range|:
name|rep
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|saveState
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|repo
operator|=
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|callListeners
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repo
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryRemoved
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Repository
index|[]
name|listRepositories
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure the cache is loaded
name|getFeatures
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|repositoryCache
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Repository
index|[
name|repositoryCache
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Repository
index|[]
name|listRequiredRepositories
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure the cache is loaded
name|getFeatures
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
init|=
operator|new
name|ArrayList
argument_list|<
name|Repository
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|entry
range|:
name|repositoryCache
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|state
operator|.
name|repositories
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|repos
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|repos
operator|.
name|toArray
argument_list|(
operator|new
name|Repository
index|[
name|repos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cache is loaded
name|getFeatures
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|this
operator|.
name|repositoryCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|//
comment|// Features support
comment|//
specifier|public
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getFeature
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
name|getFeatures
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|getFeatureMatching
argument_list|(
name|versions
argument_list|,
name|version
argument_list|)
return|;
block|}
specifier|protected
name|Feature
name|getFeatureMatching
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
parameter_list|,
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|version
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
argument_list|)
condition|)
block|{
name|version
operator|=
literal|""
expr_stmt|;
block|}
block|}
else|else
block|{
name|version
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|==
literal|null
operator|||
name|versions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Feature
name|feature
init|=
name|version
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|versions
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|==
literal|null
condition|)
block|{
comment|// Compute version range. If an version has been given, assume exact range
name|VersionRange
name|versionRange
init|=
name|version
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|VersionRange
argument_list|(
name|Version
operator|.
name|emptyVersion
argument_list|)
else|:
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Version
name|latest
init|=
name|Version
operator|.
name|emptyVersion
decl_stmt|;
for|for
control|(
name|String
name|available
range|:
name|versions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Version
name|availableVersion
init|=
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|available
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableVersion
operator|.
name|compareTo
argument_list|(
name|latest
argument_list|)
operator|>=
literal|0
operator|&&
name|versionRange
operator|.
name|contains
argument_list|(
name|availableVersion
argument_list|)
condition|)
block|{
name|feature
operator|=
name|versions
operator|.
name|get
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|latest
operator|=
name|availableVersion
expr_stmt|;
block|}
block|}
block|}
return|return
name|feature
return|;
block|}
block|}
specifier|public
name|Feature
index|[]
name|listFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureWithDifferentVersion
range|:
name|getFeatures
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureWithDifferentVersion
operator|.
name|values
argument_list|()
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uris
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|featureCache
operator|!=
literal|null
condition|)
block|{
return|return
name|featureCache
return|;
block|}
name|uris
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|state
operator|.
name|repositories
argument_list|)
expr_stmt|;
block|}
comment|//the outer map's key is feature name, the inner map's key is feature version
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Two phase load:
comment|// * first load dependent repositories
name|List
argument_list|<
name|String
argument_list|>
name|toLoad
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|uris
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|toLoad
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|uri
init|=
name|toLoad
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Repository
name|repo
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repo
operator|=
name|repositoryCache
operator|.
name|get
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|RepositoryImpl
name|rep
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|rep
operator|.
name|load
argument_list|()
expr_stmt|;
name|repo
operator|=
name|rep
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repositoryCache
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|URI
name|u
range|:
name|repo
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|toLoad
operator|.
name|add
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repos
operator|=
operator|new
name|ArrayList
argument_list|<
name|Repository
argument_list|>
argument_list|(
name|repositoryCache
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// * then load all features
for|for
control|(
name|Repository
name|repo
range|:
name|repos
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|repo
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versionMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|versionMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|uris
operator|.
name|size
argument_list|()
operator|==
name|state
operator|.
name|repositories
operator|.
name|size
argument_list|()
operator|&&
name|state
operator|.
name|repositories
operator|.
name|containsAll
argument_list|(
name|uris
argument_list|)
condition|)
block|{
name|featureCache
operator|=
name|map
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|//
comment|// Installed features
comment|//
annotation|@
name|Override
specifier|public
name|Feature
index|[]
name|listInstalledFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|allFeatures
init|=
name|getFeatures
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureWithDifferentVersion
range|:
name|allFeatures
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureWithDifferentVersion
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isInstalled
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Feature
index|[]
name|listRequiredFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|allFeatures
init|=
name|getFeatures
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureWithDifferentVersion
range|:
name|allFeatures
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureWithDifferentVersion
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isRequired
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInstalled
parameter_list|(
name|Feature
name|f
parameter_list|)
block|{
name|String
name|id
init|=
name|normalize
argument_list|(
name|f
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|installed
init|=
name|state
operator|.
name|installedFeatures
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
return|return
name|installed
operator|!=
literal|null
operator|&&
name|installed
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRequired
parameter_list|(
name|Feature
name|f
parameter_list|)
block|{
name|String
name|id
init|=
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|features
init|=
name|state
operator|.
name|features
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
return|return
name|features
operator|!=
literal|null
operator|&&
name|features
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
comment|//
comment|// Installation and uninstallation of features
comment|//
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|name
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeatures
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|name
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeatures
argument_list|(
name|features
argument_list|,
name|ROOT_REGION
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeature
argument_list|(
name|name
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeatures
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|name
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeatures
argument_list|(
name|features
argument_list|,
name|ROOT_REGION
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|//
comment|//
comment|//
comment|//   RESOLUTION
comment|//
comment|//
comment|//
annotation|@
name|Override
specifier|public
name|void
name|installFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|String
name|region
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|State
name|state
init|=
name|copyState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|required
init|=
name|copyMapSet
argument_list|(
name|state
operator|.
name|features
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
operator|||
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|region
operator|=
name|ROOT_REGION
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|featuresToAdd
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|featuresMap
init|=
name|getFeatures
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|feature
operator|=
name|normalize
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|feature
operator|.
name|substring
argument_list|(
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Feature
name|f
init|=
name|getFeatureMatching
argument_list|(
name|featuresMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoFailOnFeatureNotFound
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No matching features for "
operator|+
name|feature
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|req
init|=
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|featuresToAdd
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
name|featuresToAdd
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|featuresToAdd
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Adding features: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|featuresToAdd
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|featuresToAdd
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|print
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Verbose
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|fl
init|=
name|required
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|fl
operator|==
literal|null
condition|)
block|{
name|fl
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|required
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|fl
argument_list|)
expr_stmt|;
block|}
name|fl
operator|.
name|addAll
argument_list|(
name|featuresToAdd
argument_list|)
expr_stmt|;
name|doInstallFeaturesInThread
argument_list|(
name|required
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uninstallFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|String
name|region
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|State
name|state
init|=
name|copyState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|required
init|=
name|copyMapSet
argument_list|(
name|state
operator|.
name|features
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
operator|||
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|region
operator|=
name|ROOT_REGION
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fl
init|=
name|required
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|fl
operator|==
literal|null
condition|)
block|{
name|fl
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|required
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|fl
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|featuresToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|feature
range|:
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|features
argument_list|)
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|feature
operator|=
name|normalize
argument_list|(
name|feature
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|endsWith
argument_list|(
literal|"/0.0.0"
argument_list|)
condition|)
block|{
name|String
name|nameSep
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fl
control|)
block|{
if|if
condition|(
name|normalize
argument_list|(
name|f
argument_list|)
operator|.
name|startsWith
argument_list|(
name|nameSep
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|name
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|feature
operator|.
name|substring
argument_list|(
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|req
init|=
name|name
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|toRemove
operator|.
name|retainAll
argument_list|(
name|fl
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Feature named '"
operator|+
name|feature
operator|+
literal|"' is not installed"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|toRemove
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|name
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Feature named '"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"' has multiple versions installed ("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toRemove
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|toRemove
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"). Please specify the version to uninstall."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|featuresToRemove
operator|.
name|addAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
name|featuresToRemove
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|featuresToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Removing features: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|featuresToRemove
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|featuresToRemove
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|print
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Verbose
argument_list|)
argument_list|)
expr_stmt|;
name|fl
operator|.
name|removeAll
argument_list|(
name|featuresToRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|fl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|required
operator|.
name|remove
argument_list|(
name|fl
argument_list|)
expr_stmt|;
block|}
name|doInstallFeaturesInThread
argument_list|(
name|required
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|private
name|State
name|copyState
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|this
operator|.
name|state
operator|.
name|copy
argument_list|()
return|;
block|}
block|}
specifier|protected
name|String
name|normalize
parameter_list|(
name|String
name|feature
parameter_list|)
block|{
if|if
condition|(
operator|!
name|feature
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|feature
operator|+=
literal|"/0.0.0"
expr_stmt|;
block|}
name|int
name|idx
init|=
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|feature
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|name
operator|+
literal|"/"
operator|+
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|version
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Actual deployment needs to be done in a separate thread.      * The reason is that if the console is refreshed, the current thread which is running      * the command may be interrupted while waiting for the refresh to be done, leading      * to bundles not being started after the refresh.      */
specifier|public
name|void
name|doInstallFeaturesInThread
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|features
parameter_list|,
specifier|final
name|State
name|state
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
try|try
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|doInstallFeatures
argument_list|(
name|features
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
operator|(
name|RuntimeException
operator|)
name|t
operator|)
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
operator|(
name|Error
operator|)
name|t
operator|)
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|doInstallFeatures
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|features
parameter_list|,
comment|// all request features
name|State
name|state
parameter_list|,
comment|// current state
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
comment|// installation options
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|noRefreshUnmanaged
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoAutoRefreshUnmanagedBundles
argument_list|)
decl_stmt|;
name|boolean
name|noRefreshManaged
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoAutoRefreshManagedBundles
argument_list|)
decl_stmt|;
name|boolean
name|noRefresh
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
decl_stmt|;
name|boolean
name|noStart
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoAutoStartBundles
argument_list|)
decl_stmt|;
name|boolean
name|verbose
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Verbose
argument_list|)
decl_stmt|;
name|boolean
name|simulate
init|=
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Simulate
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|installed
init|=
name|state
operator|.
name|installedFeatures
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|managed
init|=
name|state
operator|.
name|managedBundles
decl_stmt|;
comment|// Get a list of resolved and unmanaged bundles to use as capabilities during resolution
name|List
argument_list|<
name|BundleRevision
argument_list|>
name|systemBundles
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleRevision
argument_list|>
argument_list|()
decl_stmt|;
name|Bundle
index|[]
name|bundles
init|=
name|systemBundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getState
argument_list|()
operator|>=
name|Bundle
operator|.
name|RESOLVED
condition|)
block|{
name|boolean
name|bm
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Long
argument_list|>
name|m
range|:
name|managed
operator|.
name|values
argument_list|()
control|)
block|{
name|bm
operator||=
name|m
operator|.
name|contains
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bm
condition|)
block|{
name|BundleRevision
name|res
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
name|systemBundles
operator|.
name|add
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Resolve
comment|// TODO: requirements
comment|// TODO: bundles
comment|// TODO: overrides
name|Set
argument_list|<
name|String
argument_list|>
name|overrides
init|=
name|Overrides
operator|.
name|loadOverrides
argument_list|(
name|this
operator|.
name|overrides
argument_list|)
decl_stmt|;
name|Repository
index|[]
name|repositories
init|=
name|listRepositories
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|installed
operator|.
name|containsKey
argument_list|(
name|ROOT_REGION
argument_list|)
condition|)
block|{
name|installed
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SubsystemResolver
name|resolver
init|=
operator|new
name|SubsystemResolver
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|resolution
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|repositories
argument_list|)
argument_list|,
name|features
argument_list|,
name|systemBundles
argument_list|,
name|featureResolutionRange
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Resource
argument_list|>
name|allResources
init|=
name|resolution
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|providers
init|=
name|resolver
operator|.
name|getProviders
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|installedFeatures
init|=
name|getInstalledFeatures
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|installedFeatureIds
init|=
name|getFeatureIds
argument_list|(
name|allResources
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newFeatures
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|installedFeatureIds
argument_list|)
decl_stmt|;
name|newFeatures
operator|.
name|removeAll
argument_list|(
name|installed
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|delFeatures
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|installed
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
argument_list|)
decl_stmt|;
name|delFeatures
operator|.
name|removeAll
argument_list|(
name|installedFeatureIds
argument_list|)
expr_stmt|;
comment|//
comment|// Compute list of installable resources (those with uris)
comment|//
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|resources
init|=
name|resolver
operator|.
name|getBundles
argument_list|()
decl_stmt|;
comment|// Compute information for each bundle
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
name|bundleInfos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|getFeatures
argument_list|(
name|repositories
argument_list|,
name|getFeatureIds
argument_list|(
name|allResources
argument_list|)
argument_list|)
control|)
block|{
for|for
control|(
name|BundleInfo
name|bi
range|:
name|feature
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|BundleInfo
name|oldBi
init|=
name|bundleInfos
operator|.
name|get
argument_list|(
name|bi
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldBi
operator|!=
literal|null
condition|)
block|{
name|bi
operator|=
name|mergeBundleInfo
argument_list|(
name|bi
argument_list|,
name|oldBi
argument_list|)
expr_stmt|;
block|}
name|bundleInfos
operator|.
name|put
argument_list|(
name|bi
operator|.
name|getLocation
argument_list|()
argument_list|,
name|bi
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: handle bundleInfo.isStart()
comment|// Get all resources that will be used to satisfy the old features set
name|Set
argument_list|<
name|Resource
argument_list|>
name|resourceLinkedToOldFeatures
init|=
operator|new
name|HashSet
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|noStart
condition|)
block|{
for|for
control|(
name|Resource
name|resource
range|:
name|resolver
operator|.
name|getFeatures
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|getFeatureId
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|installed
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|addTransitive
argument_list|(
name|resource
argument_list|,
name|resourceLinkedToOldFeatures
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Compute deployment
comment|//
name|Deployment
name|deployment
init|=
name|computeDeployment
argument_list|(
name|resolver
argument_list|,
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|deployment
operator|.
name|regions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"No deployment change."
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//
comment|// Log deployment
comment|//
name|logDeployment
argument_list|(
name|deployment
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
comment|//
comment|// Compute the set of bundles to refresh
comment|//
name|Set
argument_list|<
name|Bundle
argument_list|>
name|toRefresh
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
name|toRefresh
operator|.
name|addAll
argument_list|(
name|regionDeployment
operator|.
name|toDelete
argument_list|)
expr_stmt|;
name|toRefresh
operator|.
name|addAll
argument_list|(
name|regionDeployment
operator|.
name|toUpdate
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|noRefreshManaged
condition|)
block|{
name|int
name|size
decl_stmt|;
do|do
block|{
name|size
operator|=
name|toRefresh
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
comment|// Continue if we already know about this bundle
if|if
condition|(
name|toRefresh
operator|.
name|contains
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Ignore non resolved bundle
name|BundleWiring
name|wiring
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiring
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// Get through the old resolution and flag this bundle
comment|// if it was wired to a bundle to be refreshed
for|for
control|(
name|BundleWire
name|wire
range|:
name|wiring
operator|.
name|getRequiredWires
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|toRefresh
operator|.
name|contains
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
operator|.
name|getBundle
argument_list|()
argument_list|)
condition|)
block|{
name|toRefresh
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Get through the new resolution and flag this bundle
comment|// if it's wired to any new bundle
name|List
argument_list|<
name|Wire
argument_list|>
name|newWires
init|=
name|resolution
operator|.
name|get
argument_list|(
name|wiring
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newWires
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Wire
name|wire
range|:
name|newWires
control|)
block|{
name|Bundle
name|b
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|wire
operator|.
name|getProvider
argument_list|()
operator|instanceof
name|BundleRevision
condition|)
block|{
name|b
operator|=
operator|(
operator|(
name|BundleRevision
operator|)
name|wire
operator|.
name|getProvider
argument_list|()
operator|)
operator|.
name|getBundle
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
name|deployment
operator|.
name|resToBnd
operator|.
name|get
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
operator|||
name|toRefresh
operator|.
name|contains
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|toRefresh
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
do|while
condition|(
name|toRefresh
operator|.
name|size
argument_list|()
operator|>
name|size
condition|)
do|;
block|}
if|if
condition|(
name|noRefreshUnmanaged
condition|)
block|{
name|Set
argument_list|<
name|Bundle
argument_list|>
name|newSet
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|toRefresh
control|)
block|{
for|for
control|(
name|Set
argument_list|<
name|Long
argument_list|>
name|m
range|:
name|managed
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|contains
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
condition|)
block|{
name|newSet
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|toRefresh
operator|=
name|newSet
expr_stmt|;
block|}
if|if
condition|(
name|simulate
condition|)
block|{
if|if
condition|(
operator|!
name|toRefresh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"  Bundles to refresh:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|toRefresh
control|)
block|{
name|print
argument_list|(
literal|"    "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
name|Set
argument_list|<
name|Bundle
argument_list|>
name|toStart
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
comment|//
comment|// Execute deployment
comment|//
comment|// TODO: handle update on the features service itself
name|RegionDeployment
name|rootRegionDeployment
init|=
name|deployment
operator|.
name|regions
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootRegionDeployment
operator|!=
literal|null
operator|&&
operator|(
name|rootRegionDeployment
operator|.
name|toUpdate
operator|.
name|containsKey
argument_list|(
name|bundle
argument_list|)
operator|||
name|rootRegionDeployment
operator|.
name|toDelete
operator|.
name|contains
argument_list|(
name|bundle
argument_list|)
operator|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Updating or uninstalling of the FeaturesService is not supported"
argument_list|)
expr_stmt|;
name|rootRegionDeployment
operator|.
name|toUpdate
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|rootRegionDeployment
operator|.
name|toDelete
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Perform bundle operations
comment|//
comment|//
comment|// Stop bundles by chunks
comment|//
name|Set
argument_list|<
name|Bundle
argument_list|>
name|toStop
init|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
name|toStop
operator|.
name|addAll
argument_list|(
name|regionDeployment
operator|.
name|toUpdate
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|toStop
operator|.
name|addAll
argument_list|(
name|regionDeployment
operator|.
name|toDelete
argument_list|)
expr_stmt|;
block|}
name|removeFragmentsAndBundlesInState
argument_list|(
name|toStop
argument_list|,
name|Bundle
operator|.
name|UNINSTALLED
operator||
name|Bundle
operator|.
name|RESOLVED
operator||
name|Bundle
operator|.
name|STOPPING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"Stopping bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bs
init|=
name|getBundlesToStop
argument_list|(
name|toStop
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bs
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|stop
argument_list|(
name|Bundle
operator|.
name|STOP_TRANSIENT
argument_list|)
expr_stmt|;
name|toStop
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Delete bundles
comment|//
name|boolean
name|hasToDelete
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|hasToDelete
operator|=
operator|!
name|regionDeployment
operator|.
name|toDelete
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|hasToDelete
condition|)
block|{
name|print
argument_list|(
literal|"Uninstalling bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionDeployment
argument_list|>
name|entry
range|:
name|deployment
operator|.
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RegionDeployment
name|regionDeployment
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|regionDeployment
operator|.
name|toDelete
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|removeFromMapSet
argument_list|(
name|managed
argument_list|,
name|name
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Update regions
comment|//
comment|// TODO: this replace the whole digraph with the computed one
comment|// TODO: we need to be smarter and allow user modifications or
comment|// TODO: externally managed regions such as the one managed
comment|// TODO: by aries subsystems
name|RegionDigraph
name|clone
init|=
name|this
operator|.
name|digraph
operator|.
name|copy
argument_list|()
decl_stmt|;
name|RegionDigraph
name|computedDigraph
init|=
name|resolver
operator|.
name|getDigraph
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|r
range|:
name|clone
operator|.
name|getRegions
argument_list|()
control|)
block|{
name|clone
operator|.
name|removeRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flats
init|=
name|resolver
operator|.
name|getFlatSubsystemsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|r
range|:
name|computedDigraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|flats
operator|.
name|get
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|clone
operator|.
name|createRegion
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Region
name|r
range|:
name|computedDigraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
for|for
control|(
name|RegionDigraph
operator|.
name|FilteredRegion
name|fr
range|:
name|computedDigraph
operator|.
name|getEdges
argument_list|(
name|r
argument_list|)
control|)
block|{
name|String
name|rt
init|=
name|flats
operator|.
name|get
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rh
init|=
name|flats
operator|.
name|get
argument_list|(
name|fr
operator|.
name|getRegion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rh
operator|.
name|equals
argument_list|(
name|rt
argument_list|)
condition|)
block|{
name|Region
name|tail
init|=
name|clone
operator|.
name|getRegion
argument_list|(
name|rt
argument_list|)
decl_stmt|;
name|Region
name|head
init|=
name|clone
operator|.
name|getRegion
argument_list|(
name|rh
argument_list|)
decl_stmt|;
name|RegionFilterBuilder
name|rfb
init|=
name|clone
operator|.
name|createRegionFilterBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|fr
operator|.
name|getFilter
argument_list|()
operator|.
name|getSharingPolicy
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Discard osgi.identity namespace
if|if
condition|(
operator|!
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|f
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|rfb
operator|.
name|allow
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|clone
operator|.
name|connect
argument_list|(
name|tail
argument_list|,
name|rfb
operator|.
name|build
argument_list|()
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Spread bundles across regions
name|Region
name|root
init|=
name|clone
operator|.
name|getRegion
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleRevision
name|revision
range|:
name|systemBundles
control|)
block|{
name|root
operator|.
name|addBundle
argument_list|(
name|revision
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Resource
name|resource
range|:
name|resources
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Bundle
name|bundle
init|=
name|deployment
operator|.
name|resToBnd
operator|.
name|get
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|String
name|region
init|=
name|resources
operator|.
name|get
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|clone
operator|.
name|getRegion
argument_list|(
name|region
argument_list|)
operator|.
name|addBundle
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|digraph
operator|.
name|replace
argument_list|(
name|clone
argument_list|)
expr_stmt|;
comment|//
comment|// Update bundles
comment|//
name|boolean
name|hasToUpdate
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|hasToUpdate
operator|=
operator|!
name|regionDeployment
operator|.
name|toUpdate
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|hasToUpdate
condition|)
block|{
name|print
argument_list|(
literal|"Updating bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|regionDeployment
operator|.
name|toUpdate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Bundle
name|bundle
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"  "
operator|+
name|uri
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|providers
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|update
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|toStart
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|BundleInfo
name|bi
init|=
name|bundleInfos
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
operator|&&
name|bi
operator|.
name|getStartLevel
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|bi
operator|.
name|getStartLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//
comment|// Install bundles
comment|//
name|boolean
name|hasToInstall
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionDeployment
name|regionDeployment
range|:
name|deployment
operator|.
name|regions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|hasToInstall
operator|=
operator|!
name|regionDeployment
operator|.
name|toInstall
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|hasToInstall
condition|)
block|{
name|print
argument_list|(
literal|"Installing bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionDeployment
argument_list|>
name|entry
range|:
name|deployment
operator|.
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|digraph
operator|.
name|getRegion
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|RegionDeployment
name|regionDeployment
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|regionDeployment
operator|.
name|toInstall
control|)
block|{
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|print
argument_list|(
literal|"  "
operator|+
name|uri
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|providers
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
decl_stmt|;
if|if
condition|(
name|ROOT_REGION
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|bundle
operator|=
name|region
operator|.
name|installBundleAtLocation
argument_list|(
name|uri
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundle
operator|=
name|region
operator|.
name|installBundle
argument_list|(
name|uri
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
name|addToMapSet
argument_list|(
name|managed
argument_list|,
name|name
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|noStart
operator|||
name|resourceLinkedToOldFeatures
operator|.
name|contains
argument_list|(
name|resource
argument_list|)
condition|)
block|{
name|toStart
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
name|deployment
operator|.
name|resToBnd
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
comment|// save a checksum of installed snapshot bundle
if|if
condition|(
name|UPDATE_SNAPSHOTS_CRC
operator|.
name|equals
argument_list|(
name|updateSnaphots
argument_list|)
operator|&&
name|isUpdateable
argument_list|(
name|resource
argument_list|)
operator|&&
operator|!
name|deployment
operator|.
name|newCheckums
operator|.
name|containsKey
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
condition|)
block|{
name|deployment
operator|.
name|newCheckums
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|ChecksumUtils
operator|.
name|checksum
argument_list|(
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|providers
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BundleInfo
name|bi
init|=
name|bundleInfos
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|bi
operator|!=
literal|null
operator|&&
name|bi
operator|.
name|getStartLevel
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|bi
operator|.
name|getStartLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//
comment|// Update and save state
comment|//
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|this
operator|.
name|state
operator|.
name|bundleChecksums
operator|.
name|putAll
argument_list|(
name|deployment
operator|.
name|newCheckums
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|.
name|features
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|.
name|features
operator|.
name|putAll
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|.
name|installedFeatures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|.
name|installedFeatures
operator|.
name|putAll
argument_list|(
name|installedFeatures
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|.
name|managedBundles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|.
name|managedBundles
operator|.
name|putAll
argument_list|(
name|managed
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Install configurations
comment|//
if|if
condition|(
name|configInstaller
operator|!=
literal|null
operator|&&
operator|!
name|newFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Repository
name|repository
range|:
name|repositories
control|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|repository
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|newFeatures
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|configInstaller
operator|.
name|installFeatureConfigs
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// TODO: remove this hack, but it avoids loading the class after the bundle is refreshed
operator|new
name|CopyOnWriteArrayIdentityList
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|RequirementSort
operator|.
name|sort
argument_list|(
name|Collections
operator|.
expr|<
name|Resource
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|noRefresh
condition|)
block|{
name|toStop
operator|=
operator|new
name|HashSet
argument_list|<
name|Bundle
argument_list|>
argument_list|()
expr_stmt|;
name|toStop
operator|.
name|addAll
argument_list|(
name|toRefresh
argument_list|)
expr_stmt|;
name|removeFragmentsAndBundlesInState
argument_list|(
name|toStop
argument_list|,
name|Bundle
operator|.
name|UNINSTALLED
operator||
name|Bundle
operator|.
name|RESOLVED
operator||
name|Bundle
operator|.
name|STOPPING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"Stopping bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toStop
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bs
init|=
name|getBundlesToStop
argument_list|(
name|toStop
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bs
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
name|bundle
operator|.
name|stop
argument_list|(
name|Bundle
operator|.
name|STOP_TRANSIENT
argument_list|)
expr_stmt|;
name|toStop
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|toStart
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|toRefresh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"Refreshing bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|toRefresh
control|)
block|{
name|print
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|toRefresh
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|refreshPackages
argument_list|(
name|toRefresh
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Compute bundles to start
name|removeFragmentsAndBundlesInState
argument_list|(
name|toStart
argument_list|,
name|Bundle
operator|.
name|UNINSTALLED
operator||
name|Bundle
operator|.
name|ACTIVE
operator||
name|Bundle
operator|.
name|STARTING
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|toStart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Compute correct start order
name|List
argument_list|<
name|Exception
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
name|print
argument_list|(
literal|"Starting bundles:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toStart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bs
init|=
name|getBundlesToStart
argument_list|(
name|toStart
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bs
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|bundle
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|toStart
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MultiException
argument_list|(
literal|"Error restarting bundles"
argument_list|,
name|exceptions
argument_list|)
throw|;
block|}
block|}
comment|// Call listeners
for|for
control|(
name|Feature
name|feature
range|:
name|getFeatures
argument_list|(
name|repositories
argument_list|,
name|delFeatures
argument_list|)
control|)
block|{
name|callListeners
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|feature
argument_list|,
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureUninstalled
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Feature
name|feature
range|:
name|getFeatures
argument_list|(
name|repositories
argument_list|,
name|newFeatures
argument_list|)
control|)
block|{
name|callListeners
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|feature
argument_list|,
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|print
argument_list|(
literal|"Done."
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addTransitive
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
name|resources
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|resolution
parameter_list|)
block|{
if|if
condition|(
name|resources
operator|.
name|add
argument_list|(
name|resource
argument_list|)
condition|)
block|{
for|for
control|(
name|Wire
name|wire
range|:
name|resolution
operator|.
name|get
argument_list|(
name|resource
argument_list|)
control|)
block|{
name|addTransitive
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|,
name|resources
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|BundleInfo
name|mergeBundleInfo
parameter_list|(
name|BundleInfo
name|bi
parameter_list|,
name|BundleInfo
name|oldBi
parameter_list|)
block|{
comment|// TODO: we need a proper merge strategy when a bundle
comment|// TODO: comes from different features
return|return
name|bi
return|;
block|}
specifier|private
name|void
name|print
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeFragmentsAndBundlesInState
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|int
name|state
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|(
name|bundles
argument_list|)
control|)
block|{
if|if
condition|(
operator|(
name|bundle
operator|.
name|getState
argument_list|()
operator|&
name|state
operator|)
operator|!=
literal|0
operator|||
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|bundles
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|logDeployment
parameter_list|(
name|Deployment
name|overallDeployment
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|print
argument_list|(
literal|"Changes to perform:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RegionDeployment
argument_list|>
name|region
range|:
name|overallDeployment
operator|.
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RegionDeployment
name|deployment
init|=
name|region
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|print
argument_list|(
literal|"  Region: "
operator|+
name|region
operator|.
name|getKey
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deployment
operator|.
name|toDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"    Bundles to uninstall:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|deployment
operator|.
name|toDelete
control|)
block|{
name|print
argument_list|(
literal|"      "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|deployment
operator|.
name|toUpdate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"    Bundles to update:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|deployment
operator|.
name|toUpdate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|print
argument_list|(
literal|"      "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" / "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getVersion
argument_list|()
operator|+
literal|" with "
operator|+
name|getUri
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|deployment
operator|.
name|toInstall
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"    Bundles to install:"
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|deployment
operator|.
name|toInstall
control|)
block|{
name|print
argument_list|(
literal|"      "
operator|+
name|getUri
argument_list|(
name|resource
argument_list|)
argument_list|,
name|verbose
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Deployment
name|computeDeployment
parameter_list|(
name|SubsystemResolver
name|resolver
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Deployment
name|result
init|=
operator|new
name|Deployment
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|bundlesPerRegions
init|=
name|resolver
operator|.
name|getBundlesPerRegions
argument_list|()
decl_stmt|;
comment|// Gather all regions, including old ones and new ones
name|Set
argument_list|<
name|String
argument_list|>
name|regions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|regions
operator|.
name|addAll
argument_list|(
name|state
operator|.
name|managedBundles
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|regions
operator|.
name|addAll
argument_list|(
name|bundlesPerRegions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|RegionDeployment
name|deployment
init|=
operator|new
name|RegionDeployment
argument_list|()
decl_stmt|;
comment|// Get the list of bundles currently assigned in the region
name|Set
argument_list|<
name|Long
argument_list|>
name|managed
init|=
name|state
operator|.
name|managedBundles
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|managed
operator|==
literal|null
condition|)
block|{
name|managed
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
comment|// Compute the list of resources to deploy in the region
name|Set
argument_list|<
name|Resource
argument_list|>
name|bundlesInRegion
init|=
name|bundlesPerRegions
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Resource
argument_list|>
name|toDeploy
init|=
name|bundlesInRegion
operator|!=
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|(
name|bundlesInRegion
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// First pass: go through all installed bundles and mark them
comment|// as either to ignore or delete
for|for
control|(
name|long
name|bundleId
range|:
name|managed
control|)
block|{
comment|// Look for the installed bundle
name|Bundle
name|bundle
init|=
name|systemBundleContext
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
comment|// Bundle has been manually uninstalled ?
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
comment|// Look for a matching resource
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Resource
name|res
range|:
name|toDeploy
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|getSymbolicName
argument_list|(
name|res
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|getVersion
argument_list|(
name|res
argument_list|)
argument_list|)
condition|)
block|{
name|resource
operator|=
name|res
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// We found a matching bundle
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
comment|// In case of snapshots, check if the snapshot is out of date
comment|// and flag it as to update
if|if
condition|(
name|isUpdateable
argument_list|(
name|resource
argument_list|)
condition|)
block|{
comment|// Always update snapshots
if|if
condition|(
name|UPDATE_SNAPSHOTS_ALWAYS
operator|.
name|equalsIgnoreCase
argument_list|(
name|updateSnaphots
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Update snapshot for "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|deployment
operator|.
name|toUpdate
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|UPDATE_SNAPSHOTS_CRC
operator|.
name|equalsIgnoreCase
argument_list|(
name|updateSnaphots
argument_list|)
condition|)
block|{
comment|// if the checksum are different
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|getBundleInputStream
argument_list|(
name|resource
argument_list|,
name|resolver
operator|.
name|getProviders
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|newCrc
init|=
name|ChecksumUtils
operator|.
name|checksum
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|long
name|oldCrc
init|=
name|state
operator|.
name|bundleChecksums
operator|.
name|containsKey
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
condition|?
name|state
operator|.
name|bundleChecksums
operator|.
name|get
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
else|:
literal|0l
decl_stmt|;
if|if
condition|(
name|newCrc
operator|!=
name|oldCrc
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"New snapshot available for "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|deployment
operator|.
name|toUpdate
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|result
operator|.
name|newCheckums
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|newCrc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// We're done for this resource
name|toDeploy
operator|.
name|remove
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|result
operator|.
name|resToBnd
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
comment|// There's no matching resource
comment|// If the bundle is managed, we need to delete it
block|}
elseif|else
if|if
condition|(
name|managed
operator|.
name|contains
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
condition|)
block|{
name|deployment
operator|.
name|toDelete
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Second pass on remaining resources
for|for
control|(
name|Resource
name|resource
range|:
name|toDeploy
control|)
block|{
name|TreeMap
argument_list|<
name|Version
argument_list|,
name|Bundle
argument_list|>
name|matching
init|=
operator|new
name|TreeMap
argument_list|<
name|Version
argument_list|,
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|VersionRange
name|range
init|=
operator|new
name|VersionRange
argument_list|(
name|Macro
operator|.
name|transform
argument_list|(
name|bundleUpdateRange
argument_list|,
name|getVersion
argument_list|(
name|resource
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|deployment
operator|.
name|toDelete
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|getSymbolicName
argument_list|(
name|resource
argument_list|)
argument_list|)
operator|&&
name|range
operator|.
name|contains
argument_list|(
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|matching
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|matching
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Bundle
name|bundle
init|=
name|matching
operator|.
name|lastEntry
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|deployment
operator|.
name|toUpdate
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|deployment
operator|.
name|toDelete
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|result
operator|.
name|resToBnd
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deployment
operator|.
name|toInstall
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|deployment
operator|.
name|toInstall
argument_list|,
operator|new
name|ResourceComparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add this region if there is something to do
if|if
condition|(
operator|!
name|deployment
operator|.
name|toDelete
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|deployment
operator|.
name|toUpdate
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|deployment
operator|.
name|toInstall
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|regions
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|deployment
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|(
name|Repository
index|[]
name|repositories
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|featureIds
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|installedFeatures
init|=
operator|new
name|ArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Repository
name|repository
range|:
name|repositories
control|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|repository
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|featureIds
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|installedFeatures
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|installedFeatures
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getInstalledFeatures
parameter_list|(
name|SubsystemResolver
name|resolver
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|installed
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|mapping
init|=
name|resolver
operator|.
name|getFeaturesPerRegions
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|entry
range|:
name|mapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Resource
name|resource
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|addToMapSet
argument_list|(
name|installed
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|getFeatureId
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|installed
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getFeatureIds
parameter_list|(
name|Collection
argument_list|<
name|Resource
argument_list|>
name|allResources
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|installedFeatureIds
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|allResources
control|)
block|{
name|String
name|id
init|=
name|getFeatureId
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|installedFeatureIds
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|installedFeatureIds
return|;
block|}
specifier|protected
name|boolean
name|isUpdateable
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
return|return
name|getVersion
argument_list|(
name|resource
argument_list|)
operator|.
name|getQualifier
argument_list|()
operator|.
name|endsWith
argument_list|(
name|SNAPSHOT
argument_list|)
operator|||
name|uri
operator|.
name|contains
argument_list|(
name|SNAPSHOT
argument_list|)
operator|||
operator|!
name|uri
operator|.
name|contains
argument_list|(
name|MAVEN
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Bundle
argument_list|>
name|getBundlesToStart
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
comment|// Restart the features service last, regardless of any other consideration
comment|// so that we don't end up with the service trying to do stuff before we're done
name|boolean
name|restart
init|=
name|bundles
operator|.
name|remove
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
argument_list|>
name|bundlesPerStartLevel
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|int
name|sl
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
name|addToMapSet
argument_list|(
name|bundlesPerStartLevel
argument_list|,
name|sl
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
name|bundles
operator|=
name|bundlesPerStartLevel
operator|.
name|remove
argument_list|(
name|bundlesPerStartLevel
operator|.
name|firstKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// We hit FELIX-2949 if we don't use the correct order as Felix resolver isn't greedy.
comment|// In order to minimize that, we make sure we resolve the bundles in the order they
comment|// are given back by the resolution, meaning that all root bundles (i.e. those that were
comment|// not flagged as dependencies in features) are started before the others.   This should
comment|// make sure those important bundles are started first and minimize the problem.
name|List
argument_list|<
name|BundleRevision
argument_list|>
name|revs
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleRevision
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|revs
operator|.
name|add
argument_list|(
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Bundle
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleRevision
name|rev
range|:
name|RequirementSort
operator|.
name|sort
argument_list|(
name|revs
argument_list|)
control|)
block|{
name|sorted
operator|.
name|add
argument_list|(
name|rev
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sorted
operator|.
name|isEmpty
argument_list|()
operator|&&
name|restart
condition|)
block|{
name|sorted
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
return|return
name|sorted
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Bundle
argument_list|>
name|getBundlesToStop
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
argument_list|>
name|bundlesPerStartLevel
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|Bundle
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|int
name|sl
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
name|addToMapSet
argument_list|(
name|bundlesPerStartLevel
argument_list|,
name|sl
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
name|bundles
operator|=
name|bundlesPerStartLevel
operator|.
name|get
argument_list|(
name|bundlesPerStartLevel
operator|.
name|lastKey
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundlesToDestroy
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|ServiceReference
index|[]
name|references
init|=
name|bundle
operator|.
name|getRegisteredServices
argument_list|()
decl_stmt|;
name|int
name|usage
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
name|reference
range|:
name|references
control|)
block|{
name|usage
operator|+=
name|getServiceUsage
argument_list|(
name|reference
argument_list|,
name|bundles
argument_list|)
expr_stmt|;
block|}
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Usage for bundle {} is {}"
argument_list|,
name|bundle
argument_list|,
name|usage
argument_list|)
expr_stmt|;
if|if
condition|(
name|usage
operator|==
literal|0
condition|)
block|{
name|bundlesToDestroy
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bundlesToDestroy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|bundlesToDestroy
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Bundle
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Bundle
name|b1
parameter_list|,
name|Bundle
name|b2
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|b2
operator|.
name|getLastModified
argument_list|()
operator|-
name|b1
operator|.
name|getLastModified
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Selected bundles {} for destroy (no services in use)"
argument_list|,
name|bundlesToDestroy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ServiceReference
name|ref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|ServiceReference
index|[]
name|references
init|=
name|bundle
operator|.
name|getRegisteredServices
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceReference
name|reference
range|:
name|references
control|)
block|{
if|if
condition|(
name|getServiceUsage
argument_list|(
name|reference
argument_list|,
name|bundles
argument_list|)
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|reference
operator|.
name|compareTo
argument_list|(
name|ref
argument_list|)
operator|<
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Currently selecting bundle {} for destroy (with reference {})"
argument_list|,
name|bundle
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|ref
operator|=
name|reference
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|bundlesToDestroy
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Selected bundle {} for destroy (lowest ranking service)"
argument_list|,
name|bundlesToDestroy
argument_list|)
expr_stmt|;
block|}
return|return
name|bundlesToDestroy
return|;
block|}
specifier|private
specifier|static
name|int
name|getServiceUsage
parameter_list|(
name|ServiceReference
name|ref
parameter_list|,
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
name|Bundle
index|[]
name|usingBundles
init|=
name|ref
operator|.
name|getUsingBundles
argument_list|()
decl_stmt|;
name|int
name|nb
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|usingBundles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|usingBundles
control|)
block|{
if|if
condition|(
name|bundles
operator|.
name|contains
argument_list|(
name|bundle
argument_list|)
condition|)
block|{
name|nb
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|nb
return|;
block|}
specifier|protected
name|InputStream
name|getBundleInputStream
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|providers
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|getUri
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource has no uri"
argument_list|)
throw|;
block|}
name|StreamProvider
name|provider
init|=
name|providers
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource "
operator|+
name|uri
operator|+
literal|" has no StreamProvider"
argument_list|)
throw|;
block|}
return|return
name|provider
operator|.
name|open
argument_list|()
return|;
block|}
specifier|protected
name|void
name|refreshPackages
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FrameworkWiring
name|fw
init|=
name|systemBundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|adapt
argument_list|(
name|FrameworkWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|fw
operator|.
name|refreshBundles
argument_list|(
name|bundles
argument_list|,
operator|new
name|FrameworkListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|frameworkEvent
parameter_list|(
name|FrameworkEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|FrameworkEvent
operator|.
name|ERROR
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Framework error"
argument_list|,
name|event
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|Deployment
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|newCheckums
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
name|resToBnd
init|=
operator|new
name|HashMap
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RegionDeployment
argument_list|>
name|regions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RegionDeployment
argument_list|>
argument_list|()
decl_stmt|;
block|}
specifier|static
class|class
name|RegionDeployment
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|toInstall
init|=
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Bundle
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|toUpdate
init|=
operator|new
name|HashMap
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
block|}
block|}
end_class

end_unit

