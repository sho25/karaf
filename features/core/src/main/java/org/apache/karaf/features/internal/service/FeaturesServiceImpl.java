begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|RepositoryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManagers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
operator|.
name|DigraphHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|JsonWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|bundles
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|collections
operator|.
name|CopyOnWriteArrayIdentityList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionFilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolvers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|hooks
operator|.
name|resolver
operator|.
name|ResolverHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|hooks
operator|.
name|resolver
operator|.
name|ResolverHookFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|ExecutionEnvironmentNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|HostNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|FrameworkStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|FrameworkWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|StateStorage
operator|.
name|toStringStringSetMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|add
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|addToMapSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|copy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|remove
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|FeaturesServiceImpl
implements|implements
name|FeaturesService
implements|,
name|Deployer
operator|.
name|DeployCallback
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FeaturesServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURE_OSGI_REQUIREMENT_PREFIX
init|=
literal|"feature:"
decl_stmt|;
comment|/**      * Our bundle.      * We use it to check bundle operations affecting our own bundle.      */
specifier|private
specifier|final
name|Bundle
name|bundle
decl_stmt|;
comment|/**      * The system bundle context.      * For all bundles related operations, we use the system bundle context      * to allow this bundle to be stopped and still allow the deployment to      * take place.      */
specifier|private
specifier|final
name|BundleContext
name|systemBundleContext
decl_stmt|;
comment|/**      * Used to load and save the {@link State} of this service.      */
specifier|private
specifier|final
name|StateStorage
name|storage
decl_stmt|;
specifier|private
specifier|final
name|FeatureFinder
name|featureFinder
decl_stmt|;
specifier|private
specifier|final
name|EventAdminListener
name|eventAdminListener
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationAdmin
name|configurationAdmin
decl_stmt|;
specifier|private
specifier|final
name|Resolver
name|resolver
decl_stmt|;
specifier|private
specifier|final
name|FeatureConfigInstaller
name|configInstaller
decl_stmt|;
specifier|private
specifier|final
name|RegionDigraph
name|digraph
decl_stmt|;
specifier|private
specifier|final
name|String
name|overrides
decl_stmt|;
comment|/**      * Range to use when a version is specified on a feature dependency.      * The default is {@link org.apache.karaf.features.FeaturesService#DEFAULT_FEATURE_RESOLUTION_RANGE}      */
specifier|private
specifier|final
name|String
name|featureResolutionRange
decl_stmt|;
comment|/**      * Range to use when verifying if a bundle should be updated or      * new bundle installed.      * The default is {@link org.apache.karaf.features.FeaturesService#DEFAULT_BUNDLE_UPDATE_RANGE}      */
specifier|private
specifier|final
name|String
name|bundleUpdateRange
decl_stmt|;
comment|/**      * Use CRC to check snapshot bundles and update them if changed.      * Either:      * - none : never update snapshots      * - always : always update snapshots      * - crc : use CRC to detect changes      */
specifier|private
specifier|final
name|String
name|updateSnaphots
decl_stmt|;
comment|/**      * Service requirements enforcement      */
specifier|private
specifier|final
name|String
name|serviceRequirements
decl_stmt|;
specifier|private
specifier|final
name|int
name|downloadThreads
decl_stmt|;
specifier|private
specifier|final
name|long
name|scheduleDelay
decl_stmt|;
specifier|private
specifier|final
name|int
name|scheduleMaxRun
decl_stmt|;
specifier|private
specifier|final
name|String
name|blacklisted
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|configCfgStore
decl_stmt|;
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|outputFile
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Optional global repository      */
specifier|private
specifier|final
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
name|globalRepository
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|FeaturesListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayIdentityList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Synchronized on lock
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|State
name|state
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|repositoryCache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|featureCache
decl_stmt|;
specifier|public
name|FeaturesServiceImpl
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleContext
name|systemBundleContext
parameter_list|,
name|StateStorage
name|storage
parameter_list|,
name|FeatureFinder
name|featureFinder
parameter_list|,
name|EventAdminListener
name|eventAdminListener
parameter_list|,
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|,
name|Resolver
name|resolver
parameter_list|,
name|RegionDigraph
name|digraph
parameter_list|,
name|String
name|overrides
parameter_list|,
name|String
name|featureResolutionRange
parameter_list|,
name|String
name|bundleUpdateRange
parameter_list|,
name|String
name|updateSnaphots
parameter_list|,
name|String
name|serviceRequirements
parameter_list|,
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
name|globalRepository
parameter_list|,
name|int
name|downloadThreads
parameter_list|,
name|long
name|scheduleDelay
parameter_list|,
name|int
name|scheduleMaxRun
parameter_list|,
name|String
name|blacklisted
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|systemBundleContext
operator|=
name|systemBundleContext
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
name|this
operator|.
name|featureFinder
operator|=
name|featureFinder
expr_stmt|;
name|this
operator|.
name|eventAdminListener
operator|=
name|eventAdminListener
expr_stmt|;
name|this
operator|.
name|configurationAdmin
operator|=
name|configurationAdmin
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|configInstaller
operator|=
name|configurationAdmin
operator|!=
literal|null
condition|?
operator|new
name|FeatureConfigInstaller
argument_list|(
name|configurationAdmin
argument_list|,
name|FeaturesService
operator|.
name|DEFAULT_CONFIG_CFG_STORE
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|digraph
operator|=
name|digraph
expr_stmt|;
name|this
operator|.
name|overrides
operator|=
name|overrides
expr_stmt|;
name|this
operator|.
name|featureResolutionRange
operator|=
name|featureResolutionRange
expr_stmt|;
name|this
operator|.
name|bundleUpdateRange
operator|=
name|bundleUpdateRange
expr_stmt|;
name|this
operator|.
name|updateSnaphots
operator|=
name|updateSnaphots
expr_stmt|;
name|this
operator|.
name|serviceRequirements
operator|=
name|serviceRequirements
expr_stmt|;
name|this
operator|.
name|globalRepository
operator|=
name|globalRepository
expr_stmt|;
name|this
operator|.
name|downloadThreads
operator|=
name|downloadThreads
operator|>
literal|0
condition|?
name|downloadThreads
else|:
literal|1
expr_stmt|;
name|this
operator|.
name|scheduleDelay
operator|=
name|scheduleDelay
expr_stmt|;
name|this
operator|.
name|scheduleMaxRun
operator|=
name|scheduleMaxRun
expr_stmt|;
name|this
operator|.
name|blacklisted
operator|=
name|blacklisted
expr_stmt|;
name|this
operator|.
name|configCfgStore
operator|=
name|FeaturesService
operator|.
name|DEFAULT_CONFIG_CFG_STORE
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
name|loadState
argument_list|()
expr_stmt|;
name|checkResolve
argument_list|()
expr_stmt|;
block|}
specifier|public
name|FeaturesServiceImpl
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleContext
name|systemBundleContext
parameter_list|,
name|StateStorage
name|storage
parameter_list|,
name|FeatureFinder
name|featureFinder
parameter_list|,
name|EventAdminListener
name|eventAdminListener
parameter_list|,
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|,
name|Resolver
name|resolver
parameter_list|,
name|RegionDigraph
name|digraph
parameter_list|,
name|String
name|overrides
parameter_list|,
name|String
name|featureResolutionRange
parameter_list|,
name|String
name|bundleUpdateRange
parameter_list|,
name|String
name|updateSnaphots
parameter_list|,
name|String
name|serviceRequirements
parameter_list|,
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
name|globalRepository
parameter_list|,
name|int
name|downloadThreads
parameter_list|,
name|long
name|scheduleDelay
parameter_list|,
name|int
name|scheduleMaxRun
parameter_list|,
name|String
name|blacklisted
parameter_list|,
name|boolean
name|configCfgStore
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|systemBundleContext
operator|=
name|systemBundleContext
expr_stmt|;
name|this
operator|.
name|storage
operator|=
name|storage
expr_stmt|;
name|this
operator|.
name|featureFinder
operator|=
name|featureFinder
expr_stmt|;
name|this
operator|.
name|eventAdminListener
operator|=
name|eventAdminListener
expr_stmt|;
name|this
operator|.
name|configurationAdmin
operator|=
name|configurationAdmin
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|configInstaller
operator|=
name|configurationAdmin
operator|!=
literal|null
condition|?
operator|new
name|FeatureConfigInstaller
argument_list|(
name|configurationAdmin
argument_list|,
name|configCfgStore
argument_list|)
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|digraph
operator|=
name|digraph
expr_stmt|;
name|this
operator|.
name|overrides
operator|=
name|overrides
expr_stmt|;
name|this
operator|.
name|featureResolutionRange
operator|=
name|featureResolutionRange
expr_stmt|;
name|this
operator|.
name|bundleUpdateRange
operator|=
name|bundleUpdateRange
expr_stmt|;
name|this
operator|.
name|updateSnaphots
operator|=
name|updateSnaphots
expr_stmt|;
name|this
operator|.
name|serviceRequirements
operator|=
name|serviceRequirements
expr_stmt|;
name|this
operator|.
name|globalRepository
operator|=
name|globalRepository
expr_stmt|;
name|this
operator|.
name|downloadThreads
operator|=
name|downloadThreads
operator|>
literal|0
condition|?
name|downloadThreads
else|:
literal|1
expr_stmt|;
name|this
operator|.
name|scheduleDelay
operator|=
name|scheduleDelay
expr_stmt|;
name|this
operator|.
name|scheduleMaxRun
operator|=
name|scheduleMaxRun
expr_stmt|;
name|this
operator|.
name|blacklisted
operator|=
name|blacklisted
expr_stmt|;
name|this
operator|.
name|configCfgStore
operator|=
name|configCfgStore
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
name|loadState
argument_list|()
expr_stmt|;
name|checkResolve
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
name|void
name|checkResolve
parameter_list|()
block|{
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
return|return;
comment|// Most certainly in unit tests
block|}
name|File
name|resolveFile
init|=
name|bundle
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getDataFile
argument_list|(
literal|"resolve"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resolveFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|request
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|resolveFile
argument_list|)
init|)
block|{
name|request
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|JsonReader
operator|.
name|read
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error reading resolution request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requestedFeatures
init|=
name|toStringStringSetMap
argument_list|(
operator|(
name|Map
operator|)
name|request
operator|.
name|get
argument_list|(
literal|"features"
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|opts
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|request
operator|.
name|get
argument_list|(
literal|"options"
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|opts
control|)
block|{
name|options
operator|.
name|add
argument_list|(
name|Option
operator|.
name|valueOf
argument_list|(
name|opt
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Resolve
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|doProvisionInThread
argument_list|(
name|requestedFeatures
argument_list|,
name|stateChanges
argument_list|,
name|copyState
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error updating state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeResolve
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requestedFeatures
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|resolveFile
init|=
name|bundle
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getDataFile
argument_list|(
literal|"resolve"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|request
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|opts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Option
name|opt
range|:
name|options
control|)
block|{
name|opts
operator|.
name|add
argument_list|(
name|opt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|put
argument_list|(
literal|"features"
argument_list|,
name|requestedFeatures
argument_list|)
expr_stmt|;
name|request
operator|.
name|put
argument_list|(
literal|"options"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|resolveFile
argument_list|)
init|)
block|{
name|JsonWriter
operator|.
name|write
argument_list|(
name|fos
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// State support
comment|//
specifier|protected
name|void
name|loadState
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|storage
operator|.
name|load
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error loading FeaturesService state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|saveState
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// Make sure we don't store bundle checksums if
comment|// it has been disabled through configadmin
comment|// so that we don't keep out-of-date checksums.
if|if
condition|(
operator|!
name|UPDATE_SNAPSHOTS_CRC
operator|.
name|equalsIgnoreCase
argument_list|(
name|updateSnaphots
argument_list|)
condition|)
block|{
name|state
operator|.
name|bundleChecksums
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|storage
operator|.
name|save
argument_list|(
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
comment|// For tests, this should never happen at runtime
name|DigraphHelper
operator|.
name|saveDigraph
argument_list|(
name|bundle
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|digraph
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error saving FeaturesService state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isBootDone
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|state
operator|.
name|bootDone
operator|.
name|get
argument_list|()
return|;
block|}
block|}
name|void
name|bootDone
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|state
operator|.
name|bootDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
comment|//
comment|// Listeners support
comment|//
specifier|public
name|void
name|registerListener
parameter_list|(
name|FeaturesListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|repositories
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|installedFeatures
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repositories
operator|.
name|addAll
argument_list|(
name|state
operator|.
name|repositories
argument_list|)
expr_stmt|;
name|installedFeatures
operator|.
name|putAll
argument_list|(
name|copy
argument_list|(
name|state
operator|.
name|installedFeatures
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|uri
range|:
name|repositories
control|)
block|{
name|Repository
name|repository
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|,
name|blacklisted
argument_list|)
decl_stmt|;
name|listener
operator|.
name|repositoryEvent
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repository
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryAdded
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|installedFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Feature
name|feature
init|=
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|listener
operator|.
name|featureEvent
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
name|feature
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error notifying listener about the current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregisterListener
parameter_list|(
name|FeaturesListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|callListeners
parameter_list|(
name|FeatureEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventAdminListener
operator|!=
literal|null
condition|)
block|{
name|eventAdminListener
operator|.
name|featureEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeaturesListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|featureEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|callListeners
parameter_list|(
name|RepositoryEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|eventAdminListener
operator|!=
literal|null
condition|)
block|{
name|eventAdminListener
operator|.
name|repositoryEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeaturesListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|repositoryEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Feature Finder support
comment|//
annotation|@
name|Override
specifier|public
name|URI
name|getRepositoryUriFor
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
block|{
return|return
name|featureFinder
operator|.
name|getUriFor
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRepositoryNames
parameter_list|()
block|{
return|return
name|featureFinder
operator|.
name|getNames
argument_list|()
return|;
block|}
comment|//
comment|// Repositories support
comment|//
specifier|public
name|Repository
name|loadRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|,
name|blacklisted
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|repo
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validateRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|addRepository
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|install
parameter_list|)
throws|throws
name|Exception
block|{
name|Repository
name|repository
init|=
name|loadRepository
argument_list|(
name|uri
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// Clean cache
name|repositoryCache
operator|.
name|put
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|featureCache
operator|=
literal|null
expr_stmt|;
comment|// Add repo
if|if
condition|(
operator|!
name|state
operator|.
name|repositories
operator|.
name|add
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|saveState
argument_list|()
expr_stmt|;
block|}
name|callListeners
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repository
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryAdded
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// install the features in the repo
if|if
condition|(
name|install
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|repository
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|installFeatures
argument_list|(
name|features
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|removeRepository
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|uri
parameter_list|,
name|boolean
name|uninstall
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: check we don't have any feature installed from this repository
name|Repository
name|repo
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// Remove repo
if|if
condition|(
operator|!
name|state
operator|.
name|repositories
operator|.
name|remove
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Clean cache
name|featureCache
operator|=
literal|null
expr_stmt|;
name|repo
operator|=
name|repositoryCache
operator|.
name|get
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|toRemove
operator|.
name|add
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Repository
name|rep
init|=
name|repositoryCache
operator|.
name|remove
argument_list|(
name|toRemove
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URI
name|u
range|:
name|rep
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|saveState
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|repo
operator|=
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|,
name|blacklisted
argument_list|)
expr_stmt|;
block|}
name|callListeners
argument_list|(
operator|new
name|RepositoryEvent
argument_list|(
name|repo
argument_list|,
name|RepositoryEvent
operator|.
name|EventType
operator|.
name|RepositoryRemoved
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// uninstall the features from the repository
if|if
condition|(
name|uninstall
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|repo
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|uninstallFeatures
argument_list|(
name|features
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|removeRepository
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addRepository
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Repository
index|[]
name|listRepositories
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure the cache is loaded
name|getFeatures
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|repositoryCache
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Repository
index|[
name|repositoryCache
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Repository
index|[]
name|listRequiredRepositories
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure the cache is loaded
name|getFeatures
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Repository
argument_list|>
name|entry
range|:
name|repositoryCache
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|state
operator|.
name|repositories
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|repos
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|repos
operator|.
name|toArray
argument_list|(
operator|new
name|Repository
index|[
name|repos
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cache is loaded
name|getFeatures
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|this
operator|.
name|repositoryCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|repo
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Repository
name|getRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Make sure the cache is loaded
name|getFeatures
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Repository
name|repo
range|:
name|this
operator|.
name|repositoryCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|repo
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
name|repo
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRepositoryName
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Repository
name|repo
init|=
name|getRepository
argument_list|(
name|uri
argument_list|)
decl_stmt|;
return|return
operator|(
name|repo
operator|!=
literal|null
operator|)
condition|?
name|repo
operator|.
name|getName
argument_list|()
else|:
literal|null
return|;
block|}
comment|//
comment|// Features support
comment|//
specifier|public
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Feature
index|[]
name|features
init|=
name|this
operator|.
name|getFeatures
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|features
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|features
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|public
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|Feature
index|[]
name|features
init|=
name|this
operator|.
name|getFeatures
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|features
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|features
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|public
name|Feature
index|[]
name|getFeatures
parameter_list|(
name|String
name|nameOrId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|parts
init|=
name|nameOrId
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|parts
operator|.
name|length
operator|>
literal|0
condition|?
name|parts
index|[
literal|0
index|]
else|:
name|nameOrId
decl_stmt|;
name|String
name|version
init|=
name|parts
operator|.
name|length
operator|>
literal|1
condition|?
name|parts
index|[
literal|1
index|]
else|:
literal|null
decl_stmt|;
return|return
name|getFeatures
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
return|;
block|}
specifier|public
name|Feature
index|[]
name|getFeatures
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|featureName
range|:
name|getFeatures
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|featureName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
name|getFeatures
argument_list|()
operator|.
name|get
argument_list|(
name|featureName
argument_list|)
decl_stmt|;
name|Feature
name|matchingFeature
init|=
name|getFeatureMatching
argument_list|(
name|versions
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchingFeature
operator|!=
literal|null
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|matchingFeature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|Feature
name|getFeatureMatching
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
parameter_list|,
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
name|version
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
argument_list|)
condition|)
block|{
name|version
operator|=
literal|""
expr_stmt|;
block|}
block|}
else|else
block|{
name|version
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|versions
operator|==
literal|null
operator|||
name|versions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Feature
name|feature
init|=
name|version
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|versions
operator|.
name|get
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|==
literal|null
condition|)
block|{
comment|// Compute version range. If an version has been given, assume exact range
name|VersionRange
name|versionRange
init|=
name|version
operator|.
name|isEmpty
argument_list|()
condition|?
operator|new
name|VersionRange
argument_list|(
name|Version
operator|.
name|emptyVersion
argument_list|)
else|:
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Version
name|latest
init|=
name|Version
operator|.
name|emptyVersion
decl_stmt|;
for|for
control|(
name|String
name|available
range|:
name|versions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Version
name|availableVersion
init|=
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|available
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableVersion
operator|.
name|compareTo
argument_list|(
name|latest
argument_list|)
operator|>=
literal|0
operator|&&
name|versionRange
operator|.
name|contains
argument_list|(
name|availableVersion
argument_list|)
condition|)
block|{
name|feature
operator|=
name|versions
operator|.
name|get
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|latest
operator|=
name|availableVersion
expr_stmt|;
block|}
block|}
block|}
return|return
name|feature
return|;
block|}
block|}
specifier|public
name|Feature
index|[]
name|listFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureWithDifferentVersion
range|:
name|getFeatures
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureWithDifferentVersion
operator|.
name|values
argument_list|()
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|uris
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|featureCache
operator|!=
literal|null
condition|)
block|{
return|return
name|featureCache
return|;
block|}
name|uris
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|state
operator|.
name|repositories
argument_list|)
expr_stmt|;
block|}
comment|//the outer map's key is feature name, the inner map's key is feature version
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Two phase load:
comment|// * first load dependent repositories
name|List
argument_list|<
name|String
argument_list|>
name|toLoad
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|uris
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|toLoad
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|uri
init|=
name|toLoad
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Repository
name|repo
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repo
operator|=
name|repositoryCache
operator|.
name|get
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|repo
operator|==
literal|null
condition|)
block|{
name|RepositoryImpl
name|rep
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|,
name|blacklisted
argument_list|)
decl_stmt|;
name|rep
operator|.
name|load
argument_list|()
expr_stmt|;
name|repo
operator|=
name|rep
expr_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repositoryCache
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|URI
name|u
range|:
name|repo
operator|.
name|getRepositories
argument_list|()
control|)
block|{
name|toLoad
operator|.
name|add
argument_list|(
name|u
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Can't load features repository {}"
argument_list|,
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Repository
argument_list|>
name|repos
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|repos
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|repositoryCache
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// * then load all features
for|for
control|(
name|Repository
name|repo
range|:
name|repos
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|repo
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|map
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versionMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|versionMap
operator|.
name|put
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|versionMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|get
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|uris
operator|.
name|size
argument_list|()
operator|==
name|state
operator|.
name|repositories
operator|.
name|size
argument_list|()
operator|&&
name|state
operator|.
name|repositories
operator|.
name|containsAll
argument_list|(
name|uris
argument_list|)
condition|)
block|{
name|featureCache
operator|=
name|map
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|//
comment|// Installed features
comment|//
annotation|@
name|Override
specifier|public
name|Feature
index|[]
name|listInstalledFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|allFeatures
init|=
name|getFeatures
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureWithDifferentVersion
range|:
name|allFeatures
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureWithDifferentVersion
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isInstalled
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Feature
index|[]
name|listRequiredFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|allFeatures
init|=
name|getFeatures
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featureWithDifferentVersion
range|:
name|allFeatures
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|featureWithDifferentVersion
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|isRequired
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|features
operator|.
name|toArray
argument_list|(
operator|new
name|Feature
index|[
name|features
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInstalled
parameter_list|(
name|Feature
name|f
parameter_list|)
block|{
name|String
name|id
init|=
name|normalize
argument_list|(
name|f
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|installed
init|=
name|state
operator|.
name|installedFeatures
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
return|return
name|installed
operator|!=
literal|null
operator|&&
name|installed
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FeatureState
name|getState
parameter_list|(
name|String
name|featureId
parameter_list|)
block|{
name|String
name|id
init|=
name|normalize
argument_list|(
name|featureId
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|installed
init|=
name|state
operator|.
name|installedFeatures
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|installed
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
name|FeatureState
operator|.
name|Uninstalled
return|;
block|}
else|else
block|{
name|String
name|stateSt
init|=
name|state
operator|.
name|stateFeatures
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|FeatureState
operator|.
name|valueOf
argument_list|(
name|stateSt
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRequired
parameter_list|(
name|Feature
name|f
parameter_list|)
block|{
name|String
name|id
init|=
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|features
init|=
name|state
operator|.
name|requirements
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
decl_stmt|;
return|return
name|features
operator|!=
literal|null
operator|&&
name|features
operator|.
name|contains
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
comment|//
comment|// Installation and uninstallation of features
comment|//
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|name
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeatures
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|name
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeature
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|installFeatures
argument_list|(
name|features
argument_list|,
name|ROOT_REGION
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeature
argument_list|(
name|version
operator|!=
literal|null
condition|?
name|name
operator|+
literal|"/"
operator|+
name|version
else|:
name|name
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeature
argument_list|(
name|name
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeatures
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|name
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstallFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|uninstallFeatures
argument_list|(
name|features
argument_list|,
name|ROOT_REGION
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|//
comment|//
comment|//
comment|//   RESOLUTION
comment|//
comment|//
comment|//
annotation|@
name|Override
specifier|public
name|void
name|setResolutionOutputFile
parameter_list|(
name|String
name|outputFile
parameter_list|)
block|{
name|this
operator|.
name|outputFile
operator|.
name|set
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|String
name|region
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|State
name|state
init|=
name|copyState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|required
init|=
name|copy
argument_list|(
name|state
operator|.
name|requirements
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
operator|||
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|region
operator|=
name|ROOT_REGION
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fl
init|=
name|required
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|fl
operator|==
literal|null
condition|)
block|{
name|fl
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|required
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|fl
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|featuresToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|featuresToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|feature
operator|=
name|normalize
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|feature
operator|.
name|substring
argument_list|(
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|fKey
range|:
name|getFeatures
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|fKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Feature
name|f
init|=
name|getFeatureMatching
argument_list|(
name|getFeatures
argument_list|()
operator|.
name|get
argument_list|(
name|fKey
argument_list|)
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|String
name|req
init|=
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|featuresToAdd
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|Feature
index|[]
name|installedFeatures
init|=
name|listInstalledFeatures
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|installedFeatures
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|installedFeatures
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|installedFeatures
index|[
name|i
index|]
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The specified feature: '"
operator|+
name|installedFeatures
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"' version '"
operator|+
name|installedFeatures
index|[
name|i
index|]
operator|.
name|getVersion
argument_list|()
operator|+
literal|"' is already installed"
argument_list|)
expr_stmt|;
block|}
block|}
name|matched
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|matched
operator|&&
operator|!
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|NoFailOnFeatureNotFound
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No matching features for "
operator|+
name|feature
argument_list|)
throw|;
block|}
if|if
condition|(
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Upgrade
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|existentFeatureReq
range|:
name|fl
control|)
block|{
comment|//remove requirement prefix feature:
name|String
name|existentFeature
init|=
name|existentFeatureReq
operator|.
name|substring
argument_list|(
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existentFeature
operator|.
name|startsWith
argument_list|(
name|name
operator|+
literal|"/"
argument_list|)
operator|&&
operator|!
name|featuresToAdd
operator|.
name|contains
argument_list|(
name|existentFeature
argument_list|)
condition|)
block|{
name|featuresToRemove
operator|.
name|add
argument_list|(
name|existentFeature
argument_list|)
expr_stmt|;
comment|//do not break cycle to remove all old versions of feature
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|featuresToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|print
argument_list|(
literal|"Removing features: "
operator|+
name|join
argument_list|(
name|featuresToRemove
argument_list|)
argument_list|,
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Verbose
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|featureReq
range|:
name|featuresToRemove
control|)
block|{
name|fl
operator|.
name|remove
argument_list|(
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|+
name|featureReq
argument_list|)
expr_stmt|;
block|}
block|}
name|featuresToAdd
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|featuresToAdd
argument_list|)
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"Adding features: "
operator|+
name|join
argument_list|(
name|featuresToAdd
argument_list|)
argument_list|,
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Verbose
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|featuresToAdd
control|)
block|{
name|fl
operator|.
name|add
argument_list|(
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|+
name|feature
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|doProvisionInThread
argument_list|(
name|required
argument_list|,
name|stateChanges
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uninstallFeatures
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|String
name|region
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|State
name|state
init|=
name|copyState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|required
init|=
name|copy
argument_list|(
name|state
operator|.
name|requirements
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|==
literal|null
operator|||
name|region
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|region
operator|=
name|ROOT_REGION
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fl
init|=
name|required
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|fl
operator|==
literal|null
condition|)
block|{
name|fl
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|required
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|fl
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|featuresToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|feature
range|:
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|features
argument_list|)
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|toRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|feature
operator|=
name|normalize
argument_list|(
name|feature
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|endsWith
argument_list|(
literal|"/0.0.0"
argument_list|)
condition|)
block|{
comment|// Match only on name
name|String
name|nameSep
init|=
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|+
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fl
control|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|nameSep
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nameSep
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
operator|||
name|normalize
argument_list|(
name|f
argument_list|)
operator|.
name|startsWith
argument_list|(
name|nameSep
argument_list|)
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// Match on name and version
name|String
name|name
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|feature
operator|.
name|substring
argument_list|(
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Pattern
name|pattern
init|=
name|getFeaturePattern
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fl
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|toRemove
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|toRemove
operator|.
name|retainAll
argument_list|(
name|fl
argument_list|)
expr_stmt|;
if|if
condition|(
name|toRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Feature named '"
operator|+
name|feature
operator|+
literal|"' is not installed"
argument_list|)
throw|;
block|}
name|featuresToRemove
operator|.
name|addAll
argument_list|(
name|toRemove
argument_list|)
expr_stmt|;
block|}
name|featuresToRemove
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|featuresToRemove
argument_list|)
argument_list|)
expr_stmt|;
name|print
argument_list|(
literal|"Removing features: "
operator|+
name|join
argument_list|(
name|featuresToRemove
argument_list|)
argument_list|,
name|options
operator|.
name|contains
argument_list|(
name|Option
operator|.
name|Verbose
argument_list|)
argument_list|)
expr_stmt|;
name|fl
operator|.
name|removeAll
argument_list|(
name|featuresToRemove
argument_list|)
expr_stmt|;
if|if
condition|(
name|fl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|required
operator|.
name|remove
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|doProvisionInThread
argument_list|(
name|required
argument_list|,
name|stateChanges
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateFeaturesState
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|State
name|state
init|=
name|copyState
argument_list|()
decl_stmt|;
name|doProvisionInThread
argument_list|(
name|copy
argument_list|(
name|state
operator|.
name|requirements
argument_list|)
argument_list|,
name|stateChanges
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRequirements
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|State
name|state
init|=
name|copyState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|required
init|=
name|copy
argument_list|(
name|state
operator|.
name|requirements
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|required
argument_list|,
name|requirements
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|doProvisionInThread
argument_list|(
name|required
argument_list|,
name|stateChanges
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeRequirements
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|State
name|state
init|=
name|copyState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|required
init|=
name|copy
argument_list|(
name|state
operator|.
name|requirements
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|required
argument_list|,
name|requirements
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
name|doProvisionInThread
argument_list|(
name|required
argument_list|,
name|stateChanges
argument_list|,
name|state
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|listRequirements
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|copy
argument_list|(
name|this
operator|.
name|state
operator|.
name|requirements
argument_list|)
return|;
block|}
block|}
specifier|private
name|State
name|copyState
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|this
operator|.
name|state
operator|.
name|copy
argument_list|()
return|;
block|}
block|}
specifier|protected
name|String
name|normalize
parameter_list|(
name|String
name|feature
parameter_list|)
block|{
if|if
condition|(
operator|!
name|feature
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|feature
operator|+=
literal|"/0.0.0"
expr_stmt|;
block|}
name|int
name|idx
init|=
name|feature
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|feature
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|name
operator|+
literal|"/"
operator|+
name|VersionCleaner
operator|.
name|clean
argument_list|(
name|version
argument_list|)
return|;
block|}
comment|/**      * Actual deployment needs to be done in a separate thread.      * The reason is that if the console is refreshed, the current thread which is running      * the command may be interrupted while waiting for the refresh to be done, leading      * to bundles not being started after the refresh.      *      * @param requirements the provided requirements to match.      * @param stateChanges the current features state.      * @param state the current provisioning state.      * @param options the provisioning options.      * @throws Exception in case of provisioning failure.      */
specifier|public
name|void
name|doProvisionInThread
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
parameter_list|,
specifier|final
name|State
name|state
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|String
name|outputFile
init|=
name|this
operator|.
name|outputFile
operator|.
name|get
argument_list|()
decl_stmt|;
name|this
operator|.
name|outputFile
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|doProvision
argument_list|(
name|requirements
argument_list|,
name|stateChanges
argument_list|,
name|state
argument_list|,
name|options
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|protected
name|Deployer
operator|.
name|DeploymentState
name|getDeploymentState
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|Deployer
operator|.
name|DeploymentState
name|dstate
init|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
decl_stmt|;
comment|// State
name|dstate
operator|.
name|state
operator|=
name|state
expr_stmt|;
comment|// Service bundle
name|dstate
operator|.
name|serviceBundle
operator|=
name|bundle
expr_stmt|;
comment|// Start level
name|FrameworkStartLevel
name|fsl
init|=
name|systemBundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|adapt
argument_list|(
name|FrameworkStartLevel
operator|.
name|class
argument_list|)
decl_stmt|;
name|dstate
operator|.
name|initialBundleStartLevel
operator|=
name|fsl
operator|.
name|getInitialBundleStartLevel
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|currentStartLevel
operator|=
name|fsl
operator|.
name|getStartLevel
argument_list|()
expr_stmt|;
comment|// Bundles
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|systemBundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|dstate
operator|.
name|bundles
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
comment|// Features
name|dstate
operator|.
name|features
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|m
range|:
name|getFeatures
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|m
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|id
init|=
name|feature
operator|.
name|getId
argument_list|()
decl_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Region -> bundles mapping
comment|// Region -> policy mapping
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|RegionDigraph
name|clone
init|=
name|digraph
operator|.
name|copy
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|clone
operator|.
name|getRegions
argument_list|()
control|)
block|{
comment|// Get bundles
name|dstate
operator|.
name|bundlesPerRegion
operator|.
name|put
argument_list|(
name|region
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|region
operator|.
name|getBundleIds
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get policies
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|edges
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionDigraph
operator|.
name|FilteredRegion
name|fr
range|:
name|clone
operator|.
name|getEdges
argument_list|(
name|region
argument_list|)
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|policy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|current
init|=
name|fr
operator|.
name|getFilter
argument_list|()
operator|.
name|getSharingPolicy
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|current
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|f
range|:
name|current
operator|.
name|get
argument_list|(
name|ns
argument_list|)
control|)
block|{
name|addToMapSet
argument_list|(
name|policy
argument_list|,
name|ns
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|edges
operator|.
name|put
argument_list|(
name|fr
operator|.
name|getRegion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
name|dstate
operator|.
name|filtersPerRegion
operator|.
name|put
argument_list|(
name|region
operator|.
name|getName
argument_list|()
argument_list|,
name|edges
argument_list|)
expr_stmt|;
block|}
comment|// Return
return|return
name|dstate
return|;
block|}
specifier|private
name|Deployer
operator|.
name|DeploymentRequest
name|getDeploymentRequest
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
name|String
name|outputFile
parameter_list|)
block|{
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|bundleUpdateRange
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|featureResolutionRange
expr_stmt|;
name|request
operator|.
name|serviceRequirements
operator|=
name|serviceRequirements
expr_stmt|;
name|request
operator|.
name|updateSnaphots
operator|=
name|updateSnaphots
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
name|globalRepository
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
name|Overrides
operator|.
name|loadOverrides
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
name|requirements
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
name|stateChanges
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|request
operator|.
name|outputFile
operator|=
name|outputFile
expr_stmt|;
return|return
name|request
return|;
block|}
specifier|public
name|void
name|doProvision
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
parameter_list|,
comment|// all requirements
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|FeatureState
argument_list|>
argument_list|>
name|stateChanges
parameter_list|,
comment|// features state changes
name|State
name|state
parameter_list|,
comment|// current state
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
comment|// installation options
name|String
name|outputFile
comment|// file to store the resolution or null
parameter_list|)
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|getMavenConfig
argument_list|()
decl_stmt|;
name|MavenResolver
name|resolver
init|=
name|MavenResolvers
operator|.
name|createMavenResolver
argument_list|(
name|props
argument_list|,
literal|"org.ops4j.pax.url.mvn"
argument_list|)
decl_stmt|;
name|ScheduledThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
name|downloadThreads
argument_list|)
decl_stmt|;
name|executor
operator|.
name|setMaximumPoolSize
argument_list|(
name|downloadThreads
argument_list|)
expr_stmt|;
name|DownloadManager
name|manager
init|=
name|DownloadManagers
operator|.
name|createDownloadManager
argument_list|(
name|resolver
argument_list|,
name|executor
argument_list|,
name|scheduleDelay
argument_list|,
name|scheduleMaxRun
argument_list|)
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|prereqs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Deployer
operator|.
name|DeploymentState
name|dstate
init|=
name|getDeploymentState
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
name|getDeploymentRequest
argument_list|(
name|requirements
argument_list|,
name|stateChanges
argument_list|,
name|options
argument_list|,
name|outputFile
argument_list|)
decl_stmt|;
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|this
operator|.
name|resolver
argument_list|,
name|this
argument_list|)
operator|.
name|deploy
argument_list|(
name|dstate
argument_list|,
name|request
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Deployer
operator|.
name|PartialDeploymentException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prereqs
operator|.
name|containsAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
condition|)
block|{
name|prereqs
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|=
name|copyState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Deployment aborted due to loop in missing prerequisites: "
operator|+
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMavenConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurationAdmin
operator|!=
literal|null
condition|)
block|{
name|Configuration
name|config
init|=
name|configurationAdmin
operator|.
name|getConfiguration
argument_list|(
literal|"org.ops4j.pax.url.mvn"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cfg
init|=
name|config
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|cfg
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|cfg
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|props
return|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshPackages
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|FrameworkWiring
name|fw
init|=
name|systemBundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|adapt
argument_list|(
name|FrameworkWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|fw
operator|.
name|refreshBundles
argument_list|(
name|bundles
argument_list|,
operator|new
name|FrameworkListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|frameworkEvent
parameter_list|(
name|FrameworkEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|FrameworkEvent
operator|.
name|ERROR
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Framework error"
argument_list|,
name|event
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|saveState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|state
operator|.
name|repositories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|state
operator|.
name|repositories
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|state
operator|.
name|repositories
argument_list|)
expr_stmt|;
name|state
operator|.
name|bootDone
operator|.
name|set
argument_list|(
name|this
operator|.
name|state
operator|.
name|bootDone
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|state
operator|.
name|replace
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|persistResolveRequest
parameter_list|(
name|Deployer
operator|.
name|DeploymentRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|writeResolve
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|request
operator|.
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|Feature
name|feature
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
if|if
condition|(
name|configInstaller
operator|!=
literal|null
condition|)
block|{
name|configInstaller
operator|.
name|installFeatureConfigs
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
comment|// TODO: install libraries
block|}
annotation|@
name|Override
specifier|public
name|Bundle
name|installBundle
parameter_list|(
name|String
name|region
parameter_list|,
name|String
name|uri
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|BundleException
block|{
if|if
condition|(
name|ROOT_REGION
operator|.
name|equals
argument_list|(
name|region
argument_list|)
condition|)
block|{
return|return
name|digraph
operator|.
name|getRegion
argument_list|(
name|region
argument_list|)
operator|.
name|installBundleAtLocation
argument_list|(
name|uri
argument_list|,
name|is
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|digraph
operator|.
name|getRegion
argument_list|(
name|region
argument_list|)
operator|.
name|installBundle
argument_list|(
name|uri
argument_list|,
name|is
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|uri
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|BundleException
block|{
comment|// We need to wrap the bundle to insert a Bundle-UpdateLocation header
try|try
block|{
name|File
name|file
init|=
name|BundleUtils
operator|.
name|fixBundleWithUpdateLocation
argument_list|(
name|is
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|update
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BundleException
argument_list|(
literal|"Unable to update bundle"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstall
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|BundleException
block|{
name|bundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|BundleException
block|{
name|bundle
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stopBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|int
name|options
parameter_list|)
throws|throws
name|BundleException
block|{
name|bundle
operator|.
name|stop
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBundleStartLevel
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|int
name|startLevel
parameter_list|)
block|{
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|startLevel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resolveBundles
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
specifier|final
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
name|resToBnd
parameter_list|)
block|{
comment|// Make sure it's only used for us
specifier|final
name|Thread
name|thread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
comment|// Translate wiring
specifier|final
name|Map
argument_list|<
name|Bundle
argument_list|,
name|Resource
argument_list|>
name|bndToRes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|res
range|:
name|resToBnd
operator|.
name|keySet
argument_list|()
control|)
block|{
name|bndToRes
operator|.
name|put
argument_list|(
name|resToBnd
operator|.
name|get
argument_list|(
name|res
argument_list|)
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
comment|// Hook
specifier|final
name|ResolverHook
name|hook
init|=
operator|new
name|ResolverHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|filterResolvable
parameter_list|(
name|Collection
argument_list|<
name|BundleRevision
argument_list|>
name|candidates
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|filterSingletonCollisions
parameter_list|(
name|BundleCapability
name|singleton
parameter_list|,
name|Collection
argument_list|<
name|BundleCapability
argument_list|>
name|collisionCandidates
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|filterMatches
parameter_list|(
name|BundleRequirement
name|requirement
parameter_list|,
name|Collection
argument_list|<
name|BundleCapability
argument_list|>
name|candidates
parameter_list|)
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|==
name|thread
condition|)
block|{
comment|// osgi.ee capabilities are provided by the system bundle, so just ignore those
if|if
condition|(
name|ExecutionEnvironmentNamespace
operator|.
name|EXECUTION_ENVIRONMENT_NAMESPACE
operator|.
name|equals
argument_list|(
name|requirement
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|Bundle
name|sourceBundle
init|=
name|requirement
operator|.
name|getRevision
argument_list|()
operator|.
name|getBundle
argument_list|()
decl_stmt|;
name|Resource
name|sourceResource
init|=
name|bndToRes
operator|.
name|get
argument_list|(
name|sourceBundle
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Resource
argument_list|>
name|wired
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Get a list of allowed wired resources
name|wired
operator|.
name|add
argument_list|(
name|sourceResource
argument_list|)
expr_stmt|;
for|for
control|(
name|Wire
name|wire
range|:
name|wiring
operator|.
name|get
argument_list|(
name|sourceResource
argument_list|)
control|)
block|{
name|wired
operator|.
name|add
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|HostNamespace
operator|.
name|HOST_NAMESPACE
operator|.
name|equals
argument_list|(
name|wire
operator|.
name|getRequirement
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Wire
name|hostWire
range|:
name|wiring
operator|.
name|get
argument_list|(
name|wire
operator|.
name|getProvider
argument_list|()
argument_list|)
control|)
block|{
name|wired
operator|.
name|add
argument_list|(
name|hostWire
operator|.
name|getProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Remove candidates that are not allowed
for|for
control|(
name|Iterator
argument_list|<
name|BundleCapability
argument_list|>
name|candIter
init|=
name|candidates
operator|.
name|iterator
argument_list|()
init|;
name|candIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BundleCapability
name|cand
init|=
name|candIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|BundleRevision
name|br
init|=
name|cand
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|br
operator|.
name|getTypes
argument_list|()
operator|&
name|BundleRevision
operator|.
name|TYPE_FRAGMENT
operator|)
operator|!=
literal|0
condition|)
block|{
name|br
operator|=
name|br
operator|.
name|getWiring
argument_list|()
operator|.
name|getRequiredWires
argument_list|(
literal|null
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProvider
argument_list|()
expr_stmt|;
block|}
name|Resource
name|res
init|=
name|bndToRes
operator|.
name|get
argument_list|(
name|br
operator|.
name|getBundle
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wired
operator|.
name|contains
argument_list|(
name|br
argument_list|)
operator|&&
operator|!
name|wired
operator|.
name|contains
argument_list|(
name|res
argument_list|)
condition|)
block|{
name|candIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|end
parameter_list|()
block|{             }
block|}
decl_stmt|;
name|ResolverHookFactory
name|factory
init|=
operator|new
name|ResolverHookFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ResolverHook
name|begin
parameter_list|(
name|Collection
argument_list|<
name|BundleRevision
argument_list|>
name|triggers
parameter_list|)
block|{
return|return
name|hook
return|;
block|}
block|}
decl_stmt|;
name|ServiceRegistration
argument_list|<
name|ResolverHookFactory
argument_list|>
name|registration
init|=
name|systemBundleContext
operator|.
name|registerService
argument_list|(
name|ResolverHookFactory
operator|.
name|class
argument_list|,
name|factory
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|FrameworkWiring
name|frameworkWiring
init|=
name|systemBundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|adapt
argument_list|(
name|FrameworkWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|frameworkWiring
operator|.
name|resolveBundles
argument_list|(
name|bundles
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|replaceDigraph
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|policies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|BundleException
throws|,
name|InvalidSyntaxException
block|{
name|RegionDigraph
name|temp
init|=
name|digraph
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// Remove everything
for|for
control|(
name|Region
name|region
range|:
name|temp
operator|.
name|getRegions
argument_list|()
control|)
block|{
name|temp
operator|.
name|removeRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|// Re-create regions
for|for
control|(
name|String
name|name
range|:
name|policies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|temp
operator|.
name|createRegion
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Dispatch bundles
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|bundles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Region
name|region
init|=
name|temp
operator|.
name|getRegion
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|bundleId
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|region
operator|.
name|addBundle
argument_list|(
name|bundleId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add policies
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|entry1
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Region
name|region1
init|=
name|temp
operator|.
name|getRegion
argument_list|(
name|entry1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|entry2
range|:
name|entry1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Region
name|region2
init|=
name|temp
operator|.
name|getRegion
argument_list|(
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|RegionFilterBuilder
name|rfb
init|=
name|temp
operator|.
name|createRegionFilterBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry3
range|:
name|entry2
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|flt
range|:
name|entry3
operator|.
name|getValue
argument_list|()
control|)
block|{
name|rfb
operator|.
name|allow
argument_list|(
name|entry3
operator|.
name|getKey
argument_list|()
argument_list|,
name|flt
argument_list|)
expr_stmt|;
block|}
block|}
name|region1
operator|.
name|connectRegion
argument_list|(
name|region2
argument_list|,
name|rfb
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|digraph
operator|.
name|replace
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Pattern
name|getFeaturePattern
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|String
name|req
init|=
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|+
name|name
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|req
operator|=
name|req
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|"\\["
argument_list|)
expr_stmt|;
name|req
operator|=
name|req
operator|.
name|replace
argument_list|(
literal|"("
argument_list|,
literal|"\\("
argument_list|)
expr_stmt|;
name|req
operator|=
name|req
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|"\\]"
argument_list|)
expr_stmt|;
name|req
operator|=
name|req
operator|.
name|replace
argument_list|(
literal|")"
argument_list|,
literal|"\\)"
argument_list|)
expr_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|pattern
return|;
block|}
specifier|private
name|String
name|join
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

