begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_comment
comment|/**  *<p>Helper class to compare feature identifiers that may use globs and version ranges.</p>  *  *<p>Following feature identifiers are supported:<ul>  *<li>name (simple name)</li>  *<li>name/version (Karaf feature ID syntax)</li>  *<li>name/version-range (Karaf feature ID syntax using version-range)</li>  *<li>name;range=version (OSGi manifest header with<code>range</code><em>attribute</em>)</li>  *<li>name;range=version-range (OSGi manifest header with<code>range</code><em>attribute</em>)</li>  *</ul></p>  */
end_comment

begin_class
specifier|public
class|class
name|FeaturePattern
block|{
specifier|public
specifier|static
specifier|final
name|String
name|RANGE
init|=
literal|"range"
decl_stmt|;
specifier|private
name|String
name|originalId
decl_stmt|;
specifier|private
name|Pattern
name|namePattern
decl_stmt|;
specifier|private
name|String
name|versionString
decl_stmt|;
specifier|private
name|Version
name|version
decl_stmt|;
specifier|private
name|VersionRange
name|versionRange
decl_stmt|;
specifier|public
name|FeaturePattern
parameter_list|(
name|String
name|featureId
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|featureId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Feature ID to match should not be null"
argument_list|)
throw|;
block|}
name|originalId
operator|=
name|featureId
expr_stmt|;
name|String
name|name
init|=
name|originalId
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|originalId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|originalId
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|versionString
operator|=
name|originalId
operator|.
name|substring
argument_list|(
name|originalId
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
name|Clause
index|[]
name|c
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseClauses
argument_list|(
operator|new
name|String
index|[]
block|{
name|originalId
block|}
argument_list|)
decl_stmt|;
name|name
operator|=
name|c
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
name|versionString
operator|=
name|c
index|[
literal|0
index|]
operator|.
name|getAttribute
argument_list|(
name|RANGE
argument_list|)
expr_stmt|;
block|}
name|namePattern
operator|=
name|LocationPattern
operator|.
name|toRegExp
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|versionString
operator|!=
literal|null
operator|&&
name|versionString
operator|.
name|length
argument_list|()
operator|>=
literal|1
condition|)
block|{
try|try
block|{
name|char
name|first
init|=
name|versionString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|'['
operator|||
name|first
operator|==
literal|'('
condition|)
block|{
comment|// range
name|versionRange
operator|=
operator|new
name|VersionRange
argument_list|(
name|versionString
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|version
operator|=
operator|new
name|Version
argument_list|(
name|VersionCleaner
operator|.
name|clean
argument_list|(
name|versionString
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't parse version \""
operator|+
name|versionString
operator|+
literal|"\" as OSGi version object."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|versionRange
operator|=
operator|new
name|VersionRange
argument_list|(
name|Version
operator|.
name|emptyVersion
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns<code>if this feature pattern</code> matches given feature/version      * @param featureName      * @param featureVersion      * @return      */
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|featureName
parameter_list|,
name|String
name|featureVersion
parameter_list|)
block|{
if|if
condition|(
name|featureName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|match
init|=
name|namePattern
operator|.
name|matcher
argument_list|(
name|featureName
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|featureVersion
operator|==
literal|null
condition|)
block|{
name|featureVersion
operator|=
literal|"0"
expr_stmt|;
block|}
name|Version
name|otherVersion
init|=
operator|new
name|Version
argument_list|(
name|VersionCleaner
operator|.
name|clean
argument_list|(
name|featureVersion
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionRange
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
name|versionRange
operator|.
name|contains
argument_list|(
name|otherVersion
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|match
operator|=
name|version
operator|.
name|equals
argument_list|(
name|otherVersion
argument_list|)
expr_stmt|;
block|}
return|return
name|match
return|;
block|}
block|}
end_class

end_unit

