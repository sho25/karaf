begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|ResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|simple
operator|.
name|SimpleDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|CapabilitySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|SimpleFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|Slf4jResolverLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|internal
operator|.
name|region
operator|.
name|StandardRegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionFilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_FEATURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_SUBSYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|invert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|TYPE_BUNDLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|TYPE_FRAGMENT
import|;
end_import

begin_class
specifier|public
class|class
name|SubsystemResolver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubsystemResolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DownloadManager
name|manager
decl_stmt|;
specifier|private
name|RegionDigraph
name|digraph
decl_stmt|;
specifier|private
name|Subsystem
name|root
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
decl_stmt|;
specifier|public
name|SubsystemResolver
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|SimpleDownloader
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SubsystemResolver
parameter_list|(
name|DownloadManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|resolve
parameter_list|(
name|Collection
argument_list|<
name|Feature
argument_list|>
name|allFeatures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|features
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BundleRevision
argument_list|>
argument_list|>
name|system
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|overrides
parameter_list|,
name|String
name|featureResolutionRange
parameter_list|,
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
name|globalRepository
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Build subsystems on the fly
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|features
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
index|[]
name|parts
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
operator|new
name|Subsystem
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not use multiple roots: "
operator|+
name|root
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|parts
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
name|Subsystem
name|ss
init|=
name|root
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ss
operator|=
name|getOrCreateChild
argument_list|(
name|ss
argument_list|,
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|feature
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|name
decl_stmt|,
name|range
decl_stmt|;
name|int
name|idx
init|=
name|feature
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|name
operator|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|range
operator|=
name|feature
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|feature
expr_stmt|;
name|range
operator|=
literal|null
expr_stmt|;
block|}
name|ss
operator|.
name|requireFeature
argument_list|(
name|name
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|// Pre-resolve
name|root
operator|.
name|preResolve
argument_list|(
name|allFeatures
argument_list|,
name|manager
argument_list|,
name|overrides
argument_list|,
name|featureResolutionRange
argument_list|)
expr_stmt|;
comment|// Add system resources
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BundleRevision
argument_list|>
argument_list|>
name|entry
range|:
name|system
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Subsystem
name|ss
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ss
operator|=
name|root
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|ss
operator|!=
literal|null
operator|&&
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|+=
literal|"/"
operator|+
name|parts
index|[
name|i
index|]
expr_stmt|;
name|ss
operator|=
name|ss
operator|.
name|getChild
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Resource
name|res
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ss
operator|.
name|addSystemResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Populate digraph and resolve
name|digraph
operator|=
operator|new
name|StandardRegionDigraph
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|populateDigraph
argument_list|(
name|digraph
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|Resolver
name|resolver
init|=
operator|new
name|ResolverImpl
argument_list|(
operator|new
name|Slf4jResolverLog
argument_list|(
name|LOGGER
argument_list|)
argument_list|)
decl_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
name|wiring
operator|=
name|resolver
operator|.
name|resolve
argument_list|(
operator|new
name|SubsystemResolveContext
argument_list|(
name|root
argument_list|,
name|digraph
argument_list|,
name|globalRepository
argument_list|,
name|downloader
argument_list|)
argument_list|)
expr_stmt|;
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Fragments are always wired to their host only, so create fake wiring to
comment|// the subsystem the host is wired to
name|associateFragments
argument_list|()
expr_stmt|;
return|return
name|wiring
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|getBundleInfos
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|infos
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flats
init|=
name|getFlatSubsystemsMap
argument_list|()
decl_stmt|;
name|addBundleInfos
argument_list|(
name|infos
argument_list|,
name|root
argument_list|,
name|flats
argument_list|)
expr_stmt|;
return|return
name|infos
return|;
block|}
specifier|private
name|void
name|addBundleInfos
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|infos
parameter_list|,
name|Subsystem
name|subsystem
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flats
parameter_list|)
block|{
name|String
name|region
init|=
name|flats
operator|.
name|get
argument_list|(
name|subsystem
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
name|bis
init|=
name|infos
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|bis
operator|==
literal|null
condition|)
block|{
name|bis
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|()
expr_stmt|;
name|infos
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|bis
argument_list|)
expr_stmt|;
block|}
name|bis
operator|.
name|putAll
argument_list|(
name|subsystem
operator|.
name|getBundleInfos
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|addBundleInfos
argument_list|(
name|infos
argument_list|,
name|child
argument_list|,
name|flats
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|getProviders
parameter_list|()
block|{
return|return
name|manager
operator|.
name|getProviders
argument_list|()
return|;
block|}
specifier|public
name|RegionDigraph
name|getDigraph
parameter_list|()
block|{
return|return
name|digraph
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|getWiring
parameter_list|()
block|{
return|return
name|wiring
return|;
block|}
specifier|public
name|RegionDigraph
name|getFlatDigraph
parameter_list|()
throws|throws
name|BundleException
throws|,
name|InvalidSyntaxException
block|{
name|RegionDigraph
name|clone
init|=
name|this
operator|.
name|digraph
operator|.
name|copy
argument_list|()
decl_stmt|;
name|RegionDigraph
name|computedDigraph
init|=
name|digraph
decl_stmt|;
for|for
control|(
name|Region
name|r
range|:
name|clone
operator|.
name|getRegions
argument_list|()
control|)
block|{
name|clone
operator|.
name|removeRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flats
init|=
name|getFlatSubsystemsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Region
name|r
range|:
name|computedDigraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|flats
operator|.
name|get
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|clone
operator|.
name|createRegion
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Region
name|r
range|:
name|computedDigraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
for|for
control|(
name|RegionDigraph
operator|.
name|FilteredRegion
name|fr
range|:
name|computedDigraph
operator|.
name|getEdges
argument_list|(
name|r
argument_list|)
control|)
block|{
name|String
name|rt
init|=
name|flats
operator|.
name|get
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rh
init|=
name|flats
operator|.
name|get
argument_list|(
name|fr
operator|.
name|getRegion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rh
operator|.
name|equals
argument_list|(
name|rt
argument_list|)
condition|)
block|{
name|Region
name|tail
init|=
name|clone
operator|.
name|getRegion
argument_list|(
name|rt
argument_list|)
decl_stmt|;
name|Region
name|head
init|=
name|clone
operator|.
name|getRegion
argument_list|(
name|rh
argument_list|)
decl_stmt|;
name|RegionFilterBuilder
name|rfb
init|=
name|clone
operator|.
name|createRegionFilterBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|fr
operator|.
name|getFilter
argument_list|()
operator|.
name|getSharingPolicy
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Discard osgi.identity namespace
if|if
condition|(
operator|!
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|f
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|rfb
operator|.
name|allow
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|clone
operator|.
name|connect
argument_list|(
name|tail
argument_list|,
name|rfb
operator|.
name|build
argument_list|()
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|clone
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFlatSubsystemsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toFlatten
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|findSubsystemsToFlatten
argument_list|(
name|root
argument_list|,
name|toFlatten
argument_list|)
expr_stmt|;
return|return
name|toFlatten
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|getBundlesPerRegions
parameter_list|()
block|{
return|return
name|invert
argument_list|(
name|getBundles
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|getBundles
parameter_list|()
block|{
name|String
name|filter
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=*)(|(%s=%s)(%s=%s)))"
argument_list|,
name|IDENTITY_NAMESPACE
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_BUNDLE
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_FRAGMENT
argument_list|)
decl_stmt|;
name|SimpleFilter
name|sf
init|=
name|SimpleFilter
operator|.
name|parse
argument_list|(
name|filter
argument_list|)
decl_stmt|;
return|return
name|getResourceMapping
argument_list|(
name|sf
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|getFeaturesPerRegions
parameter_list|()
block|{
return|return
name|invert
argument_list|(
name|getFeatures
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|getFeatures
parameter_list|()
block|{
name|SimpleFilter
name|sf
init|=
name|createFilter
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
literal|"*"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_FEATURE
argument_list|)
decl_stmt|;
return|return
name|getResourceMapping
argument_list|(
name|sf
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|getResourcesPerRegion
parameter_list|(
name|SimpleFilter
name|resourceFilter
parameter_list|)
block|{
return|return
name|invert
argument_list|(
name|getResourceMapping
argument_list|(
name|resourceFilter
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|getResourceMapping
parameter_list|(
name|SimpleFilter
name|resourceFilter
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flats
init|=
name|getFlatSubsystemsMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
init|=
name|getWiring
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SimpleFilter
name|sf
init|=
name|createFilter
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
literal|"*"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|)
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|wiring
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|findMatchingCapability
argument_list|(
name|resourceFilter
argument_list|,
name|resource
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Find the subsystem where this feature is installed
name|Wire
name|wire
init|=
name|findMatchingWire
argument_list|(
name|sf
argument_list|,
name|wiring
operator|.
name|get
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wire
operator|!=
literal|null
condition|)
block|{
name|String
name|region
init|=
operator|(
name|String
operator|)
name|wire
operator|.
name|getCapability
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|)
decl_stmt|;
name|region
operator|=
name|flats
operator|.
name|get
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|resources
return|;
block|}
specifier|private
name|void
name|associateFragments
parameter_list|()
block|{
name|SimpleFilter
name|sf
init|=
name|createFilter
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
literal|"*"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|entry
range|:
name|wiring
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Resource
name|resource
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Requirement
name|requirement
init|=
name|getSubsystemRequirement
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isFragment
argument_list|(
name|resource
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Wire
argument_list|>
name|wires
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Resource
name|host
init|=
name|wires
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProvider
argument_list|()
decl_stmt|;
specifier|final
name|Wire
name|wire
init|=
name|findMatchingWire
argument_list|(
name|sf
argument_list|,
name|wiring
operator|.
name|get
argument_list|(
name|host
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wire
operator|!=
literal|null
condition|)
block|{
name|wires
operator|.
name|add
argument_list|(
operator|new
name|Wire
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Capability
name|getCapability
parameter_list|()
block|{
return|return
name|wire
operator|.
name|getCapability
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Requirement
name|getRequirement
parameter_list|()
block|{
return|return
name|requirement
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getProvider
parameter_list|()
block|{
return|return
name|wire
operator|.
name|getProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getRequirer
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Requirement
name|getSubsystemRequirement
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
for|for
control|(
name|Requirement
name|requirement
range|:
name|resource
operator|.
name|getRequirements
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|requirement
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|TYPE_SUBSYSTEM
operator|.
name|equals
argument_list|(
name|requirement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|requirement
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Capability
name|findMatchingCapability
parameter_list|(
name|SimpleFilter
name|filter
parameter_list|,
name|Collection
argument_list|<
name|Capability
argument_list|>
name|caps
parameter_list|)
block|{
for|for
control|(
name|Capability
name|cap
range|:
name|caps
control|)
block|{
if|if
condition|(
name|CapabilitySet
operator|.
name|matches
argument_list|(
name|cap
argument_list|,
name|filter
argument_list|)
condition|)
block|{
return|return
name|cap
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Wire
name|findMatchingWire
parameter_list|(
name|SimpleFilter
name|filter
parameter_list|,
name|Collection
argument_list|<
name|Wire
argument_list|>
name|wires
parameter_list|)
block|{
for|for
control|(
name|Wire
name|wire
range|:
name|wires
control|)
block|{
name|Capability
name|cap
init|=
name|wire
operator|.
name|getCapability
argument_list|()
decl_stmt|;
if|if
condition|(
name|CapabilitySet
operator|.
name|matches
argument_list|(
name|cap
argument_list|,
name|filter
argument_list|)
condition|)
block|{
return|return
name|wire
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|SimpleFilter
name|createFilter
parameter_list|(
name|String
modifier|...
name|s
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|s
index|[
name|i
index|]
argument_list|,
name|s
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|SimpleFilter
operator|.
name|convert
argument_list|(
name|attrs
argument_list|)
return|;
block|}
specifier|private
name|void
name|findSubsystemsToFlatten
parameter_list|(
name|Subsystem
name|subsystem
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toFlatten
parameter_list|)
block|{
name|Subsystem
name|nonFlat
init|=
name|subsystem
decl_stmt|;
while|while
condition|(
name|isFlat
argument_list|(
name|nonFlat
argument_list|)
condition|)
block|{
name|nonFlat
operator|=
name|nonFlat
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|toFlatten
operator|.
name|put
argument_list|(
name|subsystem
operator|.
name|getName
argument_list|()
argument_list|,
name|nonFlat
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|findSubsystemsToFlatten
argument_list|(
name|child
argument_list|,
name|toFlatten
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isFlat
parameter_list|(
name|Subsystem
name|subsystem
parameter_list|)
block|{
return|return
name|subsystem
operator|.
name|getFeature
argument_list|()
operator|!=
literal|null
operator|&&
name|subsystem
operator|.
name|getFeature
argument_list|()
operator|.
name|getScoping
argument_list|()
operator|==
literal|null
return|;
block|}
specifier|private
name|Subsystem
name|getOrCreateChild
parameter_list|(
name|Subsystem
name|ss
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Subsystem
name|child
init|=
name|ss
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|child
operator|!=
literal|null
condition|?
name|child
else|:
name|ss
operator|.
name|createSubsystem
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|void
name|populateDigraph
parameter_list|(
name|RegionDigraph
name|digraph
parameter_list|,
name|Subsystem
name|subsystem
parameter_list|)
throws|throws
name|BundleException
throws|,
name|InvalidSyntaxException
block|{
name|Region
name|region
init|=
name|digraph
operator|.
name|createRegion
argument_list|(
name|subsystem
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subsystem
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Region
name|parent
init|=
name|digraph
operator|.
name|getRegion
argument_list|(
name|subsystem
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|digraph
operator|.
name|connect
argument_list|(
name|region
argument_list|,
name|createRegionFilterBuilder
argument_list|(
name|digraph
argument_list|,
name|subsystem
operator|.
name|getImportPolicy
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|digraph
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|createRegionFilterBuilder
argument_list|(
name|digraph
argument_list|,
name|subsystem
operator|.
name|getExportPolicy
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|populateDigraph
argument_list|(
name|digraph
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RegionFilterBuilder
name|createRegionFilterBuilder
parameter_list|(
name|RegionDigraph
name|digraph
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|sharingPolicy
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|RegionFilterBuilder
name|result
init|=
name|digraph
operator|.
name|createRegionFilterBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|sharingPolicy
operator|.
name|entrySet
argument_list|()
control|)
for|for
control|(
name|String
name|filter
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
name|result
operator|.
name|allow
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

