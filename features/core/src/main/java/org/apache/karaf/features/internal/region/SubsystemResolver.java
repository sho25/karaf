begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|collections
operator|.
name|DictionaryAsMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|BaseClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|CapabilityImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|CapabilitySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|RequirementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResolverUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|SimpleFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|JsonWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|internal
operator|.
name|region
operator|.
name|StandardRegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionDigraph
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionFilterBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|namespace
operator|.
name|service
operator|.
name|ServiceNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_FEATURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_SUBSYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|invert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|PROVIDE_CAPABILITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|ExecutionEnvironmentNamespace
operator|.
name|EXECUTION_ENVIRONMENT_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|TYPE_BUNDLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|TYPE_FRAGMENT
import|;
end_import

begin_class
specifier|public
class|class
name|SubsystemResolver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubsystemResolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DownloadManager
name|manager
decl_stmt|;
specifier|private
name|Resolver
name|resolver
decl_stmt|;
specifier|private
name|RegionDigraph
name|digraph
decl_stmt|;
specifier|private
name|Subsystem
name|root
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
decl_stmt|;
comment|// Cached computed results
specifier|private
name|ResourceImpl
name|environmentResource
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flatSubsystemsMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|bundlesPerRegions
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|bundles
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|featuresPerRegions
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|features
decl_stmt|;
specifier|private
name|RegionDigraph
name|flatDigraph
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|bundleInfos
decl_stmt|;
specifier|public
name|SubsystemResolver
parameter_list|(
name|Resolver
name|resolver
parameter_list|,
name|DownloadManager
name|manager
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
name|Collection
argument_list|<
name|Feature
argument_list|>
name|allFeatures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BundleRevision
argument_list|>
argument_list|>
name|system
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Build subsystems on the fly
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|requirements
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
index|[]
name|parts
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
operator|new
name|Subsystem
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can not use multiple roots: "
operator|+
name|root
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|parts
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
name|Subsystem
name|ss
init|=
name|root
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ss
operator|=
name|getOrCreateChild
argument_list|(
name|ss
argument_list|,
name|parts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|requirement
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ss
operator|.
name|require
argument_list|(
name|requirement
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Pre-resolve
name|root
operator|.
name|build
argument_list|(
name|allFeatures
argument_list|)
expr_stmt|;
comment|// Add system resources
name|BundleRevision
name|sysBundleRev
init|=
literal|null
decl_stmt|;
name|boolean
name|hasEeCap
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|BundleRevision
argument_list|>
argument_list|>
name|entry
range|:
name|system
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Subsystem
name|ss
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ss
operator|=
name|root
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|ss
operator|!=
literal|null
operator|&&
name|i
operator|<
name|parts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|+=
literal|"/"
operator|+
name|parts
index|[
name|i
index|]
expr_stmt|;
name|ss
operator|=
name|ss
operator|.
name|getChild
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|ResourceImpl
name|dummy
init|=
operator|new
name|ResourceImpl
argument_list|(
literal|"dummy"
argument_list|,
literal|"dummy"
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleRevision
name|res
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
comment|// We need to explicitely provide service capabilities for bundles
comment|// We use both actual services and services declared from the headers
comment|// TODO: use actual services
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|DictionaryAsMap
argument_list|<>
argument_list|(
name|res
operator|.
name|getBundle
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|tmp
init|=
name|ResourceBuilder
operator|.
name|build
argument_list|(
name|res
operator|.
name|getBundle
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|headers
argument_list|)
decl_stmt|;
for|for
control|(
name|Capability
name|cap
range|:
name|tmp
operator|.
name|getCapabilities
argument_list|(
name|ServiceNamespace
operator|.
name|SERVICE_NAMESPACE
argument_list|)
control|)
block|{
name|dummy
operator|.
name|addCapability
argument_list|(
operator|new
name|CapabilityImpl
argument_list|(
name|dummy
argument_list|,
name|cap
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|cap
operator|.
name|getDirectives
argument_list|()
argument_list|,
name|cap
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|addSystemResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
for|for
control|(
name|Capability
name|cap
range|:
name|res
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|hasEeCap
operator||=
name|cap
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|EXECUTION_ENVIRONMENT_NAMESPACE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sysBundleRev
operator|=
name|res
expr_stmt|;
block|}
block|}
name|ss
operator|.
name|addSystemResource
argument_list|(
name|dummy
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Under Equinox, the osgi.ee capabilities are not provided by the system bundle
if|if
condition|(
operator|!
name|hasEeCap
operator|&&
name|sysBundleRev
operator|!=
literal|null
condition|)
block|{
name|String
name|provideCaps
init|=
name|sysBundleRev
operator|.
name|getBundle
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|PROVIDE_CAPABILITY
argument_list|)
decl_stmt|;
name|environmentResource
operator|=
operator|new
name|ResourceImpl
argument_list|(
literal|"environment"
argument_list|,
literal|"karaf.environment"
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|)
expr_stmt|;
name|environmentResource
operator|.
name|addCapabilities
argument_list|(
name|ResourceBuilder
operator|.
name|parseCapability
argument_list|(
name|environmentResource
argument_list|,
name|provideCaps
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addSystemResource
argument_list|(
name|environmentResource
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|collectPrerequisites
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
return|return
name|root
operator|.
name|collectPrerequisites
argument_list|()
return|;
block|}
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|resolve
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|overrides
parameter_list|,
name|String
name|featureResolutionRange
parameter_list|,
name|String
name|serviceRequirements
parameter_list|,
specifier|final
name|Repository
name|globalRepository
parameter_list|,
name|String
name|outputFile
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|// Download bundles
name|RepositoryManager
name|repos
init|=
operator|new
name|RepositoryManager
argument_list|()
decl_stmt|;
name|root
operator|.
name|downloadBundles
argument_list|(
name|manager
argument_list|,
name|overrides
argument_list|,
name|featureResolutionRange
argument_list|,
name|serviceRequirements
argument_list|,
name|repos
argument_list|)
expr_stmt|;
comment|// Populate digraph and resolve
name|digraph
operator|=
operator|new
name|StandardRegionDigraph
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|populateDigraph
argument_list|(
name|digraph
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
name|SubsystemResolveContext
name|context
init|=
operator|new
name|SubsystemResolveContext
argument_list|(
name|root
argument_list|,
name|digraph
argument_list|,
name|globalRepository
argument_list|,
name|downloader
argument_list|,
name|serviceRequirements
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFile
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|globalRepository
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|put
argument_list|(
literal|"globalRepository"
argument_list|,
name|toJson
argument_list|(
name|globalRepository
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|json
operator|.
name|put
argument_list|(
literal|"repository"
argument_list|,
name|toJson
argument_list|(
name|context
operator|.
name|getRepository
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|wiring
operator|=
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"success"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"wiring"
argument_list|,
name|toJson
argument_list|(
name|wiring
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|json
operator|.
name|put
argument_list|(
literal|"success"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"exception"
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
try|try
init|(
name|Writer
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|outputFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
init|)
block|{
name|JsonWriter
operator|.
name|write
argument_list|(
name|writer
argument_list|,
name|json
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|wiring
operator|=
name|resolver
operator|.
name|resolve
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Remove wiring to the fake environment resource
if|if
condition|(
name|environmentResource
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Wire
argument_list|>
name|wires
range|:
name|wiring
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Wire
argument_list|>
name|iterator
init|=
name|wires
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Wire
name|wire
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|wire
operator|.
name|getProvider
argument_list|()
operator|==
name|environmentResource
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Fragments are always wired to their host only, so create fake wiring to
comment|// the subsystem the host is wired to
name|associateFragments
argument_list|()
expr_stmt|;
return|return
name|wiring
return|;
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|wires
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|reswiring
range|:
name|wiring
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Resource
name|resource
init|=
name|reswiring
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|toString
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|reswires
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Wire
name|w
range|:
name|reswiring
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rw
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|rw
operator|.
name|put
argument_list|(
literal|"requirement"
argument_list|,
name|toString
argument_list|(
name|w
operator|.
name|getRequirement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rw
operator|.
name|put
argument_list|(
literal|"capability"
argument_list|,
name|toString
argument_list|(
name|w
operator|.
name|getCapability
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rw
operator|.
name|put
argument_list|(
literal|"requirer"
argument_list|,
name|toString
argument_list|(
name|w
operator|.
name|getRequirer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rw
operator|.
name|put
argument_list|(
literal|"provider"
argument_list|,
name|toString
argument_list|(
name|w
operator|.
name|getProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|reswires
operator|.
name|add
argument_list|(
name|rw
argument_list|)
expr_stmt|;
block|}
name|wires
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|reswires
argument_list|)
expr_stmt|;
block|}
return|return
name|wires
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|r
operator|.
name|getCapabilities
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Requirement
name|r
parameter_list|)
block|{
return|return
name|BaseClause
operator|.
name|toString
argument_list|(
literal|null
argument_list|,
name|r
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|r
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|r
operator|.
name|getDirectives
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Capability
name|c
parameter_list|)
block|{
return|return
name|BaseClause
operator|.
name|toString
argument_list|(
literal|null
argument_list|,
name|c
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|c
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|c
operator|.
name|getDirectives
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|Repository
name|repository
parameter_list|)
block|{
name|Requirement
name|req
init|=
operator|new
name|RequirementImpl
argument_list|(
literal|null
argument_list|,
name|IDENTITY_NAMESPACE
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|SimpleFilter
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|SimpleFilter
operator|.
name|MATCH_ALL
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Capability
argument_list|>
name|identities
init|=
name|repository
operator|.
name|findProviders
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|req
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Capability
name|identity
range|:
name|identities
control|)
block|{
name|String
name|id
init|=
name|BaseClause
operator|.
name|toString
argument_list|(
literal|null
argument_list|,
name|identity
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|identity
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|identity
operator|.
name|getDirectives
argument_list|()
argument_list|)
decl_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|toJson
argument_list|(
name|identity
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resources
return|;
block|}
specifier|private
name|Object
name|toJson
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|obj
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|caps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Capability
name|cap
range|:
name|resource
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|caps
operator|.
name|add
argument_list|(
name|BaseClause
operator|.
name|toString
argument_list|(
literal|null
argument_list|,
name|cap
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|cap
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|cap
operator|.
name|getDirectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Requirement
name|req
range|:
name|resource
operator|.
name|getRequirements
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|BaseClause
operator|.
name|toString
argument_list|(
literal|null
argument_list|,
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|req
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|req
operator|.
name|getDirectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|obj
operator|.
name|put
argument_list|(
literal|"capabilities"
argument_list|,
name|caps
argument_list|)
expr_stmt|;
name|obj
operator|.
name|put
argument_list|(
literal|"requirements"
argument_list|,
name|reqs
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
argument_list|>
name|getBundleInfos
parameter_list|()
block|{
if|if
condition|(
name|bundleInfos
operator|==
literal|null
condition|)
block|{
name|bundleInfos
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addBundleInfos
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
return|return
name|bundleInfos
return|;
block|}
specifier|private
name|void
name|addBundleInfos
parameter_list|(
name|Subsystem
name|subsystem
parameter_list|)
block|{
if|if
condition|(
name|subsystem
operator|!=
literal|null
condition|)
block|{
name|String
name|region
init|=
name|getFlatSubsystemsMap
argument_list|()
operator|.
name|get
argument_list|(
name|subsystem
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
name|bis
init|=
name|bundleInfos
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
if|if
condition|(
name|bis
operator|==
literal|null
condition|)
block|{
name|bis
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bundleInfos
operator|.
name|put
argument_list|(
name|region
argument_list|,
name|bis
argument_list|)
expr_stmt|;
block|}
name|bis
operator|.
name|putAll
argument_list|(
name|subsystem
operator|.
name|getBundleInfos
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|addBundleInfos
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|StreamProvider
argument_list|>
name|getProviders
parameter_list|()
block|{
return|return
name|manager
operator|.
name|getProviders
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|getWiring
parameter_list|()
block|{
return|return
name|wiring
return|;
block|}
specifier|public
name|RegionDigraph
name|getFlatDigraph
parameter_list|()
throws|throws
name|BundleException
throws|,
name|InvalidSyntaxException
block|{
if|if
condition|(
name|flatDigraph
operator|==
literal|null
condition|)
block|{
name|flatDigraph
operator|=
operator|new
name|StandardRegionDigraph
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flats
init|=
name|getFlatSubsystemsMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|digraph
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Region
name|r
range|:
name|digraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|flats
operator|.
name|get
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|flatDigraph
operator|.
name|createRegion
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Region
name|r
range|:
name|digraph
operator|.
name|getRegions
argument_list|()
control|)
block|{
for|for
control|(
name|RegionDigraph
operator|.
name|FilteredRegion
name|fr
range|:
name|digraph
operator|.
name|getEdges
argument_list|(
name|r
argument_list|)
control|)
block|{
name|String
name|rt
init|=
name|flats
operator|.
name|get
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rh
init|=
name|flats
operator|.
name|get
argument_list|(
name|fr
operator|.
name|getRegion
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rh
operator|.
name|equals
argument_list|(
name|rt
argument_list|)
condition|)
block|{
name|Region
name|tail
init|=
name|flatDigraph
operator|.
name|getRegion
argument_list|(
name|rt
argument_list|)
decl_stmt|;
name|Region
name|head
init|=
name|flatDigraph
operator|.
name|getRegion
argument_list|(
name|rh
argument_list|)
decl_stmt|;
name|RegionFilterBuilder
name|rfb
init|=
name|flatDigraph
operator|.
name|createRegionFilterBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|fr
operator|.
name|getFilter
argument_list|()
operator|.
name|getSharingPolicy
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Discard osgi.identity namespace
if|if
condition|(
operator|!
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|f
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|rfb
operator|.
name|allow
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|flatDigraph
operator|.
name|connect
argument_list|(
name|tail
argument_list|,
name|rfb
operator|.
name|build
argument_list|()
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|flatDigraph
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getFlatSubsystemsMap
parameter_list|()
block|{
if|if
condition|(
name|flatSubsystemsMap
operator|==
literal|null
condition|)
block|{
name|flatSubsystemsMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|findSubsystemsToFlatten
argument_list|(
name|root
argument_list|,
name|flatSubsystemsMap
argument_list|)
expr_stmt|;
block|}
return|return
name|flatSubsystemsMap
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|getBundlesPerRegions
parameter_list|()
block|{
if|if
condition|(
name|bundlesPerRegions
operator|==
literal|null
condition|)
block|{
name|bundlesPerRegions
operator|=
name|invert
argument_list|(
name|getBundles
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bundlesPerRegions
return|;
block|}
comment|/**      *       * @return map of bundles and the region they are deployed in      */
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|getBundles
parameter_list|()
block|{
if|if
condition|(
name|bundles
operator|==
literal|null
condition|)
block|{
name|String
name|filter
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=*)(|(%s=%s)(%s=%s)))"
argument_list|,
name|IDENTITY_NAMESPACE
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_BUNDLE
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_FRAGMENT
argument_list|)
decl_stmt|;
name|SimpleFilter
name|sf
init|=
name|SimpleFilter
operator|.
name|parse
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|bundles
operator|=
name|getResourceMapping
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
return|return
name|bundles
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Resource
argument_list|>
argument_list|>
name|getFeaturesPerRegions
parameter_list|()
block|{
if|if
condition|(
name|featuresPerRegions
operator|==
literal|null
condition|)
block|{
name|featuresPerRegions
operator|=
name|invert
argument_list|(
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|featuresPerRegions
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|getFeatures
parameter_list|()
block|{
if|if
condition|(
name|features
operator|==
literal|null
condition|)
block|{
name|SimpleFilter
name|sf
init|=
name|createFilter
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
literal|"*"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_FEATURE
argument_list|)
decl_stmt|;
name|features
operator|=
name|getResourceMapping
argument_list|(
name|sf
argument_list|)
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
comment|/**      *       * @param resourceFilter      * @return map from resource to region name      */
specifier|private
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|getResourceMapping
parameter_list|(
name|SimpleFilter
name|resourceFilter
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|flats
init|=
name|getFlatSubsystemsMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
init|=
name|getWiring
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Resource
argument_list|,
name|String
argument_list|>
name|resources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleFilter
name|sf
init|=
name|createFilter
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
literal|"*"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiring
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Resource
name|resource
range|:
name|wiring
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|findMatchingCapability
argument_list|(
name|resourceFilter
argument_list|,
name|resource
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Find the subsystem where this feature is installed
name|Wire
name|wire
init|=
name|findMatchingWire
argument_list|(
name|sf
argument_list|,
name|wiring
operator|.
name|get
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wire
operator|!=
literal|null
condition|)
block|{
name|String
name|region
init|=
operator|(
name|String
operator|)
name|wire
operator|.
name|getCapability
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|)
decl_stmt|;
name|region
operator|=
name|flats
operator|.
name|get
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|resources
operator|.
name|put
argument_list|(
name|resource
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|resources
return|;
block|}
specifier|private
name|void
name|associateFragments
parameter_list|()
block|{
name|SimpleFilter
name|sf
init|=
name|createFilter
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
literal|"*"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|entry
range|:
name|wiring
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Resource
name|resource
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Requirement
name|requirement
init|=
name|getSubsystemRequirement
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|ResolverUtil
operator|.
name|isFragment
argument_list|(
name|resource
argument_list|)
operator|&&
name|requirement
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Wire
argument_list|>
name|wires
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|Resource
name|host
init|=
name|wires
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getProvider
argument_list|()
decl_stmt|;
specifier|final
name|Wire
name|wire
init|=
name|findMatchingWire
argument_list|(
name|sf
argument_list|,
name|wiring
operator|.
name|get
argument_list|(
name|host
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wire
operator|!=
literal|null
condition|)
block|{
name|wires
operator|.
name|add
argument_list|(
operator|new
name|Wire
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Capability
name|getCapability
parameter_list|()
block|{
return|return
name|wire
operator|.
name|getCapability
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Requirement
name|getRequirement
parameter_list|()
block|{
return|return
name|requirement
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getProvider
parameter_list|()
block|{
return|return
name|wire
operator|.
name|getProvider
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getRequirer
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Requirement
name|getSubsystemRequirement
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
for|for
control|(
name|Requirement
name|requirement
range|:
name|resource
operator|.
name|getRequirements
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|requirement
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|TYPE_SUBSYSTEM
operator|.
name|equals
argument_list|(
name|requirement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|requirement
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Capability
name|findMatchingCapability
parameter_list|(
name|SimpleFilter
name|filter
parameter_list|,
name|Collection
argument_list|<
name|Capability
argument_list|>
name|caps
parameter_list|)
block|{
for|for
control|(
name|Capability
name|cap
range|:
name|caps
control|)
block|{
if|if
condition|(
name|CapabilitySet
operator|.
name|matches
argument_list|(
name|cap
argument_list|,
name|filter
argument_list|)
condition|)
block|{
return|return
name|cap
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Wire
name|findMatchingWire
parameter_list|(
name|SimpleFilter
name|filter
parameter_list|,
name|Collection
argument_list|<
name|Wire
argument_list|>
name|wires
parameter_list|)
block|{
for|for
control|(
name|Wire
name|wire
range|:
name|wires
control|)
block|{
name|Capability
name|cap
init|=
name|wire
operator|.
name|getCapability
argument_list|()
decl_stmt|;
if|if
condition|(
name|CapabilitySet
operator|.
name|matches
argument_list|(
name|cap
argument_list|,
name|filter
argument_list|)
condition|)
block|{
return|return
name|wire
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|SimpleFilter
name|createFilter
parameter_list|(
name|String
modifier|...
name|s
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|attrs
operator|.
name|put
argument_list|(
name|s
index|[
name|i
index|]
argument_list|,
name|s
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|SimpleFilter
operator|.
name|convert
argument_list|(
name|attrs
argument_list|)
return|;
block|}
specifier|private
name|void
name|findSubsystemsToFlatten
parameter_list|(
name|Subsystem
name|subsystem
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|toFlatten
parameter_list|)
block|{
name|Subsystem
name|nonFlat
init|=
name|subsystem
decl_stmt|;
while|while
condition|(
name|isFlat
argument_list|(
name|nonFlat
argument_list|)
condition|)
block|{
name|nonFlat
operator|=
name|nonFlat
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subsystem
operator|!=
literal|null
condition|)
block|{
name|toFlatten
operator|.
name|put
argument_list|(
name|subsystem
operator|.
name|getName
argument_list|()
argument_list|,
name|nonFlat
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|findSubsystemsToFlatten
argument_list|(
name|child
argument_list|,
name|toFlatten
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isFlat
parameter_list|(
name|Subsystem
name|subsystem
parameter_list|)
block|{
if|if
condition|(
name|subsystem
operator|==
literal|null
operator|||
name|subsystem
operator|.
name|getFeature
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|subsystem
operator|.
name|getFeature
argument_list|()
operator|!=
literal|null
operator|&&
name|subsystem
operator|.
name|getFeature
argument_list|()
operator|.
name|getScoping
argument_list|()
operator|==
literal|null
return|;
block|}
specifier|private
name|Subsystem
name|getOrCreateChild
parameter_list|(
name|Subsystem
name|ss
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Subsystem
name|child
init|=
name|ss
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|child
operator|!=
literal|null
condition|?
name|child
else|:
name|ss
operator|.
name|createSubsystem
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|void
name|populateDigraph
parameter_list|(
name|RegionDigraph
name|digraph
parameter_list|,
name|Subsystem
name|subsystem
parameter_list|)
throws|throws
name|BundleException
throws|,
name|InvalidSyntaxException
block|{
name|Region
name|region
init|=
name|digraph
operator|.
name|createRegion
argument_list|(
name|subsystem
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subsystem
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Region
name|parent
init|=
name|digraph
operator|.
name|getRegion
argument_list|(
name|subsystem
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|digraph
operator|.
name|connect
argument_list|(
name|region
argument_list|,
name|createRegionFilterBuilder
argument_list|(
name|digraph
argument_list|,
name|subsystem
operator|.
name|getImportPolicy
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|digraph
operator|.
name|connect
argument_list|(
name|parent
argument_list|,
name|createRegionFilterBuilder
argument_list|(
name|digraph
argument_list|,
name|subsystem
operator|.
name|getExportPolicy
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|populateDigraph
argument_list|(
name|digraph
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RegionFilterBuilder
name|createRegionFilterBuilder
parameter_list|(
name|RegionDigraph
name|digraph
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|sharingPolicy
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|RegionFilterBuilder
name|result
init|=
name|digraph
operator|.
name|createRegionFilterBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|sharingPolicy
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|filter
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|result
operator|.
name|allow
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

