begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesNamespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|ScopeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|BaseRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|CapabilityImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|FeatureResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|RequirementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResolverUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|SimpleFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Overrides
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|StringArrayMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
operator|.
name|MANIFEST_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_FEATURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_SUBSYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|addIdentityRequirement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|getUri
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|toFeatureRequirement
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|addToMapSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|eclipse
operator|.
name|equinox
operator|.
name|region
operator|.
name|RegionFilter
operator|.
name|VISIBLE_ALL_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|CAPABILITY_TYPE_ATTRIBUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|CAPABILITY_VERSION_ATTRIBUTE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Namespace
operator|.
name|REQUIREMENT_FILTER_DIRECTIVE
import|;
end_import

begin_comment
comment|/**  * A {@link Resource} representing ...  */
end_comment

begin_class
specifier|public
class|class
name|Subsystem
extends|extends
name|ResourceImpl
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ALL_FILTER
init|=
literal|"(|(!(all=*))(all=*))"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUBSYSTEM_FILTER
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURE_FILTER
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(%s=%s)"
argument_list|,
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|,
name|TYPE_FEATURE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUBSYSTEM_OR_FEATURE_FILTER
init|=
name|String
operator|.
name|format
argument_list|(
literal|"(|%s%s)"
argument_list|,
name|SUBSYSTEM_FILTER
argument_list|,
name|FEATURE_FILTER
argument_list|)
decl_stmt|;
comment|// Everything is visible
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|SHARE_ALL_POLICY
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|VISIBLE_ALL_NAMESPACE
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|ALL_FILTER
argument_list|)
argument_list|)
decl_stmt|;
comment|// Nothing (but systems) is visible
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|SHARE_NONE_POLICY
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|SUBSYSTEM_FILTER
argument_list|)
argument_list|)
decl_stmt|;
comment|// name of the subsystem: region or region#feature[-version]
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|// works only with feature scoping. region subsystems by default accept deps
specifier|private
specifier|final
name|boolean
name|acceptDependencies
decl_stmt|;
comment|// parent Subsystem for child subsystems representing child regions or regions' features
specifier|private
specifier|final
name|Subsystem
name|parent
decl_stmt|;
comment|// feature for Subsystem representing a feature
specifier|private
specifier|final
name|Feature
name|feature
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|mandatory
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Subsystem
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// a set of filters applied when child subsystem needs capabilities from parent subsystem
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|importPolicy
decl_stmt|;
comment|// a set of filters applied when parent subsystem needs capabilities from child subsystem
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|exportPolicy
decl_stmt|;
comment|// contains subsystems representing features of this region, child subsystems for child regions, system resources(?),
comment|// bundle resources added explicitly as reqs for this Subsystem, feature resources for subsystems representing
comment|// features, ...
specifier|private
specifier|final
name|List
argument_list|<
name|Resource
argument_list|>
name|installable
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// mapping from "symbolic-name|version" to a DependencyInfo wrapping a Resource
comment|//<bundle dependency="false"> are collected directly in feature's subsystem
comment|//<bundle dependency="true"> are collected in first parent subsystem of feature or in subsystem of scoped feature
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DependencyInfo
argument_list|>
name|dependencies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// non-mandatory dependant features (<feature>/<feature>) collected from current and child subsystems representing
comment|// features (unless some subsystem for feature has<scoping acceptDependencies="true">)
specifier|private
specifier|final
name|List
argument_list|<
name|Requirement
argument_list|>
name|dependentFeatures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// direct bundle URI dependencies - not added by FeaturesService, but used in startup stage of assembly builder
comment|// these bundles will be downloaded
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      *<p>Constructs root subsystem {@link Resource} for {@link FeaturesService#ROOT_REGION} that imports/exports only      * caps/reqs with<code>(type=karaf.subsystem)</code></p>      *<p>Root subsystem by default accepts dependencies - will gather dependant features of child feature subsystems,      * effectively _flattening_ the set of features within single region's subsystem.</p>      *      * @param name      */
specifier|public
name|Subsystem
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|acceptDependencies
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|feature
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|importPolicy
operator|=
name|SHARE_NONE_POLICY
expr_stmt|;
name|this
operator|.
name|exportPolicy
operator|=
name|SHARE_NONE_POLICY
expr_stmt|;
name|this
operator|.
name|mandatory
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      *<p>Constructs subsystem for a feature that either imports/exports all caps or (see {@link Feature#getScoping()})      * has configurable import/export policy +<code>(|(type=karaf.subsystem)(type=karaf.feature))</code> filter in      * {@link org.osgi.framework.namespace.IdentityNamespace#IDENTITY_NAMESPACE}</p>      *<p>Such subsystem requires<code>type=karaf.feature; osgi.identity=feature-name[; version=feature-version]</code></p>      * @param name      * @param feature      * @param parent      * @param mandatory      */
specifier|public
name|Subsystem
parameter_list|(
name|String
name|name
parameter_list|,
name|Feature
name|feature
parameter_list|,
name|Subsystem
name|parent
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|acceptDependencies
operator|=
name|feature
operator|.
name|getScoping
argument_list|()
operator|!=
literal|null
operator|&&
name|feature
operator|.
name|getScoping
argument_list|()
operator|.
name|acceptDependencies
argument_list|()
expr_stmt|;
name|this
operator|.
name|feature
operator|=
name|feature
expr_stmt|;
name|this
operator|.
name|mandatory
operator|=
name|mandatory
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getScoping
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|importPolicy
operator|=
name|createPolicy
argument_list|(
name|feature
operator|.
name|getScoping
argument_list|()
operator|.
name|getImports
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|importPolicy
operator|.
name|put
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|SUBSYSTEM_OR_FEATURE_FILTER
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|exportPolicy
operator|=
name|createPolicy
argument_list|(
name|feature
operator|.
name|getScoping
argument_list|()
operator|.
name|getExports
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|exportPolicy
operator|.
name|put
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|SUBSYSTEM_OR_FEATURE_FILTER
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|importPolicy
operator|=
name|SHARE_ALL_POLICY
expr_stmt|;
name|this
operator|.
name|exportPolicy
operator|=
name|SHARE_ALL_POLICY
expr_stmt|;
block|}
name|addIdentityRequirement
argument_list|(
name|this
argument_list|,
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|TYPE_FEATURE
argument_list|,
operator|new
name|VersionRange
argument_list|(
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Constructs child subsystem {@link Resource} for {@link FeaturesService#ROOT_REGION}'s child      * that imports all caps and exports only caps with<code>(type=karaf.subsystem)</code></p>      * @param name      * @param parent      * @param acceptDependencies      * @param mandatory      */
specifier|public
name|Subsystem
parameter_list|(
name|String
name|name
parameter_list|,
name|Subsystem
name|parent
parameter_list|,
name|boolean
name|acceptDependencies
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|acceptDependencies
operator|=
name|acceptDependencies
expr_stmt|;
name|this
operator|.
name|feature
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|mandatory
operator|=
name|mandatory
expr_stmt|;
name|this
operator|.
name|importPolicy
operator|=
name|SHARE_ALL_POLICY
expr_stmt|;
name|this
operator|.
name|exportPolicy
operator|=
name|SHARE_NONE_POLICY
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Resource
argument_list|>
name|getInstallable
parameter_list|()
block|{
return|return
name|installable
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|Subsystem
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Subsystem
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
specifier|public
name|Subsystem
name|getChild
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Subsystem
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
name|child
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|child
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isAcceptDependencies
parameter_list|()
block|{
return|return
name|acceptDependencies
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getImportPolicy
parameter_list|()
block|{
return|return
name|importPolicy
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getExportPolicy
parameter_list|()
block|{
return|return
name|exportPolicy
return|;
block|}
specifier|public
name|Feature
name|getFeature
parameter_list|()
block|{
return|return
name|feature
return|;
block|}
comment|/**      * Create child subsystem for this subsystem. Child will become parent's mandatory requirement to force its resolution.      *      * @param name      * @param acceptDependencies      * @return      */
specifier|public
name|Subsystem
name|createSubsystem
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|acceptDependencies
parameter_list|)
block|{
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Can not create application subsystems inside a feature subsystem"
argument_list|)
throw|;
block|}
comment|// Create subsystem
name|String
name|childName
init|=
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|name
decl_stmt|;
name|Subsystem
name|as
init|=
operator|new
name|Subsystem
argument_list|(
name|childName
argument_list|,
name|this
argument_list|,
name|acceptDependencies
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|children
operator|.
name|add
argument_list|(
name|as
argument_list|)
expr_stmt|;
comment|// Add a requirement to force its resolution
name|ResourceUtils
operator|.
name|addIdentityRequirement
argument_list|(
name|this
argument_list|,
name|childName
argument_list|,
name|TYPE_SUBSYSTEM
argument_list|,
operator|(
name|VersionRange
operator|)
literal|null
argument_list|)
expr_stmt|;
comment|// Add it to repo
name|installable
operator|.
name|add
argument_list|(
name|as
argument_list|)
expr_stmt|;
return|return
name|as
return|;
block|}
specifier|public
name|void
name|addSystemResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|installable
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|requireFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|range
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
block|{
if|if
condition|(
name|mandatory
condition|)
block|{
name|ResourceUtils
operator|.
name|addIdentityRequirement
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|TYPE_FEATURE
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ResourceImpl
name|res
init|=
operator|new
name|ResourceImpl
argument_list|()
decl_stmt|;
name|ResourceUtils
operator|.
name|addIdentityRequirement
argument_list|(
name|res
argument_list|,
name|name
argument_list|,
name|TYPE_FEATURE
argument_list|,
name|range
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dependentFeatures
operator|.
name|addAll
argument_list|(
name|res
operator|.
name|getRequirements
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|require
parameter_list|(
name|String
name|requirement
parameter_list|)
throws|throws
name|BundleException
block|{
name|int
name|idx
init|=
name|requirement
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|type
decl_stmt|,
name|req
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|type
operator|=
name|requirement
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|req
operator|=
name|requirement
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|type
operator|=
literal|"feature"
expr_stmt|;
name|req
operator|=
name|requirement
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"feature"
case|:
name|addRequirement
argument_list|(
name|toFeatureRequirement
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"requirement"
case|:
name|addRequirement
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"bundle"
case|:
name|bundles
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|protected
name|void
name|addRequirement
parameter_list|(
name|String
name|requirement
parameter_list|)
throws|throws
name|BundleException
block|{
for|for
control|(
name|Requirement
name|req
range|:
name|ResourceBuilder
operator|.
name|parseRequirement
argument_list|(
name|this
argument_list|,
name|requirement
argument_list|)
control|)
block|{
name|Object
name|range
init|=
name|req
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CAPABILITY_VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
operator|instanceof
name|String
condition|)
block|{
name|req
operator|.
name|getAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|CAPABILITY_VERSION_ATTRIBUTE
argument_list|,
operator|new
name|VersionRange
argument_list|(
operator|(
name|String
operator|)
name|range
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addRequirement
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
name|getBundleInfos
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BundleInfo
argument_list|>
name|infos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DependencyInfo
name|di
range|:
name|dependencies
operator|.
name|values
argument_list|()
control|)
block|{
name|infos
operator|.
name|put
argument_list|(
name|di
operator|.
name|getLocation
argument_list|()
argument_list|,
name|di
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"InfiniteLoopStatement"
argument_list|)
specifier|public
name|void
name|build
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Feature
argument_list|>
argument_list|>
name|allFeatures
parameter_list|)
throws|throws
name|Exception
block|{
name|doBuild
argument_list|(
name|allFeatures
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @param allFeatures      * @param mandatory      * @throws Exception      */
specifier|private
name|void
name|doBuild
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Feature
argument_list|>
argument_list|>
name|allFeatures
parameter_list|,
name|boolean
name|mandatory
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Subsystem
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|doBuild
argument_list|(
name|allFeatures
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
comment|// each dependant feature becomes a non-mandatory (why?) requirement of first parent that
comment|// accepts dependencies
for|for
control|(
name|Dependency
name|dep
range|:
name|feature
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|Subsystem
name|ss
init|=
name|this
decl_stmt|;
while|while
condition|(
operator|!
name|ss
operator|.
name|isAcceptDependencies
argument_list|()
condition|)
block|{
name|ss
operator|=
name|ss
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
name|ss
operator|.
name|requireFeature
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// each conditional feature becomes a child subsystem of this feature's subsystem
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|Feature
name|fcond
init|=
name|cond
operator|.
name|asFeature
argument_list|()
decl_stmt|;
name|String
name|ssName
init|=
name|this
operator|.
name|name
operator|+
literal|"#"
operator|+
operator|(
name|fcond
operator|.
name|hasVersion
argument_list|()
condition|?
name|fcond
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|fcond
operator|.
name|getVersion
argument_list|()
else|:
name|fcond
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
name|Subsystem
name|fs
init|=
name|getChild
argument_list|(
name|ssName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
operator|new
name|Subsystem
argument_list|(
name|ssName
argument_list|,
name|fcond
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|doBuild
argument_list|(
name|allFeatures
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|installable
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|Requirement
argument_list|>
name|processed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Requirement
argument_list|>
name|requirements
init|=
name|getRequirements
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|)
decl_stmt|;
name|requirements
operator|.
name|addAll
argument_list|(
name|dependentFeatures
argument_list|)
expr_stmt|;
name|requirements
operator|.
name|removeAll
argument_list|(
name|processed
argument_list|)
expr_stmt|;
if|if
condition|(
name|requirements
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// for each feature requirement on this subsystem (osgi.identity;type=karaf.feature), we create a
comment|// Subsystem representing mandatory feature.
for|for
control|(
name|Requirement
name|requirement
range|:
name|requirements
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|requirement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IDENTITY_NAMESPACE
argument_list|)
decl_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|requirement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CAPABILITY_TYPE_ATTRIBUTE
argument_list|)
decl_stmt|;
name|VersionRange
name|range
init|=
operator|(
name|VersionRange
operator|)
name|requirement
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CAPABILITY_VERSION_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|TYPE_FEATURE
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|allFeatures
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|allFeatures
operator|.
name|get
argument_list|(
name|name
argument_list|)
control|)
block|{
if|if
condition|(
name|range
operator|==
literal|null
operator|||
name|range
operator|.
name|contains
argument_list|(
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|feature
operator|!=
name|this
operator|.
name|feature
condition|)
block|{
name|String
name|ssName
init|=
name|this
operator|.
name|name
operator|+
literal|"#"
operator|+
operator|(
name|feature
operator|.
name|hasVersion
argument_list|()
condition|?
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
else|:
name|feature
operator|.
name|getName
argument_list|()
operator|)
decl_stmt|;
name|Subsystem
name|fs
init|=
name|getChild
argument_list|(
name|ssName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
operator|new
name|Subsystem
argument_list|(
name|ssName
argument_list|,
name|feature
argument_list|,
name|this
argument_list|,
name|mandatory
operator|&&
operator|!
name|SubsystemResolveContext
operator|.
name|isOptional
argument_list|(
name|requirement
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|build
argument_list|(
name|allFeatures
argument_list|)
expr_stmt|;
name|installable
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|children
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|processed
operator|.
name|add
argument_list|(
name|requirement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|collectPrerequisites
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|prereqs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|doCollectPrerequisites
argument_list|(
name|prereqs
argument_list|)
expr_stmt|;
return|return
name|prereqs
return|;
block|}
specifier|private
name|void
name|doCollectPrerequisites
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|prereqs
parameter_list|)
block|{
for|for
control|(
name|Subsystem
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|doCollectPrerequisites
argument_list|(
name|prereqs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|prereq
range|:
name|prereqs
control|)
block|{
name|String
index|[]
name|p
init|=
name|prereq
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
operator|&&
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|p
index|[
literal|1
index|]
argument_list|)
operator|.
name|contains
argument_list|(
name|Version
operator|.
name|parseVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
comment|// our feature is already among prerequisites, so ...
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// ... we won't be adding its prerequisites - they'll be handled after another PartialDeploymentException
if|if
condition|(
operator|!
name|match
condition|)
block|{
for|for
control|(
name|Dependency
name|dep
range|:
name|feature
operator|.
name|getDependencies
argument_list|()
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|isPrerequisite
argument_list|()
condition|)
block|{
name|prereqs
operator|.
name|add
argument_list|(
name|dep
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Downloads bundles for all the features in current and child subsystems. But also collects bundles      * as {@link DependencyInfo}.      * @param manager      * @param featureResolutionRange      * @param serviceRequirements      * @param repos      * @throws Exception      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"InfiniteLoopStatement"
argument_list|)
specifier|public
name|void
name|downloadBundles
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|String
name|featureResolutionRange
parameter_list|,
specifier|final
name|FeaturesService
operator|.
name|ServiceRequirementsBehavior
name|serviceRequirements
parameter_list|,
name|RepositoryManager
name|repos
parameter_list|,
name|SubsystemResolverCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Subsystem
name|child
range|:
name|children
control|)
block|{
name|child
operator|.
name|downloadBundles
argument_list|(
name|manager
argument_list|,
name|featureResolutionRange
argument_list|,
name|serviceRequirements
argument_list|,
name|repos
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
comment|// collect BundleInfos for given feature - both direct<feature>/<bundle>s and<feature>/<conditional>/<bundle>s
specifier|final
name|Map
argument_list|<
name|BundleInfo
argument_list|,
name|Conditional
argument_list|>
name|infos
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
specifier|final
name|BundleInfo
name|bi
range|:
name|cond
operator|.
name|getBundles
argument_list|()
control|)
block|{
comment|// bundles from conditional features will be added as non-mandatory requirements
name|infos
operator|.
name|put
argument_list|(
name|bi
argument_list|,
name|cond
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|BundleInfo
name|bi
range|:
name|feature
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|infos
operator|.
name|put
argument_list|(
name|bi
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// features model doesn't have blacklisted entries removed, but marked as blacklisted - we now don't have
comment|// to download them
comment|//infos.keySet().removeIf(Blacklisting::isBlacklisted);
for|for
control|(
name|Iterator
argument_list|<
name|BundleInfo
argument_list|>
name|iterator
init|=
name|infos
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BundleInfo
name|bi
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bi
operator|.
name|isBlacklisted
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|bundleBlacklisted
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// all downloaded bundles
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceImpl
argument_list|>
name|bundles
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// resources for locations that were overriden in OSGi mode - to check whether the override should actually
comment|// take place, by checking resource's headers
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceImpl
argument_list|>
name|overrides
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|removeServiceRequirements
init|=
name|serviceRequirementsBehavior
argument_list|(
name|feature
argument_list|,
name|serviceRequirements
argument_list|)
decl_stmt|;
comment|// download collected BundleInfo locations
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BundleInfo
argument_list|,
name|Conditional
argument_list|>
name|entry
range|:
name|infos
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|BundleInfo
name|bi
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|loc
init|=
name|bi
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|downloader
operator|.
name|download
argument_list|(
name|loc
argument_list|,
name|provider
lambda|->
block|{
comment|// always download location (could be overriden)
name|ResourceImpl
name|resource
init|=
name|createResource
argument_list|(
name|loc
argument_list|,
name|getMetadata
argument_list|(
name|provider
argument_list|)
argument_list|,
name|removeServiceRequirements
argument_list|)
decl_stmt|;
name|bundles
operator|.
name|put
argument_list|(
name|loc
argument_list|,
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|bi
operator|.
name|isOverriden
argument_list|()
operator|==
name|BundleInfo
operator|.
name|BundleOverrideMode
operator|.
name|OSGI
condition|)
block|{
comment|// also download original from original bundle URI to check if we should override by comparing
comment|// symbolic name - requires MANIFEST.MF header access. If there should be no override, we'll get
comment|// back to original URI
name|downloader
operator|.
name|download
argument_list|(
name|bi
operator|.
name|getOriginalLocation
argument_list|()
argument_list|,
name|provider2
lambda|->
block|{
name|ResourceImpl
name|originalResource
init|=
name|createResource
argument_list|(
name|bi
operator|.
name|getOriginalLocation
argument_list|()
argument_list|,
name|getMetadata
argument_list|(
name|provider2
argument_list|)
argument_list|,
name|removeServiceRequirements
argument_list|)
decl_stmt|;
name|bundles
operator|.
name|put
argument_list|(
name|bi
operator|.
name|getOriginalLocation
argument_list|()
argument_list|,
name|originalResource
argument_list|)
expr_stmt|;
comment|// an entry in overrides map means that given location was overriden
name|overrides
operator|.
name|put
argument_list|(
name|loc
argument_list|,
name|originalResource
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// download direct bundle: requirements - without consulting overrides
for|for
control|(
name|Clause
name|bundle
range|:
name|Parser
operator|.
name|parseClauses
argument_list|(
name|this
operator|.
name|bundles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|this
operator|.
name|bundles
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|String
name|loc
init|=
name|bundle
operator|.
name|getName
argument_list|()
decl_stmt|;
name|downloader
operator|.
name|download
argument_list|(
name|loc
argument_list|,
name|provider
lambda|->
block|{
name|bundles
operator|.
name|put
argument_list|(
name|loc
argument_list|,
name|createResource
argument_list|(
name|loc
argument_list|,
name|getMetadata
argument_list|(
name|provider
argument_list|)
argument_list|,
name|removeServiceRequirements
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// we *don't* have to download overrides separately - they're already taken into account from processed model
comment|// download additional libraries - only exported, so they're capabilities are taken into account during
comment|// resolution process
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Library
name|library
range|:
name|feature
operator|.
name|getLibraries
argument_list|()
control|)
block|{
if|if
condition|(
name|library
operator|.
name|isExport
argument_list|()
condition|)
block|{
specifier|final
name|String
name|loc
init|=
name|library
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|downloader
operator|.
name|download
argument_list|(
name|loc
argument_list|,
name|provider
lambda|->
block|{
name|bundles
operator|.
name|put
argument_list|(
name|loc
argument_list|,
name|createResource
argument_list|(
name|loc
argument_list|,
name|getMetadata
argument_list|(
name|provider
argument_list|)
argument_list|,
name|removeServiceRequirements
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// opposite to what we had before. Currently bundles are already overriden at model level, but
comment|// as we finally have access to headers, we can compare symbolic names and if override mode is OSGi, then
comment|// we can restore original resource if there should be no override.
name|Overrides
operator|.
name|override
argument_list|(
name|bundles
argument_list|,
name|overrides
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
comment|// Add conditionals
name|Map
argument_list|<
name|Conditional
argument_list|,
name|Resource
argument_list|>
name|resConds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|FeatureResource
name|resCond
init|=
name|FeatureResource
operator|.
name|build
argument_list|(
name|feature
argument_list|,
name|cond
argument_list|,
name|featureResolutionRange
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
comment|// feature's subsystem will optionally require conditional feature resource
name|addIdentityRequirement
argument_list|(
name|this
argument_list|,
name|resCond
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// but it's a mandatory requirement in other way
name|addIdentityRequirement
argument_list|(
name|resCond
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|installable
operator|.
name|add
argument_list|(
name|resCond
argument_list|)
expr_stmt|;
name|resConds
operator|.
name|put
argument_list|(
name|cond
argument_list|,
name|resCond
argument_list|)
expr_stmt|;
block|}
comment|// Add features and make it require given subsystem that represents logical feature requirement
name|FeatureResource
name|resFeature
init|=
name|FeatureResource
operator|.
name|build
argument_list|(
name|feature
argument_list|,
name|featureResolutionRange
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
name|addIdentityRequirement
argument_list|(
name|resFeature
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|installable
operator|.
name|add
argument_list|(
name|resFeature
argument_list|)
expr_stmt|;
comment|// Add dependencies
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|BundleInfo
argument_list|,
name|Conditional
argument_list|>
name|entry
range|:
name|infos
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|BundleInfo
name|bi
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|loc
init|=
name|bi
operator|.
name|getLocation
argument_list|()
decl_stmt|;
specifier|final
name|Conditional
name|cond
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ResourceImpl
name|res
init|=
name|bundles
operator|.
name|get
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|int
name|sl
init|=
name|bi
operator|.
name|getStartLevel
argument_list|()
operator|<=
literal|0
condition|?
name|feature
operator|.
name|getStartLevel
argument_list|()
else|:
name|bi
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|cond
operator|!=
literal|null
condition|)
block|{
comment|// bundle of conditional feature will have mandatory requirement on it
name|addIdentityRequirement
argument_list|(
name|res
argument_list|,
name|resConds
operator|.
name|get
argument_list|(
name|cond
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|boolean
name|mandatory
init|=
operator|!
name|bi
operator|.
name|isDependency
argument_list|()
operator|&&
name|cond
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|bi
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|addDependency
argument_list|(
name|res
argument_list|,
name|mandatory
argument_list|,
name|bi
operator|.
name|isStart
argument_list|()
argument_list|,
name|sl
argument_list|,
name|bi
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doAddDependency
argument_list|(
name|res
argument_list|,
name|mandatory
argument_list|,
name|bi
operator|.
name|isStart
argument_list|()
argument_list|,
name|sl
argument_list|,
name|bi
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Library
name|library
range|:
name|feature
operator|.
name|getLibraries
argument_list|()
control|)
block|{
if|if
condition|(
name|library
operator|.
name|isExport
argument_list|()
condition|)
block|{
specifier|final
name|String
name|loc
init|=
name|library
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|ResourceImpl
name|res
init|=
name|bundles
operator|.
name|get
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|addDependency
argument_list|(
name|res
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|uri
range|:
name|feature
operator|.
name|getResourceRepositories
argument_list|()
control|)
block|{
name|BaseRepository
name|repo
init|=
name|repos
operator|.
name|getRepository
argument_list|(
name|feature
operator|.
name|getRepositoryUrl
argument_list|()
argument_list|,
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|repo
operator|.
name|getResources
argument_list|()
control|)
block|{
name|ResourceImpl
name|res
init|=
name|cloneResource
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|addDependency
argument_list|(
name|res
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Clause
name|bundle
range|:
name|Parser
operator|.
name|parseClauses
argument_list|(
name|this
operator|.
name|bundles
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|this
operator|.
name|bundles
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
control|)
block|{
specifier|final
name|String
name|loc
init|=
name|bundle
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|dependency
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|bundle
operator|.
name|getAttribute
argument_list|(
literal|"dependency"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|start
init|=
name|bundle
operator|.
name|getAttribute
argument_list|(
literal|"start"
argument_list|)
operator|==
literal|null
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|bundle
operator|.
name|getAttribute
argument_list|(
literal|"start"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|blacklisted
init|=
name|bundle
operator|.
name|getAttribute
argument_list|(
literal|"blacklisted"
argument_list|)
operator|!=
literal|null
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|bundle
operator|.
name|getAttribute
argument_list|(
literal|"blacklisted"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|startLevel
init|=
literal|0
decl_stmt|;
try|try
block|{
name|startLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|bundle
operator|.
name|getAttribute
argument_list|(
literal|"start-level"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
if|if
condition|(
name|dependency
condition|)
block|{
name|addDependency
argument_list|(
name|bundles
operator|.
name|get
argument_list|(
name|loc
argument_list|)
argument_list|,
literal|false
argument_list|,
name|start
argument_list|,
name|startLevel
argument_list|,
name|blacklisted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doAddDependency
argument_list|(
name|bundles
operator|.
name|get
argument_list|(
name|loc
argument_list|)
argument_list|,
literal|true
argument_list|,
name|start
argument_list|,
name|startLevel
argument_list|,
name|blacklisted
argument_list|)
expr_stmt|;
comment|// non dependency bundle will be added as osgi.identity req on type=osgi.bundle
name|addIdentityRequirement
argument_list|(
name|this
argument_list|,
name|bundles
operator|.
name|get
argument_list|(
name|loc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Compute dependencies
for|for
control|(
name|DependencyInfo
name|info
range|:
name|dependencies
operator|.
name|values
argument_list|()
control|)
block|{
name|installable
operator|.
name|add
argument_list|(
name|info
operator|.
name|resource
argument_list|)
expr_stmt|;
comment|// bundle resource will have a requirement on its feature's subsystem too
comment|// when bundle is declared with dependency="true", it will have a requirement on its region's subsystem
name|addIdentityRequirement
argument_list|(
name|info
operator|.
name|resource
argument_list|,
name|this
argument_list|,
name|info
operator|.
name|mandatory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * How to handle requirements from {@link org.osgi.namespace.service.ServiceNamespace#SERVICE_NAMESPACE} for      * given feature.      * @param feature      * @param serviceRequirements      * @return      */
specifier|private
name|boolean
name|serviceRequirementsBehavior
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|FeaturesService
operator|.
name|ServiceRequirementsBehavior
name|serviceRequirements
parameter_list|)
block|{
if|if
condition|(
name|FeaturesService
operator|.
name|ServiceRequirementsBehavior
operator|.
name|Disable
operator|==
name|serviceRequirements
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|feature
operator|!=
literal|null
operator|&&
name|FeaturesService
operator|.
name|ServiceRequirementsBehavior
operator|.
name|Default
operator|==
name|serviceRequirements
condition|)
block|{
return|return
name|FeaturesNamespaces
operator|.
name|URI_1_0_0
operator|.
name|equals
argument_list|(
name|feature
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|||
name|FeaturesNamespaces
operator|.
name|URI_1_1_0
operator|.
name|equals
argument_list|(
name|feature
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|||
name|FeaturesNamespaces
operator|.
name|URI_1_2_0
operator|.
name|equals
argument_list|(
name|feature
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|||
name|FeaturesNamespaces
operator|.
name|URI_1_2_1
operator|.
name|equals
argument_list|(
name|feature
operator|.
name|getNamespace
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|ResourceImpl
name|cloneResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|ResourceImpl
name|res
init|=
operator|new
name|ResourceImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|Capability
name|cap
range|:
name|resource
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|res
operator|.
name|addCapability
argument_list|(
operator|new
name|CapabilityImpl
argument_list|(
name|res
argument_list|,
name|cap
operator|.
name|getNamespace
argument_list|()
argument_list|,
operator|new
name|StringArrayMap
argument_list|<>
argument_list|(
name|cap
operator|.
name|getDirectives
argument_list|()
argument_list|)
argument_list|,
operator|new
name|StringArrayMap
argument_list|<>
argument_list|(
name|cap
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Requirement
name|req
range|:
name|resource
operator|.
name|getRequirements
argument_list|(
literal|null
argument_list|)
control|)
block|{
name|SimpleFilter
name|sf
decl_stmt|;
if|if
condition|(
name|req
operator|instanceof
name|RequirementImpl
condition|)
block|{
name|sf
operator|=
operator|(
operator|(
name|RequirementImpl
operator|)
name|req
operator|)
operator|.
name|getFilter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|req
operator|.
name|getDirectives
argument_list|()
operator|.
name|containsKey
argument_list|(
name|REQUIREMENT_FILTER_DIRECTIVE
argument_list|)
condition|)
block|{
name|sf
operator|=
name|SimpleFilter
operator|.
name|parse
argument_list|(
name|req
operator|.
name|getDirectives
argument_list|()
operator|.
name|get
argument_list|(
name|REQUIREMENT_FILTER_DIRECTIVE
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sf
operator|=
name|SimpleFilter
operator|.
name|convert
argument_list|(
name|req
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|addRequirement
argument_list|(
operator|new
name|RequirementImpl
argument_list|(
name|res
argument_list|,
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|,
operator|new
name|StringArrayMap
argument_list|<>
argument_list|(
name|req
operator|.
name|getDirectives
argument_list|()
argument_list|)
argument_list|,
operator|new
name|StringArrayMap
argument_list|<>
argument_list|(
name|req
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|,
name|sf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|(
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|provider
operator|.
name|open
argument_list|()
argument_list|)
init|)
block|{
name|ZipEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|MANIFEST_NAME
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Attributes
name|attributes
init|=
operator|new
name|Manifest
argument_list|(
name|zis
argument_list|)
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|java
operator|.
name|lang
operator|.
name|String
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|provider
operator|.
name|getUrl
argument_list|()
operator|+
literal|" does not contain a manifest"
argument_list|)
throw|;
block|}
comment|/**      * Adds a {@link Resource} as dependency if this subsystem {@link Subsystem#isAcceptDependencies() accepts dependencies},      * otherwise, the dependency is added to parent subsystem, effectively searching for first parent subsystem representing      * region or scoped feature.      * @param resource      * @param mandatory      * @param start      * @param startLevel      * @param blacklisted      */
name|void
name|addDependency
parameter_list|(
name|ResourceImpl
name|resource
parameter_list|,
name|boolean
name|mandatory
parameter_list|,
name|boolean
name|start
parameter_list|,
name|int
name|startLevel
parameter_list|,
name|boolean
name|blacklisted
parameter_list|)
block|{
if|if
condition|(
name|isAcceptDependencies
argument_list|()
condition|)
block|{
name|doAddDependency
argument_list|(
name|resource
argument_list|,
name|mandatory
argument_list|,
name|start
argument_list|,
name|startLevel
argument_list|,
name|blacklisted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|addDependency
argument_list|(
name|resource
argument_list|,
name|mandatory
argument_list|,
name|start
argument_list|,
name|startLevel
argument_list|,
name|blacklisted
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds a {@link Resource} to this subsystem      * @param resource      * @param mandatory      * @param start      * @param startLevel      * @param blacklisted      */
specifier|private
name|void
name|doAddDependency
parameter_list|(
name|ResourceImpl
name|resource
parameter_list|,
name|boolean
name|mandatory
parameter_list|,
name|boolean
name|start
parameter_list|,
name|int
name|startLevel
parameter_list|,
name|boolean
name|blacklisted
parameter_list|)
block|{
name|String
name|id
init|=
name|ResolverUtil
operator|.
name|getSymbolicName
argument_list|(
name|resource
argument_list|)
operator|+
literal|"|"
operator|+
name|ResolverUtil
operator|.
name|getVersion
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|DependencyInfo
name|info
init|=
operator|new
name|DependencyInfo
argument_list|(
name|resource
argument_list|,
name|mandatory
argument_list|,
name|start
argument_list|,
name|startLevel
argument_list|,
name|blacklisted
argument_list|)
decl_stmt|;
name|dependencies
operator|.
name|merge
argument_list|(
name|id
argument_list|,
name|info
argument_list|,
name|this
operator|::
name|merge
argument_list|)
expr_stmt|;
block|}
comment|/**      * Merges two dependencies by taking lower start level, stronger<code>mandatory</code> option and stronger      *<code>start</code> option.      * @param di1      * @param di2      * @return      */
specifier|private
name|DependencyInfo
name|merge
parameter_list|(
name|DependencyInfo
name|di1
parameter_list|,
name|DependencyInfo
name|di2
parameter_list|)
block|{
name|DependencyInfo
name|info
init|=
operator|new
name|DependencyInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|di1
operator|.
name|resource
operator|!=
name|di2
operator|.
name|resource
condition|)
block|{
name|Requirement
name|r1
init|=
name|getFirstIdentityReq
argument_list|(
name|di1
operator|.
name|resource
argument_list|)
decl_stmt|;
name|Requirement
name|r2
init|=
name|getFirstIdentityReq
argument_list|(
name|di2
operator|.
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|r1
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|resource
operator|=
name|di1
operator|.
name|resource
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|r2
operator|==
literal|null
condition|)
block|{
name|info
operator|.
name|resource
operator|=
name|di2
operator|.
name|resource
expr_stmt|;
block|}
else|else
block|{
name|String
name|id
init|=
name|ResolverUtil
operator|.
name|getSymbolicName
argument_list|(
name|di1
operator|.
name|resource
argument_list|)
operator|+
literal|"/"
operator|+
name|ResolverUtil
operator|.
name|getVersion
argument_list|(
name|di1
operator|.
name|resource
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource "
operator|+
name|id
operator|+
literal|" is duplicated on subsystem "
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|". First resource requires "
operator|+
name|r1
operator|+
literal|" while the second requires "
operator|+
name|r2
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|info
operator|.
name|resource
operator|=
name|di1
operator|.
name|resource
expr_stmt|;
block|}
name|info
operator|.
name|mandatory
operator|=
name|di1
operator|.
name|mandatory
operator||
name|di2
operator|.
name|mandatory
expr_stmt|;
name|info
operator|.
name|start
operator|=
name|di1
operator|.
name|start
operator||
name|di2
operator|.
name|start
expr_stmt|;
if|if
condition|(
name|di1
operator|.
name|startLevel
operator|>
literal|0
operator|&&
name|di2
operator|.
name|startLevel
operator|>
literal|0
condition|)
block|{
name|info
operator|.
name|startLevel
operator|=
name|Math
operator|.
name|min
argument_list|(
name|di1
operator|.
name|startLevel
argument_list|,
name|di2
operator|.
name|startLevel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|startLevel
operator|=
name|Math
operator|.
name|max
argument_list|(
name|di1
operator|.
name|startLevel
argument_list|,
name|di2
operator|.
name|startLevel
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|private
name|RequirementImpl
name|getFirstIdentityReq
parameter_list|(
name|ResourceImpl
name|resource
parameter_list|)
block|{
for|for
control|(
name|Requirement
name|r
range|:
name|resource
operator|.
name|getRequirements
argument_list|(
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|RequirementImpl
operator|)
name|r
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * TODOCUMENT: More generic than just {@link BundleInfo}      */
class|class
name|DependencyInfo
implements|implements
name|BundleInfo
block|{
name|ResourceImpl
name|resource
decl_stmt|;
name|boolean
name|mandatory
decl_stmt|;
name|boolean
name|start
decl_stmt|;
name|int
name|startLevel
decl_stmt|;
name|boolean
name|blacklisted
decl_stmt|;
name|BundleInfo
operator|.
name|BundleOverrideMode
name|overriden
decl_stmt|;
specifier|public
name|DependencyInfo
parameter_list|()
block|{         }
specifier|public
name|DependencyInfo
parameter_list|(
name|ResourceImpl
name|resource
parameter_list|,
name|boolean
name|mandatory
parameter_list|,
name|boolean
name|start
parameter_list|,
name|int
name|startLevel
parameter_list|,
name|boolean
name|blacklisted
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|mandatory
operator|=
name|mandatory
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|startLevel
operator|=
name|startLevel
expr_stmt|;
name|this
operator|.
name|blacklisted
operator|=
name|blacklisted
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStartLevel
parameter_list|()
block|{
return|return
name|startLevel
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|getUri
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getOriginalLocation
parameter_list|()
block|{
comment|// resource is already overriden
return|return
name|getUri
argument_list|(
name|resource
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDependency
parameter_list|()
block|{
return|return
operator|!
name|mandatory
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBlacklisted
parameter_list|()
block|{
return|return
name|blacklisted
return|;
block|}
annotation|@
name|Override
specifier|public
name|BundleInfo
operator|.
name|BundleOverrideMode
name|isOverriden
parameter_list|()
block|{
return|return
name|overriden
return|;
block|}
specifier|public
name|void
name|setOverriden
parameter_list|(
name|BundleInfo
operator|.
name|BundleOverrideMode
name|overriden
parameter_list|)
block|{
name|this
operator|.
name|overriden
operator|=
name|overriden
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DependencyInfo{"
operator|+
literal|"resource="
operator|+
name|resource
operator|+
literal|'}'
return|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|createPolicy
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|ScopeFilter
argument_list|>
name|filters
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|policy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScopeFilter
name|filter
range|:
name|filters
control|)
block|{
name|addToMapSet
argument_list|(
name|policy
argument_list|,
name|filter
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|filter
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|policy
return|;
block|}
name|ResourceImpl
name|createResource
parameter_list|(
name|String
name|uri
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|boolean
name|removeServiceRequirements
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
return|return
name|ResourceBuilder
operator|.
name|build
argument_list|(
name|uri
argument_list|,
name|headers
argument_list|,
name|removeServiceRequirements
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to create resource for bundle "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
end_class

end_unit

