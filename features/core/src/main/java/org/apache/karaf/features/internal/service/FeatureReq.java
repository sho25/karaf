begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
operator|.
name|ANY_VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|filter
import|;
end_import

begin_comment
comment|/**  * Requirement for a feature  *   *<p>The syntax of a requirement as a String is name[/versionRange].  * If no versionRange is given then a range of [0,) is assumed which matches all versions.  *   *<p>  * - name: Can be a feature name or a regexp like myfeat.*  * - versionRange: version or range  * - version: Will specify a specific version. Like [version,version]. An exemption is 0.0.0 which matches all versions.  * - range: Like defined in OSGi VersionRange. Example: [1.0.0, 1.1.0)    */
end_comment

begin_class
specifier|public
class|class
name|FeatureReq
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURE_OSGI_REQUIREMENT_PREFIX
init|=
literal|"feature:"
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|VersionRange
name|versionRange
decl_stmt|;
specifier|private
name|boolean
name|blacklisted
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|FeatureReq
name|parseRequirement
parameter_list|(
name|String
name|featureReq
parameter_list|)
block|{
if|if
condition|(
operator|!
name|featureReq
operator|.
name|startsWith
argument_list|(
name|FEATURE_OSGI_REQUIREMENT_PREFIX
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|featureReq1
init|=
name|featureReq
operator|.
name|substring
argument_list|(
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|parseNameAndRange
argument_list|(
name|featureReq1
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|FeatureReq
name|parseNameAndRange
parameter_list|(
name|String
name|nameAndRange
parameter_list|)
block|{
return|return
operator|new
name|FeatureReq
argument_list|(
name|nameAndRange
argument_list|)
return|;
block|}
specifier|public
name|FeatureReq
parameter_list|(
name|String
name|nameAndRange
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|nameAndRange
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
name|VERSION_SEPARATOR
argument_list|)
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
operator|(
name|parts
operator|.
name|length
operator|==
literal|1
operator|)
condition|?
name|ANY_VERSION
else|:
name|range
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FeatureReq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|versionRange
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
name|range
argument_list|(
name|versionRange
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FeatureReq
parameter_list|(
name|String
name|name
parameter_list|,
name|VersionRange
name|versionRange
parameter_list|,
name|boolean
name|blacklisted
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
name|versionRange
expr_stmt|;
name|this
operator|.
name|blacklisted
operator|=
name|blacklisted
expr_stmt|;
block|}
specifier|public
name|FeatureReq
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
name|this
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|exactVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|,
name|feature
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|VersionRange
name|getVersionRange
parameter_list|()
block|{
return|return
name|versionRange
return|;
block|}
specifier|public
name|Set
argument_list|<
name|FeatureReq
argument_list|>
name|getMatchingRequirements
parameter_list|(
name|Set
argument_list|<
name|FeatureReq
argument_list|>
name|reqs
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|filter
argument_list|(
name|reqs
argument_list|,
name|fr
lambda|->
name|pattern
operator|.
name|matcher
argument_list|(
name|fr
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
name|versionRange
operator|.
name|intersect
argument_list|(
name|fr
operator|.
name|getVersionRange
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Stream
argument_list|<
name|Feature
argument_list|>
name|getMatchingFeatures
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|allFeatures
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Function
argument_list|<
name|String
argument_list|,
name|Optional
argument_list|<
name|Feature
argument_list|>
argument_list|>
name|func
init|=
name|featureName
lambda|->
block|{
name|Feature
name|matchingFeature
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|matcher
argument_list|(
name|featureName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
name|allFeatures
operator|.
name|get
argument_list|(
name|featureName
argument_list|)
decl_stmt|;
name|matchingFeature
operator|=
name|getLatestFeature
argument_list|(
name|versions
argument_list|,
name|versionRange
argument_list|)
expr_stmt|;
block|}
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|matchingFeature
argument_list|)
return|;
block|}
decl_stmt|;
return|return
name|allFeatures
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|func
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|map
argument_list|(
name|Optional
operator|::
name|get
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Feature
name|getLatestFeature
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
parameter_list|,
name|VersionRange
name|versionRange
parameter_list|)
block|{
name|Feature
name|feature
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|versions
operator|!=
literal|null
operator|&&
operator|!
name|versions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Version
name|latest
init|=
name|Version
operator|.
name|emptyVersion
decl_stmt|;
for|for
control|(
name|String
name|available
range|:
name|versions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Version
name|availableVersion
init|=
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|available
argument_list|)
decl_stmt|;
if|if
condition|(
name|availableVersion
operator|.
name|compareTo
argument_list|(
name|latest
argument_list|)
operator|>=
literal|0
operator|&&
name|versionRange
operator|.
name|contains
argument_list|(
name|availableVersion
argument_list|)
condition|)
block|{
name|Feature
name|possiblyBlacklisted
init|=
name|versions
operator|.
name|get
argument_list|(
name|available
argument_list|)
decl_stmt|;
comment|// return only if there are no more non-blaclisted features
if|if
condition|(
name|feature
operator|==
literal|null
operator|||
operator|!
name|possiblyBlacklisted
operator|.
name|isBlacklisted
argument_list|()
condition|)
block|{
name|feature
operator|=
name|possiblyBlacklisted
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|possiblyBlacklisted
operator|.
name|isBlacklisted
argument_list|()
condition|)
block|{
name|latest
operator|=
name|availableVersion
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|feature
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|+
literal|"/"
operator|+
name|this
operator|.
name|getVersionRange
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toRequirement
parameter_list|()
block|{
return|return
name|FEATURE_OSGI_REQUIREMENT_PREFIX
operator|+
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isBlacklisted
parameter_list|()
block|{
return|return
name|blacklisted
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|FeatureReq
name|that
init|=
operator|(
name|FeatureReq
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|that
operator|.
name|name
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|versionRange
argument_list|,
name|that
operator|.
name|versionRange
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|name
argument_list|,
name|versionRange
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|VersionRange
name|range
parameter_list|(
name|String
name|versionRange
parameter_list|)
block|{
if|if
condition|(
name|versionRange
operator|==
literal|null
condition|)
block|{
return|return
name|ANY_VERSION
return|;
block|}
name|versionRange
operator|=
name|versionRange
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"0.0.0"
operator|.
name|equals
argument_list|(
name|versionRange
argument_list|)
condition|)
block|{
return|return
name|ANY_VERSION
return|;
block|}
if|if
condition|(
name|versionRange
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
return|return
operator|new
name|VersionRange
argument_list|(
name|versionRange
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|exactVersion
argument_list|(
name|versionRange
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|VersionRange
name|exactVersion
parameter_list|(
name|String
name|versionRange
parameter_list|)
block|{
return|return
operator|new
name|VersionRange
argument_list|(
name|versionRange
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

