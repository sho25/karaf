begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|VersionRange
import|;
end_import

begin_comment
comment|/**  * Requirement for a feature  *   *<p>The syntax of a requirement as a String is name[/versionRange].  * If no versionRange is given then a range of [0,) is assumeed which matches all versions.  *   *<p>  * - name: Can be a feature name or a glob like myfeat*  * - versionRange: version or range  * - version: Will specify a specific version. Like [version,version]. An exemption is 0.0.0 which matches all versions.  * - range: Like defined in OSGi VersionRange. Example: [1.0.0, 1.1.0)    */
end_comment

begin_class
specifier|public
class|class
name|FeatureReq
block|{
specifier|public
specifier|static
specifier|final
name|String
name|VERSION_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|private
specifier|static
name|Version
name|HIGHEST
init|=
operator|new
name|Version
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|VersionRange
name|RANGE_ALL
init|=
operator|new
name|VersionRange
argument_list|(
name|VersionRange
operator|.
name|LEFT_CLOSED
argument_list|,
name|Version
operator|.
name|emptyVersion
argument_list|,
name|HIGHEST
argument_list|,
name|VersionRange
operator|.
name|RIGHT_CLOSED
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|VersionRange
name|versionRange
decl_stmt|;
specifier|public
name|FeatureReq
parameter_list|(
name|String
name|nameAndRange
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|nameAndRange
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
name|VERSION_SEPARATOR
argument_list|)
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
operator|(
name|parts
operator|.
name|length
operator|==
literal|1
operator|)
condition|?
name|RANGE_ALL
else|:
name|range
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FeatureReq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|versionRange
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
name|range
argument_list|(
name|versionRange
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VersionRange
name|range
parameter_list|(
name|String
name|versionRange
parameter_list|)
block|{
if|if
condition|(
name|versionRange
operator|==
literal|null
condition|)
block|{
return|return
name|RANGE_ALL
return|;
block|}
name|versionRange
operator|=
name|versionRange
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"0.0.0"
operator|.
name|equals
argument_list|(
name|versionRange
argument_list|)
condition|)
block|{
return|return
name|RANGE_ALL
return|;
block|}
if|if
condition|(
name|versionRange
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
condition|)
block|{
return|return
operator|new
name|VersionRange
argument_list|(
name|versionRange
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|exactVersion
argument_list|(
name|versionRange
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|VersionRange
name|exactVersion
parameter_list|(
name|String
name|versionRange
parameter_list|)
block|{
return|return
operator|new
name|VersionRange
argument_list|(
name|VersionRange
operator|.
name|LEFT_CLOSED
argument_list|,
operator|new
name|Version
argument_list|(
name|versionRange
argument_list|)
argument_list|,
operator|new
name|Version
argument_list|(
name|versionRange
argument_list|)
argument_list|,
name|VersionRange
operator|.
name|RIGHT_CLOSED
argument_list|)
return|;
block|}
specifier|public
name|FeatureReq
parameter_list|(
name|String
name|name
parameter_list|,
name|VersionRange
name|versionRange
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|versionRange
operator|=
name|versionRange
expr_stmt|;
block|}
specifier|public
name|FeatureReq
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
name|this
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|exactVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|VersionRange
name|getVersionRange
parameter_list|()
block|{
return|return
name|versionRange
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|+
literal|"/"
operator|+
name|this
operator|.
name|getVersionRange
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

