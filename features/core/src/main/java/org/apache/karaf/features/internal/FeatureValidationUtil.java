begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Utility class which fires XML Schema validation.  */
end_comment

begin_class
specifier|public
class|class
name|FeatureValidationUtil
block|{
specifier|public
specifier|static
specifier|final
name|QName
name|FEATURES_0_0
init|=
operator|new
name|QName
argument_list|(
literal|"features"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|FEATURES_1_0
init|=
operator|new
name|QName
argument_list|(
literal|"http://karaf.apache.org/xmlns/features/v1.0.0"
argument_list|,
literal|"features"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|QName
name|FEATURES_1_1
init|=
operator|new
name|QName
argument_list|(
literal|"http://karaf.apache.org/xmlns/features/v1.1.0"
argument_list|,
literal|"features"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FeatureValidationUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Runs schema validation.      *       * @param uri Uri to validate.      * @throws Exception When validation fails.      */
specifier|public
specifier|static
name|void
name|validate
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|doc
init|=
name|load
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|FEATURES_0_0
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Old style feature file without namespace found (URI: {}). This format is deprecated and support for it will soon be removed"
argument_list|,
name|uri
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|FEATURES_1_0
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|validate
argument_list|(
name|doc
argument_list|,
literal|"/org/apache/karaf/features/karaf-features-1.0.0.xsd"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FEATURES_1_1
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|validate
argument_list|(
name|doc
argument_list|,
literal|"/org/apache/karaf/features/karaf-features-1.1.0.xsd"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized root element: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Document
name|load
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URLConnection
name|conn
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|openConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid URI: "
operator|+
name|uri
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|conn
operator|.
name|setDefaultUseCaches
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stream
operator|=
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
comment|// load document and check the root element for namespace declaration
name|DocumentBuilderFactory
name|dFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|dFactory
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|validate
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|schemaLocation
parameter_list|)
throws|throws
name|SAXException
block|{
name|SchemaFactory
name|factory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
comment|// root element has namespace - we can use schema validation
name|Schema
name|schema
init|=
name|factory
operator|.
name|newSchema
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|FeatureValidationUtil
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|schemaLocation
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// create schema by reading it from an XSD file:
name|Validator
name|validator
init|=
name|schema
operator|.
name|newValidator
argument_list|()
decl_stmt|;
try|try
block|{
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to validate "
operator|+
name|doc
operator|.
name|getDocumentURI
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

