begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|Macro
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|TYPE_FEATURE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
operator|.
name|addIdentityRequirement
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|FeatureResource
extends|extends
name|ResourceImpl
block|{
specifier|private
specifier|final
name|Feature
name|feature
decl_stmt|;
specifier|private
name|FeatureResource
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
name|super
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|TYPE_FEATURE
argument_list|,
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|feature
operator|=
name|feature
expr_stmt|;
block|}
specifier|public
specifier|static
name|FeatureResource
name|build
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|Conditional
name|conditional
parameter_list|,
name|String
name|featureRange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Resource
argument_list|>
name|locToRes
parameter_list|)
throws|throws
name|BundleException
block|{
name|Feature
name|fcond
init|=
name|conditional
operator|.
name|asFeature
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|FeatureResource
name|resource
init|=
name|build
argument_list|(
name|fcond
argument_list|,
name|featureRange
argument_list|,
name|locToRes
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cond
range|:
name|conditional
operator|.
name|getCondition
argument_list|()
control|)
block|{
if|if
condition|(
name|cond
operator|.
name|startsWith
argument_list|(
literal|"req:"
argument_list|)
condition|)
block|{
name|cond
operator|=
name|cond
operator|.
name|substring
argument_list|(
literal|"req:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Requirement
argument_list|>
name|reqs
init|=
name|ResourceBuilder
operator|.
name|parseRequirement
argument_list|(
name|resource
argument_list|,
name|cond
argument_list|)
decl_stmt|;
name|resource
operator|.
name|addRequirements
argument_list|(
name|reqs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Dependency
name|dep
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Dependency
argument_list|()
decl_stmt|;
name|String
index|[]
name|p
init|=
name|cond
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|dep
operator|.
name|setVersion
argument_list|(
name|p
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|addDependency
argument_list|(
name|resource
argument_list|,
name|dep
argument_list|,
name|featureRange
argument_list|)
expr_stmt|;
block|}
block|}
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Dependency
name|dep
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Dependency
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setVersion
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|addDependency
argument_list|(
name|resource
argument_list|,
name|dep
argument_list|,
name|featureRange
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|public
specifier|static
name|FeatureResource
name|build
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|String
name|featureRange
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Resource
argument_list|>
name|locToRes
parameter_list|)
throws|throws
name|BundleException
block|{
name|FeatureResource
name|resource
init|=
operator|new
name|FeatureResource
argument_list|(
name|feature
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleInfo
name|info
range|:
name|feature
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|Resource
name|res
init|=
name|locToRes
operator|.
name|get
argument_list|(
name|info
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource not found for url "
operator|+
name|info
operator|.
name|getLocation
argument_list|()
argument_list|)
throw|;
block|}
name|addIdentityRequirement
argument_list|(
name|resource
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Dependency
name|dep
range|:
name|feature
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|addDependency
argument_list|(
name|resource
argument_list|,
name|dep
argument_list|,
name|featureRange
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Capability
name|cap
range|:
name|feature
operator|.
name|getCapabilities
argument_list|()
control|)
block|{
name|resource
operator|.
name|addCapabilities
argument_list|(
name|ResourceBuilder
operator|.
name|parseCapability
argument_list|(
name|resource
argument_list|,
name|cap
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Requirement
name|req
range|:
name|feature
operator|.
name|getRequirements
argument_list|()
control|)
block|{
name|resource
operator|.
name|addRequirements
argument_list|(
name|ResourceBuilder
operator|.
name|parseRequirement
argument_list|(
name|resource
argument_list|,
name|req
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
specifier|protected
specifier|static
name|void
name|addDependency
parameter_list|(
name|FeatureResource
name|resource
parameter_list|,
name|Dependency
name|dep
parameter_list|,
name|String
name|featureRange
parameter_list|)
block|{
name|String
name|name
init|=
name|dep
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|dep
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|equals
argument_list|(
literal|"0.0.0"
argument_list|)
condition|)
block|{
name|version
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|version
operator|=
name|Macro
operator|.
name|transform
argument_list|(
name|featureRange
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
name|addIdentityRequirement
argument_list|(
name|resource
argument_list|,
name|name
argument_list|,
name|TYPE_FEATURE
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Feature
name|getFeature
parameter_list|()
block|{
return|return
name|feature
return|;
block|}
block|}
end_class

end_unit

