begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|TestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|capture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createStrictMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|newCapture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_class
specifier|public
class|class
name|BootFeaturesInstallerTest
extends|extends
name|TestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INEXISTANT_REPO
init|=
literal|"mvn:inexistent/features/1.0/xml/features"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testParser
parameter_list|()
block|{
name|BootFeaturesInstaller
name|installer
init|=
operator|new
name|BootFeaturesInstaller
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|asList
argument_list|(
name|setOf
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|)
argument_list|,
name|setOf
argument_list|(
literal|"test3"
argument_list|)
argument_list|)
argument_list|,
name|installer
operator|.
name|parseBootFeatures
argument_list|(
literal|" ( test1 , test2 ) , test3 "
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|asList
argument_list|(
name|setOf
argument_list|(
literal|"test1"
argument_list|,
literal|"test2"
argument_list|,
literal|"test3"
argument_list|)
argument_list|)
argument_list|,
name|installer
operator|.
name|parseBootFeatures
argument_list|(
literal|" test1 , test2, test3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|asList
argument_list|(
name|setOf
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|setOf
argument_list|(
literal|"test2"
argument_list|)
argument_list|,
name|setOf
argument_list|(
literal|"test3"
argument_list|)
argument_list|)
argument_list|,
name|installer
operator|.
name|parseBootFeatures
argument_list|(
literal|"(test1), (test2), test3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultBootFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|FeaturesServiceImpl
name|impl
init|=
name|createMock
argument_list|(
name|FeaturesServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Capture
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|featuresCapture
init|=
name|newCapture
argument_list|()
decl_stmt|;
name|impl
operator|.
name|installFeatures
argument_list|(
name|capture
argument_list|(
name|featuresCapture
argument_list|)
argument_list|,
name|eq
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|NoFailOnFeatureNotFound
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|impl
operator|.
name|bootDone
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|BootFeaturesInstaller
name|bootFeatures
init|=
operator|new
name|BootFeaturesInstaller
argument_list|(
literal|null
argument_list|,
name|impl
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|"config,standard,region"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|bootFeatures
operator|.
name|installBootFeatures
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|featuresCapture
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"config"
argument_list|,
name|features
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"standard"
argument_list|,
name|features
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"region"
argument_list|,
name|features
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStagedBoot
parameter_list|()
throws|throws
name|Exception
block|{
name|FeaturesServiceImpl
name|impl
init|=
name|createStrictMock
argument_list|(
name|FeaturesServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|impl
operator|.
name|installFeatures
argument_list|(
name|setOf
argument_list|(
literal|"transaction"
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|NoFailOnFeatureNotFound
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|impl
operator|.
name|installFeatures
argument_list|(
name|setOf
argument_list|(
literal|"ssh"
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|NoFailOnFeatureNotFound
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|impl
operator|.
name|bootDone
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|BootFeaturesInstaller
name|bootFeatures
init|=
operator|new
name|BootFeaturesInstaller
argument_list|(
literal|null
argument_list|,
name|impl
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|"(transaction), ssh"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|bootFeatures
operator|.
name|installBootFeatures
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartDoesNotFailWithOneInvalidUri
parameter_list|()
throws|throws
name|Exception
block|{
name|FeaturesServiceImpl
name|impl
init|=
name|createStrictMock
argument_list|(
name|FeaturesServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|impl
operator|.
name|addRepository
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|INEXISTANT_REPO
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Part of the test. Can be ignored."
argument_list|)
argument_list|)
expr_stmt|;
name|impl
operator|.
name|bootDone
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|impl
argument_list|)
expr_stmt|;
name|String
index|[]
name|repositories
init|=
operator|new
name|String
index|[]
block|{
name|INEXISTANT_REPO
block|}
decl_stmt|;
name|BootFeaturesInstaller
name|bootFeatures
init|=
operator|new
name|BootFeaturesInstaller
argument_list|(
literal|null
argument_list|,
name|impl
argument_list|,
name|repositories
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|BootFeaturesInstaller
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
comment|// Switch off to suppress logging of IllegalArgumentException
name|bootFeatures
operator|.
name|installBootFeatures
argument_list|()
expr_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|impl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseBootFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|features
init|=
literal|"foo, jim, (ssh, shell, jaas, feature, framework), (system, bundle, management, service), (instance, package, log, deployer, diagnostic, config, kar), bar, zad"
decl_stmt|;
name|BootFeaturesInstaller
name|bootFeatures
init|=
operator|new
name|BootFeaturesInstaller
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|stages
init|=
name|bootFeatures
operator|.
name|parseBootFeatures
argument_list|(
name|features
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"jim"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain '"
operator|+
name|f
operator|+
literal|"'"
argument_list|,
name|stages
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ssh"
argument_list|,
literal|"shell"
argument_list|,
literal|"jaas"
argument_list|,
literal|"feature"
argument_list|,
literal|"framework"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain '"
operator|+
name|f
operator|+
literal|"'"
argument_list|,
name|stages
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"system"
argument_list|,
literal|"bundle"
argument_list|,
literal|"management"
argument_list|,
literal|"service"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain '"
operator|+
name|f
operator|+
literal|"'"
argument_list|,
name|stages
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|contains
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"instance"
argument_list|,
literal|"package"
argument_list|,
literal|"log"
argument_list|,
literal|"deployer"
argument_list|,
literal|"diagnostic"
argument_list|,
literal|"config"
argument_list|,
literal|"kar"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain '"
operator|+
name|f
operator|+
literal|"'"
argument_list|,
name|stages
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|contains
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|f
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bar"
argument_list|,
literal|"zad"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should contain '"
operator|+
name|f
operator|+
literal|"'"
argument_list|,
name|stages
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|contains
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

