begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|LocationPatternTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|matchingNonMavenUris
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"file:1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"file:1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"file:1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"file:2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"file:*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"http://*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"http://a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"file:/tmp/x*.txt"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"file:/tmp/x1.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"file:/tmp/x$2*.txt"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"file:/tmp/x$24.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"file:/tmp/x^2*.txt"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"file:/tmp/x^24.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|correctMvnLocationPatterns
parameter_list|()
block|{
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
operator|new
name|String
index|[]
block|{
literal|"mvn:groupId/artifactId"
block|,
literal|"mvn:groupId/artifactId/1"
block|,
literal|"mvn:groupId/artifactId/1/t"
block|,
literal|"mvn:groupId/artifactId/1/t/c"
block|,
literal|"mvn:groupId/*"
block|,
literal|"mvn:*/*"
block|,
literal|"mvn:*/*/[0,*)/*/*"
block|,
literal|"mvn:g/a/[1,2)"
block|,
literal|"mvn:g/a/[1,*)"
block|,
literal|"mvn:groupId/artifactId/[1.0.0,1.0.0.0)"
block|,
literal|"mvn:groupId/artifactId/[1.0,1.0.0.0)"
block|,
literal|"mvn:groupId/artifactId/[1,1.0.0.0)"
block|,         }
control|)
block|{
try|try
block|{
operator|new
name|LocationPattern
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ignored
parameter_list|)
block|{
name|exception
operator||=
literal|true
expr_stmt|;
block|}
block|}
name|assertFalse
argument_list|(
literal|"We should not fail for correct mvn: URIs"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|incorrectMvnLocationPatterns
parameter_list|()
block|{
name|boolean
name|exception
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
operator|new
name|String
index|[]
block|{
literal|"mvn:onlyGroupId"
block|,
comment|//                "mvn:groupId/artifactId/wrongVersion",
literal|"mvn:groupId/artifactId/[1.2,2"
block|,
literal|"mvn:groupId/artifactId/[1.2,"
block|,
literal|"mvn:groupId/artifactId/[1.2"
block|,
literal|"mvn:groupId/artifactId/["
block|,
comment|//                "mvn:groupId/artifactId/*",
literal|"mvn:groupId/artifactId/[wrongRange,wrongRange]"
block|,
literal|"mvn:groupId/artifactId/(wrongRange,wrongRange]"
block|,
literal|"mvn:groupId/artifactId/(wrongRange,3]"
block|,
literal|"mvn:groupId/artifactId/[1,wrongRange)"
block|,
literal|"mvn:groupId/artifactId/[1,1.2.3.4.5)"
block|,
literal|"mvn:groupId/artifactId/[1,1.2.a)"
block|,
literal|"mvn:groupId/artifactId/[1,1.a)"
block|,
literal|"mvn:groupId/artifactId/[1,1)"
block|,
literal|"mvn:groupId/artifactId/[1.0,1)"
block|,
literal|"mvn:groupId/artifactId/[1.0.0,1)"
block|,
literal|"mvn:groupId/artifactId/[1.0.0.0,1)"
block|,
literal|"mvn:groupId/artifactId/[1.0.0.0,1.0)"
block|,
literal|"mvn:groupId/artifactId/[1.0.0.0,1.0.0)"
block|,
literal|"mvn:groupId/artifactId/[1.0.0.0,1.0.0.0)"
block|}
control|)
block|{
try|try
block|{
operator|new
name|LocationPattern
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|exception
operator|&=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ignored
parameter_list|)
block|{             }
block|}
name|assertTrue
argument_list|(
literal|"We should fail for all broken mvn: URIs"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingMavenUrisWithoutPatterns
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/1/t/c"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/t/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/1//c"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/jar/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Special case - when there's no version, we don't match to \"jar\" type, but to all types"
argument_list|,
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/j"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/t/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/jar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/war"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/jar/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1//c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingMavenUrisWithVersionRangesInPattern
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,1]"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,1]"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,1.1)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,2)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,2)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,2)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1.9"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,2)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1.9.9.BUILD-SNAPSHOT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,2)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/2.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,*)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/2.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,*)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/42.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,*)"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/9999.9999.9999.9999"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingMavenUrisWithPatterns
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/a/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/*/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/1"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/[1,*)/jar"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/war/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/[1,*)/jar"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/war"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/[1,*)/jar"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/[1,*)/jar"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1//c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/[1,*)/jar/c*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1//d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/[1,*)/jar/d*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1//d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1//c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/t/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/2/*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/[1,2)/*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/1/*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/1/*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1//c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/1/*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/jar/c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:*/*/1/*/*"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/1/t/c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|matchingMavenUrisWithVersionRangesInUri
parameter_list|()
throws|throws
name|MalformedURLException
block|{
name|assertFalse
argument_list|(
operator|new
name|LocationPattern
argument_list|(
literal|"mvn:g/a/[1,1]"
argument_list|)
operator|.
name|matches
argument_list|(
literal|"mvn:g/a/[1,1]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

