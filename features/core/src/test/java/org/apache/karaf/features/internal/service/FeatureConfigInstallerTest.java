begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_class
specifier|public
class|class
name|FeatureConfigInstallerTest
block|{
specifier|private
name|void
name|substEqual
parameter_list|(
specifier|final
name|String
name|src
parameter_list|,
specifier|final
name|String
name|subst
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|FeatureConfigInstaller
operator|.
name|substFinalName
argument_list|(
name|src
argument_list|)
argument_list|,
name|subst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSubstFinalName
parameter_list|()
block|{
specifier|final
name|String
name|karafBase
init|=
literal|"/tmp/karaf.base"
decl_stmt|;
specifier|final
name|String
name|karafEtc
init|=
name|karafBase
operator|+
literal|"/etc"
decl_stmt|;
specifier|final
name|String
name|foo
init|=
literal|"/foo"
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.base"
argument_list|,
name|karafBase
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.etc"
argument_list|,
name|karafEtc
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|foo
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"etc/test.cfg"
argument_list|,
name|karafBase
operator|+
name|File
operator|.
name|separator
operator|+
literal|"etc/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"/etc/test.cfg"
argument_list|,
name|karafBase
operator|+
name|File
operator|.
name|separator
operator|+
literal|"/etc/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"${karaf.etc}/test.cfg"
argument_list|,
name|karafEtc
operator|+
literal|"/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"${karaf.base}/etc/test.cfg"
argument_list|,
name|karafBase
operator|+
literal|"/etc/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"etc/${foo}/test.cfg"
argument_list|,
name|karafBase
operator|+
name|File
operator|.
name|separator
operator|+
literal|"etc/"
operator|+
name|foo
operator|+
literal|"/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"${foo}/test.cfg"
argument_list|,
name|foo
operator|+
literal|"/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"etc${bar}/${bar}test.cfg"
argument_list|,
name|karafBase
operator|+
name|File
operator|.
name|separator
operator|+
literal|"etc/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"${bar}/etc/test.cfg${bar}"
argument_list|,
name|karafBase
operator|+
name|File
operator|.
name|separator
operator|+
literal|"/etc/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"${karaf.base}${bar}/etc/test.cfg"
argument_list|,
name|karafBase
operator|+
literal|"/etc/test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"etc${}/${foo}/test.cfg"
argument_list|,
name|karafBase
operator|+
name|File
operator|.
name|separator
operator|+
literal|"etc//test.cfg"
argument_list|)
expr_stmt|;
name|substEqual
argument_list|(
literal|"${foo}${bar}/${bar}${foo}"
argument_list|,
name|foo
operator|+
literal|"/"
operator|+
name|foo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGoodConfigName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dataDir
init|=
literal|"data4"
decl_stmt|;
name|Path
name|karafEtc
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"etc"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.etc"
argument_list|,
name|karafEtc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Feature
name|f100
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"goodConfigName"
argument_list|,
name|f100
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|configAdmin
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|configAdmin
operator|.
name|getConfiguration
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|configAdmin
argument_list|)
expr_stmt|;
name|FeatureConfigInstaller
name|installer
init|=
operator|new
name|FeatureConfigInstaller
argument_list|(
name|configAdmin
argument_list|)
decl_stmt|;
name|installer
operator|.
name|installFeatureConfigs
argument_list|(
name|f100
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|configAdmin
argument_list|)
expr_stmt|;
name|File
name|installedFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|karafEtc
operator|.
name|toString
argument_list|()
argument_list|,
literal|"config.cfg"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|installedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|installedFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|karafEtc
operator|.
name|toFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadConfigName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dataDir
init|=
literal|"data4"
decl_stmt|;
name|Path
name|karafEtc
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"etc"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.etc"
argument_list|,
name|karafEtc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Feature
name|f100
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"badConfigName"
argument_list|,
name|f100
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|configAdmin
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|config
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|configAdmin
operator|.
name|getConfiguration
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|isNull
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|configAdmin
argument_list|)
expr_stmt|;
name|FeatureConfigInstaller
name|installer
init|=
operator|new
name|FeatureConfigInstaller
argument_list|(
name|configAdmin
argument_list|)
decl_stmt|;
name|installer
operator|.
name|installFeatureConfigs
argument_list|(
name|f100
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|configAdmin
argument_list|)
expr_stmt|;
comment|// Verify the file was not installed
name|File
name|installedFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|karafEtc
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../../../../../../../../../../../../tmp/config"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|installedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|karafEtc
operator|.
name|toFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadConfigFileName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dataDir
init|=
literal|"data4"
decl_stmt|;
name|Path
name|karafEtc
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"etc"
argument_list|)
decl_stmt|;
name|Path
name|karafBase
init|=
name|Files
operator|.
name|createTempDirectory
argument_list|(
literal|"base"
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.etc"
argument_list|,
name|karafEtc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.base"
argument_list|,
name|karafBase
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Feature
name|f100
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"badConfigFileName"
argument_list|,
name|f100
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|configAdmin
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|configAdmin
argument_list|)
expr_stmt|;
name|FeatureConfigInstaller
name|installer
init|=
operator|new
name|FeatureConfigInstaller
argument_list|(
name|configAdmin
argument_list|)
decl_stmt|;
try|try
block|{
name|installer
operator|.
name|installFeatureConfigs
argument_list|(
name|f100
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on a bad config filename"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// expected
block|}
name|EasyMock
operator|.
name|verify
argument_list|(
name|configAdmin
argument_list|)
expr_stmt|;
comment|// Verify the file was not installed
name|File
name|installedFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|karafBase
operator|.
name|toString
argument_list|()
argument_list|,
literal|"../../../../../../../../../../../../tmp/config2"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|installedFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|karafBase
operator|.
name|toFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|karafEtc
operator|.
name|toFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

