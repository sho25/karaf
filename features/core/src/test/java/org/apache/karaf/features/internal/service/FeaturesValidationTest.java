begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FeaturesValidationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testNs10
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|features
init|=
name|unmarshalAndValidate
argument_list|(
literal|"f02.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|features
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNs10NoName
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|features
init|=
name|unmarshalAndValidate
argument_list|(
literal|"f03.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|features
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNs11
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|features
init|=
name|unmarshalAndValidate
argument_list|(
literal|"f04.xml"
argument_list|)
decl_stmt|;
empty_stmt|;
name|assertNotNull
argument_list|(
name|features
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNs11NoName
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|unmarshalAndValidate
argument_list|(
literal|"f05.xml"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Validation should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNs12Unmarshall
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|features
init|=
name|unmarshalAndValidate
argument_list|(
literal|"f06.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|features
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNs13
parameter_list|()
throws|throws
name|Exception
block|{
name|Repository
name|features
init|=
name|unmarshalAndValidate
argument_list|(
literal|"f07.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|Feature
name|f0
init|=
name|features
operator|.
name|getFeatures
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Feature
name|f1
init|=
name|features
operator|.
name|getFeatures
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2.5.6.SEC02"
argument_list|,
name|f0
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f1
operator|.
name|isHidden
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|f1
operator|.
name|getLibraries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|f0
operator|.
name|getLibraries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Library
name|lib
init|=
name|f0
operator|.
name|getLibraries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"my-library"
argument_list|,
name|lib
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Library
operator|.
name|TYPE_ENDORSED
argument_list|,
name|lib
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lib
operator|.
name|isExport
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lib
operator|.
name|isDelegate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Repository
name|unmarshalAndValidate
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
return|return
operator|new
name|RepositoryImpl
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

