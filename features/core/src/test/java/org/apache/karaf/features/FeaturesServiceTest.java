begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|BundleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|BundleManager
operator|.
name|BundleInstallerResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|FeaturesServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|TestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|PackageAdmin
import|;
end_import

begin_class
specifier|public
class|class
name|FeaturesServiceTest
extends|extends
name|TestBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FEATURE_WITH_INVALID_BUNDLE
init|=
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1'><bundle>%s</bundle><bundle>zfs:unknown</bundle></feature>"
operator|+
literal|"<feature name='f2'><bundle>%s</bundle></feature>"
operator|+
literal|"</features>"
decl_stmt|;
name|File
name|dataFile
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|dataFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"features"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|URI
name|createTempRepo
parameter_list|(
name|String
name|repoContent
parameter_list|,
name|Object
modifier|...
name|variables
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"karaf"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|printf
argument_list|(
name|repoContent
argument_list|,
name|variables
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tmp
operator|.
name|toURI
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1'><bundle start='true'>bundle-f1</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
literal|"bundle-f1"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
name|testAddRepository
argument_list|(
literal|"bundle-f1"
argument_list|,
name|uri
argument_list|,
name|bundleManager
argument_list|,
name|installedBundle
argument_list|)
decl_stmt|;
name|reset
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|eq
argument_list|(
literal|"bundle-f1"
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
operator|.
name|DEFAULT_VERSION
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|Feature
index|[]
name|installed
init|=
name|svc
operator|.
name|listInstalledFeatures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|installed
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|installed
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FeaturesServiceImpl
name|testAddRepository
parameter_list|(
name|String
name|name
parameter_list|,
name|URI
name|uri
parameter_list|,
name|BundleManager
name|bundleManager
parameter_list|,
name|Bundle
name|installedBundle
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
throws|,
name|Exception
block|{
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|eq
argument_list|(
name|name
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|Repository
index|[]
name|repositories
init|=
name|svc
operator|.
name|listRepositories
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repositories
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repositories
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Feature
index|[]
name|features
init|=
name|repositories
index|[
literal|0
index|]
operator|.
name|getFeatures
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|features
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|features
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|features
index|[
literal|0
index|]
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getDependencies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isStart
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|svc
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testUninstallFeatureWithTwoVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><bundle>bundle-0.1</bundle></feature>"
operator|+
literal|"<feature name='f1' version='0.2'><bundle>bundle-0.1</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|Bundle
name|bundlef101
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
literal|"bundle-0.1"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"bundle-0.1"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|bundlef101
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"bundle-0.1"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|bundlef101
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|bundleManager
operator|.
name|uninstall
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Uninstall should have failed as feature is not installed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.2"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Uninstall should have failed as feature is installed in multiple versions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAndRemoveRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><bundle>bundle-f1-0.1</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|removeRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
comment|// Tests install of a Repository that includes a feature
comment|// with a feature dependency
comment|// The dependant feature is in the same repository
comment|// Tests uninstall of features
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInstallFeatureWithDependantFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><feature version='0.1'>f2</feature><bundle>bundle-f1-0.1</bundle></feature>"
operator|+
literal|"<feature name='f2' version='0.1'><bundle>bundle-f2-0.1</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|bundlef101
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
literal|"bundle-f1-0.1"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|Bundle
name|bundlef201
init|=
name|createDummyBundle
argument_list|(
literal|54321L
argument_list|,
literal|"bundle-f2-0.1"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"bundle-f1-0.1"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|bundlef101
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"bundle-f2-0.1"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|bundlef201
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleContext
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundlef101
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|bundleManager
operator|.
name|uninstall
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|BundleManager
name|prepareBundleManagerForInstallUninstall
parameter_list|(
name|String
name|bundleUri
parameter_list|,
name|String
name|bundlename
parameter_list|)
throws|throws
name|Exception
block|{
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
name|bundlename
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundleUri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|bundleManager
operator|.
name|uninstall
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
return|return
name|bundleManager
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallFeatureWithDependantFeaturesAndVersionWithoutPreinstall
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><feature version='0.1'>f2</feature></feature>"
operator|+
literal|"<feature name='f2' version='0.1'><bundle>bundle-0.1</bundle></feature>"
operator|+
literal|"<feature name='f2' version='0.2'><bundle>bundle-0.2</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|prepareBundleManagerForInstallUninstall
argument_list|(
literal|"bundle-0.1"
argument_list|,
literal|"bundle-0.1"
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallFeatureWithDependantFeaturesAndNoVersionWithoutPreinstall
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><feature>f2</feature></feature>"
operator|+
literal|"<feature name='f2' version='0.1'><bundle>bundle-0.1</bundle></feature>"
operator|+
literal|"<feature name='f2' version='0.2'><bundle>bundle-0.2</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|prepareBundleManagerForInstallUninstall
argument_list|(
literal|"bundle-0.2"
argument_list|,
literal|"bundle-0.2"
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.2"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInstallFeatureWithDependantFeaturesAndRangeWithoutPreinstall
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><feature version='[0.1,0.3)'>f2</feature></feature>"
operator|+
literal|"<feature name='f2' version='0.1'><bundle>bundle-0.1</bundle></feature>"
operator|+
literal|"<feature name='f2' version='0.2'><bundle>bundle-0.2</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|bundleVer02
init|=
name|createDummyBundle
argument_list|(
literal|54321L
argument_list|,
literal|"bundleVer02"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"bundle-0.2"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|bundleVer02
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|bundleManager
operator|.
name|uninstall
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.2"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInstallFeatureWithDependantFeaturesAndRangeWithPreinstall
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundleVer01Uri
init|=
literal|"bundle-0.1"
decl_stmt|;
name|String
name|bundleVer02Uri
init|=
literal|"bundle-0.2"
decl_stmt|;
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><feature version='[0.1,0.3)'>f2</feature></feature>"
operator|+
literal|"<feature name='f2' version='0.1'><bundle>%s</bundle></feature>"
operator|+
literal|"<feature name='f2' version='0.2'><bundle>%s</bundle></feature>"
operator|+
literal|"</features>"
argument_list|,
name|bundleVer01Uri
argument_list|,
name|bundleVer02Uri
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|bundleVer01
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
literal|"bundleVer01"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundleVer01Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|bundleVer01
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundleVer01Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|bundleVer01
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|bundleManager
operator|.
name|uninstall
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|times
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFeaturesShouldHandleDifferentVersionPatterns
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1' version='0.1'><feature version='[0.1,0.3)'>f2</feature></feature>"
operator|+
literal|"<feature name='f2' version='0.1'><bundle>bundle1</bundle></feature>"
operator|+
literal|"<feature name='f2' version='0.2'><bundle>bundle2</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|feature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.2"
argument_list|)
argument_list|,
name|svc
operator|.
name|getFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"[0.1,0.3)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|feature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.2"
argument_list|)
argument_list|,
name|svc
operator|.
name|getFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|feature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.2"
argument_list|)
argument_list|,
name|svc
operator|.
name|getFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|svc
operator|.
name|getFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallBatchFeatureWithContinueOnFailureNoClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1Uri
init|=
literal|"bundle1"
decl_stmt|;
name|String
name|bundle2Uri
init|=
literal|"bundle2"
decl_stmt|;
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
name|FEATURE_WITH_INVALID_BUNDLE
argument_list|,
name|bundle1Uri
argument_list|,
name|bundle2Uri
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
literal|"bundle1"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|createDummyBundle
argument_list|(
literal|54321L
argument_list|,
literal|"bundle2"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle1Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle2Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"zfs:unknown"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|MalformedURLException
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|ContinueBatchOnFailure
argument_list|,
name|FeaturesService
operator|.
name|Option
operator|.
name|NoCleanIfFailure
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallBatchFeatureWithContinueOnFailureClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1Uri
init|=
literal|"file:bundle1"
decl_stmt|;
name|String
name|bundle2Uri
init|=
literal|"file:bundle2"
decl_stmt|;
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
name|FEATURE_WITH_INVALID_BUNDLE
argument_list|,
name|bundle1Uri
argument_list|,
name|bundle2Uri
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
literal|"bundle1"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|createDummyBundle
argument_list|(
literal|54321L
argument_list|,
literal|"bundle2"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle1Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle2Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"zfs:unknown"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|MalformedURLException
argument_list|()
argument_list|)
expr_stmt|;
name|bundleManager
operator|.
name|uninstall
argument_list|(
name|setOf
argument_list|(
name|installedBundle1
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|ignoreRefreshes
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|ContinueBatchOnFailure
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallBatchFeatureWithoutContinueOnFailureNoClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1Uri
init|=
literal|"file:bundle1"
decl_stmt|;
name|String
name|bundle2Uri
init|=
literal|"file:bundle2"
decl_stmt|;
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
name|FEATURE_WITH_INVALID_BUNDLE
argument_list|,
name|bundle1Uri
argument_list|,
name|bundle2Uri
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
name|bundle1Uri
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|createDummyBundle
argument_list|(
literal|54321L
argument_list|,
name|bundle2Uri
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle1Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle2Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"zfs:unknown"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|MalformedURLException
argument_list|()
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|features
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoCleanIfFailure
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Call should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{         }
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallBatchFeatureWithoutContinueOnFailureClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1Uri
init|=
literal|"file:bundle1"
decl_stmt|;
name|String
name|bundle2Uri
init|=
literal|"file:bundle2"
decl_stmt|;
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
name|FEATURE_WITH_INVALID_BUNDLE
argument_list|,
name|bundle1Uri
argument_list|,
name|bundle2Uri
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|createDummyBundle
argument_list|(
literal|12345L
argument_list|,
literal|"bundle1"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|createDummyBundle
argument_list|(
literal|54321L
argument_list|,
literal|"bundle2"
argument_list|,
name|headers
argument_list|()
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle1Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
name|bundle2Uri
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|BundleInstallerResult
argument_list|(
name|installedBundle2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|installBundleIfNeeded
argument_list|(
literal|"zfs:unknown"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|MalformedURLException
argument_list|()
argument_list|)
expr_stmt|;
name|bundleManager
operator|.
name|uninstall
argument_list|(
name|setOf
argument_list|(
name|installedBundle1
argument_list|,
name|installedBundle2
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|features
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Call should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{         }
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test checks schema validation of submited uri.      */
annotation|@
name|Test
specifier|public
name|void
name|testSchemaValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<featur><bundle>somebundle</bundle></featur></features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
try|try
block|{
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unable to validate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test checks feature service behavior with old, non namespaced descriptor.      */
annotation|@
name|Test
specifier|public
name|void
name|testLoadOldFeatureFile
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|createTempRepo
argument_list|(
literal|"<features name='test' xmlns='http://karaf.apache.org/xmlns/features/v1.0.0'>"
operator|+
literal|"<feature name='f1'><bundle>file:bundle1</bundle><bundle>file:bundle2</bundle></feature>"
operator|+
literal|"</features>"
argument_list|)
decl_stmt|;
name|BundleManager
name|bundleManager
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleManager
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleManager
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|(
name|bundleManager
argument_list|)
decl_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|Feature
name|feature
init|=
name|svc
operator|.
name|getFeature
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"No feature named fi found"
argument_list|,
name|feature
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
init|=
name|feature
operator|.
name|getBundles
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bundles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

