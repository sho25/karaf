begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarInputStream
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|FeatureImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|FeaturesServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|log
operator|.
name|LogService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|PackageAdmin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FeaturesServiceTest
extends|extends
name|TestCase
block|{
name|File
name|dataFile
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|dataFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"features"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInstallFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|Repository
index|[]
name|repositories
init|=
name|svc
operator|.
name|listRepositories
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|repositories
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|repositories
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Feature
index|[]
name|features
init|=
name|repositories
index|[
literal|0
index|]
operator|.
name|getFeatures
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|features
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|features
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|features
index|[
literal|0
index|]
operator|.
name|getDependencies
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getDependencies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|features
index|[
literal|0
index|]
operator|.
name|getBundles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isStart
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
name|FeatureImpl
operator|.
name|DEFAULT_VERSION
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
argument_list|)
expr_stmt|;
name|Feature
index|[]
name|installed
init|=
name|svc
operator|.
name|listInstalledFeatures
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|installed
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|installed
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUninstallFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\" version=\"0.1\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\" version=\"0.2\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
comment|// Installs f1 and 0.1
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Installs f1 and 0.2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|123456L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// UnInstalls f1 and 0.1
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
comment|// UnInstalls f1 and 0.2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|123456
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Uninstall should have failed as feature is not installed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.2"
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoAutoRefreshBundles
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Uninstall should have failed as feature is installed in multiple versions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
block|}
comment|// Tests Add and Remove Repository
specifier|public
name|void
name|testAddAndRemoveRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\" version=\"0.1\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\" version=\"0.2\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f2\" version=\"0.2\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
comment|// loads the state
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
comment|// Adds Repository
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
comment|// Removes Repository
name|svc
operator|.
name|removeRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
comment|// Tests installing all features in a repo and uninstalling
comment|// all features in a repo
specifier|public
name|void
name|testInstallUninstallAllFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\" version=\"0.1\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\" version=\"0.2\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f2\" version=\"0.2\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Installs first feature name = f1, version = 0.1
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"bundle"
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Installs second feature name = f1, version = 0.2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|123456L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Installs third feature name = f2, version = 0.2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1234567L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1234567L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1234567L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|1234567L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
comment|// uninstallAllFeatures
comment|// uninstalls first feature name = f1, version = 0.1
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
comment|// uninstalls third feature name = f2, version = 0.2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|1234567
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
comment|// uninstalls second feature name = f1, version = 0.2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|123456
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installAllFeatures
argument_list|(
name|uri
argument_list|)
expr_stmt|;
comment|// Uninstalls features with versions.
name|svc
operator|.
name|uninstallAllFeatures
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
comment|// Tests install of a Repository that includes a feature
comment|// with a feature dependency
comment|// The dependant feature is in the same repository
comment|// Tests uninstall of features
specifier|public
name|void
name|testInstallFeatureWithDependantFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|name
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f1\" version=\"0.1\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature version=\"0.1\">f2</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name=\"f2\" version=\"0.1\">"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|name
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Installs feature f1 with dependency on f2
comment|// so will install f2 first
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Then installs f1
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1234L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1234L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1234L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|1234L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|installedBundle
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// uninstalls first feature name = f1, version = 0.1
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|1234
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
comment|// uninstalls first feature name = f2, version = 0.1
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|12345
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle
argument_list|)
expr_stmt|;
name|installedBundle
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
comment|// Uninstall repository
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f1"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|uninstallFeature
argument_list|(
literal|"f2"
argument_list|,
literal|"0.1"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInstallBatchFeatureWithContinueOnFailureNoClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|bundle2
init|=
name|getJarUrl
argument_list|(
name|LogService
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f1'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle1
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
literal|"zfs:unknown"
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f2'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle2
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Installs feature f1 and f2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle1
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle2
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|installedBundle2
operator|.
name|start
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle1
argument_list|,
name|installedBundle2
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|ContinueBatchOnFailure
argument_list|,
name|FeaturesService
operator|.
name|Option
operator|.
name|NoCleanIfFailure
argument_list|)
argument_list|)
expr_stmt|;
comment|//        verify(preferencesService, prefs, repositoriesNode, featuresNode, bundleContext, installedBundle1, installedBundle2);
block|}
specifier|public
name|void
name|testInstallBatchFeatureWithContinueOnFailureClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|bundle2
init|=
name|getJarUrl
argument_list|(
name|LogService
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f1'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle1
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
literal|"zfs:unknown"
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f2'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle2
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Installs feature f1 and f2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle1
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|installedBundle1
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle2
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Hashtable
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|installedBundle2
operator|.
name|start
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle1
argument_list|,
name|installedBundle2
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|ContinueBatchOnFailure
argument_list|)
argument_list|)
expr_stmt|;
comment|//        verify(preferencesService, prefs, repositoriesNode, featuresNode, bundleContext, installedBundle1, installedBundle2);
block|}
specifier|public
name|void
name|testInstallBatchFeatureWithoutContinueOnFailureNoClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|bundle2
init|=
name|getJarUrl
argument_list|(
name|LogService
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f1'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle1
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
literal|"zfs:unknown"
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f2'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle2
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Installs feature f1 and f2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle1
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle2
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|installedBundle2
operator|.
name|start
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle1
argument_list|,
name|installedBundle2
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|features
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|NoCleanIfFailure
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Call should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{         }
comment|//        verify(preferencesService, prefs, repositoriesNode, featuresNode, bundleContext, installedBundle1, installedBundle2);
block|}
specifier|public
name|void
name|testInstallBatchFeatureWithoutContinueOnFailureClean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|bundle2
init|=
name|getJarUrl
argument_list|(
name|LogService
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f1'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle1
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
literal|"zfs:unknown"
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f2'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle2
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Installs feature f1 and f2
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle1
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|installedBundle1
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle2
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|installedBundle2
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|installedBundle1
argument_list|,
name|installedBundle2
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|features
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Call should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{         }
comment|//        verify(preferencesService, prefs, repositoriesNode, featuresNode, bundleContext, installedBundle1, installedBundle2);
block|}
specifier|public
name|void
name|testInstallFeatureWithHostToRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bundle1
init|=
name|getJarUrl
argument_list|(
name|LogService
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|bundle2
init|=
name|getJarUrl
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"smx"
argument_list|,
literal|".feature"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|tmp
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<feature name='f1'>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle1
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"<bundle>"
operator|+
name|bundle2
operator|+
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|URI
name|uri
init|=
name|tmp
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|JarInputStream
name|j
init|=
operator|new
name|JarInputStream
argument_list|(
operator|new
name|URL
argument_list|(
name|bundle1
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
name|j
operator|.
name|getManifest
argument_list|()
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// loads the state
name|PackageAdmin
name|packageAdmin
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|PackageAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle1
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|installedBundle2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Installs feature f1
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|12345L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|headers
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[]
block|{
name|installedBundle1
block|}
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|eq
argument_list|(
name|bundle2
argument_list|)
argument_list|,
name|isA
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|installedBundle2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[]
block|{
name|installedBundle1
block|,
name|installedBundle2
block|}
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"fragment"
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Dictionary
name|d
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|d
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|d
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Bundle
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Bundle
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Bundle
operator|.
name|INSTALLED
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|installedBundle2
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Bundle
operator|.
name|INSTALLED
argument_list|)
expr_stmt|;
comment|//
comment|// This is the real test to make sure the host is actually refreshed
comment|//
name|packageAdmin
operator|.
name|refreshPackages
argument_list|(
name|aryEq
argument_list|(
operator|new
name|Bundle
index|[]
block|{
name|installedBundle1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|packageAdmin
argument_list|,
name|bundleContext
argument_list|,
name|installedBundle1
argument_list|,
name|installedBundle2
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|svc
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|svc
operator|.
name|setPackageAdmin
argument_list|(
name|packageAdmin
argument_list|)
expr_stmt|;
name|svc
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|svc
operator|.
name|addRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|svc
operator|.
name|listFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|features
argument_list|)
expr_stmt|;
name|svc
operator|.
name|installFeatures
argument_list|(
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|features
argument_list|)
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|//        verify(preferencesService, prefs, repositoriesNode, featuresNode, bundleContext, installedBundle1, installedBundle2);
block|}
specifier|private
name|String
name|getJarUrl
parameter_list|(
name|Class
name|cl
parameter_list|)
block|{
name|String
name|name
init|=
name|cl
operator|.
name|getName
argument_list|()
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
expr_stmt|;
name|name
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|"jar:"
operator|.
name|length
argument_list|()
argument_list|,
name|name
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

