begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkListener
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link FeaturesServiceImpl}  */
end_comment

begin_class
specifier|public
class|class
name|FeaturesServiceImplTest
extends|extends
name|TestCase
block|{
name|File
name|dataFile
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|dataFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"features"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetFeature
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|FeatureImpl
name|feature
init|=
operator|new
name|FeatureImpl
argument_list|(
literal|"transaction"
argument_list|)
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
literal|"1.0.0"
argument_list|,
name|feature
argument_list|)
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
literal|"transaction"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
specifier|final
name|FeaturesServiceImpl
name|impl
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|features
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
name|FeatureImpl
operator|.
name|DEFAULT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|feature
argument_list|,
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
name|FeatureImpl
operator|.
name|DEFAULT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetFeatureStripVersion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|FeatureImpl
name|feature
init|=
operator|new
name|FeatureImpl
argument_list|(
literal|"transaction"
argument_list|)
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
literal|"1.0.0"
argument_list|,
name|feature
argument_list|)
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
literal|"transaction"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
specifier|final
name|FeaturesServiceImpl
name|impl
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|features
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
literal|"  1.0.0  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|feature
argument_list|,
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
literal|"  1.0.0   "
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetFeatureNotAvailable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
literal|"1.0.0"
argument_list|,
operator|new
name|FeatureImpl
argument_list|(
literal|"transaction"
argument_list|)
argument_list|)
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
literal|"transaction"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
specifier|final
name|FeaturesServiceImpl
name|impl
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|features
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|assertNull
argument_list|(
name|impl
operator|.
name|getFeature
argument_list|(
literal|"activemq"
argument_list|,
name|FeatureImpl
operator|.
name|DEFAULT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetFeatureHighestAvailable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
literal|"1.0.0"
argument_list|,
operator|new
name|FeatureImpl
argument_list|(
literal|"transaction"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|versions
operator|.
name|put
argument_list|(
literal|"2.0.0"
argument_list|,
operator|new
name|FeatureImpl
argument_list|(
literal|"transaction"
argument_list|,
literal|"2.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
literal|"transaction"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
specifier|final
name|FeaturesServiceImpl
name|impl
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|features
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|assertNotNull
argument_list|(
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
name|FeatureImpl
operator|.
name|DEFAULT_VERSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"2.0.0"
argument_list|,
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
name|FeatureImpl
operator|.
name|DEFAULT_VERSION
argument_list|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStartDoesNotFailWithOneInvalidUri
parameter_list|()
block|{
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getDataFile
argument_list|(
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|dataFile
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|bundleContext
operator|.
name|addFrameworkListener
argument_list|(
name|EasyMock
operator|.
expr|<
name|FrameworkListener
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|bundleContext
operator|.
name|removeFrameworkListener
argument_list|(
name|EasyMock
operator|.
expr|<
name|FrameworkListener
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|service
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|service
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|setUrls
argument_list|(
literal|"mvn:inexistent/features/1.0/xml/features"
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Service should not throw start-up exception but log the error instead: %s"
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This test checks KARAF-388 which allows you to specify version of boot feature.      */
specifier|public
name|void
name|testStartDoesNotFailWithNonExistentVersion
parameter_list|()
block|{
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|versions
operator|.
name|put
argument_list|(
literal|"1.0.0"
argument_list|,
operator|new
name|FeatureImpl
argument_list|(
literal|"transaction"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|versions
operator|.
name|put
argument_list|(
literal|"2.0.0"
argument_list|,
operator|new
name|FeatureImpl
argument_list|(
literal|"transaction"
argument_list|,
literal|"2.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
literal|"transaction"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|versions2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
name|versions2
operator|.
name|put
argument_list|(
literal|"1.0.0"
argument_list|,
operator|new
name|FeatureImpl
argument_list|(
literal|"ssh"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|features
operator|.
name|put
argument_list|(
literal|"ssh"
argument_list|,
name|versions2
argument_list|)
expr_stmt|;
specifier|final
name|FeaturesServiceImpl
name|impl
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|>
name|getFeatures
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|features
return|;
block|}
empty_stmt|;
comment|// override methods which refers to bundle context to avoid mocking everything
annotation|@
name|Override
specifier|protected
name|boolean
name|loadState
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|saveState
parameter_list|()
block|{             }
block|}
decl_stmt|;
name|impl
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|impl
operator|.
name|setBoot
argument_list|(
literal|"transaction;version=1.2,ssh;version=1.0.0"
argument_list|)
expr_stmt|;
name|impl
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Feature transaction 1.0.0 should not be installed"
argument_list|,
name|impl
operator|.
name|isInstalled
argument_list|(
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Feature transaction 2.0.0 should not be installed"
argument_list|,
name|impl
operator|.
name|isInstalled
argument_list|(
name|impl
operator|.
name|getFeature
argument_list|(
literal|"transaction"
argument_list|,
literal|"2.0.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Feature ssh should be installed"
argument_list|,
name|impl
operator|.
name|isInstalled
argument_list|(
name|impl
operator|.
name|getFeature
argument_list|(
literal|"ssh"
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Service should not throw start-up exception but log the error instead: %s"
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetOptionalImportsOnly
parameter_list|()
block|{
name|FeaturesServiceImpl
name|service
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|result
init|=
name|service
operator|.
name|getOptionalImports
argument_list|(
literal|"org.apache.karaf,org.apache.karaf.optional;resolution:=optional"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"One optional import expected"
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.karaf.optional"
argument_list|,
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|getOptionalImports
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No optional imports expected"
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

