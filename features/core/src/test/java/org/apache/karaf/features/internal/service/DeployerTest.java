begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|ResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|DeploymentEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|Slf4jResolverLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|support
operator|.
name|TestBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|support
operator|.
name|TestDownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
operator|.
name|addToMapSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|DeployerTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DeployerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Resolver
name|resolver
init|=
operator|new
name|ResolverImpl
argument_list|(
operator|new
name|Slf4jResolverLog
argument_list|(
name|LOGGER
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testInstallSimpleFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|IMocksControl
name|c
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|String
name|dataDir
init|=
literal|"data1"
decl_stmt|;
name|TestDownloadManager
name|manager
init|=
operator|new
name|TestDownloadManager
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Feature
name|f100
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Feature
name|f101
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|Deployer
operator|.
name|DeployCallback
name|callback
init|=
name|c
operator|.
name|createMock
argument_list|(
name|Deployer
operator|.
name|DeployCallback
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleInstallSupport
name|installSupport
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleInstallSupportImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|installSupport
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|callback
operator|.
name|print
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_STARTED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|replaceDigraph
argument_list|(
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|saveState
argument_list|(
name|EasyMock
operator|.
expr|<
name|State
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installConfigs
argument_list|(
name|f100
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installLibraries
argument_list|(
name|f100
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_INSTALLED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|resolveBundles
argument_list|(
name|EasyMock
operator|.
expr|<
name|Set
argument_list|<
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_RESOLVED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|EasyMock
operator|.
expr|<
name|FeatureEvent
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_FINISHED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|Bundle
name|bundleA
init|=
name|createTestBundle
argument_list|(
literal|1
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"a100"
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|installSupport
operator|.
name|installBundle
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ROOT_REGION
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"a100"
argument_list|)
argument_list|,
name|EasyMock
operator|.
expr|<
name|InputStream
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundleA
argument_list|)
expr_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Deployer
operator|.
name|DeploymentState
name|dstate
init|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
decl_stmt|;
name|dstate
operator|.
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f100
operator|.
name|getId
argument_list|()
argument_list|,
name|f100
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f101
operator|.
name|getId
argument_list|()
argument_list|,
name|f101
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|request
operator|.
name|updateSnaphots
operator|=
name|UPDATE_SNAPSHOTS_NONE
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|ROOT_REGION
argument_list|,
name|f100
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|f100
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|deployer
operator|.
name|deploy
argument_list|(
name|dstate
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateSimpleFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|IMocksControl
name|c
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dataDir
init|=
literal|"data1"
decl_stmt|;
name|TestDownloadManager
name|manager
init|=
operator|new
name|TestDownloadManager
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Feature
name|f100
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Feature
name|f101
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|Deployer
operator|.
name|DeployCallback
name|callback
init|=
name|c
operator|.
name|createMock
argument_list|(
name|Deployer
operator|.
name|DeployCallback
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleInstallSupport
name|installSupport
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleInstallSupportImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|installSupport
argument_list|,
name|callback
argument_list|)
decl_stmt|;
specifier|final
name|TestBundle
name|bundleA
init|=
name|createTestBundle
argument_list|(
literal|1L
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"a100"
argument_list|)
decl_stmt|;
name|callback
operator|.
name|print
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_STARTED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|stopBundle
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|bundleA
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andStubAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|bundleA
operator|.
name|state
operator|=
name|Bundle
operator|.
name|RESOLVED
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|installSupport
operator|.
name|updateBundle
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|bundleA
argument_list|)
argument_list|,
name|EasyMock
operator|.
expr|<
name|String
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|InputStream
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andStubAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|URL
name|loc
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/"
operator|+
literal|"a101"
operator|+
literal|".mf"
argument_list|)
decl_stmt|;
name|Manifest
name|man
init|=
operator|new
name|Manifest
argument_list|(
name|loc
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|attr
range|:
name|man
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bundleA
operator|.
name|update
argument_list|(
name|headers
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|installSupport
operator|.
name|startBundle
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|bundleA
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|replaceDigraph
argument_list|(
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|saveState
argument_list|(
name|EasyMock
operator|.
expr|<
name|State
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installConfigs
argument_list|(
name|f101
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installLibraries
argument_list|(
name|f101
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_INSTALLED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|resolveBundles
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|Collections
operator|.
expr|<
name|Bundle
operator|>
name|singleton
argument_list|(
name|bundleA
argument_list|)
argument_list|)
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_RESOLVED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|refreshPackages
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|Collections
operator|.
expr|<
name|Bundle
operator|>
name|singleton
argument_list|(
name|bundleA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|FeatureEventMatcher
operator|.
name|eq
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureUninstalled
argument_list|,
name|f100
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|FeatureEventMatcher
operator|.
name|eq
argument_list|(
operator|new
name|FeatureEvent
argument_list|(
name|FeatureEvent
operator|.
name|EventType
operator|.
name|FeatureInstalled
argument_list|,
name|f101
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_FINISHED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Deployer
operator|.
name|DeploymentState
name|dstate
init|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
decl_stmt|;
name|dstate
operator|.
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|installedFeatures
argument_list|,
name|ROOT_REGION
argument_list|,
name|f100
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|managedBundles
argument_list|,
name|ROOT_REGION
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|.
name|put
argument_list|(
literal|1L
argument_list|,
name|bundleA
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|bundlesPerRegion
argument_list|,
name|ROOT_REGION
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|features
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f100
operator|.
name|getId
argument_list|()
argument_list|,
name|f100
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f101
operator|.
name|getId
argument_list|()
argument_list|,
name|f101
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|request
operator|.
name|updateSnaphots
operator|=
name|UPDATE_SNAPSHOTS_NONE
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|ROOT_REGION
argument_list|,
name|f101
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|f101
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|deployer
operator|.
name|deploy
argument_list|(
name|dstate
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateServiceBundle
parameter_list|()
throws|throws
name|Exception
block|{
name|IMocksControl
name|c
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|String
name|dataDir
init|=
literal|"data1"
decl_stmt|;
name|TestDownloadManager
name|manager
init|=
operator|new
name|TestDownloadManager
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Feature
name|f1
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Bundle
name|serviceBundle
init|=
name|createTestBundle
argument_list|(
literal|1
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"a100"
argument_list|)
decl_stmt|;
name|Deployer
operator|.
name|DeployCallback
name|callback
init|=
name|c
operator|.
name|createMock
argument_list|(
name|Deployer
operator|.
name|DeployCallback
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleInstallSupport
name|installSupport
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleInstallSupportImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|installSupport
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|callback
operator|.
name|print
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_STARTED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|replaceDigraph
argument_list|(
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|saveState
argument_list|(
name|EasyMock
operator|.
expr|<
name|State
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_INSTALLED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installConfigs
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installLibraries
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|resolveBundles
argument_list|(
name|EasyMock
operator|.
expr|<
name|Set
argument_list|<
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_RESOLVED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|EasyMock
operator|.
expr|<
name|FeatureEvent
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_FINISHED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Deployer
operator|.
name|DeploymentState
name|dstate
init|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
decl_stmt|;
name|dstate
operator|.
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|.
name|put
argument_list|(
name|serviceBundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|serviceBundle
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|bundlesPerRegion
argument_list|,
name|ROOT_REGION
argument_list|,
name|serviceBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|features
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|f1
operator|.
name|getId
argument_list|()
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|request
operator|.
name|updateSnaphots
operator|=
name|UPDATE_SNAPSHOTS_NONE
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|ROOT_REGION
argument_list|,
name|f1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|deployer
operator|.
name|deploy
argument_list|(
name|dstate
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrerequisite
parameter_list|()
throws|throws
name|Exception
block|{
name|IMocksControl
name|c
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|String
name|dataDir
init|=
literal|"data2"
decl_stmt|;
name|TestDownloadManager
name|manager
init|=
operator|new
name|TestDownloadManager
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Feature
name|f1
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Feature
name|f2
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|Bundle
name|serviceBundle1
init|=
name|createTestBundle
argument_list|(
literal|1
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"a100"
argument_list|)
decl_stmt|;
name|Bundle
name|serviceBundle2
init|=
name|createTestBundle
argument_list|(
literal|2
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"b100"
argument_list|)
decl_stmt|;
name|Deployer
operator|.
name|DeployCallback
name|callback
init|=
name|c
operator|.
name|createMock
argument_list|(
name|Deployer
operator|.
name|DeployCallback
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleInstallSupport
name|installSupport
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleInstallSupportImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|installSupport
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|callback
operator|.
name|print
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_STARTED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installBundle
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ROOT_REGION
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"a100"
argument_list|)
argument_list|,
name|EasyMock
operator|.
expr|<
name|InputStream
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|serviceBundle1
argument_list|)
expr_stmt|;
name|installSupport
operator|.
name|replaceDigraph
argument_list|(
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|saveState
argument_list|(
name|EasyMock
operator|.
expr|<
name|State
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installConfigs
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installLibraries
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_INSTALLED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|resolveBundles
argument_list|(
name|EasyMock
operator|.
expr|<
name|Set
argument_list|<
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_RESOLVED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|EasyMock
operator|.
expr|<
name|FeatureEvent
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_FINISHED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
name|Deployer
operator|.
name|DeploymentState
name|dstate
init|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
decl_stmt|;
name|dstate
operator|.
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f1
operator|.
name|getId
argument_list|()
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f2
operator|.
name|getId
argument_list|()
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|request
operator|.
name|updateSnaphots
operator|=
name|UPDATE_SNAPSHOTS_NONE
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|ROOT_REGION
argument_list|,
name|f2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|deployer
operator|.
name|deploy
argument_list|(
name|dstate
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Deployer
operator|.
name|PartialDeploymentException
name|e
parameter_list|)
block|{
comment|// ok
block|}
name|c
operator|.
name|verify
argument_list|()
expr_stmt|;
name|c
operator|.
name|reset
argument_list|()
expr_stmt|;
name|callback
operator|.
name|print
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_STARTED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installBundle
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|ROOT_REGION
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"b100"
argument_list|)
argument_list|,
name|EasyMock
operator|.
expr|<
name|InputStream
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|serviceBundle2
argument_list|)
expr_stmt|;
name|installSupport
operator|.
name|replaceDigraph
argument_list|(
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|saveState
argument_list|(
name|EasyMock
operator|.
expr|<
name|State
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installConfigs
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installLibraries
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_INSTALLED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|resolveBundles
argument_list|(
name|EasyMock
operator|.
expr|<
name|Set
argument_list|<
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|BUNDLES_RESOLVED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|EasyMock
operator|.
expr|<
name|FeatureEvent
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|callback
operator|.
name|callListeners
argument_list|(
name|DeploymentEvent
operator|.
name|DEPLOYMENT_FINISHED
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|callback
argument_list|)
expr_stmt|;
name|dstate
operator|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|installedFeatures
argument_list|,
name|ROOT_REGION
argument_list|,
name|f1
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|state
operator|.
name|stateFeatures
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|f1
operator|.
name|getId
argument_list|()
argument_list|,
literal|"Started"
argument_list|)
argument_list|)
expr_stmt|;
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|state
operator|.
name|managedBundles
argument_list|,
name|ROOT_REGION
argument_list|,
name|serviceBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|.
name|put
argument_list|(
name|serviceBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|serviceBundle1
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|bundlesPerRegion
argument_list|,
name|ROOT_REGION
argument_list|,
name|serviceBundle1
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|features
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f1
operator|.
name|getId
argument_list|()
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f2
operator|.
name|getId
argument_list|()
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
expr_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|request
operator|.
name|updateSnaphots
operator|=
name|UPDATE_SNAPSHOTS_NONE
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|ROOT_REGION
argument_list|,
name|f2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|deployer
operator|.
name|deploy
argument_list|(
name|dstate
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrereqOnPrereq1
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPrereqOnPrereq
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrereqOnPrereq2
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPrereqOnPrereq
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrereqOnPrereq3
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPrereqOnPrereq
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrereqOnPrereq4
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPrereqOnPrereq
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|doTestPrereqOnPrereq
parameter_list|(
name|int
name|scenario
parameter_list|)
throws|throws
name|Exception
block|{
name|IMocksControl
name|c
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|String
name|dataDir
init|=
literal|"data3"
decl_stmt|;
name|TestDownloadManager
name|manager
init|=
operator|new
name|TestDownloadManager
argument_list|(
name|getClass
argument_list|()
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dataDir
operator|+
literal|"/features.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|bundles
operator|.
name|put
argument_list|(
literal|"a100"
argument_list|,
name|createTestBundle
argument_list|(
literal|1
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"a100"
argument_list|)
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|put
argument_list|(
literal|"b100"
argument_list|,
name|createTestBundle
argument_list|(
literal|2
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"b100"
argument_list|)
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|put
argument_list|(
literal|"c100"
argument_list|,
name|createTestBundle
argument_list|(
literal|3
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|dataDir
argument_list|,
literal|"c100"
argument_list|)
argument_list|)
expr_stmt|;
name|Deployer
operator|.
name|DeploymentState
name|dstate
init|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
decl_stmt|;
name|dstate
operator|.
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|repo
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f
operator|.
name|getId
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|.
name|put
argument_list|(
name|ROOT_REGION
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
literal|null
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|request
operator|.
name|updateSnaphots
operator|=
name|UPDATE_SNAPSHOTS_NONE
expr_stmt|;
name|MyDeployCallback
name|callback
init|=
operator|new
name|MyDeployCallback
argument_list|(
name|dstate
argument_list|)
decl_stmt|;
name|BundleInstallSupport
name|installSupport
init|=
name|c
operator|.
name|createMock
argument_list|(
name|BundleInstallSupportImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Capture
argument_list|<
name|String
argument_list|>
name|capture
init|=
name|Capture
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|installSupport
operator|.
name|installBundle
argument_list|(
name|EasyMock
operator|.
name|anyString
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|capture
argument_list|(
name|capture
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
parameter_list|()
lambda|->
name|bundles
operator|.
name|get
argument_list|(
name|capture
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installConfigs
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|installLibraries
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|replaceDigraph
argument_list|(
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
operator|>
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|installSupport
operator|.
name|resolveBundles
argument_list|(
name|anyObject
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|,
name|anyObject
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|atLeastOnce
argument_list|()
expr_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|installSupport
argument_list|,
name|callback
argument_list|)
decl_stmt|;
name|c
operator|.
name|replay
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|ROOT_REGION
argument_list|,
literal|"demo-"
operator|+
name|scenario
operator|+
literal|"-c"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|prereqs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|deployer
operator|.
name|deploy
argument_list|(
name|callback
operator|.
name|dstate
argument_list|,
name|request
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Deployer
operator|.
name|PartialDeploymentException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prereqs
operator|.
name|containsAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
condition|)
block|{
name|prereqs
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Deployment aborted due to loop in missing prerequisites: "
operator|+
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|TestBundle
name|createTestBundle
parameter_list|(
name|long
name|bundleId
parameter_list|,
name|int
name|state
parameter_list|,
name|String
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
block|{
name|URL
name|loc
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|name
operator|+
literal|".mf"
argument_list|)
decl_stmt|;
name|Manifest
name|man
init|=
operator|new
name|Manifest
argument_list|(
name|loc
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|attr
range|:
name|man
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TestBundle
argument_list|(
name|bundleId
argument_list|,
name|name
argument_list|,
name|state
argument_list|,
name|headers
argument_list|)
return|;
block|}
specifier|static
class|class
name|FeatureEventMatcher
implements|implements
name|IArgumentMatcher
block|{
specifier|final
name|FeatureEvent
name|expected
decl_stmt|;
name|FeatureEventMatcher
parameter_list|(
name|FeatureEvent
name|expected
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
specifier|public
specifier|static
name|FeatureEvent
name|eq
parameter_list|(
name|FeatureEvent
name|expected
parameter_list|)
block|{
name|EasyMock
operator|.
name|reportMatcher
argument_list|(
operator|new
name|FeatureEventMatcher
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|argument
operator|instanceof
name|FeatureEvent
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FeatureEvent
name|arg
init|=
operator|(
name|FeatureEvent
operator|)
name|argument
decl_stmt|;
return|return
name|arg
operator|.
name|getFeature
argument_list|()
operator|==
name|expected
operator|.
name|getFeature
argument_list|()
operator|&&
name|arg
operator|.
name|getType
argument_list|()
operator|==
name|expected
operator|.
name|getType
argument_list|()
operator|&&
name|arg
operator|.
name|isReplay
argument_list|()
operator|==
name|expected
operator|.
name|isReplay
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendTo
parameter_list|(
name|StringBuffer
name|buffer
parameter_list|)
block|{          }
block|}
specifier|private
specifier|static
class|class
name|MyDeployCallback
implements|implements
name|Deployer
operator|.
name|DeployCallback
block|{
specifier|final
name|Deployer
operator|.
name|DeploymentState
name|dstate
decl_stmt|;
specifier|public
name|MyDeployCallback
parameter_list|(
name|Deployer
operator|.
name|DeploymentState
name|dstate
parameter_list|)
block|{
name|this
operator|.
name|dstate
operator|=
name|dstate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|saveState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|this
operator|.
name|dstate
operator|.
name|state
operator|.
name|replace
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|persistResolveRequest
parameter_list|(
name|Deployer
operator|.
name|DeploymentRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|callListeners
parameter_list|(
name|FeatureEvent
name|featureEvent
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|callListeners
parameter_list|(
name|DeploymentEvent
name|deployEvent
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

