begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|StateStorageTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testStoreLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|State
name|oldState
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|oldState
operator|.
name|bootDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|oldState
operator|.
name|bundleChecksums
operator|.
name|put
argument_list|(
literal|4l
argument_list|,
literal|32794l
argument_list|)
expr_stmt|;
name|oldState
operator|.
name|requirements
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
expr_stmt|;
name|oldState
operator|.
name|managedBundles
operator|.
name|put
argument_list|(
literal|"reg"
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|32l
argument_list|)
argument_list|)
expr_stmt|;
name|oldState
operator|.
name|managedBundles
operator|.
name|put
argument_list|(
literal|"reg2"
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|24l
argument_list|,
literal|43l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|oldState
operator|.
name|repositories
operator|.
name|add
argument_list|(
literal|"repo"
argument_list|)
expr_stmt|;
name|TestStorage
name|storage
init|=
operator|new
name|TestStorage
argument_list|()
decl_stmt|;
name|storage
operator|.
name|save
argument_list|(
name|oldState
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|storage
operator|.
name|baos
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|State
name|newState
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|storage
operator|.
name|load
argument_list|(
name|newState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldState
operator|.
name|bootDone
operator|.
name|get
argument_list|()
argument_list|,
name|newState
operator|.
name|bootDone
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldState
operator|.
name|bundleChecksums
argument_list|,
name|newState
operator|.
name|bundleChecksums
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldState
operator|.
name|requirements
argument_list|,
name|newState
operator|.
name|requirements
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldState
operator|.
name|managedBundles
argument_list|,
name|newState
operator|.
name|managedBundles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldState
operator|.
name|repositories
argument_list|,
name|newState
operator|.
name|repositories
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|TestStorage
extends|extends
name|StateStorage
block|{
name|ByteArrayOutputStream
name|baos
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|baos
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
return|return
name|baos
return|;
block|}
block|}
block|}
end_class

end_unit

