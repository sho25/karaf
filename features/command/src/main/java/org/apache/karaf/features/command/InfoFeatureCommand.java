begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Process
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|ConfigFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|ConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|command
operator|.
name|completers
operator|.
name|AllFeatureCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Completion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|utils
operator|.
name|AttributedStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|utils
operator|.
name|AttributedStyle
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"feature"
argument_list|,
name|name
operator|=
literal|"info"
argument_list|,
name|description
operator|=
literal|"Shows information about selected feature."
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|InfoFeatureCommand
extends|extends
name|FeaturesCommandSupport
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_XML_COLORS
init|=
literal|"el=34;1:at=36;1:av=32;1:cm=37:cd=37"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INDENT
init|=
literal|"  "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURE_CONTENT
init|=
literal|"Feature"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONDITIONAL_CONTENT
init|=
literal|"Conditional(%s)"
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"name"
argument_list|,
name|description
operator|=
literal|"The name of the feature"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
annotation|@
name|Completion
argument_list|(
name|AllFeatureCompleter
operator|.
name|class
argument_list|)
specifier|private
name|String
name|name
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|name
operator|=
literal|"version"
argument_list|,
name|description
operator|=
literal|"The version of the feature"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|version
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-c"
argument_list|,
name|aliases
operator|=
block|{
literal|"--configuration"
block|}
argument_list|,
name|description
operator|=
literal|"Display configuration info"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|config
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-d"
argument_list|,
name|aliases
operator|=
block|{
literal|"--dependency"
block|}
argument_list|,
name|description
operator|=
literal|"Display dependencies info"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|dependency
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-b"
argument_list|,
name|aliases
operator|=
block|{
literal|"--bundle"
block|}
argument_list|,
name|description
operator|=
literal|"Display bundles info"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|bundle
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--conditional"
argument_list|,
name|description
operator|=
literal|"Display conditional info"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|conditional
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-t"
argument_list|,
name|aliases
operator|=
block|{
literal|"--tree"
block|}
argument_list|,
name|description
operator|=
literal|"Display feature tree"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|tree
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-x"
argument_list|,
name|aliases
operator|=
block|{
literal|"--xml"
block|}
argument_list|,
name|description
operator|=
literal|"Display feature xml"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|xml
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--color"
argument_list|,
name|description
operator|=
literal|"Colorize output (`always', `never' or `auto')"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|color
decl_stmt|;
annotation|@
name|Reference
name|Session
name|session
decl_stmt|;
specifier|protected
name|void
name|doExecute
parameter_list|(
name|FeaturesService
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|Feature
index|[]
name|features
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
operator|&&
name|version
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|features
operator|=
name|admin
operator|.
name|getFeatures
argument_list|(
name|name
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|features
operator|=
name|admin
operator|.
name|getFeatures
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|==
literal|null
operator|||
name|features
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Feature not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|xml
condition|)
block|{
name|boolean
name|colored
decl_stmt|;
switch|switch
condition|(
name|color
operator|!=
literal|null
condition|?
name|color
else|:
literal|"auto"
condition|)
block|{
case|case
literal|"always"
case|:
case|case
literal|"yes"
case|:
case|case
literal|"force"
case|:
name|colored
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"never"
case|:
case|case
literal|"no"
case|:
case|case
literal|"none"
case|:
name|colored
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|"auto"
case|:
case|case
literal|"tty"
case|:
case|case
literal|"if-tty"
case|:
name|colored
operator|=
name|Process
operator|.
name|Utils
operator|.
name|current
argument_list|()
operator|.
name|isTty
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid argument ‘"
operator|+
name|color
operator|+
literal|"’ for ‘--color’"
argument_list|)
throw|;
block|}
for|for
control|(
name|Feature
name|feature
range|:
name|features
control|)
block|{
name|String
name|xml
init|=
name|admin
operator|.
name|getFeatureXml
argument_list|(
name|feature
argument_list|)
decl_stmt|;
if|if
condition|(
name|colored
condition|)
block|{
name|xml
operator|=
name|colorize
argument_list|(
name|session
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
comment|// default behavior
if|if
condition|(
operator|!
name|config
operator|&&
operator|!
name|dependency
operator|&&
operator|!
name|bundle
operator|&&
operator|!
name|conditional
operator|&&
operator|!
name|tree
condition|)
block|{
name|config
operator|=
literal|true
expr_stmt|;
name|dependency
operator|=
literal|true
expr_stmt|;
name|bundle
operator|=
literal|true
expr_stmt|;
name|conditional
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"------------------------------------"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Description:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|INDENT
operator|+
name|feature
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|feature
operator|.
name|getDetails
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Details:"
argument_list|)
expr_stmt|;
name|printWithIndent
argument_list|(
name|feature
operator|.
name|getDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
condition|)
block|{
name|displayConfigInformation
argument_list|(
name|feature
argument_list|,
name|FEATURE_CONTENT
argument_list|)
expr_stmt|;
name|displayConfigFileInformation
argument_list|(
name|feature
argument_list|,
name|FEATURE_CONTENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dependency
condition|)
block|{
name|displayDependencyInformation
argument_list|(
name|feature
argument_list|,
name|FEATURE_CONTENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundle
condition|)
block|{
name|displayBundleInformation
argument_list|(
name|feature
argument_list|,
name|FEATURE_CONTENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conditional
condition|)
block|{
name|displayConditionalInfo
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tree
condition|)
block|{
if|if
condition|(
name|config
operator|||
name|dependency
operator|||
name|bundle
operator|||
name|conditional
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFeature tree"
argument_list|)
expr_stmt|;
block|}
name|int
name|unresolved
init|=
name|displayFeatureTree
argument_list|(
name|admin
argument_list|,
name|feature
operator|.
name|getName
argument_list|()
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|unresolved
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tree contains "
operator|+
name|unresolved
operator|+
literal|" unresolved dependencies"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" * means that node declares dependency but the dependent feature is not available."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|printWithIndent
parameter_list|(
name|String
name|details
parameter_list|)
block|{
name|String
index|[]
name|lines
init|=
name|details
operator|.
name|split
argument_list|(
literal|"\r?\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|INDENT
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|displayBundleInformation
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundleInfos
init|=
name|feature
operator|.
name|getBundles
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundleInfos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" has no bundles."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" contains followed bundles:"
argument_list|)
expr_stmt|;
for|for
control|(
name|BundleInfo
name|featureBundle
range|:
name|bundleInfos
control|)
block|{
name|int
name|startLevel
init|=
name|featureBundle
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|INDENT
argument_list|)
operator|.
name|append
argument_list|(
name|featureBundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|startLevel
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" start-level="
argument_list|)
operator|.
name|append
argument_list|(
name|startLevel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|featureBundle
operator|.
name|isOverriden
argument_list|()
operator|!=
name|BundleInfo
operator|.
name|BundleOverrideMode
operator|.
name|NONE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (overriden from "
operator|+
name|featureBundle
operator|.
name|getOriginalLocation
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|displayDependencyInformation
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
init|=
name|feature
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" has no dependencies."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" depends on:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Dependency
name|featureDependency
range|:
name|dependencies
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|INDENT
operator|+
name|featureDependency
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|featureDependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|displayConfigInformation
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigInfo
argument_list|>
name|configurations
init|=
name|feature
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" has no configuration"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" configuration:"
argument_list|)
expr_stmt|;
for|for
control|(
name|ConfigInfo
name|configInfo
range|:
name|configurations
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|INDENT
operator|+
name|configInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|displayConfigFileInformation
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|List
argument_list|<
name|ConfigFileInfo
argument_list|>
name|configurationFiles
init|=
name|feature
operator|.
name|getConfigurationFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurationFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" has no configuration files"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|contentType
operator|+
literal|" configuration files: "
argument_list|)
expr_stmt|;
for|for
control|(
name|ConfigFileInfo
name|configFileInfo
range|:
name|configurationFiles
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|INDENT
operator|+
name|configFileInfo
operator|.
name|getFinalname
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Called originally with featureName and featureVersion that have already been resolved successfully.      *      * @param admin      * @param featureName      * @param featureVersion      * @param prefix      * @return      * @throws Exception      */
specifier|private
name|int
name|displayFeatureTree
parameter_list|(
name|FeaturesService
name|admin
parameter_list|,
name|String
name|featureName
parameter_list|,
name|String
name|featureVersion
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|unresolved
init|=
literal|0
decl_stmt|;
name|Feature
index|[]
name|resolvedFeatures
init|=
name|admin
operator|.
name|getFeatures
argument_list|(
name|featureName
argument_list|,
name|featureVersion
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|resolved
range|:
name|resolvedFeatures
control|)
block|{
if|if
condition|(
name|resolved
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|" "
operator|+
name|resolved
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|resolved
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|" "
operator|+
name|featureName
operator|+
literal|" "
operator|+
name|featureVersion
operator|+
literal|" *"
argument_list|)
expr_stmt|;
name|unresolved
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|resolved
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bundle
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|bundleLocation
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
init|=
name|resolved
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleInfo
name|bundleInfo
range|:
name|bundles
control|)
block|{
name|bundleLocation
operator|.
name|add
argument_list|(
name|bundleInfo
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conditional
condition|)
block|{
for|for
control|(
name|Conditional
name|cond
range|:
name|resolved
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|condition
init|=
name|cond
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|conditionalBundles
init|=
name|cond
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleInfo
name|bundleInfo
range|:
name|conditionalBundles
control|)
block|{
name|bundleLocation
operator|.
name|add
argument_list|(
name|bundleInfo
operator|.
name|getLocation
argument_list|()
operator|+
literal|"(condition:"
operator|+
name|condition
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|bundleLocation
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|" "
operator|+
operator|(
name|i
operator|+
literal|1
operator|==
name|j
condition|?
literal|"\\"
else|:
literal|"+"
operator|)
operator|+
literal|" "
operator|+
name|bundleLocation
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|prefix
operator|+=
literal|"   "
expr_stmt|;
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
init|=
name|resolved
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|Dependency
name|toDisplay
range|:
name|dependencies
control|)
block|{
name|unresolved
operator|+=
name|displayFeatureTree
argument_list|(
name|admin
argument_list|,
name|toDisplay
operator|.
name|getName
argument_list|()
argument_list|,
name|toDisplay
operator|.
name|getVersion
argument_list|()
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conditional
condition|)
block|{
for|for
control|(
name|Conditional
name|cond
range|:
name|resolved
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Dependency
argument_list|>
name|conditionDependencies
init|=
name|cond
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|j
init|=
name|conditionDependencies
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|Dependency
name|toDisplay
init|=
name|conditionDependencies
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|unresolved
operator|+=
name|displayFeatureTree
argument_list|(
name|admin
argument_list|,
name|toDisplay
operator|.
name|getName
argument_list|()
argument_list|,
name|toDisplay
operator|.
name|getVersion
argument_list|()
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|unresolved
return|;
block|}
specifier|private
name|void
name|displayConditionalInfo
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|Conditional
argument_list|>
name|conditionals
init|=
name|feature
operator|.
name|getConditional
argument_list|()
decl_stmt|;
if|if
condition|(
name|conditionals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Feature has no conditionals."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Feature contains followed conditionals:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Conditional
name|featureConditional
range|:
name|conditionals
control|)
block|{
name|String
name|conditionDescription
init|=
name|getConditionDescription
argument_list|(
name|featureConditional
argument_list|)
decl_stmt|;
name|Feature
name|wrappedConditional
init|=
name|featureConditional
operator|.
name|asFeature
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
condition|)
block|{
name|displayConfigInformation
argument_list|(
name|wrappedConditional
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|CONDITIONAL_CONTENT
argument_list|,
name|conditionDescription
argument_list|)
argument_list|)
expr_stmt|;
name|displayConfigFileInformation
argument_list|(
name|wrappedConditional
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|CONDITIONAL_CONTENT
argument_list|,
name|conditionDescription
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dependency
condition|)
block|{
name|displayDependencyInformation
argument_list|(
name|wrappedConditional
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|CONDITIONAL_CONTENT
argument_list|,
name|conditionDescription
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundle
condition|)
block|{
name|displayBundleInformation
argument_list|(
name|wrappedConditional
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|CONDITIONAL_CONTENT
argument_list|,
name|conditionDescription
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getConditionDescription
parameter_list|(
name|Conditional
name|cond
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dep
range|:
name|cond
operator|.
name|getCondition
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getColorMap
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|Object
name|obj
init|=
name|session
operator|.
name|get
argument_list|(
name|name
operator|+
literal|"_COLORS"
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|obj
operator|!=
literal|null
condition|?
name|obj
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
operator|||
operator|!
name|str
operator|.
name|matches
argument_list|(
literal|"[a-z]{2}=[0-9]*(;[0-9]+)*(:[a-z]{2}=[0-9]*(;[0-9]+)*)*"
argument_list|)
condition|)
block|{
name|str
operator|=
name|def
expr_stmt|;
block|}
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|str
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|s
lambda|->
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
argument_list|,
name|s
lambda|->
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|colorize
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|xml
parameter_list|)
block|{
name|Terminal
name|terminal
init|=
operator|(
name|Terminal
operator|)
name|session
operator|.
name|get
argument_list|(
literal|".jline.terminal"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colorMap
init|=
name|getColorMap
argument_list|(
name|session
argument_list|,
literal|"XML"
argument_list|,
name|DEFAULT_XML_COLORS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
name|patternColors
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|patternColors
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(</?[a-z]*)\\s?>?"
argument_list|)
argument_list|,
literal|"el"
argument_list|)
expr_stmt|;
name|patternColors
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(/?>)"
argument_list|)
argument_list|,
literal|"el"
argument_list|)
expr_stmt|;
name|patternColors
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\s([a-z-]*)\\="
argument_list|)
argument_list|,
literal|"at"
argument_list|)
expr_stmt|;
name|patternColors
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[a-z-]*\\=(\"[^\"]*\")"
argument_list|)
argument_list|,
literal|"av"
argument_list|)
expr_stmt|;
name|patternColors
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(<!--.*-->)"
argument_list|)
argument_list|,
literal|"cm"
argument_list|)
expr_stmt|;
name|patternColors
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\<!\\[CDATA\\[).*"
argument_list|)
argument_list|,
literal|"cd"
argument_list|)
expr_stmt|;
name|patternColors
operator|.
name|put
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*(]]>)"
argument_list|)
argument_list|,
literal|"cd"
argument_list|)
expr_stmt|;
name|String
index|[]
name|styles
init|=
operator|new
name|String
index|[
name|xml
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
comment|// Match all regexes on this snippet, store positions
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Pattern
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|patternColors
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Matcher
name|matcher
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|matcher
argument_list|(
name|xml
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|s
init|=
name|matcher
operator|.
name|start
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|int
name|e
init|=
name|matcher
operator|.
name|end
argument_list|()
decl_stmt|;
name|String
name|c
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|styles
argument_list|,
name|s
argument_list|,
name|e
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|AttributedStringBuilder
name|asb
init|=
operator|new
name|AttributedStringBuilder
argument_list|()
decl_stmt|;
name|String
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xml
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|styles
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Objects
operator|.
name|equals
argument_list|(
name|s
argument_list|,
name|prev
argument_list|)
condition|)
block|{
name|applyStyle
argument_list|(
name|asb
argument_list|,
name|colorMap
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|prev
operator|=
name|s
expr_stmt|;
block|}
name|asb
operator|.
name|append
argument_list|(
name|xml
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|asb
operator|.
name|toAnsi
argument_list|(
name|terminal
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|applyStyle
parameter_list|(
name|AttributedStringBuilder
name|sb
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colors
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|String
name|col
init|=
name|colors
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|AttributedStyle
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
operator|&&
operator|!
name|col
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|appendAnsi
argument_list|(
literal|"\033["
operator|+
name|col
operator|+
literal|"m"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

