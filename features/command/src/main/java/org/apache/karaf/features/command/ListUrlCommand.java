begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Command which lists feature URLs.  *   */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"features"
argument_list|,
name|name
operator|=
literal|"listUrl"
argument_list|,
name|description
operator|=
literal|"Displays a list of all defined repository URLs."
argument_list|)
specifier|public
class|class
name|ListUrlCommand
extends|extends
name|FeaturesCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-v"
argument_list|,
name|aliases
operator|=
literal|"-validate"
argument_list|,
name|description
operator|=
literal|"Validate current version of descriptors"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|validation
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-vo"
argument_list|,
name|aliases
operator|=
literal|"-verbose"
argument_list|,
name|description
operator|=
literal|"Shows validation output"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
specifier|protected
name|void
name|doExecute
parameter_list|(
name|FeaturesService
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|Repository
index|[]
name|repos
init|=
name|admin
operator|.
name|listRepositories
argument_list|()
decl_stmt|;
name|String
name|header
decl_stmt|;
if|if
condition|(
name|validation
condition|)
block|{
name|header
operator|=
literal|" Loaded   Now valid   URI "
expr_stmt|;
block|}
else|else
block|{
name|header
operator|=
literal|" Loaded   URI "
expr_stmt|;
block|}
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|println
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|String
name|verboseOutput
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|(
name|repos
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|repos
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|URI
name|uri
init|=
name|repos
index|[
name|i
index|]
operator|.
name|getURI
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|""
decl_stmt|;
name|line
operator|+=
name|repos
index|[
name|i
index|]
operator|.
name|isValid
argument_list|()
condition|?
literal|"  true "
else|:
literal|"  false"
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|validateRepository
argument_list|(
name|uri
argument_list|)
expr_stmt|;
comment|// append valid flag if validation mode is tuned on
name|line
operator|+=
operator|!
name|validation
condition|?
literal|""
else|:
literal|"     true   "
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|line
operator|+=
operator|!
name|validation
condition|?
literal|""
else|:
literal|"     false  "
expr_stmt|;
name|verboseOutput
operator|+=
name|uri
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
block|}
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|println
argument_list|(
name|line
operator|+
literal|"   "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verbose
condition|)
block|{
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|println
argument_list|(
literal|"Validation output:\n"
operator|+
name|verboseOutput
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|println
argument_list|(
literal|"No repository URLs are set."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

