begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"feature"
argument_list|,
name|name
operator|=
literal|"list-version"
argument_list|,
name|description
operator|=
literal|"Lists all versions of a feature available from the currently available repositories."
argument_list|)
specifier|public
class|class
name|ListFeatureVersionsCommand
extends|extends
name|FeaturesCommandSupport
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"feature"
argument_list|,
name|description
operator|=
literal|"Name of feature."
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|String
name|feature
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSION
init|=
literal|"Version"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY
init|=
literal|"Repository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REPOSITORY_URL
init|=
literal|"Repository URL"
decl_stmt|;
specifier|private
class|class
name|VersionInRepository
block|{
specifier|public
name|String
name|version
decl_stmt|;
specifier|public
name|Repository
name|repository
decl_stmt|;
block|}
specifier|protected
name|void
name|doExecute
parameter_list|(
name|FeaturesService
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|VersionInRepository
argument_list|>
name|versionsInRepositories
init|=
operator|new
name|ArrayList
argument_list|<
name|VersionInRepository
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Repository
name|r
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|admin
operator|.
name|listRepositories
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|r
operator|.
name|getFeatures
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|feature
argument_list|)
condition|)
block|{
name|VersionInRepository
name|versionInRepository
init|=
operator|new
name|VersionInRepository
argument_list|()
decl_stmt|;
name|versionInRepository
operator|.
name|repository
operator|=
name|r
expr_stmt|;
name|versionInRepository
operator|.
name|version
operator|=
name|f
operator|.
name|getVersion
argument_list|()
expr_stmt|;
name|versionsInRepositories
operator|.
name|add
argument_list|(
name|versionInRepository
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|versionsInRepositories
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No versions available for features '"
operator|+
name|feature
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Print column headers.
name|int
name|maxVersionSize
init|=
name|VERSION
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|VersionInRepository
name|vir
range|:
name|versionsInRepositories
control|)
block|{
name|maxVersionSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxVersionSize
argument_list|,
name|vir
operator|.
name|version
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|maxRepositorySize
init|=
name|REPOSITORY
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|VersionInRepository
name|vir
range|:
name|versionsInRepositories
control|)
block|{
name|maxRepositorySize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxRepositorySize
argument_list|,
name|vir
operator|.
name|repository
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|VERSION
argument_list|)
operator|.
name|append
argument_list|(
literal|"   "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|VERSION
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|maxVersionSize
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|REPOSITORY
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|REPOSITORY
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|maxRepositorySize
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|REPOSITORY_URL
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Print the version data.
for|for
control|(
name|VersionInRepository
name|vir
range|:
name|versionsInRepositories
control|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|String
name|str
init|=
name|vir
operator|.
name|version
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|str
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|maxVersionSize
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|str
operator|=
name|vir
operator|.
name|repository
operator|.
name|getName
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|str
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|maxRepositorySize
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|vir
operator|.
name|repository
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

