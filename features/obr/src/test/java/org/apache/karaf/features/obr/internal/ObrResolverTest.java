begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|obr
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Reason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|RepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|impl
operator|.
name|DataModelHelperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|impl
operator|.
name|ReasonImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|FeatureImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|Capture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|ObrResolverTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testResolver
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|requirement
init|=
literal|"bundle:(&(symbolicname=org.apache.camel.camel-blueprint)(version>=2.4.0)(version<2.4.1))"
decl_stmt|;
specifier|final
name|FeatureImpl
name|f
init|=
operator|new
name|FeatureImpl
argument_list|(
literal|"f1"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setResolver
argument_list|(
literal|"obr"
argument_list|)
expr_stmt|;
name|f
operator|.
name|addBundle
argument_list|(
operator|new
name|BundleInfoImpl
argument_list|(
name|requirement
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RepositoryAdmin
name|admin
init|=
name|createMock
argument_list|(
name|RepositoryAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Resolver
name|resolver
init|=
name|createMock
argument_list|(
name|Resolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|resource
init|=
name|createMock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ObrResolver
name|obrResolver
init|=
operator|new
name|ObrResolver
argument_list|()
decl_stmt|;
name|obrResolver
operator|.
name|setRepositoryAdmin
argument_list|(
name|admin
argument_list|)
expr_stmt|;
specifier|final
name|Capture
argument_list|<
name|Requirement
argument_list|>
name|captureReq
init|=
operator|new
name|Capture
argument_list|<
name|Requirement
argument_list|>
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|admin
operator|.
name|getHelper
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|DataModelHelperImpl
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|admin
operator|.
name|getSystemRepository
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Repository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|admin
operator|.
name|getLocalRepository
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|createMock
argument_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Repository
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|admin
operator|.
name|listRepositories
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Repository
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|admin
operator|.
name|resolver
argument_list|(
name|EasyMock
operator|.
expr|<
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|bundlerepository
operator|.
name|Repository
index|[]
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|add
argument_list|(
name|EasyMock
operator|.
name|capture
argument_list|(
name|captureReq
argument_list|)
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|Resolver
operator|.
name|NO_OPTIONAL_RESOURCES
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|resolver
operator|.
name|getRequiredResources
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Resource
index|[]
block|{
name|resource
block|}
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|resolver
operator|.
name|getReason
argument_list|(
name|resource
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
operator|new
name|Reason
index|[]
block|{
operator|new
name|ReasonImpl
argument_list|(
name|resource
argument_list|,
name|captureReq
operator|.
name|getValue
argument_list|()
argument_list|)
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|resource
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"foo:bar"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|admin
argument_list|,
name|resolver
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
init|=
name|obrResolver
operator|.
name|resolve
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bundles
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bundles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:bar"
argument_list|,
name|bundles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|obrResolver
operator|.
name|parseRequirement
argument_list|(
name|requirement
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|captureReq
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|,
name|resolver
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

