begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorServerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_class
specifier|public
class|class
name|ConnectorServerFactory
block|{
specifier|private
name|MBeanServer
name|server
decl_stmt|;
specifier|private
name|String
name|serviceUrl
decl_stmt|;
specifier|private
name|Map
name|environment
decl_stmt|;
specifier|private
name|ObjectName
name|objectName
decl_stmt|;
specifier|private
name|boolean
name|threaded
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|daemon
init|=
literal|false
decl_stmt|;
specifier|private
name|JMXConnectorServer
name|connectorServer
decl_stmt|;
specifier|public
name|MBeanServer
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
specifier|public
name|void
name|setServer
parameter_list|(
name|MBeanServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
specifier|public
name|String
name|getServiceUrl
parameter_list|()
block|{
return|return
name|serviceUrl
return|;
block|}
specifier|public
name|void
name|setServiceUrl
parameter_list|(
name|String
name|serviceUrl
parameter_list|)
block|{
name|this
operator|.
name|serviceUrl
operator|=
name|serviceUrl
expr_stmt|;
block|}
specifier|public
name|Map
name|getEnvironment
parameter_list|()
block|{
return|return
name|environment
return|;
block|}
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|Map
name|environment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|()
block|{
return|return
name|objectName
return|;
block|}
specifier|public
name|void
name|setObjectName
parameter_list|(
name|ObjectName
name|objectName
parameter_list|)
block|{
name|this
operator|.
name|objectName
operator|=
name|objectName
expr_stmt|;
block|}
specifier|public
name|boolean
name|isThreaded
parameter_list|()
block|{
return|return
name|threaded
return|;
block|}
specifier|public
name|void
name|setThreaded
parameter_list|(
name|boolean
name|threaded
parameter_list|)
block|{
name|this
operator|.
name|threaded
operator|=
name|threaded
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDaemon
parameter_list|()
block|{
return|return
name|daemon
return|;
block|}
specifier|public
name|void
name|setDaemon
parameter_list|(
name|boolean
name|daemon
parameter_list|)
block|{
name|this
operator|.
name|daemon
operator|=
name|daemon
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"server must be set"
argument_list|)
throw|;
block|}
name|JMXServiceURL
name|url
init|=
operator|new
name|JMXServiceURL
argument_list|(
name|this
operator|.
name|serviceUrl
argument_list|)
decl_stmt|;
name|this
operator|.
name|connectorServer
operator|=
name|JMXConnectorServerFactory
operator|.
name|newJMXConnectorServer
argument_list|(
name|url
argument_list|,
name|this
operator|.
name|environment
argument_list|,
name|this
operator|.
name|server
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|objectName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|registerMBean
argument_list|(
name|this
operator|.
name|connectorServer
argument_list|,
name|this
operator|.
name|objectName
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|this
operator|.
name|threaded
condition|)
block|{
name|Thread
name|connectorThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|connectorServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not start JMX connector server"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|connectorThread
operator|.
name|setName
argument_list|(
literal|"JMX Connector Thread ["
operator|+
name|this
operator|.
name|serviceUrl
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|connectorThread
operator|.
name|setDaemon
argument_list|(
name|this
operator|.
name|daemon
argument_list|)
expr_stmt|;
name|connectorThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|connectorServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|doUnregister
argument_list|(
name|this
operator|.
name|objectName
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|this
operator|.
name|connectorServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|doUnregister
argument_list|(
name|this
operator|.
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doUnregister
parameter_list|(
name|ObjectName
name|objectName
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|this
operator|.
name|objectName
operator|!=
literal|null
operator|&&
name|this
operator|.
name|server
operator|.
name|isRegistered
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|this
operator|.
name|server
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMException
name|ex
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
end_class

end_unit

