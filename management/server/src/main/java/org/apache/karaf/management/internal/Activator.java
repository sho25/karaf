begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|KeystoreManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|ConnectorServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|JaasAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|KarafMBeanServerGuard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|MBeanServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|RmiRegistryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|SingleServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
implements|,
name|ManagedService
implements|,
name|SingleServiceTracker
operator|.
name|SingleServiceListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|scheduled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|configuration
decl_stmt|;
specifier|private
name|ServiceRegistration
name|registration
decl_stmt|;
specifier|private
name|SingleServiceTracker
argument_list|<
name|ConfigurationAdmin
argument_list|>
name|configAdminTracker
decl_stmt|;
specifier|private
name|SingleServiceTracker
argument_list|<
name|KeystoreManager
argument_list|>
name|keystoreManagerTracker
decl_stmt|;
specifier|private
name|ServiceRegistration
argument_list|<
name|MBeanServer
argument_list|>
name|serverRegistration
decl_stmt|;
specifier|private
name|ServiceRegistration
name|securityRegistration
decl_stmt|;
specifier|private
name|ConnectorServerFactory
name|connectorServerFactory
decl_stmt|;
specifier|private
name|RmiRegistryFactory
name|rmiRegistryFactory
decl_stmt|;
specifier|private
name|MBeanServerFactory
name|mbeanServerFactory
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|bundleContext
operator|=
name|context
expr_stmt|;
name|scheduled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"org.apache.karaf.management"
argument_list|)
expr_stmt|;
name|registration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|ManagedService
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|configAdminTracker
operator|=
operator|new
name|SingleServiceTracker
argument_list|<
name|ConfigurationAdmin
argument_list|>
argument_list|(
name|bundleContext
argument_list|,
name|ConfigurationAdmin
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|keystoreManagerTracker
operator|=
operator|new
name|SingleServiceTracker
argument_list|<
name|KeystoreManager
argument_list|>
argument_list|(
name|bundleContext
argument_list|,
name|KeystoreManager
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|configAdminTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|keystoreManagerTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|scheduled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|keystoreManagerTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|configAdminTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updated
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|this
operator|.
name|configuration
operator|=
name|properties
expr_stmt|;
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceFound
parameter_list|()
block|{
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceLost
parameter_list|()
block|{
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceReplaced
parameter_list|()
block|{
name|reconfigure
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|reconfigure
parameter_list|()
block|{
if|if
condition|(
name|scheduled
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|scheduled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
try|try
block|{
name|doStart
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error starting management layer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This can happen while the bundle is starting as we register
comment|// the ManagedService before creating the service trackers
if|if
condition|(
name|configAdminTracker
operator|==
literal|null
operator|||
name|keystoreManagerTracker
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Verify dependencies
name|ConfigurationAdmin
name|configurationAdmin
init|=
name|configAdminTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
name|KeystoreManager
name|keystoreManager
init|=
name|keystoreManagerTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|configurationAdmin
operator|==
literal|null
operator|||
name|keystoreManager
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|rmiRegistryHost
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"rmiRegistryHost"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|rmiRegistryPort
init|=
name|getInt
argument_list|(
name|config
argument_list|,
literal|"rmiRegistryPort"
argument_list|,
literal|1099
argument_list|)
decl_stmt|;
name|String
name|rmiServerHost
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"rmiServerHost"
argument_list|,
literal|"0.0.0.0"
argument_list|)
decl_stmt|;
name|int
name|rmiServerPort
init|=
name|getInt
argument_list|(
name|config
argument_list|,
literal|"rmiServerPort"
argument_list|,
literal|44444
argument_list|)
decl_stmt|;
name|String
name|jmxRealm
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"jmxRealm"
argument_list|,
literal|"karaf"
argument_list|)
decl_stmt|;
name|String
name|serviceUrl
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"serviceUrl"
argument_list|,
literal|"service:jmx:rmi://0.0.0.0:"
operator|+
name|rmiServerPort
operator|+
literal|"/jndi/rmi://0.0.0.0:"
operator|+
name|rmiRegistryPort
operator|+
literal|"/karaf-"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|daemon
init|=
name|getBoolean
argument_list|(
name|config
argument_list|,
literal|"daemon"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|threaded
init|=
name|getBoolean
argument_list|(
name|config
argument_list|,
literal|"threaded"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|getString
argument_list|(
name|config
argument_list|,
literal|"objectName"
argument_list|,
literal|"connector:name=rmi"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|keyStoreAvailabilityTimeout
init|=
name|getLong
argument_list|(
name|config
argument_list|,
literal|"keyStoreAvailabilityTimeout"
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|String
name|authenticatorType
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"authenticatorType"
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|boolean
name|secured
init|=
name|getBoolean
argument_list|(
name|config
argument_list|,
literal|"secured"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|secureAlgorithm
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"secureAlgorithm"
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|String
name|secureProtocol
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"secureProtocol"
argument_list|,
literal|"TLS"
argument_list|)
decl_stmt|;
name|String
name|keyStore
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"keyStore"
argument_list|,
literal|"karaf.ks"
argument_list|)
decl_stmt|;
name|String
name|keyAlias
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"keyAlias"
argument_list|,
literal|"karaf"
argument_list|)
decl_stmt|;
name|String
name|trustStore
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"trustStore"
argument_list|,
literal|"karaf.ts"
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|configurationAdmin
argument_list|)
expr_stmt|;
name|guard
operator|.
name|init
argument_list|()
expr_stmt|;
name|rmiRegistryFactory
operator|=
operator|new
name|RmiRegistryFactory
argument_list|()
expr_stmt|;
name|rmiRegistryFactory
operator|.
name|setCreate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rmiRegistryFactory
operator|.
name|setLocate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rmiRegistryFactory
operator|.
name|setHost
argument_list|(
name|rmiRegistryHost
argument_list|)
expr_stmt|;
name|rmiRegistryFactory
operator|.
name|setPort
argument_list|(
name|rmiRegistryPort
argument_list|)
expr_stmt|;
name|rmiRegistryFactory
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|rmiRegistryFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|mbeanServerFactory
operator|=
operator|new
name|MBeanServerFactory
argument_list|()
expr_stmt|;
name|mbeanServerFactory
operator|.
name|setLocateExistingServerIfPossible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mbeanServerFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|MBeanServer
name|mbeanServer
init|=
name|mbeanServerFactory
operator|.
name|getServer
argument_list|()
decl_stmt|;
name|JaasAuthenticator
name|jaasAuthenticator
init|=
operator|new
name|JaasAuthenticator
argument_list|()
decl_stmt|;
name|jaasAuthenticator
operator|.
name|setRealm
argument_list|(
name|jmxRealm
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|=
operator|new
name|ConnectorServerFactory
argument_list|()
expr_stmt|;
name|connectorServerFactory
operator|.
name|setServer
argument_list|(
name|mbeanServer
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setServiceUrl
argument_list|(
name|serviceUrl
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setRmiServerHost
argument_list|(
name|rmiServerHost
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setDaemon
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setThreaded
argument_list|(
name|threaded
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setObjectName
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"jmx.remote.authenticator"
argument_list|,
name|jaasAuthenticator
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setKeyStoreAvailabilityTimeout
argument_list|(
name|keyStoreAvailabilityTimeout
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setAuthenticatorType
argument_list|(
name|authenticatorType
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setSecured
argument_list|(
name|secured
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setAlgorithm
argument_list|(
name|secureAlgorithm
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setSecureProtocol
argument_list|(
name|secureProtocol
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setKeyStore
argument_list|(
name|keyStore
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setKeyAlias
argument_list|(
name|keyAlias
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setTrustStore
argument_list|(
name|trustStore
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|setKeystoreManager
argument_list|(
name|keystoreManager
argument_list|)
expr_stmt|;
name|connectorServerFactory
operator|.
name|init
argument_list|()
expr_stmt|;
try|try
block|{
name|JMXSecurityMBeanImpl
name|securityMBean
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|securityMBean
operator|.
name|setMBeanServer
argument_list|(
name|mbeanServer
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"jmx.objectname"
argument_list|,
literal|"org.apache.karaf:type=security,area=jmx,name="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
argument_list|)
expr_stmt|;
name|securityRegistration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|getInterfaceNames
argument_list|(
name|securityMBean
argument_list|)
argument_list|,
name|securityMBean
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotCompliantMBeanException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error creating JMX security mbean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|serverRegistration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|,
name|mbeanServer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
if|if
condition|(
name|securityRegistration
operator|!=
literal|null
condition|)
block|{
name|securityRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|securityRegistration
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|serverRegistration
operator|!=
literal|null
condition|)
block|{
name|serverRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|serverRegistration
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|connectorServerFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connectorServerFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error destroying ConnectorServerFactory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|connectorServerFactory
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|mbeanServerFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mbeanServerFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error destroying MBeanServerFactory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|mbeanServerFactory
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|rmiRegistryFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmiRegistryFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error destroying RMIRegistryFactory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|rmiRegistryFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|String
index|[]
name|getInterfaceNames
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
init|=
name|object
operator|.
name|getClass
argument_list|()
init|;
name|cl
operator|!=
name|Object
operator|.
name|class
condition|;
name|cl
operator|=
name|cl
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
name|addSuperInterfaces
argument_list|(
name|names
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|addSuperInterfaces
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
for|for
control|(
name|Class
name|cl
range|:
name|clazz
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addSuperInterfaces
argument_list|(
name|names
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getInt
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|def
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|def
return|;
block|}
specifier|private
name|long
name|getLong
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|key
parameter_list|,
name|long
name|def
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|val
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|def
return|;
block|}
specifier|private
name|boolean
name|getBoolean
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|val
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|def
return|;
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|def
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
name|def
return|;
block|}
block|}
end_class

end_unit

