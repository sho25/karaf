begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *<p>Security MBean. This MBean can be used to find out whether the currently logged user can access certain MBeans  * or invoke operations on these MBeans. It can be used when building client-facing consoles to ensure that only  * operations appropriate for the current user are presented.</p>  *<p>This MBean does not actually invoke any operations on the given objects, it only checks permissions.</p>  */
end_comment

begin_interface
specifier|public
interface|interface
name|JMXSecurityMBean
block|{
comment|/**      * The Tabular Type returned by the {@link #canInvoke(Map)} operation. The rows consist of      * {@link #CAN_INVOKE_RESULT_ROW_TYPE} entries.      * It has a composite key composed by the "ObjectName" and "Method" columns.      */
name|TabularType
name|CAN_INVOKE_TABULAR_TYPE
init|=
name|SecurityMBeanOpenTypeInitializer
operator|.
name|TABULAR_TYPE
decl_stmt|;
comment|/**      * A row as returned by the {@link #CAN_INVOKE_TABULAR_TYPE}. The columns of the row are defined      * by {@link #CAN_INVOKE_RESULT_COLUMNS}      */
name|CompositeType
name|CAN_INVOKE_RESULT_ROW_TYPE
init|=
name|SecurityMBeanOpenTypeInitializer
operator|.
name|ROW_TYPE
decl_stmt|;
comment|/**      * The columns contained in a {@link #CAN_INVOKE_RESULT_ROW_TYPE}. The data types for these columns are      * as follows:      *<ul>      *<li>"ObjectName": {@link SimpleType#STRING}</li>      *<li>"Method": {@link SimpleType#STRING}</li>      *<li>"CanInvoke": {@link SimpleType#BOOLEAN}</li>      *</ul>      */
name|String
index|[]
name|CAN_INVOKE_RESULT_COLUMNS
init|=
name|SecurityMBeanOpenTypeInitializer
operator|.
name|COLUMNS
decl_stmt|;
comment|/**      * Checks whether the current user can invoke any methods on a JMX MBean.      *      * @param objectName The Object Name of the JMX MBean.      * @return {@code True} if there is at least one method on the MBean that the user can invoke, {@code false} else.      * @throws Exception If the invocation check fails.      */
name|boolean
name|canInvoke
parameter_list|(
name|String
name|objectName
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Checks whether the current user can invoke overload of the given method.      *      * @param objectName The Object Name of the JMX MBean.      * @param methodName The name of the method to check.      * @return {@code True} if there is an overload of the specified method that the user can invoke, {@code false} else.      * @throws Exception If the invocation check fails.      */
name|boolean
name|canInvoke
parameter_list|(
name|String
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Checks whether the current user can invoke the given method.      *      * @param objectName The Object Name of the JMX MBean.      * @param methodName The name of the method to check.      * @param argumentTypes The argument types of the method.      * @return {@code True} if the user is allowed to invoke the method, or any of the methods with the given name if      * {@code null} is used for the arguments. There may still be certain values that the user does not have permissions      * to pass to the method.      * @throws Exception If the invocation check fails.      */
name|boolean
name|canInvoke
parameter_list|(
name|String
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
index|[]
name|argumentTypes
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/**      * Bulk operation to check whether the current user can access the requested MBeans or invoke the requested      * methods.      *      * @param bulkQuery<p>a map of Object Name to requested operations. Operations can be specified with or without      *                  argument types. An operation without arguments matches any overloaded method with this      *                  name. If an empty list is provided for the operation names, a check is done whether the      *                  current user can invoke<em>any</em> operation on the MBean.</p>      *                  Example:      *<pre>{@code      *                  Map<String, List<String>> query = new HashMap<>();      *                  String objectName = "org.acme:type=SomeMBean";      *                  query.put(objectName, Arrays.asList(      *                      "testMethod(long,java.lang.String)", // check this testMethod      *                      "otherMethod"));                     // check any overload of otherMethod      *                  query.put("org.acme:type=SomeOtherMBean",      *                      Collections.<String>emptyList());    // check any method of SomeOtherMBean      *                  TabularData result = mb.canInvoke(query);      *                  }</pre>      * @return A Tabular Data object with the result. This object conforms the structure as defined in {@link #CAN_INVOKE_TABULAR_TYPE}      * @throws Exception If the invocation check fails.      */
name|TabularData
name|canInvoke
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bulkQuery
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|// a member class is used to initialize final fields, as this needs to do some exception handling...
class|class
name|SecurityMBeanOpenTypeInitializer
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|COLUMNS
init|=
operator|new
name|String
index|[]
block|{
literal|"ObjectName"
block|,
literal|"Method"
block|,
literal|"CanInvoke"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CompositeType
name|ROW_TYPE
decl_stmt|;
static|static
block|{
try|try
block|{
name|ROW_TYPE
operator|=
operator|new
name|CompositeType
argument_list|(
literal|"CanInvokeRowType"
argument_list|,
literal|"The rows of a CanInvokeTabularType table."
argument_list|,
name|COLUMNS
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"The ObjectName of the checked MBean."
block|,
literal|"The Method to check. This can be either a bare method name which means 'any method with this name' "
operator|+
literal|"or any specific overload such as foo(java.lang.String). If an empty String is returned this means"
operator|+
literal|" 'any' method."
block|,
literal|"true if the method or MBean can potentially be invoked by the current user."
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|TabularType
name|TABULAR_TYPE
decl_stmt|;
static|static
block|{
try|try
block|{
name|TABULAR_TYPE
operator|=
operator|new
name|TabularType
argument_list|(
literal|"CanInvokeTabularType"
argument_list|,
literal|"Result of canInvoke() bulk operation"
argument_list|,
name|ROW_TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ObjectName"
block|,
literal|"Method"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_interface

end_unit

