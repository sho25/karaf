begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|JMXSecurityMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|KarafMBeanServerGuard
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|JMXSecurityMBeanImpl
extends|extends
name|StandardMBean
implements|implements
name|JMXSecurityMBean
block|{
specifier|private
name|MBeanServer
name|mbeanServer
decl_stmt|;
specifier|private
name|KarafMBeanServerGuard
name|guard
decl_stmt|;
specifier|public
name|JMXSecurityMBeanImpl
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|JMXSecurityMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canInvoke
parameter_list|(
name|String
name|objectName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|guard
operator|==
literal|null
condition|)
return|return
literal|true
return|;
return|return
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbeanServer
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canInvoke
parameter_list|(
name|String
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|guard
operator|==
literal|null
condition|)
return|return
literal|true
return|;
return|return
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbeanServer
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|,
name|methodName
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|canInvoke
parameter_list|(
name|String
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
index|[]
name|argumentTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|on
init|=
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
if|if
condition|(
name|guard
operator|==
literal|null
condition|)
return|return
literal|true
return|;
return|return
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbeanServer
argument_list|,
name|on
argument_list|,
name|methodName
argument_list|,
name|argumentTypes
argument_list|)
return|;
block|}
specifier|public
name|TabularData
name|canInvoke
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bulkQuery
parameter_list|)
throws|throws
name|Exception
block|{
name|TabularData
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|CAN_INVOKE_TABULAR_TYPE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|bulkQuery
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|objectName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|methods
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|boolean
name|res
init|=
name|canInvoke
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
name|CompositeData
name|data
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|CAN_INVOKE_RESULT_ROW_TYPE
argument_list|,
name|CAN_INVOKE_RESULT_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|objectName
block|,
literal|""
block|,
name|res
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|method
range|:
name|methods
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|argTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|parseMethodName
argument_list|(
name|method
argument_list|,
name|argTypes
argument_list|)
decl_stmt|;
name|boolean
name|res
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|res
operator|=
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|name
argument_list|,
name|argTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CompositeData
name|data
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|CAN_INVOKE_RESULT_ROW_TYPE
argument_list|,
name|CAN_INVOKE_RESULT_COLUMNS
argument_list|,
operator|new
name|Object
index|[]
block|{
name|objectName
block|,
name|method
block|,
name|res
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|table
return|;
block|}
specifier|private
name|String
name|parseMethodName
parameter_list|(
name|String
name|method
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|argTypes
parameter_list|)
block|{
name|method
operator|=
name|method
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|index
init|=
name|method
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
return|return
name|method
return|;
name|String
name|args
init|=
name|method
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|method
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|argTypes
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
return|return
name|method
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
return|;
block|}
specifier|public
name|MBeanServer
name|getMBeanServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|mbeanServer
return|;
block|}
specifier|public
name|void
name|setMBeanServer
parameter_list|(
name|MBeanServer
name|mbeanServer
parameter_list|)
block|{
name|this
operator|.
name|mbeanServer
operator|=
name|mbeanServer
expr_stmt|;
block|}
specifier|public
name|KarafMBeanServerGuard
name|getGuard
parameter_list|()
block|{
return|return
name|guard
return|;
block|}
specifier|public
name|void
name|setGuard
parameter_list|(
name|KarafMBeanServerGuard
name|guard
parameter_list|)
block|{
name|this
operator|.
name|guard
operator|=
name|guard
expr_stmt|;
block|}
block|}
end_class

end_unit

