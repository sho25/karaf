begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|boot
operator|.
name|KarafMBeanServerBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|guard
operator|.
name|tools
operator|.
name|ACLConfigurationParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|jaas
operator|.
name|JaasHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|KarafMBeanServerGuard
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KarafMBeanServerGuard
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JMX_ACL_PID_PREFIX
init|=
literal|"jmx.acl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JMX_ACL_WHITELIST
init|=
literal|"jmx.acl.whitelist"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JMX_OBJECTNAME_PROPERTY_WILDCARD
init|=
literal|"_"
decl_stmt|;
specifier|private
name|ConfigurationAdmin
name|configAdmin
decl_stmt|;
specifier|public
name|ConfigurationAdmin
name|getConfigAdmin
parameter_list|()
block|{
return|return
name|configAdmin
return|;
block|}
specifier|public
name|void
name|setConfigAdmin
parameter_list|(
name|ConfigurationAdmin
name|configAdmin
parameter_list|)
block|{
name|this
operator|.
name|configAdmin
operator|=
name|configAdmin
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|KarafMBeanServerBuilder
operator|.
name|setGuard
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|ObjectName
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
return|return
literal|null
return|;
name|ObjectName
name|objectName
init|=
operator|(
name|ObjectName
operator|)
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
literal|"getAttribute"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|handleGetAttribute
argument_list|(
operator|(
name|MBeanServer
operator|)
name|proxy
argument_list|,
name|objectName
argument_list|,
operator|(
name|String
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"getAttributes"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|handleGetAttributes
argument_list|(
operator|(
name|MBeanServer
operator|)
name|proxy
argument_list|,
name|objectName
argument_list|,
operator|(
name|String
index|[]
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"setAttribute"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|handleSetAttribute
argument_list|(
operator|(
name|MBeanServer
operator|)
name|proxy
argument_list|,
name|objectName
argument_list|,
operator|(
name|Attribute
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"setAttributes"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|handleSetAttributes
argument_list|(
operator|(
name|MBeanServer
operator|)
name|proxy
argument_list|,
name|objectName
argument_list|,
operator|(
name|AttributeList
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"invoke"
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|handleInvoke
argument_list|(
name|objectName
argument_list|,
operator|(
name|String
operator|)
name|args
index|[
literal|1
index|]
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|args
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
index|[]
operator|)
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns whether there is any method that the current user can invoke.      *      * @param mbeanServer the MBeanServer where the object is registered.      * @param objectName the ObjectName to check.      * @return {@code true} if there is a method on the object that can be invoked, {@code false} else.      * @throws JMException      * @throws IOException      */
specifier|public
name|boolean
name|canInvoke
parameter_list|(
name|MBeanServer
name|mbeanServer
parameter_list|,
name|ObjectName
name|objectName
parameter_list|)
throws|throws
name|JMException
throws|,
name|IOException
block|{
name|MBeanInfo
name|info
init|=
name|mbeanServer
operator|.
name|getMBeanInfo
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
for|for
control|(
name|MBeanOperationInfo
name|operation
range|:
name|info
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sig
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MBeanParameterInfo
name|param
range|:
name|operation
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|sig
operator|.
name|add
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
argument_list|,
name|sig
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
block|)
block|)
block|)
block|{
return|return
literal|true
return|;
block|}
end_class

begin_expr_stmt
unit|}          for
operator|(
name|MBeanAttributeInfo
name|attr
operator|:
name|info
operator|.
name|getAttributes
argument_list|()
operator|)
block|{
if|if
condition|(
name|attr
operator|.
name|isReadable
argument_list|()
condition|)
block|{
if|if
condition|(
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|attr
operator|.
name|isIs
argument_list|()
condition|?
literal|"is"
else|:
literal|"get"
operator|+
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
block|}
end_expr_stmt

begin_return
unit|))
return|return
literal|true
return|;
end_return

begin_expr_stmt
unit|}             if
operator|(
name|attr
operator|.
name|isWritable
argument_list|()
operator|)
block|{
if|if
condition|(
name|canInvoke
argument_list|(
name|objectName
argument_list|,
literal|"set"
operator|+
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|attr
operator|.
name|getType
argument_list|()
block|}
end_expr_stmt

begin_return
unit|))
return|return
literal|true
return|;
end_return

begin_return
unit|}         }
return|return
literal|false
return|;
end_return

begin_comment
unit|}
comment|/**      * Returns whether there is any overload of the specified method that can be invoked by the current user.      *      * @param mbeanServer the MBeanServer where the object is registered.      * @param objectName the MBean ObjectName.      * @param methodName the name of the method.      * @return {@code true} if there is an overload of the method that can be invoked by the current user.      * @throws JMException      * @throws IOException      */
end_comment

begin_function
unit|public
name|boolean
name|canInvoke
parameter_list|(
name|MBeanServer
name|mbeanServer
parameter_list|,
name|ObjectName
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|)
throws|throws
name|JMException
throws|,
name|IOException
block|{
name|methodName
operator|=
name|methodName
operator|.
name|trim
argument_list|()
expr_stmt|;
name|MBeanInfo
name|info
init|=
name|mbeanServer
operator|.
name|getMBeanInfo
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
for|for
control|(
name|MBeanOperationInfo
name|op
range|:
name|info
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|methodName
operator|.
name|equals
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|sig
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MBeanParameterInfo
name|param
range|:
name|op
operator|.
name|getSignature
argument_list|()
control|)
block|{
name|sig
operator|.
name|add
argument_list|(
name|param
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|,
name|sig
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
block|)
block|)
end_function

begin_block
unit|)
block|{
return|return
literal|true
return|;
block|}
end_block

begin_expr_stmt
unit|}          for
operator|(
name|MBeanAttributeInfo
name|attr
operator|:
name|info
operator|.
name|getAttributes
argument_list|()
operator|)
block|{
name|String
name|attrName
operator|=
name|attr
operator|.
name|getName
argument_list|()
block|;
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"is"
operator|+
name|attrName
argument_list|)
operator|||
name|methodName
operator|.
name|equals
argument_list|(
literal|"get"
operator|+
name|attrName
argument_list|)
condition|)
block|{
return|return
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|methodName
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
return|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"set"
operator|+
name|attrName
argument_list|)
condition|)
block|{
return|return
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|methodName
argument_list|,
operator|new
name|String
index|[]
block|{
name|attr
operator|.
name|getType
argument_list|()
block|}
argument_list|)
return|;
block|}
end_if

begin_expr_stmt
unit|}          return
literal|false
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**      * Returns true if the method on the MBean with the specified signature can be invoked.      *      * @param mbeanServer the MBeanServer where the object is registered.      * @param objectName the MBean ObjectName.      * @param methodName the name of the method.      * @param signature the signature of the method.      * @return {@code true} if the method can be invoked, {@code false} else. Note that if a method name or signature      *      is provided that does not exist on the MBean, the behaviour of this method is undefined. In other words,      *      if you ask whether a method that does not exist can be invoked, the method may return {@code true} but      *      actually invoking that method will obviously not work.      * @throws IOException      */
end_comment

begin_function
unit|public
name|boolean
name|canInvoke
parameter_list|(
name|MBeanServer
name|mbeanServer
parameter_list|,
name|ObjectName
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|IOException
block|{
comment|// no checking done on the MBeanServer of whether the method actually exists...
return|return
name|canInvoke
argument_list|(
name|objectName
argument_list|,
name|methodName
argument_list|,
name|signature
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|canInvoke
parameter_list|(
name|ObjectName
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|canBypassRBAC
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|role
range|:
name|getRequiredRoles
argument_list|(
name|objectName
argument_list|,
name|methodName
argument_list|,
name|signature
argument_list|)
control|)
block|{
if|if
condition|(
name|JaasHelper
operator|.
name|currentUserHasRole
argument_list|(
name|role
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|handleGetAttribute
parameter_list|(
name|MBeanServer
name|proxy
parameter_list|,
name|ObjectName
name|objectName
parameter_list|,
name|String
name|attributeName
parameter_list|)
throws|throws
name|JMException
throws|,
name|IOException
block|{
name|MBeanInfo
name|info
init|=
name|proxy
operator|.
name|getMBeanInfo
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MBeanAttributeInfo
name|attr
range|:
name|info
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|attr
operator|.
name|isIs
argument_list|()
condition|?
literal|"is"
else|:
literal|"get"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attribute "
operator|+
name|attributeName
operator|+
literal|" can not be found for MBean "
operator|+
name|objectName
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|handleInvoke
argument_list|(
name|objectName
argument_list|,
name|prefix
operator|+
name|attributeName
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|handleGetAttributes
parameter_list|(
name|MBeanServer
name|proxy
parameter_list|,
name|ObjectName
name|objectName
parameter_list|,
name|String
index|[]
name|attributeNames
parameter_list|)
throws|throws
name|JMException
throws|,
name|IOException
block|{
for|for
control|(
name|String
name|attr
range|:
name|attributeNames
control|)
block|{
name|handleGetAttribute
argument_list|(
name|proxy
argument_list|,
name|objectName
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|handleSetAttribute
parameter_list|(
name|MBeanServer
name|proxy
parameter_list|,
name|ObjectName
name|objectName
parameter_list|,
name|Attribute
name|attribute
parameter_list|)
throws|throws
name|JMException
throws|,
name|IOException
block|{
name|String
name|dataType
init|=
literal|null
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|proxy
operator|.
name|getMBeanInfo
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
for|for
control|(
name|MBeanAttributeInfo
name|attr
range|:
name|info
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
name|attr
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dataType
operator|=
name|attr
operator|.
name|getType
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|dataType
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attribute data type can not be found"
argument_list|)
throw|;
name|handleInvoke
argument_list|(
name|objectName
argument_list|,
literal|"set"
operator|+
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Object
index|[]
block|{
name|attribute
operator|.
name|getValue
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|dataType
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|handleSetAttributes
parameter_list|(
name|MBeanServer
name|proxy
parameter_list|,
name|ObjectName
name|objectName
parameter_list|,
name|AttributeList
name|attributes
parameter_list|)
throws|throws
name|JMException
throws|,
name|IOException
block|{
for|for
control|(
name|Attribute
name|attr
range|:
name|attributes
operator|.
name|asList
argument_list|()
control|)
block|{
name|handleSetAttribute
argument_list|(
name|proxy
argument_list|,
name|objectName
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|boolean
name|canBypassRBAC
parameter_list|(
name|ObjectName
name|objectName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allBypassObjectName
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Configuration
index|[]
name|configs
init|=
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid="
operator|+
name|JMX_ACL_WHITELIST
operator|+
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Configuration
name|config
range|:
name|configs
control|)
block|{
name|Enumeration
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|element
init|=
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|allBypassObjectName
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|ise
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ise
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|pid
range|:
name|iterateDownPids
argument_list|(
name|getNameSegments
argument_list|(
name|objectName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|pid
operator|.
name|equals
argument_list|(
literal|"jmx.acl"
argument_list|)
operator|&&
name|allBypassObjectName
operator|.
name|contains
argument_list|(
name|pid
operator|.
name|substring
argument_list|(
literal|"jmx.acl."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
name|void
name|handleInvoke
parameter_list|(
name|ObjectName
name|objectName
parameter_list|,
name|String
name|operationName
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|canBypassRBAC
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|role
range|:
name|getRequiredRoles
argument_list|(
name|objectName
argument_list|,
name|operationName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
control|)
block|{
if|if
condition|(
name|JaasHelper
operator|.
name|currentUserHasRole
argument_list|(
name|role
argument_list|)
condition|)
return|return;
block|}
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Insufficient roles/credentials for operation"
argument_list|)
throw|;
block|}
end_function

begin_function
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredRoles
parameter_list|(
name|ObjectName
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getRequiredRoles
argument_list|(
name|objectName
argument_list|,
name|methodName
argument_list|,
literal|null
argument_list|,
name|signature
argument_list|)
return|;
block|}
end_function

begin_function
name|List
argument_list|<
name|String
argument_list|>
name|getRequiredRoles
parameter_list|(
name|ObjectName
name|objectName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|allPids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Configuration
name|config
range|:
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=jmx.acl*)"
argument_list|)
control|)
block|{
name|allPids
operator|.
name|add
argument_list|(
name|config
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|ise
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ise
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|pid
range|:
name|iterateDownPids
argument_list|(
name|getNameSegments
argument_list|(
name|objectName
argument_list|)
argument_list|)
control|)
block|{
name|String
name|generalPid
init|=
name|getGeneralPid
argument_list|(
name|allPids
argument_list|,
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|generalPid
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Configuration
name|config
init|=
name|configAdmin
operator|.
name|getConfiguration
argument_list|(
name|generalPid
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ACLConfigurationParser
operator|.
name|Specificity
name|s
init|=
name|ACLConfigurationParser
operator|.
name|getRolesForInvocation
argument_list|(
name|methodName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
argument_list|,
name|roles
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
name|ACLConfigurationParser
operator|.
name|Specificity
operator|.
name|NO_MATCH
condition|)
block|{
return|return
name|roles
return|;
block|}
block|}
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|String
name|getGeneralPid
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|allPids
parameter_list|,
name|String
name|pid
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|pidStrArray
init|=
name|pid
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|allPids
control|)
block|{
name|String
index|[]
name|idStrArray
init|=
name|id
operator|.
name|split
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|idStrArray
operator|.
name|length
operator|==
name|pidStrArray
operator|.
name|length
condition|)
block|{
name|boolean
name|match
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|idStrArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|idStrArray
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|JMX_OBJECTNAME_PROPERTY_WILDCARD
argument_list|)
operator|||
name|idStrArray
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|pidStrArray
index|[
name|i
index|]
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
condition|)
block|{
name|ret
operator|=
name|id
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getNameSegments
parameter_list|(
name|ObjectName
name|objectName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|segments
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|segments
operator|.
name|add
argument_list|(
name|objectName
operator|.
name|getDomain
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO can an ObjectName property contain a comma as key or value ?
comment|// TODO support quoting as described in http://docs.oracle.com/javaee/1.4/api/javax/management/ObjectName.html
for|for
control|(
name|String
name|s
range|:
name|objectName
operator|.
name|getKeyPropertyListString
argument_list|()
operator|.
name|split
argument_list|(
literal|"[,]"
argument_list|)
control|)
block|{
name|int
name|index
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|String
name|key
init|=
name|objectName
operator|.
name|getKeyProperty
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|segments
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|segments
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|segments
return|;
block|}
end_function

begin_comment
comment|/**      * Given a list of segments, return a list of PIDs that are searched in this order.      * For example, given the following segments: org.foo, bar, test      * the following list of PIDs will be generated (in this order):      *      jmx.acl.org.foo.bar.test      *      jmx.acl.org.foo.bar      *      jmx.acl.org.foo      *      jmx.acl      * The order is used as a search order, in which the most specific PID is searched first.      *      * @param segments the ObjectName segments.      * @return the PIDs corresponding with the ObjectName in the above order.      */
end_comment

begin_function
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iterateDownPids
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|segments
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|segments
operator|.
name|size
argument_list|()
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|JMX_ACL_PID_PREFIX
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|segments
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|add
argument_list|(
name|JMX_ACL_PID_PREFIX
argument_list|)
expr_stmt|;
comment|// this is the top PID (aka jmx.acl)
return|return
name|res
return|;
block|}
end_function

unit|}
end_unit

