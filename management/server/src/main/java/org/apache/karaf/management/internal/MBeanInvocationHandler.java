begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|MBeanInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|MBeanServer
name|wrapped
decl_stmt|;
specifier|private
specifier|final
name|InvocationHandler
name|guard
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|guarded
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"invoke"
argument_list|,
literal|"getAttribute"
argument_list|,
literal|"getAttributes"
argument_list|,
literal|"setAttribute"
argument_list|,
literal|"setAttributes"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|MBeanInvocationHandler
parameter_list|(
name|MBeanServer
name|mBeanServer
parameter_list|,
name|InvocationHandler
name|guard
parameter_list|)
block|{
name|wrapped
operator|=
name|mBeanServer
expr_stmt|;
name|this
operator|.
name|guard
operator|=
name|guard
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|guarded
operator|.
name|contains
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|guard
operator|.
name|invoke
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"equals"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|==
name|Object
operator|.
name|class
condition|)
block|{
name|Object
name|target
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
name|Proxy
operator|.
name|isProxyClass
argument_list|(
name|target
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|InvocationHandler
name|handler
init|=
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|instanceof
name|MBeanInvocationHandler
condition|)
block|{
name|args
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|MBeanInvocationHandler
operator|)
name|handler
operator|)
operator|.
name|wrapped
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"finalize"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// special case finalize, don't route through to delegate because that will get its own call
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|wrapped
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
specifier|public
name|MBeanServer
name|getDelegate
parameter_list|()
block|{
return|return
name|wrapped
return|;
block|}
block|}
end_class

end_unit

