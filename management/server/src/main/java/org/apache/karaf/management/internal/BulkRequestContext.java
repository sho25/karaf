begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_comment
comment|/**  *<p>Class to optimize ConfigAdmin access with the lifecycle of single  * {@link org.apache.karaf.management.JMXSecurityMBean#canInvoke(Map) bulk query invocation}. This prevents countless  * {@link org.osgi.service.cm.ConfigurationAdmin#listConfigurations(String) listings of ConfigAdmin configurations}  * for each checked MBean/method.</p>  *<p>Access to this object doesn't have to be synchronized, as it is passed down the<code>canInvoke</code> chain.</p>  */
end_comment

begin_class
specifier|public
class|class
name|BulkRequestContext
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|allPids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|whiteListProperties
init|=
operator|new
name|ArrayList
argument_list|<
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ConfigurationAdmin
name|configAdmin
decl_stmt|;
comment|// cache with lifecycle bound to BulkRequestContext instance
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|cachedConfigurations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|BulkRequestContext
parameter_list|()
block|{}
specifier|public
specifier|static
name|BulkRequestContext
name|newContext
parameter_list|(
name|ConfigurationAdmin
name|configAdmin
parameter_list|)
throws|throws
name|IOException
block|{
name|BulkRequestContext
name|context
init|=
operator|new
name|BulkRequestContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|configAdmin
operator|=
name|configAdmin
expr_stmt|;
try|try
block|{
comment|// list available ACL configs - valid for this instance only
for|for
control|(
name|Configuration
name|config
range|:
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=jmx.acl*)"
argument_list|)
control|)
block|{
name|context
operator|.
name|allPids
operator|.
name|add
argument_list|(
name|config
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// list available ACT whitelist configs
name|Configuration
index|[]
name|configs
init|=
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=jmx.acl.whitelist)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Configuration
name|config
range|:
name|configs
control|)
block|{
name|context
operator|.
name|whiteListProperties
operator|.
name|add
argument_list|(
name|config
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|ise
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ise
argument_list|)
throw|;
block|}
return|return
name|context
return|;
block|}
comment|/**      * Returns list of PIDs related to RBAC/ACL      * @return      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllPids
parameter_list|()
block|{
return|return
name|allPids
return|;
block|}
comment|/**      * Returns list of configurations from      * @return      */
specifier|public
name|List
argument_list|<
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getWhitelistProperties
parameter_list|()
block|{
return|return
name|whiteListProperties
return|;
block|}
comment|/**      * Returns {@link Configuration ConfigAdmin configuration} - may be cached in this instance of      * {@link BulkRequestContext context}      * @param generalPid      * @return      */
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getConfiguration
parameter_list|(
name|String
name|generalPid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|cachedConfigurations
operator|.
name|containsKey
argument_list|(
name|generalPid
argument_list|)
condition|)
block|{
name|cachedConfigurations
operator|.
name|put
argument_list|(
name|generalPid
argument_list|,
name|configAdmin
operator|.
name|getConfiguration
argument_list|(
name|generalPid
argument_list|,
literal|null
argument_list|)
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cachedConfigurations
operator|.
name|get
argument_list|(
name|generalPid
argument_list|)
return|;
block|}
block|}
end_class

end_unit

