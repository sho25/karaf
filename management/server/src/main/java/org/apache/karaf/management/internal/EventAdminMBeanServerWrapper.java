begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceAlreadyExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|IntrospectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InvalidAttributeValueException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ListenerNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanRegistrationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|OperationsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|QueryExp
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|loading
operator|.
name|ClassLoaderRepository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|EventAdminMBeanServerWrapper
implements|implements
name|MBeanServer
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NO_ARGS_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|OBJECT_NAME_ONLY_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_MBEAN
init|=
literal|"createMBean"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CREATE_MBEAN_SIG_1
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CREATE_MBEAN_SIG_2
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CREATE_MBEAN_SIG_3
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CREATE_MBEAN_SIG_4
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGISTER_MBEAN
init|=
literal|"registerMBean"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REGISTER_MBEAN_SIG
init|=
operator|new
name|String
index|[]
block|{
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UNREGISTER_MBEAN
init|=
literal|"unregisterMBean"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|UNREGISTER_MBEAN_SIG
init|=
name|OBJECT_NAME_ONLY_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_OBJECT_INSTANCE
init|=
literal|"getObjectInstance"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_OBJECT_INSTANCE_SIG
init|=
name|OBJECT_NAME_ONLY_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_MBEANS
init|=
literal|"queryMBeans"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|QUERY_MBEANS_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|QueryExp
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_NAMES
init|=
literal|"queryMBeans"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|QUERY_NAMES_SIG
init|=
name|QUERY_MBEANS_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IS_REGISTERED
init|=
literal|"isRegistered"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|IS_REGISTERED_SIG
init|=
name|OBJECT_NAME_ONLY_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_MBEAN_COUNT
init|=
literal|"getMBeanCount"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_MBEAN_COUNT_SIG
init|=
name|NO_ARGS_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_ATTRIBUTE
init|=
literal|"getAttribute"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_ATTRIBUTE_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_ATTRIBUTES
init|=
literal|"getAttributes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_ATTRIBUTES_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_ATTRIBUTE
init|=
literal|"setAttribute"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SET_ATTRIBUTE_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Attribute
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SET_ATTRIBUTES
init|=
literal|"setAttributes"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|SET_ATTRIBUTES_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|AttributeList
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INVOKE
init|=
literal|"invoke"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|INVOKE_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_DEFAULT_DOMAIN
init|=
literal|"getDefaultDomain"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_DEFAULT_DOMAIN_SIG
init|=
name|NO_ARGS_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_DOMAINS
init|=
literal|"getDomains"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_DOMAINS_SIG
init|=
name|NO_ARGS_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ADD_NOTIFICATION_LISTENER
init|=
literal|"addNotificationListener"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ADD_NOTIFICATION_LISTENER_SIG_1
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NotificationListener
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NotificationFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ADD_NOTIFICATION_LISTENER_SIG_2
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NotificationFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REMOVE_NOTIFICATION_LISTENER
init|=
literal|"addNotificationListener"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REMOVE_NOTIFICATION_LISTENER_SIG_1
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REMOVE_NOTIFICATION_LISTENER_SIG_2
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NotificationFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REMOVE_NOTIFICATION_LISTENER_SIG_3
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NotificationListener
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|REMOVE_NOTIFICATION_LISTENER_SIG_4
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NotificationListener
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NotificationFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_MBEAN_INFO
init|=
literal|"getMBeanInfo"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_MBEAN_INFO_SIG
init|=
name|OBJECT_NAME_ONLY_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IS_INSTANCE_OF
init|=
literal|"isInstanceOf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|IS_INSTANCE_OF_SIG
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INSTANTIATE
init|=
literal|"instantiate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|INSTANTIATE_SIG1
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|INSTANTIATE_SIG2
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|INSTANTIATE_SIG3
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|INSTANTIATE_SIG4
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Object
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESERIALIZE
init|=
literal|"deserialize"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DESERIALIZE_SIG1
init|=
operator|new
name|String
index|[]
block|{
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|byte
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DESERIALIZE_SIG2
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|byte
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DESERIALIZE_SIG3
init|=
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ObjectName
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|byte
index|[]
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_CLASSLOADER_FOR
init|=
literal|"getClassLoaderFor"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_CLASSLOADER_FOR_SIG
init|=
name|OBJECT_NAME_ONLY_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_CLASSLOADER
init|=
literal|"getClassLoader"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_CLASSLOADER_SIG
init|=
name|OBJECT_NAME_ONLY_SIG
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GET_CLASSLOADER_REPOSITORY
init|=
literal|"getClassLoaderRepository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GET_CLASSLOADER_REPOSITORY_SIG
init|=
name|NO_ARGS_SIG
decl_stmt|;
specifier|private
specifier|final
name|MBeanServer
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|EventAdminLogger
name|logger
decl_stmt|;
specifier|public
name|EventAdminMBeanServerWrapper
parameter_list|(
name|MBeanServer
name|delegate
parameter_list|,
name|EventAdminLogger
name|logger
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|logger
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|log
parameter_list|(
name|String
name|methodName
parameter_list|,
name|String
index|[]
name|signature
parameter_list|,
name|Object
name|result
parameter_list|,
name|Throwable
name|error
parameter_list|,
name|Object
modifier|...
name|params
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|methodName
argument_list|,
name|signature
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInstance
name|createMBean
parameter_list|(
name|String
name|className
parameter_list|,
name|ObjectName
name|name
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|InstanceAlreadyExistsException
throws|,
name|MBeanException
throws|,
name|NotCompliantMBeanException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInstance
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|createMBean
argument_list|(
name|className
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|CREATE_MBEAN
argument_list|,
name|CREATE_MBEAN_SIG_1
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInstance
name|createMBean
parameter_list|(
name|String
name|className
parameter_list|,
name|ObjectName
name|name
parameter_list|,
name|ObjectName
name|loaderName
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|InstanceAlreadyExistsException
throws|,
name|MBeanException
throws|,
name|NotCompliantMBeanException
throws|,
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInstance
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|createMBean
argument_list|(
name|className
argument_list|,
name|name
argument_list|,
name|loaderName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|CREATE_MBEAN
argument_list|,
name|CREATE_MBEAN_SIG_2
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|name
argument_list|,
name|loaderName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInstance
name|createMBean
parameter_list|(
name|String
name|className
parameter_list|,
name|ObjectName
name|name
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|InstanceAlreadyExistsException
throws|,
name|MBeanException
throws|,
name|NotCompliantMBeanException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInstance
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|createMBean
argument_list|(
name|className
argument_list|,
name|name
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|CREATE_MBEAN
argument_list|,
name|CREATE_MBEAN_SIG_3
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|name
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInstance
name|createMBean
parameter_list|(
name|String
name|className
parameter_list|,
name|ObjectName
name|name
parameter_list|,
name|ObjectName
name|loaderName
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|InstanceAlreadyExistsException
throws|,
name|MBeanException
throws|,
name|NotCompliantMBeanException
throws|,
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInstance
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|createMBean
argument_list|(
name|className
argument_list|,
name|name
argument_list|,
name|loaderName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|CREATE_MBEAN
argument_list|,
name|CREATE_MBEAN_SIG_4
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|name
argument_list|,
name|loaderName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInstance
name|registerMBean
parameter_list|(
name|Object
name|object
parameter_list|,
name|ObjectName
name|name
parameter_list|)
throws|throws
name|InstanceAlreadyExistsException
throws|,
name|MBeanRegistrationException
throws|,
name|NotCompliantMBeanException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInstance
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|registerMBean
argument_list|(
name|object
argument_list|,
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|REGISTER_MBEAN
argument_list|,
name|REGISTER_MBEAN_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|object
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterMBean
parameter_list|(
name|ObjectName
name|name
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|MBeanRegistrationException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|unregisterMBean
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|UNREGISTER_MBEAN
argument_list|,
name|UNREGISTER_MBEAN_SIG
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInstance
name|getObjectInstance
parameter_list|(
name|ObjectName
name|name
parameter_list|)
throws|throws
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInstance
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getObjectInstance
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_OBJECT_INSTANCE
argument_list|,
name|GET_OBJECT_INSTANCE_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ObjectInstance
argument_list|>
name|queryMBeans
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|QueryExp
name|query
parameter_list|)
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|ObjectInstance
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|queryMBeans
argument_list|(
name|name
argument_list|,
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|QUERY_MBEANS
argument_list|,
name|QUERY_MBEANS_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|queryNames
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|QueryExp
name|query
parameter_list|)
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|queryNames
argument_list|(
name|name
argument_list|,
name|query
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|QUERY_NAMES
argument_list|,
name|QUERY_NAMES_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRegistered
parameter_list|(
name|ObjectName
name|name
parameter_list|)
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Boolean
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|isRegistered
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|IS_REGISTERED
argument_list|,
name|IS_REGISTERED_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getMBeanCount
parameter_list|()
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Integer
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getMBeanCount
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_MBEAN_COUNT
argument_list|,
name|GET_MBEAN_COUNT_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|String
name|attribute
parameter_list|)
throws|throws
name|MBeanException
throws|,
name|AttributeNotFoundException
throws|,
name|InstanceNotFoundException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|,
name|attribute
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_ATTRIBUTE
argument_list|,
name|GET_ATTRIBUTE_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AttributeList
name|getAttributes
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|String
index|[]
name|attributes
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|AttributeList
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getAttributes
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_ATTRIBUTES
argument_list|,
name|GET_ATTRIBUTES_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAttribute
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|Attribute
name|attribute
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|AttributeNotFoundException
throws|,
name|InvalidAttributeValueException
throws|,
name|MBeanException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|SET_ATTRIBUTE
argument_list|,
name|SET_ATTRIBUTE_SIG
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AttributeList
name|setAttributes
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|AttributeList
name|attributes
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|AttributeList
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|setAttributes
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|SET_ATTRIBUTES
argument_list|,
name|SET_ATTRIBUTES_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|String
name|operationName
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|invoke
argument_list|(
name|name
argument_list|,
name|operationName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|INVOKE
argument_list|,
name|INVOKE_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|operationName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultDomain
parameter_list|()
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getDefaultDomain
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_DEFAULT_DOMAIN
argument_list|,
name|GET_DEFAULT_DOMAIN_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getDomains
parameter_list|()
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getDomains
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_DOMAINS
argument_list|,
name|GET_DOMAINS_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNotificationListener
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|NotificationListener
name|listener
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|,
name|Object
name|handback
parameter_list|)
throws|throws
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|addNotificationListener
argument_list|(
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|ADD_NOTIFICATION_LISTENER
argument_list|,
name|ADD_NOTIFICATION_LISTENER_SIG_1
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNotificationListener
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|ObjectName
name|listener
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|,
name|Object
name|handback
parameter_list|)
throws|throws
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|addNotificationListener
argument_list|(
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|ADD_NOTIFICATION_LISTENER
argument_list|,
name|ADD_NOTIFICATION_LISTENER_SIG_2
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNotificationListener
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|ObjectName
name|listener
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|ListenerNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|removeNotificationListener
argument_list|(
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|REMOVE_NOTIFICATION_LISTENER
argument_list|,
name|REMOVE_NOTIFICATION_LISTENER_SIG_1
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNotificationListener
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|ObjectName
name|listener
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|,
name|Object
name|handback
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|ListenerNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|removeNotificationListener
argument_list|(
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|REMOVE_NOTIFICATION_LISTENER
argument_list|,
name|REMOVE_NOTIFICATION_LISTENER_SIG_2
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNotificationListener
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|NotificationListener
name|listener
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|ListenerNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|removeNotificationListener
argument_list|(
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|REMOVE_NOTIFICATION_LISTENER
argument_list|,
name|REMOVE_NOTIFICATION_LISTENER_SIG_3
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeNotificationListener
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|NotificationListener
name|listener
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|,
name|Object
name|handback
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|ListenerNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
name|delegate
operator|.
name|removeNotificationListener
argument_list|(
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|REMOVE_NOTIFICATION_LISTENER
argument_list|,
name|REMOVE_NOTIFICATION_LISTENER_SIG_4
argument_list|,
literal|null
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|,
name|handback
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MBeanInfo
name|getMBeanInfo
parameter_list|(
name|ObjectName
name|name
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|IntrospectionException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|MBeanInfo
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getMBeanInfo
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_MBEAN_INFO
argument_list|,
name|GET_MBEAN_INFO_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInstanceOf
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Boolean
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|isInstanceOf
argument_list|(
name|name
argument_list|,
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|IS_INSTANCE_OF
argument_list|,
name|IS_INSTANCE_OF_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|instantiate
parameter_list|(
name|String
name|className
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|MBeanException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|instantiate
argument_list|(
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|INSTANTIATE
argument_list|,
name|INSTANTIATE_SIG1
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|instantiate
parameter_list|(
name|String
name|className
parameter_list|,
name|ObjectName
name|loaderName
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|MBeanException
throws|,
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|instantiate
argument_list|(
name|className
argument_list|,
name|loaderName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|INSTANTIATE
argument_list|,
name|INSTANTIATE_SIG2
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|loaderName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|instantiate
parameter_list|(
name|String
name|className
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|MBeanException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|instantiate
argument_list|(
name|className
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|INSTANTIATE
argument_list|,
name|INSTANTIATE_SIG3
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|instantiate
parameter_list|(
name|String
name|className
parameter_list|,
name|ObjectName
name|loaderName
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|MBeanException
throws|,
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|instantiate
argument_list|(
name|className
argument_list|,
name|loaderName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|INSTANTIATE
argument_list|,
name|INSTANTIATE_SIG4
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|loaderName
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|ObjectInputStream
name|deserialize
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|OperationsException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|deserialize
argument_list|(
name|name
argument_list|,
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|DESERIALIZE
argument_list|,
name|DESERIALIZE_SIG1
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|name
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|ObjectInputStream
name|deserialize
parameter_list|(
name|String
name|className
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|OperationsException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|deserialize
argument_list|(
name|className
argument_list|,
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|DESERIALIZE
argument_list|,
name|DESERIALIZE_SIG2
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|ObjectInputStream
name|deserialize
parameter_list|(
name|String
name|className
parameter_list|,
name|ObjectName
name|loaderName
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|OperationsException
throws|,
name|ReflectionException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ObjectInputStream
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|deserialize
argument_list|(
name|className
argument_list|,
name|loaderName
argument_list|,
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|DESERIALIZE
argument_list|,
name|DESERIALIZE_SIG3
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|className
argument_list|,
name|loaderName
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClassLoader
name|getClassLoaderFor
parameter_list|(
name|ObjectName
name|mbeanName
parameter_list|)
throws|throws
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ClassLoader
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getClassLoaderFor
argument_list|(
name|mbeanName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_CLASSLOADER_FOR
argument_list|,
name|GET_CLASSLOADER_FOR_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|mbeanName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|(
name|ObjectName
name|loaderName
parameter_list|)
throws|throws
name|InstanceNotFoundException
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ClassLoader
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getClassLoader
argument_list|(
name|loaderName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_CLASSLOADER
argument_list|,
name|GET_CLASSLOADER_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|,
name|loaderName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClassLoaderRepository
name|getClassLoaderRepository
parameter_list|()
block|{
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
name|ClassLoaderRepository
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|result
operator|=
name|delegate
operator|.
name|getClassLoaderRepository
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|log
argument_list|(
name|GET_CLASSLOADER_REPOSITORY
argument_list|,
name|GET_CLASSLOADER_REPOSITORY_SIG
argument_list|,
name|result
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|MBeanServer
name|getDelegate
parameter_list|()
block|{
return|return
name|delegate
return|;
block|}
block|}
end_class

end_unit

