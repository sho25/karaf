begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|jaas
operator|.
name|JaasHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|KarafMBeanServerGuardTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testRequiredRolesMethodNameOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"fryit"
argument_list|,
literal|"editor,viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"master"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"editor"
argument_list|,
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"fryit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"blah"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testRequiredRolesMethodNameEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"fryit"
argument_list|,
literal|"editor, viewer"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar.Test"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin2
argument_list|(
name|conf1
argument_list|,
name|conf2
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"editor"
argument_list|,
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"fryit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"blah"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesSignature
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit"
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String, java.lang.String)"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"test"
block|,
literal|"toast"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesSignatureEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit"
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String, java.lang.String)"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"test"
block|,
literal|"toast"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesExact
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit"
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String, java.lang.String)"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String) [\"ab\"]"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)[\"a b\" ]"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)[ \"cd\"]  "
argument_list|,
literal|"tester"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)[\"cd/\"]"
argument_list|,
literal|"monkey"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)[\"cd\"\"]"
argument_list|,
literal|"donkey"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"manager"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"ab"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|" a b "
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The arguments are trimmed before checking"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"a b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"tester"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"cd"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"monkey"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"cd/"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"donkey"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"cd\""
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesExact2
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foo(java.lang.String,java.lang.String)[\"a\",\",\"]"
argument_list|,
literal|"editor #this is the editor rule"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foo(java.lang.String,java.lang.String)[\",\" , \"a\"]"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"a"
block|,
literal|","
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|","
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"a"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesNumeric
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"bar(int)[\"17\"]"
argument_list|,
literal|"editor #this is the editor rule"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
literal|17
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
literal|18
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesExactNobody
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foo(java.lang.String)[\"a\"]"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foo(java.lang.String)[\"aa\"]"
argument_list|,
literal|"#hello"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"aa"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesRegExp
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"  testit   (java.lang.String)  [  /ab/]"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)[/c\"d/]"
argument_list|,
literal|"tester"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"manager"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"ab"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"manager"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"    ab  "
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|" a b "
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"tester"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|" c\"d "
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesRegExpNobody
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"testit(java.lang.String)[/ab/]"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"test*"
argument_list|,
literal|"tester"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"testit"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"ab"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesRegExp2
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foo(java.lang.String,java.lang.String)[/a/,/b/]"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foo(java.lang.String,java.lang.String)[/[bc]/ , /[^b]/]"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"c"
block|,
literal|"c"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"b"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testRequiredRolesHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar.Test"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf3
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf3
operator|.
name|put
argument_list|(
literal|"tar"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|conf3
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf4
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf4
operator|.
name|put
argument_list|(
literal|"zar"
argument_list|,
literal|"visitor"
argument_list|)
expr_stmt|;
name|conf4
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin2
argument_list|(
name|conf1
argument_list|,
name|conf2
argument_list|,
name|conf3
argument_list|,
name|conf4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|4
argument_list|,
name|ca
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=jmx.acl*)"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only return the most specific definition"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"bar"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"test"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The top-level is the domain, subsections of the domain should not be searched"
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"tar"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"visitor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"zar"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testRequiredRolesHierarchyWildcard1
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl._.bar.Test"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar.Test"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin2
argument_list|(
name|conf1
argument_list|,
name|conf2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|2
argument_list|,
name|ca
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=jmx.acl*)"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on1
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only return the most specific definition"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on1
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectName
name|on2
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"tar.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should return definition from wildcard PID"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on2
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testRequiredRolesHierarchyWildcard2
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar.Test"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl._.bar.Test"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin2
argument_list|(
name|conf1
argument_list|,
name|conf2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|2
argument_list|,
name|ca
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=jmx.acl*)"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on1
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only return the most specific definition"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on1
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectName
name|on2
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"tar.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should return definition from wildcard PID"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on2
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testRequiredRolesHierarchyWildcard3
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl._.bar.Test"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo._.Test"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin2
argument_list|(
name|conf1
argument_list|,
name|conf2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|2
argument_list|,
name|ca
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=jmx.acl*)"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on1
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only return the most specific definition"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on1
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectName
name|on2
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.tar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"editor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on2
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectName
name|on3
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"boo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on3
argument_list|,
literal|"foo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesMethodNameWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|" tester , editor,manager"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"getFoo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"tester"
argument_list|,
literal|"editor"
argument_list|,
literal|"manager"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"getBar"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"test"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|17
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.Long"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesMethodNameWildcard2
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"ge"
argument_list|,
literal|"janitor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"getFoo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"get"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"janitor"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"ge"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRequiredRolesMethodNameWildcard3
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"getFoo"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"viewer"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"get"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"ge"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testRequiredRolesMethodNameWildcardEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar.Test"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|conf2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|conf2
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin2
argument_list|(
name|conf1
argument_list|,
name|conf2
argument_list|)
decl_stmt|;
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"getBar"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"admin"
argument_list|)
argument_list|,
name|guard
operator|.
name|getRequiredRoles
argument_list|(
name|on
argument_list|,
literal|"test"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|17
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.Long"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ConfigurationAdmin
name|getMockConfigAdmin
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|configuration
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"jmx.acl.foo.bar.Test"
argument_list|)
expr_stmt|;
return|return
name|getMockConfigAdmin2
argument_list|(
name|configuration
argument_list|)
return|;
block|}
specifier|private
name|ConfigurationAdmin
name|getMockConfigAdmin2
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
modifier|...
name|configurations
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|List
argument_list|<
name|Configuration
argument_list|>
name|allConfigs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
range|:
name|configurations
control|)
block|{
name|Configuration
name|conf
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|conf
operator|.
name|getPid
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|String
operator|)
name|configuration
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|conf
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|configuration
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allConfigs
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|ConfigurationAdmin
name|ca
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Configuration
name|c
range|:
name|allConfigs
control|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|ca
operator|.
name|getConfiguration
argument_list|(
name|c
operator|.
name|getPid
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|c
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
name|EasyMock
operator|.
name|expect
argument_list|(
name|ca
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"(service.pid=jmx.acl*)"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|allConfigs
operator|.
name|toArray
argument_list|(
operator|new
name|Configuration
index|[]
block|{}
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ca
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"(service.pid=jmx.acl.whitelist)"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|allConfigs
operator|.
name|toArray
argument_list|(
operator|new
name|Configuration
index|[]
block|{}
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|ca
argument_list|)
expr_stmt|;
return|return
name|ca
return|;
block|}
specifier|public
name|void
name|testCurrentUserHasRole
parameter_list|()
throws|throws
name|Exception
block|{
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|assertTrue
argument_list|(
name|JaasHelper
operator|.
name|currentUserHasRole
argument_list|(
literal|"test"
argument_list|)
argument_list|)
block|;
name|assertFalse
argument_list|(
name|JaasHelper
operator|.
name|currentUserHasRole
argument_list|(
literal|"toast"
argument_list|)
argument_list|)
block|;
return|return
literal|null
return|;
block|}
block|)
function|;
block|}
end_class

begin_function
specifier|public
name|void
name|testCurrentUserHasCustomRole
parameter_list|()
throws|throws
name|Exception
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|LoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
operator|new
name|TestRolePrincipal
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lm
operator|.
name|login
argument_list|()
expr_stmt|;
name|lm
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|assertTrue
argument_list|(
name|JaasHelper
operator|.
name|currentUserHasRole
argument_list|(
name|TestRolePrincipal
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|":foo"
argument_list|)
argument_list|)
block|;
name|assertFalse
argument_list|(
name|JaasHelper
operator|.
name|currentUserHasRole
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
block|;
return|return
literal|null
return|;
block|}
block|)
function|;
end_function

begin_function
unit|}      public
name|void
name|testInvoke
parameter_list|()
throws|throws
name|Throwable
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"someMethod"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"someOtherMethod"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"editor"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Method
name|im
init|=
name|MBeanServer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"invoke"
argument_list|,
name|ObjectName
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
comment|// The following operation should not throw an exception
name|guard
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
literal|"someMethod"
block|,
operator|new
name|Object
index|[]
block|{
literal|"test"
block|}
block|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
literal|"someOtherMethod"
block|,
operator|new
name|Object
index|[]
block|{}
block|,
operator|new
name|String
index|[]
block|{}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have allowed the invocation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
literal|"somemethingElse"
block|,
operator|new
name|Object
index|[]
block|{}
block|,
operator|new
name|String
index|[]
block|{}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have allowed the invocation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
end_catch

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testGetAttributeIs
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Toast"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr2
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"TestAttr"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr3
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Butter"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|mbeanInfo
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbeanInfo
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|,
name|attr2
block|,
name|attr3
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbeanInfo
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mbeanInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getToast"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"isToast"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getTest*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"editor"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Method
name|im
init|=
name|MBeanServer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getAttribute"
argument_list|,
name|ObjectName
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The following operations should not throw an exception
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
literal|"Toast"
block|}
argument_list|)
expr_stmt|;
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
literal|"TestAttr"
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
literal|"Butter"
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have allowed the invocation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
end_catch

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testGetAttributes
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Toast"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr2
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"TestSomething"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr3
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Butter"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|mbeanInfo
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbeanInfo
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|,
name|attr2
block|,
name|attr3
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbeanInfo
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mbeanInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getToast"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getTest*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"editor"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Method
name|im
init|=
name|MBeanServer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getAttributes"
argument_list|,
name|ObjectName
operator|.
name|class
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
comment|// The following operations should not throw an exception
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|String
index|[]
block|{
literal|"Toast"
block|}
block|}
argument_list|)
expr_stmt|;
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|String
index|[]
block|{
literal|"TestSomething"
block|,
literal|"Toast"
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|String
index|[]
block|{
literal|"Butter"
block|,
literal|"Toast"
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have allowed the invocation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
end_catch

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testGetAttributes2
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Toast"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr2
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"TestSomething"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr3
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Butter"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanInfo
name|mbeanInfo
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbeanInfo
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|,
name|attr2
block|,
name|attr3
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbeanInfo
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mbeanInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"isT*"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getToast"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getButter"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getTest*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"editor"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Method
name|im
init|=
name|MBeanServer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getAttributes"
argument_list|,
name|ObjectName
operator|.
name|class
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
comment|// The following operations should not throw an exception
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|String
index|[]
block|{
literal|"Toast"
block|}
block|}
argument_list|)
expr_stmt|;
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|String
index|[]
block|{
literal|"TestSomething"
block|,
literal|"Toast"
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|String
index|[]
block|{
literal|"Butter"
block|,
literal|"Toast"
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have allowed the invocation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
end_catch

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testSetAttribute
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|a1
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Something"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|"Something Attribute"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|a2
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Value"
argument_list|,
literal|"long"
argument_list|,
literal|"Value Attribute"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|a3
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Other"
argument_list|,
literal|"boolean"
argument_list|,
literal|"Other Attribute"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
index|[]
name|attrs
init|=
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|a1
block|,
name|a2
block|,
name|a3
block|}
decl_stmt|;
name|MBeanInfo
name|mbeanInfo
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbeanInfo
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attrs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbeanInfo
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mbeanInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setSomething"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setValue*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"editor"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Method
name|im
init|=
name|MBeanServer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setAttribute"
argument_list|,
name|ObjectName
operator|.
name|class
argument_list|,
name|Attribute
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The following operations should not throw an exception
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|Attribute
argument_list|(
literal|"Something"
argument_list|,
literal|"v1"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|Attribute
argument_list|(
literal|"Value"
argument_list|,
literal|42L
argument_list|)
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|Attribute
argument_list|(
literal|"Other"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have allowed the invocation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|Attribute
argument_list|(
literal|"NonExistent"
argument_list|,
literal|"v4"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have found the MBean Declaration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
end_catch

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testSetAttributes
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|mba1
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Something"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|"Something Attribute"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|mba2
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Value"
argument_list|,
literal|"long"
argument_list|,
literal|"Value Attribute"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|mba3
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Other"
argument_list|,
literal|"boolean"
argument_list|,
literal|"Other Attribute"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
index|[]
name|attrs
init|=
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|mba1
block|,
name|mba2
block|,
name|mba3
block|}
decl_stmt|;
name|MBeanInfo
name|mbeanInfo
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbeanInfo
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|attrs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbeanInfo
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|mbeanInfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setSomething"
argument_list|,
literal|"editor"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setValue*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"editor"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Method
name|im
init|=
name|MBeanServer
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"setAttributes"
argument_list|,
name|ObjectName
operator|.
name|class
argument_list|,
name|AttributeList
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The following operations should not throw an exception
name|Attribute
name|a1
init|=
operator|new
name|Attribute
argument_list|(
literal|"Something"
argument_list|,
literal|"v1"
argument_list|)
decl_stmt|;
name|Attribute
name|a2
init|=
operator|new
name|Attribute
argument_list|(
literal|"Value"
argument_list|,
literal|42L
argument_list|)
decl_stmt|;
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|AttributeList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|a1
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|AttributeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a2
argument_list|,
name|a1
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|Attribute
name|a3
init|=
operator|new
name|Attribute
argument_list|(
literal|"Other"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
decl_stmt|;
try|try
block|{
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|AttributeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a1
argument_list|,
name|a3
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have allowed the invocation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|Attribute
name|a4
init|=
operator|new
name|Attribute
argument_list|(
literal|"NonExistent"
argument_list|,
literal|"v4"
argument_list|)
decl_stmt|;
name|guard
operator|.
name|invoke
argument_list|(
name|mbs
argument_list|,
name|im
argument_list|,
operator|new
name|Object
index|[]
block|{
name|on
block|,
operator|new
name|AttributeList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|a4
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have found the MBean Declaration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
end_catch

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMBean
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
specifier|final
name|ObjectName
name|on2
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Toast"
argument_list|)
decl_stmt|;
name|MBeanParameterInfo
index|[]
name|sig
init|=
operator|new
name|MBeanParameterInfo
index|[]
block|{
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg1"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|}
decl_stmt|;
name|MBeanOperationInfo
name|op
init|=
operator|new
name|MBeanOperationInfo
argument_list|(
literal|"doit"
argument_list|,
literal|""
argument_list|,
name|sig
argument_list|,
literal|"int"
argument_list|,
name|MBeanOperationInfo
operator|.
name|INFO
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{
name|op
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|MBeanInfo
name|info2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info2
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info2
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info2
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info2
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)[/11/]"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String,java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(int)[\"12\"]"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"do*"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on2
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMBean2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanParameterInfo
index|[]
name|sig
init|=
operator|new
name|MBeanParameterInfo
index|[]
block|{
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg1"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|}
decl_stmt|;
name|MBeanOperationInfo
name|op
init|=
operator|new
name|MBeanOperationInfo
argument_list|(
literal|"doit"
argument_list|,
literal|""
argument_list|,
name|sig
argument_list|,
literal|"int"
argument_list|,
name|MBeanOperationInfo
operator|.
name|INFO
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{
name|op
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)[/11/]"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String,java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(int)[\"12\"]"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"do*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeAnyOverload
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanParameterInfo
index|[]
name|sig
init|=
operator|new
name|MBeanParameterInfo
index|[]
block|{
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg1"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|}
decl_stmt|;
name|MBeanOperationInfo
name|op
init|=
operator|new
name|MBeanOperationInfo
argument_list|(
literal|"doit"
argument_list|,
literal|""
argument_list|,
name|sig
argument_list|,
literal|"int"
argument_list|,
name|MBeanOperationInfo
operator|.
name|INFO
argument_list|)
decl_stmt|;
name|MBeanParameterInfo
index|[]
name|sig2
init|=
operator|new
name|MBeanParameterInfo
index|[]
block|{
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg1"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|,
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg2"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|}
decl_stmt|;
name|MBeanOperationInfo
name|op2
init|=
operator|new
name|MBeanOperationInfo
argument_list|(
literal|"doit"
argument_list|,
literal|""
argument_list|,
name|sig2
argument_list|,
literal|"int"
argument_list|,
name|MBeanOperationInfo
operator|.
name|INFO
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{
name|op
block|,
name|op2
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String,java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeAnyOverload2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanParameterInfo
index|[]
name|sig
init|=
operator|new
name|MBeanParameterInfo
index|[]
block|{
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg1"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|}
decl_stmt|;
name|MBeanOperationInfo
name|op
init|=
operator|new
name|MBeanOperationInfo
argument_list|(
literal|"foit"
argument_list|,
literal|""
argument_list|,
name|sig
argument_list|,
literal|"int"
argument_list|,
name|MBeanOperationInfo
operator|.
name|INFO
argument_list|)
decl_stmt|;
name|MBeanParameterInfo
index|[]
name|sig2
init|=
operator|new
name|MBeanParameterInfo
index|[]
block|{
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg1"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|,
operator|new
name|MBeanParameterInfo
argument_list|(
literal|"arg2"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|)
block|}
decl_stmt|;
name|MBeanOperationInfo
name|op2
init|=
operator|new
name|MBeanOperationInfo
argument_list|(
literal|"doit"
argument_list|,
literal|""
argument_list|,
name|sig2
argument_list|,
literal|"int"
argument_list|,
name|MBeanOperationInfo
operator|.
name|INFO
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{
name|op
block|,
name|op2
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"foit(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String,java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeAnyOverload3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String,java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanGetAttributeAnyOverload
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Foo"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo(java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo()"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"getFoo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanGetAttributeAnyOverload2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Foo"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo()"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"getFoo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanGetAttributeAnyOverload3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Foo"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo(java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo()"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"isFoo()"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"isFoo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanGetAttributeAnyOverload4
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Foo"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getFoo()"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"isFoo()"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"isFoo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanSetAttributeAnyOverload
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Foo"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setFoo(java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setFoo(boolean)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"setFoo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanSetAttributeAnyOverload2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"Foo"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setFoo(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setFoo(boolean)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|,
literal|"setFoo"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMBeanGetter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"a1"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"is*"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMBeanGetter2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"a1"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"is*"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMBeanGetter3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"A1"
argument_list|,
literal|"boolean"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"getA1"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"is*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMBeanSetter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"A2"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setA2"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMBeanSetter2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|MBeanAttributeInfo
name|attr
init|=
operator|new
name|MBeanAttributeInfo
argument_list|(
literal|"A2"
argument_list|,
literal|"java.lang.String"
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MBeanInfo
name|info
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getOperations
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanOperationInfo
index|[]
block|{}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|info
operator|.
name|getAttributes
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|MBeanAttributeInfo
index|[]
block|{
name|attr
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|info
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|mbs
operator|.
name|getMBeanInfo
argument_list|(
name|on
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|info
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"get*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"setA2"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
name|on
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMethod
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)[/11/]"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String,java.lang.String)"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(int)[\"12\"]"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"do*"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"dodo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"uuuh"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testCanInvokeMethod2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=Test"
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)[/11/]"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String,java.lang.String)"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit(int)[\"12\"]"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"viewer"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|put
argument_list|(
literal|"do*"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|getMockConfigAdmin
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
specifier|final
name|KarafMBeanServerGuard
name|guard
init|=
operator|new
name|KarafMBeanServerGuard
argument_list|()
decl_stmt|;
name|guard
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
name|loginWithTestRoles
argument_list|(
literal|"viewer"
argument_list|)
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
call|(
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"doit"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"dodo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|guard
operator|.
name|canInvoke
argument_list|(
literal|null
argument_list|,
name|on
argument_list|,
literal|"uuuh"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      private
name|Subject
name|loginWithTestRoles
parameter_list|(
name|String
modifier|...
name|roles
parameter_list|)
throws|throws
name|LoginException
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|LoginModule
name|lm
init|=
operator|new
name|TestLoginModule
argument_list|(
name|roles
argument_list|)
decl_stmt|;
name|lm
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lm
operator|.
name|login
argument_list|()
expr_stmt|;
name|lm
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|subject
return|;
block|}
end_function

begin_class
specifier|private
specifier|static
class|class
name|TestLoginModule
implements|implements
name|LoginModule
block|{
specifier|private
specifier|final
name|Principal
index|[]
name|principals
decl_stmt|;
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|private
specifier|static
name|Principal
index|[]
name|getPrincipals
parameter_list|(
name|String
modifier|...
name|roles
parameter_list|)
block|{
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|role
range|:
name|roles
control|)
block|{
name|principals
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|principals
operator|.
name|toArray
argument_list|(
operator|new
name|Principal
index|[]
block|{}
argument_list|)
return|;
block|}
specifier|public
name|TestLoginModule
parameter_list|(
name|String
modifier|...
name|roles
parameter_list|)
block|{
name|this
argument_list|(
name|getPrincipals
argument_list|(
name|roles
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestLoginModule
parameter_list|(
name|Principal
modifier|...
name|principals
parameter_list|)
block|{
name|this
operator|.
name|principals
operator|=
name|principals
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
block|}
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|sp
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|sp
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|principals
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|logout
parameter_list|()
throws|throws
name|LoginException
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|sp
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
name|sp
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|principals
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

unit|}
end_unit

