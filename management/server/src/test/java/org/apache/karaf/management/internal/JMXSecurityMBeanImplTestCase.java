begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|KarafMBeanServerGuard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|JMXSecurityMBeanImplTestCase
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testMBeanServerAccessors
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|mbs
argument_list|,
name|mb
operator|.
name|getMBeanServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCanInvokeMBean
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|String
name|objectName
init|=
literal|"foo.bar.testing:type=SomeMBean"
decl_stmt|;
name|KarafMBeanServerGuard
name|testGuard
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|KarafMBeanServerGuard
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setGuard
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mb
operator|.
name|canInvoke
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCanInvokeMBean2
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|String
name|objectName
init|=
literal|"foo.bar.testing:type=SomeMBean"
decl_stmt|;
name|KarafMBeanServerGuard
name|testGuard
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|KarafMBeanServerGuard
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setGuard
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mb
operator|.
name|canInvoke
argument_list|(
name|objectName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCanInvokeMBeanThrowsException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|String
name|objectName
init|=
literal|"foo.bar.testing:type=SomeMBean"
decl_stmt|;
name|KarafMBeanServerGuard
name|testGuard
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|KarafMBeanServerGuard
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setGuard
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|mb
operator|.
name|canInvoke
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// good!
block|}
block|}
specifier|public
name|void
name|testCanInvokeMBeanNoGuard
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mb
operator|.
name|canInvoke
argument_list|(
literal|"foo.bar.testing:type=SomeMBean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCanInvokeMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|String
name|objectName
init|=
literal|"foo.bar.testing:type=SomeMBean"
decl_stmt|;
name|KarafMBeanServerGuard
name|testGuard
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|KarafMBeanServerGuard
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|la
init|=
operator|new
name|String
index|[]
block|{
literal|"long"
block|}
decl_stmt|;
name|String
index|[]
name|sa
init|=
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
decl_stmt|;
name|String
index|[]
name|sa2
init|=
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|,
literal|"java.lang.String"
block|}
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|,
literal|"testMethod"
argument_list|,
name|la
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|,
literal|"testMethod"
argument_list|,
name|sa
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|,
literal|"otherMethod"
argument_list|,
name|sa2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setGuard
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mb
operator|.
name|canInvoke
argument_list|(
name|objectName
argument_list|,
literal|"testMethod"
argument_list|,
name|la
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mb
operator|.
name|canInvoke
argument_list|(
name|objectName
argument_list|,
literal|"testMethod"
argument_list|,
name|sa
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mb
operator|.
name|canInvoke
argument_list|(
name|objectName
argument_list|,
literal|"otherMethod"
argument_list|,
name|sa2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCanInvokeMethodException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|String
name|objectName
init|=
literal|"foo.bar.testing:type=SomeMBean"
decl_stmt|;
name|KarafMBeanServerGuard
name|testGuard
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|KarafMBeanServerGuard
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|ea
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|mbs
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|,
literal|"testMethod"
argument_list|,
name|ea
argument_list|)
argument_list|)
operator|.
name|andThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setGuard
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|mb
operator|.
name|canInvoke
argument_list|(
name|objectName
argument_list|,
literal|"testMethod"
argument_list|,
name|ea
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// good
block|}
block|}
specifier|public
name|void
name|testCanInvokeMethodNoGuard
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mb
operator|.
name|canInvoke
argument_list|(
literal|"foo.bar.testing:type=SomeMBean"
argument_list|,
literal|"someMethod"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCanInvokeBulk
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|KarafMBeanServerGuard
name|testGuard
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|KarafMBeanServerGuard
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|objectName
init|=
literal|"foo.bar.testing:type=SomeMBean"
decl_stmt|;
specifier|final
name|String
index|[]
name|la
init|=
operator|new
name|String
index|[]
block|{
literal|"long"
block|}
decl_stmt|;
specifier|final
name|String
index|[]
name|sa
init|=
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|mbs
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"testMethod"
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|aryEq
argument_list|(
name|la
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|mbs
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"testMethod"
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|aryEq
argument_list|(
name|sa
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|mbs
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
literal|"otherMethod"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|String
name|objectName2
init|=
literal|"foo.bar.testing:type=SomeOtherMBean"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|mbs
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|objectName2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|String
name|objectName3
init|=
literal|"foo.bar.foo.testing:type=SomeOtherMBean"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|testGuard
operator|.
name|canInvoke
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|mbs
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|objectName3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|JMXSecurityMBeanImpl
name|mb
init|=
operator|new
name|JMXSecurityMBeanImpl
argument_list|()
decl_stmt|;
name|mb
operator|.
name|setMBeanServer
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|mb
operator|.
name|setGuard
argument_list|(
name|testGuard
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|query
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|query
operator|.
name|put
argument_list|(
name|objectName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"otherMethod"
argument_list|,
literal|"testMethod(long)"
argument_list|,
literal|"testMethod(java.lang.String)"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|put
argument_list|(
name|objectName2
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|put
argument_list|(
name|objectName3
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|TabularData
name|result
init|=
name|mb
operator|.
name|canInvoke
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompositeData
name|cd
init|=
name|result
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|objectName
block|,
literal|"testMethod(long)"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|objectName
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testMethod(long)"
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cd
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd2
init|=
name|result
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|objectName
block|,
literal|"testMethod(java.lang.String)"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|objectName
argument_list|,
name|cd2
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"testMethod(java.lang.String)"
argument_list|,
name|cd2
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|cd2
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd3
init|=
name|result
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|objectName
block|,
literal|"otherMethod"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|objectName
argument_list|,
name|cd3
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"otherMethod"
argument_list|,
name|cd3
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cd3
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd4
init|=
name|result
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|objectName2
block|,
literal|""
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|objectName2
argument_list|,
name|cd4
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|cd4
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cd4
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd5
init|=
name|result
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|objectName3
block|,
literal|""
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|objectName3
argument_list|,
name|cd5
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|cd5
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|cd5
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

