begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|config
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|config
operator|.
name|ConfigMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of the ConfigMBean.  */
end_comment

begin_class
specifier|public
class|class
name|ConfigMBeanImpl
extends|extends
name|StandardMBean
implements|implements
name|ConfigMBean
block|{
specifier|private
name|ConfigurationAdmin
name|configurationAdmin
decl_stmt|;
specifier|public
name|ConfigurationAdmin
name|getConfigurationAdmin
parameter_list|()
block|{
return|return
name|this
operator|.
name|configurationAdmin
return|;
block|}
specifier|public
name|void
name|setConfigurationAdmin
parameter_list|(
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|)
block|{
name|this
operator|.
name|configurationAdmin
operator|=
name|configurationAdmin
expr_stmt|;
block|}
specifier|public
name|ConfigMBeanImpl
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|ConfigMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|list
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
index|[]
name|configurations
init|=
name|configurationAdmin
operator|.
name|listConfigurations
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pids
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configurations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pids
operator|.
name|add
argument_list|(
name|configurations
index|[
name|i
index|]
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pids
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|pids
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

