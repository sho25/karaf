begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  *  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|web
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|web
operator|.
name|WebMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Web MBean implementation.  */
end_comment

begin_class
specifier|public
class|class
name|WebMBeanImpl
extends|extends
name|StandardMBean
implements|implements
name|WebMBean
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|WebMBeanImpl
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|WebMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TabularData
name|getWebBundles
parameter_list|()
throws|throws
name|Exception
block|{
name|CompositeType
name|webType
init|=
operator|new
name|CompositeType
argument_list|(
literal|"Web Bundle"
argument_list|,
literal|"An OSGi Web bundle"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID"
block|,
literal|"Name"
block|,
literal|"Context"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID of the bundle"
block|,
literal|"Name of the bundle"
block|,
literal|"Web Context"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
decl_stmt|;
name|TabularType
name|tableType
init|=
operator|new
name|TabularType
argument_list|(
literal|"Web Bundles"
argument_list|,
literal|"Table of web bundles"
argument_list|,
name|webType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID"
block|}
argument_list|)
decl_stmt|;
name|TabularData
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tableType
argument_list|)
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|String
name|webContext
init|=
operator|(
name|String
operator|)
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"Web-ContextPath"
argument_list|)
decl_stmt|;
if|if
condition|(
name|webContext
operator|==
literal|null
condition|)
name|webContext
operator|=
operator|(
name|String
operator|)
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"Webapp-Context"
argument_list|)
expr_stmt|;
if|if
condition|(
name|webContext
operator|==
literal|null
condition|)
continue|continue;
name|webContext
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|webContext
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|webContext
operator|=
literal|"/"
operator|+
name|webContext
expr_stmt|;
block|}
name|String
name|name
init|=
operator|(
name|String
operator|)
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_NAME
argument_list|)
decl_stmt|;
name|name
operator|=
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
name|bundle
operator|.
name|getSymbolicName
argument_list|()
else|:
name|name
expr_stmt|;
comment|// If there is no symbolic name, resort to location.
name|name
operator|=
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
name|bundle
operator|.
name|getLocation
argument_list|()
else|:
name|name
expr_stmt|;
name|CompositeData
name|data
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|webType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID"
block|,
literal|"Name"
block|,
literal|"Context"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|bundle
operator|.
name|getBundleId
argument_list|()
block|,
name|name
block|,
name|webContext
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
block|}
end_class

end_unit

