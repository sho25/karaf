begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|bundles
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Bundles selector which is able to get a bundle by ID, ID range, name, and version.  */
end_comment

begin_class
specifier|public
class|class
name|BundlesSelector
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|BundlesSelector
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
comment|/**      * Select bundles with ID, ID range, name, and version.      *      * @param bundleId the bundles ID for selection.      * @return the corresponding bundles found.      * @throws Exception in case of selection      */
specifier|public
name|List
argument_list|<
name|Bundle
argument_list|>
name|selectBundles
parameter_list|(
name|String
name|bundleId
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundleId
operator|!=
literal|null
operator|&&
operator|!
name|bundleId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// bundle ID is a number
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\d+$"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|Bundle
name|bundle
init|=
name|this
operator|.
name|getBundleById
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
return|return
name|bundles
return|;
block|}
comment|// bundle is an ID range
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)-(\\d+)$"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|bundleId
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|bundleId
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
name|long
name|startId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|bundleId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|stopId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|bundleId
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|startId
operator|<
name|stopId
condition|)
block|{
for|for
control|(
name|long
name|i
init|=
name|startId
init|;
name|i
operator|<=
name|stopId
condition|;
name|i
operator|++
control|)
block|{
name|Bundle
name|bundle
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bundles
return|;
block|}
comment|// bundle ID is name/version
name|int
name|index
init|=
name|bundleId
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// user has provided name and version
return|return
name|this
operator|.
name|getBundleByNameAndVersion
argument_list|(
name|bundleId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
name|bundleId
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// user has provided only name
return|return
name|this
operator|.
name|getBundleByName
argument_list|(
name|bundleId
argument_list|)
return|;
block|}
block|}
return|return
name|bundles
return|;
block|}
comment|/**      * Get a bundle with the bundle ID.      *      * @param id the bundle ID.      * @return the corresponding bundle.      */
specifier|private
name|Bundle
name|getBundleById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
literal|null
decl_stmt|;
try|try
block|{
name|long
name|idNumber
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|bundle
operator|=
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|idNumber
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|bundle
return|;
block|}
comment|/**      * Get a bundles list with the name or symbolic name matching the pattern.      *      * @param name the bundle name or symbolic name pattern to match.      * @return the bundles list.      */
specifier|private
name|List
argument_list|<
name|Bundle
argument_list|>
name|getBundleByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getBundleByNameAndVersion
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Get a bundles list with the name or symbolic name matching the name pattern and version matching the version pattern.      *      * @param name    the bundle name or symbolic name regex to match.      * @param version the bundle version regex to match.      * @return the bundles list.      */
specifier|private
name|List
argument_list|<
name|Bundle
argument_list|>
name|getBundleByNameAndVersion
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|Pattern
name|namePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|bundleSymbolicName
init|=
name|bundles
index|[
name|i
index|]
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
comment|// skip bundles without Bundle-SymbolicName header
if|if
condition|(
name|bundleSymbolicName
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Matcher
name|symbolicNameMatcher
init|=
name|namePattern
operator|.
name|matcher
argument_list|(
name|bundleSymbolicName
argument_list|)
decl_stmt|;
name|Matcher
name|nameMatcher
init|=
literal|null
decl_stmt|;
name|String
name|bundleName
init|=
operator|(
name|String
operator|)
name|bundles
index|[
name|i
index|]
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleName
operator|!=
literal|null
condition|)
block|{
name|nameMatcher
operator|=
name|namePattern
operator|.
name|matcher
argument_list|(
name|bundleName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|String
name|bundleVersion
init|=
operator|(
name|String
operator|)
name|bundles
index|[
name|i
index|]
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleVersion
operator|!=
literal|null
condition|)
block|{
name|boolean
name|nameMatch
init|=
operator|(
name|nameMatcher
operator|!=
literal|null
operator|&&
name|nameMatcher
operator|.
name|find
argument_list|()
operator|)
operator|||
name|symbolicNameMatcher
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameMatch
condition|)
block|{
name|Pattern
name|versionPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|Matcher
name|versionMatcher
init|=
name|versionPattern
operator|.
name|matcher
argument_list|(
name|bundleVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|bundles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|boolean
name|nameMatch
init|=
operator|(
name|nameMatcher
operator|!=
literal|null
operator|&&
name|nameMatcher
operator|.
name|find
argument_list|()
operator|)
operator|||
name|symbolicNameMatcher
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameMatch
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|bundles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

