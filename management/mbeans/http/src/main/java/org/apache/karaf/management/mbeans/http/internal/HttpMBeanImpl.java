begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|http
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|http
operator|.
name|HttpMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|web
operator|.
name|service
operator|.
name|spi
operator|.
name|ServletEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|web
operator|.
name|service
operator|.
name|spi
operator|.
name|WebEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Implementation of the HTTP MBean.  */
end_comment

begin_class
specifier|public
class|class
name|HttpMBeanImpl
extends|extends
name|StandardMBean
implements|implements
name|HttpMBean
block|{
specifier|private
name|ServletEventHandler
name|servletEventHandler
decl_stmt|;
specifier|public
name|HttpMBeanImpl
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|HttpMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TabularData
name|list
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|ServletEvent
argument_list|>
name|events
init|=
name|servletEventHandler
operator|.
name|getServletEvents
argument_list|()
decl_stmt|;
name|CompositeType
name|servletType
init|=
operator|new
name|CompositeType
argument_list|(
literal|"Servlet"
argument_list|,
literal|"HTTP Servlet"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID"
block|,
literal|"Servlet"
block|,
literal|"Servlet Name"
block|,
literal|"State"
block|,
literal|"Alias"
block|,
literal|"URL"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID of the servlet"
block|,
literal|"Class name of the servlet"
block|,
literal|"Servlet Name"
block|,
literal|"Current state of the servlet"
block|,
literal|"Aliases of the servlet"
block|,
literal|"URL of the servlet"
block|}
argument_list|,
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
argument_list|)
decl_stmt|;
name|TabularType
name|tableType
init|=
operator|new
name|TabularType
argument_list|(
literal|"Servlets"
argument_list|,
literal|"Table of all HTTP servlets"
argument_list|,
name|servletType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID"
block|}
argument_list|)
decl_stmt|;
name|TabularData
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tableType
argument_list|)
decl_stmt|;
for|for
control|(
name|ServletEvent
name|event
range|:
name|events
control|)
block|{
name|Servlet
name|servlet
init|=
name|event
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|String
name|servletClassName
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|servlet
operator|!=
literal|null
condition|)
block|{
name|servletClassName
operator|=
name|servlet
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|servletClassName
operator|=
name|servletClassName
operator|.
name|substring
argument_list|(
name|servletClassName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|,
name|servletClassName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|servletName
init|=
name|event
operator|.
name|getServletName
argument_list|()
operator|!=
literal|null
condition|?
name|event
operator|.
name|getServletName
argument_list|()
else|:
literal|" "
decl_stmt|;
if|if
condition|(
name|servletName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|servletName
operator|=
name|servletName
operator|.
name|substring
argument_list|(
name|servletName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|,
name|servletName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|alias
init|=
name|event
operator|.
name|getAlias
argument_list|()
operator|!=
literal|null
condition|?
name|event
operator|.
name|getAlias
argument_list|()
else|:
literal|" "
decl_stmt|;
name|String
index|[]
name|urls
init|=
operator|(
name|String
index|[]
operator|)
operator|(
name|event
operator|.
name|getUrlParameter
argument_list|()
operator|!=
literal|null
condition|?
name|event
operator|.
name|getUrlParameter
argument_list|()
else|:
operator|new
name|String
index|[]
block|{
literal|""
block|}
operator|)
decl_stmt|;
name|CompositeData
name|data
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|servletType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ID"
block|,
literal|"Servlet"
block|,
literal|"Servlet Name"
block|,
literal|"State"
block|,
literal|"Alias"
block|,
literal|"URL"
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|event
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
block|,
name|servletClassName
block|,
name|servletName
block|,
name|getStateString
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
block|,
name|alias
block|,
name|Arrays
operator|.
name|toString
argument_list|(
name|urls
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
specifier|private
name|String
name|getStateString
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|WebEvent
operator|.
name|DEPLOYING
case|:
return|return
literal|"Deploying  "
return|;
case|case
name|WebEvent
operator|.
name|DEPLOYED
case|:
return|return
literal|"Deployed   "
return|;
case|case
name|WebEvent
operator|.
name|UNDEPLOYING
case|:
return|return
literal|"Undeploying"
return|;
case|case
name|WebEvent
operator|.
name|UNDEPLOYED
case|:
return|return
literal|"Undeployed "
return|;
case|case
name|WebEvent
operator|.
name|FAILED
case|:
return|return
literal|"Failed     "
return|;
case|case
name|WebEvent
operator|.
name|WAITING
case|:
return|return
literal|"Waiting    "
return|;
default|default:
return|return
literal|"Failed     "
return|;
block|}
block|}
specifier|public
name|ServletEventHandler
name|getServletEventHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|servletEventHandler
return|;
block|}
specifier|public
name|void
name|setServletEventHandler
parameter_list|(
name|ServletEventHandler
name|servletEventHandler
parameter_list|)
block|{
name|this
operator|.
name|servletEventHandler
operator|=
name|servletEventHandler
expr_stmt|;
block|}
block|}
end_class

end_unit

