begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|dev
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|dev
operator|.
name|DevMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_comment
comment|/**  * Implementation of the DevMBean.  */
end_comment

begin_class
specifier|public
class|class
name|DevMBeanImpl
extends|extends
name|StandardMBean
implements|implements
name|DevMBean
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|DevMBeanImpl
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|DevMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|String
name|framework
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"felix"
argument_list|)
condition|)
block|{
return|return
literal|"Felix"
return|;
block|}
else|else
block|{
return|return
literal|"Equinox"
return|;
block|}
block|}
specifier|public
name|void
name|frameworkOptions
parameter_list|(
name|boolean
name|debug
parameter_list|,
name|String
name|framework
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|,
literal|"etc/config.properties"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|framework
operator|!=
literal|null
condition|)
block|{
comment|// swtich the framework is use
if|if
condition|(
operator|!
name|framework
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"felix"
argument_list|)
operator|&&
operator|!
name|framework
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"equinox"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported framework "
operator|+
name|framework
argument_list|)
throw|;
block|}
name|properties
operator|.
name|put
argument_list|(
literal|"karaf.framework"
argument_list|,
name|framework
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"felix"
argument_list|)
condition|)
block|{
name|framework
operator|=
literal|"felix"
expr_stmt|;
block|}
else|else
block|{
name|framework
operator|=
literal|"equinox"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|framework
operator|.
name|equals
argument_list|(
literal|"felix"
argument_list|)
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"felix.log.level"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"osgi.debug"
argument_list|,
literal|"etc/equinox-debug.properties"
argument_list|)
expr_stmt|;
comment|// TODO populate the equinox-debug.properties file with the one provided in shell/dev module
block|}
name|properties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|restart
parameter_list|(
name|boolean
name|clean
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart.clean"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|clean
argument_list|)
argument_list|)
expr_stmt|;
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

