begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|packages
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|mbeans
operator|.
name|packages
operator|.
name|PackagesMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|ExportedPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|PackageAdmin
import|;
end_import

begin_comment
comment|/**  * Packages MBean implementation.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|PackagesMBeanImpl
extends|extends
name|StandardMBean
implements|implements
name|PackagesMBean
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|PackagesMBeanImpl
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|PackagesMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExportedPackages
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getExportedPackages
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getImportedPackages
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getImportedPackages
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExportedPackages
parameter_list|(
name|long
name|bundleId
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|exportPackages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceReference
name|ref
init|=
name|bundleContext
operator|.
name|getServiceReference
argument_list|(
name|PackageAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PackageAdmin is not available"
argument_list|)
throw|;
block|}
name|PackageAdmin
name|packageAdmin
init|=
operator|(
name|PackageAdmin
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|packageAdmin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PackageAdmin is not available"
argument_list|)
throw|;
block|}
name|Bundle
index|[]
name|bundles
decl_stmt|;
if|if
condition|(
name|bundleId
operator|>=
literal|0
condition|)
block|{
name|bundles
operator|=
operator|new
name|Bundle
index|[]
block|{
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|bundles
operator|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|ExportedPackage
index|[]
name|packages
init|=
name|packageAdmin
operator|.
name|getExportedPackages
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|packages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExportedPackage
name|exportedPackage
range|:
name|packages
control|)
block|{
name|exportPackages
operator|.
name|add
argument_list|(
name|exportedPackage
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|exportPackages
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getImportedPackages
parameter_list|(
name|long
name|bundleId
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|importPackages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceReference
name|ref
init|=
name|bundleContext
operator|.
name|getServiceReference
argument_list|(
name|PackageAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PackageAdmin is not available"
argument_list|)
throw|;
block|}
name|PackageAdmin
name|packageAdmin
init|=
operator|(
name|PackageAdmin
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|packageAdmin
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"PackageAdmin is not available"
argument_list|)
throw|;
block|}
name|ExportedPackage
index|[]
name|exportedPackages
decl_stmt|;
if|if
condition|(
name|bundleId
operator|>=
literal|0
condition|)
block|{
name|exportedPackages
operator|=
name|packageAdmin
operator|.
name|getExportedPackages
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|bundleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exportedPackages
operator|=
name|packageAdmin
operator|.
name|getExportedPackages
argument_list|(
operator|(
name|Bundle
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exportedPackages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExportedPackage
name|exportedPackage
range|:
name|exportedPackages
control|)
block|{
name|Bundle
index|[]
name|bundles
init|=
name|exportedPackage
operator|.
name|getImportingBundles
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundles
operator|!=
literal|null
operator|&&
name|bundles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|importPackages
operator|.
name|add
argument_list|(
name|exportedPackage
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|importPackages
return|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
block|}
end_class

end_unit

