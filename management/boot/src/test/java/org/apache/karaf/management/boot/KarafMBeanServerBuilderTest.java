begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|KarafMBeanServerBuilderTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testMBeanServerBuilderBlocking
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|KarafMBeanServerBuilder
name|mbsb
init|=
operator|new
name|KarafMBeanServerBuilder
argument_list|()
decl_stmt|;
name|MBeanServer
name|kmbs
init|=
name|mbsb
operator|.
name|newMBeanServer
argument_list|(
literal|"test"
argument_list|,
name|mbs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|handlerArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|InvocationHandler
name|guard
init|=
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|handlerArgs
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|handlerArgs
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|handlerArgs
operator|.
name|add
argument_list|(
name|args
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Access Denied"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|KarafMBeanServerBuilder
operator|.
name|setGuard
argument_list|(
name|guard
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|handlerArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=TestObject"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// obtain a JMX attribute
name|kmbs
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"myAttr"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have access denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|handlerArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|kmbs
argument_list|,
name|handlerArgs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getAttribute"
argument_list|,
operator|(
operator|(
name|Method
operator|)
name|handlerArgs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|args
init|=
operator|(
name|Object
index|[]
operator|)
name|handlerArgs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|on
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myAttr"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// obtain a number of JMX attributes
name|kmbs
operator|.
name|getAttributes
argument_list|(
name|on
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|,
literal|"bar"
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have access denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
comment|// set a JMX attribute
name|kmbs
operator|.
name|getAttributes
argument_list|(
name|on
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"goo"
block|,
literal|"far"
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have access denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
comment|// set a number of JMX attributes
name|kmbs
operator|.
name|setAttributes
argument_list|(
name|on
argument_list|,
operator|new
name|AttributeList
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have access denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
comment|// mimic a JMX method invocation
name|kmbs
operator|.
name|setAttributes
argument_list|(
name|on
argument_list|,
operator|new
name|AttributeList
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have access denied"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
comment|// try some MBeanServer operations that are not guarded
name|assertTrue
argument_list|(
name|kmbs
operator|.
name|getDomains
argument_list|()
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kmbs
operator|.
name|getMBeanCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kmbs
operator|.
name|getDefaultDomain
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMBeanServerBuilderNonBlocking
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mbs
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MBeanServer
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|mbs
argument_list|)
expr_stmt|;
name|KarafMBeanServerBuilder
name|mbsb
init|=
operator|new
name|KarafMBeanServerBuilder
argument_list|()
decl_stmt|;
name|MBeanServer
name|kmbs
init|=
name|mbsb
operator|.
name|newMBeanServer
argument_list|(
literal|"test"
argument_list|,
name|mbs
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|handlerArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|InvocationHandler
name|guard
init|=
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|handlerArgs
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|handlerArgs
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|handlerArgs
operator|.
name|add
argument_list|(
name|args
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|KarafMBeanServerBuilder
operator|.
name|setGuard
argument_list|(
name|guard
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|handlerArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|on
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
literal|"foo.bar:type=TestObject"
argument_list|)
decl_stmt|;
try|try
block|{
name|kmbs
operator|.
name|getAttribute
argument_list|(
name|on
argument_list|,
literal|"myAttr"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|th
init|=
name|getInnermostException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected exception as the object in question is not registered with the MBeanServer"
argument_list|,
name|th
operator|instanceof
name|InstanceNotFoundException
argument_list|)
expr_stmt|;
comment|// good
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|handlerArgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|kmbs
argument_list|,
name|handlerArgs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getAttribute"
argument_list|,
operator|(
operator|(
name|Method
operator|)
name|handlerArgs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
index|[]
name|args
init|=
operator|(
name|Object
index|[]
operator|)
name|handlerArgs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|on
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myAttr"
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Throwable
name|getInnermostException
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
if|if
condition|(
name|th
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|getInnermostException
argument_list|(
name|th
operator|.
name|getCause
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|th
return|;
block|}
block|}
block|}
end_class

end_unit

