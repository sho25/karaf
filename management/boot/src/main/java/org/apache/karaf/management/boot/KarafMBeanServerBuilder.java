begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|management
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerDelegate
import|;
end_import

begin_class
specifier|public
class|class
name|KarafMBeanServerBuilder
extends|extends
name|MBeanServerBuilder
block|{
specifier|private
specifier|static
specifier|volatile
name|InvocationHandler
name|guard
decl_stmt|;
specifier|public
specifier|static
name|InvocationHandler
name|getGuard
parameter_list|()
block|{
return|return
name|guard
return|;
block|}
specifier|public
specifier|static
name|void
name|setGuard
parameter_list|(
name|InvocationHandler
name|guardHandler
parameter_list|)
block|{
name|guard
operator|=
name|guardHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MBeanServer
name|newMBeanServer
parameter_list|(
name|String
name|defaultDomain
parameter_list|,
name|MBeanServer
name|outer
parameter_list|,
name|MBeanServerDelegate
name|delegate
parameter_list|)
block|{
name|InvocationHandler
name|handler
init|=
operator|new
name|MBeanInvocationHandler
argument_list|(
name|super
operator|.
name|newMBeanServer
argument_list|(
name|defaultDomain
argument_list|,
name|outer
argument_list|,
name|delegate
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|MBeanServer
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|MBeanServer
operator|.
name|class
block|}
argument_list|,
name|handler
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|MBeanInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|MBeanServer
name|wrapped
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|guarded
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"invoke"
argument_list|,
literal|"getAttribute"
argument_list|,
literal|"getAttributes"
argument_list|,
literal|"setAttribute"
argument_list|,
literal|"setAttributes"
argument_list|)
argument_list|)
decl_stmt|;
name|MBeanInvocationHandler
parameter_list|(
name|MBeanServer
name|mbeanServer
parameter_list|)
block|{
name|wrapped
operator|=
name|mbeanServer
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|guarded
operator|.
name|contains
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|KarafMBeanServerBuilder
operator|.
name|guard
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"KarafMBeanServerBuilder not initialized"
argument_list|)
throw|;
block|}
name|guard
operator|.
name|invoke
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|wrapped
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
throw|throw
name|ite
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

