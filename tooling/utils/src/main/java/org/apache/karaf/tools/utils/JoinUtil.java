begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tools
operator|.
name|utils
package|;
end_package

begin_comment
comment|/**  * Join strings with commas. This has some reflection to be usable with  * the pax-exam  */
end_comment

begin_class
specifier|public
class|class
name|JoinUtil
block|{
specifier|private
name|JoinUtil
parameter_list|()
block|{     }
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|String
modifier|...
name|options
parameter_list|)
block|{
return|return
name|join
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|options
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|join
parameter_list|(
name|Object
index|[]
name|options
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|option
range|:
name|options
control|)
block|{
name|String
name|value
init|=
name|getStringValue
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|value
operator|.
name|startsWith
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
name|String
name|getStringValue
parameter_list|(
name|Object
name|option
parameter_list|)
block|{
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
elseif|else
if|if
condition|(
name|option
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|option
return|;
block|}
elseif|else
if|if
condition|(
name|option
operator|instanceof
name|JoinableValue
condition|)
block|{
return|return
operator|(
operator|(
name|JoinableValue
argument_list|<
name|String
argument_list|>
operator|)
name|option
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
block|}
end_class

end_unit

