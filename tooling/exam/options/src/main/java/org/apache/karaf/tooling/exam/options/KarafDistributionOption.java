begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|LogLevelOption
operator|.
name|LogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|extra
operator|.
name|VMOption
import|;
end_import

begin_comment
comment|/**  * Final class to provide an easy and intuitive way to configure the specific karaf distribution options.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|KarafDistributionOption
block|{
comment|/**      * Per default the folder pax-exam is deleting the test directories after a test is over. If you want to keep those      * directories (for later evaluation) simply set this option.      */
specifier|public
specifier|static
name|Option
name|keepRuntimeFolder
parameter_list|()
block|{
return|return
operator|new
name|KeepRuntimeFolderOption
argument_list|()
return|;
block|}
comment|/**      * The karaf pax-logging configuration is typically not a file manipulated very often. Therefore we take the freedom      * of adding a console logger and changing the log level directly. IF you like to configure the file manually (or      * had so in your distribution) add this option to avoid any automatic modifications to this file!      */
specifier|public
specifier|static
name|Option
name|doNotModifyLogConfiguration
parameter_list|()
block|{
return|return
operator|new
name|DoNotModifyLogOption
argument_list|()
return|;
block|}
comment|/**      * Returns an option object which can be used to configure the -Dkaraf.startLocalConsole and      * -Dkaraf.startRemoteShell options. By default both are true.      */
specifier|public
specifier|static
name|KarafDistributionConfigurationConsoleOption
name|configureConsole
parameter_list|()
block|{
return|return
operator|new
name|KarafDistributionConfigurationConsoleOption
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Configures which distribution options to use. Relevant are the frameworkURL, the frameworkName and the Karaf      * version since all of those params are relevant to decide which wrapper configurations to use.      */
specifier|public
specifier|static
name|KarafDistributionBaseConfigurationOption
name|karafDistributionConfiguration
parameter_list|(
name|String
name|frameworkURL
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|karafVersion
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationOption
argument_list|(
name|frameworkURL
argument_list|,
name|name
argument_list|,
name|karafVersion
argument_list|)
return|;
block|}
comment|/**      * Configures which distribution options to use. Relevant are the frameworkURL, the frameworkName and the Karaf      * version since all of those params are relevant to decide which wrapper configurations to use.      */
specifier|public
specifier|static
name|KarafDistributionBaseConfigurationOption
name|karafDistributionConfiguration
parameter_list|()
block|{
return|return
operator|new
name|KarafDistributionConfigurationOption
argument_list|()
return|;
block|}
comment|/**      * This option allows to configure each configuration fille based on the karaf.home location. The value is "put".      * Which means it is either replaced or added.      *      * If you like to extend an option (e.g. make a=b to a=b,c) please make use of the      * {@link KarafDistributionConfigurationFileExtendOption}.      */
specifier|public
specifier|static
name|Option
name|editConfigurationFilePut
parameter_list|(
name|String
name|configurationFilePath
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationFilePutOption
argument_list|(
name|configurationFilePath
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * This option allows to configure each configuration fille based on the karaf.home location. The value is "put".      * Which means it is either replaced or added.      *      * If you like to extend an option (e.g. make a=b to a=b,c) please make use of the      * {@link KarafDistributionConfigurationFileExtendOption}.      */
specifier|public
specifier|static
name|Option
name|editConfigurationFilePut
parameter_list|(
name|ConfigurationPointer
name|configurationPointer
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationFilePutOption
argument_list|(
name|configurationPointer
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * This option allows to configure each configuration file based on the karaf.home location. The value is "put"      * which means it is either replaced or added. For simpler configuration you can add a file source. If you want to      * put all values from this file do not configure any keysToUseFromSource; otherwise define them to use only those      * specific values.      */
specifier|public
specifier|static
name|Option
index|[]
name|editConfigurationFilePut
parameter_list|(
specifier|final
name|String
name|configurationFilePath
parameter_list|,
name|File
name|source
parameter_list|,
name|String
modifier|...
name|keysToUseFromSource
parameter_list|)
block|{
return|return
name|createOptionListFromFile
argument_list|(
name|source
argument_list|,
operator|new
name|FileOptionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Option
name|createOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationFilePutOption
argument_list|(
name|configurationFilePath
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
argument_list|,
name|keysToUseFromSource
argument_list|)
return|;
block|}
specifier|private
specifier|static
interface|interface
name|FileOptionFactory
block|{
name|Option
name|createOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
name|Option
index|[]
name|createOptionListFromFile
parameter_list|(
name|File
name|source
parameter_list|,
name|FileOptionFactory
name|optionFactory
parameter_list|,
name|String
modifier|...
name|keysToUseFromSource
parameter_list|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<
name|Option
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|keysToUseFromSource
operator|==
literal|null
operator|||
name|keysToUseFromSource
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|keySet
init|=
name|props
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|keySet
control|)
block|{
name|Object
name|value
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
name|optionFactory
operator|.
name|createOption
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|key
range|:
name|keysToUseFromSource
control|)
block|{
name|Object
name|value
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
name|optionFactory
operator|.
name|createOption
argument_list|(
name|key
argument_list|,
operator|(
name|String
operator|)
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|options
operator|.
name|toArray
argument_list|(
operator|new
name|Option
index|[]
block|{}
argument_list|)
return|;
block|}
comment|/**      * This option allows to extend configurations in each configuration file based on the karaf.home location. The      * value extends the current value (e.g. a=b to a=a,b) instead of replacing it. If there is no current value it is      * added.      *      * If you would like to have add or replace functionality please use the      * {@link KarafDistributionConfigurationFilePutOption} instead.      */
specifier|public
specifier|static
name|Option
name|editConfigurationFileExtend
parameter_list|(
name|String
name|configurationFilePath
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationFileExtendOption
argument_list|(
name|configurationFilePath
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * This option allows to extend configurations in each configuration file based on the karaf.home location. The      * value extends the current value (e.g. a=b to a=a,b) instead of replacing it. If there is no current value it is      * added.      *      * If you would like to have add or replace functionality please use the      * {@link KarafDistributionConfigurationFilePutOption} instead.      */
specifier|public
specifier|static
name|Option
name|editConfigurationFileExtend
parameter_list|(
name|ConfigurationPointer
name|configurationPointer
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationFileExtendOption
argument_list|(
name|configurationPointer
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**      * This option allows to configure each configuration file based on the karaf.home location. The value is "extend"      * which means it is either replaced or added. For simpler configuration you can add a file source. If you want to      * put all values from this file do not configure any keysToUseFromSource; otherwise define them to use only those      * specific values.      */
specifier|public
specifier|static
name|Option
index|[]
name|editConfigurationFileExtend
parameter_list|(
specifier|final
name|String
name|configurationFilePath
parameter_list|,
name|File
name|source
parameter_list|,
name|String
modifier|...
name|keysToUseFromSource
parameter_list|)
block|{
return|return
name|createOptionListFromFile
argument_list|(
name|source
argument_list|,
operator|new
name|FileOptionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Option
name|createOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationFileExtendOption
argument_list|(
name|configurationFilePath
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
argument_list|,
name|keysToUseFromSource
argument_list|)
return|;
block|}
comment|/**      * This option allows to simply replace an entire configuration file with your own one. Simply point to the      * configuration file you would like to have replaced and add the source file which should replace it.      */
specifier|public
specifier|static
name|Option
name|replaceConfigurationFile
parameter_list|(
name|String
name|configurationFilePath
parameter_list|,
name|File
name|source
parameter_list|)
block|{
return|return
operator|new
name|KarafDistributionConfigurationFileReplacementOption
argument_list|(
name|configurationFilePath
argument_list|,
name|source
argument_list|)
return|;
block|}
comment|/**      * Activates debugging on the embedded Karaf container using the standard 5005 port and holds the vm till you've      * attached the debugger.      */
specifier|public
specifier|static
name|Option
name|debugConfiguration
parameter_list|()
block|{
return|return
name|debugConfiguration
argument_list|(
literal|"5005"
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * A very simple and convinient method to set a specific log level without the need of configure the specific option      * itself.      */
specifier|public
specifier|static
name|Option
name|logLevel
parameter_list|(
name|LogLevel
name|logLevel
parameter_list|)
block|{
return|return
operator|new
name|LogLevelOption
argument_list|(
name|logLevel
argument_list|)
return|;
block|}
comment|/**      * A very simple and convinient method to set a specific log level without the need of configure the specific option      * itself.      */
specifier|public
specifier|static
name|LogLevelOption
name|logLevel
parameter_list|()
block|{
return|return
operator|new
name|LogLevelOption
argument_list|()
return|;
block|}
comment|/**      * Returns an easy option to activate and configure remote debugging for the Karaf container.      */
specifier|public
specifier|static
name|Option
name|debugConfiguration
parameter_list|(
name|String
name|port
parameter_list|,
name|boolean
name|hold
parameter_list|)
block|{
return|return
operator|new
name|VMOption
argument_list|(
name|format
argument_list|(
literal|"-Xrunjdwp:transport=dt_socket,server=y,suspend=%s,address=%s"
argument_list|,
name|hold
condition|?
literal|"y"
else|:
literal|"n"
argument_list|,
name|port
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

