begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|MavenUrlReference
import|;
end_import

begin_class
specifier|public
class|class
name|KarafDistributionBaseConfigurationOption
implements|implements
name|Option
block|{
specifier|protected
name|String
name|frameworkURL
decl_stmt|;
specifier|protected
name|MavenUrlReference
name|frameworkURLReference
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|String
name|karafVersion
decl_stmt|;
specifier|protected
name|File
name|unpackDirectory
decl_stmt|;
specifier|protected
name|boolean
name|useDeployFolder
init|=
literal|true
decl_stmt|;
specifier|public
name|KarafDistributionBaseConfigurationOption
parameter_list|()
block|{
name|frameworkURL
operator|=
literal|null
expr_stmt|;
name|frameworkURLReference
operator|=
literal|null
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|karafVersion
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|KarafDistributionBaseConfigurationOption
parameter_list|(
name|String
name|frameworkURL
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|karafVersion
parameter_list|)
block|{
name|this
operator|.
name|frameworkURL
operator|=
name|frameworkURL
expr_stmt|;
name|frameworkURLReference
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|karafVersion
operator|=
name|karafVersion
expr_stmt|;
block|}
specifier|public
name|KarafDistributionBaseConfigurationOption
parameter_list|(
name|MavenUrlReference
name|frameworkURLReference
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|karafVersion
parameter_list|)
block|{
name|frameworkURL
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|frameworkURLReference
operator|=
name|frameworkURLReference
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|karafVersion
operator|=
name|karafVersion
expr_stmt|;
block|}
specifier|public
name|KarafDistributionBaseConfigurationOption
parameter_list|(
name|MavenUrlReference
name|frameworkURLReference
parameter_list|)
block|{
name|frameworkURL
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|frameworkURLReference
operator|=
name|frameworkURLReference
expr_stmt|;
block|}
comment|/**      * Simply clones the insterted {@link KarafDistributionConfigurationOption}      */
specifier|public
name|KarafDistributionBaseConfigurationOption
parameter_list|(
name|KarafDistributionBaseConfigurationOption
name|base
parameter_list|)
block|{
name|frameworkURL
operator|=
name|base
operator|.
name|frameworkURL
expr_stmt|;
name|frameworkURLReference
operator|=
name|base
operator|.
name|frameworkURLReference
expr_stmt|;
name|name
operator|=
name|base
operator|.
name|name
expr_stmt|;
name|karafVersion
operator|=
name|base
operator|.
name|karafVersion
expr_stmt|;
name|unpackDirectory
operator|=
name|base
operator|.
name|unpackDirectory
expr_stmt|;
name|useDeployFolder
operator|=
name|base
operator|.
name|useDeployFolder
expr_stmt|;
block|}
comment|/**      * Sets the URL of the framework as a String (for example a file).      */
specifier|public
name|KarafDistributionBaseConfigurationOption
name|frameworkUrl
parameter_list|(
name|String
name|frameworkURL
parameter_list|)
block|{
name|this
operator|.
name|frameworkURL
operator|=
name|frameworkURL
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the URL of the frameworks as a maven reference.      */
specifier|public
name|KarafDistributionBaseConfigurationOption
name|frameworkUrl
parameter_list|(
name|MavenUrlReference
name|frameworkURL
parameter_list|)
block|{
name|frameworkURLReference
operator|=
name|frameworkURL
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set's the name of the framework. This is only used for logging.      */
specifier|public
name|KarafDistributionBaseConfigurationOption
name|name
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * The version of karaf used by the framework. That one is required since there is the high possibility that      * configuration is different between various karaf versions.      */
specifier|public
name|KarafDistributionBaseConfigurationOption
name|karafVersion
parameter_list|(
name|String
name|karafVersion
parameter_list|)
block|{
name|this
operator|.
name|karafVersion
operator|=
name|karafVersion
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Define the unpack directory for the karaf distribution. In this directory a UUID named directory will be created      * for each environment.      */
specifier|public
name|KarafDistributionBaseConfigurationOption
name|unpackDirectory
parameter_list|(
name|File
name|unpackDirectory
parameter_list|)
block|{
name|this
operator|.
name|unpackDirectory
operator|=
name|unpackDirectory
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Per default the framework simply copies all referenced artifacts (via Pax Exam DistributionOption) to the deploy      * folder of the karaf (based) distribution. If you don't have such a folder (for any reason) you can set this      * option to false. PaxExam Karaf will then try to add those deployment urls directly to a features xml instead of      * copying those files to the deploy folder.      */
specifier|public
name|KarafDistributionBaseConfigurationOption
name|useDeployFolder
parameter_list|(
name|boolean
name|useDeployFolder
parameter_list|)
block|{
name|this
operator|.
name|useDeployFolder
operator|=
name|useDeployFolder
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getFrameworkURL
parameter_list|()
block|{
if|if
condition|(
name|frameworkURL
operator|==
literal|null
operator|&&
name|frameworkURLReference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either frameworkurl or frameworkUrlReference need to be set."
argument_list|)
throw|;
block|}
return|return
name|frameworkURL
operator|!=
literal|null
condition|?
name|frameworkURL
else|:
name|frameworkURLReference
operator|.
name|getURL
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getKarafVersion
parameter_list|()
block|{
return|return
name|karafVersion
return|;
block|}
specifier|public
name|File
name|getUnpackDirectory
parameter_list|()
block|{
return|return
name|unpackDirectory
return|;
block|}
specifier|public
name|boolean
name|isUseDeployFolder
parameter_list|()
block|{
return|return
name|useDeployFolder
return|;
block|}
block|}
end_class

end_unit

