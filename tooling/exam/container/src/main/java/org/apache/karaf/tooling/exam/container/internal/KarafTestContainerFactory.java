begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|runner
operator|.
name|KarafJavaRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|runner
operator|.
name|NixRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|runner
operator|.
name|WindowsRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionBaseConfigurationOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionConfigurationOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionKitConfigurationOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionKitConfigurationOption
operator|.
name|Platform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|ExamSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|TestContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|TestContainerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|KarafTestContainerFactory
implements|implements
name|TestContainerFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KarafTestContainer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULTPORT
init|=
literal|21412
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|IS_WINDOWS_OS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"windows"
argument_list|)
decl_stmt|;
specifier|private
name|RMIRegistry
name|m_rmiRegistry
decl_stmt|;
specifier|public
name|KarafTestContainerFactory
parameter_list|()
block|{
name|m_rmiRegistry
operator|=
operator|new
name|RMIRegistry
argument_list|(
name|DEFAULTPORT
argument_list|,
name|DEFAULTPORT
operator|+
literal|1
argument_list|,
name|DEFAULTPORT
operator|+
literal|99
argument_list|)
operator|.
name|selectGracefully
argument_list|()
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|Override
specifier|public
name|TestContainer
index|[]
name|create
parameter_list|(
name|ExamSystem
name|system
parameter_list|)
block|{
name|List
argument_list|<
name|TestContainer
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|TestContainer
argument_list|>
argument_list|()
decl_stmt|;
name|KarafDistributionKitConfigurationOption
index|[]
name|kitOptions
init|=
name|system
operator|.
name|getOptions
argument_list|(
name|KarafDistributionKitConfigurationOption
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|KarafDistributionKitConfigurationOption
name|kitOption
range|:
name|kitOptions
control|)
block|{
if|if
condition|(
name|kitOption
operator|.
name|getPlatform
argument_list|()
operator|.
name|equals
argument_list|(
name|Platform
operator|.
name|WINDOWS
argument_list|)
condition|)
block|{
if|if
condition|(
name|IS_WINDOWS_OS
condition|)
block|{
name|containers
operator|.
name|add
argument_list|(
operator|new
name|KarafTestContainer
argument_list|(
name|system
argument_list|,
name|m_rmiRegistry
argument_list|,
name|kitOption
argument_list|,
operator|new
name|WindowsRunner
argument_list|(
name|kitOption
operator|.
name|getMakeExec
argument_list|()
argument_list|,
name|kitOption
operator|.
name|getExec
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Ignore windows settings on non windows platforms"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|IS_WINDOWS_OS
condition|)
block|{
name|containers
operator|.
name|add
argument_list|(
operator|new
name|KarafTestContainer
argument_list|(
name|system
argument_list|,
name|m_rmiRegistry
argument_list|,
name|kitOption
argument_list|,
operator|new
name|NixRunner
argument_list|(
name|kitOption
operator|.
name|getMakeExec
argument_list|()
argument_list|,
name|kitOption
operator|.
name|getExec
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Ignore non windows settings on windows platforms"
argument_list|)
expr_stmt|;
block|}
block|}
name|KarafDistributionBaseConfigurationOption
index|[]
name|options
init|=
name|system
operator|.
name|getOptions
argument_list|(
name|KarafDistributionConfigurationOption
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|KarafDistributionBaseConfigurationOption
name|testContainer
range|:
name|options
control|)
block|{
name|containers
operator|.
name|add
argument_list|(
operator|new
name|KarafTestContainer
argument_list|(
name|system
argument_list|,
name|m_rmiRegistry
argument_list|,
name|testContainer
argument_list|,
operator|new
name|KarafJavaRunner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|containers
operator|.
name|toArray
argument_list|(
operator|new
name|TestContainer
index|[
name|containers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

