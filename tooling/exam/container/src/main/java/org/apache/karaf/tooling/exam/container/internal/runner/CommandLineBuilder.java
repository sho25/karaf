begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|runner
package|;
end_package

begin_class
specifier|public
class|class
name|CommandLineBuilder
block|{
comment|/**      * The command line array.      */
specifier|private
name|String
index|[]
name|m_commandLine
decl_stmt|;
comment|/**      * Creates a new command line builder.      */
specifier|public
name|CommandLineBuilder
parameter_list|()
block|{
name|m_commandLine
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|/**      * Appends an array of strings to command line.      *      * @param segments array to append      *      * @return CommandLineBuilder for fluent api      */
specifier|public
name|CommandLineBuilder
name|append
parameter_list|(
specifier|final
name|String
index|[]
name|segments
parameter_list|)
block|{
if|if
condition|(
name|segments
operator|!=
literal|null
operator|&&
name|segments
operator|.
name|length
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
index|[]
name|command
init|=
operator|new
name|String
index|[
name|m_commandLine
operator|.
name|length
operator|+
name|segments
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|m_commandLine
argument_list|,
literal|0
argument_list|,
name|command
argument_list|,
literal|0
argument_list|,
name|m_commandLine
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|segments
argument_list|,
literal|0
argument_list|,
name|command
argument_list|,
name|m_commandLine
operator|.
name|length
argument_list|,
name|segments
operator|.
name|length
argument_list|)
expr_stmt|;
name|m_commandLine
operator|=
name|command
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Appends a string to command line.      *      * @param segment string to append      *      * @return CommandLineBuilder for fluent api      */
specifier|public
name|CommandLineBuilder
name|append
parameter_list|(
specifier|final
name|String
name|segment
parameter_list|)
block|{
if|if
condition|(
name|segment
operator|!=
literal|null
operator|&&
operator|!
name|segment
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|append
argument_list|(
operator|new
name|String
index|[]
block|{
name|segment
block|}
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Returns the command line.      *      * @return command line      */
specifier|public
name|String
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|m_commandLine
return|;
block|}
block|}
end_class

end_unit

