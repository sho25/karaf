begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|LocateRegistry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|net
operator|.
name|FreePort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Graceful RMI registry creation/reuse. Tries to reuse an existing one but is fine with creating one on another port.  */
end_comment

begin_class
specifier|public
class|class
name|RMIRegistry
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RMIRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|final
name|Integer
name|m_defaultPort
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|UNSELECTED
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
specifier|private
name|String
name|m_host
decl_stmt|;
specifier|private
name|Integer
name|m_port
init|=
name|UNSELECTED
decl_stmt|;
specifier|private
name|Integer
name|m_altMin
decl_stmt|;
specifier|private
name|Integer
name|m_altTo
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TREASURE
init|=
literal|30
decl_stmt|;
specifier|public
name|RMIRegistry
parameter_list|(
name|Integer
name|defaultPort
parameter_list|,
name|Integer
name|alternativeRangeFrom
parameter_list|,
name|Integer
name|alternativeRangeTo
parameter_list|)
block|{
try|try
block|{
name|m_host
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot select localhost. That usually not a good sign for networking.."
argument_list|)
throw|;
block|}
name|m_defaultPort
operator|=
name|defaultPort
expr_stmt|;
name|m_altMin
operator|=
name|alternativeRangeFrom
expr_stmt|;
name|m_altTo
operator|=
name|alternativeRangeTo
expr_stmt|;
block|}
comment|/**      * This will make sure a registry exists and is valid m_port. If its not available or does not work for some reason,      * it will select another port. This should really not happen usually. But it can.      *      * @return this for fluent API. Or IllegalStateException if a port has not been detected successfully.      */
specifier|public
specifier|synchronized
name|RMIRegistry
name|selectGracefully
parameter_list|()
block|{
comment|// if( ( m_port = select( m_defaultPort ) ) == UNSELECTED ) {
name|int
name|alternativePort
init|=
operator|new
name|FreePort
argument_list|(
name|m_altMin
argument_list|,
name|m_altTo
argument_list|)
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|m_port
operator|=
name|select
argument_list|(
name|alternativePort
argument_list|)
operator|)
operator|==
name|UNSELECTED
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No port found for RMI at all. Even though "
operator|+
name|alternativePort
operator|+
literal|" should have worked. Thats.. not. good. at. all."
argument_list|)
throw|;
block|}
name|printTakenStatus
argument_list|()
expr_stmt|;
comment|// }
return|return
name|this
return|;
block|}
specifier|private
name|void
name|printTakenStatus
parameter_list|()
block|{
name|int
name|in_use
init|=
name|m_port
operator|-
name|m_altMin
operator|+
literal|1
decl_stmt|;
comment|// the one we just took
name|int
name|max
init|=
name|m_altTo
operator|-
name|m_altMin
decl_stmt|;
name|String
name|info
init|=
literal|"Currently "
operator|+
name|in_use
operator|+
literal|" out of "
operator|+
name|max
operator|+
literal|" ports are in use. Port range is from "
operator|+
name|m_altMin
operator|+
literal|" up to "
operator|+
name|m_altTo
decl_stmt|;
if|if
condition|(
name|in_use
operator|+
name|TREASURE
operator|>
name|max
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"--------------"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"BEWARE !!! "
operator|+
name|info
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"--------------"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This contains basically two paths: 1. check if the given port already is valid rmi registry. Use that one if      * possible 2. make a new one at that port otherwise. Must also be validated.      *      * @param port to select.      * @return input port if successful or UNSELECTED      */
specifier|private
name|Integer
name|select
parameter_list|(
name|int
name|port
parameter_list|)
block|{
if|if
condition|(
name|reuseRegistry
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reuse Registry on "
operator|+
name|port
argument_list|)
expr_stmt|;
return|return
name|port
return|;
block|}
elseif|else
if|if
condition|(
name|createNewRegistry
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Created Registry on "
operator|+
name|port
argument_list|)
expr_stmt|;
return|return
name|port
return|;
block|}
comment|// fail
return|return
name|UNSELECTED
return|;
block|}
specifier|private
name|boolean
name|createNewRegistry
parameter_list|(
name|int
name|port
parameter_list|)
block|{
try|try
block|{
name|Registry
name|registry
init|=
name|LocateRegistry
operator|.
name|createRegistry
argument_list|(
name|port
argument_list|)
decl_stmt|;
return|return
name|verifyRegistry
argument_list|(
name|registry
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|reuseRegistry
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|Registry
name|reg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reg
operator|=
name|LocateRegistry
operator|.
name|getRegistry
argument_list|(
name|port
argument_list|)
expr_stmt|;
return|return
name|verifyRegistry
argument_list|(
name|reg
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// exception? then its not a fine registry.
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|verifyRegistry
parameter_list|(
name|Registry
name|reg
parameter_list|)
block|{
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
comment|// test:
try|try
block|{
name|String
index|[]
name|objectsRemote
init|=
name|reg
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|objectsRemote
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"-- Remotely available already: "
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// exception? then its not a fine registry.
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|m_host
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|m_port
return|;
block|}
block|}
end_class

end_unit

