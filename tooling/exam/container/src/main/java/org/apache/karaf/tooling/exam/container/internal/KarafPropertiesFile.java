begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_class
specifier|public
class|class
name|KarafPropertiesFile
block|{
specifier|private
specifier|final
name|Properties
name|properties
decl_stmt|;
specifier|private
specifier|final
name|File
name|propertyFile
decl_stmt|;
specifier|public
name|KarafPropertiesFile
parameter_list|(
name|File
name|karafHome
parameter_list|,
name|String
name|location
parameter_list|)
block|{
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|propertyFile
operator|=
operator|new
name|File
argument_list|(
name|karafHome
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propertyFile
operator|=
operator|new
name|File
argument_list|(
name|karafHome
operator|+
literal|"/"
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|propertyFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|properties
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|propertyFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|extend
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|void
name|store
parameter_list|()
throws|throws
name|IOException
block|{
name|properties
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|propertyFile
argument_list|)
argument_list|,
literal|"Modified by paxexam"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|replace
parameter_list|(
name|File
name|source
parameter_list|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|source
argument_list|,
name|propertyFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"It is required to replace propertyFile"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

