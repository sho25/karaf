begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|options
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|systemProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|rbc
operator|.
name|Constants
operator|.
name|RMI_HOST_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|rbc
operator|.
name|Constants
operator|.
name|RMI_NAME_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|rbc
operator|.
name|Constants
operator|.
name|RMI_PORT_PROPERTY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|WildcardFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|adaptions
operator|.
name|KarafManipulator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|adaptions
operator|.
name|KarafManipulatorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|DoNotModifyLogOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionBaseConfigurationOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionConfigurationConsoleOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionConfigurationFileExtendOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionConfigurationFileOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionConfigurationFilePutOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionConfigurationFileReplacementOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KeepRuntimeFolderOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|LogLevelOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|configs
operator|.
name|CustomProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|configs
operator|.
name|FeaturesCfg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|ExamSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|RelativeTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|TestAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|TestContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|container
operator|.
name|remote
operator|.
name|RBCRemoteTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|BootClasspathLibraryOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|BootDelegationOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|ProvisionOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|ServerModeOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|SystemPackageOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|SystemPropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|UrlReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|extra
operator|.
name|FeaturesScannerProvisionOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|extra
operator|.
name|VMOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|rbc
operator|.
name|client
operator|.
name|RemoteBundleContextClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_class
specifier|public
class|class
name|KarafTestContainer
implements|implements
name|TestContainer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KarafTestContainer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_TEST_CONTAINER
init|=
literal|"KarafTestContainer.start"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXAM_INVOKER_PROPERTY
init|=
literal|"pax.exam.invoker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EXAM_INJECT_PROPERTY
init|=
literal|"pax.exam.inject"
decl_stmt|;
specifier|private
specifier|final
name|Runner
name|runner
decl_stmt|;
specifier|private
specifier|final
name|RMIRegistry
name|registry
decl_stmt|;
specifier|private
specifier|final
name|ExamSystem
name|system
decl_stmt|;
specifier|private
name|KarafDistributionBaseConfigurationOption
name|framework
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|KarafManipulator
name|versionAdaptions
decl_stmt|;
specifier|private
name|boolean
name|deleteRuntime
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|private
name|RBCRemoteTarget
name|target
decl_stmt|;
specifier|private
name|File
name|targetFolder
decl_stmt|;
specifier|public
name|KarafTestContainer
parameter_list|(
name|ExamSystem
name|system
parameter_list|,
name|RMIRegistry
name|registry
parameter_list|,
name|KarafDistributionBaseConfigurationOption
name|framework
parameter_list|,
name|Runner
name|runner
parameter_list|)
block|{
name|this
operator|.
name|framework
operator|=
name|framework
expr_stmt|;
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|system
operator|=
name|system
expr_stmt|;
name|this
operator|.
name|runner
operator|=
name|runner
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|TestContainer
name|start
parameter_list|()
block|{
try|try
block|{
name|String
name|name
init|=
name|system
operator|.
name|createID
argument_list|(
name|KARAF_TEST_CONTAINER
argument_list|)
decl_stmt|;
name|ExamSystem
name|subsystem
init|=
name|system
operator|.
name|fork
argument_list|(
name|options
argument_list|(
name|systemProperty
argument_list|(
name|RMI_HOST_PROPERTY
argument_list|)
operator|.
name|value
argument_list|(
name|registry
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
name|RMI_PORT_PROPERTY
argument_list|)
operator|.
name|value
argument_list|(
literal|""
operator|+
name|registry
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
name|RMI_NAME_PROPERTY
argument_list|)
operator|.
name|value
argument_list|(
name|name
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
name|EXAM_INVOKER_PROPERTY
argument_list|)
operator|.
name|value
argument_list|(
literal|"junit"
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
name|EXAM_INJECT_PROPERTY
argument_list|)
operator|.
name|value
argument_list|(
literal|"true"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|target
operator|=
operator|new
name|RBCRemoteTarget
argument_list|(
name|name
argument_list|,
name|registry
operator|.
name|getPort
argument_list|()
argument_list|,
name|subsystem
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.protocol.handler.pkgs"
argument_list|,
literal|"org.ops4j.pax.url"
argument_list|)
expr_stmt|;
name|URL
name|sourceDistribution
init|=
operator|new
name|URL
argument_list|(
name|framework
operator|.
name|getFrameworkURL
argument_list|()
argument_list|)
decl_stmt|;
name|KeepRuntimeFolderOption
index|[]
name|keepRuntimeFolder
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|KeepRuntimeFolderOption
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|keepRuntimeFolder
operator|!=
literal|null
operator|&&
name|keepRuntimeFolder
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|deleteRuntime
operator|=
literal|false
expr_stmt|;
block|}
name|targetFolder
operator|=
name|retrieveFinalTargetFolder
argument_list|(
name|subsystem
argument_list|)
expr_stmt|;
name|extractKarafDistribution
argument_list|(
name|sourceDistribution
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
name|File
name|javaHome
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|karafBase
init|=
name|searchKarafBase
argument_list|(
name|targetFolder
argument_list|)
decl_stmt|;
name|File
name|distributionInfo
init|=
operator|new
name|File
argument_list|(
name|karafBase
operator|+
literal|"/etc/distribution.info"
argument_list|)
decl_stmt|;
name|File
name|karafBin
init|=
operator|new
name|File
argument_list|(
name|karafBase
operator|+
literal|"/bin"
argument_list|)
decl_stmt|;
name|File
name|featuresXmlFile
init|=
operator|new
name|File
argument_list|(
name|targetFolder
operator|+
literal|"/examfeatures.xml"
argument_list|)
decl_stmt|;
name|File
name|karafHome
init|=
name|karafBase
decl_stmt|;
name|File
name|deploy
init|=
operator|new
name|File
argument_list|(
name|karafBase
operator|+
literal|"/deploy"
argument_list|)
decl_stmt|;
name|String
name|karafData
init|=
name|karafHome
operator|+
literal|"/data"
decl_stmt|;
name|framework
operator|=
operator|new
name|InternalKarafDistributionConfigurationOption
argument_list|(
name|framework
argument_list|,
name|distributionInfo
argument_list|)
expr_stmt|;
name|versionAdaptions
operator|=
name|KarafManipulatorFactory
operator|.
name|createManipulator
argument_list|(
name|framework
operator|.
name|getKarafVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|javaOpts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|appendVmSettingsFromSystem
argument_list|(
name|javaOpts
argument_list|,
name|subsystem
argument_list|)
expr_stmt|;
name|String
index|[]
name|javaEndorsedDirs
init|=
operator|new
name|String
index|[]
block|{
name|javaHome
operator|+
literal|"/jre/lib/endorsed"
block|,
name|javaHome
operator|+
literal|"/lib/endorsed"
block|,
name|karafHome
operator|+
literal|"/lib/endorsed"
block|}
decl_stmt|;
name|String
index|[]
name|javaExtDirs
init|=
operator|new
name|String
index|[]
block|{
name|javaHome
operator|+
literal|"/jre/lib/ext"
block|,
name|javaHome
operator|+
literal|"/lib/ext"
block|,
name|javaHome
operator|+
literal|"/lib/ext"
block|}
decl_stmt|;
name|String
index|[]
name|karafOpts
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|opts
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"-Dkaraf.startLocalConsole="
operator|+
name|shouldLocalConsoleBeStarted
argument_list|(
name|subsystem
argument_list|)
argument_list|,
literal|"-Dkaraf.startRemoteShell="
operator|+
name|shouldRemoteShellBeStarted
argument_list|(
name|subsystem
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|classPath
init|=
name|buildKarafClasspath
argument_list|(
name|karafHome
argument_list|)
decl_stmt|;
name|String
name|main
init|=
literal|"org.apache.karaf.main.Main"
decl_stmt|;
name|String
name|options
init|=
literal|""
decl_stmt|;
name|String
index|[]
name|environment
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
index|[]
name|fileEndings
init|=
operator|new
name|String
index|[]
block|{
literal|"jar"
block|,
literal|"war"
block|,
literal|"zip"
block|,
literal|"kar"
block|,
literal|"xml"
block|}
decl_stmt|;
name|updateLogProperties
argument_list|(
name|karafHome
argument_list|,
name|subsystem
argument_list|)
expr_stmt|;
name|updateUserSetProperties
argument_list|(
name|karafHome
argument_list|,
name|subsystem
argument_list|)
expr_stmt|;
name|copyBootClasspathLibraries
argument_list|(
name|karafHome
argument_list|,
name|subsystem
argument_list|)
expr_stmt|;
name|setupExamProperties
argument_list|(
name|karafHome
argument_list|,
name|subsystem
argument_list|)
expr_stmt|;
name|makeScriptsInBinExec
argument_list|(
name|karafBin
argument_list|)
expr_stmt|;
name|ExamFeaturesFile
name|examFeaturesFile
decl_stmt|;
if|if
condition|(
name|framework
operator|.
name|isUseDeployFolder
argument_list|()
condition|)
block|{
name|copyReferencedArtifactsToDeployFolder
argument_list|(
name|deploy
argument_list|,
name|subsystem
argument_list|,
name|fileEndings
argument_list|)
expr_stmt|;
name|examFeaturesFile
operator|=
operator|new
name|ExamFeaturesFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|StringBuilder
name|extension
init|=
name|extractExtensionString
argument_list|(
name|subsystem
argument_list|)
decl_stmt|;
name|examFeaturesFile
operator|=
operator|new
name|ExamFeaturesFile
argument_list|(
name|extension
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|examFeaturesFile
operator|.
name|writeToFile
argument_list|(
name|featuresXmlFile
argument_list|)
expr_stmt|;
name|examFeaturesFile
operator|.
name|adaptDistributionToStartExam
argument_list|(
name|karafHome
argument_list|,
name|featuresXmlFile
argument_list|)
expr_stmt|;
name|long
name|startedAt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|runner
operator|.
name|exec
argument_list|(
name|environment
argument_list|,
name|karafBase
argument_list|,
name|javaHome
operator|.
name|toString
argument_list|()
argument_list|,
name|javaOpts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|,
name|javaEndorsedDirs
argument_list|,
name|javaExtDirs
argument_list|,
name|karafHome
operator|.
name|toString
argument_list|()
argument_list|,
name|karafData
argument_list|,
name|karafOpts
argument_list|,
name|opts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|,
name|classPath
argument_list|,
name|main
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Test Container started in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startedAt
operator|)
operator|+
literal|" millis"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Wait for test container to finish its initialization "
operator|+
name|subsystem
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subsystem
operator|.
name|getOptions
argument_list|(
name|ServerModeOption
operator|.
name|class
argument_list|)
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|waitForState
argument_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
operator|.
name|Constants
operator|.
name|SYSTEM_BUNDLE
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|subsystem
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"System runs in Server Mode. Which means, no Test facility bundles available on target system."
argument_list|)
expr_stmt|;
block|}
name|started
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Problem starting container"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|this
return|;
block|}
specifier|private
name|void
name|copyBootClasspathLibraries
parameter_list|(
name|File
name|karafHome
parameter_list|,
name|ExamSystem
name|subsystem
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|BootClasspathLibraryOption
index|[]
name|bootClasspathLibraryOptions
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|BootClasspathLibraryOption
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|BootClasspathLibraryOption
name|bootClasspathLibraryOption
range|:
name|bootClasspathLibraryOptions
control|)
block|{
name|UrlReference
name|libraryUrl
init|=
name|bootClasspathLibraryOption
operator|.
name|getLibraryUrl
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|copyURLToFile
argument_list|(
operator|new
name|URL
argument_list|(
name|libraryUrl
operator|.
name|getURL
argument_list|()
argument_list|)
argument_list|,
name|createFileNameWithRandomPrefixFromUrlAtTarget
argument_list|(
name|libraryUrl
operator|.
name|getURL
argument_list|()
argument_list|,
operator|new
name|File
argument_list|(
name|karafHome
operator|+
literal|"/lib"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"jar"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|StringBuilder
name|extractExtensionString
parameter_list|(
name|ExamSystem
name|subsystem
parameter_list|)
block|{
name|ProvisionOption
index|[]
name|provisionOptions
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|ProvisionOption
operator|.
name|class
argument_list|)
decl_stmt|;
name|StringBuilder
name|extension
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ProvisionOption
name|provisionOption
range|:
name|provisionOptions
control|)
block|{
if|if
condition|(
name|provisionOption
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
comment|// well those we've already handled at another location...
continue|continue;
block|}
name|extension
operator|.
name|append
argument_list|(
literal|"<bundle>"
argument_list|)
operator|.
name|append
argument_list|(
name|provisionOption
operator|.
name|getURL
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</bundle>\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|extension
return|;
block|}
specifier|private
name|String
name|shouldRemoteShellBeStarted
parameter_list|(
name|ExamSystem
name|subsystem
parameter_list|)
block|{
name|KarafDistributionConfigurationConsoleOption
index|[]
name|consoleOptions
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|KarafDistributionConfigurationConsoleOption
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|consoleOptions
operator|==
literal|null
condition|)
block|{
return|return
literal|"true"
return|;
block|}
for|for
control|(
name|KarafDistributionConfigurationConsoleOption
name|consoleOption
range|:
name|consoleOptions
control|)
block|{
if|if
condition|(
name|consoleOption
operator|.
name|getStartRemoteShell
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|consoleOption
operator|.
name|getStartRemoteShell
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
return|;
block|}
block|}
return|return
literal|"true"
return|;
block|}
specifier|private
name|String
name|shouldLocalConsoleBeStarted
parameter_list|(
name|ExamSystem
name|subsystem
parameter_list|)
block|{
name|KarafDistributionConfigurationConsoleOption
index|[]
name|consoleOptions
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|KarafDistributionConfigurationConsoleOption
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|consoleOptions
operator|==
literal|null
condition|)
block|{
return|return
literal|"true"
return|;
block|}
for|for
control|(
name|KarafDistributionConfigurationConsoleOption
name|consoleOption
range|:
name|consoleOptions
control|)
block|{
if|if
condition|(
name|consoleOption
operator|.
name|getStartLocalConsole
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|consoleOption
operator|.
name|getStartLocalConsole
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
return|;
block|}
block|}
return|return
literal|"true"
return|;
block|}
specifier|private
name|void
name|makeScriptsInBinExec
parameter_list|(
name|File
name|karafBin
parameter_list|)
block|{
if|if
condition|(
operator|!
name|karafBin
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|File
index|[]
name|files
init|=
name|karafBin
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|file
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|File
name|retrieveFinalTargetFolder
parameter_list|(
name|ExamSystem
name|subsystem
parameter_list|)
block|{
if|if
condition|(
name|framework
operator|.
name|getUnpackDirectory
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|subsystem
operator|.
name|getConfigFolder
argument_list|()
return|;
block|}
else|else
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|framework
operator|.
name|getUnpackDirectory
argument_list|()
operator|+
literal|"/"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|target
operator|=
name|transformToAbsolutePath
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|target
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
return|return
name|target
return|;
block|}
block|}
specifier|private
name|File
name|transformToAbsolutePath
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|appendVmSettingsFromSystem
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|opts
parameter_list|,
name|ExamSystem
name|subsystem
parameter_list|)
block|{
name|VMOption
index|[]
name|options
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|VMOption
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|VMOption
name|option
range|:
name|options
control|)
block|{
name|opts
operator|.
name|add
argument_list|(
name|option
operator|.
name|getOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|copyReferencedArtifactsToDeployFolder
parameter_list|(
name|File
name|deploy
parameter_list|,
name|ExamSystem
name|subsystem
parameter_list|,
name|String
index|[]
name|fileEndings
parameter_list|)
block|{
name|ProvisionOption
index|[]
name|options
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|ProvisionOption
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ProvisionOption
name|option
range|:
name|options
control|)
block|{
try|try
block|{
name|FileUtils
operator|.
name|copyURLToFile
argument_list|(
operator|new
name|URL
argument_list|(
name|option
operator|.
name|getURL
argument_list|()
argument_list|)
argument_list|,
name|createFileNameWithRandomPrefixFromUrlAtTarget
argument_list|(
name|option
operator|.
name|getURL
argument_list|()
argument_list|,
name|deploy
argument_list|,
name|fileEndings
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// well, this can happen...
block|}
block|}
block|}
specifier|private
name|File
name|createFileNameWithRandomPrefixFromUrlAtTarget
parameter_list|(
name|String
name|url
parameter_list|,
name|File
name|deploy
parameter_list|,
name|String
index|[]
name|fileEndings
parameter_list|)
block|{
name|String
name|prefix
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|realEnding
init|=
name|extractPossibleFileEndingIfMavenArtifact
argument_list|(
name|url
argument_list|,
name|fileEndings
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
operator|new
name|File
argument_list|(
name|url
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|new
name|File
argument_list|(
name|deploy
operator|+
literal|"/"
operator|+
name|prefix
operator|+
literal|"_"
operator|+
name|fileName
operator|+
literal|"."
operator|+
name|realEnding
argument_list|)
return|;
block|}
specifier|private
name|String
name|extractPossibleFileEndingIfMavenArtifact
parameter_list|(
name|String
name|url
parameter_list|,
name|String
index|[]
name|fileEndings
parameter_list|)
block|{
name|String
name|realEnding
init|=
literal|"jar"
decl_stmt|;
for|for
control|(
name|String
name|ending
range|:
name|fileEndings
control|)
block|{
if|if
condition|(
name|url
operator|.
name|indexOf
argument_list|(
literal|"/"
operator|+
name|ending
operator|+
literal|"/"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|realEnding
operator|=
name|ending
expr_stmt|;
break|break;
block|}
block|}
return|return
name|realEnding
return|;
block|}
specifier|private
name|void
name|updateUserSetProperties
parameter_list|(
name|File
name|karafHome
parameter_list|,
name|ExamSystem
name|subsystem
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KarafDistributionConfigurationFileOption
argument_list|>
name|options
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|subsystem
operator|.
name|getOptions
argument_list|(
name|KarafDistributionConfigurationFileOption
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|options
operator|.
name|addAll
argument_list|(
name|extractFileOptionsBasedOnFeaturesScannerOptions
argument_list|(
name|subsystem
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addAll
argument_list|(
name|configureBootDelegation
argument_list|(
name|subsystem
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addAll
argument_list|(
name|configureSystemBundles
argument_list|(
name|subsystem
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|KarafDistributionConfigurationFileOption
argument_list|>
argument_list|>
name|optionMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|KarafDistributionConfigurationFileOption
name|option
range|:
name|options
control|)
block|{
if|if
condition|(
operator|!
name|optionMap
operator|.
name|containsKey
argument_list|(
name|option
operator|.
name|getConfigurationFilePath
argument_list|()
argument_list|)
condition|)
block|{
name|optionMap
operator|.
name|put
argument_list|(
name|option
operator|.
name|getConfigurationFilePath
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|KarafDistributionConfigurationFileOption
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|KarafDistributionConfigurationFileOption
argument_list|>
name|optionEntries
init|=
name|optionMap
operator|.
name|get
argument_list|(
name|option
operator|.
name|getConfigurationFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|optionEntries
operator|.
name|containsKey
argument_list|(
name|option
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Key: {} occurs twice; value {} overwritten"
argument_list|,
name|option
operator|.
name|getKey
argument_list|()
argument_list|,
name|optionEntries
operator|.
name|get
argument_list|(
name|option
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|optionEntries
operator|.
name|put
argument_list|(
name|option
operator|.
name|getKey
argument_list|()
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|configFiles
init|=
name|optionMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|configFile
range|:
name|configFiles
control|)
block|{
name|HANDLING
label|:
block|{
name|KarafPropertiesFile
name|karafPropertiesFile
init|=
operator|new
name|KarafPropertiesFile
argument_list|(
name|karafHome
argument_list|,
name|configFile
argument_list|)
decl_stmt|;
name|karafPropertiesFile
operator|.
name|load
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|KarafDistributionConfigurationFileOption
argument_list|>
name|optionsToApply
init|=
name|optionMap
operator|.
name|get
argument_list|(
name|configFile
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|KarafDistributionConfigurationFileOption
name|optionToApply
range|:
name|optionsToApply
control|)
block|{
if|if
condition|(
name|optionToApply
operator|instanceof
name|KarafDistributionConfigurationFilePutOption
condition|)
block|{
name|karafPropertiesFile
operator|.
name|put
argument_list|(
name|optionToApply
operator|.
name|getKey
argument_list|()
argument_list|,
name|optionToApply
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|optionToApply
operator|instanceof
name|KarafDistributionConfigurationFileReplacementOption
condition|)
block|{
name|karafPropertiesFile
operator|.
name|replace
argument_list|(
operator|(
operator|(
name|KarafDistributionConfigurationFileReplacementOption
operator|)
name|optionToApply
operator|)
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
break|break
name|HANDLING
break|;
comment|// we don't need to store in that case; only the first one is relevant.
block|}
else|else
block|{
name|karafPropertiesFile
operator|.
name|extend
argument_list|(
name|optionToApply
operator|.
name|getKey
argument_list|()
argument_list|,
name|optionToApply
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|karafPropertiesFile
operator|.
name|store
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|KarafDistributionConfigurationFileOption
argument_list|>
name|configureSystemBundles
parameter_list|(
name|ExamSystem
name|subsystem
parameter_list|)
block|{
name|SystemPackageOption
index|[]
name|systemPackageOptions
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|SystemPackageOption
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|systemPackageString
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SystemPackageOption
name|systemPackageOption
range|:
name|systemPackageOptions
control|)
block|{
if|if
condition|(
operator|!
name|systemPackageString
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|systemPackageString
operator|+=
literal|","
expr_stmt|;
block|}
name|systemPackageString
operator|+=
name|systemPackageOption
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|systemPackageString
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|()
return|;
block|}
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|KarafDistributionConfigurationFileExtendOption
argument_list|(
name|CustomProperties
operator|.
name|SYSTEM_PACKAGES_EXTRA
argument_list|,
name|systemPackageString
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|KarafDistributionConfigurationFileOption
argument_list|>
name|configureBootDelegation
parameter_list|(
name|ExamSystem
name|subsystem
parameter_list|)
block|{
name|BootDelegationOption
index|[]
name|bootDelegationOptions
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|BootDelegationOption
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|bootDelegationString
init|=
literal|""
decl_stmt|;
for|for
control|(
name|BootDelegationOption
name|bootDelegationOption
range|:
name|bootDelegationOptions
control|)
block|{
name|bootDelegationString
operator|+=
literal|","
expr_stmt|;
name|bootDelegationString
operator|+=
name|bootDelegationOption
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|KarafDistributionConfigurationFileExtendOption
argument_list|(
name|CustomProperties
operator|.
name|BOOTDELEGATION
argument_list|,
name|bootDelegationString
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|?
extends|extends
name|KarafDistributionConfigurationFileOption
argument_list|>
name|extractFileOptionsBasedOnFeaturesScannerOptions
parameter_list|(
name|ExamSystem
name|subsystem
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|KarafDistributionConfigurationFileOption
argument_list|>
name|retVal
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|FeaturesScannerProvisionOption
index|[]
name|features
init|=
name|subsystem
operator|.
name|getOptions
argument_list|(
name|FeaturesScannerProvisionOption
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|FeaturesScannerProvisionOption
name|feature
range|:
name|features
control|)
block|{
name|String
name|fullFeatureUrl
init|=
name|feature
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
index|[]
name|split
init|=
name|fullFeatureUrl
operator|.
name|split
argument_list|(
literal|"\\!/"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|split
index|[
literal|0
index|]
operator|.
name|replaceAll
argument_list|(
literal|"scan-features:"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|retVal
operator|.
name|add
argument_list|(
operator|new
name|KarafDistributionConfigurationFileExtendOption
argument_list|(
name|FeaturesCfg
operator|.
name|REPOSITORIES
argument_list|,
literal|","
operator|+
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|retVal
operator|.
name|add
argument_list|(
operator|new
name|KarafDistributionConfigurationFileExtendOption
argument_list|(
name|FeaturesCfg
operator|.
name|BOOT
argument_list|,
literal|","
operator|+
name|split
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
specifier|private
name|void
name|setupExamProperties
parameter_list|(
name|File
name|karafHome
parameter_list|,
name|ExamSystem
name|system
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|customPropertiesFile
init|=
operator|new
name|File
argument_list|(
name|karafHome
operator|+
literal|"/etc/system.properties"
argument_list|)
decl_stmt|;
name|SystemPropertyOption
index|[]
name|customProps
init|=
name|system
operator|.
name|getOptions
argument_list|(
name|SystemPropertyOption
operator|.
name|class
argument_list|)
decl_stmt|;
name|Properties
name|karafPropertyFile
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|karafPropertyFile
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|customPropertiesFile
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SystemPropertyOption
name|systemPropertyOption
range|:
name|customProps
control|)
block|{
name|karafPropertyFile
operator|.
name|put
argument_list|(
name|systemPropertyOption
operator|.
name|getKey
argument_list|()
argument_list|,
name|systemPropertyOption
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|karafPropertyFile
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|customPropertiesFile
argument_list|)
argument_list|,
literal|"updated by pax-exam"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateLogProperties
parameter_list|(
name|File
name|karafHome
parameter_list|,
name|ExamSystem
name|system
parameter_list|)
throws|throws
name|IOException
block|{
name|DoNotModifyLogOption
index|[]
name|modifyLog
init|=
name|system
operator|.
name|getOptions
argument_list|(
name|DoNotModifyLogOption
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|modifyLog
operator|!=
literal|null
operator|&&
name|modifyLog
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Log file should not be modified by the test framework"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|realLogLevel
init|=
name|retrieveRealLogLevel
argument_list|(
name|system
argument_list|)
decl_stmt|;
name|File
name|customPropertiesFile
init|=
operator|new
name|File
argument_list|(
name|karafHome
operator|+
literal|"/etc/org.ops4j.pax.logging.cfg"
argument_list|)
decl_stmt|;
name|Properties
name|karafPropertyFile
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|karafPropertyFile
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|customPropertiesFile
argument_list|)
argument_list|)
expr_stmt|;
name|karafPropertyFile
operator|.
name|put
argument_list|(
literal|"log4j.rootLogger"
argument_list|,
name|realLogLevel
operator|+
literal|", out, stdout, osgi:*"
argument_list|)
expr_stmt|;
name|karafPropertyFile
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|customPropertiesFile
argument_list|)
argument_list|,
literal|"updated by pax-exam"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|retrieveRealLogLevel
parameter_list|(
name|ExamSystem
name|system
parameter_list|)
block|{
name|LogLevelOption
index|[]
name|logLevelOptions
init|=
name|system
operator|.
name|getOptions
argument_list|(
name|LogLevelOption
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|logLevelOptions
operator|!=
literal|null
operator|&&
name|logLevelOptions
operator|.
name|length
operator|!=
literal|0
condition|?
name|logLevelOptions
index|[
literal|0
index|]
operator|.
name|getLogLevel
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"WARN"
return|;
block|}
specifier|private
name|String
index|[]
name|buildKarafClasspath
parameter_list|(
name|File
name|karafHome
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cp
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|File
index|[]
name|jars
init|=
operator|new
name|File
argument_list|(
name|karafHome
operator|+
literal|"/lib"
argument_list|)
operator|.
name|listFiles
argument_list|(
operator|(
name|FileFilter
operator|)
operator|new
name|WildcardFileFilter
argument_list|(
literal|"*.jar"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|jar
range|:
name|jars
control|)
block|{
name|cp
operator|.
name|add
argument_list|(
name|jar
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cp
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
return|;
block|}
comment|/**      * Since we might get quite deep use a simple breath first search algorithm      */
specifier|private
name|File
name|searchKarafBase
parameter_list|(
name|File
name|targetFolder
parameter_list|)
block|{
name|Queue
argument_list|<
name|File
argument_list|>
name|searchNext
init|=
operator|new
name|LinkedList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|searchNext
operator|.
name|add
argument_list|(
name|targetFolder
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|searchNext
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|head
init|=
name|searchNext
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|head
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|boolean
name|system
init|=
literal|false
decl_stmt|;
name|boolean
name|etc
init|=
literal|false
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|head
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"system"
argument_list|)
condition|)
block|{
name|system
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"etc"
argument_list|)
condition|)
block|{
name|etc
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|system
operator|&&
name|etc
condition|)
block|{
return|return
name|head
return|;
block|}
name|searchNext
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|head
operator|.
name|listFiles
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No karaf base dir found in extracted distribution."
argument_list|)
throw|;
block|}
specifier|private
name|void
name|extractKarafDistribution
parameter_list|(
name|URL
name|sourceDistribution
parameter_list|,
name|File
name|targetFolder
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sourceDistribution
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
if|if
condition|(
name|sourceDistribution
operator|.
name|getFile
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|".zip"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|extractZipDistribution
argument_list|(
name|sourceDistribution
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceDistribution
operator|.
name|getFile
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|".tar.gz"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|extractTarGzDistribution
argument_list|(
name|sourceDistribution
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknow packaging of distribution; only zip or tar.gz could be handled."
argument_list|)
throw|;
block|}
return|return;
block|}
if|if
condition|(
name|sourceDistribution
operator|.
name|toExternalForm
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"/zip"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|extractZipDistribution
argument_list|(
name|sourceDistribution
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceDistribution
operator|.
name|toExternalForm
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"/tar.gz"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|extractTarGzDistribution
argument_list|(
name|sourceDistribution
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknow packaging of distribution; only zip or tar.gz could be handled."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|extractTarGzDistribution
parameter_list|(
name|URL
name|sourceDistribution
parameter_list|,
name|File
name|targetFolder
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
name|File
name|uncompressedFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"uncompressedTarGz-"
argument_list|,
literal|".tar"
argument_list|)
decl_stmt|;
name|extractGzArchive
argument_list|(
name|sourceDistribution
operator|.
name|openStream
argument_list|()
argument_list|,
name|uncompressedFile
argument_list|)
expr_stmt|;
name|extract
argument_list|(
operator|new
name|TarArchiveInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|uncompressedFile
argument_list|)
argument_list|)
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|uncompressedFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractZipDistribution
parameter_list|(
name|URL
name|sourceDistribution
parameter_list|,
name|File
name|targetFolder
parameter_list|)
throws|throws
name|IOException
block|{
name|extract
argument_list|(
operator|new
name|ZipArchiveInputStream
argument_list|(
name|sourceDistribution
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|,
name|targetFolder
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|extractGzArchive
parameter_list|(
name|InputStream
name|tarGz
parameter_list|,
name|File
name|tar
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedInputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|tarGz
argument_list|)
decl_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tar
argument_list|)
decl_stmt|;
name|GzipCompressorInputStream
name|gzIn
init|=
operator|new
name|GzipCompressorInputStream
argument_list|(
name|in
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|-
literal|1
operator|!=
operator|(
name|n
operator|=
name|gzIn
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|gzIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|extract
parameter_list|(
name|ArchiveInputStream
name|is
parameter_list|,
name|File
name|targetDir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|targetDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
block|}
name|targetDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ArchiveEntry
name|entry
init|=
name|is
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
name|entry
operator|=
name|is
operator|.
name|getNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|TestContainer
name|stop
parameter_list|()
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Shutting down the test container (Pax Runner)"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|started
condition|)
block|{
name|target
operator|.
name|stop
argument_list|()
expr_stmt|;
name|RemoteBundleContextClient
name|remoteBundleContextClient
init|=
name|target
operator|.
name|getClientRBC
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteBundleContextClient
operator|!=
literal|null
condition|)
block|{
name|remoteBundleContextClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
block|{
name|runner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Container never came up"
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|started
operator|=
literal|false
expr_stmt|;
name|target
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|deleteRuntime
condition|)
block|{
name|system
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|targetFolder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Can't remove runtime system; shedule it for exit of the jvm."
argument_list|)
expr_stmt|;
try|try
block|{
name|FileUtils
operator|.
name|forceDeleteOnExit
argument_list|(
name|targetFolder
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Well, this should simply not happen..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|void
name|waitForState
parameter_list|(
specifier|final
name|long
name|bundleId
parameter_list|,
specifier|final
name|int
name|state
parameter_list|,
specifier|final
name|RelativeTimeout
name|timeout
parameter_list|)
throws|throws
name|TimeoutException
block|{
name|target
operator|.
name|getClientRBC
argument_list|()
operator|.
name|waitForState
argument_list|(
name|bundleId
argument_list|,
name|state
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|call
parameter_list|(
name|TestAddress
name|address
parameter_list|)
block|{
name|target
operator|.
name|call
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
name|install
parameter_list|(
name|InputStream
name|stream
parameter_list|)
block|{
return|return
name|install
argument_list|(
literal|"local"
argument_list|,
name|stream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
name|install
parameter_list|(
name|String
name|location
parameter_list|,
name|InputStream
name|stream
parameter_list|)
block|{
return|return
name|target
operator|.
name|install
argument_list|(
name|location
argument_list|,
name|stream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"KarafTestContainer{"
operator|+
name|framework
operator|.
name|getFrameworkURL
argument_list|()
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

