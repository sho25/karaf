begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|container
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionBaseConfigurationOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|exam
operator|.
name|options
operator|.
name|KarafDistributionConfigurationOption
import|;
end_import

begin_comment
comment|/**  * Extends the {@link KarafDistributionConfigurationOption} to add functionality to store those values also in a  * distribution.info file in the distirbution.  */
end_comment

begin_class
specifier|public
class|class
name|InternalKarafDistributionConfigurationOption
extends|extends
name|KarafDistributionConfigurationOption
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_VERSION
init|=
literal|"karafVersion"
decl_stmt|;
specifier|private
name|File
name|distributionInfo
decl_stmt|;
specifier|public
name|InternalKarafDistributionConfigurationOption
parameter_list|(
name|KarafDistributionBaseConfigurationOption
name|distributionConfigurationOption
parameter_list|,
name|File
name|distributionInfo
parameter_list|)
block|{
name|super
argument_list|(
name|distributionConfigurationOption
argument_list|)
expr_stmt|;
name|this
operator|.
name|distributionInfo
operator|=
name|distributionInfo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getKarafVersion
parameter_list|()
block|{
name|String
name|internalVersion
init|=
name|super
operator|.
name|getKarafVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|internalVersion
operator|!=
literal|null
operator|&&
name|internalVersion
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|internalVersion
return|;
block|}
if|if
condition|(
operator|!
name|distributionInfo
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either distribution.info or the property itself has to define a karaf version."
argument_list|)
throw|;
block|}
name|String
name|retrieveProperty
init|=
name|retrieveProperty
argument_list|(
name|KARAF_VERSION
argument_list|)
decl_stmt|;
if|if
condition|(
name|retrieveProperty
operator|==
literal|null
operator|||
name|retrieveProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either distribution.info or the property itself has to define a karaf version."
argument_list|)
throw|;
block|}
return|return
name|retrieveProperty
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
name|String
name|internalName
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|internalName
operator|!=
literal|null
operator|&&
name|internalName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
return|return
name|internalName
return|;
block|}
if|if
condition|(
operator|!
name|distributionInfo
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either distribution.info or the property itself has to define a name for the distribution.."
argument_list|)
throw|;
block|}
name|String
name|retrieveProperty
init|=
name|retrieveProperty
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|retrieveProperty
operator|==
literal|null
operator|||
name|retrieveProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either distribution.info or the property itself has to define a name for the distribution.."
argument_list|)
throw|;
block|}
return|return
name|retrieveProperty
return|;
block|}
specifier|private
name|String
name|retrieveProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
name|FileInputStream
name|fileInputStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|distributionInfo
argument_list|)
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|fileInputStream
argument_list|)
expr_stmt|;
return|return
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
finally|finally
block|{
name|fileInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

