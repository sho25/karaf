begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|scr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|CommandWithAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|CompletableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|DependencyResolutionRequiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xbean
operator|.
name|finder
operator|.
name|ClassFinder
import|;
end_import

begin_comment
comment|/**  * The<code>ScrCommandMojo</code> generates a service descriptor file based  * on annotations found in the sources.  *  * @goal scr  * @phase process-classes  * @threadSafe  * @description Build Service Descriptors from Java Source  * @requiresDependencyResolution compile  */
end_comment

begin_class
specifier|public
class|class
name|ScrCommandMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * The Maven project.      *      * @parameter expression="project"      * @required      * @readonly      */
specifier|private
name|MavenProject
name|project
decl_stmt|;
comment|/**      * @parameter expression="${project.build.directory}/generated-scr-commands"      */
specifier|private
name|File
name|outputDirectory
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|int
name|ranking
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
try|try
block|{
name|ClassFinder
name|finder
init|=
operator|new
name|ClassFinder
argument_list|(
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasCommand
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|finder
operator|.
name|findAnnotatedClasses
argument_list|(
name|Service
operator|.
name|class
argument_list|)
control|)
block|{
name|Command
name|cmd
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFound command: "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"\n\t"
operator|+
name|cmd
operator|.
name|scope
argument_list|()
operator|+
literal|":"
operator|+
name|cmd
operator|.
name|name
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<?xml version='1.1'?>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<scr:component xmlns:scr=\"http://www.osgi.org/xmlns/scr/v1.1.0\" name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" activate=\"activate\" deactivate=\"deactivate\">\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<implementation class=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ScrCommandSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<service>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<provide interface=\""
argument_list|)
operator|.
name|append
argument_list|(
name|Function
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<provide interface=\""
argument_list|)
operator|.
name|append
argument_list|(
name|CompletableFunction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<provide interface=\""
argument_list|)
operator|.
name|append
argument_list|(
name|CommandWithAction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</service>\n"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|refs
init|=
name|getReferences
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|refs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<reference name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" cardinality=\"1..1\" interface=\""
argument_list|)
operator|.
name|append
argument_list|(
name|refs
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<property name=\"hidden.component\" value=\"true\"/>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ranking
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<property name=\"service.ranking\" value=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ranking
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<property name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" value=\""
argument_list|)
operator|.
name|append
argument_list|(
name|cmd
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<property name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" value=\""
argument_list|)
operator|.
name|append
argument_list|(
name|cmd
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</scr:component>\n"
argument_list|)
expr_stmt|;
name|String
name|component
init|=
literal|"OSGI-INF/"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|component
argument_list|)
decl_stmt|;
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|hasCommand
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nFound service: "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<?xml version='1.1'?>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<scr:component xmlns:scr=\"http://www.osgi.org/xmlns/scr/v1.1.0\" name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" activate=\"activate\" deactivate=\"deactivate\">\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<implementation class=\""
argument_list|)
operator|.
name|append
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<service>\n"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Class
argument_list|>
name|allClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|>
argument_list|()
decl_stmt|;
name|addAllClasses
argument_list|(
name|allClasses
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|allClasses
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<provide interface=\""
argument_list|)
operator|.
name|append
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</service>\n"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|refs
init|=
name|getReferences
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|refs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<reference name=\""
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" cardinality=\"1..1\" interface=\""
argument_list|)
operator|.
name|append
argument_list|(
name|refs
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|String
index|[]
name|bind
init|=
name|getBindMethods
argument_list|(
name|clazz
argument_list|,
name|key
argument_list|,
name|refs
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bind
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" bind=\""
argument_list|)
operator|.
name|append
argument_list|(
name|bind
index|[
literal|0
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bind
index|[
literal|1
index|]
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" unbind=\""
argument_list|)
operator|.
name|append
argument_list|(
name|bind
index|[
literal|1
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"/>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<property name=\"hidden.component\" value=\"true\"/>\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ranking
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<property name=\"service.ranking\" value=\""
argument_list|)
operator|.
name|append
argument_list|(
name|ranking
argument_list|)
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</scr:component>\n"
argument_list|)
expr_stmt|;
name|String
name|component
init|=
literal|"OSGI-INF/"
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|component
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|component
argument_list|)
decl_stmt|;
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|components
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasCommand
condition|)
block|{
name|String
name|name
init|=
name|ScrCommandSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|is
argument_list|,
name|fos
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|name
operator|=
name|ScrCommandSupport
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|setPrivatePackageHeader
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|setServiceComponentHeader
argument_list|(
name|components
argument_list|)
expr_stmt|;
name|updateProjectResources
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error executing SCR command scanner"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
index|[]
name|getBindMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|String
name|key
parameter_list|,
name|Class
name|type
parameter_list|)
block|{
name|String
name|cap
init|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Method
name|bind
init|=
literal|null
decl_stmt|;
name|Method
name|unbind
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bind
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"set"
operator|+
name|cap
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e0
parameter_list|)
block|{
try|try
block|{
name|bind
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"bind"
operator|+
name|cap
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e1
parameter_list|)
block|{             }
block|}
if|if
condition|(
name|bind
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|unbind
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"un"
operator|+
name|bind
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e0
parameter_list|)
block|{             }
block|}
return|return
operator|new
name|String
index|[]
block|{
name|bind
operator|!=
literal|null
condition|?
name|bind
operator|.
name|getName
argument_list|()
else|:
literal|null
block|,
name|unbind
operator|!=
literal|null
condition|?
name|unbind
operator|.
name|getName
argument_list|()
else|:
literal|null
block|}
return|;
block|}
specifier|private
name|void
name|addAllClasses
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|>
name|allClasses
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|!=
name|Object
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|allClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|addAllClasses
argument_list|(
name|allClasses
argument_list|,
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|clazz
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|addAllClasses
argument_list|(
name|allClasses
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|getReferences
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|refs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Field
name|field
range|:
name|clazz
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getAnnotation
argument_list|(
name|Reference
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|refs
operator|.
name|put
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
block|}
return|return
name|refs
return|;
block|}
specifier|private
name|ClassLoader
name|getClassLoader
parameter_list|()
throws|throws
name|MojoFailureException
throws|,
name|DependencyResolutionRequiredException
throws|,
name|MalformedURLException
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|project
operator|.
name|getCompileClasspathElements
argument_list|()
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|object
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassLoader
name|classLoader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[]
block|{}
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|classLoader
return|;
block|}
specifier|private
name|void
name|setPrivatePackageHeader
parameter_list|(
name|String
name|pkg
parameter_list|)
block|{
name|String
name|header
init|=
name|project
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Private-Package"
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|!=
literal|null
operator|&&
name|header
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|header
operator|+=
literal|","
operator|+
name|pkg
expr_stmt|;
block|}
else|else
block|{
name|header
operator|=
name|pkg
expr_stmt|;
block|}
name|project
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Private-Package"
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nPrivate-Package: "
operator|+
name|header
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the service component header based on the scr files.      */
specifier|private
name|void
name|setServiceComponentHeader
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|svcHeader
init|=
name|project
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Service-Component"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|xmlFiles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|svcHeader
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|svcHeader
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
specifier|final
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|xmlFiles
operator|.
name|add
argument_list|(
name|token
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|String
name|path
range|:
name|files
control|)
block|{
name|xmlFiles
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|entry
range|:
name|xmlFiles
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|project
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Service-Component"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nService-Component: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Update the Maven project resources.      */
specifier|private
name|void
name|updateProjectResources
parameter_list|()
block|{
comment|// now add the descriptor directory to the maven resources
specifier|final
name|String
name|ourRsrcPath
init|=
name|this
operator|.
name|outputDirectory
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Iterator
argument_list|<
name|Resource
argument_list|>
name|rsrcIterator
init|=
name|this
operator|.
name|project
operator|.
name|getResources
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
name|rsrcIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Resource
name|rsrc
init|=
name|rsrcIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|found
operator|=
name|rsrc
operator|.
name|getDirectory
argument_list|()
operator|.
name|equals
argument_list|(
name|ourRsrcPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
specifier|final
name|Resource
name|resource
init|=
operator|new
name|Resource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|setDirectory
argument_list|(
name|this
operator|.
name|outputDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|project
operator|.
name|addResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|copy
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|l
decl_stmt|;
while|while
condition|(
operator|(
name|l
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

