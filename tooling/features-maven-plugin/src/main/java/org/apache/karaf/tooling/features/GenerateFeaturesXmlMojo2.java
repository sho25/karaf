begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|ObjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|logging
operator|.
name|SystemStreamLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|artifact
operator|.
name|InvalidDependencyVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|shared
operator|.
name|dependency
operator|.
name|tree
operator|.
name|DependencyTreeResolutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|logging
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Generates the features XML file  *  * @version $Revision: 1.1 $  * @goal generate-features-xml2  * @phase compile  * @execute phase="compile"  * @requiresDependencyResolution runtime  * @inheritByDefault true  * @description Generates the features XML file  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
class|class
name|GenerateFeaturesXmlMojo2
extends|extends
name|AbstractLogEnabled
implements|implements
name|Mojo
block|{
comment|/**      * The dependency tree builder to use.      *      * @component      * @required      * @readonly      */
comment|//    private DependencyTreeBuilder dependencyTreeBuilder;
comment|/**      * The (optional) input feature.file to extend      *      * @parameter default-value="${project.build.directory}/src/main/feature/feature.xml"      */
specifier|private
name|File
name|inputFile
decl_stmt|;
comment|/**      * The file to generate      *      * @parameter default-value="${project.build.directory}/feature/feature.xml"      */
specifier|private
name|File
name|outputFile
decl_stmt|;
comment|/**      * The resolver to use for the feature.  Normally null or "OBR" or "(OBR)"      *      * @parameter default-value="${resolver}"      */
specifier|private
name|String
name|resolver
decl_stmt|;
comment|/**      * The artifact type for attaching the generated file to the project      *      * @parameter default-value="xml"      */
specifier|private
name|String
name|attachmentArtifactType
init|=
literal|"xml"
decl_stmt|;
comment|/**      * The artifact classifier for attaching the generated file to the project      *      * @parameter default-value="features"      */
specifier|private
name|String
name|attachmentArtifactClassifier
init|=
literal|"features"
decl_stmt|;
comment|//new
comment|/**      * The maven project.      *      * @parameter expression="${project}"      * @required      * @readonly      */
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The maven project's helper.      *      * @component      * @required      * @readonly      */
specifier|protected
name|MavenProjectHelper
name|projectHelper
decl_stmt|;
comment|//maven log
specifier|private
name|Log
name|log
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|PrintStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|dir
init|=
name|outputFile
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
argument_list|)
expr_stmt|;
name|getDependencies
argument_list|(
name|project
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeFeatures
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// now lets attach it
name|projectHelper
operator|.
name|attachArtifact
argument_list|(
name|project
argument_list|,
name|attachmentArtifactType
argument_list|,
name|attachmentArtifactClassifier
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to create features.xml file: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*      * Write all project dependencies as feature      */
specifier|private
name|void
name|writeFeatures
parameter_list|(
name|PrintStream
name|out
parameter_list|)
throws|throws
name|ArtifactResolutionException
throws|,
name|ArtifactNotFoundException
throws|,
name|IOException
throws|,
name|JAXBException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
throws|,
name|XMLStreamException
block|{
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"Step 4 : Generating "
operator|+
name|outputFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|//read in an existing feature.xml
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|ObjectFactory
argument_list|()
decl_stmt|;
name|Features
name|featuresRoot
decl_stmt|;
if|if
condition|(
name|inputFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|inputFile
argument_list|)
decl_stmt|;
try|try
block|{
name|featuresRoot
operator|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|featuresRoot
operator|=
name|objectFactory
operator|.
name|createFeaturesRoot
argument_list|()
expr_stmt|;
block|}
name|Feature
name|feature
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Feature
name|test
range|:
name|featuresRoot
operator|.
name|getFeature
argument_list|()
control|)
block|{
if|if
condition|(
name|test
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
condition|)
block|{
name|feature
operator|=
name|test
expr_stmt|;
block|}
block|}
if|if
condition|(
name|feature
operator|==
literal|null
condition|)
block|{
name|feature
operator|=
name|objectFactory
operator|.
name|createFeature
argument_list|()
expr_stmt|;
block|}
name|featuresRoot
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setName
argument_list|(
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setVersion
argument_list|(
name|project
operator|.
name|getArtifact
argument_list|()
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
name|feature
operator|.
name|setResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|localDependencies
control|)
block|{
name|String
name|bundleName
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
condition|)
block|{
name|bundleName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundleName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s/%s"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Bundle
name|bundle
init|=
name|objectFactory
operator|.
name|createBundle
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|setValue
argument_list|(
name|bundleName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"runtime"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|bundle
operator|.
name|setDependency
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|feature
operator|.
name|getBundle
argument_list|()
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
name|JaxbUtil
operator|.
name|marshal
argument_list|(
name|Features
operator|.
name|class
argument_list|,
name|featuresRoot
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|info
argument_list|(
literal|"...done!"
argument_list|)
expr_stmt|;
block|}
comment|//artifact search code adapted from geronimo car plugin
comment|/**      * The artifact factory to use.      *      * @component      * @required      * @readonly      */
specifier|protected
name|ArtifactFactory
name|artifactFactory
decl_stmt|;
comment|/**      * The artifact repository to use.      *      * @parameter expression="${localRepository}"      * @required      * @readonly      */
specifier|private
name|ArtifactRepository
name|localRepository
decl_stmt|;
comment|/**      * The artifact metadata source to use.      *      * @component      * @required      * @readonly      */
specifier|private
name|ArtifactMetadataSource
name|artifactMetadataSource
decl_stmt|;
comment|/**      * The artifact collector to use.      *      * @component      * @required      * @readonly      */
specifier|private
name|ArtifactCollector
name|artifactCollector
decl_stmt|;
comment|//all dependencies
specifier|protected
name|Set
argument_list|<
name|Artifact
argument_list|>
name|dependencyArtifacts
decl_stmt|;
comment|//dependencies we are interested in
specifier|protected
name|Set
argument_list|<
name|Artifact
argument_list|>
name|localDependencies
decl_stmt|;
comment|//log of what happened during search
specifier|protected
name|String
name|treeListing
decl_stmt|;
specifier|protected
name|void
name|getDependencies
parameter_list|(
name|MavenProject
name|project
parameter_list|,
name|boolean
name|useTransitiveDependencies
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|DependencyTreeResolutionListener
name|listener
init|=
operator|new
name|DependencyTreeResolutionListener
argument_list|(
name|getLogger
argument_list|()
argument_list|)
decl_stmt|;
name|DependencyNode
name|rootNode
decl_stmt|;
try|try
block|{
name|Map
name|managedVersions
init|=
name|project
operator|.
name|getManagedVersionMap
argument_list|()
decl_stmt|;
name|Set
name|dependencyArtifacts
init|=
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependencyArtifacts
operator|==
literal|null
condition|)
block|{
name|dependencyArtifacts
operator|=
name|project
operator|.
name|createArtifacts
argument_list|(
name|artifactFactory
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ArtifactResolutionResult
name|result
init|=
name|artifactCollector
operator|.
name|collect
argument_list|(
name|dependencyArtifacts
argument_list|,
name|project
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|managedVersions
argument_list|,
name|localRepository
argument_list|,
name|project
operator|.
name|getRemoteArtifactRepositories
argument_list|()
argument_list|,
name|artifactMetadataSource
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|listener
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|dependencyArtifacts
operator|=
name|result
operator|.
name|getArtifacts
argument_list|()
expr_stmt|;
name|rootNode
operator|=
name|listener
operator|.
name|getRootNode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|exception
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Cannot build project dependency tree"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidDependencyVersionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Invalid dependency version for artifact "
operator|+
name|project
operator|.
name|getArtifact
argument_list|()
argument_list|)
throw|;
block|}
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|scan
argument_list|(
name|rootNode
argument_list|,
name|useTransitiveDependencies
argument_list|)
expr_stmt|;
name|localDependencies
operator|=
name|scanner
operator|.
name|localDependencies
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|treeListing
operator|=
name|scanner
operator|.
name|getLog
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setLog
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
specifier|public
name|Log
name|getLog
parameter_list|()
block|{
if|if
condition|(
name|log
operator|==
literal|null
condition|)
block|{
name|setLog
argument_list|(
operator|new
name|SystemStreamLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|log
return|;
block|}
specifier|private
specifier|static
class|class
name|Scanner
block|{
specifier|private
specifier|static
enum|enum
name|Accept
block|{
name|ACCEPT
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|PROVIDED
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|STOP
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
block|;
specifier|private
specifier|final
name|boolean
name|more
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|local
decl_stmt|;
specifier|private
name|Accept
parameter_list|(
name|boolean
name|more
parameter_list|,
name|boolean
name|local
parameter_list|)
block|{
name|this
operator|.
name|more
operator|=
name|more
expr_stmt|;
name|this
operator|.
name|local
operator|=
name|local
expr_stmt|;
block|}
specifier|public
name|boolean
name|isContinue
parameter_list|()
block|{
return|return
name|more
return|;
block|}
specifier|public
name|boolean
name|isLocal
parameter_list|()
block|{
return|return
name|local
return|;
block|}
block|}
comment|//all the dependencies needed for this car, with provided dependencies removed
specifier|private
specifier|final
name|Map
argument_list|<
name|Artifact
argument_list|,
name|Set
argument_list|<
name|Artifact
argument_list|>
argument_list|>
name|localDependencies
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Artifact
argument_list|,
name|Set
argument_list|<
name|Artifact
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|//dependencies from ancestor cars, to be removed from localDependencies.
specifier|private
specifier|final
name|Set
argument_list|<
name|Artifact
argument_list|>
name|carDependencies
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|log
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|public
name|void
name|scan
parameter_list|(
name|DependencyNode
name|rootNode
parameter_list|,
name|boolean
name|useTransitiveDependencies
parameter_list|)
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|children
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DependencyNode
name|child
range|:
operator|(
name|List
argument_list|<
name|DependencyNode
argument_list|>
operator|)
name|rootNode
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|scan
argument_list|(
name|child
argument_list|,
name|Accept
operator|.
name|ACCEPT
argument_list|,
name|useTransitiveDependencies
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useTransitiveDependencies
condition|)
block|{
name|localDependencies
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|carDependencies
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|scan
parameter_list|(
name|DependencyNode
name|rootNode
parameter_list|,
name|Accept
name|parentAccept
parameter_list|,
name|boolean
name|useTransitiveDependencies
parameter_list|,
name|boolean
name|isFromCar
parameter_list|,
name|String
name|indent
parameter_list|,
name|Set
argument_list|<
name|Artifact
argument_list|>
name|parentsChildren
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|getArtifact
argument_list|(
name|rootNode
argument_list|)
decl_stmt|;
name|Accept
name|accept
init|=
name|accept
argument_list|(
name|artifact
argument_list|,
name|parentAccept
argument_list|)
decl_stmt|;
if|if
condition|(
name|accept
operator|.
name|isContinue
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|children
init|=
name|localDependencies
operator|.
name|get
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFromCar
condition|)
block|{
if|if
condition|(
operator|!
name|isFeature
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"from feature:"
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|carDependencies
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"is feature:"
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"local:"
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|carDependencies
operator|.
name|contains
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|log
operator|.
name|append
argument_list|(
name|indent
argument_list|)
operator|.
name|append
argument_list|(
literal|"already in feature, returning:"
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|parentsChildren
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
return|return;
block|}
name|parentsChildren
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
block|{
name|children
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Artifact
argument_list|>
argument_list|()
expr_stmt|;
name|localDependencies
operator|.
name|put
argument_list|(
name|artifact
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isFeature
argument_list|(
name|artifact
argument_list|)
operator|||
operator|!
name|useTransitiveDependencies
condition|)
block|{
name|isFromCar
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|DependencyNode
name|child
range|:
operator|(
name|List
argument_list|<
name|DependencyNode
argument_list|>
operator|)
name|rootNode
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|scan
argument_list|(
name|child
argument_list|,
name|accept
argument_list|,
name|useTransitiveDependencies
argument_list|,
name|isFromCar
argument_list|,
name|indent
operator|+
literal|"  "
argument_list|,
name|children
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isFeature
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|artifact
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"kar"
argument_list|)
operator|||
literal|"feature"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|()
block|{
return|return
name|log
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Artifact
name|getArtifact
parameter_list|(
name|DependencyNode
name|rootNode
parameter_list|)
block|{
name|Artifact
name|artifact
init|=
name|rootNode
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNode
operator|.
name|getRelatedArtifact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|artifact
operator|=
name|rootNode
operator|.
name|getRelatedArtifact
argument_list|()
expr_stmt|;
block|}
return|return
name|artifact
return|;
block|}
specifier|private
name|Accept
name|accept
parameter_list|(
name|Artifact
name|dependency
parameter_list|,
name|Accept
name|previous
parameter_list|)
block|{
comment|//            if (dependency.getGroupId().startsWith("org.apache.geronimo.genesis")) {
comment|//                return Accept.STOP;
comment|//            }
name|String
name|scope
init|=
name|dependency
operator|.
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|scope
operator|==
literal|null
operator|||
literal|"runtime"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scope
argument_list|)
operator|||
literal|"compile"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scope
argument_list|)
condition|)
block|{
return|return
name|previous
return|;
block|}
return|return
name|Accept
operator|.
name|STOP
return|;
block|}
block|}
block|}
end_class

end_unit

