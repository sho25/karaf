begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
operator|.
name|KarArtifactInstaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|JaxbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|DefaultArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|ArtifactRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_comment
comment|/**  * Installs kar dependencies into a server-under-construction in target/assembly  *  * @version $Revision: 1.1 $  * @goal install-kars  * @phase process-resources  * @requiresDependencyResolution runtime  * @inheritByDefault true  * @description Install kar dependencies  */
end_comment

begin_class
specifier|public
class|class
name|InstallKarsMojo
extends|extends
name|MojoSupport
block|{
comment|/**      * Directory that resources are copied to during the build.      *      * @parameter expression="${project.build.directory}/assembly"      * @required      */
specifier|protected
name|String
name|workDirectory
decl_stmt|;
comment|/**      * features config file.      *      * @parameter expression="${project.build.directory}/assembly/etc/org.apache.karaf.features.cfg"      * @required      */
specifier|protected
name|File
name|featuresCfgFile
decl_stmt|;
comment|/**      * startup.properties file.      *      * @parameter expression="${project.build.directory}/assembly/etc/startup.properties"      * @required      */
specifier|protected
name|File
name|startupPropertiesFile
decl_stmt|;
comment|/**      * if false, unpack to system and add bundles to startup.properties      * if true, unpack to local-repo and add feature to features config      *      * @parameter      */
specifier|protected
name|boolean
name|unpackToLocalRepo
decl_stmt|;
comment|/**      * Directory that resources are copied to during the build.      *      * @parameter expression="${project.build.directory}/assembly/local-repo"      * @required      */
specifier|protected
name|String
name|localRepoDirectory
decl_stmt|;
comment|/**      * Directory that resources are copied to during the build.      *      * @parameter expression="${project.build.directory}/assembly/system"      * @required      */
specifier|protected
name|String
name|systemDirectory
decl_stmt|;
specifier|private
name|String
name|repoPath
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|KarArtifactInstaller
name|installer
init|=
operator|new
name|KarArtifactInstaller
argument_list|()
decl_stmt|;
name|installer
operator|.
name|setBasePath
argument_list|(
name|workDirectory
argument_list|)
expr_stmt|;
name|repoPath
operator|=
name|unpackToLocalRepo
condition|?
name|localRepoDirectory
else|:
name|systemDirectory
expr_stmt|;
name|installer
operator|.
name|setLocalRepoPath
argument_list|(
name|repoPath
argument_list|)
expr_stmt|;
name|FeaturesService
name|featuresService
init|=
operator|new
name|OfflineFeaturesService
argument_list|()
decl_stmt|;
name|installer
operator|.
name|setFeaturesService
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
name|installer
operator|.
name|init
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|dependencies
init|=
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|dependencies
control|)
block|{
if|if
condition|(
literal|"kar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
literal|"compile"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
try|try
block|{
name|installer
operator|.
name|install
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"Could not install kar: "
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
operator|&&
literal|"compile"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
comment|//TODO
block|}
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not unpack all dependencies:\n"
operator|+
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|OfflineFeaturesService
implements|implements
name|FeaturesService
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_REPOSITORIES
init|=
literal|"featuresRepositories"
decl_stmt|;
specifier|public
name|void
name|validateRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|url
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|unpackToLocalRepo
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Adding feature repository to local-repo: "
operator|+
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|featuresCfgFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|existingFeatureRepos
init|=
name|properties
operator|.
name|containsKey
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|)
condition|?
name|properties
operator|.
name|getProperty
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|)
operator|+
literal|","
else|:
literal|""
decl_stmt|;
name|existingFeatureRepos
operator|=
name|existingFeatureRepos
operator|+
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|existingFeatureRepos
argument_list|)
expr_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|"Features Service config"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Installing feature to system and startup.properties"
argument_list|)
expr_stmt|;
name|Properties
name|startupProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|startupPropertiesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|startupPropertiesFile
argument_list|)
decl_stmt|;
try|try
block|{
name|startupProperties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|startupPropertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|startupPropertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
name|DefaultRepositoryLayout
name|layout
init|=
operator|new
name|DefaultRepositoryLayout
argument_list|()
decl_stmt|;
name|String
index|[]
name|bits
init|=
name|url
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"[:/]"
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|factory
operator|.
name|createArtifactWithClassifier
argument_list|(
name|bits
index|[
literal|1
index|]
argument_list|,
name|bits
index|[
literal|2
index|]
argument_list|,
name|bits
index|[
literal|3
index|]
argument_list|,
name|bits
index|[
literal|4
index|]
argument_list|,
name|bits
index|[
literal|5
index|]
argument_list|)
decl_stmt|;
name|String
name|featuresPath
init|=
name|repoPath
operator|+
literal|"/"
operator|+
name|layout
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|repoFile
init|=
operator|new
name|File
argument_list|(
name|featuresPath
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|repoFile
argument_list|)
decl_stmt|;
name|Features
name|features
decl_stmt|;
try|try
block|{
name|features
operator|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Feature
name|feature
range|:
name|features
operator|.
name|getFeature
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
name|String
name|location
init|=
name|bundle
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|startLevel
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|bundle
operator|.
name|getStartLevel
argument_list|()
argument_list|)
decl_stmt|;
name|bits
operator|=
name|location
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"[:/]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bits
operator|.
name|length
operator|<
literal|4
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"bad bundle: "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Artifact
name|bundleArtifact
init|=
name|factory
operator|.
name|createArtifact
argument_list|(
name|bits
index|[
literal|1
index|]
argument_list|,
name|bits
index|[
literal|2
index|]
argument_list|,
name|bits
index|[
literal|3
index|]
argument_list|,
literal|null
argument_list|,
name|bits
operator|.
name|length
operator|==
literal|4
condition|?
literal|"jar"
else|:
name|bits
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|String
name|bundlePath
init|=
name|layout
operator|.
name|pathOf
argument_list|(
name|bundleArtifact
argument_list|)
decl_stmt|;
name|startupProperties
operator|.
name|put
argument_list|(
name|bundlePath
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|startupPropertiesFile
argument_list|)
decl_stmt|;
try|try
block|{
name|startupProperties
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|"startup bundles"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|url
parameter_list|)
block|{         }
specifier|public
name|void
name|restoreRepository
parameter_list|(
name|URI
name|url
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|Repository
index|[]
name|listRepositories
parameter_list|()
block|{
return|return
operator|new
name|Repository
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|installFeature
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|f
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|installFeatures
parameter_list|(
name|Set
argument_list|<
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
argument_list|>
name|features
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|Feature
index|[]
name|listFeatures
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|Feature
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Feature
index|[]
name|listInstalledFeatures
parameter_list|()
block|{
return|return
operator|new
name|Feature
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|boolean
name|isInstalled
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|f
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

