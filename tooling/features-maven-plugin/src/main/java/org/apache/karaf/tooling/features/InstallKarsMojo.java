begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
operator|.
name|KarArtifactInstaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|FeaturesServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_comment
comment|/**  * Installs kar dependencies into a server-under-construction in target/assembly  *  * @version $Revision: 1.1 $  * @goal install-kars  * @phase process-resources  * @execute phase="process-resources"  * @requiresDependencyResolution runtime  * @inheritByDefault true  * @description Install kar dependencies  */
end_comment

begin_class
specifier|public
class|class
name|InstallKarsMojo
extends|extends
name|MojoSupport
block|{
comment|/**      * Directory that resources are copied to during the build.      *      * @parameter expression="${project.build.directory}/assembly"      * @required      */
specifier|protected
name|String
name|workDirectory
decl_stmt|;
comment|/**      * Directory that resources are copied to during the build.      *      * @parameter expression="${project.build.directory}/assembly/local-repo"      * @required      */
specifier|protected
name|String
name|localRepoDirectory
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|KarArtifactInstaller
name|installer
init|=
operator|new
name|KarArtifactInstaller
argument_list|()
decl_stmt|;
name|installer
operator|.
name|setBasePath
argument_list|(
name|workDirectory
argument_list|)
expr_stmt|;
name|installer
operator|.
name|setLocalRepoPath
argument_list|(
name|localRepoDirectory
argument_list|)
expr_stmt|;
name|FeaturesServiceImpl
name|featuresService
init|=
operator|new
name|FeaturesServiceImpl
argument_list|()
decl_stmt|;
name|installer
operator|.
name|setFeaturesService
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|dependencies
init|=
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|dependencies
control|)
block|{
if|if
condition|(
literal|"kar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
literal|"compile"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
try|try
block|{
name|installer
operator|.
name|install
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"Could not install kar: "
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not unpack all dependencies:\n"
operator|+
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

