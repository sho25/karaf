begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
specifier|public
class|class
name|SortedCommand
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSort
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|CommandDescriptor
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CommandDescriptor
name|command
init|=
operator|new
name|CommandDescriptor
argument_list|()
decl_stmt|;
name|command
operator|.
name|setRank
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|command
operator|.
name|setCommand
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommandDescriptor
argument_list|()
expr_stmt|;
name|command
operator|.
name|setRank
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|command
operator|.
name|setCommand
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
comment|// ranking the commands and scripts
name|Comparator
argument_list|<
name|CommandDescriptor
argument_list|>
name|comparator
init|=
name|Comparator
operator|.
name|comparingInt
argument_list|(
name|CommandDescriptor
operator|::
name|getRank
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|CommandDescriptor
argument_list|>
name|sortedCommands
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|comparator
argument_list|)
decl_stmt|;
name|sortedCommands
operator|.
name|addAll
argument_list|(
name|commands
argument_list|)
expr_stmt|;
for|for
control|(
name|CommandDescriptor
name|cmd
range|:
name|sortedCommands
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Rank: "
operator|+
name|cmd
operator|.
name|getRank
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Command: "
operator|+
name|cmd
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

