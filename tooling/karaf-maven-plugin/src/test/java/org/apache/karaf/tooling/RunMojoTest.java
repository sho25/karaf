begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMockSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|RunMojoTest
extends|extends
name|EasyMockSupport
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAddFeatureRepositoriesWithNullRepoList
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|FeaturesService
name|featureService
init|=
name|mock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|mojo
operator|.
name|addFeatureRepositories
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
comment|// Non-nice easymock mock will fail on any call
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFeatureRepositoriesWithEmptyRepoListAndNullFeatureService
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|MojoExecutionException
block|{
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"featureRepositories"
argument_list|,
name|empty
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|addFeatureRepositories
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MojoExecutionException to be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to add feature repositories to karaf"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFeatureRepositoriesWithEmptyRepoList
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|FeaturesService
name|featureService
init|=
name|mock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|String
index|[]
name|empty
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"featureRepositories"
argument_list|,
name|empty
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|addFeatureRepositories
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
comment|// Non-nice easymock mock will fail on any call
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFeatureRepositories
parameter_list|()
throws|throws
name|Exception
block|{
name|FeaturesService
name|featureService
init|=
name|niceMock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|featureService
operator|.
name|addRepository
argument_list|(
name|anyObject
argument_list|(
name|URI
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|String
index|[]
name|features
init|=
block|{
literal|"liquibase-core"
block|,
literal|"ukelonn"
block|}
decl_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"featureRepositories"
argument_list|,
name|features
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|addFeatureRepositories
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithDeployProjectArtifactFalse
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|MojoExecutionException
block|{
name|BundleContext
name|context
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"deployProjectArtifact"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithNullArtifact
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|BundleContext
name|context
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MojoExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Project artifact doesn't exist"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithNonExistingArtifact
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|BundleContext
name|context
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|artifactFile
init|=
name|mock
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFile
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MojoExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Project artifact doesn't exist"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithExistingArtifactButProjectNotBundle
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|BundleContext
name|context
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|artifactFile
init|=
name|mock
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifactFile
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFile
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MojoExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Packaging jar is not supported"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithExistingArtifactFailsInInstall
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|BundleContext
name|context
init|=
name|mock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Artifact
name|artifact
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|artifactFile
init|=
name|niceMock
argument_list|(
name|File
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|artifactFile
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifactFile
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFile
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setPackaging
argument_list|(
literal|"bundle"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MojoExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Can't deploy project artifact in container"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithExistingArtifact
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|BundleException
throws|,
name|MojoExecutionException
block|{
name|BundleContext
name|context
init|=
name|niceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|niceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|installBundle
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|File
name|artifactFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"fake-bundle"
argument_list|,
literal|".jar"
argument_list|)
decl_stmt|;
try|try
block|{
name|expect
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFile
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setPackaging
argument_list|(
literal|"bundle"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|artifactFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithPomArtifactAndAttachedFeatureXmlNoFeatureService
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|IOException
throws|,
name|BundleException
throws|,
name|MojoExecutionException
block|{
name|File
name|artifactFeaturesAttachmentFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"someproject-features"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|BundleContext
name|context
init|=
name|niceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|niceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|installBundle
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|niceMock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|Artifact
name|artifactFeaturesAttachment
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFeaturesAttachmentFile
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getClassifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setPackaging
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|project
operator|.
name|addAttachedArtifact
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MojoExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to find the FeatureService when adding a feature repository"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|artifactFeaturesAttachmentFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithPomArtifactAndAttachedFeatureXmlRepoRegistrationFails
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|artifactFeaturesAttachmentFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"someproject-features"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|FeaturesService
name|featureService
init|=
name|niceMock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|featureService
operator|.
name|addRepository
argument_list|(
name|anyObject
argument_list|(
name|URI
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Not a feature repository"
argument_list|)
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|FeaturesService
argument_list|>
name|ref
init|=
name|niceMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|context
init|=
name|niceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getServiceReference
argument_list|(
name|eq
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|eq
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|niceMock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|Artifact
name|artifactFeaturesAttachment
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFeaturesAttachmentFile
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getClassifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setPackaging
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|project
operator|.
name|addAttachedArtifact
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
name|featureService
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected MojoExecutionException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to register attachment as feature repository"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|artifactFeaturesAttachmentFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithPomArtifactAndAttachedFeatureXmlAndNoFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|artifactFeaturesAttachmentFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"someproject-features"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|FeaturesService
name|featureService
init|=
name|niceMock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|FeaturesService
argument_list|>
name|ref
init|=
name|niceMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|context
init|=
name|niceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getServiceReference
argument_list|(
name|eq
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|eq
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|niceMock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|Artifact
name|artifactFeaturesAttachment
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFeaturesAttachmentFile
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getClassifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setPackaging
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|project
operator|.
name|addAttachedArtifact
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
name|featureService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|artifactFeaturesAttachmentFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testDeployWithPomArtifactAndAttachedFeatureXml
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|artifactFeaturesAttachmentFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"someproject-features"
argument_list|,
literal|".xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|FeaturesService
name|featureService
init|=
name|niceMock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|FeaturesService
argument_list|>
name|ref
init|=
name|niceMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|context
init|=
name|niceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getServiceReference
argument_list|(
name|eq
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|eq
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|niceMock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|Artifact
name|artifactFeaturesAttachment
init|=
name|mock
argument_list|(
name|Artifact
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|artifactFeaturesAttachmentFile
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getClassifier
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|artifactFeaturesAttachment
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|MavenProject
name|project
init|=
operator|new
name|MavenProject
argument_list|()
decl_stmt|;
name|project
operator|.
name|setPackaging
argument_list|(
literal|"pom"
argument_list|)
expr_stmt|;
name|project
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|project
operator|.
name|addAttachedArtifact
argument_list|(
name|artifactFeaturesAttachment
argument_list|)
expr_stmt|;
name|setInheritedPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"project"
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"featuresToInstall"
argument_list|,
literal|"liquibase-core, ukelonn-db-derby-test, ukelonn"
argument_list|)
expr_stmt|;
name|String
index|[]
name|featureRepos
init|=
block|{
literal|"mvn:org.ops4j.pax.jdbc/pax-jdbc-features/LATEST/xml/features"
block|}
decl_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"featureRepositories"
argument_list|,
name|featureRepos
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|deploy
argument_list|(
name|context
argument_list|,
name|featureService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|artifactFeaturesAttachmentFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Just check the string split behaviour on various feature strings.      */
annotation|@
name|Test
specifier|public
name|void
name|testStringSplit
parameter_list|()
block|{
name|String
index|[]
name|split1
init|=
literal|"liquibase-core, ukelonn-db-derby-test, ukelonn"
operator|.
name|split
argument_list|(
literal|" *, *"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|split1
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
index|[]
name|split2
init|=
literal|"liquibase-core"
operator|.
name|split
argument_list|(
literal|" *, *"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|split2
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
index|[]
name|split3
init|=
literal|" "
operator|.
name|split
argument_list|(
literal|" *, *"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|split3
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
index|[]
name|split4
init|=
literal|" , "
operator|.
name|split
argument_list|(
literal|" *, *"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|split4
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
index|[]
name|split5
init|=
literal|"liquibase-core, "
operator|.
name|split
argument_list|(
literal|" *, *"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|split5
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
index|[]
name|split6
init|=
literal|"liquibase-core, , "
operator|.
name|split
argument_list|(
literal|" *, *"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|split6
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFeaturesNullFeaturesToInstall
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|FeaturesService
name|featureService
init|=
name|mock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|mojo
operator|.
name|addFeatures
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
comment|// Non-nice easymock mock will fail on any call
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFeaturesNullFeatureService
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"featuresToInstall"
argument_list|,
literal|"liquibase-core, ukelonn-db-derby-test, ukelonn"
argument_list|)
expr_stmt|;
try|try
block|{
name|mojo
operator|.
name|addFeatures
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Failed to add features to karaf"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|FeaturesService
name|featureService
init|=
name|mock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|featureService
operator|.
name|installFeature
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|times
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|setPrivateField
argument_list|(
name|mojo
argument_list|,
literal|"featuresToInstall"
argument_list|,
literal|"liquibase-core, ukelonn-db-derby-test, ukelonn"
argument_list|)
expr_stmt|;
name|mojo
operator|.
name|addFeatures
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindFeatureServiceNullServiceRef
parameter_list|()
block|{
name|BundleContext
name|context
init|=
name|niceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|Object
name|service
init|=
name|mojo
operator|.
name|findFeatureService
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testFindFeatureService
parameter_list|()
block|{
name|FeaturesService
name|featureService
init|=
name|niceMock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
decl_stmt|;
name|replay
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|FeaturesService
argument_list|>
name|ref
init|=
name|niceMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|BundleContext
name|context
init|=
name|niceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getServiceReference
argument_list|(
name|eq
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|eq
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|featureService
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|RunMojo
name|mojo
init|=
operator|new
name|RunMojo
argument_list|()
decl_stmt|;
name|Object
name|service
init|=
name|mojo
operator|.
name|findFeatureService
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setPrivateField
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Field
name|field
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setInheritedPrivateField
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
block|{
name|Field
name|field
init|=
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|obj
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

