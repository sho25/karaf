begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Macro
import|;
end_import

begin_import
import|import
name|aQute
operator|.
name|bnd
operator|.
name|osgi
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|ResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeatureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|JaxbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Deployer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
operator|.
name|CustomDownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|MojoSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|config
operator|.
name|PropertiesLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolvers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|namespace
operator|.
name|IdentityNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Wire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|ResolutionException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
operator|.
name|MANIFEST_NAME
import|;
end_import

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"verify"
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|COMPILE_PLUS_RUNTIME
argument_list|)
specifier|public
class|class
name|VerifyMojo
extends|extends
name|MojoSupport
block|{
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"descriptors"
argument_list|)
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|descriptors
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"features"
argument_list|)
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|features
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"framework"
argument_list|)
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|framework
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"configuration"
argument_list|)
specifier|protected
name|String
name|configuration
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"distribution"
argument_list|,
name|defaultValue
operator|=
literal|"org.apache.karaf:apache-karaf"
argument_list|)
specifier|protected
name|String
name|distribution
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"javase"
argument_list|)
specifier|protected
name|String
name|javase
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"dist-dir"
argument_list|)
specifier|protected
name|String
name|distDir
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"additional-metadata"
argument_list|)
specifier|protected
name|File
name|additionalMetadata
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"ignore-missing-conditions"
argument_list|)
specifier|protected
name|boolean
name|ignoreMissingConditions
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"fail"
argument_list|)
specifier|protected
name|String
name|fail
init|=
literal|"end"
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|property
operator|=
literal|"verify-transitive"
argument_list|)
specifier|protected
name|boolean
name|verifyTransitive
init|=
literal|false
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project}"
argument_list|,
name|readonly
operator|=
literal|true
argument_list|)
specifier|protected
name|MavenProject
name|project
decl_stmt|;
specifier|protected
name|MavenResolver
name|resolver
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|remote
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|obj
range|:
name|project
operator|.
name|getRemoteProjectRepositories
argument_list|()
control|)
block|{
if|if
condition|(
name|remote
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|remote
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|remote
operator|.
name|append
argument_list|(
name|invoke
argument_list|(
name|obj
argument_list|,
literal|"getUrl"
argument_list|)
argument_list|)
expr_stmt|;
name|remote
operator|.
name|append
argument_list|(
literal|"@id="
argument_list|)
operator|.
name|append
argument_list|(
name|invoke
argument_list|(
name|obj
argument_list|,
literal|"getId"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|Boolean
operator|)
name|invoke
argument_list|(
name|getPolicy
argument_list|(
name|obj
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"isEnabled"
argument_list|)
operator|)
condition|)
block|{
name|remote
operator|.
name|append
argument_list|(
literal|"@noreleases"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|Boolean
operator|)
name|invoke
argument_list|(
name|getPolicy
argument_list|(
name|obj
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"isEnabled"
argument_list|)
condition|)
block|{
name|remote
operator|.
name|append
argument_list|(
literal|"@snapshots"
argument_list|)
expr_stmt|;
block|}
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Using repositories: "
operator|+
name|remote
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"maven.repositories"
argument_list|,
name|remote
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: add more configuration bits ?
name|resolver
operator|=
name|MavenResolvers
operator|.
name|createMavenResolver
argument_list|(
name|config
argument_list|,
literal|"maven"
argument_list|)
expr_stmt|;
name|doExecute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Object
name|invoke
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|getter
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
return|return
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|getter
argument_list|)
operator|.
name|invoke
argument_list|(
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to build remote repository from "
operator|+
name|object
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Object
name|getPolicy
parameter_list|(
name|Object
name|object
parameter_list|,
name|boolean
name|snapshots
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
return|return
name|invoke
argument_list|(
name|object
argument_list|,
literal|"getPolicy"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Boolean
operator|.
name|TYPE
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|snapshots
block|}
argument_list|)
return|;
block|}
specifier|private
name|Object
name|invoke
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|getter
parameter_list|,
name|Class
index|[]
name|types
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
return|return
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|getter
argument_list|,
name|types
argument_list|)
operator|.
name|invoke
argument_list|(
name|object
argument_list|,
name|params
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to build remote repository from "
operator|+
name|object
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|doExecute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.home"
argument_list|,
literal|"target/karaf"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.data"
argument_list|,
literal|"target/karaf/data"
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|additionalMetadata
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|Reader
name|reader
init|=
operator|new
name|FileReader
argument_list|(
name|additionalMetadata
argument_list|)
init|)
block|{
name|Properties
name|metadata
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|metadata
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to load additional metadata from "
operator|+
name|additionalMetadata
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// TODO: allow using external configuration ?
name|ScheduledExecutorService
name|executor
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|DownloadManager
name|manager
init|=
operator|new
name|CustomDownloadManager
argument_list|(
name|resolver
argument_list|,
name|executor
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|repositories
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Feature
argument_list|>
argument_list|>
name|allFeatures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|repositories
operator|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|descriptors
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|repoUri
range|:
name|repositories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|repositories
operator|.
name|get
argument_list|(
name|repoUri
argument_list|)
operator|.
name|getFeature
argument_list|()
decl_stmt|;
comment|// Ack features to inline configuration files urls
for|for
control|(
name|Feature
name|feature
range|:
name|features
control|)
block|{
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Bundle
name|bi
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
name|String
name|loc
init|=
name|bi
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|nloc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|contains
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
for|for
control|(
name|ConfigFile
name|cfi
range|:
name|feature
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
if|if
condition|(
name|cfi
operator|.
name|getFinalname
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|loc
operator|.
name|substring
argument_list|(
name|loc
operator|.
name|indexOf
argument_list|(
literal|"file:"
argument_list|)
operator|+
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|nloc
operator|=
name|cfi
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nloc
operator|!=
literal|null
condition|)
block|{
name|Field
name|field
init|=
name|bi
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|bi
argument_list|,
name|loc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|loc
operator|.
name|indexOf
argument_list|(
literal|"file:"
argument_list|)
argument_list|)
operator|+
name|nloc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|allFeatures
operator|.
name|put
argument_list|(
name|repoUri
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to load features descriptors"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Feature
argument_list|>
name|featuresToTest
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|verifyTransitive
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|Feature
argument_list|>
name|features
range|:
name|allFeatures
operator|.
name|values
argument_list|()
control|)
block|{
name|featuresToTest
operator|.
name|addAll
argument_list|(
name|features
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|uri
range|:
name|descriptors
control|)
block|{
name|featuresToTest
operator|.
name|addAll
argument_list|(
name|allFeatures
operator|.
name|get
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|features
operator|!=
literal|null
operator|&&
operator|!
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"|"
argument_list|)
expr_stmt|;
block|}
name|String
name|p
init|=
name|feature
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\\\."
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|feature
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/.*"
argument_list|)
expr_stmt|;
block|}
block|}
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Feature
argument_list|>
name|iterator
init|=
name|featuresToTest
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Feature
name|feature
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pattern
operator|.
name|matcher
argument_list|(
name|id
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|fmk
range|:
name|framework
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"feature.framework."
operator|+
name|fmk
argument_list|,
name|fmk
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Exception
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|featuresToTest
control|)
block|{
try|try
block|{
name|String
name|id
init|=
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|verifyResolution
argument_list|(
name|manager
argument_list|,
name|repositories
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|id
argument_list|)
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Verification of feature "
operator|+
name|id
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ResolutionException
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"first"
operator|.
name|equals
argument_list|(
name|fail
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ids
operator|.
name|addAll
argument_list|(
name|cond
operator|.
name|getCondition
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|verifyResolution
argument_list|(
name|manager
argument_list|,
name|repositories
argument_list|,
name|ids
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Verification of feature "
operator|+
name|ids
operator|+
literal|" succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|ignoreMissingConditions
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ResolutionException
condition|)
block|{
name|boolean
name|ignore
init|=
literal|true
decl_stmt|;
name|Collection
argument_list|<
name|Requirement
argument_list|>
name|requirements
init|=
operator|(
operator|(
name|ResolutionException
operator|)
name|e
operator|.
name|getCause
argument_list|()
operator|)
operator|.
name|getUnresolvedRequirements
argument_list|()
decl_stmt|;
for|for
control|(
name|Requirement
name|req
range|:
name|requirements
control|)
block|{
name|ignore
operator|&=
operator|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getNamespace
argument_list|()
argument_list|)
operator|&&
name|ResourceUtils
operator|.
name|TYPE_FEATURE
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|&&
name|cond
operator|.
name|getCondition
argument_list|()
operator|.
name|contains
argument_list|(
name|req
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|IdentityNamespace
operator|.
name|IDENTITY_NAMESPACE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|ignore
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Feature resolution failed for "
operator|+
name|ids
operator|+
literal|"\nMessage: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ResolutionException
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"first"
operator|.
name|equals
argument_list|(
name|fail
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
if|if
condition|(
literal|"end"
operator|.
name|equals
argument_list|(
name|fail
argument_list|)
operator|&&
operator|!
name|failures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Verification failures"
argument_list|,
operator|new
name|MultiException
argument_list|(
literal|"Verification failures"
argument_list|,
name|failures
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|verifyResolution
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|repositories
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
try|try
block|{
name|Bundle
name|systemBundle
init|=
name|getSystemBundle
argument_list|(
name|getMetadata
argument_list|(
name|properties
argument_list|,
literal|"metadata#"
argument_list|)
argument_list|)
decl_stmt|;
name|DummyDeployCallback
name|callback
init|=
operator|new
name|DummyDeployCallback
argument_list|(
name|systemBundle
argument_list|,
name|repositories
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
operator|new
name|ResolverImpl
argument_list|(
operator|new
name|MavenResolverLog
argument_list|()
argument_list|)
argument_list|,
name|callback
argument_list|)
decl_stmt|;
comment|// Install framework
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
name|createDeploymentRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fmwk
range|:
name|framework
control|)
block|{
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
name|fmwk
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|deployer
operator|.
name|deploy
argument_list|(
name|callback
operator|.
name|getDeploymentState
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to resolve framework features"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|/*             boolean resolveOptionalImports = getResolveOptionalImports(properties);              DeploymentBuilder builder = new DeploymentBuilder(                     manager,                     null,                     repositories.values(),                     -1 // Disable url handlers             );             Map<String, Resource> downloadedResources = builder.download(                     getPrefixedProperties(properties, "feature."),                     getPrefixedProperties(properties, "bundle."),                     getPrefixedProperties(properties, "fab."),                     getPrefixedProperties(properties, "req."),                     getPrefixedProperties(properties, "override."),                     getPrefixedProperties(properties, "optional."),                     getMetadata(properties, "metadata#")             );              for (String uri : getPrefixedProperties(properties, "resources.")) {                 builder.addResourceRepository(new MetadataRepository(new HttpMetadataProvider(uri)));             }             */
comment|// Install features
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|prereqs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|deployer
operator|.
name|deploy
argument_list|(
name|callback
operator|.
name|getDeploymentState
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Deployer
operator|.
name|PartialDeploymentException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prereqs
operator|.
name|containsAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
condition|)
block|{
name|prereqs
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Deployment aborted due to loop in missing prerequisites: "
operator|+
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|// TODO: find unused resources ?
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Feature resolution failed for "
operator|+
name|features
operator|+
literal|"\nMessage: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\nRepositories: "
operator|+
name|toString
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|repositories
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|"\nResources: "
operator|+
name|toString
argument_list|(
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|manager
operator|.
name|getProviders
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error verifying feature "
operator|+
name|features
operator|+
literal|"\nMessage: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Deployer
operator|.
name|DeploymentRequest
name|createDeploymentRequest
parameter_list|()
block|{
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|FeaturesService
operator|.
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|FeaturesService
operator|.
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|collection
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|collection
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Bundle
name|getSystemBundle
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|VersionRange
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|configPropURL
decl_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|configPropURL
operator|=
operator|new
name|URL
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Artifact
name|karafDistro
init|=
name|project
operator|.
name|getArtifactMap
argument_list|()
operator|.
name|get
argument_list|(
name|distribution
argument_list|)
decl_stmt|;
if|if
condition|(
name|karafDistro
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"The karaf distribution "
operator|+
name|distribution
operator|+
literal|" is not a dependency"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"kar"
operator|.
name|equals
argument_list|(
name|karafDistro
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|distDir
operator|==
literal|null
condition|)
block|{
name|distDir
operator|=
literal|"resources"
expr_stmt|;
block|}
name|String
name|dir
init|=
name|distDir
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
name|dir
operator|=
name|karafDistro
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|karafDistro
operator|.
name|getBaseVersion
argument_list|()
expr_stmt|;
block|}
name|configPropURL
operator|=
operator|new
name|URL
argument_list|(
literal|"jar:file:"
operator|+
name|karafDistro
operator|.
name|getFile
argument_list|()
operator|+
literal|"!/"
operator|+
name|dir
operator|+
literal|"/etc/config.properties"
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|configProps
init|=
name|PropertiesLoader
operator|.
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//        copySystemProperties(configProps);
if|if
condition|(
name|javase
operator|==
literal|null
condition|)
block|{
name|configProps
operator|.
name|put
argument_list|(
literal|"java.specification.version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.specification.version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configProps
operator|.
name|put
argument_list|(
literal|"java.specification.version"
argument_list|,
name|javase
argument_list|)
expr_stmt|;
block|}
name|configProps
operator|.
name|substitute
argument_list|()
expr_stmt|;
name|Attributes
name|attributes
init|=
operator|new
name|Attributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_MANIFESTVERSION
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|,
literal|"system.bundle"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|,
literal|"0.0.0"
argument_list|)
expr_stmt|;
name|String
name|exportPackages
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
literal|"org.osgi.framework.system.packages"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configProps
operator|.
name|containsKey
argument_list|(
literal|"org.osgi.framework.system.packages.extra"
argument_list|)
condition|)
block|{
name|exportPackages
operator|+=
literal|","
operator|+
name|configProps
operator|.
name|getProperty
argument_list|(
literal|"org.osgi.framework.system.packages.extra"
argument_list|)
expr_stmt|;
block|}
name|exportPackages
operator|=
name|exportPackages
operator|.
name|replaceAll
argument_list|(
literal|",\\s*,"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|,
name|exportPackages
argument_list|)
expr_stmt|;
name|String
name|systemCaps
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
literal|"org.osgi.framework.system.capabilities"
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|PROVIDE_CAPABILITY
argument_list|,
name|systemCaps
argument_list|)
expr_stmt|;
comment|// TODO: support metadata overrides on system bundle
comment|//        attributes = DeploymentBuilder.overrideAttributes(attributes, metadata);
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FakeBundleRevision
name|resource
init|=
operator|new
name|FakeBundleRevision
argument_list|(
name|headers
argument_list|,
literal|"system-bundle"
argument_list|,
literal|0l
argument_list|)
decl_stmt|;
return|return
name|resource
operator|.
name|getBundle
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loadRepositories
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|uris
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loaded
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repository
range|:
name|uris
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|repository
argument_list|,
operator|new
name|DownloadCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
specifier|final
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|provider
operator|.
name|open
argument_list|()
init|)
block|{
name|Features
name|featuresModel
init|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|,
name|is
argument_list|,
literal|false
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|loaded
init|)
block|{
name|loaded
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|,
name|featuresModel
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|innerRepository
range|:
name|featuresModel
operator|.
name|getRepository
argument_list|()
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|innerRepository
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|loaded
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getPrefixedProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|url
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|url
operator|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|VersionRange
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|getMetadata
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|VersionRange
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|String
name|val
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|key
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|Map
argument_list|<
name|VersionRange
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|ranges
init|=
name|result
operator|.
name|get
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranges
operator|==
literal|null
condition|)
block|{
name|ranges
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|ranges
argument_list|)
expr_stmt|;
block|}
name|String
name|version
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
operator|!
name|version
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|Processor
name|processor
init|=
operator|new
name|Processor
argument_list|()
decl_stmt|;
name|processor
operator|.
name|setProperty
argument_list|(
literal|"@"
argument_list|,
name|VersionTable
operator|.
name|getVersion
argument_list|(
name|version
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Macro
name|macro
init|=
operator|new
name|Macro
argument_list|(
name|processor
argument_list|)
decl_stmt|;
name|version
operator|=
name|macro
operator|.
name|process
argument_list|(
literal|"${range;[==,=+)}"
argument_list|)
expr_stmt|;
block|}
name|VersionRange
name|range
init|=
operator|new
name|VersionRange
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hdrs
init|=
name|ranges
operator|.
name|get
argument_list|(
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|hdrs
operator|==
literal|null
condition|)
block|{
name|hdrs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|ranges
operator|.
name|put
argument_list|(
name|range
argument_list|,
name|hdrs
argument_list|)
expr_stmt|;
block|}
name|hdrs
operator|.
name|put
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
class|class
name|FakeBundleRevision
extends|extends
name|ResourceImpl
implements|implements
name|BundleRevision
implements|,
name|BundleStartLevel
block|{
specifier|private
specifier|final
name|Bundle
name|bundle
decl_stmt|;
specifier|private
name|int
name|startLevel
decl_stmt|;
specifier|public
name|FakeBundleRevision
parameter_list|(
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|long
name|bundleId
parameter_list|)
throws|throws
name|BundleException
block|{
name|ResourceBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|location
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
operator|(
name|Bundle
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Bundle
operator|.
name|class
block|}
argument_list|,
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hashCode"
argument_list|)
condition|)
block|{
return|return
name|FakeBundleRevision
operator|.
name|this
operator|.
name|hashCode
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"equals"
argument_list|)
condition|)
block|{
return|return
name|proxy
operator|==
name|args
index|[
literal|0
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"toString"
argument_list|)
condition|)
block|{
return|return
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"/"
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"adapt"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|args
index|[
literal|0
index|]
operator|==
name|BundleRevision
operator|.
name|class
condition|)
block|{
return|return
name|FakeBundleRevision
operator|.
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|args
index|[
literal|0
index|]
operator|==
name|BundleStartLevel
operator|.
name|class
condition|)
block|{
return|return
name|FakeBundleRevision
operator|.
name|this
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getHeaders"
argument_list|)
condition|)
block|{
return|return
name|headers
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getBundleId"
argument_list|)
condition|)
block|{
return|return
name|bundleId
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getLocation"
argument_list|)
condition|)
block|{
return|return
name|location
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getSymbolicName"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getVersion"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Version
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getState"
argument_list|)
condition|)
block|{
return|return
name|Bundle
operator|.
name|ACTIVE
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getLastModified"
argument_list|)
condition|)
block|{
return|return
literal|0l
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStartLevel
parameter_list|()
block|{
return|return
name|startLevel
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStartLevel
parameter_list|(
name|int
name|startLevel
parameter_list|)
block|{
name|this
operator|.
name|startLevel
operator|=
name|startLevel
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistentlyStarted
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActivationPolicyUsed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSymbolicName
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getSymbolicName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|getDeclaredCapabilities
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|getDeclaredRequirements
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTypes
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BundleWiring
name|getWiring
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Bundle
name|getBundle
parameter_list|()
block|{
return|return
name|bundle
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DummyDeployCallback
implements|implements
name|Deployer
operator|.
name|DeployCallback
block|{
specifier|private
specifier|final
name|Bundle
name|systemBundle
decl_stmt|;
specifier|private
specifier|final
name|Deployer
operator|.
name|DeploymentState
name|dstate
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|nextBundleId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|DummyDeployCallback
parameter_list|(
name|Bundle
name|sysBundle
parameter_list|,
name|Collection
argument_list|<
name|Features
argument_list|>
name|repositories
parameter_list|)
throws|throws
name|Exception
block|{
name|systemBundle
operator|=
name|sysBundle
expr_stmt|;
name|dstate
operator|=
operator|new
name|Deployer
operator|.
name|DeploymentState
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|features
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|bundlesPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|filtersPerRegion
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|dstate
operator|.
name|state
operator|=
operator|new
name|State
argument_list|()
expr_stmt|;
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|bundlesPerRegion
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|.
name|put
argument_list|(
literal|0l
argument_list|,
name|systemBundle
argument_list|)
expr_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|repositories
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|repo
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|dstate
operator|.
name|features
operator|.
name|put
argument_list|(
name|f
operator|.
name|getId
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Deployer
operator|.
name|DeploymentState
name|getDeploymentState
parameter_list|()
block|{
return|return
name|dstate
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|verbose
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|saveState
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|dstate
operator|.
name|state
operator|.
name|replace
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|persistResolveRequest
parameter_list|(
name|Deployer
operator|.
name|DeploymentRequest
name|request
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|installFeature
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|feature
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|callListeners
parameter_list|(
name|FeatureEvent
name|featureEvent
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|Bundle
name|installBundle
parameter_list|(
name|String
name|region
parameter_list|,
name|String
name|uri
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|BundleException
block|{
try|try
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|MANIFEST_NAME
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Attributes
name|attributes
init|=
operator|new
name|Manifest
argument_list|(
name|zis
argument_list|)
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|BundleRevision
name|revision
init|=
operator|new
name|FakeBundleRevision
argument_list|(
name|headers
argument_list|,
name|uri
argument_list|,
name|nextBundleId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|revision
operator|.
name|getBundle
argument_list|()
decl_stmt|;
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|dstate
operator|.
name|bundlesPerRegion
argument_list|,
name|region
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|dstate
operator|.
name|bundles
operator|.
name|put
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BundleException
argument_list|(
literal|"Unable to install bundle"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|uri
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|BundleException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstall
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|BundleException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|BundleException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|stopBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|int
name|options
parameter_list|)
throws|throws
name|BundleException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|setBundleStartLevel
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|int
name|startLevel
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|refreshPackages
parameter_list|(
name|Collection
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|InterruptedException
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|resolveBundles
parameter_list|(
name|Set
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Wire
argument_list|>
argument_list|>
name|wiring
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|Bundle
argument_list|>
name|resToBnd
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|replaceDigraph
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|policies
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|BundleException
throws|,
name|InvalidSyntaxException
block|{         }
block|}
specifier|public
class|class
name|MavenResolverLog
extends|extends
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|Logger
block|{
specifier|public
name|MavenResolverLog
parameter_list|()
block|{
name|super
argument_list|(
name|Logger
operator|.
name|LOG_DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doLog
parameter_list|(
name|int
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
switch|switch
condition|(
name|level
condition|)
block|{
case|case
name|LOG_DEBUG
case|:
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOG_INFO
case|:
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOG_WARNING
case|:
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOG_ERROR
case|:
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

