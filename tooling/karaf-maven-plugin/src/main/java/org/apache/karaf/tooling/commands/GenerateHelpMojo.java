begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|HelpOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|meta
operator|.
name|ActionMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|meta
operator|.
name|ActionMetaDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|util
operator|.
name|ShellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xbean
operator|.
name|finder
operator|.
name|ClassFinder
import|;
end_import

begin_comment
comment|/**  * Generates help documentation for Karaf commands  *  * @goal commands-generate-help  * @phase generate-resources  * @execute phase="generate-resources"  * @requiresDependencyResolution runtime  * @inheritByDefault false  * @description Generates help for Karaf commands  */
end_comment

begin_class
specifier|public
class|class
name|GenerateHelpMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * The maven project.      *      * @parameter expression="${project}"      * @required      */
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The output folder      *      * @parameter default-value="${project.build.directory}/docbkx/sources"      */
specifier|protected
name|File
name|targetFolder
decl_stmt|;
comment|/**      * The output format      *      * @parameter default-value="docbx";      */
specifier|protected
name|String
name|format
decl_stmt|;
comment|/**      * The classloader to use for loading the commands      *      * @parameter default-value="project"      */
specifier|protected
name|String
name|classLoader
decl_stmt|;
comment|/**      * Includes the --help command output in the generated documentation      *      * @parameter default_value="true"      */
specifier|protected
name|boolean
name|includeHelpOption
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_CONF
init|=
literal|"conf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FORMAT_DOCBX
init|=
literal|"docbx"
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|FORMAT_DOCBX
operator|.
name|equals
argument_list|(
name|format
argument_list|)
operator|&&
operator|!
name|FORMAT_CONF
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Unsupported format: "
operator|+
name|format
operator|+
literal|". Supported formats are: docbx or conf."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|targetFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|targetFolder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|ClassFinder
name|finder
decl_stmt|;
if|if
condition|(
literal|"project"
operator|.
name|equals
argument_list|(
name|classLoader
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|project
operator|.
name|getCompileClasspathElements
argument_list|()
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|object
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassLoader
name|loader
init|=
operator|new
name|URLClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|finder
operator|=
operator|new
name|ClassFinder
argument_list|(
name|loader
argument_list|,
name|urls
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"plugin"
operator|.
name|equals
argument_list|(
name|classLoader
argument_list|)
condition|)
block|{
name|finder
operator|=
operator|new
name|ClassFinder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"classLoader attribute must be 'project' or 'plugin'"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
name|finder
operator|.
name|findAnnotatedClasses
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"No command found"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|commands
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|clazz
range|:
name|classes
control|)
block|{
try|try
block|{
name|Action
name|action
init|=
operator|(
name|Action
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|ActionMetaData
name|meta
init|=
operator|new
name|ActionMetaDataFactory
argument_list|()
operator|.
name|create
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|help
init|=
name|printHelp
argument_list|(
name|action
argument_list|,
name|meta
argument_list|,
name|format
argument_list|,
name|includeHelpOption
argument_list|)
decl_stmt|;
name|Command
name|cmd
init|=
name|meta
operator|.
name|getCommand
argument_list|()
decl_stmt|;
name|File
name|output
init|=
literal|null
decl_stmt|;
comment|// skip the *-help command
if|if
condition|(
name|cmd
operator|.
name|scope
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|FORMAT_DOCBX
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|output
operator|=
operator|new
name|File
argument_list|(
name|targetFolder
argument_list|,
name|cmd
operator|.
name|scope
argument_list|()
operator|+
literal|"-"
operator|+
name|cmd
operator|.
name|name
argument_list|()
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FORMAT_CONF
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|output
operator|=
operator|new
name|File
argument_list|(
name|targetFolder
argument_list|,
name|cmd
operator|.
name|scope
argument_list|()
operator|+
literal|"-"
operator|+
name|cmd
operator|.
name|name
argument_list|()
operator|+
literal|".conf"
argument_list|)
expr_stmt|;
block|}
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|output
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|cmds
init|=
name|commands
operator|.
name|get
argument_list|(
name|cmd
operator|.
name|scope
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmds
operator|==
literal|null
condition|)
block|{
name|cmds
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|commands
operator|.
name|put
argument_list|(
name|cmd
operator|.
name|scope
argument_list|()
argument_list|,
name|cmds
argument_list|)
expr_stmt|;
block|}
name|cmds
operator|.
name|add
argument_list|(
name|cmd
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found command: "
operator|+
name|cmd
operator|.
name|scope
argument_list|()
operator|+
literal|":"
operator|+
name|cmd
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to write help for "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|FORMAT_DOCBX
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|PrintStream
name|writer
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|targetFolder
argument_list|,
literal|"commands.xml"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<chapter id='commands' xmlns:xi=\"http://www.w3.org/2001/XInclude\">"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<title>Commands</title>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<toc></toc>"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|commands
operator|.
name|keySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<section id='commands-"
operator|+
name|key
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"<title>"
operator|+
name|key
operator|+
literal|"</title>"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|commands
operator|.
name|get
argument_list|(
name|key
argument_list|)
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<xi:include href='"
operator|+
name|key
operator|+
literal|"-"
operator|+
name|cmd
operator|+
literal|".xml' parse='xml'/>"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"</section>"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
literal|"</chapter>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FORMAT_CONF
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|PrintStream
name|writer
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|targetFolder
argument_list|,
literal|"commands.conf"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"h1. Commands"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|commands
operator|.
name|keySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"h2. "
operator|+
name|key
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|cmd
range|:
name|commands
operator|.
name|get
argument_list|(
name|key
argument_list|)
control|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"* ["
operator|+
name|key
operator|+
literal|":"
operator|+
name|cmd
operator|+
literal|"|"
operator|+
name|key
operator|+
literal|"-"
operator|+
name|cmd
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error building commands help"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|printHelp
parameter_list|(
name|Action
name|action
parameter_list|,
name|ActionMetaData
name|meta
parameter_list|,
name|String
name|format
parameter_list|,
name|boolean
name|includeHelpOption
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|newout
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
if|if
condition|(
name|FORMAT_DOCBX
operator|.
name|equals
argument_list|(
name|format
argument_list|)
condition|)
block|{
name|printUsageDocBook
argument_list|(
name|action
argument_list|,
name|meta
argument_list|,
name|newout
argument_list|,
name|includeHelpOption
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printUsageConf
argument_list|(
name|action
argument_list|,
name|meta
argument_list|,
name|newout
argument_list|,
name|includeHelpOption
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|printUsage
argument_list|(
name|action
argument_list|,
name|newout
argument_list|,
literal|false
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|newout
operator|.
name|close
argument_list|()
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|printUsageConf
parameter_list|(
name|Action
name|action
parameter_list|,
name|ActionMetaData
name|actionMeta
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|includeHelpOption
parameter_list|)
block|{
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|optionsMap
init|=
name|actionMeta
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|argsMap
init|=
name|actionMeta
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Argument
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|Argument
argument_list|>
argument_list|(
name|argsMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|arguments
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Argument
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Argument
name|o1
parameter_list|,
name|Argument
name|o2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|o1
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|o2
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|HashSet
argument_list|<
name|Option
argument_list|>
argument_list|(
name|optionsMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeHelpOption
condition|)
name|options
operator|.
name|add
argument_list|(
name|HelpOption
operator|.
name|HELP
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<section>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<section>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<title>Description</title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<para>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|command
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</para>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</section>"
argument_list|)
expr_stmt|;
name|StringBuffer
name|syntax
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|command
operator|.
name|scope
argument_list|()
argument_list|,
name|command
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|" [options]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|argument
operator|.
name|required
argument_list|()
condition|?
literal|"%s "
else|:
literal|"[%s] "
argument_list|,
name|argument
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<section>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<title>Syntax</title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<para>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|syntax
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</para>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</section>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<section>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<title>Arguments</title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<informaltable>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|argument
operator|.
name|name
argument_list|()
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|String
name|description
init|=
name|argument
operator|.
name|description
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|argument
operator|.
name|required
argument_list|()
condition|)
block|{
try|try
block|{
name|argsMap
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|argsMap
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
name|description
operator|+=
literal|" (defaults to "
operator|+
name|o
operator|.
name|toString
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|description
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</informaltable>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</section>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<section>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<title>Options</title>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<informaltable>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
name|String
name|opt
init|=
name|option
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|description
init|=
name|option
operator|.
name|description
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|option
operator|.
name|aliases
argument_list|()
control|)
block|{
name|opt
operator|+=
literal|", "
operator|+
name|alias
expr_stmt|;
block|}
try|try
block|{
name|optionsMap
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|optionsMap
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
name|description
operator|+=
literal|" (defaults to "
operator|+
name|o
operator|.
name|toString
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                  }
name|out
operator|.
name|println
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|opt
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<td>"
operator|+
name|description
operator|+
literal|"</td>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</informaltable>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</section>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|detailedDescription
argument_list|()
operator|!=
literal|null
operator|&&
name|command
operator|.
name|detailedDescription
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<section>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<title>Details</title>"
argument_list|)
expr_stmt|;
name|String
name|description
init|=
name|loadDescription
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
argument_list|,
name|command
operator|.
name|detailedDescription
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<para>"
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</section>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printUsageDocBook
parameter_list|(
name|Action
name|action
parameter_list|,
name|ActionMetaData
name|actionMeta
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|includeHelpOption
parameter_list|)
block|{
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|optionsMap
init|=
name|actionMeta
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|argsMap
init|=
name|actionMeta
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|Command
name|command
init|=
name|actionMeta
operator|.
name|getCommand
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Argument
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|Argument
argument_list|>
argument_list|(
name|argsMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|arguments
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Argument
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Argument
name|o1
parameter_list|,
name|Argument
name|o2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|o1
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|o2
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|HashSet
argument_list|<
name|Option
argument_list|>
argument_list|(
name|optionsMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeHelpOption
condition|)
name|options
operator|.
name|add
argument_list|(
name|HelpOption
operator|.
name|HELP
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"h1. "
operator|+
name|command
operator|.
name|scope
argument_list|()
operator|+
literal|":"
operator|+
name|command
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"h2. Description"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|command
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|StringBuffer
name|syntax
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|command
operator|.
name|scope
argument_list|()
argument_list|,
name|command
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|" \\[options\\]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|argument
operator|.
name|required
argument_list|()
condition|?
literal|"%s "
else|:
literal|"\\[%s\\] "
argument_list|,
name|argument
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"h2. Syntax"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|syntax
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"h2. Arguments"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"|| Name || Description ||"
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
name|String
name|description
init|=
name|argument
operator|.
name|description
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|argument
operator|.
name|required
argument_list|()
condition|)
block|{
try|try
block|{
name|argsMap
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|argsMap
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
name|description
operator|+=
literal|" (defaults to "
operator|+
name|o
operator|.
name|toString
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"| "
operator|+
name|argument
operator|.
name|name
argument_list|()
operator|+
literal|" | "
operator|+
name|description
operator|+
literal|" |"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"h2. Options"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"|| Name || Description ||"
argument_list|)
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
name|String
name|opt
init|=
name|option
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|desc
init|=
name|option
operator|.
name|description
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|option
operator|.
name|aliases
argument_list|()
control|)
block|{
name|opt
operator|+=
literal|", "
operator|+
name|alias
expr_stmt|;
block|}
try|try
block|{
name|optionsMap
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|optionsMap
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
name|desc
operator|+=
literal|" (defaults to "
operator|+
name|o
operator|.
name|toString
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
name|out
operator|.
name|println
argument_list|(
literal|"| "
operator|+
name|opt
operator|+
literal|" | "
operator|+
name|desc
operator|+
literal|" |"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|detailedDescription
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"h2. Details"
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
name|loadDescription
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
argument_list|,
name|command
operator|.
name|detailedDescription
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|loadDescription
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|desc
operator|=
name|ShellUtil
operator|.
name|loadClassPathResource
argument_list|(
name|clazz
argument_list|,
name|desc
operator|.
name|substring
argument_list|(
literal|"classpath:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
block|}
end_class

end_unit

