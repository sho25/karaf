begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ResolutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_class
specifier|public
class|class
name|ResolutionListenerImpl
implements|implements
name|ResolutionListener
block|{
specifier|private
name|Stack
name|parents
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|artifacts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Node
name|rootNode
decl_stmt|;
specifier|private
name|Log
name|log
decl_stmt|;
specifier|public
name|void
name|setLog
parameter_list|(
name|Log
name|log
parameter_list|)
block|{
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
block|}
specifier|public
name|Log
name|getLog
parameter_list|()
block|{
return|return
name|log
return|;
block|}
specifier|public
name|void
name|testArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// getLog().debug("testArtifact: " + artifact);
comment|// intentionally blank
block|}
specifier|public
name|void
name|startProcessChildren
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// getLog().debug("startProcessChildren: " + artifact);
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|artifacts
operator|.
name|get
argument_list|(
name|artifact
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rootNode
operator|=
name|node
expr_stmt|;
block|}
name|parents
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endProcessChildren
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// getLog().debug("endProcessChildren: " + artifact);
name|Node
name|check
init|=
operator|(
name|Node
operator|)
name|parents
operator|.
name|pop
argument_list|()
decl_stmt|;
assert|assert
name|artifact
operator|.
name|equals
argument_list|(
name|check
operator|.
name|getArtifact
argument_list|()
argument_list|)
assert|;
block|}
specifier|public
name|void
name|omitForNearer
parameter_list|(
name|Artifact
name|omitted
parameter_list|,
name|Artifact
name|kept
parameter_list|)
block|{
comment|// getLog().debug("omitForNearer: omitted=" + omitted + ", kept=" +
comment|// kept);
assert|assert
name|omitted
operator|.
name|getDependencyConflictId
argument_list|()
operator|.
name|equals
argument_list|(
name|kept
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|)
assert|;
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|artifacts
operator|.
name|get
argument_list|(
name|omitted
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
name|node
operator|!=
literal|null
assert|;
name|node
operator|.
name|setArtifact
argument_list|(
name|kept
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|omitForCycle
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// getLog().debug("omitForCycle: " + artifact);
comment|// intentionally blank
block|}
specifier|public
name|void
name|includeArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// getLog().debug("includeArtifact: " + artifact);
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|artifacts
operator|.
name|get
argument_list|(
name|artifact
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|Node
argument_list|()
expr_stmt|;
name|artifacts
operator|.
name|put
argument_list|(
name|artifact
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|setArtifact
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Node
name|parent
init|=
operator|(
name|Node
operator|)
name|parents
operator|.
name|peek
argument_list|()
decl_stmt|;
name|parent
operator|.
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|getParents
argument_list|()
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rootNode
operator|!=
literal|null
condition|)
block|{
comment|// print(rootNode, "");
block|}
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|string
parameter_list|)
block|{
comment|// getLog().debug(string + rootNode.getArtifact());
for|for
control|(
name|Iterator
name|iter
init|=
name|node
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|n
init|=
operator|(
name|Node
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|print
argument_list|(
name|n
argument_list|,
name|string
operator|+
literal|"  "
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|updateScope
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
comment|// getLog().debug("updateScope: " + artifact);
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|artifacts
operator|.
name|get
argument_list|(
name|artifact
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|manageArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Artifact
name|replacement
parameter_list|)
block|{
comment|// getLog().debug("manageArtifact: artifact=" + artifact + ",
comment|// replacement=" + replacement);
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|artifacts
operator|.
name|get
argument_list|(
name|artifact
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|replacement
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setVersion
argument_list|(
name|replacement
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replacement
operator|.
name|getScope
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setScope
argument_list|(
name|replacement
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|updateScopeCurrentPom
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"updateScopeCurrentPom: "
operator|+
name|artifact
argument_list|)
expr_stmt|;
comment|// intentionally blank
block|}
specifier|public
name|void
name|selectVersionFromRange
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"selectVersionFromRange: "
operator|+
name|artifact
argument_list|)
expr_stmt|;
comment|// intentionally blank
block|}
specifier|public
name|void
name|restrictRange
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|Artifact
name|artifact1
parameter_list|,
name|VersionRange
name|versionRange
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"restrictRange: "
operator|+
name|artifact
argument_list|)
expr_stmt|;
comment|// intentionally blank
block|}
specifier|public
name|Node
name|getNode
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
operator|(
name|Node
operator|)
name|artifacts
operator|.
name|get
argument_list|(
name|artifact
operator|.
name|getDependencyConflictId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Collection
name|getArtifacts
parameter_list|()
block|{
return|return
name|artifacts
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
name|Node
name|getRootNode
parameter_list|()
block|{
return|return
name|rootNode
return|;
block|}
block|}
end_class

end_unit

