begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
operator|.
name|model
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|MojoSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|AbstractArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_comment
comment|/**  * Add features to a repository directory  *  * @goal features-add-to-repository  * @phase compile  * @execute phase="compile"  * @requiresDependencyResolution runtime  * @inheritByDefault true  * @description Add the features to the repository  */
end_comment

begin_class
specifier|public
class|class
name|AddToRepositoryMojo
extends|extends
name|MojoSupport
block|{
specifier|private
specifier|final
specifier|static
name|String
name|KARAF_CORE_STANDARD_FEATURE_URL
init|=
literal|"mvn:org.apache.karaf.features/standard/%s/xml/features"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|KARAF_CORE_ENTERPRISE_FEATURE_URL
init|=
literal|"mvn:org.apache.karaf.features/enterprise/%s/xml/features"
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|descriptors
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|features
decl_stmt|;
comment|/**      * @parameter expression="${project.build.directory}/features-repo"      */
specifier|private
name|File
name|repository
decl_stmt|;
comment|/**      * the target karaf version used to resolve Karaf core features descriptors      *      * @parameter      */
specifier|private
name|String
name|karafVersion
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|boolean
name|includeMvnBasedDescriptors
init|=
literal|false
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|List
argument_list|<
name|CopyFileBasedDescriptor
argument_list|>
name|copyFileBasedDescriptors
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|boolean
name|skipNonMavenProtocols
init|=
literal|true
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|boolean
name|failOnArtifactResolutionError
init|=
literal|true
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|boolean
name|resolveDefinedRepositoriesRecursively
init|=
literal|true
decl_stmt|;
comment|/**      * @parameter      */
specifier|private
name|boolean
name|addTransitiveFeatures
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
if|if
condition|(
name|karafVersion
operator|==
literal|null
condition|)
block|{
name|Package
name|p
init|=
name|Package
operator|.
name|getPackage
argument_list|(
literal|"org.apache.karaf.tooling.features"
argument_list|)
decl_stmt|;
name|karafVersion
operator|=
name|p
operator|.
name|getImplementationVersion
argument_list|()
expr_stmt|;
block|}
name|addFeatureRepo
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|KARAF_CORE_ENTERPRISE_FEATURE_URL
argument_list|,
name|karafVersion
argument_list|)
argument_list|)
expr_stmt|;
name|addFeatureRepo
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|KARAF_CORE_STANDARD_FEATURE_URL
argument_list|,
name|karafVersion
argument_list|)
argument_list|)
expr_stmt|;
name|addFeatureRepo
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|KARAF_CORE_STANDARD_FEATURE_URL
argument_list|,
name|karafVersion
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|bundles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featuresMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|descriptors
control|)
block|{
name|retrieveDescriptorsRecursively
argument_list|(
name|uri
argument_list|,
name|bundles
argument_list|,
name|featuresMap
argument_list|)
expr_stmt|;
block|}
comment|// no features specified, handle all of them
if|if
condition|(
name|features
operator|==
literal|null
condition|)
block|{
name|features
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|featuresMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|featuresBundles
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|transitiveFeatures
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|addFeatures
argument_list|(
name|features
argument_list|,
name|featuresBundles
argument_list|,
name|transitiveFeatures
argument_list|,
name|featuresMap
argument_list|)
expr_stmt|;
comment|// add the bundles of the configured features to the bundles list
name|bundles
operator|.
name|addAll
argument_list|(
name|featuresBundles
argument_list|)
expr_stmt|;
comment|// if transitive features are enabled we add the contents of those
comment|// features to the bundles list
if|if
condition|(
name|addTransitiveFeatures
condition|)
block|{
for|for
control|(
name|String
name|feature
range|:
name|transitiveFeatures
control|)
block|{
comment|// transitiveFeatures contains name/version
name|Feature
name|f
init|=
name|featuresMap
operator|.
name|get
argument_list|(
name|feature
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Adding contents of transitive feature: "
operator|+
name|feature
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|addAll
argument_list|(
name|f
operator|.
name|getBundles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Treat the config files as bundles, since it is only copying
name|bundles
operator|.
name|addAll
argument_list|(
name|f
operator|.
name|getConfigFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Base repo: "
operator|+
name|localRepo
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|currentBundle
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|Artifact
name|artifact
init|=
name|resourceToArtifact
argument_list|(
name|bundle
argument_list|,
name|skipNonMavenProtocols
argument_list|)
decl_stmt|;
comment|// Maven ArtifactResolver leaves file handles around so need to clean up
comment|// or we will run out of file descriptors
if|if
condition|(
name|currentBundle
operator|++
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|runFinalization
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|resolveAndCopyArtifact
argument_list|(
name|artifact
argument_list|,
name|remoteRepos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|copyFileBasedDescriptors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CopyFileBasedDescriptor
name|fileBasedDescriptor
range|:
name|copyFileBasedDescriptors
control|)
block|{
name|File
name|destDir
init|=
operator|new
name|File
argument_list|(
name|repository
argument_list|,
name|fileBasedDescriptor
operator|.
name|getTargetDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|fileBasedDescriptor
operator|.
name|getTargetFileName
argument_list|()
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|fileBasedDescriptor
operator|.
name|getSourceFile
argument_list|()
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error populating repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addFeatureRepo
parameter_list|(
name|String
name|featureUrl
parameter_list|)
throws|throws
name|MojoExecutionException
block|{
name|Artifact
name|featureDescArtifact
init|=
name|resourceToArtifact
argument_list|(
name|featureUrl
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|featureDescArtifact
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|resolveAndCopyArtifact
argument_list|(
name|featureDescArtifact
argument_list|,
name|remoteRepos
argument_list|)
expr_stmt|;
name|descriptors
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|featureUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Can't add "
operator|+
name|featureUrl
operator|+
literal|" in the descriptors set"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|retrieveDescriptorsRecursively
parameter_list|(
name|String
name|uri
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|bundles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featuresMap
parameter_list|)
block|{
comment|// let's ensure a mvn: based url is sitting in the local repo before we try reading it
name|Artifact
name|descriptor
decl_stmt|;
try|try
block|{
name|descriptor
operator|=
name|resourceToArtifact
argument_list|(
name|uri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|descriptor
operator|!=
literal|null
condition|)
block|{
name|resolveAndCopyArtifact
argument_list|(
name|descriptor
argument_list|,
name|remoteRepos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeMvnBasedDescriptors
condition|)
block|{
name|bundles
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|Repository
name|repo
init|=
operator|new
name|Repository
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|translateFromMaven
argument_list|(
name|uri
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|repo
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|featuresMap
operator|.
name|put
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolveDefinedRepositoriesRecursively
condition|)
block|{
for|for
control|(
name|String
name|r
range|:
name|repo
operator|.
name|getDefinedRepositories
argument_list|()
control|)
block|{
name|retrieveDescriptorsRecursively
argument_list|(
name|r
argument_list|,
name|bundles
argument_list|,
name|featuresMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Resolves and copies the given artifact to the repository path.      * Prefers to resolve using the repository of the artifact if present.      *       * @param artifact      * @param remoteRepos      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|resolveAndCopyArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|List
argument_list|<
name|ArtifactRepository
argument_list|>
name|remoteRepos
parameter_list|)
block|{
try|try
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Copying artifact: "
operator|+
name|artifact
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ArtifactRepository
argument_list|>
name|usedRemoteRepos
init|=
name|artifact
operator|.
name|getRepository
argument_list|()
operator|!=
literal|null
condition|?
name|Collections
operator|.
name|singletonList
argument_list|(
name|artifact
operator|.
name|getRepository
argument_list|()
argument_list|)
else|:
name|remoteRepos
decl_stmt|;
name|resolver
operator|.
name|resolve
argument_list|(
name|artifact
argument_list|,
name|usedRemoteRepos
argument_list|,
name|localRepo
argument_list|)
expr_stmt|;
name|File
name|destFile
init|=
operator|new
name|File
argument_list|(
name|repository
argument_list|,
name|getRelativePath
argument_list|(
name|artifact
argument_list|)
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|,
name|destFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AbstractArtifactResolutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|failOnArtifactResolutionError
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can't resolve bundle "
operator|+
name|artifact
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Can't resolve bundle "
operator|+
name|artifact
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get relative path for artifact      * TODO consider DefaultRepositoryLayout      * @param artifact      * @return relative path of the given artifact in a default repo layout      */
specifier|private
name|String
name|getRelativePath
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|dir
init|=
name|artifact
operator|.
name|getGroupId
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"/"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|String
name|name
init|=
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"-"
operator|+
name|artifact
operator|.
name|getBaseVersion
argument_list|()
operator|+
operator|(
name|artifact
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|?
literal|"-"
operator|+
name|artifact
operator|.
name|getClassifier
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|"."
operator|+
name|artifact
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
name|dir
operator|+
name|name
return|;
block|}
specifier|private
name|void
name|addFeatures
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|featuresBundles
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|transitiveFeatures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|featuresMap
parameter_list|)
block|{
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
comment|// feature could be only the name or name/version
name|int
name|delimIndex
init|=
name|feature
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|delimIndex
operator|>
literal|0
condition|)
block|{
name|version
operator|=
name|feature
operator|.
name|substring
argument_list|(
name|delimIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
name|feature
operator|=
name|feature
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|delimIndex
argument_list|)
expr_stmt|;
block|}
name|Feature
name|f
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
comment|// looking for a specific feature with name and version
name|f
operator|=
name|featuresMap
operator|.
name|get
argument_list|(
name|feature
operator|+
literal|"/"
operator|+
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// looking for the first feature name (whatever the version is)
for|for
control|(
name|String
name|key
range|:
name|featuresMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
index|[]
name|nameVersion
init|=
name|key
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|.
name|equals
argument_list|(
name|nameVersion
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|f
operator|=
name|featuresMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find the feature '"
operator|+
name|feature
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|// only add the feature to transitives if it is not
comment|// listed in the features list defined by the config
if|if
condition|(
operator|!
name|this
operator|.
name|features
operator|.
name|contains
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|transitiveFeatures
operator|.
name|add
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add the bundles of the feature to the bundle set
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Adding contents for feature: "
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|f
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|featuresBundles
operator|.
name|addAll
argument_list|(
name|f
operator|.
name|getBundles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Treat the config files as bundles, since it is only copying
name|featuresBundles
operator|.
name|addAll
argument_list|(
name|f
operator|.
name|getConfigFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addFeatures
argument_list|(
name|f
operator|.
name|getDependencies
argument_list|()
argument_list|,
name|featuresBundles
argument_list|,
name|transitiveFeatures
argument_list|,
name|featuresMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

