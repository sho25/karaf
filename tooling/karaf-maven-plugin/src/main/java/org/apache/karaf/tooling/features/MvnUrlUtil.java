begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|RepositoryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_comment
comment|/**  * Methods to convert between  * pax mvn format: mvn-uri := 'mvn:' [ repository-url '!' ] group-id '/' artifact-id [ '/' [version] [ '/' [type] [ '/' classifier ] ] ] ]  * aether coordinate format:<groupId>:<artifactId>[:<extension>[:<classifier>]]:<version>  * and repository paths  *  * N.B. we do not handle repository-url in mvn urls.  * N.B. version is required in mvn urls.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|MvnUrlUtil
block|{
specifier|private
specifier|static
specifier|final
name|DefaultRepositoryLayout
name|layout
init|=
operator|new
name|DefaultRepositoryLayout
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|aetherPatterh
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^: ]+):([^: ]+)(:([^: ]*)(:([^: ]+))?)?:([^: ]+)"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|mvnPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"mvn:([^/ ]+)/([^/ ]+)/([^/ ]*)(/([^/ ]+)(/([^/ ]+))?)?"
argument_list|)
decl_stmt|;
specifier|static
name|String
name|mvnToAether
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|mvnPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|name
return|;
block|}
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
comment|//groupId
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
comment|//artifactId
name|String
name|extension
init|=
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
decl_stmt|;
if|if
condition|(
name|present
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
if|if
condition|(
name|present
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|extension
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"jar:"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|present
argument_list|(
name|extension
argument_list|)
operator|&&
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|extension
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|present
parameter_list|(
name|String
name|part
parameter_list|)
block|{
return|return
name|part
operator|!=
literal|null
operator|&&
operator|!
name|part
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|static
name|String
name|aetherToMvn
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|aetherPatterh
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|name
return|;
block|}
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"mvn:"
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|//groupId
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|//artifactId
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
comment|//version
name|String
name|extension
init|=
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|m
operator|.
name|group
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|present
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
if|if
condition|(
name|present
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|"/jar"
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|present
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Similar to a Main class method      * Returns a path for an srtifact.      * Input: path (no ':') returns path      * Input: mvn:<groupId>/<artifactId>/<version>/<type>/<classifier> converts to default repo location path      * Input:<groupId>:<artifactId>:<type>:<classifier>:<version>:<type>:<classifier> converts to default repo location path      * type and classifier are optional.      *      *      * @param name input artifact info      * @return path as supplied or a default maven repo path      */
specifier|static
name|String
name|pathFromMaven
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|name
return|;
block|}
name|name
operator|=
name|mvnToAether
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|pathFromAether
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|static
name|String
name|pathFromAether
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|DefaultArtifact
name|artifact
init|=
operator|new
name|DefaultArtifact
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Artifact
name|mavenArtifact
init|=
name|RepositoryUtils
operator|.
name|toArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|layout
operator|.
name|pathOf
argument_list|(
name|mavenArtifact
argument_list|)
return|;
block|}
specifier|static
name|String
name|artifactToMvn
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
name|artifactToMvn
argument_list|(
name|RepositoryUtils
operator|.
name|toArtifact
argument_list|(
name|artifact
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|artifactToMvn
parameter_list|(
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|artifact
operator|.
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|bundleName
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getExtension
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
operator|&&
name|isEmpty
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
name|bundleName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
name|bundleName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s/%s"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExtension
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundleName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s/%s/%s"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getExtension
argument_list|()
argument_list|,
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bundleName
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|String
name|classifier
parameter_list|)
block|{
return|return
name|classifier
operator|==
literal|null
operator|||
name|classifier
operator|.
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
end_class

end_unit

