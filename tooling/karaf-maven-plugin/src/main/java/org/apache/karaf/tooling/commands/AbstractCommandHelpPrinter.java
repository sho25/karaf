begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCommandHelpPrinter
implements|implements
name|CommandHelpPrinter
block|{
specifier|protected
name|Argument
name|replaceDefaultArgument
parameter_list|(
name|Field
name|field
parameter_list|,
name|Argument
name|argument
parameter_list|)
block|{
if|if
condition|(
name|Argument
operator|.
name|DEFAULT
operator|.
name|equals
argument_list|(
name|argument
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Argument
name|delegate
init|=
name|argument
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|argument
operator|=
operator|new
name|Argument
argument_list|()
block|{
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|description
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|required
argument_list|()
return|;
block|}
specifier|public
name|int
name|index
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|index
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|multiValued
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|multiValued
argument_list|()
return|;
block|}
specifier|public
name|String
name|valueToShowInHelp
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|valueToShowInHelp
argument_list|()
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|annotationType
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
return|return
name|argument
return|;
block|}
specifier|protected
name|Object
name|getDefaultValue
parameter_list|(
name|Action
name|action
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
try|try
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|field
operator|.
name|get
argument_list|(
name|action
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|String
name|getDefaultValueString
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

