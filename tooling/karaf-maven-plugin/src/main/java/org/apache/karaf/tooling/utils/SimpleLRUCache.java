begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * A very simplistic LRU cache based on LinkedHashMap. It grows up to the size specified in the constructor,  * evicting least recently accessed entries to keep the size there.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SimpleLRUCache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|LinkedHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxEntries
decl_stmt|;
specifier|public
name|SimpleLRUCache
parameter_list|(
name|int
name|maxEntries
parameter_list|)
block|{
name|this
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
name|maxEntries
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleLRUCache
parameter_list|(
name|int
name|initialSize
parameter_list|,
name|float
name|loadFactor
parameter_list|,
name|int
name|maxEntries
parameter_list|)
block|{
name|super
argument_list|(
name|initialSize
argument_list|,
name|loadFactor
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxEntries
operator|=
name|maxEntries
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|maxEntries
return|;
block|}
block|}
end_class

end_unit

