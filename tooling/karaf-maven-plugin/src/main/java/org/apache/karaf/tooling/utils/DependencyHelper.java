begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|ProjectBuildingRequest
import|;
end_import

begin_comment
comment|/**  *<p>An interface for accessing available Aether subsystem (Sonatype for Maven 3.0.x or Eclipse for Maven 3.1.x)</p>  *  *<p>Some methods have {@link Object} parameters because they should be able to receive Aether classes from  * both Aether variants.</p>  */
end_comment

begin_interface
specifier|public
interface|interface
name|DependencyHelper
block|{
specifier|public
specifier|abstract
name|Collection
argument_list|<
name|LocalDependency
argument_list|>
name|getLocalDependencies
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|String
name|getTreeListing
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|getDependencies
parameter_list|(
name|MavenProject
name|project
parameter_list|,
name|boolean
name|useTransitiveDependencies
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
specifier|public
name|boolean
name|isArtifactAFeature
parameter_list|(
name|Object
name|artifact
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|getArtifactId
parameter_list|(
name|Object
name|artifact
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|getBaseVersion
parameter_list|(
name|Object
name|artifact
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|getGroupId
parameter_list|(
name|Object
name|artifact
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|String
name|getClassifier
parameter_list|(
name|Object
name|artifact
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|File
name|resolve
parameter_list|(
name|Object
name|artifact
parameter_list|,
name|Log
name|log
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|File
name|resolveById
parameter_list|(
name|String
name|id
parameter_list|,
name|Log
name|log
parameter_list|)
throws|throws
name|MojoFailureException
function_decl|;
specifier|public
specifier|abstract
name|void
name|setRepositorySession
parameter_list|(
name|ProjectBuildingRequest
name|request
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
comment|/**      * Convert a Maven<code>Artifact</code> into a PAX URL mvn format.      *      * @param artifact The Maven<code>Artifact</code>.      * @return The corresponding PAX URL mvn format (mvn:groupId/artifactId/version/type/classifier)      * @throws MojoExecutionException If the plugin execution fails.      */
specifier|public
name|String
name|artifactToMvn
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|String
name|versionOrRange
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
comment|/**      * Convert an Aether (Sonatype or Eclipse) artifact into a PAX URL mvn format.      *      * @param object The Aether<code>org.sonatype|eclipse.aether.artifact.Artifact</code>.      * @return The corresponding PAX URL mvn format (mvn:groupId/artifactId/version/type/classifier).      * @throws MojoExecutionException If the plugin execution fails.      */
specifier|public
name|String
name|artifactToMvn
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|versionOrRange
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
specifier|public
name|Artifact
name|mvnToArtifact
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
comment|/**      * Convert a PAX URL mvn format into a filesystem path.      *      * @param name PAX URL mvn format (mvn:groupId/artifactId/version/type/classifier).      * @return The filesystem path.      * @throws MojoExecutionException If the plugin execution fails.      */
specifier|public
name|String
name|pathFromMaven
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
comment|/**      * Convert an Aether coordinate format into a filesystem path.      *      * @param name The Aether coordinate format (groupId:artifactId[:extension[:classifier]]:version).      * @return The filesystem path.      * @throws MojoExecutionException If the plugin execution fails.      */
specifier|public
name|String
name|pathFromAether
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MojoExecutionException
function_decl|;
block|}
end_interface

end_unit

