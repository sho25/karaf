begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|StartDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
operator|.
name|model
operator|.
name|BundleRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_comment
comment|/**  * Export feature meta data as xml into a stream  */
end_comment

begin_class
specifier|public
class|class
name|FeatureMetaDataExporter
block|{
specifier|private
name|XMLEventWriter
name|writer
decl_stmt|;
specifier|private
name|XMLEventFactory
name|factory
decl_stmt|;
specifier|public
name|FeatureMetaDataExporter
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLOutputFactory
name|outputFactory
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|writer
operator|=
name|outputFactory
operator|.
name|createXMLEventWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|factory
operator|=
name|XMLEventFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|StartDocument
name|startDocument
init|=
name|factory
operator|.
name|createStartDocument
argument_list|()
decl_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|startDocument
argument_list|)
expr_stmt|;
name|newLine
argument_list|()
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createStartElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"features"
argument_list|)
argument_list|)
expr_stmt|;
name|newLine
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|writeFeature
parameter_list|(
name|Feature
name|feature
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeFeatureTag
argument_list|(
name|feature
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|featureDep
range|:
name|feature
operator|.
name|getDependencies
argument_list|()
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createStartElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"feature"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createCharacters
argument_list|(
name|featureDep
argument_list|)
argument_list|)
expr_stmt|;
name|endElement
argument_list|(
literal|"feature"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BundleRef
name|bundle
range|:
name|feature
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createStartElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"bundle"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getStartLevel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"start-level"
argument_list|,
name|bundle
operator|.
name|getStartLevel
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundle
operator|.
name|getArtifact
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|MavenUtil
operator|.
name|getFileName
argument_list|(
name|bundle
operator|.
name|getArtifact
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|Artifact
name|artifact
init|=
name|bundle
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|bundle
operator|.
name|readManifest
argument_list|()
expr_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getBundleSymbolicName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|results
init|=
name|bundle
operator|.
name|getBundleSymbolicName
argument_list|()
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"Bundle-SymbolicName"
argument_list|,
name|results
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"Bundle-Version"
argument_list|,
name|bundle
operator|.
name|getBundleVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"groupId"
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"artifactId"
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"type"
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"classifier"
argument_list|,
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"version"
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createCharacters
argument_list|(
name|bundle
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endElement
argument_list|(
literal|"bundle"
argument_list|)
expr_stmt|;
block|}
name|endElement
argument_list|(
literal|"feature"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeFeatureTag
parameter_list|(
name|Feature
name|feature
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createStartElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"feature"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"name"
argument_list|,
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createAttribute
argument_list|(
literal|"version"
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|newLine
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|endElement
argument_list|(
literal|"features"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createEndDocument
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|endElement
parameter_list|(
name|String
name|elementName
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createEndElement
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|elementName
argument_list|)
argument_list|)
expr_stmt|;
name|newLine
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|newLine
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|writer
operator|.
name|add
argument_list|(
name|factory
operator|.
name|createCharacters
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

