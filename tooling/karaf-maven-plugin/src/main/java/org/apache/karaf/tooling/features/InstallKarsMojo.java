begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
operator|.
name|KarArtifactInstaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|JaxbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|MojoSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|layout
operator|.
name|DefaultRepositoryLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|RepositorySystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|RepositorySystemSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|repository
operator|.
name|RemoteRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|resolution
operator|.
name|ArtifactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|resolution
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|resolution
operator|.
name|ArtifactResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|sonatype
operator|.
name|aether
operator|.
name|util
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_comment
comment|/**  * Installs kar dependencies into a server-under-construction in target/assembly  *  * @version $Revision: 1.1 $  * @goal install-kars  * @phase process-resources  * @requiresDependencyResolution runtime  * @inheritByDefault true  * @description Install kar dependencies  */
end_comment

begin_class
specifier|public
class|class
name|InstallKarsMojo
extends|extends
name|MojoSupport
block|{
comment|/**      * Directory that resources are copied to during the build.      *      * @parameter expression="${project.build.directory}/assembly"      * @required      */
specifier|protected
name|String
name|workDirectory
decl_stmt|;
comment|/**      * features config file.      *      * @parameter expression="${project.build.directory}/assembly/etc/org.apache.karaf.features.cfg"      * @required      */
specifier|protected
name|File
name|featuresCfgFile
decl_stmt|;
comment|/**      * startup.properties file.      *      * @parameter expression="${project.build.directory}/assembly/etc/startup.properties"      * @required      */
specifier|protected
name|File
name|startupPropertiesFile
decl_stmt|;
comment|/**      * default start level for bundles in features that dont' specify it      *      * @parameter      */
specifier|protected
name|int
name|defaultStartLevel
init|=
literal|30
decl_stmt|;
comment|/**      * if false, unpack to system and add bundles to startup.properties      * if true, unpack to system and add feature to features config      *      */
specifier|protected
name|boolean
name|dontAddToStartup
decl_stmt|;
comment|/**      * Directory that resources are copied to during the build.      *      * @parameter expression="${project.build.directory}/assembly/system"      * @required      */
specifier|protected
name|File
name|systemDirectory
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into system and listed in startup.properties.      *      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupFeatures
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into local-repo and listed in features service boot features.      *      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootFeatures
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into local-repo and not mentioned elsewhere.      *      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedFeatures
decl_stmt|;
comment|//Aether support
comment|/**      * The entry point to Aether, i.e. the component doing all the work.      *      * @component      */
specifier|private
name|RepositorySystem
name|repoSystem
decl_stmt|;
comment|/**      * The current repository/network configuration of Maven.      *      * @parameter default-value="${repositorySystemSession}"      * @readonly      */
specifier|private
name|RepositorySystemSession
name|repoSession
decl_stmt|;
comment|/**      * The project's remote repositories to use for the resolution of plugins and their dependencies.      *      * @parameter default-value="${project.remoteProjectRepositories}"      * @readonly      */
specifier|private
name|List
argument_list|<
name|RemoteRepository
argument_list|>
name|remoteRepos
decl_stmt|;
specifier|private
name|URI
name|system
decl_stmt|;
specifier|private
name|CommentProperties
name|startupProperties
init|=
operator|new
name|CommentProperties
argument_list|()
decl_stmt|;
comment|/**      * list of features to  install into local repo.      */
specifier|private
name|List
argument_list|<
name|Feature
argument_list|>
name|localRepoFeatures
init|=
operator|new
name|ArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|systemDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|system
operator|=
name|systemDirectory
operator|.
name|toURI
argument_list|()
expr_stmt|;
if|if
condition|(
name|startupPropertiesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|startupPropertiesFile
argument_list|)
decl_stmt|;
try|try
block|{
name|startupProperties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Could not open existing startup.properties file at "
operator|+
name|startupPropertiesFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|startupProperties
operator|.
name|setHeader
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"#Bundles to be started on startup, with startlevel"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startupPropertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|startupPropertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
name|KarArtifactInstaller
name|installer
init|=
operator|new
name|KarArtifactInstaller
argument_list|()
decl_stmt|;
name|installer
operator|.
name|setBasePath
argument_list|(
name|workDirectory
argument_list|)
expr_stmt|;
name|FeaturesService
name|featuresService
init|=
operator|new
name|OfflineFeaturesService
argument_list|()
decl_stmt|;
name|installer
operator|.
name|setFeaturesService
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
name|installer
operator|.
name|init
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|dependencies
init|=
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|dependencies
control|)
block|{
name|dontAddToStartup
operator|=
literal|"runtime"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|installer
operator|.
name|setLocalRepoPath
argument_list|(
name|system
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"kar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|acceptScope
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|File
name|file
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
try|try
block|{
name|installer
operator|.
name|install
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"Could not install kar: "
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
operator|&&
name|acceptScope
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|String
name|uri
init|=
name|MvnUrlUtil
operator|.
name|artifactToMvn
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|File
name|source
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|DefaultRepositoryLayout
name|layout
init|=
operator|new
name|DefaultRepositoryLayout
argument_list|()
decl_stmt|;
comment|//remove timestamp version
name|artifact
operator|=
name|factory
operator|.
name|createArtifactWithClassifier
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|,
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|layout
operator|.
name|pathOf
argument_list|(
name|artifact
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|target
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|bos
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|target
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Could not copy features "
operator|+
name|uri
operator|+
literal|" from source file "
operator|+
name|source
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|featuresService
operator|.
name|addRepository
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"Could not install feature: "
argument_list|)
operator|.
name|append
argument_list|(
name|artifact
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//install bundles listed in startup properties that weren't in kars into the system dir
for|for
control|(
name|String
name|key
range|:
name|startupProperties
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|MvnUrlUtil
operator|.
name|pathFromMaven
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|install
argument_list|(
name|buffer
argument_list|,
name|key
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
comment|//install bundles listed in install features not in system into local-repo
for|for
control|(
name|Feature
name|feature
range|:
name|localRepoFeatures
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|bundle
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|MvnUrlUtil
operator|.
name|pathFromMaven
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|File
name|test
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|test
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
name|install
argument_list|(
name|buffer
argument_list|,
name|key
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
try|try
block|{
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|startupPropertiesFile
argument_list|)
decl_stmt|;
try|try
block|{
name|startupProperties
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Could not write startup.properties file at "
operator|+
name|startupPropertiesFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Could not unpack all dependencies:\n"
operator|+
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|install
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|String
name|key
parameter_list|,
name|File
name|target
parameter_list|)
block|{
name|File
name|source
init|=
name|resolve
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|target
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|BufferedOutputStream
name|bos
init|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|target
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|bos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
literal|"Could not copy bundle "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|acceptScope
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
return|return
literal|"compile"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
operator|||
literal|"runtime"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|File
name|resolve
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|id
operator|=
name|MvnUrlUtil
operator|.
name|mvnToAether
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|ArtifactRequest
name|request
init|=
operator|new
name|ArtifactRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setArtifact
argument_list|(
operator|new
name|DefaultArtifact
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRepositories
argument_list|(
name|remoteRepos
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Resolving artifact "
operator|+
name|id
operator|+
literal|" from "
operator|+
name|remoteRepos
argument_list|)
expr_stmt|;
name|ArtifactResult
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|repoSystem
operator|.
name|resolveArtifact
argument_list|(
name|repoSession
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"could not resolve "
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Resolved artifact "
operator|+
name|id
operator|+
literal|" to "
operator|+
name|result
operator|.
name|getArtifact
argument_list|()
operator|.
name|getFile
argument_list|()
operator|+
literal|" from "
operator|+
name|result
operator|.
name|getRepository
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|getArtifact
argument_list|()
operator|.
name|getFile
argument_list|()
return|;
block|}
specifier|private
class|class
name|OfflineFeaturesService
implements|implements
name|FeaturesService
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_REPOSITORIES
init|=
literal|"featuresRepositories"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_BOOT
init|=
literal|"featuresBoot"
decl_stmt|;
specifier|public
name|void
name|validateRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|addRepository
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dontAddToStartup
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Adding feature repository to system: "
operator|+
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|featuresCfgFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|existingFeatureRepos
init|=
name|properties
operator|.
name|containsKey
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|)
operator|&&
operator|!
name|properties
operator|.
name|get
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
name|properties
operator|.
name|get
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|)
operator|+
literal|","
else|:
literal|""
decl_stmt|;
name|existingFeatureRepos
operator|=
name|existingFeatureRepos
operator|+
name|uri
operator|.
name|toString
argument_list|()
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|existingFeatureRepos
argument_list|)
expr_stmt|;
name|Features
name|repo
init|=
name|readFeatures
argument_list|(
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|repo
operator|.
name|getFeature
argument_list|()
control|)
block|{
if|if
condition|(
name|startupFeatures
operator|!=
literal|null
operator|&&
name|startupFeatures
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|installFeature
argument_list|(
name|feature
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bootFeatures
operator|!=
literal|null
operator|&&
name|bootFeatures
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|localRepoFeatures
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|String
name|existingBootFeatures
init|=
name|properties
operator|.
name|containsKey
argument_list|(
name|FEATURES_BOOT
argument_list|)
operator|&&
operator|!
name|properties
operator|.
name|get
argument_list|(
name|FEATURES_BOOT
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
name|properties
operator|.
name|get
argument_list|(
name|FEATURES_BOOT
argument_list|)
operator|+
literal|","
else|:
literal|""
decl_stmt|;
name|existingBootFeatures
operator|=
name|existingBootFeatures
operator|+
name|feature
operator|.
name|getName
argument_list|()
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|existingBootFeatures
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|installedFeatures
operator|!=
literal|null
operator|&&
name|installedFeatures
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|localRepoFeatures
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Installing feature "
operator|+
name|uri
operator|+
literal|" to system and startup.properties"
argument_list|)
expr_stmt|;
name|Features
name|features
init|=
name|readFeatures
argument_list|(
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|features
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|installFeature
argument_list|(
name|feature
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Features
name|readFeatures
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|XMLStreamException
throws|,
name|JAXBException
throws|,
name|IOException
block|{
name|File
name|repoFile
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|URI
name|featuresPath
init|=
name|system
operator|.
name|resolve
argument_list|(
name|MvnUrlUtil
operator|.
name|pathFromMaven
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|repoFile
operator|=
operator|new
name|File
argument_list|(
name|featuresPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repoFile
operator|=
operator|new
name|File
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|repoFile
argument_list|)
decl_stmt|;
name|Features
name|features
decl_stmt|;
try|try
block|{
name|features
operator|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URI
name|url
parameter_list|)
block|{         }
specifier|public
name|void
name|restoreRepository
parameter_list|(
name|URI
name|url
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|Repository
index|[]
name|listRepositories
parameter_list|()
block|{
return|return
operator|new
name|Repository
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|installFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|installFeature
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|feature
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|comment
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"# feature: "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" version: "
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleInfo
name|bundle
range|:
name|feature
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|String
name|location
init|=
name|bundle
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|startLevel
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|bundle
operator|.
name|getStartLevel
argument_list|()
operator|==
literal|0
condition|?
name|defaultStartLevel
else|:
name|bundle
operator|.
name|getStartLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|startupProperties
operator|.
name|containsKey
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|int
name|oldStartLevel
init|=
name|Integer
operator|.
name|decode
argument_list|(
name|startupProperties
operator|.
name|get
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStartLevel
operator|>
name|bundle
operator|.
name|getStartLevel
argument_list|()
condition|)
block|{
name|startupProperties
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|comment
operator|==
literal|null
condition|)
block|{
name|startupProperties
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startupProperties
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|comment
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
name|comment
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|installFeatures
parameter_list|(
name|Set
argument_list|<
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
argument_list|>
name|features
parameter_list|,
name|EnumSet
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|uninstallFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{         }
specifier|public
name|Feature
index|[]
name|listFeatures
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|Feature
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Feature
index|[]
name|listInstalledFeatures
parameter_list|()
block|{
return|return
operator|new
name|Feature
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|boolean
name|isInstalled
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|f
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// when FELIX-2887 is ready we can use plain Properties again
specifier|private
specifier|static
class|class
name|CommentProperties
extends|extends
name|Properties
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Layout
argument_list|>
name|layout
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|storage
decl_stmt|;
specifier|public
name|CommentProperties
parameter_list|()
block|{
name|this
operator|.
name|layout
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Layout
argument_list|>
operator|)
name|getField
argument_list|(
literal|"layout"
argument_list|)
expr_stmt|;
name|storage
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|getField
argument_list|(
literal|"storage"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|getField
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
try|try
block|{
name|Field
name|l
init|=
name|Properties
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|boolean
name|old
init|=
name|l
operator|.
name|isAccessible
argument_list|()
decl_stmt|;
name|l
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|layout
init|=
name|l
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|l
operator|.
name|setAccessible
argument_list|(
name|old
argument_list|)
expr_stmt|;
return|return
name|layout
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not access field "
operator|+
name|fieldName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|commentLines
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|valueLines
parameter_list|)
block|{
name|commentLines
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|commentLines
argument_list|)
expr_stmt|;
name|valueLines
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|valueLines
argument_list|)
expr_stmt|;
name|String
name|escapedKey
init|=
name|escapeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|lastLine
init|=
name|valueLines
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|valueLines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|valueLines
operator|.
name|add
argument_list|(
name|escapedKey
operator|+
literal|"="
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|valueLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
name|escapedKey
argument_list|)
condition|)
block|{
name|valueLines
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|escapedKey
operator|+
literal|" = "
operator|+
name|escapeJava
argument_list|(
name|valueLines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
operator|(
literal|0
operator|<
name|lastLine
condition|?
literal|"\\"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|valueLines
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|valueLines
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|escapeJava
argument_list|(
name|valueLines
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
operator|(
name|i
operator|<
name|lastLine
condition|?
literal|"\\"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|valueLines
control|)
block|{
name|value
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|layout
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Layout
argument_list|(
name|commentLines
argument_list|,
name|valueLines
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|storage
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|unescapeJava
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|commentLines
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|commentLines
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|commentLines
argument_list|)
expr_stmt|;
name|this
operator|.
name|layout
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|Layout
argument_list|(
name|commentLines
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|storage
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|String
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|comment
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|comment
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRaw
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|layout
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|layout
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getValueLines
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|layout
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|getValueLines
argument_list|()
argument_list|)
return|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|storage
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|storage
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** The list of possible key/value separators */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|SEPARATORS
init|=
operator|new
name|char
index|[]
block|{
literal|'='
block|,
literal|':'
block|}
decl_stmt|;
comment|/** The white space characters used as key/value separators. */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|WHITE_SPACE
init|=
operator|new
name|char
index|[]
block|{
literal|' '
block|,
literal|'\t'
block|,
literal|'\f'
block|}
decl_stmt|;
comment|/**          * Escape the separators in the key.          *          * @param key the key          * @return the escaped key          */
specifier|private
specifier|static
name|String
name|escapeKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|StringBuffer
name|newkey
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|key
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|key
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|SEPARATORS
argument_list|,
name|c
argument_list|)
operator|||
name|contains
argument_list|(
name|WHITE_SPACE
argument_list|,
name|c
argument_list|)
condition|)
block|{
comment|// escape the separator
name|newkey
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|newkey
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newkey
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newkey
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

