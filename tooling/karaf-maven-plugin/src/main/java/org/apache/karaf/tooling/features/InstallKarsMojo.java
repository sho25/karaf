begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|internal
operator|.
name|Kar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|MojoSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_comment
comment|/**  * Installs kar dependencies into a server-under-construction in target/assembly  *  * @goal install-kars  * @phase process-resources  * @requiresDependencyResolution runtime  * @inheritByDefault true  * @description Install kar dependencies  */
end_comment

begin_class
specifier|public
class|class
name|InstallKarsMojo
extends|extends
name|MojoSupport
block|{
comment|/**      * Base directory used to copy the resources during the build (working directory).      *      * @parameter default-value="${project.build.directory}/assembly"      * @required      */
specifier|protected
name|String
name|workDirectory
decl_stmt|;
comment|/**      * Features configuration file (etc/org.apache.karaf.features.cfg).      *      * @parameter default-value="${project.build.directory}/assembly/etc/org.apache.karaf.features.cfg"      * @required      */
specifier|protected
name|File
name|featuresCfgFile
decl_stmt|;
comment|/**      * startup.properties file.      *      * @parameter default-value="${project.build.directory}/assembly/etc/startup.properties"      * @required      */
specifier|protected
name|File
name|startupPropertiesFile
decl_stmt|;
comment|/**      * default start level for bundles in features that don't specify it.      *      * @parameter      */
specifier|protected
name|int
name|defaultStartLevel
init|=
literal|30
decl_stmt|;
comment|/**      * Directory used during build to construction the Karaf system repository.      *      * @parameter default-value="${project.build.directory}/assembly/system"      * @required      */
specifier|protected
name|File
name|systemDirectory
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into system and listed in startup.properties.      *      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupFeatures
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into system repo and listed in features service boot features.      *      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootFeatures
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into system repo and not mentioned elsewhere.      *      * @parameter      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedFeatures
decl_stmt|;
comment|/**      * Ignore the dependency attribute (dependency="[true|false]") on bundle      *      * @parameter      */
specifier|protected
name|boolean
name|ignoreDependencyFlag
init|=
literal|true
decl_stmt|;
specifier|private
name|URI
name|system
decl_stmt|;
specifier|private
name|Properties
name|startupProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// an access layer for available Aether implementation
specifier|protected
name|DependencyHelper
name|dependencyHelper
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_REPOSITORIES
init|=
literal|"featuresRepositories"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_BOOT
init|=
literal|"featuresBoot"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|this
operator|.
name|dependencyHelper
operator|=
name|DependencyHelperFactory
operator|.
name|createDependencyHelper
argument_list|(
name|this
operator|.
name|container
argument_list|,
name|this
operator|.
name|project
argument_list|,
name|this
operator|.
name|mavenSession
argument_list|,
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
comment|// creating system directory
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating system directory"
argument_list|)
expr_stmt|;
name|systemDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|system
operator|=
name|systemDirectory
operator|.
name|toURI
argument_list|()
expr_stmt|;
if|if
condition|(
name|startupPropertiesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Loading startup.properties"
argument_list|)
expr_stmt|;
try|try
block|{
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|startupPropertiesFile
argument_list|)
decl_stmt|;
try|try
block|{
name|startupProperties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Could not open existing startup.properties file at "
operator|+
name|startupPropertiesFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating startup.properties"
argument_list|)
expr_stmt|;
name|startupProperties
operator|.
name|setHeader
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"#Bundles to be started on startup, with startlevel"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startupPropertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|startupPropertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|repositories
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Feature
argument_list|,
name|Boolean
argument_list|>
name|features
init|=
operator|new
name|HashMap
argument_list|<
name|Feature
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
comment|// loading kar and featres repositories
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Loading kar and features repositories dependencies with compile or runtime scopes"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"The startup.properties file is updated using kar and features dependency with a scope different from runtime, or defined in the<startupFeatures/> plugin configuration"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Artifact
argument_list|>
name|dependencies
init|=
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
decl_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|dependencies
control|)
block|{
name|boolean
name|addToStartup
init|=
operator|!
name|artifact
operator|.
name|getScope
argument_list|()
operator|.
name|equals
argument_list|(
literal|"runtime"
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getScope
argument_list|()
operator|.
name|equals
argument_list|(
literal|"compile"
argument_list|)
operator|||
name|artifact
operator|.
name|getScope
argument_list|()
operator|.
name|equals
argument_list|(
literal|"runtime"
argument_list|)
condition|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"kar"
argument_list|)
condition|)
block|{
name|File
name|karFile
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Extracting "
operator|+
name|artifact
operator|.
name|toString
argument_list|()
operator|+
literal|" kar"
argument_list|)
expr_stmt|;
try|try
block|{
name|Kar
name|kar
init|=
operator|new
name|Kar
argument_list|(
name|karFile
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|kar
operator|.
name|extract
argument_list|(
operator|new
name|File
argument_list|(
name|system
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|workDirectory
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|repositoryUri
range|:
name|kar
operator|.
name|getFeatureRepos
argument_list|()
control|)
block|{
name|resolveRepository
argument_list|(
name|repositoryUri
operator|.
name|getPath
argument_list|()
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
literal|false
argument_list|,
name|addToStartup
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not install "
operator|+
name|artifact
operator|.
name|toString
argument_list|()
operator|+
literal|" kar"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|artifact
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
operator|&&
name|artifact
operator|.
name|getClassifier
argument_list|()
operator|.
name|equals
argument_list|(
literal|"features"
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Resolving "
operator|+
name|artifact
operator|.
name|toString
argument_list|()
operator|+
literal|" features repository"
argument_list|)
expr_stmt|;
name|String
name|repositoryUri
init|=
name|dependencyHelper
operator|.
name|artifactToMvn
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
try|try
block|{
name|resolveRepository
argument_list|(
name|repositoryUri
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
literal|true
argument_list|,
name|addToStartup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Can not install "
operator|+
name|artifact
operator|.
name|toString
argument_list|()
operator|+
literal|" features repository"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
comment|// checking if all startup, installed, and boot features have been resolved
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Checking features resolution"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|resolvedFeaturesNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|features
operator|.
name|keySet
argument_list|()
control|)
block|{
name|resolvedFeaturesNames
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startupFeatures
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|startupFeature
range|:
name|startupFeatures
control|)
block|{
if|if
condition|(
operator|!
name|resolvedFeaturesNames
operator|.
name|contains
argument_list|(
name|startupFeature
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Feature "
operator|+
name|startupFeature
operator|+
literal|" is not resolved. Check that<dependencies/> provide the kar of features repository providing this feature (with compile or runtime scope)"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|bootFeatures
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|bootFeature
range|:
name|bootFeatures
control|)
block|{
if|if
condition|(
operator|!
name|resolvedFeaturesNames
operator|.
name|contains
argument_list|(
name|bootFeature
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Feature "
operator|+
name|bootFeature
operator|+
literal|" is not resolved. Check that<dependencies/> provide the kar of features repository providing this feature (with compile or runtime scope)"
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|installedFeatures
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|installedFeature
range|:
name|installedFeatures
control|)
block|{
if|if
condition|(
operator|!
name|resolvedFeaturesNames
operator|.
name|contains
argument_list|(
name|installedFeature
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Feature "
operator|+
name|installedFeature
operator|+
literal|" is not resolved. Check that<dependencies/> provide the kar of features repository providing this feature (with compile or runtime scope)"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// install features/bundles
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Installing features"
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|features
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
if|if
condition|(
name|features
operator|.
name|get
argument_list|(
name|feature
argument_list|)
operator|||
operator|(
name|startupFeatures
operator|!=
literal|null
operator|&&
name|startupFeatures
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
comment|// the feature is a startup feature, updating startup.properties file
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" is defined as a startup feature"
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"= Updating startup.properties file"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|comment
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"# feature: "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" version: "
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleInfo
name|bundleInfo
range|:
name|feature
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|String
name|bundleLocation
init|=
name|bundleInfo
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|bundleStartLevel
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
operator|==
literal|0
condition|?
name|defaultStartLevel
else|:
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|startupProperties
operator|.
name|containsKey
argument_list|(
name|bundleLocation
argument_list|)
condition|)
block|{
name|int
name|oldStartLevel
init|=
name|Integer
operator|.
name|decode
argument_list|(
operator|(
name|String
operator|)
name|startupProperties
operator|.
name|get
argument_list|(
name|bundleLocation
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStartLevel
operator|>
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
condition|)
block|{
name|startupProperties
operator|.
name|put
argument_list|(
name|bundleLocation
argument_list|,
name|bundleStartLevel
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|comment
operator|==
literal|null
condition|)
block|{
name|startupProperties
operator|.
name|put
argument_list|(
name|bundleLocation
argument_list|,
name|bundleStartLevel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startupProperties
operator|.
name|put
argument_list|(
name|bundleLocation
argument_list|,
name|comment
argument_list|,
name|bundleStartLevel
argument_list|)
expr_stmt|;
name|comment
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|// add the feature in the system folder
name|resolveFeature
argument_list|(
name|feature
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bootFeatures
operator|!=
literal|null
operator|&&
name|bootFeatures
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// the feature is a boot feature, updating the etc/org.apache.karaf.features.cfg file
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" is defined as a boot feature"
argument_list|)
expr_stmt|;
if|if
condition|(
name|featuresCfgFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"= Updating "
operator|+
name|featuresCfgFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
try|try
block|{
name|featuresProperties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|featuresBoot
init|=
name|featuresProperties
operator|.
name|getProperty
argument_list|(
name|FEATURES_BOOT
argument_list|)
decl_stmt|;
name|featuresBoot
operator|=
name|featuresBoot
operator|!=
literal|null
operator|&&
name|featuresBoot
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|featuresBoot
operator|+
literal|","
else|:
literal|""
expr_stmt|;
if|if
condition|(
operator|!
name|featuresBoot
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|featuresBoot
operator|=
name|featuresBoot
operator|+
name|feature
operator|.
name|getName
argument_list|()
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|featuresBoot
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|(
name|featuresCfgFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add the feature in the system folder
name|resolveFeature
argument_list|(
name|feature
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|installedFeatures
operator|!=
literal|null
operator|&&
name|installedFeatures
operator|.
name|contains
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" is defined as a installed feature"
argument_list|)
expr_stmt|;
comment|// add the feature in the system folder
name|resolveFeature
argument_list|(
name|feature
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" is not installed"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Can not install "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" feature"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// install bundles defined in startup.properties
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Installing bundles defined in startup.properties in the system"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|startupBundles
init|=
name|startupProperties
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|startupBundle
range|:
name|startupBundles
control|)
block|{
name|String
name|bundlePath
init|=
name|this
operator|.
name|dependencyHelper
operator|.
name|pathFromMaven
argument_list|(
operator|(
name|String
operator|)
name|startupBundle
argument_list|)
decl_stmt|;
name|File
name|bundleFile
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|bundlePath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundleFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|File
name|bundleSource
init|=
name|this
operator|.
name|dependencyHelper
operator|.
name|resolveById
argument_list|(
operator|(
name|String
operator|)
name|startupBundle
argument_list|,
name|getLog
argument_list|()
argument_list|)
decl_stmt|;
name|bundleFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|copy
argument_list|(
name|bundleSource
argument_list|,
name|bundleFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generate the startup.properties file
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Generating the startup.properties file"
argument_list|)
expr_stmt|;
try|try
block|{
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|startupPropertiesFile
argument_list|)
decl_stmt|;
try|try
block|{
name|startupProperties
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoFailureException
argument_list|(
literal|"Can not write "
operator|+
name|startupPropertiesFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|resolveRepository
parameter_list|(
name|String
name|repository
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
name|Map
argument_list|<
name|Feature
argument_list|,
name|Boolean
argument_list|>
name|features
parameter_list|,
name|boolean
name|updateFeaturesCfgFile
parameter_list|,
name|boolean
name|updateStartupProperties
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check if the repository has not been processed
if|if
condition|(
name|repositories
operator|.
name|contains
argument_list|(
name|repository
argument_list|)
condition|)
block|{
return|return;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Resolving "
operator|+
name|repository
operator|+
literal|" features repository"
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|add
argument_list|(
name|repository
argument_list|)
expr_stmt|;
comment|// update etc/org.apache.karaf.features.cfg file
if|if
condition|(
name|updateFeaturesCfgFile
operator|&&
name|featuresCfgFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
try|try
block|{
name|featuresProperties
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|featureRepos
init|=
name|featuresProperties
operator|.
name|getProperty
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|)
decl_stmt|;
name|featureRepos
operator|=
name|featureRepos
operator|!=
literal|null
operator|&&
name|featureRepos
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|featureRepos
operator|+
literal|","
else|:
literal|""
expr_stmt|;
if|if
condition|(
operator|!
name|featureRepos
operator|.
name|contains
argument_list|(
name|repository
argument_list|)
condition|)
block|{
name|featureRepos
operator|=
name|featureRepos
operator|+
name|repository
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|featureRepos
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|(
name|featuresCfgFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|// resolving repository location
name|File
name|repositoryFile
decl_stmt|;
if|if
condition|(
name|repository
operator|.
name|startsWith
argument_list|(
literal|"mvn"
argument_list|)
condition|)
block|{
name|repositoryFile
operator|=
name|dependencyHelper
operator|.
name|resolveById
argument_list|(
name|repository
argument_list|,
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|repository
operator|=
name|dependencyHelper
operator|.
name|pathFromMaven
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repositoryFile
operator|=
operator|new
name|File
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
comment|// copy the repository file in system folder
name|File
name|repositoryFileInSystemFolder
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|repository
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|repositoryFileInSystemFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
name|repositoryFileInSystemFolder
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|copy
argument_list|(
name|repositoryFile
argument_list|,
name|repositoryFileInSystemFolder
argument_list|)
expr_stmt|;
comment|// add metadata for snapshot
if|if
condition|(
name|repository
operator|.
name|startsWith
argument_list|(
literal|"mvn"
argument_list|)
condition|)
block|{
name|Artifact
name|repositoryArtifact
init|=
name|dependencyHelper
operator|.
name|mvnToArtifact
argument_list|(
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryArtifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|File
name|metadataTarget
init|=
operator|new
name|File
argument_list|(
name|repositoryFileInSystemFolder
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|"maven-metadata-local.xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|MavenUtil
operator|.
name|generateMavenMetadata
argument_list|(
name|repositoryArtifact
argument_list|,
name|metadataTarget
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create maven-metadata-local.xml"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"It means that this SNAPSHOT could be overwritten by an older one present on remote repositories"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// loading the model
name|Features
name|featuresModel
init|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|repositoryFile
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|repositoryFile
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// recursively process the inner repositories
for|for
control|(
name|String
name|innerRepository
range|:
name|featuresModel
operator|.
name|getRepository
argument_list|()
control|)
block|{
name|resolveRepository
argument_list|(
name|innerRepository
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
literal|false
argument_list|,
name|updateStartupProperties
argument_list|)
expr_stmt|;
block|}
comment|// update features
for|for
control|(
name|Feature
name|feature
range|:
name|featuresModel
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|features
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|updateStartupProperties
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resolveFeature
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|Map
argument_list|<
name|Feature
argument_list|,
name|Boolean
argument_list|>
name|features
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Dependency
name|dependency
range|:
name|feature
operator|.
name|getFeature
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|f
range|:
name|features
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|resolveFeature
argument_list|(
name|f
argument_list|,
name|features
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Resolving feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// installing feature bundles
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"= Installing bundles from "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" feature"
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|&&
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"== Bundle "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
operator|+
literal|" is defined as dependency, so it's not installed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"== Installing bundle "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|bundleLocation
init|=
name|bundle
operator|.
name|getLocation
argument_list|()
decl_stmt|;
comment|// cleanup prefixes
if|if
condition|(
name|bundleLocation
operator|.
name|startsWith
argument_list|(
literal|"wrap:"
argument_list|)
condition|)
block|{
name|bundleLocation
operator|=
name|bundleLocation
operator|.
name|substring
argument_list|(
literal|"wrap:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundleLocation
operator|.
name|startsWith
argument_list|(
literal|"blueprint:"
argument_list|)
condition|)
block|{
name|bundleLocation
operator|=
name|bundleLocation
operator|.
name|substring
argument_list|(
literal|"blueprint:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundleLocation
operator|.
name|startsWith
argument_list|(
literal|"webbundle:"
argument_list|)
condition|)
block|{
name|bundleLocation
operator|=
name|bundleLocation
operator|.
name|substring
argument_list|(
literal|"webbundle:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundleLocation
operator|.
name|startsWith
argument_list|(
literal|"war:"
argument_list|)
condition|)
block|{
name|bundleLocation
operator|=
name|bundleLocation
operator|.
name|substring
argument_list|(
literal|"war:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|bundleFile
decl_stmt|;
if|if
condition|(
name|bundleLocation
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
if|if
condition|(
name|bundleLocation
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// for bad formed URL (like in Camel for mustache-compiler), we remove the trailing /
name|bundleLocation
operator|=
name|bundleLocation
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bundleLocation
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|bundleFile
operator|=
name|dependencyHelper
operator|.
name|resolveById
argument_list|(
name|bundleLocation
argument_list|,
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|bundleLocation
operator|=
name|dependencyHelper
operator|.
name|pathFromMaven
argument_list|(
name|bundleLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundleFile
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|bundleLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|bundleSystemFile
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|bundleLocation
argument_list|)
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|bundleFile
argument_list|,
name|bundleSystemFile
argument_list|)
expr_stmt|;
comment|// add metadata for snapshot
if|if
condition|(
name|bundleLocation
operator|.
name|startsWith
argument_list|(
literal|"mvn"
argument_list|)
condition|)
block|{
name|Artifact
name|bundleArtifact
init|=
name|dependencyHelper
operator|.
name|mvnToArtifact
argument_list|(
name|bundleLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleArtifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|File
name|metadataTarget
init|=
operator|new
name|File
argument_list|(
name|bundleSystemFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|"maven-metadata-local.xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|MavenUtil
operator|.
name|generateMavenMetadata
argument_list|(
name|bundleArtifact
argument_list|,
name|metadataTarget
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create maven-metadata-local.xml"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"It means that this SNAPSHOT could be overwritten by an older one present on remote repositories"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// installing feature config files
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"= Installing configuration files from "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" feature"
argument_list|)
expr_stmt|;
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|feature
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"== Installing configuration file "
operator|+
name|configFile
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|configFileLocation
init|=
name|configFile
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|File
name|configFileFile
decl_stmt|;
if|if
condition|(
name|configFileLocation
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|configFileFile
operator|=
name|dependencyHelper
operator|.
name|resolveById
argument_list|(
name|configFileLocation
argument_list|,
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|configFileLocation
operator|=
name|dependencyHelper
operator|.
name|pathFromMaven
argument_list|(
name|configFileLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configFileFile
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|configFileLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|File
name|configFileSystemFile
init|=
operator|new
name|File
argument_list|(
name|system
operator|.
name|resolve
argument_list|(
name|configFileLocation
argument_list|)
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|configFileFile
argument_list|,
name|configFileSystemFile
argument_list|)
expr_stmt|;
comment|// add metadata for snapshot
if|if
condition|(
name|configFileLocation
operator|.
name|startsWith
argument_list|(
literal|"mvn"
argument_list|)
condition|)
block|{
name|Artifact
name|configFileArtifact
init|=
name|dependencyHelper
operator|.
name|mvnToArtifact
argument_list|(
name|configFileLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFileArtifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|File
name|metadataTarget
init|=
operator|new
name|File
argument_list|(
name|configFileSystemFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|"maven-metadata-local.xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|MavenUtil
operator|.
name|generateMavenMetadata
argument_list|(
name|configFileArtifact
argument_list|,
name|metadataTarget
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create maven-metadata-local.xml"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"It means that this SNAPSHOT could be overwritten by an older one present on remote repositories"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

