begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|impl
operator|.
name|DownloadManagerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|JaxbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|internal
operator|.
name|Kar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Profiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|url
operator|.
name|CustomBundleURLStreamHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|InternalMavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|IoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|MojoSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_comment
comment|/**  * Installs kar dependencies into a server-under-construction in target/assembly  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"install-kars"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PROCESS_RESOURCES
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|RUNTIME
argument_list|)
specifier|public
class|class
name|InstallKarsMojo
extends|extends
name|MojoSupport
block|{
comment|/**      * Base directory used to copy the resources during the build (working directory).      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/assembly"
argument_list|)
specifier|protected
name|File
name|workDirectory
decl_stmt|;
comment|/**      * Features configuration file (etc/org.apache.karaf.features.cfg).      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/assembly/etc/org.apache.karaf.features.cfg"
argument_list|)
specifier|protected
name|File
name|featuresCfgFile
decl_stmt|;
comment|/**      * startup.properties file.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/assembly/etc/startup.properties"
argument_list|)
specifier|protected
name|File
name|startupPropertiesFile
decl_stmt|;
comment|/**      * Directory used during build to construction the Karaf system repository.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/assembly/system"
argument_list|)
specifier|protected
name|File
name|systemDirectory
decl_stmt|;
comment|/**      * default start level for bundles in features that don't specify it.      */
annotation|@
name|Parameter
specifier|protected
name|int
name|defaultStartLevel
init|=
literal|30
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupRepositories
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootRepositories
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedRepositories
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into system and listed in startup.properties.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupFeatures
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into system repo and listed in features service boot features.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootFeatures
decl_stmt|;
comment|/**      * List of features from runtime-scope features xml and kars to be installed into system repo and not mentioned elsewhere.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedFeatures
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupBundles
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootBundles
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedBundles
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|String
name|profilesUri
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootProfiles
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupProfiles
decl_stmt|;
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedProfiles
decl_stmt|;
comment|/**      * Ignore the dependency attribute (dependency="[true|false]") on bundle      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
specifier|protected
name|boolean
name|ignoreDependencyFlag
decl_stmt|;
comment|/**      * Additional feature repositories      */
annotation|@
name|Parameter
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|featureRepositories
decl_stmt|;
comment|/**      * Use reference: style urls in startup.properties      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
specifier|protected
name|boolean
name|useReferenceUrls
decl_stmt|;
annotation|@
name|Parameter
specifier|protected
name|boolean
name|installAllFeaturesByDefault
init|=
literal|true
decl_stmt|;
annotation|@
name|Parameter
specifier|protected
name|boolean
name|use24SyntaxForStartup
init|=
literal|false
decl_stmt|;
comment|// an access layer for available Aether implementation
specifier|protected
name|DependencyHelper
name|dependencyHelper
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_REPOSITORIES
init|=
literal|"featuresRepositories"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_BOOT
init|=
literal|"featuresBoot"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|this
operator|.
name|dependencyHelper
operator|=
name|DependencyHelperFactory
operator|.
name|createDependencyHelper
argument_list|(
name|this
operator|.
name|container
argument_list|,
name|this
operator|.
name|project
argument_list|,
name|this
operator|.
name|mavenSession
argument_list|,
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|MavenResolver
name|resolver
init|=
operator|new
name|InternalMavenResolver
argument_list|(
name|dependencyHelper
argument_list|,
name|getLog
argument_list|()
argument_list|)
decl_stmt|;
name|CustomBundleURLStreamHandlerFactory
operator|.
name|install
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
try|try
block|{
name|doExecute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
decl||
name|MojoFailureException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to build assembly"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|CustomBundleURLStreamHandlerFactory
operator|.
name|uninstall
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|dependencyHelper
operator|=
name|DependencyHelperFactory
operator|.
name|createDependencyHelper
argument_list|(
name|this
operator|.
name|container
argument_list|,
name|this
operator|.
name|project
argument_list|,
name|this
operator|.
name|mavenSession
argument_list|,
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
comment|// creating system directory
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating system directory"
argument_list|)
expr_stmt|;
name|systemDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|IoUtils
operator|.
name|deleteRecursive
argument_list|(
operator|new
name|File
argument_list|(
name|systemDirectory
argument_list|,
literal|"generated"
argument_list|)
argument_list|)
expr_stmt|;
name|startupRepositories
operator|=
name|nonNullList
argument_list|(
name|startupRepositories
argument_list|)
expr_stmt|;
name|bootRepositories
operator|=
name|nonNullList
argument_list|(
name|bootRepositories
argument_list|)
expr_stmt|;
name|installedRepositories
operator|=
name|nonNullList
argument_list|(
name|installedRepositories
argument_list|)
expr_stmt|;
name|startupBundles
operator|=
name|nonNullList
argument_list|(
name|startupBundles
argument_list|)
expr_stmt|;
name|bootBundles
operator|=
name|nonNullList
argument_list|(
name|bootBundles
argument_list|)
expr_stmt|;
name|installedBundles
operator|=
name|nonNullList
argument_list|(
name|installedBundles
argument_list|)
expr_stmt|;
name|startupFeatures
operator|=
name|nonNullList
argument_list|(
name|startupFeatures
argument_list|)
expr_stmt|;
name|bootFeatures
operator|=
name|nonNullList
argument_list|(
name|bootFeatures
argument_list|)
expr_stmt|;
name|installedFeatures
operator|=
name|nonNullList
argument_list|(
name|installedFeatures
argument_list|)
expr_stmt|;
name|startupProfiles
operator|=
name|nonNullList
argument_list|(
name|startupProfiles
argument_list|)
expr_stmt|;
name|bootProfiles
operator|=
name|nonNullList
argument_list|(
name|bootProfiles
argument_list|)
expr_stmt|;
name|installedProfiles
operator|=
name|nonNullList
argument_list|(
name|installedProfiles
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|startupProfiles
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|bootProfiles
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|installedProfiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|profilesUri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"profilesDirectory must be specified"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|featureRepositories
operator|!=
literal|null
operator|&&
operator|!
name|featureRepositories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Use of featureRepositories is deprecated, use startupRepositories, bootRepositories or installedRepositories instead"
argument_list|)
expr_stmt|;
name|startupRepositories
operator|.
name|addAll
argument_list|(
name|featureRepositories
argument_list|)
expr_stmt|;
name|bootRepositories
operator|.
name|addAll
argument_list|(
name|featureRepositories
argument_list|)
expr_stmt|;
name|installedRepositories
operator|.
name|addAll
argument_list|(
name|featureRepositories
argument_list|)
expr_stmt|;
block|}
comment|// Build optional features and known prerequisites
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|prereqs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"blueprint:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"deployer"
argument_list|,
literal|"aries-blueprint"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"spring:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"deployer"
argument_list|,
literal|"spring"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"wrap:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"wrap"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"war:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"war"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Loading kars and features repositories
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Loading kar and features repositories dependencies"
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
control|)
block|{
if|if
condition|(
literal|"kar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|karFile
init|=
name|artifact
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Extracting "
operator|+
name|artifact
operator|.
name|toString
argument_list|()
operator|+
literal|" kar"
argument_list|)
expr_stmt|;
try|try
block|{
name|Kar
name|kar
init|=
operator|new
name|Kar
argument_list|(
name|karFile
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|kar
operator|.
name|extract
argument_list|(
name|systemDirectory
argument_list|,
name|workDirectory
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|repositoryUri
range|:
name|kar
operator|.
name|getFeatureRepos
argument_list|()
control|)
block|{
switch|switch
condition|(
name|artifact
operator|.
name|getScope
argument_list|()
condition|)
block|{
case|case
literal|"compile"
case|:
name|startupRepositories
operator|.
name|add
argument_list|(
name|repositoryUri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"runtime"
case|:
name|bootRepositories
operator|.
name|add
argument_list|(
name|repositoryUri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"provided"
case|:
name|installedRepositories
operator|.
name|add
argument_list|(
name|repositoryUri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Can not install "
operator|+
name|artifact
operator|.
name|toString
argument_list|()
operator|+
literal|" kar"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|repositoryUri
init|=
name|dependencyHelper
operator|.
name|artifactToMvn
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|artifact
operator|.
name|getScope
argument_list|()
condition|)
block|{
case|case
literal|"compile"
case|:
name|startupRepositories
operator|.
name|add
argument_list|(
name|repositoryUri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"runtime"
case|:
name|bootRepositories
operator|.
name|add
argument_list|(
name|repositoryUri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"provided"
case|:
name|installedRepositories
operator|.
name|add
argument_list|(
name|repositoryUri
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"bundle"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|bundleUri
init|=
name|dependencyHelper
operator|.
name|artifactToMvn
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|artifact
operator|.
name|getScope
argument_list|()
condition|)
block|{
case|case
literal|"compile"
case|:
name|startupBundles
operator|.
name|add
argument_list|(
name|bundleUri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"runtime"
case|:
name|bootBundles
operator|.
name|add
argument_list|(
name|bundleUri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"provided"
case|:
name|installedBundles
operator|.
name|add
argument_list|(
name|bundleUri
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Load profiles
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|allProfiles
decl_stmt|;
if|if
condition|(
name|profilesUri
operator|!=
literal|null
condition|)
block|{
name|URI
name|profileURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|profilesUri
argument_list|)
decl_stmt|;
name|Path
name|profilePath
decl_stmt|;
try|try
block|{
name|profilePath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|profileURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileSystemNotFoundException
name|e
parameter_list|)
block|{
comment|// file system does not exist, try to create it
name|FileSystem
name|fs
init|=
name|FileSystems
operator|.
name|newFileSystem
argument_list|(
name|profileURI
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|InstallKarsMojo
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|profilePath
operator|=
name|fs
operator|.
name|provider
argument_list|()
operator|.
name|getPath
argument_list|(
name|profileURI
argument_list|)
expr_stmt|;
block|}
name|allProfiles
operator|=
name|Profiles
operator|.
name|loadProfiles
argument_list|(
name|profilePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allProfiles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// Generate profiles
name|Profile
name|startupProfile
init|=
name|generateProfile
argument_list|(
name|allProfiles
argument_list|,
name|startupProfiles
argument_list|,
name|startupRepositories
argument_list|,
name|startupFeatures
argument_list|,
name|startupBundles
argument_list|)
decl_stmt|;
name|Profile
name|bootProfile
init|=
name|generateProfile
argument_list|(
name|allProfiles
argument_list|,
name|bootProfiles
argument_list|,
name|bootRepositories
argument_list|,
name|bootFeatures
argument_list|,
name|bootBundles
argument_list|)
decl_stmt|;
name|Profile
name|installedProfile
init|=
name|generateProfile
argument_list|(
name|allProfiles
argument_list|,
name|installedProfiles
argument_list|,
name|installedRepositories
argument_list|,
name|installedFeatures
argument_list|,
name|installedBundles
argument_list|)
decl_stmt|;
comment|//
comment|// Compute overall profile
comment|//
name|Profile
name|overallProfile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setParents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|startupProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|bootProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|installedProfile
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|overallOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|overallProfile
argument_list|,
name|allProfiles
argument_list|)
decl_stmt|;
name|Profile
name|overallEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|overallOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|agentProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|overallEffective
operator|.
name|getConfiguration
argument_list|(
literal|"org.ops4j.pax.url.mvn"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"karaf.default.repository"
argument_list|,
literal|"system"
argument_list|)
expr_stmt|;
name|InterpolationHelper
operator|.
name|performSubstitution
argument_list|(
name|agentProps
argument_list|,
operator|new
name|InterpolationHelper
operator|.
name|SubstitutionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//
comment|// Write all configuration files
comment|//
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|config
range|:
name|overallEffective
operator|.
name|getFileConfigurations
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|configFile
init|=
name|workDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"etc/"
operator|+
name|config
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|configFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Compute startup
comment|//
name|Profile
name|startupOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|startupProfile
argument_list|,
name|allProfiles
argument_list|)
decl_stmt|;
name|Profile
name|startupEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|startupOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Load startup repositories
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|startupRepositories
init|=
name|loadRepositories
argument_list|(
name|startupEffective
operator|.
name|getRepositories
argument_list|()
argument_list|)
decl_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|allStartupFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|startupRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|allStartupFeatures
operator|.
name|addAll
argument_list|(
name|repo
operator|.
name|getFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Feature
argument_list|>
name|startupFeatures
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|startupEffective
operator|.
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|installAllFeaturesByDefault
condition|)
block|{
name|startupFeatures
operator|.
name|addAll
argument_list|(
name|allStartupFeatures
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|feature
range|:
name|startupEffective
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|addFeatures
argument_list|(
name|startupFeatures
argument_list|,
name|allStartupFeatures
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Compute all bundles
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|allStartupBundles
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|startupFeatures
control|)
block|{
for|for
control|(
name|Bundle
name|bundleInfo
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
name|String
name|bundleLocation
init|=
name|bundleInfo
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|bundleStartLevel
init|=
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
operator|==
literal|0
condition|?
name|defaultStartLevel
else|:
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|allStartupBundles
operator|.
name|containsKey
argument_list|(
name|bundleLocation
argument_list|)
condition|)
block|{
name|bundleStartLevel
operator|=
name|Math
operator|.
name|min
argument_list|(
name|bundleStartLevel
argument_list|,
name|allStartupBundles
operator|.
name|get
argument_list|(
name|bundleLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allStartupBundles
operator|.
name|put
argument_list|(
name|bundleLocation
argument_list|,
name|bundleStartLevel
argument_list|)
expr_stmt|;
block|}
comment|// Install config
for|for
control|(
name|Config
name|config
range|:
name|feature
operator|.
name|getConfig
argument_list|()
control|)
block|{
name|installConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
name|boolean
name|doInstall
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Dependency
name|dep
range|:
name|cond
operator|.
name|getFeature
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|startupFeatures
operator|.
name|contains
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|doInstall
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|doInstall
condition|)
block|{
for|for
control|(
name|Bundle
name|bundleInfo
range|:
name|cond
operator|.
name|getBundle
argument_list|()
control|)
block|{
name|String
name|bundleLocation
init|=
name|bundleInfo
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|bundleStartLevel
init|=
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
operator|==
literal|0
condition|?
name|defaultStartLevel
else|:
name|bundleInfo
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|allStartupBundles
operator|.
name|containsKey
argument_list|(
name|bundleLocation
argument_list|)
condition|)
block|{
name|bundleStartLevel
operator|=
name|Math
operator|.
name|min
argument_list|(
name|bundleStartLevel
argument_list|,
name|allStartupBundles
operator|.
name|get
argument_list|(
name|bundleLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allStartupBundles
operator|.
name|put
argument_list|(
name|bundleLocation
argument_list|,
name|bundleStartLevel
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Config
name|config
range|:
name|cond
operator|.
name|getConfig
argument_list|()
control|)
block|{
name|installConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Install config files
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|feature
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|URL
argument_list|(
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|openStream
argument_list|()
init|)
block|{
name|String
name|path
init|=
name|configFile
operator|.
name|getFinalname
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Path
name|output
init|=
name|workDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|output
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
comment|// TODO: be smarter about overwrites
block|}
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|cond
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|URL
argument_list|(
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Path
name|output
init|=
name|workDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|configFile
operator|.
name|getFinalname
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|output
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
comment|// TODO: be smarter about overwrites
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|bundleLocation
range|:
name|startupEffective
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|int
name|bundleStartLevel
init|=
name|defaultStartLevel
decl_stmt|;
if|if
condition|(
name|allStartupBundles
operator|.
name|containsKey
argument_list|(
name|bundleLocation
argument_list|)
condition|)
block|{
name|bundleStartLevel
operator|=
name|Math
operator|.
name|min
argument_list|(
name|bundleStartLevel
argument_list|,
name|allStartupBundles
operator|.
name|get
argument_list|(
name|bundleLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allStartupBundles
operator|.
name|put
argument_list|(
name|bundleLocation
argument_list|,
name|bundleStartLevel
argument_list|)
expr_stmt|;
block|}
comment|// Load startup.properties
name|startupPropertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|Properties
name|startupProperties
init|=
operator|new
name|Properties
argument_list|(
name|startupPropertiesFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|startupPropertiesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|startupProperties
operator|.
name|setHeader
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"# Bundles to be started on startup, with startlevel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Install bundles and update startup.properties
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|invertedStartupBundles
init|=
name|MapUtils
operator|.
name|invert
argument_list|(
name|allStartupBundles
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|invertedStartupBundles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|startLevel
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|location
range|:
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
control|)
block|{
name|location
operator|=
name|installStartupArtifact
argument_list|(
name|location
argument_list|,
name|useReferenceUrls
operator|||
name|use24SyntaxForStartup
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|&&
name|useReferenceUrls
condition|)
block|{
name|location
operator|=
literal|"reference:"
operator|+
name|location
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|&&
name|use24SyntaxForStartup
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startupProperties
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
block|}
comment|// generate the startup.properties file
name|startupProperties
operator|.
name|save
argument_list|()
expr_stmt|;
comment|//
comment|// Handle boot profiles
comment|//
name|Profile
name|bootOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|bootProfile
argument_list|,
name|allProfiles
argument_list|)
decl_stmt|;
name|Profile
name|bootEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|bootOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Load startup repositories
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|bootRepositories
init|=
name|loadRepositories
argument_list|(
name|bootEffective
operator|.
name|getRepositories
argument_list|()
argument_list|)
decl_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|allBootFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|bootRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|allBootFeatures
operator|.
name|addAll
argument_list|(
name|repo
operator|.
name|getFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Install all repositories
for|for
control|(
name|String
name|repository
range|:
name|bootRepositories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
comment|// Generate a global feature
name|Map
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|generatedDep
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Feature
name|generated
init|=
operator|new
name|Feature
argument_list|()
decl_stmt|;
name|generated
operator|.
name|setName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add feature dependencies
if|if
condition|(
name|bootEffective
operator|.
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|installAllFeaturesByDefault
condition|)
block|{
for|for
control|(
name|Features
name|repo
range|:
name|bootRepositories
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|repo
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|Dependency
name|dep
init|=
name|generatedDep
operator|.
name|get
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
name|dep
operator|=
operator|new
name|Dependency
argument_list|()
expr_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|generatedDep
operator|.
name|put
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|.
name|setDependency
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|dependency
range|:
name|bootEffective
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|Dependency
name|dep
init|=
name|generatedDep
operator|.
name|get
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
name|dep
operator|=
operator|new
name|Dependency
argument_list|()
expr_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|generatedDep
operator|.
name|put
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|.
name|setDependency
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add bundles
for|for
control|(
name|String
name|location
range|:
name|bootEffective
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|location
operator|=
name|location
operator|.
name|replace
argument_list|(
literal|"profile:"
argument_list|,
literal|"file:etc/"
argument_list|)
expr_stmt|;
name|Bundle
name|bun
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|bun
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getBundle
argument_list|()
operator|.
name|add
argument_list|(
name|bun
argument_list|)
expr_stmt|;
block|}
name|Features
name|rep
init|=
operator|new
name|Features
argument_list|()
decl_stmt|;
name|rep
operator|.
name|setName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|getRepository
argument_list|()
operator|.
name|addAll
argument_list|(
name|bootEffective
operator|.
name|getRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|allBootFeatures
operator|.
name|add
argument_list|(
name|generated
argument_list|)
expr_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|bootFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|addFeatures
argument_list|(
name|bootFeatures
argument_list|,
name|allBootFeatures
argument_list|,
name|generated
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|bootFeatures
control|)
block|{
comment|// the feature is a startup feature, updating startup.properties file
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" is defined as a boot feature"
argument_list|)
expr_stmt|;
comment|// add the feature in the system folder
name|Set
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|cond
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|location
range|:
name|locations
control|)
block|{
name|installArtifact
argument_list|(
name|location
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|prereqs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|prereq
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Dependency
name|dep
init|=
name|generatedDep
operator|.
name|get
argument_list|(
name|prereq
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
name|dep
operator|=
operator|new
name|Dependency
argument_list|()
expr_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|prereq
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|generatedDep
operator|.
name|put
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|.
name|setPrerequisite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Install config files
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|feature
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|cond
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// If there are bundles to install, we can't use the boot features only
comment|// so keep the generated feature
if|if
condition|(
operator|!
name|generated
operator|.
name|getBundle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|output
init|=
operator|new
name|File
argument_list|(
name|workDirectory
argument_list|,
literal|"etc/"
operator|+
name|rep
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JaxbUtil
operator|.
name|marshal
argument_list|(
name|rep
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
decl_stmt|;
name|String
name|repoUrl
decl_stmt|;
if|if
condition|(
name|use24SyntaxForStartup
condition|)
block|{
name|String
name|str
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|replace
argument_list|(
literal|"http://karaf.apache.org/xmlns/features/v1.3.0"
argument_list|,
literal|"http://karaf.apache.org/xmlns/features/v1.2.0"
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|" dependency=\".*?\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|" prerequisite=\".*?\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|rep
operator|.
name|getFeature
argument_list|()
control|)
block|{
for|for
control|(
name|Dependency
name|d
range|:
name|f
operator|.
name|getFeature
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isPrerequisite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|startupEffective
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Feature "
operator|+
name|d
operator|.
name|getName
argument_list|()
operator|+
literal|" is a prerequisite and should be installed as a startup feature."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|repoUrl
operator|=
literal|"file:etc/"
operator|+
name|output
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|repoUrl
operator|=
literal|"file:${karaf.home}/etc/"
operator|+
name|output
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Files
operator|.
name|copy
argument_list|(
name|bais
argument_list|,
name|output
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|repoUrl
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|generated
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|boot
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Dependency
name|dep
range|:
name|generatedDep
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|isPrerequisite
argument_list|()
condition|)
block|{
if|if
condition|(
name|boot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boot
operator|=
literal|"("
expr_stmt|;
block|}
else|else
block|{
name|boot
operator|=
name|boot
operator|+
literal|","
expr_stmt|;
block|}
name|boot
operator|=
name|boot
operator|+
name|dep
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|boot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boot
operator|=
name|boot
operator|+
literal|")"
expr_stmt|;
block|}
comment|// TODO: for dependencies, we'd need to resolve the features completely
for|for
control|(
name|Dependency
name|dep
range|:
name|generatedDep
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dep
operator|.
name|isPrerequisite
argument_list|()
operator|&&
operator|!
name|dep
operator|.
name|isDependency
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|boot
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boot
operator|=
name|boot
operator|+
literal|","
expr_stmt|;
block|}
name|boot
operator|=
name|boot
operator|+
name|dep
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|repos
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|rep
operator|.
name|getRepository
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|repos
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|repos
operator|=
name|repos
operator|+
literal|","
expr_stmt|;
block|}
name|repos
operator|=
name|repos
operator|+
name|repo
expr_stmt|;
block|}
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|(
name|featuresCfgFile
argument_list|)
decl_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|repos
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|boot
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Handle installed profiles
comment|//
name|Profile
name|installedOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|installedProfile
argument_list|,
name|allProfiles
argument_list|)
decl_stmt|;
name|Profile
name|installedEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|installedOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Load startup repositories
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|installedRepositories
init|=
name|loadRepositories
argument_list|(
name|installedEffective
operator|.
name|getRepositories
argument_list|()
argument_list|)
decl_stmt|;
comment|// Install all repositories
for|for
control|(
name|String
name|repository
range|:
name|installedRepositories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|repository
argument_list|)
expr_stmt|;
block|}
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|allInstalledFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|installedRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|allInstalledFeatures
operator|.
name|addAll
argument_list|(
name|repo
operator|.
name|getFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Feature
argument_list|>
name|installedFeatures
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|installedEffective
operator|.
name|getFeatures
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|installAllFeaturesByDefault
condition|)
block|{
name|installedFeatures
operator|.
name|addAll
argument_list|(
name|allInstalledFeatures
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Add boot features for search
name|allInstalledFeatures
operator|.
name|addAll
argument_list|(
name|allBootFeatures
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|installedEffective
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|addFeatures
argument_list|(
name|installedFeatures
argument_list|,
name|allInstalledFeatures
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Feature
name|feature
range|:
name|installedFeatures
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|installArtifact
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|cond
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|installArtifact
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|location
range|:
name|installedEffective
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|// TODO: install config files
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loadRepositories
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loaded
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
name|doLoadRepository
argument_list|(
name|loaded
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
return|return
name|loaded
return|;
block|}
specifier|private
name|void
name|doLoadRepository
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loaded
parameter_list|,
name|String
name|repository
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|loaded
operator|.
name|containsKey
argument_list|(
name|repository
argument_list|)
condition|)
block|{
name|Features
name|featuresModel
init|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|repository
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|loaded
operator|.
name|put
argument_list|(
name|repository
argument_list|,
name|featuresModel
argument_list|)
expr_stmt|;
comment|// recursively process the inner repositories
for|for
control|(
name|String
name|innerRepository
range|:
name|featuresModel
operator|.
name|getRepository
argument_list|()
control|)
block|{
name|doLoadRepository
argument_list|(
name|loaded
argument_list|,
name|innerRepository
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Profile
name|generateProfile
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|allProfiles
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|profiles
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bundles
parameter_list|)
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setParents
argument_list|(
name|profiles
argument_list|)
operator|.
name|setRepositories
argument_list|(
name|repositories
argument_list|)
operator|.
name|setFeatures
argument_list|(
name|features
argument_list|)
operator|.
name|setBundles
argument_list|(
name|bundles
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|allProfiles
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
return|return
name|profile
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nonNullList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|list
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
else|:
name|list
return|;
block|}
specifier|private
name|void
name|addFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|>
name|startupFeatures
parameter_list|,
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|,
name|String
name|feature
parameter_list|)
block|{
name|int
name|nbFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|features
control|)
block|{
name|String
index|[]
name|split
init|=
name|feature
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
operator|&&
name|f
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
for|for
control|(
name|Dependency
name|dep
range|:
name|f
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|addFeatures
argument_list|(
name|startupFeatures
argument_list|,
name|features
argument_list|,
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startupFeatures
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|nbFound
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|feature
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Dependency
name|dep
range|:
name|f
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|addFeatures
argument_list|(
name|startupFeatures
argument_list|,
name|features
argument_list|,
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startupFeatures
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|nbFound
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|nbFound
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find matching feature for "
operator|+
name|feature
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|installStartupArtifact
parameter_list|(
name|String
name|location
parameter_list|,
name|boolean
name|asFile
parameter_list|)
throws|throws
name|Exception
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"== Installing artifact "
operator|+
name|location
argument_list|)
expr_stmt|;
name|String
name|url
decl_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|url
operator|=
name|location
expr_stmt|;
name|path
operator|=
name|dependencyHelper
operator|.
name|pathFromMaven
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|asFile
condition|)
block|{
name|location
operator|=
literal|"file:"
operator|+
name|path
expr_stmt|;
block|}
block|}
else|else
block|{
name|url
operator|=
name|location
operator|.
name|replace
argument_list|(
literal|"profile:"
argument_list|,
literal|"file:"
operator|+
name|workDirectory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/etc/"
argument_list|)
expr_stmt|;
name|path
operator|=
literal|"generated/"
operator|+
name|location
operator|.
name|replaceAll
argument_list|(
literal|"[^0-9a-zA-Z.\\-_]+"
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|location
operator|=
literal|"file:"
operator|+
name|path
expr_stmt|;
block|}
name|File
name|bundleSystemFile
init|=
operator|new
name|File
argument_list|(
name|systemDirectory
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundleSystemFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|bundleSystemFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|bundleSystemFile
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|location
return|;
block|}
specifier|private
name|void
name|installArtifact
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"== Installing artifact "
operator|+
name|location
argument_list|)
expr_stmt|;
name|location
operator|=
name|DownloadManagerHelper
operator|.
name|stripUrl
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|=
name|DownloadManagerHelper
operator|.
name|removeInlinedMavenRepositoryUrl
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// for bad formed URL (like in Camel for mustache-compiler), we remove the trailing /
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|location
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|File
name|inputFile
init|=
name|dependencyHelper
operator|.
name|resolveById
argument_list|(
name|location
argument_list|,
name|getLog
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|targetFile
init|=
operator|new
name|File
argument_list|(
name|systemDirectory
argument_list|,
name|dependencyHelper
operator|.
name|pathFromMaven
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|inputFile
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
comment|// add metadata for snapshot
name|Artifact
name|artifact
init|=
name|dependencyHelper
operator|.
name|mvnToArtifact
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|artifact
operator|.
name|isSnapshot
argument_list|()
condition|)
block|{
name|File
name|metadataTarget
init|=
operator|new
name|File
argument_list|(
name|targetFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|"maven-metadata-local.xml"
argument_list|)
decl_stmt|;
try|try
block|{
name|MavenUtil
operator|.
name|generateMavenMetadata
argument_list|(
name|artifact
argument_list|,
name|metadataTarget
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Could not create maven-metadata-local.xml"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"It means that this SNAPSHOT could be overwritten by an older one present on remote repositories"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Ignoring artifact "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|installConfig
parameter_list|(
name|Config
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"== Installing configuration "
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|configFile
init|=
name|workDirectory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"etc/"
operator|+
name|config
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|configFile
argument_list|)
condition|)
block|{
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|isAppend
argument_list|()
condition|)
block|{
comment|// TODO
block|}
block|}
block|}
end_class

end_unit

