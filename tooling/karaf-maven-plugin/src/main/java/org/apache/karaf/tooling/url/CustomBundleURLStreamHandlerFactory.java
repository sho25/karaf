begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|url
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandlerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CustomBundleURLStreamHandlerFactory
implements|implements
name|URLStreamHandlerFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MVN_URI_PREFIX
init|=
literal|"mvn"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRAP_URI_PREFIX
init|=
literal|"wrap"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURE_URI_PREFIX
init|=
literal|"feature"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPRING_URI_PREFIX
init|=
literal|"spring"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLUEPRINT_URI_PREFIX
init|=
literal|"blueprint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAR_URI_PREFIX
init|=
literal|"war"
decl_stmt|;
specifier|public
name|URLStreamHandler
name|createURLStreamHandler
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|MVN_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|Handler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|WRAP_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|wrap
operator|.
name|Handler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|FEATURE_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|FeatureURLHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|SPRING_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|SpringURLHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|BLUEPRINT_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|BlueprintURLHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|WAR_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|WarURLHandler
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

