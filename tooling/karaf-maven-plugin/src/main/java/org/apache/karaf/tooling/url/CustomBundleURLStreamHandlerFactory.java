begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|url
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandlerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolvers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|ServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|internal
operator|.
name|AetherBasedResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|internal
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|internal
operator|.
name|config
operator|.
name|MavenConfigurationImpl
import|;
end_import

begin_import
import|import
name|shaded
operator|.
name|org
operator|.
name|ops4j
operator|.
name|util
operator|.
name|property
operator|.
name|PropertiesPropertyResolver
import|;
end_import

begin_class
specifier|public
class|class
name|CustomBundleURLStreamHandlerFactory
implements|implements
name|URLStreamHandlerFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MVN_URI_PREFIX
init|=
literal|"mvn"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WRAP_URI_PREFIX
init|=
literal|"wrap"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURE_URI_PREFIX
init|=
literal|"feature"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPRING_URI_PREFIX
init|=
literal|"spring"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLUEPRINT_URI_PREFIX
init|=
literal|"blueprint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAR_URI_PREFIX
init|=
literal|"war"
decl_stmt|;
specifier|private
specifier|final
name|MavenResolver
name|mavenResolver
decl_stmt|;
specifier|public
name|CustomBundleURLStreamHandlerFactory
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CustomBundleURLStreamHandlerFactory
parameter_list|(
name|MavenResolver
name|mavenResolver
parameter_list|)
block|{
name|this
operator|.
name|mavenResolver
operator|=
name|mavenResolver
expr_stmt|;
block|}
specifier|public
name|URLStreamHandler
name|createURLStreamHandler
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|MVN_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|URLStreamHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|u
parameter_list|)
throws|throws
name|IOException
block|{
name|MavenResolver
name|resolver
init|=
name|mavenResolver
decl_stmt|;
if|if
condition|(
name|resolver
operator|==
literal|null
condition|)
block|{
name|PropertiesPropertyResolver
name|propertyResolver
init|=
operator|new
name|PropertiesPropertyResolver
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MavenConfigurationImpl
name|config
init|=
operator|new
name|MavenConfigurationImpl
argument_list|(
name|propertyResolver
argument_list|,
name|ServiceConstants
operator|.
name|PID
argument_list|)
decl_stmt|;
name|resolver
operator|=
operator|new
name|AetherBasedResolver
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Connection
argument_list|(
name|u
argument_list|,
name|resolver
argument_list|)
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|WRAP_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|wrap
operator|.
name|Handler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|FEATURE_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|FeatureURLHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|SPRING_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|SpringURLHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|BLUEPRINT_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|BlueprintURLHandler
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|WAR_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
operator|new
name|WarURLHandler
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|install
parameter_list|()
block|{
name|install
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|install
parameter_list|(
name|MavenResolver
name|mavenResolver
parameter_list|)
block|{
name|uninstall
argument_list|()
expr_stmt|;
name|URL
operator|.
name|setURLStreamHandlerFactory
argument_list|(
operator|new
name|CustomBundleURLStreamHandlerFactory
argument_list|(
name|mavenResolver
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|uninstall
parameter_list|()
block|{
try|try
block|{
name|Field
name|handlersField
init|=
name|URL
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"handlers"
argument_list|)
decl_stmt|;
name|Field
name|factoryField
init|=
name|URL
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"factory"
argument_list|)
decl_stmt|;
name|factoryField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factoryField
operator|.
name|set
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|handlersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|handlersField
operator|.
name|set
argument_list|(
literal|null
argument_list|,
operator|new
name|Hashtable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

