begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermissions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|IoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|MavenUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|MojoSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
operator|.
name|ReactorMavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tools
operator|.
name|utils
operator|.
name|model
operator|.
name|KarafPropertyEdits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tools
operator|.
name|utils
operator|.
name|model
operator|.
name|io
operator|.
name|stax
operator|.
name|KarafPropertyInstructionsModelStaxReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|LifecyclePhase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Mojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|annotations
operator|.
name|ResolutionScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|aether
operator|.
name|repository
operator|.
name|WorkspaceReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|FrameworkFactory
import|;
end_import

begin_comment
comment|/**  * Creates a customized Karaf distribution by installing features and setting up  * configuration files.  *  *<p>The plugin gets features from feature.xml files and KAR  * archives declared as dependencies or as files configured with the  * [startup|boot|installed]Respositories parameters. It picks up other files, such as config files,  * from ${project.build.directory}/classes. Thus, a file in src/main/resources/etc  * will be copied by the resource plugin to ${project.build.directory}/classes/etc,  * and then added to the assembly by this goal.  */
end_comment

begin_class
annotation|@
name|Mojo
argument_list|(
name|name
operator|=
literal|"assembly"
argument_list|,
name|defaultPhase
operator|=
name|LifecyclePhase
operator|.
name|PACKAGE
argument_list|,
name|requiresDependencyResolution
operator|=
name|ResolutionScope
operator|.
name|RUNTIME
argument_list|,
name|threadSafe
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|AssemblyMojo
extends|extends
name|MojoSupport
block|{
comment|/**      * Base directory used to overwrite resources in generated assembly after the build (resource directory).      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.basedir}/src/main/resources/assembly"
argument_list|)
specifier|protected
name|File
name|sourceDirectory
decl_stmt|;
comment|/**      * Base directory used to copy the resources during the build (working directory).      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.build.directory}/assembly"
argument_list|)
specifier|protected
name|File
name|workDirectory
decl_stmt|;
comment|/**      * Optional location for custom features processing XML configuration      * (<code>etc/org.apache.karaf.features.cfg</code>)      */
annotation|@
name|Parameter
specifier|protected
name|File
name|featuresProcessing
decl_stmt|;
comment|/*      * There are three builder stages related to maven dependency scopes:      *  - Stage.Startup : scope=compile      *  - Stage.Boot : scope=runtime      *  - Stage.Installed : scope=provided      * There's special category not related to stage - Blacklisted      *      * There are five kinds of artifacts/dependencies that may go into any of the above stages/categories/scopes:      *  - kars: maven artifacts with "kar" type      *  - repositories: maven artifacts with "features" classifier      *  - features: Karaf feature names (name[/version])      *  - bundles: maven artifacts with "jar" or "bundle" type      *  - profiles: directories with Karaf 4 profiles      * (Not all artifacts/dependencies may be connected with every stage/category/scope.)      *      * Blacklisting:      *  - kars: there are no blacklisted kars      *  - repositories: won't be processed at all (also affects transitive repositories)      *  - features: will be removed from JAXB model of features XML after loading      *  - bundles: will be removed from features of JAXB model after loading      *  - profiles: will be removed      *      * Stage.Startup:      *  - bundles: will be put to etc/startup.properties      *  - features: their bundles will be put to etc/startup.properties      *  - repositories: will be used to resolve startup bundles/feature before adding them to etc/startup.properties      *  - kars: unpacked to assembly, detected features XML repositories added as Stage.Startup repositories      *      * Stage.Boot:      *  - bundles: special etc/<UUID>.xml features XML file will be created with<UUID> feature.      *      etc/org.apacha.karaf.features.cfg will have this features XML file in featuresRepositories property and      *      the feature itself in featuresBoot property      *  - features: will be added to etc/org.apacha.karaf.features.cfg file, featuresBoot property      *      also features from Stage.Startup will be used here.      *  - repositories: will be added to etc/org.apacha.karaf.features.cfg file, featuresRepositories property      *      also repositories from Stage.Startup will be used here.      *  - kars: unpacked to assembly, detected features XML repositories added as Stage.Boot repositories      *      * Stage.Installed:      *  - bundles: will be copied to system/      *  - features: their bundles and config files will be copied to system/      *  - repositories: will be used to find Stage.Installed features      *      also repositories from Stage.Boot will be searched for Stage.Installed features      *  - kars: unpacked to assembly, detected features XML repositories added as Stage.Installed repositories      */
comment|/**      * For given stage (startup, boot, install) if there are no stage-specific features and profiles, all features      * from stage-specific repositories will be used.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
specifier|protected
name|boolean
name|installAllFeaturesByDefault
init|=
literal|true
decl_stmt|;
comment|/**      * An environment identifier that may be used to select different variant of PID configuration file, e.g.,      *<code>org.ops4j.pax.url.mvn.cfg#docker</code>.      */
annotation|@
name|Parameter
specifier|private
name|String
name|environment
decl_stmt|;
comment|/**      * Default start level for bundles in features that don't specify it.      */
annotation|@
name|Parameter
specifier|protected
name|int
name|defaultStartLevel
init|=
literal|30
decl_stmt|;
comment|/**      * List of additional allowed protocols on bundles location URI      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|extraProtocols
decl_stmt|;
comment|/**      * List of compile-scope features XML files to be used in startup stage (etc/startup.properties)      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupRepositories
decl_stmt|;
comment|/**      * List of runtime-scope features XML files to be used in boot stage (etc/org.apache.karaf.features.cfg)      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootRepositories
decl_stmt|;
comment|/**      * List of provided-scope features XML files to be used in install stage      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedRepositories
decl_stmt|;
comment|/**      * List of blacklisted repository URIs. Blacklisted URI may use globs and version ranges. See      * {@link org.apache.karaf.features.LocationPattern}.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedRepositories
decl_stmt|;
comment|/**      * List of features from compile-scope features XML files and KARs to be installed into system repo      * and listed in etc/startup.properties.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupFeatures
decl_stmt|;
comment|/**      * List of features from runtime-scope features XML files and KARs to be installed into system repo      * and listed in featuresBoot property in etc/org.apache.karaf.features.cfg      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootFeatures
decl_stmt|;
comment|/**      * List of features from provided-scope features XML files and KARs to be installed into system repo      * and not mentioned elsewhere.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedFeatures
decl_stmt|;
comment|/**      *<p>List of feature blacklisting clauses. Each clause is in one of the formats ({@link org.apache.karaf.features.FeaturePattern}):<ul>      *<li><code>feature-name</code></li>      *<li><code>feature-name;range=version-or-range</code></li>      *<li><code>feature-name/version-or-range</code></li>      *</ul></p>      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedFeatures
decl_stmt|;
comment|/**      * List of compile-scope bundles added to etc/startup.properties      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupBundles
decl_stmt|;
comment|/**      * List of runtime-scope bundles wrapped in special feature added to featuresBoot property      * in etc/org.apache.karaf.features.cfg      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootBundles
decl_stmt|;
comment|/**      * List of provided-scope bundles added to system repo      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedBundles
decl_stmt|;
comment|/**      * List of blacklisted bundle URIs. Blacklisted URI may use globs and version ranges. See      * {@link org.apache.karaf.features.LocationPattern}.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedBundles
decl_stmt|;
comment|/**      * List of profile URIs to use      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|profilesUris
decl_stmt|;
comment|/**      * List of profiles names to load from configured<code>profilesUris</code> and use as startup profiles.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupProfiles
decl_stmt|;
comment|/**      * List of profiles names to load from configured<code>profilesUris</code> and use as boot profiles.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootProfiles
decl_stmt|;
comment|/**      * List of profiles names to load from configured<code>profilesUris</code> and use as installed profiles.      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedProfiles
decl_stmt|;
comment|/**      * List of blacklisted profile names (possibly using<code>*</code> glob)      */
annotation|@
name|Parameter
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedProfiles
decl_stmt|;
comment|/**      * When assembly custom distribution, we can include generated and added profiles in the distribution itself,      * in<code>${karaf.etc}/profiles</code> directory.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
specifier|private
name|boolean
name|writeProfiles
decl_stmt|;
comment|/**      * When assembly custom distribution, we can also generate an XML/XSLT report with the summary of bundles.      * This parameter specifies target directory, to which<code>bundle-report.xml</code> and<code>bundle-report-full.xml</code>      * (along with XSLT stylesheet) will be written.      */
annotation|@
name|Parameter
specifier|private
name|String
name|generateConsistencyReport
decl_stmt|;
comment|/**      * When generating consistency report, we can specify project name. By default it's "Apache Karaf"      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"Apache Karaf"
argument_list|)
specifier|private
name|String
name|consistencyReportProjectName
decl_stmt|;
comment|/**      * When generating consistency report, we can specify project version. By default it's "${project.version}"      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.version}"
argument_list|)
specifier|private
name|String
name|consistencyReportProjectVersion
decl_stmt|;
comment|/*      * KARs are not configured using Maven plugin configuration, but rather detected from dependencies.      * All KARs are just unzipped into the assembly being constructed, but additionally KAR's embedded      * features XML repositories are added to relevant stage.      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|startupKars
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bootKars
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|installedKars
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * TODOCUMENT      */
annotation|@
name|Parameter
specifier|private
name|Builder
operator|.
name|BlacklistPolicy
name|blacklistPolicy
init|=
name|Builder
operator|.
name|BlacklistPolicy
operator|.
name|Discard
decl_stmt|;
comment|/**      * Ignore the dependency attribute (dependency="[true|false]") on bundles, effectively forcing their      * installation.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
specifier|protected
name|boolean
name|ignoreDependencyFlag
decl_stmt|;
comment|/**      *<p>Additional libraries to add into assembled distribution. Libraries are specified using      *<code>name[;url:=&lt;url&gt;][;type:=&lt;type&gt;][;export:=true|false][;delegate:=true|false]</code>      * syntax. If there's no<code>url</code> header directive,<code>name</code> is used as URI. Otherwise      *<code>name</code> is used as target file name to use.      *      *<p><code>type</code> may be:<ul>      *<li>endorsed - library will be added to<code>${karaf.home}/lib/endorsed</code></li>      *<li>extension - library will be added to<code>${karaf.home}/lib/ext</code></li>      *<li>boot - library will be added to<code>${karaf.home}/lib/boot</code></li>      *<li>by default, library is put directly into<code>${karaf.home}/lib</code> - these libraries will      *     be used in default classloader for OSGi framework which will load {@link FrameworkFactory} implementation.</li>      *</ul>      *      *<p><code>export</code> flag determines whether packages from<code>Export-Package</code> manifest      * header of the library will be added to<code>org.osgi.framework.system.packages.extra</code> property in      *<code>${karaf.etc}/config.properties</code>.      *      *<p><code>delegate</code> flag determines whether packages from<code>Export-Pavkage</code> manifest      * header of the library will be added to<code>org.osgi.framework.bootdelegation</code> property in      *<code>${karaf.etc}/config.properties</code>.      */
annotation|@
name|Parameter
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|libraries
decl_stmt|;
comment|/**      * Use<code>reference:file:gr/oup/Id/artifactId/version/artifactId-version-classifier.type</code> style      * urls in<code>etc/startup.properties</code>.      */
comment|// see:
comment|//  - org.apache.felix.framework.cache.BundleArchive.createRevisionFromLocation()
comment|//  - org.apache.karaf.main.Main.installAndStartBundles()
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"false"
argument_list|)
specifier|protected
name|boolean
name|useReferenceUrls
decl_stmt|;
comment|/**      * Include project build output directory in the assembly. This allows (filtered or unfiltered) Maven      * resources directories to be used to provide additional resources in the assembly.      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"true"
argument_list|)
specifier|protected
name|boolean
name|includeBuildOutputDirectory
decl_stmt|;
comment|/**      * Karaf version changes the way some configuration files are prepared (to adjust to given Karaf version      * requirements).      */
annotation|@
name|Parameter
specifier|protected
name|Builder
operator|.
name|KarafVersion
name|karafVersion
init|=
name|Builder
operator|.
name|KarafVersion
operator|.
name|v4x
decl_stmt|;
comment|/**      * Specify the version of Java SE to be assumed for osgi.ee. The value will be used in      *<code>etc/config.properties</code> file, in<code>java.specification.version</code> placeholder used in      * several properties:<ul>      *<li><code>org.osgi.framework.system.packages</code></li>      *<li><code>org.osgi.framework.system.capabilities</code></li>      *</ul>      *<p>Valid values are: 1.6, 1.7, 1.8, 9      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"1.8"
argument_list|)
specifier|protected
name|String
name|javase
decl_stmt|;
comment|/**      * Specify which framework to use      * (one of framework, framework-logback, static-framework, static-framework-logback, custom).      */
annotation|@
name|Parameter
specifier|protected
name|String
name|framework
decl_stmt|;
comment|/**      * Specify an XML file that instructs this goal to apply edits to      * one or more standard Karaf property files.      * The contents of this file are documented in detail on      *<a href="karaf-property-instructions-model.html">this page</a>.      * This allows you to      * customize these files without making copies in your resources      * directories. Here's a simple example:      *<pre>      * {@literal<property-edits xmlns="http://karaf.apache.org/tools/property-edits/1.0.0"><edits><edit><file>config.properties</file><operation>put</operation><key>karaf.framework</key><value>equinox</value></edit><edit><file>config.properties</file><operation>extend</operation><key>org.osgi.framework.system.capabilities</key><value>my-magic-capability</value></edit><edit><file>config.properties</file><operation prepend='true'>extend</operation><key>some-other-list</key><value>my-value-goes-first</value></edit></edits></property-edits>     }</pre>      */
annotation|@
name|Parameter
argument_list|(
name|defaultValue
operator|=
literal|"${project.basedir}/src/main/karaf/assembly-property-edits.xml"
argument_list|)
specifier|protected
name|String
name|propertyFileEdits
decl_stmt|;
comment|/**      * Glob specifying which configuration PIDs in the selected boot features      * should be extracted to<code>${karaf.etc}</code> directory. By default all PIDs are extracted.      */
annotation|@
name|Parameter
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|pidsToExtract
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
comment|/**      * Specify a set of translated urls to use instead of downloading the artifacts      * from their original locations.  The given set will be extended with already      * built artifacts from the maven project.      */
annotation|@
name|Parameter
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|translatedUrls
decl_stmt|;
comment|/**      * Specify a list of additional properties that should be added to<code>${karaf.etc}/config.properties</code>      */
annotation|@
name|Parameter
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
decl_stmt|;
comment|/**      * Specify a list of additional properties that should be added to<code>${karaf.etc}/system.properties</code>      */
annotation|@
name|Parameter
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|system
decl_stmt|;
annotation|@
name|Component
argument_list|(
name|role
operator|=
name|WorkspaceReader
operator|.
name|class
argument_list|,
name|hint
operator|=
literal|"reactor"
argument_list|)
specifier|protected
name|WorkspaceReader
name|reactor
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
try|try
block|{
name|setNullListsToEmpty
argument_list|()
expr_stmt|;
name|setNullMapsToEmpty
argument_list|()
expr_stmt|;
name|doExecute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
decl||
name|MojoFailureException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to build assembly"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Main processing method. Most of the work involves configuring and invoking {@link Builder a profile builder}.      */
specifier|protected
name|void
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|startupProfiles
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|bootProfiles
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|installedProfiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|profilesUris
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"profilesUris option must be specified"
argument_list|)
throw|;
block|}
block|}
name|Builder
name|builder
init|=
name|Builder
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// Set up miscellaneous options
name|builder
operator|.
name|extraProtocols
argument_list|(
name|extraProtocols
argument_list|)
expr_stmt|;
name|builder
operator|.
name|offline
argument_list|(
name|mavenSession
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|localRepository
argument_list|(
name|localRepo
operator|.
name|getBasedir
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|resolverWrapper
argument_list|(
parameter_list|(
name|resolver
parameter_list|)
lambda|->
operator|new
name|ReactorMavenResolver
argument_list|(
name|reactor
argument_list|,
name|resolver
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|javase
argument_list|(
name|javase
argument_list|)
expr_stmt|;
name|builder
operator|.
name|karafVersion
argument_list|(
name|karafVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|useReferenceUrls
argument_list|(
name|useReferenceUrls
argument_list|)
expr_stmt|;
name|builder
operator|.
name|defaultAddAll
argument_list|(
name|installAllFeaturesByDefault
argument_list|)
expr_stmt|;
name|builder
operator|.
name|ignoreDependencyFlag
argument_list|(
name|ignoreDependencyFlag
argument_list|)
expr_stmt|;
name|builder
operator|.
name|propertyEdits
argument_list|(
name|configurePropertyEdits
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|translatedUrls
argument_list|(
name|configureTranslatedUrls
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|pidsToExtract
argument_list|(
name|pidsToExtract
argument_list|)
expr_stmt|;
name|builder
operator|.
name|writeProfiles
argument_list|(
name|writeProfiles
argument_list|)
expr_stmt|;
name|builder
operator|.
name|generateConsistencyReport
argument_list|(
name|generateConsistencyReport
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setConsistencyReportProjectName
argument_list|(
name|consistencyReportProjectName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setConsistencyReportProjectVersion
argument_list|(
name|consistencyReportProjectVersion
argument_list|)
expr_stmt|;
name|builder
operator|.
name|environment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|builder
operator|.
name|defaultStartLevel
argument_list|(
name|defaultStartLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|featuresProcessing
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFeaturesProcessing
argument_list|(
name|featuresProcessing
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Set up remote repositories from Maven build, to be used by pax-url-aether resolver
name|String
name|remoteRepositories
init|=
name|MavenUtil
operator|.
name|remoteRepositoryList
argument_list|(
name|project
operator|.
name|getRemoteProjectRepositories
argument_list|()
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Using repositories:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|r
range|:
name|remoteRepositories
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"   "
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|mavenRepositories
argument_list|(
name|remoteRepositories
argument_list|)
expr_stmt|;
comment|// Set up config and system properties
name|config
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|config
argument_list|)
expr_stmt|;
name|system
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|system
argument_list|)
expr_stmt|;
comment|// Set up blacklisted items
name|builder
operator|.
name|blacklistBundles
argument_list|(
name|blacklistedBundles
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blacklistFeatures
argument_list|(
name|blacklistedFeatures
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blacklistProfiles
argument_list|(
name|blacklistedProfiles
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blacklistRepositories
argument_list|(
name|blacklistedRepositories
argument_list|)
expr_stmt|;
name|builder
operator|.
name|blacklistPolicy
argument_list|(
name|blacklistPolicy
argument_list|)
expr_stmt|;
comment|// Creating system directory
name|configureWorkDirectory
argument_list|()
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Creating work directory: "
operator|+
name|workDirectory
argument_list|)
expr_stmt|;
name|builder
operator|.
name|homeDirectory
argument_list|(
name|workDirectory
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Loading KARs and features repositories
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Loading direct KAR and features XML dependencies"
argument_list|)
expr_stmt|;
name|processDirectMavenDependencies
argument_list|()
expr_stmt|;
comment|// Set up profiles and libraries
name|profilesUris
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|profilesUris
argument_list|)
expr_stmt|;
name|libraries
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|libraries
argument_list|)
expr_stmt|;
comment|// Startup stage
name|detectStartupKarsAndFeatures
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|defaultStage
argument_list|(
name|Builder
operator|.
name|Stage
operator|.
name|Startup
argument_list|)
operator|.
name|kars
argument_list|(
name|toArray
argument_list|(
name|startupKars
argument_list|)
argument_list|)
operator|.
name|repositories
argument_list|(
name|startupFeatures
operator|.
name|isEmpty
argument_list|()
operator|&&
name|startupProfiles
operator|.
name|isEmpty
argument_list|()
operator|&&
name|installAllFeaturesByDefault
argument_list|,
name|toArray
argument_list|(
name|startupRepositories
argument_list|)
argument_list|)
operator|.
name|features
argument_list|(
name|toArray
argument_list|(
name|startupFeatures
argument_list|)
argument_list|)
operator|.
name|bundles
argument_list|(
name|toArray
argument_list|(
name|startupBundles
argument_list|)
argument_list|)
operator|.
name|profiles
argument_list|(
name|toArray
argument_list|(
name|startupProfiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Installed stage
name|builder
operator|.
name|defaultStage
argument_list|(
name|Builder
operator|.
name|Stage
operator|.
name|Installed
argument_list|)
operator|.
name|kars
argument_list|(
name|toArray
argument_list|(
name|installedKars
argument_list|)
argument_list|)
operator|.
name|repositories
argument_list|(
name|installedFeatures
operator|.
name|isEmpty
argument_list|()
operator|&&
name|installedProfiles
operator|.
name|isEmpty
argument_list|()
operator|&&
name|installAllFeaturesByDefault
argument_list|,
name|toArray
argument_list|(
name|installedRepositories
argument_list|)
argument_list|)
operator|.
name|features
argument_list|(
name|toArray
argument_list|(
name|installedFeatures
argument_list|)
argument_list|)
operator|.
name|bundles
argument_list|(
name|toArray
argument_list|(
name|installedBundles
argument_list|)
argument_list|)
operator|.
name|profiles
argument_list|(
name|toArray
argument_list|(
name|installedProfiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Boot stage
name|builder
operator|.
name|defaultStage
argument_list|(
name|Builder
operator|.
name|Stage
operator|.
name|Boot
argument_list|)
operator|.
name|kars
argument_list|(
name|toArray
argument_list|(
name|bootKars
argument_list|)
argument_list|)
operator|.
name|repositories
argument_list|(
name|bootFeatures
operator|.
name|isEmpty
argument_list|()
operator|&&
name|bootProfiles
operator|.
name|isEmpty
argument_list|()
operator|&&
name|installAllFeaturesByDefault
argument_list|,
name|toArray
argument_list|(
name|bootRepositories
argument_list|)
argument_list|)
operator|.
name|features
argument_list|(
name|toArray
argument_list|(
name|bootFeatures
argument_list|)
argument_list|)
operator|.
name|bundles
argument_list|(
name|toArray
argument_list|(
name|bootBundles
argument_list|)
argument_list|)
operator|.
name|profiles
argument_list|(
name|toArray
argument_list|(
name|bootProfiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Generate the assembly
name|builder
operator|.
name|generateAssembly
argument_list|()
expr_stmt|;
comment|// Include project classes content if not specified otherwise
if|if
condition|(
name|includeBuildOutputDirectory
condition|)
name|IoUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getOutputDirectory
argument_list|()
argument_list|)
argument_list|,
name|workDirectory
argument_list|)
expr_stmt|;
comment|// Overwrite assembly dir contents with source directory (not filtered) when directory exists
if|if
condition|(
name|sourceDirectory
operator|.
name|exists
argument_list|()
condition|)
name|IoUtils
operator|.
name|copyDirectory
argument_list|(
name|sourceDirectory
argument_list|,
name|workDirectory
argument_list|)
expr_stmt|;
comment|// Chmod the bin/* scripts
name|File
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|workDirectory
argument_list|,
literal|"bin"
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".bat"
argument_list|)
condition|)
block|{
try|try
block|{
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|file
operator|.
name|toPath
argument_list|()
argument_list|,
name|PosixFilePermissions
operator|.
name|fromString
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// we tried our best, perhaps the OS does not support POSIX file perms.
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|configureWorkDirectory
parameter_list|()
block|{
name|IoUtils
operator|.
name|deleteRecursive
argument_list|(
name|workDirectory
argument_list|)
expr_stmt|;
name|workDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|workDirectory
argument_list|,
literal|"etc"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|workDirectory
argument_list|,
literal|"system"
argument_list|)
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|/**      *<p>Turns direct maven dependencies into startup/boot/installed artifacts.</p>      *<p>{@link MavenProject#getDependencyArtifacts()} is deprecated, but we don't want (?) transitive      * dependencies given by {@link MavenProject#getArtifacts()}.</p>      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|processDirectMavenDependencies
parameter_list|()
block|{
for|for
control|(
name|Artifact
name|artifact
range|:
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
control|)
block|{
name|Builder
operator|.
name|Stage
name|stage
init|=
name|Builder
operator|.
name|Stage
operator|.
name|fromMavenScope
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stage
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|uri
init|=
name|artifactToMvn
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|getType
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
case|case
literal|"kar"
case|:
name|addUris
argument_list|(
name|stage
argument_list|,
name|uri
argument_list|,
name|startupKars
argument_list|,
name|bootKars
argument_list|,
name|installedKars
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"features"
case|:
name|addUris
argument_list|(
name|stage
argument_list|,
name|uri
argument_list|,
name|startupRepositories
argument_list|,
name|bootRepositories
argument_list|,
name|installedRepositories
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"bundle"
case|:
name|addUris
argument_list|(
name|stage
argument_list|,
name|uri
argument_list|,
name|startupBundles
argument_list|,
name|bootBundles
argument_list|,
name|installedBundles
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|addUris
parameter_list|(
name|Builder
operator|.
name|Stage
name|stage
parameter_list|,
name|String
name|uri
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|startup
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|boot
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|installed
parameter_list|)
block|{
switch|switch
condition|(
name|stage
condition|)
block|{
case|case
name|Startup
case|:
name|startup
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
name|Boot
case|:
name|boot
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
name|Installed
case|:
name|installed
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**      *<p>Custom distribution is created from at least one<em>startup KAR</em> and one<em>startup</em>      * feature. Such startup KAR + feature is called<em>framework</em>.</p>      *      *<p>We can specify one of 5<em>frameworks</em>:<ul>      *<li>framework:<code>mvn:org.apache.karaf.features/framework/VERSION/kar</code> and<code>framework</code> feature</li>      *<li>framework-logback:<code>mvn:org.apache.karaf.features/framework/VERSION/kar</code> and<code>framework-logback</code> feature</li>      *<li>static-framework:<code>mvn:org.apache.karaf.features/static/VERSION/kar</code> and<code>static-framework</code> feature</li>      *<li>static-framework-logback:<code>mvn:org.apache.karaf.features/static/VERSION/kar</code> and<code>static-framework-logback</code> feature</li>      *<li>custom: both startup KAR and startup feature has to be specified explicitly</li>      *</ul></p>      * @param builder      */
specifier|private
name|void
name|detectStartupKarsAndFeatures
parameter_list|(
name|Builder
name|builder
parameter_list|)
block|{
name|boolean
name|hasStandardKarafFrameworkKar
init|=
literal|false
decl_stmt|;
name|boolean
name|hasCustomFrameworkKar
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|startupKars
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|kar
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|kar
operator|.
name|startsWith
argument_list|(
literal|"mvn:org.apache.karaf.features/framework/"
argument_list|)
operator|||
name|kar
operator|.
name|startsWith
argument_list|(
literal|"mvn:org.apache.karaf.features/static/"
argument_list|)
condition|)
block|{
name|hasStandardKarafFrameworkKar
operator|=
literal|true
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
name|framework
operator|=
name|kar
operator|.
name|startsWith
argument_list|(
literal|"mvn:org.apache.karaf.features/framework/"
argument_list|)
condition|?
literal|"framework"
else|:
literal|"static-framework"
expr_stmt|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"   Standard startup Karaf KAR found: "
operator|+
name|kar
argument_list|)
expr_stmt|;
name|builder
operator|.
name|kars
argument_list|(
name|Builder
operator|.
name|Stage
operator|.
name|Startup
argument_list|,
literal|false
argument_list|,
name|kar
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasStandardKarafFrameworkKar
condition|)
block|{
if|if
condition|(
literal|"custom"
operator|.
name|equals
argument_list|(
name|framework
argument_list|)
condition|)
block|{
comment|// we didn't detect standard Karaf KAR (framework or static), so we expect at least one
comment|// other KAR dependency with compile scope and at least one startup feature
if|if
condition|(
name|startupKars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Custom KAR was declared, but there's no Maven dependency with type=kar and scope=compile."
operator|+
literal|" Please specify at least one KAR for custom assembly."
argument_list|)
throw|;
block|}
if|if
condition|(
name|startupFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Custom KAR was declared, but there's no startup feature declared."
operator|+
literal|" Please specify at least one startup feature defined in features XML repository inside custom startup KAR or startup repository."
argument_list|)
throw|;
block|}
name|hasCustomFrameworkKar
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|startupKar
range|:
name|startupKars
control|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"   Custom startup KAR found: "
operator|+
name|startupKar
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't determine framework to use (framework, framework-logback, static-framework, static-framework-logback, custom)."
operator|+
literal|" Please specify valid \"framework\" option or add Maven dependency with \"kar\" type and \"compile\" scope for one of standard Karaf KARs."
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|realKarafVersion
init|=
name|Version
operator|.
name|karafVersion
argument_list|()
decl_stmt|;
name|String
name|kar
decl_stmt|;
switch|switch
condition|(
name|framework
condition|)
block|{
case|case
literal|"framework"
case|:
case|case
literal|"framework-logback"
case|:
name|kar
operator|=
literal|"mvn:org.apache.karaf.features/framework/"
operator|+
name|realKarafVersion
operator|+
literal|"/kar"
expr_stmt|;
break|break;
case|case
literal|"static-framework"
case|:
case|case
literal|"static-framework-logback"
case|:
name|kar
operator|=
literal|"mvn:org.apache.karaf.features/static/"
operator|+
name|realKarafVersion
operator|+
literal|"/kar"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported framework: "
operator|+
name|framework
argument_list|)
throw|;
block|}
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"   Standard startup KAR implied from framework ("
operator|+
name|framework
operator|+
literal|"): "
operator|+
name|kar
argument_list|)
expr_stmt|;
name|builder
operator|.
name|kars
argument_list|(
name|Builder
operator|.
name|Stage
operator|.
name|Startup
argument_list|,
literal|false
argument_list|,
name|kar
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasStandardKarafFrameworkKar
operator|&&
operator|!
name|startupFeatures
operator|.
name|contains
argument_list|(
name|framework
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"   Feature "
operator|+
name|framework
operator|+
literal|" will be added as a startup feature"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|features
argument_list|(
name|Builder
operator|.
name|Stage
operator|.
name|Startup
argument_list|,
name|framework
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|KarafPropertyEdits
name|configurePropertyEdits
parameter_list|()
throws|throws
name|IOException
throws|,
name|XMLStreamException
block|{
name|KarafPropertyEdits
name|edits
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propertyFileEdits
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|propertyFileEdits
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
init|(
name|InputStream
name|editsStream
init|=
operator|new
name|FileInputStream
argument_list|(
name|propertyFileEdits
argument_list|)
init|)
block|{
name|KarafPropertyInstructionsModelStaxReader
name|kipmsr
init|=
operator|new
name|KarafPropertyInstructionsModelStaxReader
argument_list|()
decl_stmt|;
name|edits
operator|=
name|kipmsr
operator|.
name|read
argument_list|(
name|editsStream
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|edits
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configureTranslatedUrls
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|urls
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|project
operator|.
name|getAttachedArtifacts
argument_list|()
argument_list|)
decl_stmt|;
name|artifacts
operator|.
name|add
argument_list|(
name|project
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|artifacts
control|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
operator|&&
name|artifact
operator|.
name|getFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|mvnUrl
init|=
name|artifactToMvn
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|urls
operator|.
name|put
argument_list|(
name|mvnUrl
argument_list|,
name|artifact
operator|.
name|getFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|urls
operator|.
name|putAll
argument_list|(
name|translatedUrls
argument_list|)
expr_stmt|;
return|return
name|urls
return|;
block|}
specifier|private
name|String
name|getType
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
comment|// Identify kars
if|if
condition|(
literal|"kar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"kar"
return|;
block|}
if|if
condition|(
literal|"zip"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
init|(
name|ZipFile
name|zip
init|=
operator|new
name|ZipFile
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|zip
operator|.
name|getEntry
argument_list|(
literal|"META-INF/KARAF.MF"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|"kar"
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
comment|// Identify features
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getClassifier
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"features"
return|;
block|}
if|if
condition|(
literal|"xml"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
init|)
block|{
name|XMLInputFactory
name|xif
init|=
name|XMLInputFactory
operator|.
name|newFactory
argument_list|()
decl_stmt|;
name|xif
operator|.
name|setProperty
argument_list|(
name|XMLInputFactory
operator|.
name|IS_NAMESPACE_AWARE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|XMLStreamReader
name|r
init|=
name|xif
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|r
operator|.
name|nextTag
argument_list|()
expr_stmt|;
name|QName
name|name
init|=
name|r
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"features"
argument_list|)
operator|&&
operator|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"http://karaf.apache.org/xmlns/features/"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|"features"
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
comment|// Identify bundles
if|if
condition|(
literal|"bundle"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"bundle"
return|;
block|}
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
init|(
name|JarFile
name|jar
init|=
operator|new
name|JarFile
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
init|)
block|{
name|Manifest
name|manifest
init|=
name|jar
operator|.
name|getManifest
argument_list|()
decl_stmt|;
if|if
condition|(
name|manifest
operator|!=
literal|null
operator|&&
name|manifest
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|"bundle"
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
return|return
literal|"unknown"
return|;
block|}
specifier|private
name|String
name|artifactToMvn
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|String
name|uri
decl_stmt|;
name|String
name|groupId
init|=
name|artifact
operator|.
name|getGroupId
argument_list|()
decl_stmt|;
name|String
name|artifactId
init|=
name|artifact
operator|.
name|getArtifactId
argument_list|()
decl_stmt|;
name|String
name|version
init|=
name|artifact
operator|.
name|getBaseVersion
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|artifact
operator|.
name|getArtifactHandler
argument_list|()
operator|.
name|getExtension
argument_list|()
decl_stmt|;
name|String
name|classifier
init|=
name|artifact
operator|.
name|getClassifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|MavenUtil
operator|.
name|isEmpty
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|uri
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s/%s"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|uri
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s/%s/%s"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|type
argument_list|,
name|classifier
argument_list|)
expr_stmt|;
block|}
return|return
name|uri
return|;
block|}
specifier|private
name|String
index|[]
name|toArray
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
block|{
return|return
name|strings
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|strings
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|setNullListsToEmpty
parameter_list|()
block|{
name|startupRepositories
operator|=
name|nonNullList
argument_list|(
name|startupRepositories
argument_list|)
expr_stmt|;
name|bootRepositories
operator|=
name|nonNullList
argument_list|(
name|bootRepositories
argument_list|)
expr_stmt|;
name|installedRepositories
operator|=
name|nonNullList
argument_list|(
name|installedRepositories
argument_list|)
expr_stmt|;
name|blacklistedRepositories
operator|=
name|nonNullList
argument_list|(
name|blacklistedRepositories
argument_list|)
expr_stmt|;
name|extraProtocols
operator|=
name|nonNullList
argument_list|(
name|extraProtocols
argument_list|)
expr_stmt|;
name|startupBundles
operator|=
name|nonNullList
argument_list|(
name|startupBundles
argument_list|)
expr_stmt|;
name|bootBundles
operator|=
name|nonNullList
argument_list|(
name|bootBundles
argument_list|)
expr_stmt|;
name|installedBundles
operator|=
name|nonNullList
argument_list|(
name|installedBundles
argument_list|)
expr_stmt|;
name|blacklistedBundles
operator|=
name|nonNullList
argument_list|(
name|blacklistedBundles
argument_list|)
expr_stmt|;
name|startupFeatures
operator|=
name|nonNullList
argument_list|(
name|startupFeatures
argument_list|)
expr_stmt|;
name|bootFeatures
operator|=
name|nonNullList
argument_list|(
name|bootFeatures
argument_list|)
expr_stmt|;
name|installedFeatures
operator|=
name|nonNullList
argument_list|(
name|installedFeatures
argument_list|)
expr_stmt|;
name|blacklistedFeatures
operator|=
name|nonNullList
argument_list|(
name|blacklistedFeatures
argument_list|)
expr_stmt|;
name|startupProfiles
operator|=
name|nonNullList
argument_list|(
name|startupProfiles
argument_list|)
expr_stmt|;
name|bootProfiles
operator|=
name|nonNullList
argument_list|(
name|bootProfiles
argument_list|)
expr_stmt|;
name|installedProfiles
operator|=
name|nonNullList
argument_list|(
name|installedProfiles
argument_list|)
expr_stmt|;
name|blacklistedProfiles
operator|=
name|nonNullList
argument_list|(
name|blacklistedProfiles
argument_list|)
expr_stmt|;
name|libraries
operator|=
name|nonNullList
argument_list|(
name|libraries
argument_list|)
expr_stmt|;
name|profilesUris
operator|=
name|nonNullList
argument_list|(
name|profilesUris
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setNullMapsToEmpty
parameter_list|()
block|{
name|config
operator|=
name|nonNullMap
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|system
operator|=
name|nonNullMap
argument_list|(
name|system
argument_list|)
expr_stmt|;
name|translatedUrls
operator|=
name|nonNullMap
argument_list|(
name|translatedUrls
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|nonNullList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nonNullList
init|=
name|list
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<>
argument_list|()
else|:
name|list
decl_stmt|;
return|return
name|nonNullList
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Objects
operator|::
name|nonNull
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nonNullMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|map
operator|==
literal|null
condition|?
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
else|:
name|map
return|;
block|}
block|}
end_class

end_unit

