begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|url
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|blueprint
operator|.
name|BlueprintTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandler
import|;
end_import

begin_comment
comment|/**  * Simple workaround for "WAR" prefix.  */
end_comment

begin_class
specifier|public
class|class
name|WarURLHandler
extends|extends
name|URLStreamHandler
block|{
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WarURLHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|SYNTAX
init|=
literal|"war: war-uri"
decl_stmt|;
specifier|private
name|URL
name|warURL
decl_stmt|;
comment|/**      * Open the connection for the given URL.      *      * @param url the url from which to open a connection.      * @return a connection on the specified URL.      * @throws java.io.IOException if an error occurs or if the URL is malformed.      */
annotation|@
name|Override
specifier|public
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|url
operator|.
name|getPath
argument_list|()
operator|==
literal|null
operator|||
name|url
operator|.
name|getPath
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Path can not be null or empty. Syntax: "
operator|+
name|SYNTAX
argument_list|)
throw|;
block|}
comment|// We don't resolve any specific data here, just forward it to another URL Stream Handler
name|warURL
operator|=
operator|new
name|URL
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|warURL
operator|.
name|openConnection
argument_list|()
return|;
block|}
specifier|public
name|URL
name|getWarURL
parameter_list|()
block|{
return|return
name|warURL
return|;
block|}
block|}
end_class

end_unit

