begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataRetrievalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ResolutionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|CyclicDependencyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ResolutionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ResolutionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|filter
operator|.
name|ArtifactFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|ArtifactVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|OverConstrainedVersionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|legacy
operator|.
name|resolver
operator|.
name|conflict
operator|.
name|ConflictResolver
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|GraphArtifactCollector
implements|implements
name|ArtifactCollector
block|{
specifier|public
name|ArtifactResolutionResult
name|collect
parameter_list|(
name|Set
name|artifacts
parameter_list|,
name|Artifact
name|originatingArtifact
parameter_list|,
name|ArtifactRepository
name|localRepository
parameter_list|,
name|List
name|remoteRepositories
parameter_list|,
name|ArtifactMetadataSource
name|source
parameter_list|,
name|ArtifactFilter
name|filter
parameter_list|,
name|List
name|listeners
parameter_list|)
throws|throws
name|ArtifactResolutionException
block|{
return|return
name|collect
argument_list|(
name|artifacts
argument_list|,
name|originatingArtifact
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|localRepository
argument_list|,
name|remoteRepositories
argument_list|,
name|source
argument_list|,
name|filter
argument_list|,
name|listeners
argument_list|)
return|;
block|}
specifier|public
name|ArtifactResolutionResult
name|collect
parameter_list|(
name|Set
name|artifacts
parameter_list|,
name|Artifact
name|originatingArtifact
parameter_list|,
name|Map
name|managedVersions
parameter_list|,
name|ArtifactRepository
name|localRepository
parameter_list|,
name|List
name|remoteRepositories
parameter_list|,
name|ArtifactMetadataSource
name|source
parameter_list|,
name|ArtifactFilter
name|filter
parameter_list|,
name|List
name|listeners
parameter_list|)
block|{
name|Map
name|resolvedArtifacts
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|ResolutionNode
name|root
init|=
operator|new
name|ResolutionNode
argument_list|(
name|originatingArtifact
argument_list|,
name|remoteRepositories
argument_list|)
decl_stmt|;
try|try
block|{
name|root
operator|.
name|addDependencies
argument_list|(
name|artifacts
argument_list|,
name|remoteRepositories
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|recurse
argument_list|(
name|root
argument_list|,
name|resolvedArtifacts
argument_list|,
name|managedVersions
argument_list|,
name|localRepository
argument_list|,
name|remoteRepositories
argument_list|,
name|source
argument_list|,
name|filter
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Set
name|set
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|resolvedArtifacts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|List
name|nodes
init|=
operator|(
name|List
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ResolutionNode
name|node
init|=
operator|(
name|ResolutionNode
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Artifact
name|artifact
init|=
name|node
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|equals
argument_list|(
name|root
argument_list|)
operator|&&
name|node
operator|.
name|isActive
argument_list|()
operator|&&
name|node
operator|.
name|filterTrail
argument_list|(
name|filter
argument_list|)
comment|// If it was optional and not a direct dependency,
comment|// we don't add it or its children, just allow the
comment|// update of the version and scope
operator|&&
operator|(
name|node
operator|.
name|isChildOfRootNode
argument_list|()
operator|||
operator|!
name|artifact
operator|.
name|isOptional
argument_list|()
operator|)
condition|)
block|{
name|artifact
operator|.
name|setDependencyTrail
argument_list|(
name|node
operator|.
name|getDependencyTrail
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OverConstrainedVersionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
name|ArtifactResolutionResult
name|result
init|=
operator|new
name|ArtifactResolutionResult
argument_list|()
decl_stmt|;
name|result
operator|.
name|setArtifactResolutionNodes
argument_list|(
name|set
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|recurse
parameter_list|(
name|ResolutionNode
name|node
parameter_list|,
name|Map
name|resolvedArtifacts
parameter_list|,
name|Map
name|managedVersions
parameter_list|,
name|ArtifactRepository
name|localRepository
parameter_list|,
name|List
name|remoteRepositories
parameter_list|,
name|ArtifactMetadataSource
name|source
parameter_list|,
name|ArtifactFilter
name|filter
parameter_list|,
name|List
name|listeners
parameter_list|)
throws|throws
name|CyclicDependencyException
throws|,
name|ArtifactResolutionException
throws|,
name|OverConstrainedVersionException
block|{
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|TEST_ARTIFACT
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|)
expr_stmt|;
comment|// TODO: use as a conflict resolver
name|Object
name|key
init|=
name|node
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|managedVersions
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|Artifact
name|artifact
init|=
operator|(
name|Artifact
operator|)
name|managedVersions
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|MANAGE_ARTIFACT
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
if|if
condition|(
name|artifact
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setVersion
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|getScope
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setScope
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|previousNodes
init|=
operator|(
name|List
operator|)
name|resolvedArtifacts
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousNodes
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
name|checkPreviousNodes
argument_list|(
name|node
argument_list|,
name|listeners
argument_list|,
name|previousNodes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|previousNodes
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|resolvedArtifacts
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|previousNodes
argument_list|)
expr_stmt|;
block|}
name|previousNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|INCLUDE_ARTIFACT
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// don't pull in the transitive deps of a system-scoped dependency.
if|if
condition|(
name|node
operator|.
name|isActive
argument_list|()
operator|&&
operator|!
name|Artifact
operator|.
name|SCOPE_SYSTEM
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|PROCESS_CHILDREN
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|node
operator|.
name|getChildrenIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ResolutionNode
name|child
init|=
operator|(
name|ResolutionNode
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We leave in optional ones, but don't pick up its dependencies
if|if
condition|(
operator|!
name|child
operator|.
name|isResolved
argument_list|()
operator|&&
operator|(
operator|!
name|child
operator|.
name|getArtifact
argument_list|()
operator|.
name|isOptional
argument_list|()
operator|||
name|child
operator|.
name|isChildOfRootNode
argument_list|()
operator|)
condition|)
block|{
name|Artifact
name|artifact
init|=
name|child
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|artifact
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// set the recommended version
comment|// TODO: maybe its better to just pass the range
comment|// through to retrieval and use a transformation?
name|ArtifactVersion
name|version
decl_stmt|;
name|version
operator|=
name|getArtifactVersion
argument_list|(
name|localRepository
argument_list|,
name|remoteRepositories
argument_list|,
name|source
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|selectVersion
argument_list|(
name|version
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|SELECT_VERSION_FROM_RANGE
argument_list|,
name|listeners
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|ResolutionGroup
name|rGroup
init|=
name|source
operator|.
name|retrieve
argument_list|(
name|artifact
argument_list|,
name|localRepository
argument_list|,
name|remoteRepositories
argument_list|)
decl_stmt|;
comment|// TODO might be better to have source.retreive() throw
comment|// a specific exception for this situation
comment|// and catch here rather than have it return null
if|if
condition|(
name|rGroup
operator|==
literal|null
condition|)
block|{
comment|// relocated dependency artifact is declared
comment|// excluded, no need to add and recurse further
continue|continue;
block|}
name|child
operator|.
name|addDependencies
argument_list|(
name|rGroup
operator|.
name|getArtifacts
argument_list|()
argument_list|,
name|rGroup
operator|.
name|getResolutionRepositories
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CyclicDependencyException
name|e
parameter_list|)
block|{
comment|// would like to throw this, but we have crappy stuff in
comment|// the repo
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|OMIT_FOR_CYCLE
argument_list|,
name|listeners
argument_list|,
operator|new
name|ResolutionNode
argument_list|(
name|e
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|remoteRepositories
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactMetadataRetrievalException
name|e
parameter_list|)
block|{
name|artifact
operator|.
name|setDependencyTrail
argument_list|(
name|node
operator|.
name|getDependencyTrail
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ArtifactResolutionException
argument_list|(
literal|"Unable to get dependency information: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|artifact
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|recurse
argument_list|(
name|child
argument_list|,
name|resolvedArtifacts
argument_list|,
name|managedVersions
argument_list|,
name|localRepository
argument_list|,
name|remoteRepositories
argument_list|,
name|source
argument_list|,
name|filter
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
block|}
block|}
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|FINISH_PROCESSING_CHILDREN
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ArtifactVersion
name|getArtifactVersion
parameter_list|(
name|ArtifactRepository
name|localRepository
parameter_list|,
name|List
name|remoteRepositories
parameter_list|,
name|ArtifactMetadataSource
name|source
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
throws|throws
name|OverConstrainedVersionException
throws|,
name|ArtifactMetadataRetrievalException
block|{
name|ArtifactVersion
name|version
decl_stmt|;
if|if
condition|(
operator|!
name|artifact
operator|.
name|isSelectedVersionKnown
argument_list|()
condition|)
block|{
name|List
name|versions
init|=
name|artifact
operator|.
name|getAvailableVersions
argument_list|()
decl_stmt|;
if|if
condition|(
name|versions
operator|==
literal|null
condition|)
block|{
name|versions
operator|=
name|source
operator|.
name|retrieveAvailableVersions
argument_list|(
name|artifact
argument_list|,
name|localRepository
argument_list|,
name|remoteRepositories
argument_list|)
expr_stmt|;
name|artifact
operator|.
name|setAvailableVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
block|}
name|VersionRange
name|versionRange
init|=
name|artifact
operator|.
name|getVersionRange
argument_list|()
decl_stmt|;
name|version
operator|=
name|versionRange
operator|.
name|matchVersion
argument_list|(
name|versions
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|versions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|OverConstrainedVersionException
argument_list|(
literal|"No versions are present in the repository for the artifact with a range "
operator|+
name|versionRange
argument_list|,
name|artifact
argument_list|,
name|remoteRepositories
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|OverConstrainedVersionException
argument_list|(
literal|"Couldn't find a version in "
operator|+
name|versions
operator|+
literal|" to match range "
operator|+
name|versionRange
argument_list|,
name|artifact
argument_list|,
name|remoteRepositories
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|version
operator|=
name|artifact
operator|.
name|getSelectedVersion
argument_list|()
expr_stmt|;
block|}
return|return
name|version
return|;
block|}
specifier|private
name|ResolutionNode
name|checkPreviousNodes
parameter_list|(
name|ResolutionNode
name|node
parameter_list|,
name|List
name|listeners
parameter_list|,
name|List
name|previousNodes
parameter_list|)
throws|throws
name|OverConstrainedVersionException
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|previousNodes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ResolutionNode
name|previous
init|=
operator|(
name|ResolutionNode
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|previous
operator|.
name|isActive
argument_list|()
condition|)
block|{
comment|// Version mediation
name|VersionRange
name|previousRange
init|=
name|previous
operator|.
name|getArtifact
argument_list|()
operator|.
name|getVersionRange
argument_list|()
decl_stmt|;
name|VersionRange
name|currentRange
init|=
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|getVersionRange
argument_list|()
decl_stmt|;
comment|// TODO: why do we force the version on it? what if they
comment|// don't match?
if|if
condition|(
name|previousRange
operator|==
literal|null
condition|)
block|{
comment|// version was already resolved
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setVersion
argument_list|(
name|previous
operator|.
name|getArtifact
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentRange
operator|==
literal|null
condition|)
block|{
comment|// version was already resolved
name|previous
operator|.
name|getArtifact
argument_list|()
operator|.
name|setVersion
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: shouldn't need to double up on this work, only
comment|// done for simplicity of handling recommended
comment|// version but the restriction is identical
name|VersionRange
name|newRange
init|=
name|previousRange
operator|.
name|restrict
argument_list|(
name|currentRange
argument_list|)
decl_stmt|;
comment|// TODO: ick. this forces the OCE that should have come
comment|// from the previous call. It is still correct
if|if
condition|(
name|newRange
operator|.
name|isSelectedVersionKnown
argument_list|(
name|previous
operator|.
name|getArtifact
argument_list|()
argument_list|)
condition|)
block|{
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|RESTRICT_RANGE
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|,
name|previous
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|newRange
argument_list|)
expr_stmt|;
block|}
name|previous
operator|.
name|getArtifact
argument_list|()
operator|.
name|setVersionRange
argument_list|(
name|newRange
argument_list|)
expr_stmt|;
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|setVersionRange
argument_list|(
name|currentRange
operator|.
name|restrict
argument_list|(
name|previousRange
argument_list|)
argument_list|)
expr_stmt|;
comment|// Select an appropriate available version from the (now
comment|// restricted) range
comment|// Note this version was selected before to get the
comment|// appropriate POM
comment|// But it was reset by the call to setVersionRange on
comment|// restricting the version
name|ResolutionNode
index|[]
name|resetNodes
init|=
block|{
name|previous
block|,
name|node
block|}
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|Artifact
name|resetArtifact
init|=
name|resetNodes
index|[
name|j
index|]
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|resetArtifact
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
operator|&&
name|resetArtifact
operator|.
name|getVersionRange
argument_list|()
operator|!=
literal|null
operator|&&
name|resetArtifact
operator|.
name|getAvailableVersions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resetArtifact
operator|.
name|selectVersion
argument_list|(
name|resetArtifact
operator|.
name|getVersionRange
argument_list|()
operator|.
name|matchVersion
argument_list|(
name|resetArtifact
operator|.
name|getAvailableVersions
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|SELECT_VERSION_FROM_RANGE
argument_list|,
name|listeners
argument_list|,
name|resetNodes
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Conflict Resolution
comment|// TODO: use as conflict resolver(s), chain
comment|// TODO: should this be part of mediation?
comment|// previous one is more dominant
if|if
condition|(
name|previous
operator|.
name|getDepth
argument_list|()
operator|<=
name|node
operator|.
name|getDepth
argument_list|()
condition|)
block|{
name|checkScopeUpdate
argument_list|(
name|node
argument_list|,
name|previous
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkScopeUpdate
argument_list|(
name|previous
argument_list|,
name|node
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previous
operator|.
name|getDepth
argument_list|()
operator|<=
name|node
operator|.
name|getDepth
argument_list|()
condition|)
block|{
comment|// previous was nearer
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|OMIT_FOR_NEARER
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|,
name|previous
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|disable
argument_list|()
expr_stmt|;
name|node
operator|=
name|previous
expr_stmt|;
block|}
else|else
block|{
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|OMIT_FOR_NEARER
argument_list|,
name|listeners
argument_list|,
name|previous
argument_list|,
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
name|previous
operator|.
name|disable
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|node
return|;
block|}
specifier|private
name|void
name|checkScopeUpdate
parameter_list|(
name|ResolutionNode
name|farthest
parameter_list|,
name|ResolutionNode
name|nearest
parameter_list|,
name|List
name|listeners
parameter_list|)
block|{
name|boolean
name|updateScope
init|=
literal|false
decl_stmt|;
name|Artifact
name|farthestArtifact
init|=
name|farthest
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
name|Artifact
name|nearestArtifact
init|=
name|nearest
operator|.
name|getArtifact
argument_list|()
decl_stmt|;
if|if
condition|(
name|Artifact
operator|.
name|SCOPE_RUNTIME
operator|.
name|equals
argument_list|(
name|farthestArtifact
operator|.
name|getScope
argument_list|()
argument_list|)
operator|&&
operator|(
name|Artifact
operator|.
name|SCOPE_TEST
operator|.
name|equals
argument_list|(
name|nearestArtifact
operator|.
name|getScope
argument_list|()
argument_list|)
operator|||
name|Artifact
operator|.
name|SCOPE_PROVIDED
operator|.
name|equals
argument_list|(
name|nearestArtifact
operator|.
name|getScope
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|updateScope
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|Artifact
operator|.
name|SCOPE_COMPILE
operator|.
name|equals
argument_list|(
name|farthestArtifact
operator|.
name|getScope
argument_list|()
argument_list|)
operator|&&
operator|!
name|Artifact
operator|.
name|SCOPE_COMPILE
operator|.
name|equals
argument_list|(
name|nearestArtifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|updateScope
operator|=
literal|true
expr_stmt|;
block|}
comment|// current POM rules all
if|if
condition|(
name|nearest
operator|.
name|getDepth
argument_list|()
operator|<
literal|2
operator|&&
name|updateScope
condition|)
block|{
name|updateScope
operator|=
literal|false
expr_stmt|;
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|UPDATE_SCOPE_CURRENT_POM
argument_list|,
name|listeners
argument_list|,
name|nearest
argument_list|,
name|farthestArtifact
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateScope
condition|)
block|{
name|fireEvent
argument_list|(
name|ResolutionListener
operator|.
name|UPDATE_SCOPE
argument_list|,
name|listeners
argument_list|,
name|nearest
argument_list|,
name|farthestArtifact
argument_list|)
expr_stmt|;
comment|// previously we cloned the artifact, but it is more effecient to
comment|// just update the scope
comment|// if problems are later discovered that the original object needs
comment|// its original scope value, cloning may
comment|// again be appropriate
name|nearestArtifact
operator|.
name|setScope
argument_list|(
name|farthestArtifact
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fireEvent
parameter_list|(
name|int
name|event
parameter_list|,
name|List
name|listeners
parameter_list|,
name|ResolutionNode
name|node
parameter_list|)
block|{
name|fireEvent
argument_list|(
name|event
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fireEvent
parameter_list|(
name|int
name|event
parameter_list|,
name|List
name|listeners
parameter_list|,
name|ResolutionNode
name|node
parameter_list|,
name|Artifact
name|replacement
parameter_list|)
block|{
name|fireEvent
argument_list|(
name|event
argument_list|,
name|listeners
argument_list|,
name|node
argument_list|,
name|replacement
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fireEvent
parameter_list|(
name|int
name|event
parameter_list|,
name|List
name|listeners
parameter_list|,
name|ResolutionNode
name|node
parameter_list|,
name|Artifact
name|replacement
parameter_list|,
name|VersionRange
name|newRange
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|listeners
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ResolutionListener
name|listener
init|=
operator|(
name|ResolutionListener
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|ResolutionListener
operator|.
name|TEST_ARTIFACT
case|:
name|listener
operator|.
name|testArtifact
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|PROCESS_CHILDREN
case|:
name|listener
operator|.
name|startProcessChildren
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|FINISH_PROCESSING_CHILDREN
case|:
name|listener
operator|.
name|endProcessChildren
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|INCLUDE_ARTIFACT
case|:
name|listener
operator|.
name|includeArtifact
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|OMIT_FOR_NEARER
case|:
name|String
name|version
init|=
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|String
name|replacementVersion
init|=
name|replacement
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|?
operator|!
name|version
operator|.
name|equals
argument_list|(
name|replacementVersion
argument_list|)
else|:
name|replacementVersion
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|omitForNearer
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ResolutionListener
operator|.
name|OMIT_FOR_CYCLE
case|:
name|listener
operator|.
name|omitForCycle
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|UPDATE_SCOPE
case|:
name|listener
operator|.
name|updateScope
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|replacement
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|UPDATE_SCOPE_CURRENT_POM
case|:
name|listener
operator|.
name|updateScopeCurrentPom
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|replacement
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|MANAGE_ARTIFACT
case|:
name|listener
operator|.
name|manageArtifact
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|SELECT_VERSION_FROM_RANGE
case|:
name|listener
operator|.
name|selectVersionFromRange
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ResolutionListener
operator|.
name|RESTRICT_RANGE
case|:
if|if
condition|(
name|node
operator|.
name|getArtifact
argument_list|()
operator|.
name|getVersionRange
argument_list|()
operator|.
name|hasRestrictions
argument_list|()
operator|||
name|replacement
operator|.
name|getVersionRange
argument_list|()
operator|.
name|hasRestrictions
argument_list|()
condition|)
block|{
name|listener
operator|.
name|restrictRange
argument_list|(
name|node
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|replacement
argument_list|,
name|newRange
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown event: "
operator|+
name|event
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|ArtifactResolutionResult
name|collect
parameter_list|(
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifacts
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|Map
name|map
parameter_list|,
name|ArtifactResolutionRequest
name|artifactResolutionRequest
parameter_list|,
name|ArtifactMetadataSource
name|artifactMetadataSource
parameter_list|,
name|ArtifactFilter
name|artifactFilter
parameter_list|,
name|List
argument_list|<
name|ResolutionListener
argument_list|>
name|resolutionListeners
parameter_list|,
name|List
argument_list|<
name|ConflictResolver
argument_list|>
name|conflictResolvers
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|ArtifactResolutionResult
name|collect
parameter_list|(
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifacts
parameter_list|,
name|Artifact
name|artifact
parameter_list|,
name|Map
name|map
parameter_list|,
name|ArtifactRepository
name|artifactRepository
parameter_list|,
name|List
argument_list|<
name|ArtifactRepository
argument_list|>
name|artifactRepositories
parameter_list|,
name|ArtifactMetadataSource
name|artifactMetadataSource
parameter_list|,
name|ArtifactFilter
name|artifactFilter
parameter_list|,
name|List
argument_list|<
name|ResolutionListener
argument_list|>
name|resolutionListeners
parameter_list|,
name|List
argument_list|<
name|ConflictResolver
argument_list|>
name|conflictResolvers
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

