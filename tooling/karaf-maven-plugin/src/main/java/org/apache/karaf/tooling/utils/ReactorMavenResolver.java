begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tooling
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|repository
operator|.
name|internal
operator|.
name|MavenWorkspaceReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|aether
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|aether
operator|.
name|artifact
operator|.
name|DefaultArtifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|ServiceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|internal
operator|.
name|Parser
import|;
end_import

begin_comment
comment|/**  * {@link MavenResolver} that may look up artifacts inside Maven reactor  */
end_comment

begin_class
specifier|public
class|class
name|ReactorMavenResolver
implements|implements
name|MavenResolver
block|{
specifier|private
specifier|final
name|MavenWorkspaceReader
name|reactor
decl_stmt|;
specifier|private
specifier|final
name|MavenResolver
name|fallback
decl_stmt|;
specifier|public
name|ReactorMavenResolver
parameter_list|(
name|MavenWorkspaceReader
name|reactor
parameter_list|,
name|MavenResolver
name|fallback
parameter_list|)
block|{
name|this
operator|.
name|reactor
operator|=
name|reactor
expr_stmt|;
name|this
operator|.
name|fallback
operator|=
name|fallback
expr_stmt|;
block|}
specifier|private
name|Artifact
name|toArtifact
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
name|ServiceConstants
operator|.
name|PROTOCOL
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|url
argument_list|)
decl_stmt|;
return|return
operator|new
name|DefaultArtifact
argument_list|(
name|parser
operator|.
name|getGroup
argument_list|()
argument_list|,
name|parser
operator|.
name|getArtifact
argument_list|()
argument_list|,
name|parser
operator|.
name|getClassifier
argument_list|()
argument_list|,
name|parser
operator|.
name|getType
argument_list|()
argument_list|,
name|parser
operator|.
name|getVersion
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|resolve
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|Artifact
name|artifact
init|=
name|toArtifact
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|reactor
operator|.
name|findArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|file
operator|==
literal|null
condition|?
name|fallback
operator|.
name|resolve
argument_list|(
name|url
argument_list|)
else|:
name|file
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|resolve
parameter_list|(
name|String
name|url
parameter_list|,
name|Exception
name|previousException
parameter_list|)
throws|throws
name|IOException
block|{
name|Artifact
name|artifact
init|=
name|toArtifact
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|reactor
operator|.
name|findArtifact
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
return|return
name|file
operator|==
literal|null
condition|?
name|fallback
operator|.
name|resolve
argument_list|(
name|url
argument_list|,
name|previousException
argument_list|)
else|:
name|file
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|resolve
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|reactor
operator|.
name|findArtifact
argument_list|(
operator|new
name|DefaultArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|classifier
argument_list|,
name|extension
argument_list|,
name|version
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|file
operator|==
literal|null
condition|?
name|fallback
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s/%s/%s"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|extension
argument_list|,
name|classifier
argument_list|)
argument_list|)
else|:
name|file
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|resolve
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|version
parameter_list|,
name|Exception
name|previousException
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|reactor
operator|.
name|findArtifact
argument_list|(
operator|new
name|DefaultArtifact
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|classifier
argument_list|,
name|extension
argument_list|,
name|version
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|file
operator|==
literal|null
condition|?
name|fallback
operator|.
name|resolve
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"mvn:%s/%s/%s/%s/%s"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|extension
argument_list|,
name|classifier
argument_list|)
argument_list|,
name|previousException
argument_list|)
else|:
name|file
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|resolveMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|version
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fallback
operator|.
name|resolveMetadata
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|type
argument_list|,
name|version
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|File
name|resolveMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|version
parameter_list|,
name|Exception
name|previousException
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|fallback
operator|.
name|resolveMetadata
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|type
argument_list|,
name|version
argument_list|,
name|previousException
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|upload
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|extension
parameter_list|,
name|String
name|version
parameter_list|,
name|File
name|artifact
parameter_list|)
throws|throws
name|IOException
block|{
name|fallback
operator|.
name|upload
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|classifier
argument_list|,
name|extension
argument_list|,
name|version
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uploadMetadata
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|version
parameter_list|,
name|File
name|artifact
parameter_list|)
throws|throws
name|IOException
block|{
name|fallback
operator|.
name|uploadMetadata
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|type
argument_list|,
name|version
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RetryChance
name|isRetryableException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
return|return
name|fallback
operator|.
name|isRetryableException
argument_list|(
name|exception
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|fallback
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

