begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|config
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|config
operator|.
name|command
operator|.
name|completers
operator|.
name|ConfigurationCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Completion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|table
operator|.
name|ShellTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|AttributeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|MetaTypeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|MetaTypeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|ObjectClassDefinition
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"config"
argument_list|,
name|name
operator|=
literal|"meta"
argument_list|,
name|description
operator|=
literal|"Lists meta type information."
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|MetaCommand
extends|extends
name|ConfigCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-p"
argument_list|,
name|aliases
operator|=
literal|"--pid"
argument_list|,
name|description
operator|=
literal|"The configuration pid"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
annotation|@
name|Completion
argument_list|(
name|ConfigurationCompleter
operator|.
name|class
argument_list|)
specifier|protected
name|String
name|pid
decl_stmt|;
annotation|@
name|Reference
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|typeMap
decl_stmt|;
specifier|public
name|MetaCommand
parameter_list|()
block|{
name|typeMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|BOOLEAN
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|BYTE
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|CHARACTER
argument_list|,
literal|"char"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|DOUBLE
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|FLOAT
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|INTEGER
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|LONG
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|PASSWORD
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|SHORT
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|put
argument_list|(
name|AttributeDefinition
operator|.
name|STRING
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pid:"
operator|+
name|pid
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|MetaTypeService
argument_list|>
name|ref
init|=
name|context
operator|.
name|getServiceReference
argument_list|(
name|MetaTypeService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No MetaTypeService present. You need to install an implementation to use this command."
argument_list|)
expr_stmt|;
block|}
name|MetaTypeService
name|metaTypeService
init|=
name|context
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|ObjectClassDefinition
name|def
init|=
name|getMetatype
argument_list|(
name|metaTypeService
argument_list|,
name|pid
argument_list|)
decl_stmt|;
name|context
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"description"
argument_list|)
expr_stmt|;
name|AttributeDefinition
index|[]
name|attrs
init|=
name|def
operator|.
name|getAttributeDefinitions
argument_list|(
name|ObjectClassDefinition
operator|.
name|ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|AttributeDefinition
name|attr
range|:
name|attrs
control|)
block|{
name|table
operator|.
name|addRow
argument_list|()
operator|.
name|addContent
argument_list|(
name|attr
operator|.
name|getID
argument_list|()
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|getType
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|getDefaultValueStr
argument_list|(
name|attr
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
argument_list|,
name|attr
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|print
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|typeMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|String
name|getDefaultValueStr
parameter_list|(
name|String
index|[]
name|defaultValues
parameter_list|)
block|{
if|if
condition|(
name|defaultValues
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|defaultValue
range|:
name|defaultValues
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|ObjectClassDefinition
name|getMetatype
parameter_list|(
name|MetaTypeService
name|metaTypeService
parameter_list|,
name|String
name|pid
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|context
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|MetaTypeInformation
name|info
init|=
name|metaTypeService
operator|.
name|getMetaTypeInformation
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|pids
init|=
name|info
operator|.
name|getPids
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cPid
range|:
name|pids
control|)
block|{
if|if
condition|(
name|cPid
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
condition|)
block|{
return|return
name|info
operator|.
name|getObjectClassDefinition
argument_list|(
name|cPid
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

