begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|config
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|MetaTypeInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|metatype
operator|.
name|MetaTypeService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Allows to use the MetaTypeService as an optional dependency  */
end_comment

begin_class
specifier|public
class|class
name|MetaServiceCaller
block|{
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|withMetaTypeService
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Function
argument_list|<
name|MetaTypeService
argument_list|,
name|T
argument_list|>
name|callable
parameter_list|)
block|{
name|ServiceReference
argument_list|<
name|MetaTypeService
argument_list|>
name|ref
init|=
name|context
operator|.
name|getServiceReference
argument_list|(
name|MetaTypeService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|MetaTypeService
name|metaService
init|=
name|context
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
return|return
name|callable
operator|.
name|apply
argument_list|(
name|metaService
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPidsWithMetaInfo
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
return|return
name|withMetaTypeService
argument_list|(
name|context
argument_list|,
name|metatypeService
lambda|->
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pids1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Bundle
index|[]
name|bundles
init|=
name|context
operator|.
name|getBundles
argument_list|()
decl_stmt|;
if|if
condition|(
name|metatypeService
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|MetaTypeInformation
name|info
init|=
name|metatypeService
operator|.
name|getMetaTypeInformation
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|info
operator|.
name|getFactoryPids
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pids1
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|info
operator|.
name|getFactoryPids
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|.
name|getPids
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pids1
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|info
operator|.
name|getPids
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|pids1
return|;
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

