begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|config
operator|.
name|core
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_class
specifier|public
class|class
name|ConfigMBeanImplTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInstallWithNonAuthorizePath
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.etc"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|ConfigMBeanImpl
name|configMBean
init|=
operator|new
name|ConfigMBeanImpl
argument_list|()
decl_stmt|;
name|configMBean
operator|.
name|install
argument_list|(
literal|"file:foo.cfg"
argument_list|,
literal|"../test.cfg"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstall
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.etc"
argument_list|,
literal|"./target/test-classes"
argument_list|)
expr_stmt|;
name|ConfigMBeanImpl
name|configMBean
init|=
operator|new
name|ConfigMBeanImpl
argument_list|()
decl_stmt|;
name|configMBean
operator|.
name|install
argument_list|(
literal|"file:./target/test-classes/test.cfg"
argument_list|,
literal|"foo.cfg"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|output
init|=
operator|new
name|File
argument_list|(
literal|"target/test-classes/foo.cfg"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|output
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|output
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo=bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

