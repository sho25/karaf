
h1. Monitoring and Administration using JMX

Apache Karaf provides a large set of MBeans that allow you to fully monitor and administrate Karaf using any JMX client
(like jconsole for instance).

You can find more or less the same actions that you can do using the shell commands on the JMX layer.

h2. Connecting

To connect to local karaf instances just start jconsole. It should list the local karaf instances as "org.apache.karaf.main.Main" and allow you to connect to them. 

To connect to your running remote Karaf instance via JMX you can use the following URL:
{code}
service:jmx:rmi://localhost:44444/jndi/rmi://localhost:1099/karaf-root
{code}
Make sure to use the credentials you are also using to connect to via SSH

If you are connecting to another instance of your Karaf the following will give you an impression on how this might be configured. 

{code}
service:jmx:rmi://localhost:${rmiServerPort}/jndi/rmi://localhost:${rmiRegistryPort}/karaf-${karaf.name}
{code}

The ports and the Karaf instance name are configured in the org.apache.karaf.managment.cfg file in /etc.

h2. MBeans

Apache Karaf provides the following MBeans:

* org.apache.karaf:type=admin to administrate the child instances
* org.apache.karaf:type=bundles to manipulate the OSGi bundles
* org.apache.karaf:type=config to manipulate the Karaf configuration files (in the etc folder) and the ConfigAdmin layer
* org.apache.karaf:type=dev to get information and manipulate the OSGi framework
* org.apache.karaf:type=diagnostic to create information file (dump) about Karaf activity
* org.apache.karaf:type=features to manipulate the Karaf features
* org.apache.karaf:type=log to manipulate to logging layer
* org.apache.karaf:type=packages to manipulate to PackageAdmin layer and get information about exported and imported packages
* org.apache.karaf:type=services to get information about the OSGi services
* org.apache.karaf:type=system to shutdown the Karaf container itself
* org.apache.karaf:type=web to get information about the Web bundles (installed with the war feature)
* org.apache.karaf:type=http to get information about the HTTP servlet
* org.apache.karaf:type=obr to manipulate the OBR layer (installed with the obr feature)

h1. Registering its own MBean(s)

The Karaf container exposes a MBeanServer as an OSGI service. This server is created when Karaf boots and can be used to registers its own MBeans. The processus is really simple as it only
requires that the bean/pojo of the project extend the javax.management.StandardMBean class and implements an interface where the name of the class MUST contain the extension MBean.

Here is an example based on Karaf WebMBean

1. Interface definition

As mentioned before, remark that we have added MBean after Web word.
{code}
/**
 * Describe the web MBean.
 */
public interface WebMBean {
...
}
{code}

2. Implementation

The class must extend the javax.management.StandardMBean class and implements the interface
{code}
/**
 * Implementation of the web MBean.
 */
public class Web extends StandardMBean implements WebMBean {

    private WebContainerService webContainerService;

    public Web() throws NotCompliantMBeanException {
        super(WebMBean.class);
    }
...
{code}

3. Blueprint file

The blueprint file will contain definition of the beans to be instantiated and OSGI services to look up or register. Basically, 2 things should be done : lookup to retrieve
the MBeanServer and next registers its Mbean using the MBeanRegister of Karaf
{code}
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0">

    <!-- Reference to the MBean Server -->
    <reference id="mbeanServer" interface="javax.management.MBeanServer">
        <reference-listener ref="mbeanRegistrer" bind-method="registerMBeanServer" unbind-method="unregisterMBeanServer"/>
    </reference>

    <!-- Web MBean -->
    <bean id="webMBean" class="org.apache.karaf.management.mbeans.web.internal.WebMBeanImpl">
        <property name="bundleContext" ref="blueprintBundleContext"/>
    </bean>

    <!-- MBean Registrer -->
    <bean id="mbeanRegistrer" class="org.apache.karaf.management.MBeanRegistrer" init-method="init" destroy-method="destroy">
        <property name="mbeans">
            <map>
                <entry value="org.apache.karaf:type=web,name=${karaf.name}" key-ref="webMBean"/>
            </map>
        </property>
    </bean>

</blueprint>
{code}

Remark : Next versions of Karaf 3.x will simplify this process as you can see here after

{code}
    <service ref="webMBean" auto-export="interfaces">
        <service-properties>
            <entry key="jmx.objectname" value="org.apache.karaf:type=web,name=${karaf.name}"/>
        </service-properties>
    </service>
{code}