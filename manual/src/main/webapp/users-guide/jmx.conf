h1. Monitoring and Administration using JMX

Apache Karaf provides a large set of MBeans that allow you to fully monitor and administrate Karaf using any JMX client
(like jconsole for instance).

You can find more or less the same actions that you can do using the shell commands on the JMX layer.

h2. Connecting

To connect to local karaf instances just start jconsole. It should list the local karaf instances as "org.apache.karaf.main.Main" and allow you to connect to them. 

To connect to your running remote Karaf instance via JMX you can use the following URL:
{code}
service:jmx:rmi://localhost:44444/jndi/rmi://localhost:1099/karaf-root
{code}
Make sure to use the credentials you are also using to connect to via SSH

If you are connecting to another instance of your Karaf the following will give you an impression on how this might be configured. 

{code}
service:jmx:rmi://localhost:${rmiServerPort}/jndi/rmi://localhost:${rmiRegistryPort}/karaf-${karaf.name}
{code}

The ports and the Karaf instance name are configured in the org.apache.karaf.managment.cfg file in /etc.

h2. MBeans

Apache Karaf provides the following MBeans:

* org.apache.karaf:type=instances to administrate the child instances
* org.apache.karaf:type=bundles to manipulate the OSGi bundles
* org.apache.karaf:type=config to manipulate the Karaf configuration files (in the etc folder) and the ConfigAdmin layer
* org.apache.karaf:type=dev to get information and manipulate the OSGi framework
* org.apache.karaf:type=diagnostic to create information file (dump) about Karaf activity
* org.apache.karaf:type=features to manipulate the Karaf features
* org.apache.karaf:type=log to manipulate to logging layer
* org.apache.karaf:type=packages to manipulate to PackageAdmin layer and get information about exported and imported packages
* org.apache.karaf:type=services to get information about the OSGi services
* org.apache.karaf:type=system to shutdown the Karaf container itself
* org.apache.karaf:type=web to get information about the Web bundles (installed with the war feature)
* org.apache.karaf:type=http to get information about the HTTP servlet
* org.apache.karaf:type=obr to manipulate the OBR layer (installed with the obr feature)

h2. JMX Operations and ACL

Karaf 3.x provides support of Access Lists (ACL) to the JMX operations.

Whenever a JMX operation is invoked, the roles of the current user are checked against the required roles for this operation.

This is done through a JMX interceptor which is added through the following command line option:

{code}
-Djavax.management.builder.initial=org.apache.karaf.management.boot.KarafMBeanServerBuilder
{code}

NB: by default, bin/karaf and Karaf service wrapper define this interceptor, so you have nothing to do.

The required roles for JMX operations are defined in configuration files in the etc folder, and read via the OSGi ConfigAdmin, as with any other configuration in this location.

The relevant configuration is prefixed with jmx.acl and based on the JMX ObjectName that it applies to.
For example, specific configuration for a MBean with the following name: foo.bar:type=Test can be placed in a configuration file called jmx.acl.foo.bar.Test.cfg.

More generic configuration can be placed in the domain (e.g. jmx.acl.foo.bar.cfg) or at the top level (jmx.acl.cfg).

A simple configuration file looks like:

{code}
    # operation = role
    test = admin
    getVal = manager, viewer
{code}

The system looks for required roles using the following process.
The most specific configuration file/pid is tried first. It means that in the previous example, the jmx.acl.foo.bar.Test.cfg is looked at first.
In this configuration, the system looks for a:

1. Specific match for the invocation, e.g. test(int)["17"] = role1

2. Regex match for the invocation, e.g. test(int)[/[0-9]/] = role2
In both cases, the passed argument is converted to a String for the comparison.
If any of the above match, the search stops and the associated roles are used.

3. Signature match for the invocation, e.g. test(int) = role3
If matched, the search stops and the associated roles are used.

4. Method name match for the invocation, e.g. test = role4
If matched, the search stops and the associated roles are used.

5. A method name wildcard match, e.g. te* = role5
For all the wildcard matches found in the current configuration file, the roles associated with the longest match are used.
So if you have te* and * and the method invoked is 'test', then the roles defined with te* are used, not the ones defined with *.

If no matching definition is found, the most specific definition always takes the precedence.

Some configuration examples follow:

* Only a 'manager' can call GC on the Memory MBean:
{code}
# etc/jmx.acl.java.lang.Memory.cfg
    gc = manager
{code}

* Bundles with ID between 0 and 49 can be stopped only by an 'admin', other bundles can be stopped by a 'manager':
{code}
# etc/jmx.acl.org.apache.karaf.bundles.cfg
    stop(java.lang.String)[/([1-4])?([0-9]/] = admin
    stop = manager
{code}

ACLs are also included that control what can be modified through OSGi ConfigAdmin. Especially, the modification of the
ACLs themselves is restricted. See etc/jmx.acl.org.apache.karaf.config.cfg and etc/jmx.acl.osgi.compendium.cm.cfg configuration files.

etc/jmx.acl.cfg configuration file contains the global configuration for the invocation on any MBean that doesn't have a specific ACL:

{code}
# etc/jmx.acl.cfg
    list* = viewer
    get* = viewer
    is* = viewer
    set* = admin
    * = admin
{code}

By default, all "read-only" operations (list*, get*, is*) can be performed by a 'viewer', whereas the "read-write" operation can be performed only by an 'admin'.

The org.apache.karaf:type=security,area=jmx MBean can be used to check whether the current user can access a certain MBean or invoke a specific operation on it.
This MBean can be used by management clients (monitoring tools, etc) to decide whether to show certain MBeans or operations to the end user.

h1. Registering its own MBean(s)

The Karaf container exposes a MBeanServer as an OSGI service. This server is created when Karaf boots and can be used to registers its own MBeans. The processus is really simple as it only
requires that the bean/pojo of the project extend the javax.management.StandardMBean class and implements an interface where the name of the class MUST contain the extension MBean.

Karaf 3.x simplifies a lot the process of custom MBean registration.

You just have to write your MBean and register it as an OSGi service (using Blueprint for instance), providing the JMX ObjectName property:

{code}
    <bean id="customMBean" class="...."/>

    <service ref="customMBean" auto-export="interfaces">
        <service-properties>
            <entry key="jmx.objectname" value="my.domain:type=custom,name=${karaf.name}"/>
        </service-properties>
    </service>
{code}

The customMBean is a simple POJO implementing the MBeanRegistration interface (and your own interface).