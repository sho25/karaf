begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|formatter
operator|.
name|CommandShellOutputFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|common
operator|.
name|Arguments
import|;
end_import

begin_comment
comment|/**  *  * @version $Rev$ $Date$  */
end_comment

begin_class
specifier|public
class|class
name|AdministrationCommand
implements|implements
name|Command
block|{
specifier|private
name|String
name|description
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
operator|.
name|Command
name|command
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
name|CommandContext
name|context
parameter_list|,
name|Object
modifier|...
name|objArgs
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
name|Arguments
operator|.
name|toStringArray
argument_list|(
name|objArgs
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|CommandContext
name|context2
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|CommandContext
argument_list|()
decl_stmt|;
name|context2
operator|.
name|setFormatter
argument_list|(
operator|new
name|CommandShellOutputFormatter
argument_list|(
name|context
operator|.
name|getIO
argument_list|()
operator|.
name|outputStream
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|command
operator|.
name|setCommandContext
argument_list|(
name|context2
argument_list|)
expr_stmt|;
name|command
operator|.
name|execute
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cur
init|=
name|e
decl_stmt|;
while|while
condition|(
name|cur
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cur
operator|=
name|cur
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cur
operator|instanceof
name|java
operator|.
name|net
operator|.
name|ConnectException
condition|)
block|{
name|context2
operator|.
name|print
argument_list|(
literal|"\n"
operator|+
literal|"Could not connect to JMX server.  This command requires that the remote JMX server be enabled.\n"
operator|+
literal|"This is typically done by adding the following JVM arguments: \n"
operator|+
literal|"   -Dcom.sun.management.jmxremote.port=1099 -Dcom.sun.management.jmxremote.authenticate=false \n"
operator|+
literal|"   -Dcom.sun.management.jmxremote.ssl=false \n"
operator|+
literal|"\n"
operator|+
literal|"The connection error was: "
operator|+
name|cur
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|e
operator|instanceof
name|Exception
condition|)
block|{
throw|throw
operator|(
name|Exception
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
operator|.
name|Command
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
specifier|public
name|void
name|setCommand
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
operator|.
name|Command
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
block|}
end_class

end_unit

