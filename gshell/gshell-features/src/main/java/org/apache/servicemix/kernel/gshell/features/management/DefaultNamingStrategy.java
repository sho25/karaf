begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|features
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|features
operator|.
name|FeaturesRegistry
import|;
end_import

begin_comment
comment|/**  * Naming strategy for JMX MBeans.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultNamingStrategy
implements|implements
name|NamingStrategy
block|{
specifier|private
name|String
name|jmxDomainName
decl_stmt|;
specifier|public
name|String
name|getJmxDomainName
parameter_list|()
block|{
return|return
name|jmxDomainName
return|;
block|}
specifier|public
name|void
name|setJmxDomainName
parameter_list|(
name|String
name|jmxDomainName
parameter_list|)
block|{
name|this
operator|.
name|jmxDomainName
operator|=
name|jmxDomainName
expr_stmt|;
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|ManagedFeature
name|feature
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
return|return
name|getObjectName
argument_list|(
name|feature
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|ManagedFeature
name|feature
parameter_list|,
name|boolean
name|installed
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|jmxDomainName
argument_list|)
operator|.
name|append
argument_list|(
literal|":Service=Features,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|installed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Type=Installed,"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Type=Available,"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Name="
argument_list|)
operator|.
name|append
argument_list|(
name|sanitize
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
literal|"FeatureVersion="
argument_list|)
operator|.
name|append
argument_list|(
name|sanitize
argument_list|(
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|ManagedRepository
name|repository
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|jmxDomainName
operator|+
literal|":"
operator|+
literal|"Service=Features,"
operator|+
literal|"Type=Repositories,"
operator|+
literal|"Name="
operator|+
name|sanitize
argument_list|(
name|repository
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
comment|// + "," +
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|(
name|FeaturesRegistry
name|featuresRegistry
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|jmxDomainName
operator|+
literal|":"
operator|+
literal|"Service=Features,"
operator|+
literal|"Name=FeaturesService"
argument_list|)
return|;
block|}
specifier|private
name|String
name|sanitize
parameter_list|(
name|String
name|in
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|in
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|'?'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|'='
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|replace
argument_list|(
literal|','
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

