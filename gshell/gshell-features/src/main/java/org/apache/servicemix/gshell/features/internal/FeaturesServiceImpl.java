begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|gshell
operator|.
name|features
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|gshell
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|gshell
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|gshell
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|RepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|BundleContextAware
import|;
end_import

begin_comment
comment|/**  * The Features service implementation.  * Adding a repository url will load the features contained in this repository and  * create dummy sub shells.  When invoked, these commands will prompt the user for  * installing the needed bundles.  *  */
end_comment

begin_class
specifier|public
class|class
name|FeaturesServiceImpl
implements|implements
name|FeaturesService
implements|,
name|BundleContextAware
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|RepositoryAdmin
name|admin
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|URL
argument_list|>
name|urls
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|URL
argument_list|,
name|RepositoryImpl
argument_list|>
name|repositories
init|=
operator|new
name|HashMap
argument_list|<
name|URL
argument_list|,
name|RepositoryImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|RepositoryAdmin
name|getAdmin
parameter_list|()
block|{
return|return
name|admin
return|;
block|}
specifier|public
name|void
name|setAdmin
parameter_list|(
name|RepositoryAdmin
name|admin
parameter_list|)
block|{
name|this
operator|.
name|admin
operator|=
name|admin
expr_stmt|;
block|}
specifier|public
name|void
name|setUrls
parameter_list|(
name|String
name|urls
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|String
index|[]
name|s
init|=
name|urls
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|this
operator|.
name|urls
operator|=
operator|new
name|HashSet
argument_list|<
name|URL
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|urls
operator|.
name|add
argument_list|(
operator|new
name|URL
argument_list|(
name|s
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addRepository
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|RepositoryImpl
name|repo
init|=
operator|new
name|RepositoryImpl
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|repo
operator|.
name|load
argument_list|()
expr_stmt|;
name|Feature
index|[]
name|features
init|=
name|repo
operator|.
name|getFeatures
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|features
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CommandProxy
name|cmd
init|=
operator|new
name|CommandProxy
argument_list|(
name|features
index|[
name|i
index|]
argument_list|,
name|bundleContext
argument_list|)
decl_stmt|;
block|}
name|repositories
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|repo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeRepository
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|Repository
name|repo
init|=
name|repositories
operator|.
name|remove
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|// TODO: ...
block|}
specifier|public
name|Repository
index|[]
name|listRepositories
parameter_list|()
block|{
return|return
operator|new
name|Repository
index|[
literal|0
index|]
return|;
comment|//To change body of implemented methods use File | Settings | File Templates.
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|urls
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|URL
name|url
range|:
name|urls
control|)
block|{
name|addRepository
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|urls
operator|=
operator|new
name|HashSet
argument_list|<
name|URL
argument_list|>
argument_list|(
name|repositories
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|repositories
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeRepository
argument_list|(
name|repositories
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

