begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|obr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|support
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|RepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: gnodet  * Date: Nov 29, 2007  * Time: 4:51:56 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ObrCommandSupport
extends|extends
name|OsgiCommandSupport
block|{
specifier|protected
specifier|static
specifier|final
name|char
name|VERSION_DELIM
init|=
literal|','
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get repository admin service.
name|ServiceReference
name|ref
init|=
name|getBundleContext
argument_list|()
operator|.
name|getServiceReference
argument_list|(
name|RepositoryAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RepositoryAdmin service is unavailable."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|RepositoryAdmin
name|admin
init|=
operator|(
name|RepositoryAdmin
operator|)
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RepositoryAdmin service is unavailable."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|doExecute
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|getBundleContext
argument_list|()
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|doExecute
parameter_list|(
name|RepositoryAdmin
name|admin
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|protected
name|Resource
index|[]
name|searchRepository
parameter_list|(
name|RepositoryAdmin
name|admin
parameter_list|,
name|String
name|targetId
parameter_list|,
name|String
name|targetVersion
parameter_list|)
block|{
comment|// Try to see if the targetId is a bundle ID.
try|try
block|{
name|Bundle
name|bundle
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|targetId
argument_list|)
argument_list|)
decl_stmt|;
name|targetId
operator|=
name|bundle
operator|.
name|getSymbolicName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// It was not a number, so ignore.
block|}
comment|// The targetId may be a bundle name or a bundle symbolic name,
comment|// so create the appropriate LDAP query.
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"(|(presentationname="
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")(symbolicname="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|targetId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetVersion
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"(&"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(version="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|targetVersion
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"))"
argument_list|)
expr_stmt|;
block|}
return|return
name|admin
operator|.
name|discoverResources
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Resource
name|selectNewestVersion
parameter_list|(
name|Resource
index|[]
name|resources
parameter_list|)
block|{
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
name|Version
name|v
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|resources
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|i
operator|<
name|resources
operator|.
name|length
operator|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|idx
operator|=
literal|0
expr_stmt|;
name|v
operator|=
name|resources
index|[
name|i
index|]
operator|.
name|getVersion
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Version
name|vtmp
init|=
name|resources
index|[
name|i
index|]
operator|.
name|getVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|vtmp
operator|.
name|compareTo
argument_list|(
name|v
argument_list|)
operator|>
literal|0
condition|)
block|{
name|idx
operator|=
name|i
expr_stmt|;
name|v
operator|=
name|vtmp
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|idx
operator|<
literal|0
operator|)
condition|?
literal|null
else|:
name|resources
index|[
name|idx
index|]
return|;
block|}
specifier|protected
name|String
index|[]
name|getTarget
parameter_list|(
name|String
name|bundle
parameter_list|)
block|{
name|String
index|[]
name|target
decl_stmt|;
name|int
name|idx
init|=
name|bundle
operator|.
name|indexOf
argument_list|(
name|VERSION_DELIM
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|target
operator|=
operator|new
name|String
index|[]
block|{
name|bundle
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
block|,
name|bundle
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
block|}
expr_stmt|;
block|}
else|else
block|{
name|target
operator|=
operator|new
name|String
index|[]
block|{
name|bundle
block|,
literal|null
block|}
expr_stmt|;
block|}
return|return
name|target
return|;
block|}
specifier|protected
name|void
name|printUnderline
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|int
name|length
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

