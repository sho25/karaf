begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|obr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|annotation
operator|.
name|CommandComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|RepositoryAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|Resource
import|;
end_import

begin_class
annotation|@
name|CommandComponent
argument_list|(
name|id
operator|=
literal|"obr:deploy"
argument_list|,
name|description
operator|=
literal|"Deploy"
argument_list|)
specifier|public
class|class
name|DeployCommand
extends|extends
name|ObrCommandSupport
block|{
annotation|@
name|Argument
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"List of bundles"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|bundles
decl_stmt|;
specifier|protected
name|void
name|doExecute
parameter_list|(
name|RepositoryAdmin
name|admin
parameter_list|)
throws|throws
name|Exception
block|{
name|doDeploy
argument_list|(
name|admin
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doDeploy
parameter_list|(
name|RepositoryAdmin
name|admin
parameter_list|,
name|boolean
name|start
parameter_list|)
throws|throws
name|Exception
block|{
name|Resolver
name|resolver
init|=
name|admin
operator|.
name|resolver
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|String
index|[]
name|target
init|=
name|getTarget
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|selectNewestVersion
argument_list|(
name|searchRepository
argument_list|(
name|admin
argument_list|,
name|target
index|[
literal|0
index|]
argument_list|,
name|target
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resolver
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown bundle - "
operator|+
name|target
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|resolver
operator|.
name|getAddedResources
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|resolver
operator|.
name|getAddedResources
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|resolver
operator|.
name|resolve
argument_list|()
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Target resource(s):"
argument_list|)
expr_stmt|;
name|printUnderline
argument_list|(
name|io
operator|.
name|out
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|Resource
index|[]
name|resources
init|=
name|resolver
operator|.
name|getAddedResources
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|resIdx
init|=
literal|0
init|;
operator|(
name|resources
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|resIdx
operator|<
name|resources
operator|.
name|length
operator|)
condition|;
name|resIdx
operator|++
control|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|resources
index|[
name|resIdx
index|]
operator|.
name|getPresentationName
argument_list|()
operator|+
literal|" ("
operator|+
name|resources
index|[
name|resIdx
index|]
operator|.
name|getVersion
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|resources
operator|=
name|resolver
operator|.
name|getRequiredResources
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|resources
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|resources
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nRequired resource(s):"
argument_list|)
expr_stmt|;
name|printUnderline
argument_list|(
name|io
operator|.
name|out
argument_list|,
literal|21
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|resIdx
init|=
literal|0
init|;
name|resIdx
operator|<
name|resources
operator|.
name|length
condition|;
name|resIdx
operator|++
control|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|resources
index|[
name|resIdx
index|]
operator|.
name|getPresentationName
argument_list|()
operator|+
literal|" ("
operator|+
name|resources
index|[
name|resIdx
index|]
operator|.
name|getVersion
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|resources
operator|=
name|resolver
operator|.
name|getOptionalResources
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|resources
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|resources
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nOptional resource(s):"
argument_list|)
expr_stmt|;
name|printUnderline
argument_list|(
name|io
operator|.
name|out
argument_list|,
literal|21
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|resIdx
init|=
literal|0
init|;
name|resIdx
operator|<
name|resources
operator|.
name|length
condition|;
name|resIdx
operator|++
control|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|resources
index|[
name|resIdx
index|]
operator|.
name|getPresentationName
argument_list|()
operator|+
literal|" ("
operator|+
name|resources
index|[
name|resIdx
index|]
operator|.
name|getVersion
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\nDeploying..."
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|deploy
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|io
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Requirement
index|[]
name|reqs
init|=
name|resolver
operator|.
name|getUnsatisfiedRequirements
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|reqs
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|reqs
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unsatisfied requirement(s):"
argument_list|)
expr_stmt|;
name|printUnderline
argument_list|(
name|io
operator|.
name|out
argument_list|,
literal|27
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|reqIdx
init|=
literal|0
init|;
name|reqIdx
operator|<
name|reqs
operator|.
name|length
condition|;
name|reqIdx
operator|++
control|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|reqs
index|[
name|reqIdx
index|]
operator|.
name|getFilter
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
index|[]
name|resources
init|=
name|resolver
operator|.
name|getResources
argument_list|(
name|reqs
index|[
name|reqIdx
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|resIdx
init|=
literal|0
init|;
name|resIdx
operator|<
name|resources
operator|.
name|length
condition|;
name|resIdx
operator|++
control|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"      "
operator|+
name|resources
index|[
name|resIdx
index|]
operator|.
name|getPresentationName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not resolve targets."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

