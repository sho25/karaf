begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commands
operator|.
name|text
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * TODO: remove this file when gshell is upgraded  */
end_comment

begin_class
specifier|public
class|class
name|SortTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testFieldIndexesDefaultSep
parameter_list|()
block|{
name|SortAction
operator|.
name|SortComparator
name|comparator
init|=
operator|new
name|SortAction
operator|.
name|SortComparator
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|'\0'
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
name|comparator
operator|.
name|getFieldIndexes
argument_list|(
literal|" ad  re  t "
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
operator|.
name|equals
argument_list|(
name|indexes
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFieldIndexesWithSep
parameter_list|()
block|{
name|SortAction
operator|.
name|SortComparator
name|comparator
init|=
operator|new
name|SortAction
operator|.
name|SortComparator
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|'['
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
name|comparator
operator|.
name|getFieldIndexes
argument_list|(
literal|"[  10] [Active     ] [       ] [    8] OPS4J Pax Logging - Service (1.3.0)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|1
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|20
argument_list|,
literal|22
argument_list|,
literal|30
argument_list|,
literal|32
argument_list|,
literal|73
argument_list|)
operator|.
name|equals
argument_list|(
name|indexes
argument_list|)
argument_list|)
expr_stmt|;
name|indexes
operator|=
name|comparator
operator|.
name|getFieldIndexes
argument_list|(
literal|" ad  re  t "
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|equals
argument_list|(
name|indexes
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSort
parameter_list|()
block|{
name|String
name|s0
init|=
literal|"0321   abcd  ddcba   a"
decl_stmt|;
name|String
name|s1
init|=
literal|" 57t   bcad  ddacb   b"
decl_stmt|;
name|String
name|s2
init|=
literal|"  128  cab   ddbac   c"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|s0
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|strings
argument_list|,
operator|new
name|SortAction
operator|.
name|SortComparator
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|'\0'
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|s0
argument_list|,
name|s1
argument_list|,
name|s2
argument_list|)
operator|.
name|equals
argument_list|(
name|strings
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|strings
argument_list|,
operator|new
name|SortAction
operator|.
name|SortComparator
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|'\0'
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"2.2b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|s2
argument_list|,
name|s0
argument_list|,
name|s1
argument_list|)
operator|.
name|equals
argument_list|(
name|strings
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|strings
argument_list|,
operator|new
name|SortAction
operator|.
name|SortComparator
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|'\0'
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|s0
argument_list|)
operator|.
name|equals
argument_list|(
name|strings
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

