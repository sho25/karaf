begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|wisdom
operator|.
name|command
operator|.
name|AliasCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commandline
operator|.
name|CommandLineExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|ShellContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|ShellContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|IO
import|;
end_import

begin_class
specifier|public
class|class
name|WorkAroundAliasCommand
extends|extends
name|AliasCommand
block|{
specifier|private
specifier|final
name|CommandLineExecutor
name|executor
decl_stmt|;
specifier|public
name|WorkAroundAliasCommand
parameter_list|(
name|CommandLineExecutor
name|executor
parameter_list|)
block|{
name|super
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|setAction
argument_list|(
operator|new
name|AliasCommandAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|prepareAction
parameter_list|(
specifier|final
name|ShellContext
name|context
parameter_list|,
specifier|final
name|Object
index|[]
name|args
parameter_list|)
block|{
comment|// HACK: Reset state for proper appendArgs muck
assert|assert
name|context
operator|!=
literal|null
assert|;
assert|assert
name|args
operator|!=
literal|null
assert|;
name|setAction
argument_list|(
operator|new
name|AliasCommandAction
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Preparing action"
argument_list|)
expr_stmt|;
name|IO
name|io
init|=
name|context
operator|.
name|getIo
argument_list|()
decl_stmt|;
name|CommandAction
name|action
init|=
name|getAction
argument_list|()
decl_stmt|;
comment|// Setup the command action
try|try
block|{
comment|// Process command line options/arguments
name|processArguments
argument_list|(
name|io
argument_list|,
name|action
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Abort if preparation caused a failure
throw|throw
operator|new
name|AbortExecutionNotification
argument_list|(
operator|new
name|CommandResult
operator|.
name|FailureResult
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|AliasCommandAction
implements|implements
name|CommandAction
block|{
annotation|@
name|Argument
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|appendArgs
init|=
literal|null
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|CommandContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|context
operator|!=
literal|null
assert|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we have args to append, then do it
if|if
condition|(
name|appendArgs
operator|!=
literal|null
operator|&&
operator|!
name|appendArgs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
comment|// Append args quoted as they have already been processed by the parser
name|Iterator
name|iter
init|=
name|appendArgs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//
comment|// HACK: Using double quote instead of single quote for now as the parser's handling of single quote is broken
comment|//
name|buff
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Executing alias: {}"
argument_list|,
name|buff
argument_list|)
expr_stmt|;
specifier|final
name|Shell
name|shell
init|=
name|ShellContextHolder
operator|.
name|get
argument_list|()
operator|.
name|getShell
argument_list|()
decl_stmt|;
name|ShellContext
name|shellContext
init|=
operator|new
name|ShellContext
argument_list|()
block|{
specifier|public
name|Shell
name|getShell
parameter_list|()
block|{
return|return
name|shell
return|;
block|}
specifier|public
name|IO
name|getIo
parameter_list|()
block|{
return|return
name|context
operator|.
name|getIo
argument_list|()
return|;
block|}
specifier|public
name|Variables
name|getVariables
parameter_list|()
block|{
return|return
name|context
operator|.
name|getVariables
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Object
name|result
init|=
name|executor
operator|.
name|execute
argument_list|(
name|shellContext
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Alias result: {}"
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

