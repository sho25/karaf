begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|application
operator|.
name|ClassPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|model
operator|.
name|application
operator|.
name|ApplicationModel
import|;
end_import

begin_class
specifier|public
class|class
name|ApplicationImpl
implements|implements
name|Application
block|{
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|IO
name|io
decl_stmt|;
specifier|private
name|ApplicationModel
name|model
decl_stmt|;
specifier|private
name|Variables
name|variables
decl_stmt|;
specifier|private
name|InetAddress
name|localHost
decl_stmt|;
specifier|private
name|File
name|homeDir
decl_stmt|;
specifier|public
name|ApplicationImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|localHost
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
expr_stmt|;
name|this
operator|.
name|homeDir
operator|=
name|detectHomeDir
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|IO
name|getIo
parameter_list|()
block|{
return|return
name|io
return|;
block|}
specifier|public
name|void
name|setIo
parameter_list|(
name|IO
name|io
parameter_list|)
block|{
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
block|}
specifier|public
name|Variables
name|getVariables
parameter_list|()
block|{
return|return
name|variables
return|;
block|}
specifier|public
name|void
name|setVariables
parameter_list|(
name|Variables
name|variables
parameter_list|)
block|{
name|this
operator|.
name|variables
operator|=
name|variables
expr_stmt|;
block|}
specifier|public
name|ApplicationModel
name|getModel
parameter_list|()
block|{
return|return
name|model
return|;
block|}
specifier|public
name|void
name|setModel
parameter_list|(
name|ApplicationModel
name|model
parameter_list|)
block|{
name|this
operator|.
name|model
operator|=
name|model
expr_stmt|;
block|}
specifier|public
name|ClassPath
name|getClassPath
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|File
name|getHomeDir
parameter_list|()
block|{
if|if
condition|(
name|homeDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
return|return
name|homeDir
return|;
block|}
specifier|public
name|InetAddress
name|getLocalHost
parameter_list|()
block|{
return|return
name|localHost
return|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
return|;
block|}
specifier|private
name|File
name|detectHomeDir
parameter_list|()
block|{
name|String
name|homePath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
decl_stmt|;
comment|// And now lets resolve this sucker
name|File
name|dir
decl_stmt|;
try|try
block|{
name|dir
operator|=
operator|new
name|File
argument_list|(
name|homePath
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to resolve home directory: "
operator|+
name|homePath
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// And some basic sanity too
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Home directory configured but is not a valid directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
return|return
name|dir
return|;
block|}
block|}
end_class

end_unit

