begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|core
operator|.
name|sshd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|PromptReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
operator|.
name|BeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
operator|.
name|BeanContainerAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|i18n
operator|.
name|MessageSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|sshd
operator|.
name|ClientChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|sshd
operator|.
name|ClientSession
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|sshd
operator|.
name|SshClient
import|;
end_import

begin_comment
comment|/**  * Connect to a remote shell server.  *  * @version $Rev: 707952 $ $Date: 2008-10-26 08:51:45 +0100 (Sun, 26 Oct 2008) $  */
end_comment

begin_class
specifier|public
class|class
name|SshAction
implements|implements
name|CommandAction
implements|,
name|BeanContainerAware
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-u"
argument_list|,
name|aliases
operator|=
block|{
literal|"--username"
block|}
argument_list|)
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-p"
argument_list|,
name|aliases
operator|=
block|{
literal|"--password"
block|}
argument_list|)
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-n"
argument_list|,
name|aliases
operator|=
block|{
literal|"--instance"
block|}
argument_list|)
specifier|private
name|String
name|instance
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|required
operator|=
literal|true
argument_list|,
name|index
operator|=
literal|0
argument_list|)
specifier|private
name|URI
name|remote
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
literal|null
decl_stmt|;
specifier|private
name|BeanContainer
name|container
decl_stmt|;
specifier|public
name|void
name|setBeanContainer
parameter_list|(
specifier|final
name|BeanContainer
name|container
parameter_list|)
block|{
assert|assert
name|container
operator|!=
literal|null
assert|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
comment|/**      * Helper to validate that prompted username or password is not null or empty.      */
specifier|private
class|class
name|UsernamePasswordValidator
implements|implements
name|PromptReader
operator|.
name|Validator
block|{
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|max
init|=
literal|3
decl_stmt|;
specifier|public
name|UsernamePasswordValidator
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
assert|assert
name|type
operator|!=
literal|null
assert|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|count
operator|>=
name|max
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Too many attempts; failed to prompt user for "
operator|+
name|type
operator|+
literal|" after "
operator|+
name|max
operator|+
literal|" tries"
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|CommandContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|context
operator|!=
literal|null
assert|;
name|IO
name|io
init|=
name|context
operator|.
name|getIo
argument_list|()
decl_stmt|;
name|MessageSource
name|messages
init|=
name|context
operator|.
name|getCommand
argument_list|()
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|io
operator|.
name|info
argument_list|(
name|messages
operator|.
name|format
argument_list|(
literal|"info.connecting"
argument_list|,
name|remote
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the username/password was not configured via cli, then prompt the user for the values
if|if
condition|(
name|username
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
condition|)
block|{
name|PromptReader
name|prompter
init|=
operator|new
name|PromptReader
argument_list|(
name|io
argument_list|)
decl_stmt|;
name|String
name|text
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Prompting user for credentials"
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|text
operator|=
name|messages
operator|.
name|getMessage
argument_list|(
literal|"prompt.username"
argument_list|)
expr_stmt|;
name|username
operator|=
name|prompter
operator|.
name|readLine
argument_list|(
name|text
operator|+
literal|": "
argument_list|,
operator|new
name|UsernamePasswordValidator
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|text
operator|=
name|messages
operator|.
name|getMessage
argument_list|(
literal|"prompt.password"
argument_list|)
expr_stmt|;
name|password
operator|=
name|prompter
operator|.
name|readLine
argument_list|(
name|text
operator|+
literal|": "
argument_list|,
operator|new
name|UsernamePasswordValidator
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Create the client from prototype
name|SshClient
name|client
init|=
name|container
operator|.
name|getBean
argument_list|(
name|SshClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Created client: {}"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|ClientSession
name|session
init|=
name|client
operator|.
name|connect
argument_list|(
name|remote
operator|.
name|getHost
argument_list|()
argument_list|,
name|remote
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|io
operator|.
name|info
argument_list|(
name|messages
operator|.
name|getMessage
argument_list|(
literal|"info.connected"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|authPassword
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|ClientChannel
name|channel
init|=
name|session
operator|.
name|createChannel
argument_list|(
literal|"shell"
argument_list|)
decl_stmt|;
name|channel
operator|.
name|setIn
argument_list|(
name|io
operator|.
name|inputStream
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setOut
argument_list|(
name|io
operator|.
name|outputStream
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setErr
argument_list|(
name|io
operator|.
name|errorStream
argument_list|)
expr_stmt|;
name|channel
operator|.
name|open
argument_list|()
expr_stmt|;
name|channel
operator|.
name|waitFor
argument_list|(
name|ClientChannel
operator|.
name|CLOSED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//        RemoteShellProxy shell = new RemoteShellProxy(client, io, instance, username);
comment|//
comment|//        Object result = Result.SUCCESS;
comment|//
comment|//        try {
comment|//            if (command == null) {
comment|//                command = new ArrayList<String>();
comment|//            }
comment|//
comment|//            shell.run(command.toArray());
comment|//        }
comment|//        catch (ExitNotification n) {
comment|//            // Make sure that we catch this notification, so that our parent shell doesn't exit when the remote shell does
comment|//            result = n.code;
comment|//        }
comment|//
comment|//        shell.close();
comment|//
comment|//        io.verbose(messages.getMessage("verbose.disconnecting"));
comment|//
comment|//        client.close();
comment|//
comment|//        io.verbose(messages.getMessage("verbose.disconnected"));
return|return
name|Result
operator|.
name|SUCCESS
return|;
block|}
block|}
end_class

end_unit

