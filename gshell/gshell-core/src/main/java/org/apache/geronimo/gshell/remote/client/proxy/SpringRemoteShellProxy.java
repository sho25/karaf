begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|client
operator|.
name|proxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ExitNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ErrorNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ansi
operator|.
name|Renderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|console
operator|.
name|Console
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|console
operator|.
name|JLineConsole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|RemoteShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|client
operator|.
name|RshClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|client
operator|.
name|SpringRshClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|client
operator|.
name|proxy
operator|.
name|RemoteBrandingProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|client
operator|.
name|proxy
operator|.
name|RemoteShellInfoProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|client
operator|.
name|proxy
operator|.
name|RemoteHistoryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|remote
operator|.
name|client
operator|.
name|proxy
operator|.
name|RemoteEnvironmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|InteractiveShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|ShellInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|whisper
operator|.
name|stream
operator|.
name|StreamFeeder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides a shell interface which will proxy to a remote shell instance.  *  * @version $Rev: 638824 $ $Date: 2008-03-19 14:30:40 +0100 (Wed, 19 Mar 2008) $  */
end_comment

begin_class
specifier|public
class|class
name|SpringRemoteShellProxy
implements|implements
name|RemoteShell
implements|,
name|InteractiveShell
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|SpringRshClient
name|client
decl_stmt|;
specifier|private
name|IO
name|io
decl_stmt|;
specifier|private
name|Terminal
name|terminal
decl_stmt|;
specifier|private
name|StreamFeeder
name|outputFeeder
decl_stmt|;
specifier|private
name|boolean
name|opened
decl_stmt|;
specifier|private
name|RemoteEnvironmentProxy
name|env
decl_stmt|;
specifier|private
name|SpringRemoteShellInfoProxy
name|shellInfo
decl_stmt|;
specifier|private
name|RemoteHistoryProxy
name|history
decl_stmt|;
specifier|private
name|RemoteBrandingProxy
name|branding
decl_stmt|;
specifier|public
name|SpringRemoteShellProxy
parameter_list|(
specifier|final
name|SpringRshClient
name|client
parameter_list|,
specifier|final
name|IO
name|io
parameter_list|,
specifier|final
name|Terminal
name|terminal
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|client
operator|!=
literal|null
assert|;
assert|assert
name|io
operator|!=
literal|null
assert|;
assert|assert
name|terminal
operator|!=
literal|null
assert|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|io
expr_stmt|;
name|this
operator|.
name|terminal
operator|=
name|terminal
expr_stmt|;
comment|//
comment|// TODO: send over some client-side details, like the terminal features, etc, as well, verbosity too)
comment|//       If any problem or denial occurs, throw an exception, once created the proxy is considered valid.
comment|//
name|client
operator|.
name|openShell
argument_list|()
expr_stmt|;
comment|// Setup other proxies
name|env
operator|=
operator|new
name|RemoteEnvironmentProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|shellInfo
operator|=
operator|new
name|SpringRemoteShellInfoProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|history
operator|=
operator|new
name|RemoteHistoryProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|branding
operator|=
operator|new
name|RemoteBrandingProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
comment|// Copy the client's input stream to our outputstream so users see command output
name|outputFeeder
operator|=
operator|new
name|StreamFeeder
argument_list|(
name|client
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|io
operator|.
name|outputStream
argument_list|)
expr_stmt|;
name|outputFeeder
operator|.
name|createThread
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|opened
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Environment
name|getEnvironment
parameter_list|()
block|{
name|ensureOpened
argument_list|()
expr_stmt|;
return|return
name|env
return|;
block|}
specifier|public
name|ShellInfo
name|getShellInfo
parameter_list|()
block|{
name|ensureOpened
argument_list|()
expr_stmt|;
return|return
name|shellInfo
return|;
block|}
specifier|private
name|void
name|ensureOpened
parameter_list|()
block|{
if|if
condition|(
operator|!
name|opened
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Remote shell proxy has been closed"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isOpened
parameter_list|()
block|{
return|return
name|opened
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|client
operator|.
name|closeShell
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
try|try
block|{
name|outputFeeder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
name|opened
operator|=
literal|false
expr_stmt|;
block|}
comment|//
comment|// Command Execution
comment|//
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
name|ensureOpened
argument_list|()
expr_stmt|;
return|return
name|client
operator|.
name|execute
argument_list|(
name|line
argument_list|)
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ensureOpened
argument_list|()
expr_stmt|;
return|return
name|client
operator|.
name|execute
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|args
argument_list|)
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ensureOpened
argument_list|()
expr_stmt|;
return|return
name|client
operator|.
name|execute
argument_list|(
name|path
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
name|Object
index|[]
index|[]
name|commands
parameter_list|)
throws|throws
name|Exception
block|{
name|ensureOpened
argument_list|()
expr_stmt|;
return|return
name|client
operator|.
name|execute
argument_list|(
name|commands
argument_list|)
return|;
block|}
comment|//
comment|// Interactive Shell
comment|//
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|args
operator|!=
literal|null
assert|;
name|ensureOpened
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Starting interactive console; args: {}"
argument_list|,
name|args
argument_list|)
expr_stmt|;
comment|//
comment|// TODO: We need a hook into the session state here so that we can abort the console muck when the session closes
comment|//
comment|//
comment|// TODO: Request server to load...
comment|//
comment|// loadUserScript(branding.getInteractiveScriptName());
specifier|final
name|AtomicReference
argument_list|<
name|ExitNotification
argument_list|>
name|exitNotifHolder
init|=
operator|new
name|AtomicReference
argument_list|<
name|ExitNotification
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Object
argument_list|>
name|lastResultHolder
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Console
operator|.
name|Executor
name|executor
init|=
operator|new
name|Console
operator|.
name|Executor
argument_list|()
block|{
specifier|public
name|Result
name|execute
parameter_list|(
specifier|final
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|line
operator|!=
literal|null
assert|;
try|try
block|{
name|Object
name|result
init|=
name|SpringRemoteShellProxy
operator|.
name|this
operator|.
name|execute
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|lastResultHolder
operator|.
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitNotification
name|n
parameter_list|)
block|{
name|exitNotifHolder
operator|.
name|set
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|STOP
return|;
block|}
return|return
name|Result
operator|.
name|CONTINUE
return|;
block|}
block|}
decl_stmt|;
name|JLineConsole
name|console
init|=
operator|new
name|JLineConsole
argument_list|(
name|executor
argument_list|,
name|io
argument_list|,
name|terminal
argument_list|)
decl_stmt|;
name|console
operator|.
name|setPrompter
argument_list|(
operator|new
name|Console
operator|.
name|Prompter
argument_list|()
block|{
name|Renderer
name|renderer
init|=
operator|new
name|Renderer
argument_list|()
decl_stmt|;
specifier|public
name|String
name|prompt
parameter_list|()
block|{
comment|//
comment|// TODO: Get the real details and use them...
comment|//
name|String
name|userName
init|=
name|shellInfo
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|String
name|hostName
init|=
name|shellInfo
operator|.
name|getInstanceName
argument_list|()
operator|!=
literal|null
condition|?
name|shellInfo
operator|.
name|getInstanceName
argument_list|()
else|:
literal|"unknown"
decl_stmt|;
name|String
name|path
init|=
literal|"/"
decl_stmt|;
return|return
name|renderer
operator|.
name|render
argument_list|(
literal|"@|bold "
operator|+
name|userName
operator|+
literal|"|@"
operator|+
name|hostName
operator|+
literal|":@|bold "
operator|+
name|path
operator|+
literal|"|> "
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|console
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|Console
operator|.
name|ErrorHandler
argument_list|()
block|{
specifier|public
name|Result
name|handleError
parameter_list|(
specifier|final
name|Throwable
name|error
parameter_list|)
block|{
assert|assert
name|error
operator|!=
literal|null
assert|;
name|displayError
argument_list|(
name|error
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//
comment|// TODO: What are we to do with history here?  Really should be history on the server...
comment|//
comment|/*         // Hook up a nice history file (we gotta hold on to the history object at some point so the 'history' command can get to it)         History history = new History();         console.setHistory(history);         console.setHistoryFile(new File(branding.getUserDirectory(), branding.getHistoryFileName()));         */
comment|// Unless the user wants us to shut up, then display a nice welcome banner
comment|/*         if (!io.isQuiet()) {             io.out.println(branding.getWelcomeBanner());         }         */
comment|// Check if there are args, and run them and then enter interactive
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|// And then spin up the console and go for a jog
name|console
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// If any exit notification occured while running, then puke it up
name|ExitNotification
name|n
init|=
name|exitNotifHolder
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
throw|throw
name|n
throw|;
block|}
block|}
specifier|private
name|void
name|displayError
parameter_list|(
specifier|final
name|Throwable
name|error
parameter_list|)
block|{
assert|assert
name|error
operator|!=
literal|null
assert|;
comment|// Decode any error notifications
name|Throwable
name|cause
init|=
name|error
decl_stmt|;
if|if
condition|(
name|error
operator|instanceof
name|ErrorNotification
condition|)
block|{
name|cause
operator|=
name|error
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
comment|// Spit out the terse reason why we've failed
name|io
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"@|bold,red ERROR| "
argument_list|)
expr_stmt|;
name|io
operator|.
name|err
operator|.
name|print
argument_list|(
name|cause
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|err
operator|.
name|println
argument_list|(
literal|": @|bold,red "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
operator|+
literal|"|"
argument_list|)
expr_stmt|;
comment|// Determine if the stack trace flag is set
name|String
name|stackTraceProperty
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"gshell.show.stacktrace"
argument_list|)
decl_stmt|;
name|boolean
name|stackTraceFlag
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|stackTraceProperty
operator|!=
literal|null
condition|)
block|{
name|stackTraceFlag
operator|=
name|stackTraceProperty
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|io
operator|.
name|isDebug
argument_list|()
condition|)
block|{
comment|// If we have debug enabled then skip the fancy bits below, and log the full error, don't decode shit
name|log
operator|.
name|debug
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|io
operator|.
name|isVerbose
argument_list|()
operator|||
name|stackTraceFlag
condition|)
block|{
comment|// Render a fancy ansi colored stack trace
name|StackTraceElement
index|[]
name|trace
init|=
name|cause
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|e
range|:
name|trace
control|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|"        @|bold at| "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMethodName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" (@|bold "
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
name|e
operator|.
name|isNativeMethod
argument_list|()
condition|?
literal|"Native Method"
else|:
operator|(
name|e
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getLineNumber
argument_list|()
operator|!=
operator|-
literal|1
condition|?
name|e
operator|.
name|getFileName
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
else|:
operator|(
name|e
operator|.
name|getFileName
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getFileName
argument_list|()
else|:
literal|"Unknown Source"
operator|)
operator|)
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"|)"
argument_list|)
expr_stmt|;
name|io
operator|.
name|err
operator|.
name|println
argument_list|(
name|buff
argument_list|)
expr_stmt|;
name|buff
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

