begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commands
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|ShellFactory
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Completor
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|History
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commandline
operator|.
name|CommandLineExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|console
operator|.
name|Console
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|console
operator|.
name|JLineConsole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|console
operator|.
name|completer
operator|.
name|AggregateCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|notification
operator|.
name|ExitNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|ShellContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|ShellContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|CommandResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|application
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * SSHD {@link ShellFactory} which provides access to GShell.  *  * @version $Rev: 731517 $ $Date: 2009-01-05 11:25:19 +0100 (Mon, 05 Jan 2009) $  */
end_comment

begin_class
specifier|public
class|class
name|ShellFactoryImpl
implements|implements
name|ShellFactory
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Application
name|application
decl_stmt|;
specifier|private
name|Console
operator|.
name|Prompter
name|prompter
decl_stmt|;
specifier|private
name|CommandLineExecutor
name|executor
decl_stmt|;
specifier|private
name|History
name|history
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Completor
argument_list|>
name|completers
decl_stmt|;
specifier|private
name|Console
operator|.
name|ErrorHandler
name|errorHandler
decl_stmt|;
specifier|public
name|Console
operator|.
name|Prompter
name|getPrompter
parameter_list|()
block|{
return|return
name|prompter
return|;
block|}
specifier|public
name|void
name|setPrompter
parameter_list|(
specifier|final
name|Console
operator|.
name|Prompter
name|prompter
parameter_list|)
block|{
name|this
operator|.
name|prompter
operator|=
name|prompter
expr_stmt|;
block|}
specifier|public
name|CommandLineExecutor
name|getExecutor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
specifier|public
name|void
name|setExecutor
parameter_list|(
specifier|final
name|CommandLineExecutor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
specifier|public
name|History
name|getHistory
parameter_list|()
block|{
return|return
name|history
return|;
block|}
specifier|public
name|void
name|setHistory
parameter_list|(
specifier|final
name|History
name|history
parameter_list|)
block|{
name|this
operator|.
name|history
operator|=
name|history
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Completor
argument_list|>
name|getCompleters
parameter_list|()
block|{
return|return
name|completers
return|;
block|}
specifier|public
name|void
name|setCompleters
parameter_list|(
specifier|final
name|List
argument_list|<
name|Completor
argument_list|>
name|completers
parameter_list|)
block|{
name|this
operator|.
name|completers
operator|=
name|completers
expr_stmt|;
block|}
specifier|public
name|Console
operator|.
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
specifier|public
name|void
name|setErrorHandler
parameter_list|(
specifier|final
name|Console
operator|.
name|ErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
specifier|public
name|Application
name|getApplication
parameter_list|()
block|{
return|return
name|application
return|;
block|}
specifier|public
name|void
name|setApplication
parameter_list|(
name|Application
name|application
parameter_list|)
block|{
name|this
operator|.
name|application
operator|=
name|application
expr_stmt|;
block|}
specifier|public
name|Shell
name|createShell
parameter_list|()
block|{
return|return
operator|new
name|ShellImpl
argument_list|()
return|;
block|}
specifier|public
class|class
name|ShellImpl
implements|implements
name|ShellFactory
operator|.
name|Shell
implements|,
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Shell
implements|,
name|ShellContext
implements|,
name|Runnable
block|{
specifier|private
name|InputStream
name|in
decl_stmt|;
specifier|private
name|OutputStream
name|out
decl_stmt|;
specifier|private
name|OutputStream
name|err
decl_stmt|;
specifier|private
name|ExitCallback
name|callback
decl_stmt|;
specifier|private
name|IO
name|io
decl_stmt|;
specifier|private
name|Variables
name|variables
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|public
name|void
name|setInputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
specifier|public
name|void
name|setOutputStream
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
specifier|public
name|void
name|setErrorStream
parameter_list|(
specifier|final
name|OutputStream
name|err
parameter_list|)
block|{
name|this
operator|.
name|err
operator|=
name|err
expr_stmt|;
block|}
specifier|public
name|void
name|setExitCallback
parameter_list|(
name|ExitCallback
name|callback
parameter_list|)
block|{
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|io
operator|=
operator|new
name|IO
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|err
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create variables, inheriting the application ones
name|this
operator|.
name|variables
operator|=
operator|new
name|Variables
argument_list|(
name|application
operator|.
name|getVariables
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set up additional env
if|if
condition|(
name|env
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|env
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|variables
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|variables
operator|.
name|set
argument_list|(
literal|"gshell.prompt"
argument_list|,
name|application
operator|.
name|getModel
argument_list|()
operator|.
name|getBranding
argument_list|()
operator|.
name|getPrompt
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|variables
operator|.
name|set
argument_list|(
name|CommandResolver
operator|.
name|GROUP
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|this
operator|.
name|variables
operator|.
name|set
argument_list|(
literal|"gshell.username"
argument_list|,
name|env
operator|.
name|get
argument_list|(
literal|"USER"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|variables
operator|.
name|set
argument_list|(
literal|"gshell.hostname"
argument_list|,
name|application
operator|.
name|getLocalHost
argument_list|()
argument_list|)
expr_stmt|;
comment|// HACK: Add history for the 'history' command, since its not part of the Shell intf it can't really access it
name|this
operator|.
name|variables
operator|.
name|set
argument_list|(
literal|"gshell.internal.history"
argument_list|,
name|getHistory
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ShellContext
name|getContext
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executor
operator|.
name|execute
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|line
argument_list|)
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|String
name|command
parameter_list|,
specifier|final
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executor
operator|.
name|execute
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|executor
operator|.
name|execute
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOpened
parameter_list|()
block|{
return|return
operator|!
name|closed
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|Closer
operator|.
name|close
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|callback
operator|.
name|onExit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInteractive
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Console
operator|.
name|Executor
name|executor
init|=
operator|new
name|Console
operator|.
name|Executor
argument_list|()
block|{
specifier|public
name|Result
name|execute
parameter_list|(
specifier|final
name|String
name|line
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|line
operator|!=
literal|null
assert|;
try|try
block|{
name|ShellImpl
operator|.
name|this
operator|.
name|execute
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitNotification
name|n
parameter_list|)
block|{
return|return
name|Result
operator|.
name|STOP
return|;
block|}
return|return
name|Result
operator|.
name|CONTINUE
return|;
block|}
block|}
decl_stmt|;
name|IO
name|io
init|=
name|getContext
argument_list|()
operator|.
name|getIo
argument_list|()
decl_stmt|;
comment|// Setup the console runner
name|JLineConsole
name|console
init|=
operator|new
name|JLineConsole
argument_list|(
name|executor
argument_list|,
name|io
argument_list|)
decl_stmt|;
name|console
operator|.
name|setPrompter
argument_list|(
name|getPrompter
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|setErrorHandler
argument_list|(
name|getErrorHandler
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|.
name|setHistory
argument_list|(
name|getHistory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|completers
operator|!=
literal|null
condition|)
block|{
comment|// Have to use aggregate here to get the completion list to update properly
name|console
operator|.
name|addCompleter
argument_list|(
operator|new
name|AggregateCompleter
argument_list|(
name|completers
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|console
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Shell
name|getShell
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|public
name|IO
name|getIo
parameter_list|()
block|{
return|return
name|io
return|;
block|}
specifier|public
name|Variables
name|getVariables
parameter_list|()
block|{
return|return
name|variables
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ShellContext
name|ctx
init|=
name|ShellContextHolder
operator|.
name|get
argument_list|(
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|ShellContextHolder
operator|.
name|set
argument_list|(
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|Object
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unhandled failure: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ShellContextHolder
operator|.
name|set
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

