begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|CommandLineBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ErrorNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ExecutingVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|parser
operator|.
name|ASTCommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|parser
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|parser
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Environment
import|;
end_import

begin_comment
comment|/**  * A CommandLineBuilder that uses a single executor and environment, expecting  * those to be proxies to some thread local instances.  Use setter injection to  * avoid a circular dependency with the SpringCommandExecutor.  */
end_comment

begin_class
specifier|public
class|class
name|SpringCommandLineBuilder
implements|implements
name|CommandLineBuilder
block|{
specifier|private
name|CommandLineParser
name|parser
init|=
operator|new
name|CommandLineParser
argument_list|()
decl_stmt|;
specifier|private
name|CommandExecutor
name|executor
decl_stmt|;
specifier|private
name|Environment
name|environment
decl_stmt|;
specifier|public
name|SpringCommandLineBuilder
parameter_list|()
block|{     }
specifier|public
name|void
name|setExecutor
parameter_list|(
name|CommandExecutor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|Environment
name|environment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
block|}
specifier|private
name|ASTCommandLine
name|parse
parameter_list|(
specifier|final
name|String
name|input
parameter_list|)
throws|throws
name|ParseException
block|{
assert|assert
name|input
operator|!=
literal|null
assert|;
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|ASTCommandLine
name|cl
decl_stmt|;
try|try
block|{
name|cl
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
return|return
name|cl
return|;
block|}
specifier|public
name|CommandLine
name|create
parameter_list|(
specifier|final
name|String
name|commandLine
parameter_list|)
throws|throws
name|ParseException
block|{
assert|assert
name|commandLine
operator|!=
literal|null
assert|;
if|if
condition|(
name|commandLine
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Command line is empty"
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|ExecutingVisitor
name|visitor
init|=
operator|new
name|ExecutingVisitor
argument_list|(
name|executor
argument_list|,
name|environment
argument_list|)
decl_stmt|;
specifier|final
name|ASTCommandLine
name|root
init|=
name|parse
argument_list|(
name|commandLine
argument_list|)
decl_stmt|;
return|return
operator|new
name|CommandLine
argument_list|()
block|{
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|root
operator|.
name|jjtAccept
argument_list|(
name|visitor
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ErrorNotification
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

