begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|UnixTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_comment
comment|/**  * Spring factory bean for JLine terminal.  * The main purpose of this factory is to destroy the terminal when  * the Spring application is terminated, so that the terminal is  * restored to its normal state.  */
end_comment

begin_class
specifier|public
class|class
name|TerminalFactoryBean
implements|implements
name|FactoryBean
implements|,
name|DisposableBean
block|{
specifier|private
name|Terminal
name|terminal
decl_stmt|;
specifier|public
specifier|synchronized
name|Object
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|terminal
operator|==
literal|null
condition|)
block|{
name|terminal
operator|=
name|Terminal
operator|.
name|getTerminal
argument_list|()
expr_stmt|;
block|}
return|return
name|terminal
return|;
block|}
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|Terminal
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|terminal
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|terminal
operator|instanceof
name|UnixTerminal
condition|)
block|{
operator|(
operator|(
name|UnixTerminal
operator|)
name|terminal
operator|)
operator|.
name|restoreTerminal
argument_list|()
expr_stmt|;
block|}
name|terminal
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

