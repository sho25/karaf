begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commands
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileSelectInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|vfs
operator|.
name|FileObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|vfs
operator|.
name|selector
operator|.
name|AggregateFileSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|vfs
operator|.
name|support
operator|.
name|VfsActionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|GlobCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Matcher
import|;
end_import

begin_comment
comment|/**  * Find files in a hierarchy.  *  * TODO: remove this file when gshell is upgraded  *  * @version $Rev: 722797 $ $Date: 2008-12-03 08:18:16 +0100 (Wed, 03 Dec 2008) $  */
end_comment

begin_class
specifier|public
class|class
name|FindAction
extends|extends
name|VfsActionSupport
block|{
specifier|private
specifier|final
name|AggregateFileSelector
name|selector
init|=
operator|new
name|AggregateFileSelector
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-name"
argument_list|)
specifier|private
name|void
name|addNameFilter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MalformedPatternException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding -name selector for: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|selector
operator|.
name|getSelectors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|NameSelector
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-iname"
argument_list|)
specifier|private
name|void
name|addiNameFilter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MalformedPatternException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding -iname selector for: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|selector
operator|.
name|getSelectors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|NameSelector
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-type"
argument_list|)
specifier|private
name|void
name|addTypeFilter
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding -type selector for: {}"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|selector
operator|.
name|getSelectors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TypeSelector
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Argument
argument_list|(
name|required
operator|=
literal|true
argument_list|)
specifier|private
name|String
name|path
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|CommandContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|context
operator|!=
literal|null
assert|;
name|IO
name|io
init|=
name|context
operator|.
name|getIo
argument_list|()
decl_stmt|;
name|FileObject
name|root
init|=
name|resolveFile
argument_list|(
name|context
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|ensureFileExists
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|find
argument_list|(
name|context
argument_list|,
name|root
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|FileObjects
operator|.
name|close
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|CommandAction
operator|.
name|Result
operator|.
name|SUCCESS
return|;
block|}
specifier|private
name|void
name|find
parameter_list|(
specifier|final
name|CommandContext
name|context
parameter_list|,
specifier|final
name|FileObject
name|file
parameter_list|,
specifier|final
name|FileSelector
name|selector
parameter_list|)
throws|throws
name|FileSystemException
block|{
assert|assert
name|context
operator|!=
literal|null
assert|;
assert|assert
name|file
operator|!=
literal|null
assert|;
assert|assert
name|selector
operator|!=
literal|null
assert|;
name|FileObject
index|[]
name|files
init|=
name|file
operator|.
name|findFiles
argument_list|(
name|selector
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|FileObject
name|child
range|:
name|files
control|)
block|{
name|display
argument_list|(
name|context
argument_list|,
name|child
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|display
parameter_list|(
specifier|final
name|CommandContext
name|context
parameter_list|,
specifier|final
name|FileObject
name|file
parameter_list|,
specifier|final
name|FileObject
name|root
parameter_list|)
throws|throws
name|FileSystemException
block|{
assert|assert
name|context
operator|!=
literal|null
assert|;
assert|assert
name|file
operator|!=
literal|null
assert|;
name|String
name|path
decl_stmt|;
try|try
block|{
name|path
operator|=
operator|new
name|URI
argument_list|(
name|this
operator|.
name|path
argument_list|)
operator|.
name|resolve
argument_list|(
name|root
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|file
operator|.
name|getURL
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|path
operator|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
name|IO
name|io
init|=
name|context
operator|.
name|getIo
argument_list|()
decl_stmt|;
name|io
operator|.
name|info
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Type& TypeSelector
comment|//
specifier|private
enum|enum
name|Type
block|{
name|F
block|,
comment|// normal file
name|D
block|,
comment|// directory
block|}
specifier|private
class|class
name|TypeSelector
implements|implements
name|FileSelector
block|{
specifier|private
specifier|final
name|Type
name|type
decl_stmt|;
specifier|public
name|TypeSelector
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|)
block|{
assert|assert
name|type
operator|!=
literal|null
assert|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Type: {}"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|includeFile
parameter_list|(
specifier|final
name|FileSelectInfo
name|selection
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|selection
operator|!=
literal|null
assert|;
name|FileType
name|ftype
init|=
name|selection
operator|.
name|getFile
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|D
case|:
return|return
name|ftype
operator|==
name|FileType
operator|.
name|FOLDER
return|;
case|case
name|F
case|:
return|return
name|ftype
operator|==
name|FileType
operator|.
name|FILE
return|;
comment|// TODO: Handle FileType.FILE_OR_FOLDER
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|traverseDescendents
parameter_list|(
specifier|final
name|FileSelectInfo
name|selection
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
block|}
comment|//
comment|// NameSelector
comment|//
specifier|private
class|class
name|NameSelector
implements|implements
name|FileSelector
block|{
specifier|private
specifier|final
name|Pattern
name|pattern
decl_stmt|;
specifier|private
specifier|final
name|PatternMatcher
name|matcher
decl_stmt|;
specifier|public
name|NameSelector
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|ignoreCase
parameter_list|)
throws|throws
name|MalformedPatternException
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
name|PatternCompiler
name|compiler
init|=
operator|new
name|GlobCompiler
argument_list|()
decl_stmt|;
name|int
name|options
decl_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
name|options
operator|=
name|GlobCompiler
operator|.
name|CASE_INSENSITIVE_MASK
expr_stmt|;
block|}
else|else
block|{
name|options
operator|=
name|GlobCompiler
operator|.
name|DEFAULT_MASK
expr_stmt|;
block|}
name|this
operator|.
name|pattern
operator|=
name|compiler
operator|.
name|compile
argument_list|(
name|name
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|this
operator|.
name|matcher
operator|=
operator|new
name|Perl5Matcher
argument_list|()
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Pattern: {}"
argument_list|,
name|pattern
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NameSelector
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MalformedPatternException
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|includeFile
parameter_list|(
specifier|final
name|FileSelectInfo
name|selection
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|selection
operator|!=
literal|null
assert|;
return|return
name|matcher
operator|.
name|matches
argument_list|(
name|selection
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getBaseName
argument_list|()
argument_list|,
name|pattern
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|traverseDescendents
parameter_list|(
specifier|final
name|FileSelectInfo
name|selection
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

