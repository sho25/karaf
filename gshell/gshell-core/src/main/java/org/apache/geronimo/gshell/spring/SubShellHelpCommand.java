begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ansi
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ansi
operator|.
name|Renderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|branding
operator|.
name|Branding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|annotation
operator|.
name|CommandComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|LayoutManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|AliasNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|CommandNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|GroupNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|CommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|NotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Display help  *  * @version $Rev$ $Date$  */
end_comment

begin_class
annotation|@
name|CommandComponent
argument_list|(
name|id
operator|=
literal|"osgi-builtins:help"
argument_list|,
name|description
operator|=
literal|"Show command help"
argument_list|)
specifier|public
class|class
name|SubShellHelpCommand
extends|extends
name|CommandSupport
block|{
annotation|@
name|Argument
argument_list|(
name|metaVar
operator|=
literal|"COMMAND"
argument_list|,
name|description
operator|=
literal|"Display help for COMMAND"
argument_list|)
specifier|private
name|String
name|command
decl_stmt|;
specifier|private
name|Renderer
name|renderer
init|=
operator|new
name|Renderer
argument_list|()
decl_stmt|;
specifier|public
name|SubShellHelpCommand
parameter_list|()
block|{     }
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
name|displayAvailableCommands
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|displayCommandHelp
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|private
name|void
name|displayAvailableCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|LayoutManager
name|layoutManager
init|=
name|getLayoutManager
argument_list|()
decl_stmt|;
name|Branding
name|branding
init|=
name|getBranding
argument_list|()
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
name|branding
operator|.
name|getAbout
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Available commands:"
argument_list|)
expr_stmt|;
name|GroupNode
name|group
init|=
name|layoutManager
operator|.
name|getLayout
argument_list|()
decl_stmt|;
name|displayGroupCommands
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Branding
name|getBranding
parameter_list|()
block|{
return|return
name|ShellContext
operator|.
name|get
argument_list|()
operator|.
name|getBranding
argument_list|()
return|;
block|}
specifier|private
name|LayoutManager
name|getLayoutManager
parameter_list|()
block|{
return|return
name|ShellContext
operator|.
name|get
argument_list|()
operator|.
name|getLayoutManager
argument_list|()
return|;
block|}
specifier|private
name|CommandRegistry
name|getCommandRegistry
parameter_list|()
block|{
return|return
name|ShellContext
operator|.
name|get
argument_list|()
operator|.
name|getCommandRegistry
argument_list|()
return|;
block|}
specifier|private
name|void
name|displayGroupCommands
parameter_list|(
specifier|final
name|GroupNode
name|group
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandRegistry
name|commandRegistry
init|=
name|getCommandRegistry
argument_list|()
decl_stmt|;
name|int
name|maxNameLen
init|=
literal|20
decl_stmt|;
comment|// FIXME: Figure this out dynamically
comment|// First display command/aliases nodes
for|for
control|(
name|Node
name|child
range|:
name|group
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|CommandNode
condition|)
block|{
try|try
block|{
name|CommandNode
name|node
init|=
operator|(
name|CommandNode
operator|)
name|child
decl_stmt|;
name|String
name|name
init|=
name|StringUtils
operator|.
name|rightPad
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|maxNameLen
argument_list|)
decl_stmt|;
name|Command
name|command
init|=
name|commandRegistry
operator|.
name|lookup
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|command
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|name
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NotRegisteredException
name|e
parameter_list|)
block|{
comment|// Ignore those exceptions (command will not be displayed)
block|}
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|AliasNode
condition|)
block|{
name|AliasNode
name|node
init|=
operator|(
name|AliasNode
operator|)
name|child
decl_stmt|;
name|String
name|name
init|=
name|StringUtils
operator|.
name|rightPad
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|maxNameLen
argument_list|)
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|name
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Alias to: "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|node
operator|.
name|getCommand
argument_list|()
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|// Then groups
for|for
control|(
name|Node
name|child
range|:
name|group
operator|.
name|nodes
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|GroupNode
condition|)
block|{
name|GroupNode
name|node
init|=
operator|(
name|GroupNode
operator|)
name|child
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|displayGroupCommands
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|displayCommandHelp
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|path
operator|!=
literal|null
assert|;
name|CommandRegistry
name|commandRegistry
init|=
name|getCommandRegistry
argument_list|()
decl_stmt|;
name|Command
name|cmd
init|=
name|commandRegistry
operator|.
name|lookup
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Command "
operator|+
name|Renderer
operator|.
name|encode
argument_list|(
name|path
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try "
operator|+
name|Renderer
operator|.
name|encode
argument_list|(
literal|"help"
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
operator|+
literal|" for a list of available commands."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Command "
operator|+
name|Renderer
operator|.
name|encode
argument_list|(
name|path
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|cmd
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

