begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|IO
import|;
end_import

begin_comment
comment|/**  * An IO implementation that delegates the Input and Output  * stream to another IO stored in a ThreadLocal.  * The reason for this class is that Spring AOP can not proxy  * fields and GShell always access the in, out and err fields  * directly, hence the need to wrap these using delegates.   */
end_comment

begin_class
specifier|public
class|class
name|ProxyIO
extends|extends
name|IO
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|IO
argument_list|>
name|TLS_IO
init|=
operator|new
name|ThreadLocal
argument_list|<
name|IO
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ProxyIO
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|ProxyInputStream
argument_list|()
block|{
specifier|protected
name|InputStream
name|getIn
parameter_list|()
block|{
return|return
name|TLS_IO
operator|.
name|get
argument_list|()
operator|.
name|inputStream
return|;
block|}
block|}
argument_list|,
operator|new
name|ProxyOutputStream
argument_list|()
block|{
specifier|protected
name|OutputStream
name|getOut
parameter_list|()
block|{
return|return
name|TLS_IO
operator|.
name|get
argument_list|()
operator|.
name|outputStream
return|;
block|}
block|}
argument_list|,
operator|new
name|ProxyOutputStream
argument_list|()
block|{
specifier|protected
name|OutputStream
name|getOut
parameter_list|()
block|{
return|return
name|TLS_IO
operator|.
name|get
argument_list|()
operator|.
name|errorStream
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setIO
parameter_list|(
name|IO
name|io
parameter_list|)
block|{
name|TLS_IO
operator|.
name|set
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|IO
name|getIO
parameter_list|()
block|{
return|return
name|TLS_IO
operator|.
name|get
argument_list|()
return|;
block|}
specifier|protected
specifier|static
specifier|abstract
class|class
name|ProxyInputStream
extends|extends
name|InputStream
block|{
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIn
argument_list|()
operator|.
name|read
argument_list|()
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getIn
argument_list|()
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getIn
argument_list|()
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getIn
argument_list|()
operator|.
name|available
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|getIn
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{
name|getIn
argument_list|()
operator|.
name|mark
argument_list|(
name|readlimit
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|getIn
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
name|getIn
argument_list|()
operator|.
name|markSupported
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|InputStream
name|getIn
parameter_list|()
function_decl|;
block|}
specifier|protected
specifier|static
specifier|abstract
class|class
name|ProxyOutputStream
extends|extends
name|OutputStream
block|{
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|getOut
argument_list|()
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|off
operator||
name|len
operator||
operator|(
name|b
operator|.
name|length
operator|-
operator|(
name|len
operator|+
name|off
operator|)
operator|)
operator||
operator|(
name|off
operator|+
name|len
operator|)
operator|)
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|write
argument_list|(
name|b
index|[
name|off
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|getOut
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{             }
name|getOut
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|OutputStream
name|getOut
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

