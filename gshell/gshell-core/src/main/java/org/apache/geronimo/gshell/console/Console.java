begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|console
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Provides an abstraction of a console.  *  * @version $Rev: 706594 $ $Date: 2008-10-21 14:22:21 +0200 (Tue, 21 Oct 2008) $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Console
implements|implements
name|Runnable
block|{
specifier|protected
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|running
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|breakOnNull
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|autoTrim
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|ignoreEmpty
init|=
literal|true
decl_stmt|;
specifier|protected
name|Prompter
name|prompter
init|=
operator|new
name|Prompter
argument_list|()
block|{
specifier|public
name|String
name|prompt
parameter_list|()
block|{
return|return
literal|"> "
return|;
block|}
block|}
decl_stmt|;
specifier|protected
name|Executor
name|executor
decl_stmt|;
specifier|protected
name|ErrorHandler
name|errorHandler
init|=
operator|new
name|ErrorHandler
argument_list|()
block|{
specifier|public
name|Result
name|handleError
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
return|return
name|Result
operator|.
name|STOP
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|Console
parameter_list|(
specifier|final
name|Executor
name|executor
parameter_list|)
block|{
assert|assert
name|executor
operator|!=
literal|null
assert|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
specifier|public
name|void
name|setRunning
parameter_list|(
specifier|final
name|boolean
name|running
parameter_list|)
block|{
name|this
operator|.
name|running
operator|=
name|running
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBreakOnNull
parameter_list|()
block|{
return|return
name|breakOnNull
return|;
block|}
specifier|public
name|void
name|setBreakOnNull
parameter_list|(
specifier|final
name|boolean
name|breakOnNull
parameter_list|)
block|{
name|this
operator|.
name|breakOnNull
operator|=
name|breakOnNull
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAutoTrim
parameter_list|()
block|{
return|return
name|autoTrim
return|;
block|}
specifier|public
name|void
name|setAutoTrim
parameter_list|(
specifier|final
name|boolean
name|autoTrim
parameter_list|)
block|{
name|this
operator|.
name|autoTrim
operator|=
name|autoTrim
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreEmpty
parameter_list|()
block|{
return|return
name|ignoreEmpty
return|;
block|}
specifier|public
name|void
name|setIgnoreEmpty
parameter_list|(
specifier|final
name|boolean
name|ignoreEmpty
parameter_list|)
block|{
name|this
operator|.
name|ignoreEmpty
operator|=
name|ignoreEmpty
expr_stmt|;
block|}
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|errorHandler
return|;
block|}
specifier|public
name|void
name|setErrorHandler
parameter_list|(
specifier|final
name|ErrorHandler
name|errorHandler
parameter_list|)
block|{
name|this
operator|.
name|errorHandler
operator|=
name|errorHandler
expr_stmt|;
block|}
specifier|public
name|Prompter
name|getPrompter
parameter_list|()
block|{
return|return
name|prompter
return|;
block|}
specifier|public
name|void
name|setPrompter
parameter_list|(
specifier|final
name|Prompter
name|prompter
parameter_list|)
block|{
name|this
operator|.
name|prompter
operator|=
name|prompter
expr_stmt|;
block|}
specifier|public
name|Executor
name|getExecutor
parameter_list|()
block|{
return|return
name|executor
return|;
block|}
specifier|public
name|void
name|setExecutor
parameter_list|(
specifier|final
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Running"
argument_list|)
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|running
operator|=
name|work
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Don't use {} here so we get the throwable detail in the log stream
name|log
operator|.
name|debug
argument_list|(
literal|"Work failed: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorHandler
operator|!=
literal|null
condition|)
block|{
name|ErrorHandler
operator|.
name|Result
name|result
init|=
name|errorHandler
operator|.
name|handleError
argument_list|(
name|t
argument_list|)
decl_stmt|;
comment|// Allow the error handler to request that the loop stop
if|if
condition|(
name|result
operator|==
name|ErrorHandler
operator|.
name|Result
operator|.
name|STOP
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error handler requested STOP"
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Finished"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|work
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|line
decl_stmt|;
try|try
block|{
name|line
operator|=
name|readLine
argument_list|(
name|prompter
operator|.
name|prompt
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Closing shell due to an exception while reading input: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Stop on null (maybe, else ignore)
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
operator|!
name|breakOnNull
return|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Read line: {}"
argument_list|,
name|line
argument_list|)
expr_stmt|;
comment|// Log the line as HEX if trace is enabled
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|idx
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|hex
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|line
operator|.
name|getBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|bytes
control|)
block|{
name|String
name|h
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|hex
operator|.
name|append
argument_list|(
literal|"x"
argument_list|)
operator|.
name|append
argument_list|(
name|h
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|idx
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"HEX: {}"
argument_list|,
name|hex
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"     {}"
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
comment|// Auto trim the line (maybe)
if|if
condition|(
name|autoTrim
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
comment|// Ingore empty lines (maybe)
if|if
condition|(
name|ignoreEmpty
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Execute the line
name|Executor
operator|.
name|Result
name|result
init|=
name|executor
operator|.
name|execute
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|// Allow executor to request that the loop stop
if|if
condition|(
name|result
operator|==
name|Executor
operator|.
name|Result
operator|.
name|STOP
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Executor requested STOP"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|readLine
parameter_list|(
name|String
name|prompt
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|//
comment|// Prompter
comment|//
specifier|public
specifier|static
interface|interface
name|Prompter
block|{
name|String
name|prompt
parameter_list|()
function_decl|;
block|}
comment|//
comment|// Executor
comment|//
specifier|public
specifier|static
interface|interface
name|Executor
block|{
enum|enum
name|Result
block|{
name|CONTINUE
block|,
name|STOP
block|}
name|Result
name|execute
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|//
comment|// ErrorHandler
comment|//
specifier|public
specifier|static
interface|interface
name|ErrorHandler
block|{
enum|enum
name|Result
block|{
name|CONTINUE
block|,
name|STOP
block|}
name|Result
name|handleError
parameter_list|(
name|Throwable
name|error
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

