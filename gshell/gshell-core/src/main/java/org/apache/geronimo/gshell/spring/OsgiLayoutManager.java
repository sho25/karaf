begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|LayoutManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|CommandNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|GroupNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|Layout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * The spring implementation of the {@link LayoutManager}.  *  * @version $Rev$ $Date$  */
end_comment

begin_class
specifier|public
class|class
name|OsgiLayoutManager
implements|implements
name|LayoutManager
block|{
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Layout
argument_list|>
name|layouts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Layout
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|shell
init|=
literal|""
decl_stmt|;
specifier|public
name|void
name|register
parameter_list|(
specifier|final
name|Command
name|command
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|String
name|shellName
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"shell"
argument_list|)
decl_stmt|;
if|if
condition|(
name|shellName
operator|!=
literal|null
condition|)
block|{
name|Layout
name|layout
init|=
name|getLayoutForShell
argument_list|(
name|shellName
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|command
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
literal|"alias"
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
name|alias
operator|=
name|id
expr_stmt|;
name|int
name|p
decl_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|alias
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|alias
operator|=
name|alias
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|layout
operator|.
name|add
argument_list|(
operator|new
name|CommandNode
argument_list|(
name|alias
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|aliases
init|=
name|alias
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|aliases
control|)
block|{
name|a
operator|=
name|a
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|layout
operator|.
name|add
argument_list|(
operator|new
name|CommandNode
argument_list|(
name|a
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|unregister
parameter_list|(
specifier|final
name|Command
name|command
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
comment|// TODO: layout does not allow removal of commands at this time.
block|}
specifier|public
name|Node
name|findNode
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|NotFoundException
block|{
return|return
name|findNode
argument_list|(
name|getLayout
argument_list|()
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
name|Node
name|findNode
parameter_list|(
name|Node
name|start
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|NotFoundException
block|{
assert|assert
name|start
operator|!=
literal|null
assert|;
assert|assert
name|path
operator|!=
literal|null
assert|;
if|if
condition|(
operator|!
operator|(
name|start
operator|instanceof
name|GroupNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|path
argument_list|)
throw|;
block|}
name|Node
name|node
init|=
operator|(
operator|(
name|GroupNode
operator|)
name|start
operator|)
operator|.
name|find
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|path
argument_list|)
throw|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|Layout
name|getLayout
parameter_list|()
block|{
return|return
name|getLayoutForShell
argument_list|(
name|shell
argument_list|)
return|;
block|}
specifier|public
name|Layout
name|getLayoutForShell
parameter_list|(
name|String
name|shellName
parameter_list|)
block|{
name|Layout
name|layout
init|=
name|layouts
operator|.
name|get
argument_list|(
name|shellName
argument_list|)
decl_stmt|;
if|if
condition|(
name|layout
operator|==
literal|null
condition|)
block|{
name|layout
operator|=
operator|new
name|Layout
argument_list|()
expr_stmt|;
name|layouts
operator|.
name|put
argument_list|(
name|shellName
argument_list|,
name|layout
argument_list|)
expr_stmt|;
block|}
return|return
name|layout
return|;
block|}
specifier|public
name|String
name|getShell
parameter_list|()
block|{
return|return
name|shell
return|;
block|}
specifier|public
name|void
name|setShell
parameter_list|(
name|String
name|shell
parameter_list|)
block|{
name|this
operator|.
name|shell
operator|=
name|shell
expr_stmt|;
block|}
specifier|public
name|LayoutManager
name|createLayoutManagerForShell
parameter_list|(
specifier|final
name|String
name|shell
parameter_list|)
block|{
return|return
operator|new
name|LayoutManager
argument_list|()
block|{
specifier|public
name|Node
name|findNode
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|NotFoundException
block|{
return|return
name|OsgiLayoutManager
operator|.
name|this
operator|.
name|findNode
argument_list|(
name|getLayoutForShell
argument_list|(
name|shell
argument_list|)
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
name|Node
name|findNode
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|NotFoundException
block|{
return|return
name|OsgiLayoutManager
operator|.
name|this
operator|.
name|findNode
argument_list|(
name|node
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
name|Layout
name|getLayout
parameter_list|()
block|{
return|return
name|getLayoutForShell
argument_list|(
name|shell
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

