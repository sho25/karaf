begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|DefaultEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|DefaultShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|DefaultShellInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|DefaultVariables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ExitNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|branding
operator|.
name|Branding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|osgi
operator|.
name|SubShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|CommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|InteractiveShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|ShellInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|personality
operator|.
name|plexus
operator|.
name|lifecycle
operator|.
name|phase
operator|.
name|InitializationException
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiSubShell
implements|implements
name|SubShell
block|{
specifier|private
name|CommandRegistry
name|commandRegistry
decl_stmt|;
specifier|private
name|OsgiLayoutManager
name|osgiLayoutManager
decl_stmt|;
specifier|private
name|Terminal
name|terminal
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
name|Branding
name|branding
parameter_list|,
name|CommandContext
name|context
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ShellContext
name|oldContext
init|=
name|ShellContext
operator|.
name|get
argument_list|()
decl_stmt|;
name|ShellContext
name|ctx
init|=
operator|new
name|ShellContext
argument_list|()
decl_stmt|;
name|ShellContext
operator|.
name|set
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|ctx
operator|.
name|setIo
argument_list|(
name|context
operator|.
name|getIO
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setCommandRegistry
argument_list|(
name|commandRegistry
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setTerminal
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setBranding
argument_list|(
name|branding
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setLayoutManager
argument_list|(
name|osgiLayoutManager
operator|.
name|createLayoutManagerForShell
argument_list|(
name|branding
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Would be nice to copy the env variables.. but can't cause it has imutable values
comment|// that the DefaultEnvironment tries to overwrite.
name|Environment
name|environment
init|=
operator|new
name|DefaultEnvironment
argument_list|(
name|ctx
operator|.
name|getIo
argument_list|()
argument_list|,
operator|new
name|DefaultVariables
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|IOTargetSource
operator|.
name|setIO
argument_list|(
name|ctx
operator|.
name|getIo
argument_list|()
argument_list|)
expr_stmt|;
name|EnvironmentTargetSource
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|InteractiveShell
name|interactiveShell
init|=
name|createInteractiveShell
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|interactiveShell
operator|.
name|execute
argument_list|(
name|args
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
name|interactiveShell
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitNotification
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|ShellContext
operator|.
name|set
argument_list|(
name|oldContext
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|InteractiveShell
name|createInteractiveShell
parameter_list|(
name|ShellContext
name|ctx
parameter_list|)
throws|throws
name|InitializationException
block|{
name|CommandExecutor
name|executor
init|=
name|createCommandExecutor
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setCommandExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|ShellInfo
name|shellInfo
init|=
name|createShellInfo
argument_list|(
name|ctx
operator|.
name|getBranding
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setShellInfo
argument_list|(
name|shellInfo
argument_list|)
expr_stmt|;
return|return
operator|new
name|DefaultShell
argument_list|(
name|ctx
operator|.
name|getShellInfo
argument_list|()
argument_list|,
name|ctx
operator|.
name|getBranding
argument_list|()
argument_list|,
name|ctx
operator|.
name|getCommandExecutor
argument_list|()
argument_list|,
name|terminal
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|ctx
operator|.
name|getIo
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|CommandExecutor
name|createCommandExecutor
parameter_list|(
name|ShellContext
name|ctx
parameter_list|)
block|{
name|SpringCommandExecutor
name|executor
init|=
operator|new
name|SpringCommandExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|setEnv
argument_list|(
name|ctx
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|setLayoutManager
argument_list|(
name|ctx
operator|.
name|getLayoutManager
argument_list|()
argument_list|)
expr_stmt|;
name|SpringCommandLineBuilder
name|commandLineBuilder
init|=
operator|new
name|SpringCommandLineBuilder
argument_list|()
decl_stmt|;
name|commandLineBuilder
operator|.
name|setEnvironment
argument_list|(
name|ctx
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|commandLineBuilder
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|executor
operator|.
name|setCommandLineBuilder
argument_list|(
name|commandLineBuilder
argument_list|)
expr_stmt|;
name|executor
operator|.
name|setCommandRegistry
argument_list|(
name|commandRegistry
argument_list|)
expr_stmt|;
name|executor
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|executor
return|;
block|}
specifier|private
name|ShellInfo
name|createShellInfo
parameter_list|(
name|Branding
name|branding
parameter_list|)
throws|throws
name|InitializationException
block|{
name|DefaultShellInfo
name|rc
init|=
operator|new
name|DefaultShellInfo
argument_list|(
name|branding
argument_list|)
decl_stmt|;
name|rc
operator|.
name|initialize
argument_list|()
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|Terminal
name|getTerminal
parameter_list|()
block|{
return|return
name|terminal
return|;
block|}
specifier|public
name|void
name|setTerminal
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{
name|this
operator|.
name|terminal
operator|=
name|terminal
expr_stmt|;
block|}
specifier|public
name|OsgiLayoutManager
name|getOsgiLayoutManager
parameter_list|()
block|{
return|return
name|osgiLayoutManager
return|;
block|}
specifier|public
name|void
name|setOsgiLayoutManager
parameter_list|(
name|OsgiLayoutManager
name|osgiLayoutManager
parameter_list|)
block|{
name|this
operator|.
name|osgiLayoutManager
operator|=
name|osgiLayoutManager
expr_stmt|;
block|}
specifier|public
name|CommandRegistry
name|getCommandRegistry
parameter_list|()
block|{
return|return
name|commandRegistry
return|;
block|}
specifier|public
name|void
name|setCommandRegistry
parameter_list|(
name|CommandRegistry
name|commandRegistry
parameter_list|)
block|{
name|this
operator|.
name|commandRegistry
operator|=
name|commandRegistry
expr_stmt|;
block|}
block|}
end_class

end_unit

