begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commands
operator|.
name|builtins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ansi
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|ansi
operator|.
name|Renderer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|branding
operator|.
name|Branding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|annotation
operator|.
name|CommandComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|annotation
operator|.
name|Requirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|LayoutManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|AliasNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|CommandNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|GroupNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|layout
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|CommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|NotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|support
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Display help  *  * @version $Rev: 596570 $ $Date: 2007-11-20 09:47:27 +0100 (Tue, 20 Nov 2007) $  */
end_comment

begin_class
annotation|@
name|CommandComponent
argument_list|(
name|id
operator|=
literal|"gshell-builtins:help"
argument_list|,
name|description
operator|=
literal|"Show command help"
argument_list|)
specifier|public
class|class
name|HelpCommand
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Requirement
specifier|private
name|CommandRegistry
name|commandRegistry
decl_stmt|;
annotation|@
name|Requirement
specifier|private
name|LayoutManager
name|layoutManager
decl_stmt|;
annotation|@
name|Requirement
specifier|private
name|Branding
name|branding
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|path
decl_stmt|;
specifier|private
name|Renderer
name|renderer
init|=
operator|new
name|Renderer
argument_list|()
decl_stmt|;
specifier|public
name|HelpCommand
parameter_list|(
name|CommandRegistry
name|commandRegistry
parameter_list|,
name|LayoutManager
name|layoutManager
parameter_list|,
name|Branding
name|branding
parameter_list|)
block|{
name|this
operator|.
name|commandRegistry
operator|=
name|commandRegistry
expr_stmt|;
name|this
operator|.
name|layoutManager
operator|=
name|layoutManager
expr_stmt|;
name|this
operator|.
name|branding
operator|=
name|branding
expr_stmt|;
block|}
specifier|protected
name|OsgiCommandSupport
name|createCommand
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|HelpCommand
argument_list|(
name|commandRegistry
argument_list|,
name|layoutManager
argument_list|,
name|branding
argument_list|)
return|;
block|}
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|GroupNode
name|gn
init|=
name|layoutManager
operator|.
name|getLayout
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getVariables
argument_list|()
operator|.
name|get
argument_list|(
name|LayoutManager
operator|.
name|CURRENT_NODE
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|gn
operator|=
operator|(
name|GroupNode
operator|)
name|context
operator|.
name|getVariables
argument_list|()
operator|.
name|get
argument_list|(
name|LayoutManager
operator|.
name|CURRENT_NODE
argument_list|)
expr_stmt|;
block|}
name|CommandNode
name|cn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|p
range|:
name|path
control|)
block|{
if|if
condition|(
name|cn
operator|!=
literal|null
condition|)
block|{
name|io
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unexpected path '"
operator|+
name|p
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|FAILURE
return|;
block|}
name|Node
name|n
init|=
name|gn
operator|.
name|find
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
name|io
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Path '"
operator|+
name|p
operator|+
literal|"' not found!"
argument_list|)
expr_stmt|;
return|return
name|FAILURE
return|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|GroupNode
condition|)
block|{
name|gn
operator|=
operator|(
name|GroupNode
operator|)
name|n
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|CommandNode
condition|)
block|{
name|cn
operator|=
operator|(
name|CommandNode
operator|)
name|n
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|n
operator|instanceof
name|AliasNode
condition|)
block|{
name|cn
operator|=
operator|(
name|CommandNode
operator|)
name|layoutManager
operator|.
name|findNode
argument_list|(
name|gn
argument_list|,
operator|(
operator|(
name|AliasNode
operator|)
name|n
operator|)
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported node type "
operator|+
name|n
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|cn
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|gn
operator|==
name|layoutManager
operator|.
name|getLayout
argument_list|()
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
name|branding
operator|.
name|getAbout
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|displayGroupCommands
argument_list|(
name|gn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|displayCommandHelp
argument_list|(
name|cn
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SUCCESS
return|;
block|}
specifier|private
name|void
name|displayGroupCommands
parameter_list|(
specifier|final
name|GroupNode
name|group
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxNameLen
init|=
literal|20
decl_stmt|;
comment|// FIXME: Figure this out dynamically
name|boolean
name|hasShells
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|group
operator|==
name|layoutManager
operator|.
name|getLayout
argument_list|()
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Available commands:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Available commands in "
operator|+
name|Renderer
operator|.
name|encode
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
operator|+
literal|":"
argument_list|)
expr_stmt|;
block|}
name|SortedSet
argument_list|<
name|Node
argument_list|>
name|nodes
init|=
operator|new
name|TreeSet
argument_list|<
name|Node
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Node
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Node
name|o1
parameter_list|,
name|Node
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|addAll
argument_list|(
name|group
operator|.
name|nodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// First display command/aliases nodes
for|for
control|(
name|Node
name|child
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|CommandNode
condition|)
block|{
try|try
block|{
name|CommandNode
name|node
init|=
operator|(
name|CommandNode
operator|)
name|child
decl_stmt|;
name|String
name|name
init|=
name|StringUtils
operator|.
name|rightPad
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|maxNameLen
argument_list|)
decl_stmt|;
name|Command
name|command
init|=
name|commandRegistry
operator|.
name|lookup
argument_list|(
name|node
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|desc
init|=
name|command
operator|.
name|getDescription
argument_list|()
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|name
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NotRegisteredException
name|e
parameter_list|)
block|{
comment|// Ignore those exceptions (command will not be displayed)
block|}
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|AliasNode
condition|)
block|{
name|AliasNode
name|node
init|=
operator|(
name|AliasNode
operator|)
name|child
decl_stmt|;
name|String
name|name
init|=
name|StringUtils
operator|.
name|rightPad
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|maxNameLen
argument_list|)
decl_stmt|;
name|String
name|cmd
init|=
name|layoutManager
operator|.
name|findNode
argument_list|(
name|group
argument_list|,
name|node
operator|.
name|getCommand
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|name
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Alias to: "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|cmd
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|child
operator|instanceof
name|GroupNode
condition|)
block|{
name|hasShells
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasShells
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Available shells:"
argument_list|)
expr_stmt|;
comment|// Then groups
for|for
control|(
name|Node
name|child
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|child
operator|instanceof
name|GroupNode
condition|)
block|{
name|GroupNode
name|node
init|=
operator|(
name|GroupNode
operator|)
name|child
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|renderer
operator|.
name|render
argument_list|(
name|Renderer
operator|.
name|encode
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|extractCommandName
parameter_list|(
name|String
name|command
parameter_list|)
block|{
return|return
name|command
operator|.
name|substring
argument_list|(
name|command
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|private
name|void
name|displayCommandHelp
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|path
operator|!=
literal|null
assert|;
name|Command
name|cmd
init|=
name|commandRegistry
operator|.
name|lookup
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Command "
operator|+
name|Renderer
operator|.
name|encode
argument_list|(
name|path
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Try "
operator|+
name|Renderer
operator|.
name|encode
argument_list|(
literal|"help"
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
operator|+
literal|" for a list of available commands."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Command "
operator|+
name|Renderer
operator|.
name|encode
argument_list|(
name|extractCommandName
argument_list|(
name|path
argument_list|)
argument_list|,
name|Code
operator|.
name|BOLD
argument_list|)
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   "
operator|+
name|cmd
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|execute
argument_list|(
name|context
argument_list|,
literal|"--help"
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

