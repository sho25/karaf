begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commands
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|PasswordAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsecurity
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsecurity
operator|.
name|authc
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsecurity
operator|.
name|authc
operator|.
name|UsernamePasswordToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsecurity
operator|.
name|mgt
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jsecurity
operator|.
name|subject
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *<a href="http://jsecurity.org">JSecurity</a> {@link PasswordAuthenticator}.  *  * @version $Rev: 722797 $ $Date: 2008-12-03 08:18:16 +0100 (Wed, 03 Dec 2008) $  */
end_comment

begin_class
specifier|public
class|class
name|JSecurityPasswordAuthenticator
implements|implements
name|PasswordAuthenticator
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SecurityManager
name|securityManager
decl_stmt|;
specifier|public
name|JSecurityPasswordAuthenticator
parameter_list|(
specifier|final
name|SecurityManager
name|securityManager
parameter_list|)
block|{
comment|// securityManager can be null
name|this
operator|.
name|securityManager
operator|=
name|securityManager
expr_stmt|;
block|}
specifier|public
name|JSecurityPasswordAuthenticator
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|authenticate
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
assert|assert
name|username
operator|!=
literal|null
assert|;
assert|assert
name|password
operator|!=
literal|null
assert|;
name|log
operator|.
name|debug
argument_list|(
literal|"Authenticating: {}/{}"
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|Subject
name|currentUser
decl_stmt|;
if|if
condition|(
name|securityManager
operator|!=
literal|null
condition|)
block|{
name|currentUser
operator|=
name|securityManager
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentUser
operator|=
name|SecurityUtils
operator|.
name|getSubject
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentUser
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Logging out current user: {}"
argument_list|,
name|currentUser
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|currentUser
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|UsernamePasswordToken
name|token
init|=
operator|new
name|UsernamePasswordToken
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|currentUser
operator|.
name|login
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|Object
name|principal
init|=
name|currentUser
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"User [{}] logged in successfully"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
return|return
name|principal
return|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Authentication failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

