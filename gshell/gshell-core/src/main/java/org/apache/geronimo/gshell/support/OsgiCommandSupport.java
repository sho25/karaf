begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|CommandLineProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Printer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|annotation
operator|.
name|CommandComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|common
operator|.
name|Arguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|BundleContextAware
import|;
end_import

begin_comment
comment|/**  * Created by IntelliJ IDEA.  * User: gnodet  * Date: Oct 3, 2007  * Time: 9:44:39 AM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|OsgiCommandSupport
implements|implements
name|Command
implements|,
name|BundleContextAware
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|protected
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|CommandContext
name|context
decl_stmt|;
specifier|protected
name|IO
name|io
decl_stmt|;
specifier|protected
name|Variables
name|variables
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|ServiceReference
argument_list|>
name|usedReferences
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-h"
argument_list|,
name|aliases
operator|=
block|{
literal|"--help"
block|}
argument_list|,
name|description
operator|=
literal|"Display this help message"
argument_list|,
name|requireOverride
operator|=
literal|true
argument_list|)
specifier|private
name|boolean
name|displayHelp
decl_stmt|;
specifier|public
name|String
name|getId
parameter_list|()
block|{
name|CommandComponent
name|cmd
init|=
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|CommandComponent
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Command id not found"
argument_list|)
throw|;
block|}
return|return
name|cmd
operator|.
name|id
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
name|CommandComponent
name|cmd
init|=
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|CommandComponent
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Command description not found"
argument_list|)
throw|;
block|}
return|return
name|cmd
operator|.
name|description
argument_list|()
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|bundleContext
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
specifier|final
name|CommandContext
name|context
parameter_list|,
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ClassLoader
name|cl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|OsgiCommandSupport
name|cmd
init|=
name|createCommand
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|init
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|cmd
operator|.
name|doExecute
argument_list|(
name|args
argument_list|)
return|;
block|}
specifier|protected
name|OsgiCommandSupport
name|createCommand
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getClass
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|CommandContext
name|context
parameter_list|)
block|{
assert|assert
name|context
operator|!=
literal|null
assert|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|io
operator|=
name|context
operator|.
name|getIO
argument_list|()
expr_stmt|;
name|this
operator|.
name|variables
operator|=
name|context
operator|.
name|getVariables
argument_list|()
expr_stmt|;
comment|// Re-setup logging using our id
name|String
name|id
init|=
name|getId
argument_list|()
decl_stmt|;
name|log
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|doExecute
parameter_list|(
specifier|final
name|Object
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|args
operator|!=
literal|null
assert|;
name|log
operator|.
name|info
argument_list|(
literal|"Executing w/args: [{}]"
argument_list|,
name|Arguments
operator|.
name|asString
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLineProcessor
name|clp
init|=
operator|new
name|CommandLineProcessor
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|clp
operator|.
name|process
argument_list|(
name|Arguments
operator|.
name|toStringArray
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// Handle --help/-h automatically for the command
if|if
condition|(
name|displayHelp
condition|)
block|{
comment|//
comment|// TODO: Make a special PrinterHandler to abstrat this muck from having to process it by hand
comment|//
name|displayHelp
argument_list|(
name|clp
argument_list|)
expr_stmt|;
return|return
name|SUCCESS
return|;
block|}
assert|assert
name|io
operator|!=
literal|null
assert|;
assert|assert
name|variables
operator|!=
literal|null
assert|;
try|try
block|{
return|return
name|doExecute
argument_list|()
return|;
block|}
finally|finally
block|{
name|ungetServices
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
name|void
name|displayHelp
parameter_list|(
specifier|final
name|CommandLineProcessor
name|clp
parameter_list|)
block|{
assert|assert
name|clp
operator|!=
literal|null
assert|;
comment|//
comment|// TODO: Need to ask the LayoutManager what the real name is for our command's ID
comment|//
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" -- "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Printer
name|printer
init|=
operator|new
name|Printer
argument_list|(
name|clp
argument_list|)
decl_stmt|;
name|printer
operator|.
name|printUsage
argument_list|(
name|io
operator|.
name|out
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getAllServices
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceReference
index|[]
name|references
init|=
name|getBundleContext
argument_list|()
operator|.
name|getAllServiceReferences
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceReference
name|ref
range|:
name|references
control|)
block|{
name|T
name|t
init|=
name|getService
argument_list|(
name|clazz
argument_list|,
name|ref
argument_list|)
decl_stmt|;
name|services
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|services
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|getService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ServiceReference
name|reference
parameter_list|)
block|{
name|T
name|t
init|=
operator|(
name|T
operator|)
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|usedReferences
operator|==
literal|null
condition|)
block|{
name|usedReferences
operator|=
operator|new
name|ArrayList
argument_list|<
name|ServiceReference
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|usedReferences
operator|.
name|add
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
specifier|protected
name|void
name|ungetServices
parameter_list|()
block|{
if|if
condition|(
name|usedReferences
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
name|ref
range|:
name|usedReferences
control|)
block|{
name|getBundleContext
argument_list|()
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

