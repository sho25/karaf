begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|gshell
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|AliasRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|CommandRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|wisdom
operator|.
name|command
operator|.
name|LinkCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|wisdom
operator|.
name|registry
operator|.
name|CommandLocationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|BundleContextAware
import|;
end_import

begin_class
specifier|public
class|class
name|CommandBundle
implements|implements
name|BundleContextAware
implements|,
name|InitializingBean
implements|,
name|DisposableBean
implements|,
name|ApplicationContextAware
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|CommandRegistry
name|commandRegistry
decl_stmt|;
specifier|private
name|AliasRegistry
name|aliasRegistry
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Command
argument_list|>
name|commands
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Link
argument_list|>
name|links
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Alias
argument_list|>
name|aliases
decl_stmt|;
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServiceRegistration
argument_list|>
name|registrations
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceRegistration
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CommandBundle
parameter_list|()
block|{     }
specifier|public
name|void
name|setApplicationContext
parameter_list|(
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Command
argument_list|>
name|getCommands
parameter_list|()
block|{
return|return
name|commands
return|;
block|}
specifier|public
name|void
name|setCommands
parameter_list|(
specifier|final
name|List
argument_list|<
name|Command
argument_list|>
name|commands
parameter_list|)
block|{
assert|assert
name|commands
operator|!=
literal|null
assert|;
name|this
operator|.
name|commands
operator|=
name|commands
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Link
argument_list|>
name|getLinks
parameter_list|()
block|{
return|return
name|links
return|;
block|}
specifier|public
name|void
name|setLinks
parameter_list|(
name|List
argument_list|<
name|Link
argument_list|>
name|links
parameter_list|)
block|{
assert|assert
name|links
operator|!=
literal|null
assert|;
name|this
operator|.
name|links
operator|=
name|links
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Alias
argument_list|>
name|getAliases
parameter_list|()
block|{
return|return
name|aliases
return|;
block|}
specifier|public
name|void
name|setAliases
parameter_list|(
name|List
argument_list|<
name|Alias
argument_list|>
name|aliases
parameter_list|)
block|{
assert|assert
name|aliases
operator|!=
literal|null
assert|;
name|this
operator|.
name|aliases
operator|=
name|aliases
expr_stmt|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Initializing command bundle"
argument_list|)
expr_stmt|;
if|if
condition|(
name|commandRegistry
operator|==
literal|null
condition|)
block|{
name|String
index|[]
name|names
init|=
name|applicationContext
operator|.
name|getBeanNamesForType
argument_list|(
name|CommandRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|commandRegistry
operator|=
operator|(
name|CommandRegistry
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|CommandRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aliasRegistry
operator|==
literal|null
condition|)
block|{
name|String
index|[]
name|names
init|=
name|applicationContext
operator|.
name|getBeanNamesForType
argument_list|(
name|AliasRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|aliasRegistry
operator|=
operator|(
name|AliasRegistry
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|,
name|AliasRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|commandRegistry
operator|!=
literal|null
operator|&&
name|aliasRegistry
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Command bundle is using the auto wired command/alias registry"
argument_list|)
expr_stmt|;
if|if
condition|(
name|commands
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Command
name|command
range|:
name|commands
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Registering command: {}"
argument_list|,
name|command
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|commandRegistry
operator|.
name|registerCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Link
name|link
range|:
name|links
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Registering link: {}"
argument_list|,
name|link
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LinkCommand
name|cmd
init|=
operator|new
name|LinkCommand
argument_list|(
name|commandRegistry
argument_list|,
name|link
operator|.
name|getTarget
argument_list|()
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setLocation
argument_list|(
operator|new
name|CommandLocationImpl
argument_list|(
name|link
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|commandRegistry
operator|.
name|registerCommand
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aliases
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Alias
name|alias
range|:
name|aliases
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Registering alias: {}"
argument_list|,
name|alias
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|aliasRegistry
operator|.
name|registerAlias
argument_list|(
name|alias
operator|.
name|getName
argument_list|()
argument_list|,
name|alias
operator|.
name|getAlias
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|bundleContext
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Command bundle is using the OSGi registry"
argument_list|)
expr_stmt|;
if|if
condition|(
name|commands
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Command
name|command
range|:
name|commands
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Registering command: {}"
argument_list|,
name|command
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Dictionary
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|OsgiCommandRegistry
operator|.
name|NAME
argument_list|,
name|command
operator|.
name|getLocation
argument_list|()
operator|.
name|getFullPath
argument_list|()
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|Command
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|command
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Link
name|link
range|:
name|links
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Registering link: {}"
argument_list|,
name|link
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|Link
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|link
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aliases
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Alias
name|alias
range|:
name|aliases
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Registering alias: {}"
argument_list|,
name|alias
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Dictionary
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|Alias
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|alias
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Command bundle should be wired to the command/alias registry or be used in an OSGi context"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Destroying command bundle"
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceRegistration
name|reg
range|:
name|registrations
control|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

