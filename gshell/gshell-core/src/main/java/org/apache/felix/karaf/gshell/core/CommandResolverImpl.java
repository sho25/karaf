begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|gshell
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|vfs
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|CommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|Variables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|CommandResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|NoSuchCommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
operator|.
name|BeanContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
operator|.
name|BeanContainerAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|vfs
operator|.
name|FileSystemAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|wisdom
operator|.
name|command
operator|.
name|AliasCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|wisdom
operator|.
name|command
operator|.
name|GroupCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|wisdom
operator|.
name|registry
operator|.
name|GroupDirectoryResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@link CommandResolver} component.  *  * @version $Rev: 741078 $ $Date: 2009-02-05 12:39:10 +0100 (Thu, 05 Feb 2009) $  */
end_comment

begin_class
specifier|public
class|class
name|CommandResolverImpl
implements|implements
name|CommandResolver
implements|,
name|BeanContainerAware
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FileSystemAccess
name|fileSystemAccess
decl_stmt|;
specifier|private
specifier|final
name|GroupDirectoryResolver
name|groupDirResolver
decl_stmt|;
specifier|private
name|FileObject
name|commandsRoot
decl_stmt|;
specifier|private
name|FileObject
name|aliasesRoot
decl_stmt|;
specifier|private
name|BeanContainer
name|container
decl_stmt|;
specifier|private
name|String
name|aliasCommandBeanId
decl_stmt|;
specifier|private
name|String
name|groupCommandBeanId
decl_stmt|;
specifier|public
name|CommandResolverImpl
parameter_list|(
specifier|final
name|FileSystemAccess
name|fileSystemAccess
parameter_list|,
specifier|final
name|GroupDirectoryResolver
name|groupDirResolver
parameter_list|)
block|{
assert|assert
name|fileSystemAccess
operator|!=
literal|null
assert|;
name|this
operator|.
name|fileSystemAccess
operator|=
name|fileSystemAccess
expr_stmt|;
assert|assert
name|groupDirResolver
operator|!=
literal|null
assert|;
name|this
operator|.
name|groupDirResolver
operator|=
name|groupDirResolver
expr_stmt|;
block|}
specifier|public
name|void
name|setBeanContainer
parameter_list|(
specifier|final
name|BeanContainer
name|container
parameter_list|)
block|{
assert|assert
name|container
operator|!=
literal|null
assert|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
specifier|public
name|void
name|setAliasCommandBeanId
parameter_list|(
name|String
name|aliasCommandBeanId
parameter_list|)
block|{
name|this
operator|.
name|aliasCommandBeanId
operator|=
name|aliasCommandBeanId
expr_stmt|;
block|}
specifier|public
name|void
name|setGroupCommandBeanId
parameter_list|(
name|String
name|groupCommandBeanId
parameter_list|)
block|{
name|this
operator|.
name|groupCommandBeanId
operator|=
name|groupCommandBeanId
expr_stmt|;
block|}
comment|//
comment|// TODO: Consider adding an undefined command handler to allow for even more customization of
comment|//       execution when no defined command is found?  So one can say directly execute a
comment|//       *.gsh script, which under the covers will translate into 'source *.gsh' (or really
comment|//       should be 'shell *.gsh' once we have a sub-shell command.
comment|//
specifier|public
name|Command
name|resolveCommand
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
throws|throws
name|CommandException
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
assert|assert
name|variables
operator|!=
literal|null
assert|;
name|log
operator|.
name|debug
argument_list|(
literal|"Resolving command name: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// Always try to resolve aliases before we resolve commands
name|Command
name|command
init|=
name|resolveAliasCommand
argument_list|(
name|name
argument_list|,
name|variables
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|FileObject
name|file
init|=
name|resolveCommandFile
argument_list|(
name|name
argument_list|,
name|variables
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|command
operator|=
name|createCommand
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to resolve command for name: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchCommandException
argument_list|(
name|name
argument_list|)
throw|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Resolved command: {}"
argument_list|,
name|command
argument_list|)
expr_stmt|;
return|return
name|command
return|;
block|}
specifier|private
name|FileObject
name|getAliasesRoot
parameter_list|()
throws|throws
name|FileSystemException
block|{
if|if
condition|(
name|aliasesRoot
operator|==
literal|null
condition|)
block|{
name|aliasesRoot
operator|=
name|fileSystemAccess
operator|.
name|createVirtualFileSystem
argument_list|(
name|ALIASES_ROOT
argument_list|)
expr_stmt|;
block|}
return|return
name|aliasesRoot
return|;
block|}
specifier|private
name|AliasCommand
name|resolveAliasCommand
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
assert|assert
name|variables
operator|!=
literal|null
assert|;
name|log
operator|.
name|trace
argument_list|(
literal|"Resolving alias for name: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|AliasCommand
name|command
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileObject
name|root
init|=
name|getAliasesRoot
argument_list|()
decl_stmt|;
name|FileObject
name|file
init|=
name|root
operator|.
name|resolveFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Resolved file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|command
operator|=
name|createAliasCommand
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to resolve alias command for name: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
specifier|private
name|FileObject
name|getCommandsRoot
parameter_list|()
throws|throws
name|FileSystemException
block|{
if|if
condition|(
name|commandsRoot
operator|==
literal|null
condition|)
block|{
name|commandsRoot
operator|=
name|fileSystemAccess
operator|.
name|createVirtualFileSystem
argument_list|(
name|COMMANDS_ROOT
argument_list|)
expr_stmt|;
block|}
return|return
name|commandsRoot
return|;
block|}
specifier|private
name|FileObject
name|resolveCommandFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Variables
name|variables
parameter_list|)
throws|throws
name|FileSystemException
block|{
assert|assert
name|name
operator|!=
literal|null
assert|;
assert|assert
name|variables
operator|!=
literal|null
assert|;
name|log
operator|.
name|trace
argument_list|(
literal|"Resolving command file: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|FileObject
name|root
init|=
name|getCommandsRoot
argument_list|()
decl_stmt|;
comment|// Special handling for root& group
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|root
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
name|groupDirResolver
operator|.
name|getGroupDirectory
argument_list|(
name|variables
argument_list|)
return|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|searchPath
init|=
name|getSearchPath
argument_list|(
name|variables
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Search path: {}"
argument_list|,
name|searchPath
argument_list|)
expr_stmt|;
name|FileObject
name|groupDir
init|=
name|groupDirResolver
operator|.
name|getGroupDirectory
argument_list|(
name|variables
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Group dir: {}"
argument_list|,
name|groupDir
argument_list|)
expr_stmt|;
name|FileObject
name|file
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|pathElement
range|:
name|searchPath
control|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Resolving file; name={}, pathElement={}"
argument_list|,
name|name
argument_list|,
name|pathElement
argument_list|)
expr_stmt|;
name|FileObject
name|dir
decl_stmt|;
if|if
condition|(
name|pathElement
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dir
operator|=
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pathElement
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dir
operator|=
name|fileSystemAccess
operator|.
name|resolveFile
argument_list|(
name|root
argument_list|,
name|pathElement
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|pathElement
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|fileSystemAccess
operator|.
name|resolveFile
argument_list|(
name|groupDir
argument_list|,
name|pathElement
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"Dir: {}"
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|FileObject
name|tmp
init|=
name|fileSystemAccess
operator|.
name|resolveFile
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"File: {}"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|=
name|tmp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Resolved file: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|String
argument_list|>
name|getSearchPath
parameter_list|(
specifier|final
name|Variables
name|vars
parameter_list|)
block|{
assert|assert
name|vars
operator|!=
literal|null
assert|;
name|Object
name|tmp
init|=
name|vars
operator|.
name|get
argument_list|(
name|PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|instanceof
name|String
condition|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
operator|(
name|String
operator|)
name|tmp
operator|)
operator|.
name|split
argument_list|(
name|PATH_SEPARATOR
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Invalid type for variable '"
operator|+
name|PATH
operator|+
literal|"'; expected String; found: "
operator|+
name|tmp
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Return the default search path (group then root)
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|Command
argument_list|>
name|resolveCommands
parameter_list|(
name|String
name|name
parameter_list|,
name|Variables
name|variables
parameter_list|)
throws|throws
name|CommandException
block|{
comment|// name may be null
assert|assert
name|variables
operator|!=
literal|null
assert|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
literal|""
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Resolving commands for name: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|Command
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|FileObject
name|file
init|=
name|resolveCommandFile
argument_list|(
name|name
argument_list|,
name|variables
argument_list|)
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Resolved (for commands): {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|getType
argument_list|()
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
for|for
control|(
name|FileObject
name|child
range|:
name|file
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|Command
name|command
init|=
name|createCommand
argument_list|(
name|child
argument_list|)
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Command
name|command
init|=
name|createCommand
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to resolve commands for name: "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Resolved {} commands"
argument_list|,
name|commands
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Command
name|command
range|:
name|commands
control|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"    {}"
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|commands
return|;
block|}
specifier|private
name|Command
name|createCommand
parameter_list|(
name|FileObject
name|file
parameter_list|)
throws|throws
name|FileSystemException
throws|,
name|CommandException
block|{
assert|assert
name|file
operator|!=
literal|null
assert|;
comment|// HACK: Must dereference to avoid problems with the DelegateFileObject impl
name|file
operator|=
name|fileSystemAccess
operator|.
name|dereference
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Creating command for file: {} ({})"
argument_list|,
name|file
argument_list|,
name|file
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Command
name|command
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileContent
name|content
init|=
name|file
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|command
operator|=
operator|(
name|Command
operator|)
name|content
operator|.
name|getAttribute
argument_list|(
literal|"COMMAND"
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|getType
argument_list|()
operator|.
name|hasChildren
argument_list|()
condition|)
block|{
name|command
operator|=
name|createGroupCommand
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|content
operator|.
name|setAttribute
argument_list|(
literal|"COMMAND"
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Try to construct AliasCommand?
block|}
block|}
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
literal|"Unable to create command for file: "
operator|+
name|file
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|command
return|;
block|}
specifier|private
name|AliasCommand
name|createAliasCommand
parameter_list|(
specifier|final
name|FileObject
name|file
parameter_list|)
throws|throws
name|FileSystemException
block|{
assert|assert
name|file
operator|!=
literal|null
assert|;
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|getBaseName
argument_list|()
decl_stmt|;
name|log
operator|.
name|trace
argument_list|(
literal|"Creating command for alias: {}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|AliasCommand
name|command
init|=
name|container
operator|.
name|getBean
argument_list|(
name|aliasCommandBeanId
argument_list|,
name|AliasCommand
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|alias
init|=
operator|(
name|String
operator|)
name|file
operator|.
name|getContent
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"ALIAS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Alias meta-file does not contain 'ALIAS' attribute: "
operator|+
name|file
argument_list|)
throw|;
block|}
name|command
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
return|return
name|command
return|;
block|}
specifier|private
name|GroupCommand
name|createGroupCommand
parameter_list|(
specifier|final
name|FileObject
name|file
parameter_list|)
throws|throws
name|FileSystemException
block|{
assert|assert
name|file
operator|!=
literal|null
assert|;
name|log
operator|.
name|trace
argument_list|(
literal|"Creating command for group: {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|GroupCommand
name|command
init|=
name|container
operator|.
name|getBean
argument_list|(
name|groupCommandBeanId
argument_list|,
name|GroupCommand
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|fileSystemAccess
operator|.
name|dereference
argument_list|(
name|commandsRoot
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|getRelativeName
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"."
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
name|command
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|command
return|;
block|}
block|}
end_class

end_unit

