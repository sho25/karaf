begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|gshell
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|io
operator|.
name|PumpStreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|gshell
operator|.
name|core
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_comment
comment|/**  * Installs this ServiceMix instance as a service in your operating systems.   *  * @version $Rev: 603634 $ $Date: 2007-12-12 16:07:16 +0100 (Wed, 12 Dec 2007) $  */
end_comment

begin_class
specifier|public
class|class
name|InstallCommand
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-n"
argument_list|,
name|aliases
operator|=
block|{
literal|"--name"
block|}
argument_list|,
name|description
operator|=
literal|"The service name that will be used when installing the service."
argument_list|)
specifier|private
name|String
name|name
init|=
literal|"servicemix"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-d"
argument_list|,
name|aliases
operator|=
block|{
literal|"--display"
block|}
argument_list|,
name|description
operator|=
literal|"The display name of the service."
argument_list|)
specifier|private
name|String
name|displayName
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-D"
argument_list|,
name|aliases
operator|=
block|{
literal|"--description"
block|}
argument_list|,
name|description
operator|=
literal|"The description of the service."
argument_list|)
specifier|private
name|String
name|description
init|=
literal|""
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-s"
argument_list|,
name|aliases
operator|=
block|{
literal|"--start-type"
block|}
argument_list|,
name|description
operator|=
literal|"Mode in which the service is installed.  AUTO_START or DEMAND_START"
argument_list|)
specifier|private
name|String
name|startType
init|=
literal|"AUTO_START"
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|name
init|=
name|getName
argument_list|()
decl_stmt|;
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"servicemix.base"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|bin
init|=
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"bin"
argument_list|)
decl_stmt|;
name|File
name|etc
init|=
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"etc"
argument_list|)
decl_stmt|;
name|File
name|lib
init|=
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${servicemix.home}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"servicemix.home"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${servicemix.base}"
argument_list|,
name|base
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${name}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${displayName}"
argument_list|,
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${description}"
argument_list|,
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${startType}"
argument_list|,
name|getStartType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|,
literal|"Unknown"
argument_list|)
decl_stmt|;
name|File
name|serviceFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Win"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper.exe"
argument_list|)
argument_list|,
literal|"windows/servicemix-wrapper.exe"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service.bat"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"windows/servicemix-service.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|bin
argument_list|,
literal|"wrapper.dll"
argument_list|)
argument_list|,
literal|"windows/wrapper.dll"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Mac OS X"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"macosx/servicemix-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/servicemix-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.jnilib"
argument_list|)
argument_list|,
literal|"macosx/libwrapper.jnilib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: figure out how to hook in the service that it starts up
comment|// when the machine boots up.
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"linux/servicemix-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/servicemix-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.so"
argument_list|)
argument_list|,
literal|"linux/libwrapper.so"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// TODO: figure out how to hook in the service that it starts up
comment|// when the machine boots up.
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Your operating system '"
operator|+
name|os
operator|+
literal|"' is not currently supported."
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|// Install the wrapper jar to the lib directory..
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"servicemix-wrapper.jar"
argument_list|)
argument_list|,
literal|"all/servicemix-wrapper.jar"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|etc
argument_list|)
expr_stmt|;
name|File
name|wrapperConf
init|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
decl_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"all/servicemix-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setup complete.  You may want to tweak the JVM properties in the wrapper configuration file: "
operator|+
name|wrapperConf
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"before installing and starting the service."
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Win"
argument_list|)
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To install the service, run: "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  C:> "
operator|+
name|serviceFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" install"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Once installed, to start the service run: "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  C:> net start \""
operator|+
name|name
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Once running, to stop the service run: "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  C:> net stop \""
operator|+
name|name
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Once stopped, to remove the installed the service run: "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  C:> "
operator|+
name|serviceFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" remove"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Mac OS X"
argument_list|)
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"At this time it is not known how to get this service to start when the machine is rebooted."
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"If you know how to install the following service script so that it gets started"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"when OS X starts, please email dev@servicemix.apache.org and let us know how so"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"we can update this message."
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To start the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ "
operator|+
name|serviceFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" start"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To stop the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ "
operator|+
name|serviceFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" stop"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The way the service is installed depends upon your flavor of Linux."
argument_list|)
expr_stmt|;
comment|// TODO: figure out if we can detect the Linux flavor
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"@|cyan On Redhat/Fedora/CentOS Systems:|"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To install the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ ln -s "
operator|+
name|serviceFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" /etc/init.d/"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ chkconfig "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" --add"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To start the service when the machine is rebooted:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ chkconfig "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" on"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To disable starting the service when the machine is rebooted:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ chkconfig "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" off"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To start the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ service "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" start"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To stop the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ service "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" stop"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To uninstall the service :"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ chkconfig "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" --del"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ rm /etc/init.d/"
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"@|cyan On Ubuntu/Debian Systems:|"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To install the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ ln -s "
operator|+
name|serviceFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" /etc/init.d/"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To start the service when the machine is rebooted:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ update-rc.d "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" defaults"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To disable starting the service when the machine is rebooted:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ update-rc.d -f "
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" remove"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To start the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ /etc/init.d/"
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" start"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To stop the service:"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ /etc/init.d/"
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
operator|+
literal|" stop"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  To uninstall the service :"
argument_list|)
expr_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    $ rm /etc/init.d/"
operator|+
name|serviceFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|chmod
parameter_list|(
name|File
name|serviceFile
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|command
argument_list|(
literal|"chmod"
argument_list|,
name|mode
argument_list|,
name|serviceFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|Process
name|p
init|=
name|builder
operator|.
name|start
argument_list|()
decl_stmt|;
name|PumpStreamHandler
name|handler
init|=
operator|new
name|PumpStreamHandler
argument_list|(
name|io
operator|.
name|inputStream
argument_list|,
name|io
operator|.
name|outputStream
argument_list|,
name|io
operator|.
name|errorStream
argument_list|)
decl_stmt|;
name|handler
operator|.
name|attach
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|handler
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|status
init|=
name|p
operator|.
name|waitFor
argument_list|()
decl_stmt|;
name|handler
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|status
return|;
block|}
specifier|private
name|void
name|copyResourceTo
parameter_list|(
name|File
name|outFile
parameter_list|,
name|String
name|resource
parameter_list|,
name|boolean
name|text
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating file: @|green "
operator|+
name|outFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"|"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|InstallCommand
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|text
condition|)
block|{
comment|// Read it line at a time so that we can use the platform line ending when we write it out.
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"writing: "
operator|+
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Binary so just write it out the way it came in.
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"@|red File allready exists|. Move it out of the way if you want it re-created: "
operator|+
name|outFile
operator|.
name|getPath
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyFilteredResourceTo
parameter_list|(
name|File
name|outFile
parameter_list|,
name|String
name|resource
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating file: @|green "
operator|+
name|outFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"|"
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|InstallCommand
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Read it line at a time so that we can use the platform line ending when we write it out.
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|line
operator|=
name|filter
argument_list|(
name|line
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"@|red File allready exists|. Move it out of the way if you want it re-created: "
operator|+
name|outFile
operator|.
name|getPath
argument_list|()
operator|+
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{ 		}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|OutputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{ 		}
block|}
specifier|private
name|String
name|filter
parameter_list|(
name|String
name|line
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|i
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|p1
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|>=
literal|0
condition|)
block|{
name|String
name|l1
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|String
name|l2
init|=
name|line
operator|.
name|substring
argument_list|(
name|p1
operator|+
name|i
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|=
name|l1
operator|+
name|i
operator|.
name|getValue
argument_list|()
operator|+
name|l2
expr_stmt|;
block|}
block|}
return|return
name|line
return|;
block|}
specifier|private
name|void
name|mkdir
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating missing directory: @|green "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"|"
argument_list|)
expr_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"servicemix.base"
argument_list|)
argument_list|)
decl_stmt|;
name|name
operator|=
name|base
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getDisplayName
parameter_list|()
block|{
if|if
condition|(
name|displayName
operator|==
literal|null
condition|)
block|{
name|displayName
operator|=
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|displayName
return|;
block|}
specifier|public
name|void
name|setDisplayName
parameter_list|(
name|String
name|displayName
parameter_list|)
block|{
name|this
operator|.
name|displayName
operator|=
name|displayName
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|String
name|getStartType
parameter_list|()
block|{
return|return
name|startType
return|;
block|}
specifier|public
name|void
name|setStartType
parameter_list|(
name|String
name|startType
parameter_list|)
block|{
name|this
operator|.
name|startType
operator|=
name|startType
expr_stmt|;
block|}
block|}
end_class

end_unit

