begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|admin
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|jpm
operator|.
name|Process
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|jpm
operator|.
name|ProcessBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|admin
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|common
operator|.
name|io
operator|.
name|PumpStreamHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|IO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|spring
operator|.
name|ProxyIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|prefs
operator|.
name|BackingStoreException
import|;
end_import

begin_class
specifier|public
class|class
name|InstanceImpl
implements|implements
name|Instance
block|{
specifier|private
name|AdminServiceImpl
name|service
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Process
name|process
decl_stmt|;
comment|//private PumpStreamHandler handler;
specifier|public
name|InstanceImpl
parameter_list|(
name|AdminServiceImpl
name|service
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|attach
parameter_list|(
name|int
name|pid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already started"
argument_list|)
throw|;
block|}
name|this
operator|.
name|process
operator|=
name|ProcessBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|attach
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|int
name|getPid
parameter_list|()
block|{
name|checkProcess
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|process
operator|!=
literal|null
condition|?
name|this
operator|.
name|process
operator|.
name|getPid
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.servicemix.shell.cfg"
argument_list|)
decl_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|loc
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"remoteShellLocation"
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|loc
argument_list|)
decl_stmt|;
return|return
name|uri
operator|.
name|getPort
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|changePort
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.servicemix.shell.cfg"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|String
name|loc
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"remoteShellLocation"
argument_list|)
decl_stmt|;
name|loc
operator|=
name|loc
operator|.
name|replace
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
operator|new
name|URI
argument_list|(
name|loc
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"remoteShellLocation"
argument_list|,
name|loc
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already started"
argument_list|)
throw|;
block|}
comment|/*         this.process = new ProcessBuilder()                             .directory(new File(name))                             .command(isWindows() ? "bin\\servicemix.bat" : "bin/servicemix", "server")                             .start();         IO io = ProxyIO.getIO();         this.handler = new PumpStreamHandler(new ByteArrayInputStream(new byte[0]),                                              io != null ? io.outputStream : new ByteArrayOutputStream(),                                              io != null ? io.errorStream : new ByteArrayOutputStream());         this.handler.attach(this.process);         this.handler.start();         */
name|this
operator|.
name|process
operator|=
name|ProcessBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|directory
argument_list|(
operator|new
name|File
argument_list|(
name|name
argument_list|)
argument_list|)
operator|.
name|command
argument_list|(
name|isWindows
argument_list|()
condition|?
literal|"bin\\servicemix.bat server"
else|:
literal|"bin/servicemix server"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|saveState
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not started"
argument_list|)
throw|;
block|}
name|this
operator|.
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|forget
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|saveState
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isRunning
parameter_list|()
block|{
name|checkProcess
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|process
operator|!=
literal|null
return|;
block|}
specifier|protected
name|void
name|checkProcess
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
comment|/*             try {                 this.process.exitValue();                 this.process = null;                 if (this.handler != null) {                     this.handler.stop();                     this.handler = null;                 }             } catch (IllegalThreadStateException e) {             }             */
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|process
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|this
operator|.
name|process
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|private
specifier|static
specifier|final
name|boolean
name|windows
decl_stmt|;
static|static
block|{
name|windows
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"windows"
argument_list|)
operator|!=
operator|-
literal|1
expr_stmt|;
block|}
specifier|protected
specifier|static
name|boolean
name|isWindows
parameter_list|()
block|{
return|return
name|windows
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|deleteFile
parameter_list|(
name|File
name|fileToDelete
parameter_list|)
block|{
if|if
condition|(
name|fileToDelete
operator|==
literal|null
operator|||
operator|!
name|fileToDelete
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fileToDelete
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|fileToDelete
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|&=
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|&=
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|result
operator|&=
name|fileToDelete
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

