begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|admin
operator|.
name|internal
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|command
operator|.
name|annotation
operator|.
name|CommandComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|clp
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|admin
operator|.
name|Instance
import|;
end_import

begin_comment
comment|/**  * List available instances  */
end_comment

begin_class
annotation|@
name|CommandComponent
argument_list|(
name|id
operator|=
literal|"admin:list"
argument_list|,
name|description
operator|=
literal|"List existing ServiceMix instances"
argument_list|)
specifier|public
class|class
name|ListCommand
extends|extends
name|AdminCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-l"
argument_list|,
name|aliases
operator|=
block|{
literal|"--location"
block|}
argument_list|,
name|description
operator|=
literal|"Display instances location"
argument_list|)
name|boolean
name|location
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|Instance
index|[]
name|instances
init|=
name|getAdminService
argument_list|()
operator|.
name|getInstances
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
condition|)
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Port   State       Pid  Location"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Port   State       Pid  Name"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Instance
name|instance
range|:
name|instances
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|instance
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|s
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"] ["
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|instance
operator|.
name|isRunning
argument_list|()
condition|?
literal|"Started"
else|:
literal|"Stopped"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"] ["
argument_list|)
expr_stmt|;
name|s
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|instance
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|s
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|instance
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SUCCESS
return|;
block|}
block|}
end_class

end_unit

