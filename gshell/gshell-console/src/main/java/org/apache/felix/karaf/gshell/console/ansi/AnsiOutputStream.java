begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|gshell
operator|.
name|console
operator|.
name|ansi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|AnsiOutputStream
extends|extends
name|FilterOutputStream
block|{
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|16
index|]
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|ansiCodeState
decl_stmt|;
specifier|public
name|AnsiOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ansiCodeState
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|'@'
condition|)
block|{
name|ansiCodeState
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ansiCodeState
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|'|'
condition|)
block|{
name|ansiCodeState
operator|=
literal|2
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|ansiCodeState
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ansiCodeState
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|','
condition|)
block|{
name|write
argument_list|(
name|AnsiCode
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|' '
condition|)
block|{
name|write
argument_list|(
name|AnsiCode
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ansiCodeState
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|count
operator|<
name|buf
operator|.
name|length
condition|)
block|{
name|buf
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|char
operator|)
name|b
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown ANSI code (too long): "
operator|+
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ansiCodeState
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|b
operator|==
literal|'|'
condition|)
block|{
name|write
argument_list|(
name|AnsiCode
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|ansiCodeState
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|'\\'
condition|)
block|{
name|ansiCodeState
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ansiCodeState
operator|==
literal|4
condition|)
block|{
if|if
condition|(
name|b
operator|!=
literal|'|'
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|ansiCodeState
operator|=
literal|3
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
specifier|protected
name|void
name|write
parameter_list|(
name|AnsiCode
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
literal|27
argument_list|)
expr_stmt|;
comment|// ESC
name|super
operator|.
name|write
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
if|if
condition|(
name|code
operator|.
name|code
operator|>=
literal|10
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
operator|(
name|code
operator|.
name|code
operator|/
literal|10
operator|)
operator|+
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|write
argument_list|(
operator|(
name|code
operator|.
name|code
operator|%
literal|10
operator|)
operator|+
literal|'0'
argument_list|)
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|AnsiOutputStream
name|aos
init|=
operator|new
name|AnsiOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|aos
operator|.
name|write
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|aos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

