begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|gshell
operator|.
name|console
operator|.
name|jline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|WindowsTerminal
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|UnixTerminal
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|UnsupportedTerminal
import|;
end_import

begin_class
specifier|public
class|class
name|TerminalFactory
block|{
specifier|private
name|Terminal
name|term
decl_stmt|;
specifier|public
name|Terminal
name|getTerminal
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
return|return
name|term
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|windows
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"windows"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|windows
condition|)
block|{
name|AnsiWindowsTerminal
name|t
init|=
operator|new
name|AnsiWindowsTerminal
argument_list|()
decl_stmt|;
name|t
operator|.
name|setDirectConsole
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|initializeTerminal
argument_list|()
expr_stmt|;
name|term
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|NoInterruptUnixTerminal
name|t
init|=
operator|new
name|NoInterruptUnixTerminal
argument_list|()
decl_stmt|;
name|t
operator|.
name|initializeTerminal
argument_list|()
expr_stmt|;
name|term
operator|=
name|t
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|term
operator|=
operator|new
name|UnsupportedTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|term
operator|.
name|restoreTerminal
argument_list|()
expr_stmt|;
name|term
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|AnsiWindowsTerminal
extends|extends
name|WindowsTerminal
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isANSISupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NoInterruptUnixTerminal
extends|extends
name|UnixTerminal
block|{
annotation|@
name|Override
specifier|public
name|void
name|initializeTerminal
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
operator|.
name|initializeTerminal
argument_list|()
expr_stmt|;
name|stty
argument_list|(
literal|"intr undef"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreTerminal
parameter_list|()
throws|throws
name|Exception
block|{
name|stty
argument_list|(
literal|"intr ^C"
argument_list|)
expr_stmt|;
name|super
operator|.
name|restoreTerminal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

