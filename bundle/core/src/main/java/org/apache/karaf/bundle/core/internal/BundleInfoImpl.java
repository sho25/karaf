begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevisions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWire
import|;
end_import

begin_class
specifier|public
class|class
name|BundleInfoImpl
implements|implements
name|BundleInfo
block|{
specifier|private
name|int
name|startLevel
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|symbolicName
decl_stmt|;
specifier|private
name|String
name|updateLocation
decl_stmt|;
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|String
name|revisions
decl_stmt|;
specifier|private
name|long
name|bundleId
decl_stmt|;
specifier|private
name|BundleState
name|state
decl_stmt|;
specifier|private
name|boolean
name|isFragment
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Bundle
argument_list|>
name|fragments
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Bundle
argument_list|>
name|fragmentHosts
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|Integer
argument_list|,
name|BundleState
argument_list|>
name|bundleStateMap
decl_stmt|;
static|static
block|{
name|bundleStateMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bundleStateMap
operator|.
name|put
argument_list|(
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|BundleState
operator|.
name|Active
argument_list|)
expr_stmt|;
name|bundleStateMap
operator|.
name|put
argument_list|(
name|Bundle
operator|.
name|INSTALLED
argument_list|,
name|BundleState
operator|.
name|Installed
argument_list|)
expr_stmt|;
name|bundleStateMap
operator|.
name|put
argument_list|(
name|Bundle
operator|.
name|RESOLVED
argument_list|,
name|BundleState
operator|.
name|Resolved
argument_list|)
expr_stmt|;
name|bundleStateMap
operator|.
name|put
argument_list|(
name|Bundle
operator|.
name|STARTING
argument_list|,
name|BundleState
operator|.
name|Starting
argument_list|)
expr_stmt|;
name|bundleStateMap
operator|.
name|put
argument_list|(
name|Bundle
operator|.
name|STOPPING
argument_list|,
name|BundleState
operator|.
name|Stopping
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|public
name|BundleInfoImpl
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleState
name|extState
parameter_list|)
block|{
name|BundleStartLevel
name|bsl
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|startLevel
operator|=
name|bsl
operator|.
name|getStartLevel
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_NAME
argument_list|)
expr_stmt|;
name|this
operator|.
name|symbolicName
operator|=
name|bundle
operator|.
name|getSymbolicName
argument_list|()
expr_stmt|;
name|String
name|locationFromHeader
init|=
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_UPDATELOCATION
argument_list|)
decl_stmt|;
name|this
operator|.
name|updateLocation
operator|=
name|locationFromHeader
operator|!=
literal|null
condition|?
name|locationFromHeader
else|:
name|bundle
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
expr_stmt|;
name|this
operator|.
name|revisions
operator|=
name|populateRevisions
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundleId
operator|=
name|bundle
operator|.
name|getBundleId
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
operator|(
name|extState
operator|!=
name|BundleState
operator|.
name|Unknown
operator|)
condition|?
name|extState
else|:
name|getBundleState
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|populateFragementInfos
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|populateFragementInfos
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|isFragment
operator|=
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|fragments
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|fragmentHosts
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|BundleRevisions
name|revisions
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevisions
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|BundleRevision
name|revision
range|:
name|revisions
operator|.
name|getRevisions
argument_list|()
control|)
block|{
if|if
condition|(
name|revision
operator|.
name|getWiring
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getFragments
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|getFragmentHosts
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|populateRevisions
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|BundleRevisions
name|revisions
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevisions
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
for|for
control|(
name|BundleRevision
name|revision
range|:
name|revisions
operator|.
name|getRevisions
argument_list|()
control|)
block|{
name|ret
operator|=
name|ret
operator|+
literal|"["
operator|+
name|revision
operator|+
literal|"]"
operator|+
literal|" "
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|getFragments
parameter_list|(
name|BundleRevision
name|revision
parameter_list|)
block|{
name|List
argument_list|<
name|BundleWire
argument_list|>
name|wires
init|=
name|revision
operator|.
name|getWiring
argument_list|()
operator|.
name|getProvidedWires
argument_list|(
name|BundleRevision
operator|.
name|HOST_NAMESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|wires
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BundleWire
name|w
range|:
name|wires
control|)
block|{
name|Bundle
name|b
init|=
name|w
operator|.
name|getRequirerWiring
argument_list|()
operator|.
name|getBundle
argument_list|()
decl_stmt|;
name|this
operator|.
name|fragments
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|getFragmentHosts
parameter_list|(
name|BundleRevision
name|revision
parameter_list|)
block|{
name|List
argument_list|<
name|BundleWire
argument_list|>
name|wires
init|=
name|revision
operator|.
name|getWiring
argument_list|()
operator|.
name|getRequiredWires
argument_list|(
name|BundleRevision
operator|.
name|HOST_NAMESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|wires
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BundleWire
name|w
range|:
name|wires
control|)
block|{
name|Bundle
name|b
init|=
name|w
operator|.
name|getProviderWiring
argument_list|()
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|fragmentHosts
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|BundleState
name|getBundleState
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|BundleState
name|state
init|=
name|bundleStateMap
operator|.
name|get
argument_list|(
name|bundle
operator|.
name|getState
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|state
operator|==
literal|null
condition|?
name|BundleState
operator|.
name|Unknown
else|:
name|state
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBundleId
parameter_list|()
block|{
return|return
name|this
operator|.
name|bundleId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSymbolicName
parameter_list|()
block|{
return|return
name|this
operator|.
name|symbolicName
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUpdateLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|updateLocation
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|BundleState
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStartLevel
parameter_list|()
block|{
return|return
name|this
operator|.
name|startLevel
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFragment
parameter_list|()
block|{
return|return
name|this
operator|.
name|isFragment
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Bundle
argument_list|>
name|getFragments
parameter_list|()
block|{
return|return
name|this
operator|.
name|fragments
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Bundle
argument_list|>
name|getFragmentHosts
parameter_list|()
block|{
return|return
name|this
operator|.
name|fragmentHosts
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRevisions
parameter_list|()
block|{
return|return
name|this
operator|.
name|revisions
return|;
block|}
block|}
end_class

end_unit

