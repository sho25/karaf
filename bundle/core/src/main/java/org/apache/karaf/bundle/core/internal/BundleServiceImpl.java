begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_class
specifier|public
class|class
name|BundleServiceImpl
implements|implements
name|BundleService
block|{
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|BundleStateService
argument_list|>
name|stateServices
decl_stmt|;
specifier|public
name|BundleServiceImpl
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|List
argument_list|<
name|BundleStateService
argument_list|>
name|stateServices
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|stateServices
operator|=
name|stateServices
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Bundle
argument_list|>
name|selectBundles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|,
name|boolean
name|defaultAllBundles
parameter_list|)
block|{
return|return
operator|new
name|BundleSelectorImpl
argument_list|(
name|bundleContext
argument_list|)
operator|.
name|selectBundles
argument_list|(
name|ids
argument_list|,
name|defaultAllBundles
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|BundleInfo
name|getInfo
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|BundleState
name|combinedState
init|=
name|BundleState
operator|.
name|Unknown
decl_stmt|;
for|for
control|(
name|BundleStateService
name|stateService
range|:
name|this
operator|.
name|stateServices
control|)
block|{
name|BundleState
name|extState
init|=
name|stateService
operator|.
name|getState
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|extState
operator|!=
name|BundleState
operator|.
name|Unknown
condition|)
block|{
name|combinedState
operator|=
name|extState
expr_stmt|;
block|}
block|}
return|return
operator|new
name|BundleInfoImpl
argument_list|(
name|bundle
argument_list|,
name|combinedState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDiag
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleStateService
name|bundleStateService
range|:
name|stateServices
control|)
block|{
name|String
name|part
init|=
name|bundleStateService
operator|.
name|getDiag
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|bundleStateService
operator|.
name|getName
argument_list|()
operator|+
name|part
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|INSTALLED
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unsatisfied Requirements:"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|reqs
init|=
name|getUnsatisfiedRquirements
argument_list|(
name|bundle
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleRequirement
name|req
range|:
name|reqs
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|getUnsatisfiedRquirements
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleRequirement
argument_list|>
argument_list|()
decl_stmt|;
name|BundleRevision
name|rev
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevision
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rev
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|reqs
init|=
name|rev
operator|.
name|getDeclaredRequirements
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleRequirement
name|req
range|:
name|reqs
control|)
block|{
if|if
condition|(
operator|!
name|canBeSatisfied
argument_list|(
name|req
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|canBeSatisfied
parameter_list|(
name|BundleRequirement
name|req
parameter_list|)
block|{
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|BundleWiring
name|wiring
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wiring
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|caps
init|=
name|wiring
operator|.
name|getCapabilities
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleCapability
name|cap
range|:
name|caps
control|)
block|{
if|if
condition|(
name|req
operator|.
name|matches
argument_list|(
name|cap
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

