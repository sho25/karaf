begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|command
operator|.
name|wikidoc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|WikiParserTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TESTDOC
init|=
literal|"h1. myTestdoc\n"
operator|+
literal|"\n"
operator|+
literal|"Some text\n"
operator|+
literal|"* enumeration\n"
operator|+
literal|" some text [a link] some more text\n"
operator|+
literal|"h1 is no heading"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADINGCASES
init|=
literal|"h1.\n"
operator|+
literal|"hf."
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|parseTestDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|WikiVisitor
name|visitor
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|WikiVisitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|heading
argument_list|(
literal|1
argument_list|,
literal|"myTestdoc"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"Some text"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|enumeration
argument_list|(
literal|"enumeration"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|" some text "
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|link
argument_list|(
literal|"a link"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|" some more text"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"h1 is no heading"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|WikiParser
name|parser
init|=
operator|new
name|WikiParser
argument_list|(
name|visitor
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|TESTDOC
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|parseHeadingSpecialCases
parameter_list|()
throws|throws
name|IOException
block|{
name|WikiVisitor
name|visitor
init|=
name|EasyMock
operator|.
name|createStrictMock
argument_list|(
name|WikiVisitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|heading
argument_list|(
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"hf."
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|WikiParser
name|parser
init|=
operator|new
name|WikiParser
argument_list|(
name|visitor
argument_list|)
decl_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|StringReader
argument_list|(
name|HEADINGCASES
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

