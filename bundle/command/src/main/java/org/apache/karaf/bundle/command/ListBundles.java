begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|FrameworkStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevisions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWire
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"bundle"
argument_list|,
name|name
operator|=
literal|"list"
argument_list|,
name|description
operator|=
literal|"Lists all installed bundles."
argument_list|)
specifier|public
class|class
name|ListBundles
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-l"
argument_list|,
name|aliases
operator|=
block|{}
argument_list|,
name|description
operator|=
literal|"Show the locations"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|showLoc
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-s"
argument_list|,
name|description
operator|=
literal|"Shows the symbolic name"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|showSymbolic
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-u"
argument_list|,
name|description
operator|=
literal|"Shows the update locations"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|showUpdate
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-t"
argument_list|,
name|valueToShowInHelp
operator|=
literal|""
argument_list|,
name|description
operator|=
literal|"Specifies the bundle threshold; bundles with a start-level less than this value will not get printed out."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|int
name|bundleLevelThreshold
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BundleStateService
argument_list|>
name|bundleStateServices
decl_stmt|;
specifier|public
name|ListBundles
parameter_list|(
name|List
argument_list|<
name|BundleStateService
argument_list|>
name|bundleStateServices
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|bundleStateServices
operator|=
name|bundleStateServices
expr_stmt|;
block|}
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|Bundle
index|[]
name|bundles
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundles
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundles
operator|!=
literal|null
condition|)
block|{
comment|// Determine threshold
specifier|final
name|String
name|sbslProp
init|=
name|bundleContext
operator|.
name|getProperty
argument_list|(
literal|"karaf.systemBundlesStartLevel"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sbslProp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|bundleLevelThreshold
operator|<
literal|0
condition|)
block|{
name|bundleLevelThreshold
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|sbslProp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// Display active start level.
name|FrameworkStartLevel
name|fsl
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|adapt
argument_list|(
name|FrameworkStartLevel
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|fsl
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"START LEVEL "
operator|+
name|fsl
operator|.
name|getStartLevel
argument_list|()
operator|+
literal|" , List Threshold: "
operator|+
name|bundleLevelThreshold
argument_list|)
expr_stmt|;
block|}
comment|// Print column headers.
name|String
name|msg
init|=
literal|" Name"
decl_stmt|;
if|if
condition|(
name|showLoc
condition|)
block|{
name|msg
operator|=
literal|" Location"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showSymbolic
condition|)
block|{
name|msg
operator|=
literal|" Symbolic name"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showUpdate
condition|)
block|{
name|msg
operator|=
literal|" Update location"
expr_stmt|;
block|}
name|String
name|level
init|=
operator|(
name|fsl
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
literal|"  Level "
decl_stmt|;
name|String
name|headers
init|=
literal|"   ID   State       "
decl_stmt|;
for|for
control|(
name|BundleStateService
name|stateService
range|:
name|bundleStateServices
control|)
block|{
name|headers
operator|+=
literal|"  "
operator|+
name|stateService
operator|.
name|getName
argument_list|()
operator|+
literal|" "
expr_stmt|;
block|}
name|headers
operator|+=
name|level
operator|+
name|msg
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|headers
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BundleStartLevel
name|bsl
init|=
name|bundles
index|[
name|i
index|]
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bsl
operator|==
literal|null
operator|||
name|bsl
operator|.
name|getStartLevel
argument_list|()
operator|>=
name|bundleLevelThreshold
condition|)
block|{
comment|// Get the bundle name or location.
name|String
name|name
init|=
operator|(
name|String
operator|)
name|bundles
index|[
name|i
index|]
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_NAME
argument_list|)
decl_stmt|;
comment|// If there is no name, then default to symbolic name.
name|name
operator|=
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
name|bundles
index|[
name|i
index|]
operator|.
name|getSymbolicName
argument_list|()
else|:
name|name
expr_stmt|;
comment|// If there is no symbolic name, resort to location.
name|name
operator|=
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
name|bundles
index|[
name|i
index|]
operator|.
name|getLocation
argument_list|()
else|:
name|name
expr_stmt|;
comment|// Overwrite the default value is the user specifically
comment|// requested to display one or the other.
if|if
condition|(
name|showLoc
condition|)
block|{
name|name
operator|=
name|bundles
index|[
name|i
index|]
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showSymbolic
condition|)
block|{
name|name
operator|=
name|bundles
index|[
name|i
index|]
operator|.
name|getSymbolicName
argument_list|()
expr_stmt|;
name|name
operator|=
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|"<no symbolic name>"
else|:
name|name
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|showUpdate
condition|)
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|bundles
index|[
name|i
index|]
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_UPDATELOCATION
argument_list|)
expr_stmt|;
name|name
operator|=
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
name|bundles
index|[
name|i
index|]
operator|.
name|getLocation
argument_list|()
else|:
name|name
expr_stmt|;
block|}
comment|// Show bundle version if not showing location.
name|String
name|version
init|=
operator|(
name|String
operator|)
name|bundles
index|[
name|i
index|]
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
name|name
operator|=
operator|(
operator|!
name|showLoc
operator|&&
operator|!
name|showUpdate
operator|&&
operator|(
name|version
operator|!=
literal|null
operator|)
operator|)
condition|?
name|name
operator|+
literal|" ("
operator|+
name|version
operator|+
literal|")"
else|:
name|name
expr_stmt|;
name|long
name|l
init|=
name|bundles
index|[
name|i
index|]
operator|.
name|getBundleId
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|bsl
operator|==
literal|null
condition|)
block|{
name|level
operator|=
literal|"1"
expr_stmt|;
block|}
else|else
block|{
name|level
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|bsl
operator|.
name|getStartLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|level
operator|.
name|length
argument_list|()
operator|<
literal|5
condition|)
block|{
name|level
operator|=
literal|" "
operator|+
name|level
expr_stmt|;
block|}
while|while
condition|(
name|id
operator|.
name|length
argument_list|()
operator|<
literal|4
condition|)
block|{
name|id
operator|=
literal|" "
operator|+
name|id
expr_stmt|;
block|}
name|String
name|line
init|=
literal|"["
operator|+
name|id
operator|+
literal|"] ["
operator|+
name|getStateString
argument_list|(
name|bundles
index|[
name|i
index|]
argument_list|)
operator|+
literal|"]"
decl_stmt|;
for|for
control|(
name|BundleStateService
name|stateService
range|:
name|bundleStateServices
control|)
block|{
name|BundleState
name|state
init|=
name|stateService
operator|.
name|getState
argument_list|(
name|bundles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
name|stateSt
init|=
name|state
operator|==
name|BundleState
operator|.
name|Unknown
condition|?
literal|""
else|:
name|state
operator|.
name|toString
argument_list|()
decl_stmt|;
name|line
operator|+=
literal|" ["
operator|+
name|getStateString
argument_list|(
name|stateSt
argument_list|,
name|stateService
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
name|line
operator|+=
literal|" ["
operator|+
name|level
operator|+
literal|"] "
operator|+
name|name
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|boolean
name|isFragment
init|=
name|bundles
index|[
name|i
index|]
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isFragment
condition|)
block|{
name|int
name|nb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BundleRevision
name|revision
range|:
name|bundles
index|[
name|i
index|]
operator|.
name|adapt
argument_list|(
name|BundleRevisions
operator|.
name|class
argument_list|)
operator|.
name|getRevisions
argument_list|()
control|)
block|{
if|if
condition|(
name|revision
operator|.
name|getWiring
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleWire
argument_list|>
name|wires
init|=
name|revision
operator|.
name|getWiring
argument_list|()
operator|.
name|getProvidedWires
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|wires
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BundleWire
name|w
range|:
name|wires
control|)
block|{
if|if
condition|(
name|w
operator|.
name|getCapability
argument_list|()
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|BundleRevision
operator|.
name|HOST_NAMESPACE
argument_list|)
condition|)
block|{
name|Bundle
name|b
init|=
name|w
operator|.
name|getRequirerWiring
argument_list|()
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|nb
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"                                       Fragments: "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|nb
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|nb
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|nb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BundleRevision
name|revision
range|:
name|bundles
index|[
name|i
index|]
operator|.
name|adapt
argument_list|(
name|BundleRevisions
operator|.
name|class
argument_list|)
operator|.
name|getRevisions
argument_list|()
control|)
block|{
if|if
condition|(
name|revision
operator|.
name|getWiring
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleWire
argument_list|>
name|wires
init|=
name|revision
operator|.
name|getWiring
argument_list|()
operator|.
name|getRequiredWires
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|wires
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BundleWire
name|w
range|:
name|wires
control|)
block|{
name|Bundle
name|b
init|=
name|w
operator|.
name|getProviderWiring
argument_list|()
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nb
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"                                       Hosts: "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|nb
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|nb
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"There are no installed bundles."
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getStateString
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|int
name|state
init|=
name|bundle
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
return|return
literal|"Active     "
return|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Bundle
operator|.
name|INSTALLED
condition|)
block|{
return|return
literal|"Installed  "
return|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Bundle
operator|.
name|RESOLVED
condition|)
block|{
return|return
literal|"Resolved   "
return|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Bundle
operator|.
name|STARTING
condition|)
block|{
return|return
literal|"Starting   "
return|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Bundle
operator|.
name|STOPPING
condition|)
block|{
return|return
literal|"Stopping   "
return|;
block|}
else|else
block|{
return|return
literal|"Unknown    "
return|;
block|}
block|}
specifier|public
name|String
name|getStateString
parameter_list|(
name|String
name|state
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
literal|""
expr_stmt|;
block|}
while|while
condition|(
name|state
operator|.
name|length
argument_list|()
operator|<
name|length
condition|)
block|{
name|state
operator|+=
literal|" "
expr_stmt|;
block|}
return|return
name|state
return|;
block|}
block|}
end_class

end_unit

