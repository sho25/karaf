begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|ConsoleReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|FrameworkWiring
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"bundle"
argument_list|,
name|name
operator|=
literal|"load-test"
argument_list|,
name|description
operator|=
literal|"Load test bundle lifecycle"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|LoadTest
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--threads"
argument_list|,
name|description
operator|=
literal|"number of concurrent threads"
argument_list|)
name|int
name|threads
init|=
literal|2
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--delay"
argument_list|,
name|description
operator|=
literal|"maximum delay between actions"
argument_list|)
name|int
name|delay
init|=
literal|1
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--iterations"
argument_list|,
name|description
operator|=
literal|"number of iterations per thread"
argument_list|)
name|int
name|iterations
init|=
literal|100
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--refresh"
argument_list|,
name|description
operator|=
literal|"percentage of bundle refresh vs restart"
argument_list|)
name|int
name|refresh
init|=
literal|20
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--excludes"
argument_list|,
name|description
operator|=
literal|"List of bundles (ids or symbolic names) to exclude"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|excludes
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"0"
argument_list|,
literal|"org.ops4j.pax.url.mvn"
argument_list|,
literal|"org.ops4j.pax.logging.pax-logging-api"
argument_list|,
literal|"org.ops4j.pax.logging.pax-logging-service"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|confirm
argument_list|(
name|session
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|BundleContext
name|bundleContext
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
specifier|final
name|FrameworkWiring
name|wiring
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|adapt
argument_list|(
name|FrameworkWiring
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|threads
argument_list|)
decl_stmt|;
specifier|final
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
index|[]
name|locks
init|=
operator|new
name|AtomicBoolean
index|[
name|bundles
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|locks
operator|.
name|length
condition|;
name|b
operator|++
control|)
block|{
name|locks
index|[
name|b
index|]
operator|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Avoid touching excluded bundles
if|if
condition|(
name|excludes
operator|.
name|contains
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|bundles
index|[
name|b
index|]
operator|.
name|getBundleId
argument_list|()
argument_list|)
argument_list|)
operator|||
name|excludes
operator|.
name|contains
argument_list|(
name|bundles
index|[
name|b
index|]
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Only touch active bundles
if|if
condition|(
name|bundles
index|[
name|b
index|]
operator|.
name|getState
argument_list|()
operator|!=
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
continue|continue;
block|}
comment|// Now set the lock to available
name|locks
index|[
name|b
index|]
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iterations
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|b
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|bundles
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|locks
index|[
name|b
index|]
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Only touch active bundles
if|if
condition|(
name|bundles
index|[
name|b
index|]
operator|.
name|getState
argument_list|()
operator|!=
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|refresh
condition|)
block|{
try|try
block|{
name|bundles
index|[
name|b
index|]
operator|.
name|update
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|wiring
operator|.
name|refreshBundles
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|bundles
index|[
name|b
index|]
argument_list|)
argument_list|,
operator|new
name|FrameworkListener
argument_list|()
block|{
specifier|public
name|void
name|frameworkEvent
parameter_list|(
name|FrameworkEvent
name|event
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|bundles
index|[
name|b
index|]
operator|.
name|start
argument_list|(
name|Bundle
operator|.
name|START_TRANSIENT
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|bundles
index|[
name|b
index|]
operator|.
name|stop
argument_list|(
name|Bundle
operator|.
name|STOP_TRANSIENT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|bundles
index|[
name|b
index|]
operator|.
name|start
argument_list|(
name|Bundle
operator|.
name|START_TRANSIENT
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|delay
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|locks
index|[
name|b
index|]
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Load test finished"
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|confirm
parameter_list|(
name|CommandSession
name|session
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|ConsoleReader
name|reader
init|=
operator|(
name|ConsoleReader
operator|)
name|session
operator|.
name|get
argument_list|(
literal|".jline.reader"
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"You are about to perform a start/stop/refresh load test on bundles.\nDo you wish to continue (yes/no): "
decl_stmt|;
name|String
name|str
init|=
name|reader
operator|.
name|readLine
argument_list|(
name|msg
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"no"
operator|.
name|equalsIgnoreCase
argument_list|(
name|str
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

