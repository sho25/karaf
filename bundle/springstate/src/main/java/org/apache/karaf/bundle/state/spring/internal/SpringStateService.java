begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|state
operator|.
name|spring
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|event
operator|.
name|OsgiBundleApplicationContextEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|event
operator|.
name|OsgiBundleApplicationContextListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|event
operator|.
name|OsgiBundleContextFailedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|event
operator|.
name|OsgiBundleContextRefreshedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|extender
operator|.
name|event
operator|.
name|BootstrappingDependencyEvent
import|;
end_import

begin_class
specifier|public
class|class
name|SpringStateService
implements|implements
name|OsgiBundleApplicationContextListener
implements|,
name|BundleListener
implements|,
name|BundleStateService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SpringStateService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|OsgiBundleApplicationContextEvent
argument_list|>
name|states
decl_stmt|;
specifier|public
name|SpringStateService
parameter_list|()
block|{
name|this
operator|.
name|states
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Long
argument_list|,
name|OsgiBundleApplicationContextEvent
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|BundleStateService
operator|.
name|NAME_SPRING_DM
return|;
block|}
specifier|public
name|BundleState
name|getState
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|OsgiBundleApplicationContextEvent
name|event
init|=
name|states
operator|.
name|get
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
decl_stmt|;
name|BundleState
name|state
init|=
name|mapEventToState
argument_list|(
name|event
argument_list|)
decl_stmt|;
return|return
operator|(
name|bundle
operator|.
name|getState
argument_list|()
operator|!=
name|Bundle
operator|.
name|ACTIVE
operator|)
condition|?
name|BundleState
operator|.
name|Unknown
else|:
name|state
return|;
block|}
specifier|public
name|String
name|getDiag
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|OsgiBundleApplicationContextEvent
name|event
init|=
name|states
operator|.
name|get
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|Throwable
name|ex
init|=
name|getException
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"Exception: \n"
argument_list|)
expr_stmt|;
name|addMessages
argument_list|(
name|message
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|message
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|addMessages
parameter_list|(
name|StringBuilder
name|message
parameter_list|,
name|Throwable
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|StringWriter
name|errorWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|errorWriter
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|errorWriter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Throwable
name|getException
parameter_list|(
name|OsgiBundleApplicationContextEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|OsgiBundleContextFailedEvent
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|OsgiBundleContextFailedEvent
name|failureEvent
init|=
operator|(
name|OsgiBundleContextFailedEvent
operator|)
name|event
decl_stmt|;
return|return
name|failureEvent
operator|.
name|getFailureCause
argument_list|()
return|;
block|}
specifier|public
name|void
name|onOsgiApplicationEvent
parameter_list|(
name|OsgiBundleApplicationContextEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|BundleState
name|state
init|=
name|mapEventToState
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Spring app state changed to "
operator|+
name|state
operator|+
literal|" for bundle "
operator|+
name|event
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|states
operator|.
name|put
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BundleState
name|mapEventToState
parameter_list|(
name|OsgiBundleApplicationContextEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
return|return
name|BundleState
operator|.
name|Unknown
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|BootstrappingDependencyEvent
condition|)
block|{
return|return
name|BundleState
operator|.
name|Waiting
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|OsgiBundleContextFailedEvent
condition|)
block|{
return|return
name|BundleState
operator|.
name|Failure
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|OsgiBundleContextRefreshedEvent
condition|)
block|{
return|return
name|BundleState
operator|.
name|Active
return|;
block|}
else|else
block|{
return|return
name|BundleState
operator|.
name|Unknown
return|;
block|}
block|}
specifier|public
name|void
name|bundleChanged
parameter_list|(
name|BundleEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|UNINSTALLED
condition|)
block|{
name|states
operator|.
name|remove
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

