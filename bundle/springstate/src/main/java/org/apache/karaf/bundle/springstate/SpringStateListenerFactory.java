begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|springstate
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleStateService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_class
specifier|public
class|class
name|SpringStateListenerFactory
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|BundleStateService
name|listener
decl_stmt|;
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|getListener
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|listener
operator|instanceof
name|Destroyable
condition|)
block|{
operator|(
operator|(
name|Destroyable
operator|)
name|listener
operator|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|BundleStateService
name|getListener
parameter_list|()
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
name|createListener
argument_list|()
expr_stmt|;
block|}
return|return
name|listener
return|;
block|}
specifier|private
name|BundleStateService
name|createListener
parameter_list|()
block|{
try|try
block|{
comment|// Use dynamic class loading to make sure we actually try to reload the class for
comment|// dynamic imports to kick in   if possible
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"org.apache.karaf.shell.bundles.SpringStateListenerFactory$SpringApplicationListener"
argument_list|)
decl_stmt|;
return|return
operator|(
name|BundleStateService
operator|)
name|cl
operator|.
name|getConstructor
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|bundleContext
argument_list|)
return|;
comment|//            return new SpringApplicationListener(bundleContext);
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Destroyable
block|{
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

