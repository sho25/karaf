begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|LogEventFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|internal
operator|.
name|layout
operator|.
name|PatternConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|internal
operator|.
name|layout
operator|.
name|PatternParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|logging
operator|.
name|spi
operator|.
name|PaxLoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|log
operator|.
name|LogLevel
import|;
end_import

begin_class
specifier|public
class|class
name|LogEventFormatterImpl
implements|implements
name|LogEventFormatter
block|{
specifier|private
name|String
name|pattern
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|LogLevel
argument_list|,
name|String
argument_list|>
name|level2Color
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|void
name|setColor
parameter_list|(
name|LogLevel
name|level
parameter_list|,
name|String
name|color
parameter_list|)
block|{
if|if
condition|(
name|color
operator|!=
literal|null
operator|&&
name|color
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|level2Color
operator|.
name|put
argument_list|(
name|level
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|level2Color
operator|.
name|remove
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.apache.karaf.log.core.internal.LogEventFormatter#format(org.ops4j.pax.logging.spi.PaxLoggingEvent, java.lang.String, boolean)      */
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|PaxLoggingEvent
name|event
parameter_list|,
name|String
name|overridenPattern
parameter_list|,
name|boolean
name|noColor
parameter_list|)
block|{
specifier|final
name|PatternConverter
name|cnv
init|=
operator|new
name|PatternParser
argument_list|(
name|overridenPattern
operator|!=
literal|null
condition|?
name|overridenPattern
else|:
name|pattern
argument_list|)
operator|.
name|parse
argument_list|()
decl_stmt|;
name|String
name|color
init|=
name|getColor
argument_list|(
name|event
argument_list|,
name|noColor
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|color
argument_list|(
name|sb
argument_list|,
name|color
argument_list|)
expr_stmt|;
for|for
control|(
name|PatternConverter
name|pc
init|=
name|cnv
init|;
name|pc
operator|!=
literal|null
condition|;
name|pc
operator|=
name|pc
operator|.
name|next
control|)
block|{
name|pc
operator|.
name|format
argument_list|(
name|sb
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getThrowableStrRep
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|r
range|:
name|event
operator|.
name|getThrowableStrRep
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|r
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|color
argument_list|(
name|sb
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|color
parameter_list|(
name|StringBuffer
name|sb
parameter_list|,
name|String
name|color
parameter_list|)
block|{
if|if
condition|(
name|color
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
literal|27
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getColor
parameter_list|(
name|PaxLoggingEvent
name|event
parameter_list|,
name|boolean
name|noColor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|noColor
operator|&&
name|event
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getLevel
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toString
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|level2Color
operator|.
name|get
argument_list|(
name|event
operator|.
name|getLevel
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

