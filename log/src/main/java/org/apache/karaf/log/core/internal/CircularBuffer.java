begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An array that only keeps the last N elements added  */
end_comment

begin_class
specifier|public
class|class
name|CircularBuffer
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|T
index|[]
name|elements
decl_stmt|;
specifier|private
specifier|transient
name|int
name|start
decl_stmt|;
specifier|private
specifier|transient
name|int
name|end
decl_stmt|;
specifier|private
specifier|transient
name|boolean
name|full
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxElements
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|public
name|CircularBuffer
parameter_list|(
name|int
name|size
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The size must be greater than 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|maxElements
operator|=
name|size
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|end
operator|==
name|start
condition|)
block|{
return|return
name|full
condition|?
name|maxElements
else|:
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|end
operator|<
name|start
condition|)
block|{
return|return
name|maxElements
operator|-
name|start
operator|+
name|end
return|;
block|}
else|else
block|{
return|return
name|end
operator|-
name|start
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|start
operator|=
literal|0
expr_stmt|;
name|end
operator|=
literal|0
expr_stmt|;
name|full
operator|=
literal|false
expr_stmt|;
name|elements
operator|=
operator|(
name|T
index|[]
operator|)
name|Array
operator|.
name|newInstance
argument_list|(
name|type
argument_list|,
name|maxElements
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|T
name|element
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|element
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Attempted to add null object to buffer"
argument_list|)
throw|;
block|}
if|if
condition|(
name|full
condition|)
block|{
name|increaseStart
argument_list|()
expr_stmt|;
block|}
name|elements
index|[
name|end
index|]
operator|=
name|element
expr_stmt|;
name|increaseEnd
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|increaseStart
parameter_list|()
block|{
name|start
operator|++
expr_stmt|;
if|if
condition|(
name|start
operator|>=
name|maxElements
condition|)
block|{
name|start
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|increaseEnd
parameter_list|()
block|{
name|end
operator|++
expr_stmt|;
if|if
condition|(
name|end
operator|>=
name|maxElements
condition|)
block|{
name|end
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|==
name|start
condition|)
block|{
name|full
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|T
argument_list|>
name|getElements
parameter_list|()
block|{
return|return
name|getElements
argument_list|(
name|size
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|T
argument_list|>
name|getElements
parameter_list|(
name|int
name|nb
parameter_list|)
block|{
name|int
name|s
init|=
name|size
argument_list|()
decl_stmt|;
name|nb
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|nb
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|T
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nb
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|elements
index|[
operator|(
name|i
operator|+
name|s
operator|-
name|nb
operator|+
name|start
operator|)
operator|%
name|maxElements
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

