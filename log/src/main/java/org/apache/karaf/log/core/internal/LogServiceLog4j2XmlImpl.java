begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
specifier|public
class|class
name|LogServiceLog4j2XmlImpl
implements|implements
name|LogServiceInternal
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ELEMENT_LOGGERS
init|=
literal|"Loggers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ELEMENT_ROOT
init|=
literal|"Root"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ELEMENT_LOGGER
init|=
literal|"Logger"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ATTRIBUTE_NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ATTRIBUTE_LEVEL
init|=
literal|"level"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ELEMENT_CONFIGURATION
init|=
literal|"Configuration"
decl_stmt|;
specifier|private
specifier|final
name|Path
name|path
decl_stmt|;
name|LogServiceLog4j2XmlImpl
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getLevel
parameter_list|(
name|String
name|logger
parameter_list|)
block|{
try|try
block|{
name|Document
name|doc
init|=
name|loadConfig
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|loggers
init|=
name|getLoggers
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|levels
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|e
range|:
name|loggers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|level
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|ATTRIBUTE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|!=
literal|null
operator|&&
operator|!
name|level
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|levels
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ALL_LOGGER
operator|.
name|equals
argument_list|(
name|logger
argument_list|)
condition|)
block|{
return|return
name|levels
return|;
block|}
name|String
name|l
init|=
name|logger
decl_stmt|;
name|String
name|val
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|val
operator|=
name|levels
operator|.
name|get
argument_list|(
name|l
operator|!=
literal|null
condition|?
name|l
else|:
name|ROOT_LOGGER
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
operator|||
name|l
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|logger
argument_list|,
name|val
argument_list|)
return|;
block|}
name|int
name|idx
init|=
name|l
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|l
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|l
operator|=
name|l
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to retrieve level for logger"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setLevel
parameter_list|(
name|String
name|logger
parameter_list|,
name|String
name|level
parameter_list|)
block|{
try|try
block|{
name|Document
name|doc
init|=
name|loadConfig
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|loggers
init|=
name|getLoggers
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Element
name|element
init|=
name|loggers
operator|.
name|get
argument_list|(
name|logger
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Level
operator|.
name|isDefault
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|element
operator|.
name|removeAttribute
argument_list|(
name|ATTRIBUTE_LEVEL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|element
operator|.
name|setAttribute
argument_list|(
name|ATTRIBUTE_LEVEL
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|Level
operator|.
name|isDefault
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|Element
name|docE
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Element
name|docLoggers
init|=
operator|(
name|Element
operator|)
name|docE
operator|.
name|getElementsByTagName
argument_list|(
name|ELEMENT_LOGGERS
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|root
init|=
name|ROOT_LOGGER
operator|.
name|equals
argument_list|(
name|logger
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
condition|)
block|{
name|element
operator|=
name|doc
operator|.
name|createElement
argument_list|(
name|ELEMENT_ROOT
argument_list|)
expr_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
name|ATTRIBUTE_LEVEL
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|element
operator|=
name|doc
operator|.
name|createElement
argument_list|(
name|ELEMENT_LOGGER
argument_list|)
expr_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
name|ATTRIBUTE_NAME
argument_list|,
name|logger
argument_list|)
expr_stmt|;
name|element
operator|.
name|setAttribute
argument_list|(
name|ATTRIBUTE_LEVEL
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
name|insertIndented
argument_list|(
name|docLoggers
argument_list|,
name|element
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|path
argument_list|,
name|StandardOpenOption
operator|.
name|WRITE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
init|)
block|{
name|TransformerFactory
name|tFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|tFactory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
try|try
block|{
name|tFactory
operator|.
name|setAttribute
argument_list|(
name|XMLConstants
operator|.
name|ACCESS_EXTERNAL_DTD
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tFactory
operator|.
name|setAttribute
argument_list|(
name|XMLConstants
operator|.
name|ACCESS_EXTERNAL_STYLESHEET
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|Transformer
name|transformer
init|=
name|tFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to set level for logger"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Insert the given node at beginning or end of the given node,      * indenting it as needed.      */
specifier|static
name|void
name|insertIndented
parameter_list|(
name|Element
name|loggers
parameter_list|,
name|Element
name|element
parameter_list|,
name|boolean
name|atBeginning
parameter_list|)
block|{
name|NodeList
name|loggerElements
init|=
name|loggers
operator|.
name|getElementsByTagName
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|atBeginning
operator|&&
name|loggerElements
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Node
name|insertBefore
init|=
name|loggers
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|insertBefore
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|insertBefore
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|String
name|indent
init|=
name|loggers
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|loggers
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|indent
argument_list|)
decl_stmt|;
name|loggers
operator|.
name|insertBefore
argument_list|(
name|node
argument_list|,
name|insertBefore
argument_list|)
expr_stmt|;
block|}
name|loggers
operator|.
name|insertBefore
argument_list|(
name|element
argument_list|,
name|insertBefore
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loggers
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Node
name|insertAfter
init|=
name|loggerElements
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|?
name|loggerElements
operator|.
name|item
argument_list|(
name|loggerElements
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|insertAfter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|insertAfter
operator|.
name|getPreviousSibling
argument_list|()
operator|!=
literal|null
operator|&&
name|insertAfter
operator|.
name|getPreviousSibling
argument_list|()
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|String
name|indent
init|=
name|insertAfter
operator|.
name|getPreviousSibling
argument_list|()
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|loggers
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|indent
argument_list|)
decl_stmt|;
if|if
condition|(
name|insertAfter
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|loggers
operator|.
name|insertBefore
argument_list|(
name|node
argument_list|,
name|insertAfter
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
name|insertAfter
operator|=
name|node
expr_stmt|;
block|}
else|else
block|{
name|loggers
operator|.
name|appendChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|insertAfter
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|loggers
operator|.
name|insertBefore
argument_list|(
name|element
argument_list|,
name|insertAfter
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loggers
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|loggers
operator|.
name|getPreviousSibling
argument_list|()
operator|!=
literal|null
operator|&&
name|loggers
operator|.
name|getPreviousSibling
argument_list|()
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|String
name|indent
init|=
name|loggers
operator|.
name|getPreviousSibling
argument_list|()
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|String
name|prev
init|=
name|indent
decl_stmt|;
if|if
condition|(
name|indent
operator|.
name|endsWith
argument_list|(
literal|"\t"
argument_list|)
condition|)
block|{
name|indent
operator|+=
literal|"\t"
expr_stmt|;
block|}
else|else
block|{
name|int
name|nl
init|=
name|indent
operator|.
name|lastIndexOf
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|nl
operator|>=
literal|0
condition|)
block|{
name|indent
operator|=
name|indent
operator|+
name|indent
operator|.
name|substring
argument_list|(
name|nl
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|indent
operator|+=
literal|"\t"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|loggers
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|loggers
operator|.
name|getPreviousSibling
argument_list|()
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
condition|)
block|{
name|loggers
operator|.
name|removeChild
argument_list|(
name|loggers
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|loggers
operator|.
name|appendChild
argument_list|(
name|loggers
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|indent
argument_list|)
argument_list|)
expr_stmt|;
name|loggers
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|loggers
operator|.
name|appendChild
argument_list|(
name|loggers
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|prev
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loggers
operator|.
name|appendChild
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
name|Document
name|loadConfig
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
return|return
name|loadConfig
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|is
argument_list|)
return|;
block|}
block|}
specifier|static
name|Document
name|loadConfig
parameter_list|(
name|String
name|id
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
specifier|final
name|InputSource
name|source
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|source
operator|.
name|setPublicId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setExpandEntityReferences
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|factory
argument_list|,
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|factory
argument_list|,
literal|"http://xml.org/sax/features/external-general-entities"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|factory
argument_list|,
literal|"http://xml.org/sax/features/external-parameter-entities"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|factory
argument_list|,
literal|"http://apache.org/xml/features/nonvalidating/load-external-dtd"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|factory
argument_list|,
literal|"http://apache.org/xml/features/xinclude/fixup-base-uris"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setFeature
argument_list|(
name|factory
argument_list|,
literal|"http://apache.org/xml/features/xinclude/fixup-language"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tryCall
argument_list|(
parameter_list|()
lambda|->
name|factory
operator|.
name|setXIncludeAware
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|documentBuilder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|documentBuilder
operator|.
name|parse
argument_list|(
name|source
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|setFeature
parameter_list|(
name|DocumentBuilderFactory
name|factory
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|b
parameter_list|)
block|{
name|tryCall
argument_list|(
parameter_list|()
lambda|->
name|factory
operator|.
name|setFeature
argument_list|(
name|name
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
interface|interface
name|RunnableWithException
block|{
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
specifier|static
name|void
name|tryCall
parameter_list|(
name|RunnableWithException
name|c
parameter_list|)
block|{
try|try
block|{
name|c
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|getLoggers
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|loggers
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Element
name|docE
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ELEMENT_CONFIGURATION
operator|.
name|equals
argument_list|(
name|docE
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Xml root document should be "
operator|+
name|ELEMENT_CONFIGURATION
argument_list|)
throw|;
block|}
name|NodeList
name|children
init|=
name|docE
operator|.
name|getElementsByTagName
argument_list|(
name|ELEMENT_LOGGERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|NodeList
name|loggersList
init|=
name|children
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|loggersList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|loggersList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
if|if
condition|(
name|ELEMENT_ROOT
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|loggers
operator|.
name|put
argument_list|(
name|ROOT_LOGGER
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ELEMENT_LOGGER
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|getAttribute
argument_list|(
name|ATTRIBUTE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|loggers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|loggers
return|;
block|}
block|}
end_class

end_unit

