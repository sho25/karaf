begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|log
operator|.
name|core
operator|.
name|internal
operator|.
name|layout
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|FieldPosition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParsePosition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_comment
comment|/**  * Copied from log4j  */
end_comment

begin_comment
comment|// Contributors: Arndt Schoenewald<arndt@ibm23093i821.mc.schoenewald.de>
end_comment

begin_comment
comment|/**    Formats a {@link Date} in the format "yyyy-MM-dd HH:mm:ss,SSS" for example    "1999-11-27 15:49:37,459".<p>Refer to the<a    href=http://www.cl.cam.ac.uk/~mgk25/iso-time.html>summary of the    International Standard Date and Time Notation</a> for more    information on this format.     @since 0.7.5 */
end_comment

begin_class
specifier|public
class|class
name|ISO8601DateFormat
extends|extends
name|AbsoluteTimeDateFormat
block|{
specifier|public
name|ISO8601DateFormat
parameter_list|()
block|{   }
specifier|public
name|ISO8601DateFormat
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|)
block|{
name|super
argument_list|(
name|timeZone
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|private
name|long
name|lastTime
decl_stmt|;
specifier|static
specifier|private
name|char
index|[]
name|lastTimeString
init|=
operator|new
name|char
index|[
literal|20
index|]
decl_stmt|;
comment|/**      Appends a date in the format "YYYY-mm-dd HH:mm:ss,SSS"      to<code>sbuf</code>. For example: "1999-11-27 15:49:37,459".       @param sbuf the<code>StringBuffer</code> to write to   */
specifier|public
name|StringBuffer
name|format
parameter_list|(
name|Date
name|date
parameter_list|,
name|StringBuffer
name|sbuf
parameter_list|,
name|FieldPosition
name|fieldPosition
parameter_list|)
block|{
name|long
name|now
init|=
name|date
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|millis
init|=
call|(
name|int
call|)
argument_list|(
name|now
operator|%
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|now
operator|-
name|millis
operator|)
operator|!=
name|lastTime
condition|)
block|{
comment|// We reach this point at most once per second
comment|// across all threads instead of each time format()
comment|// is called. This saves considerable CPU time.
name|calendar
operator|.
name|setTime
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|sbuf
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|year
argument_list|)
expr_stmt|;
name|String
name|month
decl_stmt|;
switch|switch
condition|(
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|JANUARY
case|:
name|month
operator|=
literal|"-01-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FEBRUARY
case|:
name|month
operator|=
literal|"-02-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|MARCH
case|:
name|month
operator|=
literal|"-03-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|APRIL
case|:
name|month
operator|=
literal|"-04-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|MAY
case|:
name|month
operator|=
literal|"-05-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|JUNE
case|:
name|month
operator|=
literal|"-06-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|JULY
case|:
name|month
operator|=
literal|"-07-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|AUGUST
case|:
name|month
operator|=
literal|"-08-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SEPTEMBER
case|:
name|month
operator|=
literal|"-09-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|OCTOBER
case|:
name|month
operator|=
literal|"-10-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|NOVEMBER
case|:
name|month
operator|=
literal|"-11-"
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|DECEMBER
case|:
name|month
operator|=
literal|"-12-"
expr_stmt|;
break|break;
default|default:
name|month
operator|=
literal|"-NA-"
expr_stmt|;
break|break;
block|}
name|sbuf
operator|.
name|append
argument_list|(
name|month
argument_list|)
expr_stmt|;
name|int
name|day
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|day
operator|<
literal|10
condition|)
name|sbuf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|day
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|int
name|hour
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|hour
operator|<
literal|10
condition|)
block|{
name|sbuf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|sbuf
operator|.
name|append
argument_list|(
name|hour
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|int
name|mins
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|mins
operator|<
literal|10
condition|)
block|{
name|sbuf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|sbuf
operator|.
name|append
argument_list|(
name|mins
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|int
name|secs
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|)
decl_stmt|;
if|if
condition|(
name|secs
operator|<
literal|10
condition|)
block|{
name|sbuf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|sbuf
operator|.
name|append
argument_list|(
name|secs
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
comment|// store the time string for next time to avoid recomputation
name|sbuf
operator|.
name|getChars
argument_list|(
name|start
argument_list|,
name|sbuf
operator|.
name|length
argument_list|()
argument_list|,
name|lastTimeString
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lastTime
operator|=
name|now
operator|-
name|millis
expr_stmt|;
block|}
else|else
block|{
name|sbuf
operator|.
name|append
argument_list|(
name|lastTimeString
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|millis
operator|<
literal|100
condition|)
name|sbuf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|millis
operator|<
literal|10
condition|)
name|sbuf
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|sbuf
operator|.
name|append
argument_list|(
name|millis
argument_list|)
expr_stmt|;
return|return
name|sbuf
return|;
block|}
comment|/**     This method does not do anything but return<code>null</code>.    */
specifier|public
name|Date
name|parse
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|s
parameter_list|,
name|ParsePosition
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

