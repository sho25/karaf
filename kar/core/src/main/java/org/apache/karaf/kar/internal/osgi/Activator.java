begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|internal
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|KarService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|internal
operator|.
name|KarServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|internal
operator|.
name|KarsMBeanImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|SingleServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
implements|,
name|ManagedService
implements|,
name|SingleServiceTracker
operator|.
name|SingleServiceListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|scheduled
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|configuration
decl_stmt|;
specifier|private
name|ServiceRegistration
argument_list|<
name|KarService
argument_list|>
name|registration
decl_stmt|;
specifier|private
name|ServiceRegistration
name|mbeanRegistration
decl_stmt|;
specifier|private
name|ServiceRegistration
argument_list|<
name|ManagedService
argument_list|>
name|managedServiceRegistration
decl_stmt|;
specifier|private
name|SingleServiceTracker
argument_list|<
name|FeaturesService
argument_list|>
name|featuresServiceTracker
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|bundleContext
operator|=
name|context
expr_stmt|;
name|scheduled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"org.apache.karaf.kar"
argument_list|)
expr_stmt|;
name|managedServiceRegistration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|ManagedService
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|featuresServiceTracker
operator|=
operator|new
name|SingleServiceTracker
argument_list|<
name|FeaturesService
argument_list|>
argument_list|(
name|bundleContext
argument_list|,
name|FeaturesService
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|featuresServiceTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|scheduled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|featuresServiceTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|managedServiceRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updated
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|this
operator|.
name|configuration
operator|=
name|properties
expr_stmt|;
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceFound
parameter_list|()
block|{
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceLost
parameter_list|()
block|{
name|reconfigure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceReplaced
parameter_list|()
block|{
name|reconfigure
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|reconfigure
parameter_list|()
block|{
if|if
condition|(
name|scheduled
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|scheduled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
try|try
block|{
name|doStart
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error starting management layer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|FeaturesService
name|featuresService
init|=
name|featuresServiceTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
init|=
name|configuration
decl_stmt|;
if|if
condition|(
name|featuresService
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|noAutoRefreshBundles
init|=
name|getBoolean
argument_list|(
name|config
argument_list|,
literal|"noAutoRefreshBundles"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|KarServiceImpl
name|karService
init|=
operator|new
name|KarServiceImpl
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|,
name|featuresService
argument_list|)
decl_stmt|;
name|karService
operator|.
name|setNoAutoRefreshBundles
argument_list|(
name|noAutoRefreshBundles
argument_list|)
expr_stmt|;
name|registration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|KarService
operator|.
name|class
argument_list|,
name|karService
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|KarsMBeanImpl
name|mbean
init|=
operator|new
name|KarsMBeanImpl
argument_list|()
decl_stmt|;
name|mbean
operator|.
name|setKarService
argument_list|(
name|karService
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"jmx.objectname"
argument_list|,
literal|"org.apache.karaf:type=kar,name="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
argument_list|)
expr_stmt|;
name|mbeanRegistration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|getInterfaceNames
argument_list|(
name|mbean
argument_list|)
argument_list|,
name|mbean
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotCompliantMBeanException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error creating Kars mbean"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
if|if
condition|(
name|mbeanRegistration
operator|!=
literal|null
condition|)
block|{
name|mbeanRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|mbeanRegistration
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|registration
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|String
index|[]
name|getInterfaceNames
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
init|=
name|object
operator|.
name|getClass
argument_list|()
init|;
name|cl
operator|!=
name|Object
operator|.
name|class
condition|;
name|cl
operator|=
name|cl
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
name|addSuperInterfaces
argument_list|(
name|names
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
return|return
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|void
name|addSuperInterfaces
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|Class
name|clazz
parameter_list|)
block|{
for|for
control|(
name|Class
name|cl
range|:
name|clazz
operator|.
name|getInterfaces
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|addSuperInterfaces
argument_list|(
name|names
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|getBoolean
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|val
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|def
return|;
block|}
block|}
end_class

end_unit

