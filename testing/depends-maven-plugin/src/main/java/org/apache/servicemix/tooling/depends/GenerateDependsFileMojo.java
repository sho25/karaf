begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|tooling
operator|.
name|depends
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|factory
operator|.
name|ArtifactFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|repository
operator|.
name|ArtifactRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|DefaultArtifactCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_comment
comment|/**  * Generates the dependencies properties file  *  * @version $Id: $  * @goal generate-depends-file  * @phase generate-resources  * @requiresDependencyResolution test  * @description Generates the dependencies properties file  */
end_comment

begin_class
specifier|public
class|class
name|GenerateDependsFileMojo
extends|extends
name|AbstractMojo
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
comment|/**      * The maven project.      *      * @parameter expression="${project}"      * @required      * @readonly      */
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      *      * @parameter expression='true'      * @required      */
specifier|protected
name|boolean
name|recursive
decl_stmt|;
comment|/**      * The file to generate      *      * @parameter default-value="${project.build.directory}/classes/META-INF/maven/dependencies.properties"      */
specifier|private
name|File
name|outputFile
decl_stmt|;
comment|/**      * @parameter default-value="${localRepository}"      */
specifier|protected
name|ArtifactRepository
name|localRepo
decl_stmt|;
comment|/**      * @parameter default-value="${project.remoteArtifactRepositories}"      */
specifier|protected
name|List
name|remoteRepos
decl_stmt|;
comment|/**      * @component      */
specifier|protected
name|ArtifactMetadataSource
name|artifactMetadataSource
decl_stmt|;
comment|/**      * @component      */
specifier|protected
name|ArtifactResolver
name|resolver
decl_stmt|;
specifier|protected
name|ArtifactCollector
name|collector
init|=
operator|new
name|DefaultArtifactCollector
argument_list|()
decl_stmt|;
comment|/**      * @component      */
specifier|protected
name|ArtifactFactory
name|factory
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
name|PrintStream
name|printer
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
decl_stmt|;
if|if
condition|(
operator|!
name|recursive
condition|)
block|{
name|dependencies
operator|=
name|project
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|artifacts
init|=
name|project
operator|.
name|getArtifacts
argument_list|()
decl_stmt|;
name|dependencies
operator|=
operator|new
name|ArrayList
argument_list|<
name|Dependency
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Artifact
name|a
range|:
name|artifacts
control|)
block|{
name|Dependency
name|dep
init|=
operator|new
name|Dependency
argument_list|()
decl_stmt|;
name|dep
operator|.
name|setGroupId
argument_list|(
name|a
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setArtifactId
argument_list|(
name|a
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setVersion
argument_list|(
name|a
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setClassifier
argument_list|(
name|a
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setType
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|dep
operator|.
name|setScope
argument_list|(
name|a
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|dependencies
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|dependencies
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Dependency
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Dependency
name|o1
parameter_list|,
name|Dependency
name|o2
parameter_list|)
block|{
name|int
name|result
init|=
name|o1
operator|.
name|getGroupId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getGroupId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|o1
operator|.
name|getArtifactId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|o1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|o1
operator|.
name|getClassifier
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|o2
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|o2
operator|.
name|getClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|o1
operator|.
name|getClassifier
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getClassifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
comment|// We don't consider the version range in the comparison, just the resolved version
name|result
operator|=
name|o1
operator|.
name|getVersion
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|populateProperties
argument_list|(
name|printer
argument_list|,
name|dependencies
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created: "
operator|+
name|outputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to create dependencies file: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Failed to close: "
operator|+
name|outputFile
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|populateProperties
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|List
argument_list|<
name|Dependency
argument_list|>
name|dependencies
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"# Project dependencies generated by the Apache ServiceMix Maven Plugin"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"# Generated at: "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"groupId = "
operator|+
name|project
operator|.
name|getGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"artifactId = "
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"version = "
operator|+
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|project
operator|.
name|getGroupId
argument_list|()
operator|+
name|SEPARATOR
operator|+
name|project
operator|.
name|getArtifactId
argument_list|()
operator|+
name|SEPARATOR
operator|+
literal|"version = "
operator|+
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"# dependencies"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Iterator
name|iterator
init|=
name|dependencies
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|dependency
operator|.
name|getGroupId
argument_list|()
operator|+
name|SEPARATOR
operator|+
name|dependency
operator|.
name|getArtifactId
argument_list|()
operator|+
name|SEPARATOR
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"version = "
operator|+
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|classifier
init|=
name|dependency
operator|.
name|getClassifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"classifier = "
operator|+
name|classifier
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"type = "
operator|+
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"scope = "
operator|+
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Dependency: "
operator|+
name|dependency
operator|+
literal|" classifier: "
operator|+
name|classifier
operator|+
literal|" type: "
operator|+
name|dependency
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

