begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2002-2007 the original author or authors.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|testing
operator|.
name|support
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Simple counting class which can be incremented or decremented in a  * synchronized manner. This class can be used as a synchronization mechanism  * between threads mainly though {@link #waitForZero(long)} method.  *  * The main usage of the class is to allow a master thread, to know when other  * threads (slaves) have passed a certain point in execution.  *  *<p/> As opposed to a Barrier or a Semaphore, this class should be used only  * with 1 waiting thread (a master) and any number of slave threads.  *  *<pre style="code">  * Thread 1:  *  synchronized(counter) {  *    counter.increment();  *    thread2.start();  *    counter.increment();  *    thread3.start();  *  *    // wait 1 second for other threads to complete  *    counter.waitForZero(1000);  * }  *  * Thread 2:  *  // do some work  *  counter.decrement();  *  * Thread 3:  *  // do some work  *  counter.decrement();  *  *</pre>  *  *<p/> Mainly for usage inside the framework. All methods are thread-safe  * however for the master/slave pattern, synchronized blocks are recommended as  * multiple operations have to be executed at once.  *  * @author Costin Leau  *  */
end_comment

begin_class
specifier|public
class|class
name|Counter
block|{
specifier|private
name|int
name|counter
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Counter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
comment|/** 	 * Create counter with a given name. 	 * @param name counter name 	 */
specifier|public
name|Counter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/** 	 * Increment the counter value. 	 */
specifier|public
specifier|synchronized
name|void
name|increment
parameter_list|()
block|{
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"counter ["
operator|+
name|name
operator|+
literal|"] incremented to "
operator|+
name|counter
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Decrement the counter value. 	 */
specifier|public
specifier|synchronized
name|void
name|decrement
parameter_list|()
block|{
name|counter
operator|--
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"counter ["
operator|+
name|name
operator|+
literal|"] decremented to "
operator|+
name|counter
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|decrementAndWait
parameter_list|(
name|long
name|timeToWait
parameter_list|)
block|{
name|decrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|counter
operator|>
literal|0
condition|)
return|return
name|waitForZero
argument_list|(
name|timeToWait
argument_list|)
return|;
return|return
literal|true
return|;
block|}
comment|/** 	 * Check if the counter value is zero. 	 * @return true if value is equal or below zero, false otherwise. 	 */
specifier|public
specifier|synchronized
name|boolean
name|isZero
parameter_list|()
block|{
return|return
name|is
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|is
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|counter
operator|==
name|value
return|;
block|}
comment|/** 	 * Return the counter value. 	 * 	 * @return the counter value. 	 */
specifier|public
specifier|synchronized
name|int
name|getValue
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|counter
return|;
block|}
comment|/** 	 * Specialized method which waits for 0. Identical to waitFor(0, waitTime). 	 * 	 * @see #waitFor(int, long) 	 * @param waitTime 	 * @return true if the waiting timed out, false otherwise 	 */
specifier|public
specifier|synchronized
name|boolean
name|waitForZero
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
return|return
name|waitFor
argument_list|(
literal|0
argument_list|,
name|waitTime
argument_list|)
return|;
block|}
comment|/** 	 * Wait maximum the givem amount of time, for the counter to reach the given 	 * value.. This mechanism relies on {@link Object#wait(long)} and 	 * {@link Object#notify()} mechanism to work appropriately. Please see the 	 * class javadoc for more info. 	 * 	 *<p/> This method will stop waiting and return true if the thread 	 * is interrupted. 	 * 	 * @param value the value to wait for 	 * @param waitTime the time (in miliseconds) to wait for zero value 	 * @return true if the waiting timed out, false otherwise 	 */
specifier|public
specifier|synchronized
name|boolean
name|waitFor
parameter_list|(
name|int
name|value
parameter_list|,
name|long
name|waitTime
parameter_list|)
block|{
name|boolean
name|timedout
init|=
literal|false
decl_stmt|;
name|long
name|remainingTime
init|=
name|waitTime
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|counter
operator|>
name|value
operator|&&
operator|!
name|timedout
condition|)
block|{
comment|// start waiting
try|try
block|{
name|this
operator|.
name|wait
argument_list|(
name|remainingTime
argument_list|)
expr_stmt|;
comment|// compute the remaining time
name|remainingTime
operator|=
name|waitTime
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
expr_stmt|;
name|timedout
operator|=
name|remainingTime
operator|<=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|timedout
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|timedout
return|;
block|}
block|}
end_class

end_unit

