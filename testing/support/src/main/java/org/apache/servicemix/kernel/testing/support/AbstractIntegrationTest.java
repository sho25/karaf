begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|testing
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|FileSystemResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|test
operator|.
name|AbstractConfigurableBundleCreatorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|test
operator|.
name|provisioning
operator|.
name|ArtifactLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|util
operator|.
name|OsgiFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|util
operator|.
name|OsgiListenerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|AbstractIntegrationTest
extends|extends
name|AbstractConfigurableBundleCreatorTests
block|{
static|static
block|{
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"target/smx4"
argument_list|)
decl_stmt|;
name|f
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"servicemix.home"
argument_list|,
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"servicemix.base"
argument_list|,
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.servicemix.filemonitor.configDir"
argument_list|,
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"etc"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.servicemix.filemonitor.monitorDir"
argument_list|,
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"deploy"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.servicemix.filemonitor.generatedJarDir"
argument_list|,
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"data/generate-bundles"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"bundles.configuration.location"
argument_list|,
operator|new
name|File
argument_list|(
literal|"src/test/conf"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.osgi.vendor.framework"
argument_list|,
literal|"org.apache.servicemix.kernel.testing.support"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
literal|"target/test-classes/log4j.properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{}
block|}
specifier|private
name|Properties
name|dependencies
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|getPlatformName
parameter_list|()
block|{
name|String
name|systemProperty
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|OSGI_FRAMEWORK_SELECTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|logger
operator|.
name|trace
argument_list|(
literal|"system property ["
operator|+
name|OSGI_FRAMEWORK_SELECTOR
operator|+
literal|"] has value="
operator|+
name|systemProperty
argument_list|)
expr_stmt|;
return|return
operator|(
name|systemProperty
operator|==
literal|null
condition|?
name|SmxKernelPlatform
operator|.
name|class
operator|.
name|getName
argument_list|()
else|:
name|systemProperty
operator|)
return|;
block|}
specifier|protected
name|String
name|getBundle
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
return|return
name|groupId
operator|+
literal|","
operator|+
name|artifactId
operator|+
literal|","
operator|+
name|getBundleVersion
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getBundleVersion
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
if|if
condition|(
name|dependencies
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
argument_list|,
literal|"target/classes/META-INF/maven/dependencies.properties"
argument_list|)
decl_stmt|;
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|prop
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|dependencies
operator|=
name|prop
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to load dependencies informations"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|version
init|=
name|dependencies
operator|.
name|getProperty
argument_list|(
name|groupId
operator|+
literal|"/"
operator|+
name|artifactId
operator|+
literal|"/version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to find dependency information for: "
operator|+
name|groupId
operator|+
literal|"/"
operator|+
name|artifactId
operator|+
literal|"/version"
argument_list|)
throw|;
block|}
return|return
name|version
return|;
block|}
specifier|protected
name|String
index|[]
name|getTestFrameworkBundlesNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
name|getBundle
argument_list|(
literal|"org.apache.geronimo.specs"
argument_list|,
literal|"geronimo-servlet_2.5_spec"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.felix"
argument_list|,
literal|"org.osgi.compendium"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.felix"
argument_list|,
literal|"org.apache.felix.configadmin"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.ops4j.pax.logging"
argument_list|,
literal|"pax-logging-api"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.ops4j.pax.logging"
argument_list|,
literal|"pax-logging-service"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.servicemix.specs"
argument_list|,
literal|"org.apache.servicemix.specs.jaxp-api-1.3"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.servicemix.specs"
argument_list|,
literal|"org.apache.servicemix.specs.stax-api-1.0"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.jaxp-ri"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.aopalliance"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.asm"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.junit"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework"
argument_list|,
literal|"spring-beans"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework"
argument_list|,
literal|"spring-core"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework"
argument_list|,
literal|"spring-context"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework"
argument_list|,
literal|"spring-aop"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework"
argument_list|,
literal|"spring-test"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework.osgi"
argument_list|,
literal|"spring-osgi-core"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework.osgi"
argument_list|,
literal|"spring-osgi-io"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework.osgi"
argument_list|,
literal|"spring-osgi-extender"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework.osgi"
argument_list|,
literal|"spring-osgi-test"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.springframework.osgi"
argument_list|,
literal|"spring-osgi-annotation"
argument_list|)
block|,
name|getBundle
argument_list|(
literal|"org.apache.servicemix.kernel.testing"
argument_list|,
literal|"org.apache.servicemix.kernel.testing.support"
argument_list|)
block|, 		}
return|;
block|}
specifier|protected
name|Bundle
name|installBundle
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|version
init|=
name|getBundleVersion
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|)
decl_stmt|;
name|File
name|loc
init|=
name|localMavenBundle
argument_list|(
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|classifier
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|bundleContext
operator|.
name|installBundle
argument_list|(
name|loc
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|protected
name|Resource
name|locateBundle
parameter_list|(
name|String
name|bundleId
parameter_list|)
block|{
name|Assert
operator|.
name|hasText
argument_list|(
name|bundleId
argument_list|,
literal|"bundleId should not be empty"
argument_list|)
expr_stmt|;
comment|// parse the String
name|String
index|[]
name|artifactId
init|=
name|StringUtils
operator|.
name|commaDelimitedListToStringArray
argument_list|(
name|bundleId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|artifactId
operator|.
name|length
operator|>=
literal|3
argument_list|,
literal|"the CSV string "
operator|+
name|bundleId
operator|+
literal|" contains too few values"
argument_list|)
expr_stmt|;
comment|// TODO: add a smarter mechanism which can handle 1 or 2 values CSVs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artifactId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|artifactId
index|[
name|i
index|]
operator|=
name|StringUtils
operator|.
name|trimWhitespace
argument_list|(
name|artifactId
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|File
name|f
decl_stmt|;
if|if
condition|(
name|artifactId
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|f
operator|=
name|localMavenBundle
argument_list|(
name|artifactId
index|[
literal|0
index|]
argument_list|,
name|artifactId
index|[
literal|1
index|]
argument_list|,
name|artifactId
index|[
literal|2
index|]
argument_list|,
literal|null
argument_list|,
name|ArtifactLocator
operator|.
name|DEFAULT_ARTIFACT_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|localMavenBundle
argument_list|(
name|artifactId
index|[
literal|0
index|]
argument_list|,
name|artifactId
index|[
literal|1
index|]
argument_list|,
name|artifactId
index|[
literal|2
index|]
argument_list|,
literal|null
argument_list|,
name|artifactId
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FileSystemResource
argument_list|(
name|f
argument_list|)
return|;
block|}
specifier|protected
name|File
name|localMavenBundle
parameter_list|(
name|String
name|groupId
parameter_list|,
name|String
name|artifact
parameter_list|,
name|String
name|version
parameter_list|,
name|String
name|classifier
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|String
name|defaultHome
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
argument_list|,
literal|".m2/repository"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|repositoryHome
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"localRepository"
argument_list|,
name|defaultHome
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuffer
name|location
init|=
operator|new
name|StringBuffer
argument_list|(
name|groupId
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
decl_stmt|;
name|location
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
name|getSnapshot
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
name|location
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
name|location
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|location
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
operator|new
name|File
argument_list|(
name|repositoryHome
argument_list|,
name|location
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|getSnapshot
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|isTimestamped
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
name|version
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|version
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|,
name|version
operator|.
name|lastIndexOf
argument_list|(
literal|'-'
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
operator|+
literal|"-SNAPSHOT"
return|;
block|}
return|return
name|version
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isTimestamped
parameter_list|(
name|String
name|version
parameter_list|)
block|{
return|return
name|version
operator|.
name|matches
argument_list|(
literal|".+-\\d\\d\\d\\d\\d\\d\\d\\d\\.\\d\\d\\d\\d\\d\\d-\\d+"
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isSnapshot
parameter_list|(
name|String
name|version
parameter_list|)
block|{
return|return
name|version
operator|.
name|matches
argument_list|(
literal|".+-SNAPSHOT"
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getOsgiService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getOsgiService
argument_list|(
name|type
argument_list|,
name|DEFAULT_WAIT_TIME
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getOsgiService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
comment|// translate from seconds to miliseconds
name|long
name|time
init|=
name|timeout
operator|*
literal|1000
decl_stmt|;
comment|// use the counter to make sure the threads block
specifier|final
name|Counter
name|counter
init|=
operator|new
name|Counter
argument_list|(
literal|"waitForOsgiService on bnd="
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|counter
operator|.
name|increment
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceListener
name|listener
init|=
operator|new
name|ServiceListener
argument_list|()
block|{
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|REGISTERED
condition|)
block|{
name|services
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|event
operator|.
name|getServiceReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|String
name|filter
init|=
name|OsgiFilterUtils
operator|.
name|unifyFilter
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|OsgiListenerUtils
operator|.
name|addServiceListener
argument_list|(
name|bundleContext
argument_list|,
name|listener
argument_list|,
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|logger
operator|.
name|debug
argument_list|(
literal|"start waiting for OSGi service="
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|counter
operator|.
name|waitForZero
argument_list|(
name|time
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"waiting for OSGi service="
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" timed out"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Gave up waiting for OSGi service '"
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|"' to be created"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"found OSGi service="
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|services
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
comment|// inform waiting thread
name|bundleContext
operator|.
name|removeServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|checkBundleStarted
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundleContext
operator|.
name|getBundles
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Bundle
name|b
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Bundle '"
operator|+
name|name
operator|+
literal|"' is not active"
argument_list|,
name|Bundle
operator|.
name|ACTIVE
argument_list|,
name|b
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Bundle '"
operator|+
name|name
operator|+
literal|"' not found"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

