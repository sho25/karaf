begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|testing
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandlerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|test
operator|.
name|platform
operator|.
name|FelixPlatform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|test
operator|.
name|platform
operator|.
name|OsgiPlatform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|ClassUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|main
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|Felix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|util
operator|.
name|SecureAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|misc
operator|.
name|CompoundEnumeration
import|;
end_import

begin_class
specifier|public
class|class
name|SmxKernelPlatform
implements|implements
name|OsgiPlatform
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FelixPlatform
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FELIX_CONF_FILE
init|=
literal|"felix.config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FELIX_CONFIG_PROPERTY
init|=
literal|"felix.config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FELIX_PROFILE_DIR_PROPERTY
init|=
literal|"felix.cache.profiledir"
decl_stmt|;
specifier|private
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|Object
name|platform
decl_stmt|;
specifier|private
name|File
name|felixStorageDir
decl_stmt|;
specifier|private
name|Properties
name|configurationProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|protected
name|Properties
name|getPlatformProperties
parameter_list|()
block|{
comment|// load Felix configuration
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|getFelixConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|getLocalConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|Properties
name|getConfigurationProperties
parameter_list|()
block|{
comment|// local properties
name|configurationProperties
operator|.
name|putAll
argument_list|(
name|getPlatformProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// system properties
name|configurationProperties
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|configurationProperties
return|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getJars
parameter_list|(
name|Class
modifier|...
name|classes
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|jars
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cl
range|:
name|classes
control|)
block|{
name|String
name|name
init|=
name|cl
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
decl_stmt|;
name|URL
name|url
init|=
operator|(
name|cl
operator|.
name|getClassLoader
argument_list|()
operator|!=
literal|null
condition|?
name|cl
operator|.
name|getClassLoader
argument_list|()
else|:
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|)
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|url
operator|.
name|toString
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
name|jars
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|jars
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check environment.
comment|// If the classloader contains JAXP providers, the META-INF infos will certainly be found
comment|// by OSGi, but classes won't be found, leading to errors.
name|ClassLoader
name|cll
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cll
operator|==
literal|null
condition|)
block|{
name|cll
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
name|URL
name|url1
init|=
name|cll
operator|.
name|getSystemResource
argument_list|(
literal|"META-INF/services/javax.xml.transform.TransformerFactory"
argument_list|)
decl_stmt|;
name|URL
name|url2
init|=
name|cll
operator|.
name|getSystemResource
argument_list|(
literal|"META-INF/services/javax.xml.parsers.DocumentBuilderFactory"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|additionalPackages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|/*         if (url1 != null) {             String line = new BufferedReader(new InputStreamReader(url1.openStream())).readLine();             line = line.substring(0, line.lastIndexOf('.'));             System.err.println(line);             additionalPackages.add(line);         }         if (url2 != null) {             String line = new BufferedReader(new InputStreamReader(url2.openStream())).readLine();             line = line.substring(0, line.lastIndexOf('.'));             System.err.println(line);             additionalPackages.add(line);         }         */
if|if
condition|(
name|url1
operator|!=
literal|null
operator|||
name|url2
operator|!=
literal|null
condition|)
block|{
name|String
name|s1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|url1
operator|!=
literal|null
condition|)
block|{
name|s1
operator|=
name|url1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|s1
operator|=
name|s1
operator|.
name|substring
argument_list|(
name|s1
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|,
name|s1
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|url2
operator|!=
literal|null
condition|)
block|{
name|s2
operator|=
name|url2
operator|.
name|toString
argument_list|()
expr_stmt|;
name|s2
operator|=
name|s2
operator|.
name|substring
argument_list|(
name|s2
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|,
name|s2
operator|.
name|indexOf
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"An xml parser or xslt engine has been found in the classpath.\n"
operator|+
literal|"It is probably included as a transitive dependencies by Maven.\n"
operator|+
literal|"Check by running 'mvn dependency:tree' and exclude the jars from dependencies.\n"
operator|+
literal|"Offending resources:\n"
operator|+
operator|(
name|s1
operator|!=
literal|null
condition|?
literal|"\t"
operator|+
name|s1
operator|+
literal|"\n"
else|:
literal|""
operator|)
operator|+
operator|(
name|s2
operator|!=
literal|null
condition|?
literal|"\t"
operator|+
name|s2
operator|+
literal|"\n"
else|:
literal|""
operator|)
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|jars
init|=
name|getJars
argument_list|(
name|Felix
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//System.out.println(jars);
name|ClassLoader
name|classLoader
init|=
operator|new
name|GuardClassLoader
argument_list|(
name|toURLs
argument_list|(
name|jars
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|jars
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|,
name|additionalPackages
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
name|Class
name|cl
init|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|Felix
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Constructor
name|cns
init|=
name|cl
operator|.
name|getConstructor
argument_list|(
name|Map
operator|.
name|class
argument_list|,
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|platform
operator|=
name|cns
operator|.
name|newInstance
argument_list|(
name|getConfigurationProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|platform
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"start"
argument_list|)
operator|.
name|invoke
argument_list|(
name|platform
argument_list|)
expr_stmt|;
name|Bundle
name|systemBundle
init|=
operator|(
name|Bundle
operator|)
name|platform
decl_stmt|;
comment|// call getBundleContext
specifier|final
name|Method
name|getContext
init|=
name|systemBundle
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getBundleContext"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|getContext
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|=
operator|(
name|BundleContext
operator|)
name|getContext
operator|.
name|invoke
argument_list|(
name|systemBundle
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|platform
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"stop"
argument_list|)
operator|.
name|invoke
argument_list|(
name|platform
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// remove cache folder
name|delete
argument_list|(
name|felixStorageDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
name|File
name|createTempDir
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|==
literal|null
condition|)
name|suffix
operator|=
literal|"osgi"
expr_stmt|;
name|File
name|tempFileName
decl_stmt|;
try|try
block|{
name|tempFileName
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"org.sfw.osgi"
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not create temporary directory, returning a temp folder inside the current folder"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
literal|"./tmp-test"
argument_list|)
return|;
block|}
name|tempFileName
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// we want it to be a directory...
name|File
name|tempFolder
init|=
operator|new
name|File
argument_list|(
name|tempFileName
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|tempFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
return|return
name|tempFolder
return|;
block|}
comment|/**      * Configuration settings for the OSGi test run.      *      * @return      */
specifier|private
name|Properties
name|getLocalConfiguration
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|felixStorageDir
operator|=
name|createTempDir
argument_list|(
literal|"felix"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|FELIX_PROFILE_DIR_PROPERTY
argument_list|,
name|this
operator|.
name|felixStorageDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"felix storage dir is "
operator|+
name|felixStorageDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
comment|/**      * Loads Felix config.properties.      *      *<strong>Note</strong> the current implementation uses Felix's Main class      * to resolve placeholders as opposed to loading the properties manually      * (through JDK's Properties class or Spring's PropertiesFactoryBean).      *      * @return      */
comment|// TODO: this method should be removed once Felix 1.0.2 is released
specifier|private
name|Properties
name|getFelixConfiguration
parameter_list|()
block|{
name|String
name|location
init|=
literal|"/"
operator|.
name|concat
argument_list|(
name|ClassUtils
operator|.
name|classPackageAsResourcePath
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|)
operator|.
name|concat
argument_list|(
name|FELIX_CONF_FILE
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot find felix configuration properties file:"
operator|+
name|location
argument_list|)
throw|;
comment|// used with Main
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|FELIX_CONFIG_PROPERTY
argument_list|,
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
comment|// load config.properties (use Felix's Main for resolving placeholders)
return|return
name|Main
operator|.
name|loadConfigProperties
argument_list|()
return|;
block|}
comment|/**      * Delete the given file (can be a simple file or a folder).      *      * @param file the file to be deleted      * @return if the deletion succeded or not      */
specifier|public
specifier|static
name|boolean
name|delete
parameter_list|(
name|File
name|file
parameter_list|)
block|{
comment|// bail out quickly
if|if
condition|(
name|file
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// recursively delete children file
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|children
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|success
operator|&=
name|delete
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The directory is now empty so delete it
return|return
operator|(
name|success
operator|&=
name|file
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
specifier|private
specifier|static
name|URL
index|[]
name|toURLs
parameter_list|(
name|String
index|[]
name|jars
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|URL
index|[]
name|urls
init|=
operator|new
name|URL
index|[
name|jars
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urls
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|jars
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|"jar:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|urls
index|[
name|i
index|]
operator|=
operator|new
name|URL
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|urls
return|;
block|}
specifier|public
class|class
name|GuardClassLoader
extends|extends
name|URLClassLoader
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|packages
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassLoader
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|GuardClassLoader
parameter_list|(
name|URL
index|[]
name|urls
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|additionalPackages
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|super
argument_list|(
name|urls
argument_list|,
name|SmxKernelPlatform
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|getConfigurationProperties
argument_list|()
decl_stmt|;
name|String
name|prop
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"org.osgi.framework.system.packages"
argument_list|)
decl_stmt|;
name|String
index|[]
name|ps
init|=
name|prop
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|ps
control|)
block|{
name|String
index|[]
name|spack
init|=
name|p
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|sp
range|:
name|spack
control|)
block|{
name|sp
operator|=
name|sp
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sp
operator|.
name|startsWith
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
name|packages
operator|.
name|add
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|additionalPackages
operator|!=
literal|null
condition|)
block|{
name|packages
operator|.
name|addAll
argument_list|(
name|additionalPackages
argument_list|)
expr_stmt|;
block|}
name|ClassLoader
name|cl
init|=
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|cl
operator|!=
literal|null
condition|)
block|{
name|parents
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|cl
argument_list|)
expr_stmt|;
name|cl
operator|=
name|cl
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
comment|//System.err.println("Boot packages: " + packages);
block|}
specifier|protected
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|resolve
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
comment|//System.err.println("Loading class: " + name);
name|Class
name|c
init|=
name|findLoadedClass
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|String
name|pkg
init|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
operator|||
name|packages
operator|.
name|contains
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
for|for
control|(
name|ClassLoader
name|cl
range|:
name|parents
control|)
block|{
try|try
block|{
name|c
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|//System.err.println("Class loaded from: " + cl.getResource(name.replace('.', '/') + ".class"));
break|break;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{                         }
block|}
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
comment|//c = getParent().loadClass(name);
block|}
else|else
block|{
name|c
operator|=
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resolve
condition|)
block|{
name|resolveClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
specifier|public
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|//System.err.println("GetResource: " + name);
name|URL
name|url
init|=
name|getParent
argument_list|()
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
operator|&&
name|url
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
return|return
name|url
return|;
block|}
name|url
operator|=
name|findResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Resource "
operator|+
name|name
operator|+
literal|" found at "
operator|+
name|url
argument_list|)
expr_stmt|;
return|return
name|url
return|;
comment|/*             URL u = getParent().getResource(name);             if (u != null) {                 String path = u.toString();                 int idx = path.indexOf('!');                 if (idx> 0) {                     path = path.substring(0, idx);                     if (!jars.contains(path)) {                         return null;                     }                 } else {                     idx = 0;                 }             }             return u;             */
block|}
specifier|public
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|getResources
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.err.println("GetResources: " + name);
name|Enumeration
index|[]
name|tmp
init|=
operator|new
name|Enumeration
index|[
literal|2
index|]
decl_stmt|;
specifier|final
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|e
init|=
name|getParent
argument_list|()
operator|.
name|getResources
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|tmp
index|[
literal|0
index|]
operator|=
operator|new
name|Enumeration
argument_list|<
name|URL
argument_list|>
argument_list|()
block|{
name|URL
name|next
init|=
literal|null
decl_stmt|;
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
while|while
condition|(
name|next
operator|==
literal|null
operator|&&
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|next
operator|=
name|e
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|next
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
specifier|public
name|URL
name|nextElement
parameter_list|()
block|{
return|return
name|next
return|;
block|}
block|}
expr_stmt|;
name|tmp
index|[
literal|1
index|]
operator|=
name|findResources
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompoundEnumeration
argument_list|(
name|tmp
argument_list|)
block|{
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
name|Object
name|next
init|=
name|super
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Resources "
operator|+
name|name
operator|+
literal|" found at "
operator|+
name|next
argument_list|)
expr_stmt|;
return|return
name|next
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

