begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|testing
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|test
operator|.
name|platform
operator|.
name|FelixPlatform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|test
operator|.
name|platform
operator|.
name|OsgiPlatform
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|ClassUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|main
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|Felix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_class
specifier|public
class|class
name|SmxKernelPlatform
implements|implements
name|OsgiPlatform
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FelixPlatform
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FELIX_CONF_FILE
init|=
literal|"felix.config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FELIX_CONFIG_PROPERTY
init|=
literal|"felix.config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FELIX_PROFILE_DIR_PROPERTY
init|=
literal|"felix.cache.profiledir"
decl_stmt|;
specifier|private
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|Felix
name|platform
decl_stmt|;
specifier|private
name|File
name|felixStorageDir
decl_stmt|;
specifier|private
name|Properties
name|configurationProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|protected
name|Properties
name|getPlatformProperties
parameter_list|()
block|{
comment|// load Felix configuration
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|getFelixConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|getLocalConfiguration
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|Properties
name|getConfigurationProperties
parameter_list|()
block|{
comment|// local properties
name|configurationProperties
operator|.
name|putAll
argument_list|(
name|getPlatformProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// system properties
name|configurationProperties
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|configurationProperties
return|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|platform
operator|=
operator|new
name|Felix
argument_list|(
name|getConfigurationProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|platform
operator|.
name|start
argument_list|()
expr_stmt|;
name|Bundle
name|systemBundle
init|=
name|platform
decl_stmt|;
comment|// call getBundleContext
specifier|final
name|Method
name|getContext
init|=
name|systemBundle
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getBundleContext"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|getContext
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|=
operator|(
name|BundleContext
operator|)
name|getContext
operator|.
name|invoke
argument_list|(
name|systemBundle
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|platform
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// remove cache folder
name|delete
argument_list|(
name|felixStorageDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
name|File
name|createTempDir
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|==
literal|null
condition|)
name|suffix
operator|=
literal|"osgi"
expr_stmt|;
name|File
name|tempFileName
decl_stmt|;
try|try
block|{
name|tempFileName
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"org.sfw.osgi"
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isWarnEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not create temporary directory, returning a temp folder inside the current folder"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|File
argument_list|(
literal|"./tmp-test"
argument_list|)
return|;
block|}
name|tempFileName
operator|.
name|delete
argument_list|()
expr_stmt|;
comment|// we want it to be a directory...
name|File
name|tempFolder
init|=
operator|new
name|File
argument_list|(
name|tempFileName
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|tempFolder
operator|.
name|mkdir
argument_list|()
expr_stmt|;
return|return
name|tempFolder
return|;
block|}
comment|/**      * Configuration settings for the OSGi test run.      *      * @return      */
specifier|private
name|Properties
name|getLocalConfiguration
parameter_list|()
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|felixStorageDir
operator|=
name|createTempDir
argument_list|(
literal|"felix"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|FELIX_PROFILE_DIR_PROPERTY
argument_list|,
name|this
operator|.
name|felixStorageDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"felix storage dir is "
operator|+
name|felixStorageDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
comment|/**      * Loads Felix config.properties.      *      *<strong>Note</strong> the current implementation uses Felix's Main class      * to resolve placeholders as opposed to loading the properties manually      * (through JDK's Properties class or Spring's PropertiesFactoryBean).      *      * @return      */
comment|// TODO: this method should be removed once Felix 1.0.2 is released
specifier|private
name|Properties
name|getFelixConfiguration
parameter_list|()
block|{
name|String
name|location
init|=
literal|"/"
operator|.
name|concat
argument_list|(
name|ClassUtils
operator|.
name|classPackageAsResourcePath
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|concat
argument_list|(
literal|"/"
argument_list|)
operator|.
name|concat
argument_list|(
name|FELIX_CONF_FILE
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot find felix configuration properties file:"
operator|+
name|location
argument_list|)
throw|;
comment|// used with Main
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|FELIX_CONFIG_PROPERTY
argument_list|,
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
expr_stmt|;
comment|// load config.properties (use Felix's Main for resolving placeholders)
return|return
name|Main
operator|.
name|loadConfigProperties
argument_list|()
return|;
block|}
comment|/**      * Delete the given file (can be a simple file or a folder).      *      * @param file the file to be deleted      * @return if the deletion succeded or not      */
specifier|public
specifier|static
name|boolean
name|delete
parameter_list|(
name|File
name|file
parameter_list|)
block|{
comment|// bail out quickly
if|if
condition|(
name|file
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// recursively delete children file
name|boolean
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
index|[]
name|children
init|=
name|file
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|success
operator|&=
name|delete
argument_list|(
operator|new
name|File
argument_list|(
name|file
argument_list|,
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The directory is now empty so delete it
return|return
operator|(
name|success
operator|&=
name|file
operator|.
name|delete
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

