begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|tooling
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|InvalidArtifactRTException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ArtifactMetadataRetrievalException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|metadata
operator|.
name|ResolutionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|resolver
operator|.
name|ArtifactResolutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|versioning
operator|.
name|ArtifactVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoFailureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|impl
operator|.
name|bundle
operator|.
name|obr
operator|.
name|resource
operator|.
name|Manifest
import|;
end_import

begin_comment
comment|/**  * Generates the features XML file  *   * @version $Revision: 1.1 $  * @goal generate-features-file  * @phase compile  * @execute phase="compile"  * @requiresDependencyResolution runtime  * @inheritByDefault true  * @description Generates the features XML file  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
class|class
name|GenerateFeaturesFileMojo
extends|extends
name|MojoSupport
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"/"
decl_stmt|;
comment|/**      * The file to generate      *       * @parameter default-value="${project.build.directory}/classes/feature.xml"      */
specifier|private
name|File
name|outputFile
decl_stmt|;
comment|/**      * The name of the feature, which defaults to the artifact ID if its not      * specified      *       * @parameter default-value="${project.artifactId}"      */
specifier|private
name|String
name|featureName
decl_stmt|;
comment|/**      * The artifact type for attaching the generated file to the project      *       * @parameter default-value="features.xml"      */
specifier|private
name|String
name|attachmentArtifactType
init|=
literal|"features.xml"
decl_stmt|;
comment|/**      * The artifact classifier for attaching the generated file to the project      *       * @parameter      */
specifier|private
name|String
name|attachmentArtifactClassifier
decl_stmt|;
comment|/**      * Should we generate a<feature> for the current project?      *       * @parameter default-value="true"      */
specifier|private
name|boolean
name|includeProject
init|=
literal|true
decl_stmt|;
comment|/**      * Should we generate a<feature> for the current project's<dependency>s?      *       * @parameter default-value="false"      */
specifier|private
name|boolean
name|includeDependencies
init|=
literal|false
decl_stmt|;
comment|/*      * These bundles are the features that will be built      */
specifier|private
name|Set
argument_list|<
name|Artifact
argument_list|>
name|features
init|=
operator|new
name|HashSet
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
comment|/*      * These bundles are provided by SMX4 and will be excluded from<feature/>      * generation      */
specifier|private
name|Set
argument_list|<
name|Artifact
argument_list|>
name|provided
init|=
operator|new
name|HashSet
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
comment|/*      * List of bundles included in the current feature      */
specifier|private
name|Set
argument_list|<
name|Artifact
argument_list|>
name|currentFeature
init|=
operator|new
name|HashSet
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
throws|,
name|MojoFailureException
block|{
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|outputFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|out
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
name|PrintStream
name|printer
init|=
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|populateProperties
argument_list|(
name|printer
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Created: "
operator|+
name|outputFile
argument_list|)
expr_stmt|;
comment|// now lets attach it
name|projectHelper
operator|.
name|attachArtifact
argument_list|(
name|project
argument_list|,
name|attachmentArtifactType
argument_list|,
name|attachmentArtifactClassifier
argument_list|,
name|outputFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Unable to create dependencies file: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Failed to close: "
operator|+
name|outputFile
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|populateProperties
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<features>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeProject
condition|)
block|{
name|writeCurrentProjectFeature
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDependencies
condition|)
block|{
name|prepare
argument_list|()
expr_stmt|;
name|writeProjectDependencyFeatures
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</features>"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|prepare
parameter_list|()
block|{
for|for
control|(
name|Artifact
name|artifact
range|:
operator|(
name|Set
argument_list|<
name|Artifact
argument_list|>
operator|)
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
control|)
block|{
if|if
condition|(
literal|"provided"
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Adding '%s' as provided bundle"
argument_list|,
name|artifact
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|provided
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|writeProjectDependencyFeatures
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|Set
argument_list|<
name|Artifact
argument_list|>
name|dependencies
init|=
operator|(
name|Set
argument_list|<
name|Artifact
argument_list|>
operator|)
name|project
operator|.
name|getDependencyArtifacts
argument_list|()
decl_stmt|;
name|dependencies
operator|.
name|removeAll
argument_list|(
name|provided
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|artifact
range|:
name|dependencies
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding feature "
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|" from "
operator|+
name|artifact
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<feature name='"
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|currentFeature
operator|.
name|clear
argument_list|()
expr_stmt|;
name|writeBundle
argument_list|(
name|out
argument_list|,
name|artifact
argument_list|)
expr_stmt|;
name|features
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeBundle
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|Artifact
name|artifact
parameter_list|)
block|{
if|if
condition|(
name|isProvided
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Skipping '%s' -- bundle will be provided at runtime"
argument_list|,
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|features
operator|.
name|contains
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
comment|// if we already created a feature for this one, just add that instead of the bundle
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<feature>%s</feature>"
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// first write the dependencies
for|for
control|(
name|Artifact
name|dependency
range|:
name|getDependencies
argument_list|(
name|artifact
argument_list|)
control|)
block|{
if|if
condition|(
name|dependency
operator|.
name|isOptional
argument_list|()
operator|||
literal|"test"
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
comment|// omit optional dependencies
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Omitting optional and/or test scoped dependency '%s' for '%s'"
argument_list|,
name|dependency
argument_list|,
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Adding '%s' as a dependency for '%s'"
argument_list|,
name|dependency
argument_list|,
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
name|writeBundle
argument_list|(
name|out
argument_list|,
name|dependency
argument_list|)
expr_stmt|;
block|}
comment|// skip the bundle if it was already added to this feature previously
if|if
condition|(
operator|!
name|currentFeature
operator|.
name|add
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Artifact '%s' was already added to the current feature"
argument_list|,
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// and then write the bundle itself
if|if
condition|(
name|isBundle
argument_list|(
name|artifact
argument_list|)
condition|)
block|{
name|writeBundle
argument_list|(
name|out
argument_list|,
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getBaseVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Artifact
name|wrapper
init|=
name|findServicemixBundle
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|!=
literal|null
condition|)
block|{
name|writeBundle
argument_list|(
name|out
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLog
argument_list|()
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to find suitable bundle for artifact '%s' -- resulting feature won't work"
argument_list|,
name|artifact
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Artifact
name|findServicemixBundle
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|Artifact
name|noVersionWrapper
init|=
name|factory
operator|.
name|createArtifact
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles."
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
literal|""
argument_list|,
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
name|versions
init|=
name|artifactMetadataSource
operator|.
name|retrieveAvailableVersions
argument_list|(
name|noVersionWrapper
argument_list|,
name|localRepo
argument_list|,
name|remoteRepos
argument_list|)
decl_stmt|;
name|Artifact
name|wrapper
init|=
name|factory
operator|.
name|createArtifact
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles."
operator|+
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|getBestVersionForArtifact
argument_list|(
name|artifact
argument_list|,
name|versions
argument_list|)
argument_list|,
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// let's check if the servicemix bundle for this artifact exists
name|resolver
operator|.
name|resolve
argument_list|(
name|wrapper
argument_list|,
name|remoteRepos
argument_list|,
name|localRepo
argument_list|)
expr_stmt|;
for|for
control|(
name|Artifact
name|dependency
range|:
name|getDependencies
argument_list|(
name|wrapper
argument_list|)
control|)
block|{
comment|//some of these wrapper bundles provide for multiple JAR files, no need to include any of them after adding the wrapper
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"'%s' also provides '%s'"
argument_list|,
name|wrapper
argument_list|,
name|dependency
argument_list|)
argument_list|)
expr_stmt|;
name|currentFeature
operator|.
name|add
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapper
return|;
block|}
catch|catch
parameter_list|(
name|ArtifactResolutionException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Couldn't find a ServiceMix bundle for "
operator|+
name|artifact
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactNotFoundException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Couldn't find a ServiceMix bundle for "
operator|+
name|artifact
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactMetadataRetrievalException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Couldn't find a ServiceMix bundle for "
operator|+
name|artifact
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
comment|//let's try to see if we can't find a bundle wrapping multiple artifacts (e.g. mina -> mina-core, mina-codec, ...)
return|return
name|findServicemixBundle
argument_list|(
name|factory
operator|.
name|createArtifact
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|artifact
operator|.
name|getArtifactId
argument_list|()
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|,
name|artifact
operator|.
name|getScope
argument_list|()
argument_list|,
name|artifact
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|String
name|getBestVersionForArtifact
parameter_list|(
name|Artifact
name|artifact
parameter_list|,
name|List
argument_list|<
name|ArtifactVersion
argument_list|>
name|versions
parameter_list|)
throws|throws
name|ArtifactMetadataRetrievalException
block|{
if|if
condition|(
name|versions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ArtifactMetadataRetrievalException
argument_list|(
literal|"No wrapper bundle available for "
operator|+
name|artifact
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|versions
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
comment|//check for same version
for|for
control|(
name|ArtifactVersion
name|version
range|:
name|versions
control|)
block|{
if|if
condition|(
name|version
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|artifact
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|version
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|//check for same major/minor version
for|for
control|(
name|ArtifactVersion
name|version
range|:
name|versions
control|)
block|{
name|String
index|[]
name|elements
init|=
name|version
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|elements
operator|.
name|length
operator|>=
literal|2
operator|&&
name|artifact
operator|.
name|getVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
name|elements
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|elements
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
return|return
name|version
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|ArtifactMetadataRetrievalException
argument_list|(
literal|"No suitable version found for "
operator|+
name|artifact
operator|+
literal|" wrapper bundle"
argument_list|)
throw|;
block|}
specifier|private
name|boolean
name|isProvided
parameter_list|(
name|Artifact
name|bundle
parameter_list|)
block|{
for|for
control|(
name|Artifact
name|artifact
range|:
name|provided
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getArtifactId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
name|bundle
operator|.
name|getGroupId
argument_list|()
operator|.
name|equals
argument_list|(
name|artifact
operator|.
name|getGroupId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isBundle
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
if|if
condition|(
name|artifact
operator|.
name|getArtifactHandler
argument_list|()
operator|.
name|getPackaging
argument_list|()
operator|.
name|equals
argument_list|(
literal|"bundle"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
try|try
block|{
name|resolver
operator|.
name|resolve
argument_list|(
name|artifact
argument_list|,
name|remoteRepos
argument_list|,
name|localRepo
argument_list|)
expr_stmt|;
name|ZipFile
name|file
init|=
operator|new
name|ZipFile
argument_list|(
name|artifact
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
init|=
name|file
operator|.
name|getEntry
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
operator|new
name|Manifest
argument_list|(
name|file
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|manifest
operator|.
name|getBsn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"MANIFEST.MF for '%s' contains Bundle-Name '%s'"
argument_list|,
name|artifact
argument_list|,
name|manifest
operator|.
name|getBsn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ZipException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to determine if "
operator|+
name|artifact
operator|+
literal|" is a bundle; defaulting to false"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to determine if "
operator|+
name|artifact
operator|+
literal|" is a bundle; defaulting to false"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to determine if "
operator|+
name|artifact
operator|+
literal|" is a bundle; defaulting to false"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|List
argument_list|<
name|Artifact
argument_list|>
name|getDependencies
parameter_list|(
name|Artifact
name|artifact
parameter_list|)
block|{
name|List
argument_list|<
name|Artifact
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Artifact
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ResolutionGroup
name|pom
init|=
name|artifactMetadataSource
operator|.
name|retrieve
argument_list|(
name|artifact
argument_list|,
name|localRepo
argument_list|,
name|remoteRepos
argument_list|)
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|pom
operator|.
name|getArtifacts
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ArtifactMetadataRetrievalException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve metadata for "
operator|+
name|artifact
operator|+
literal|", not including dependencies for it"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidArtifactRTException
name|e
parameter_list|)
block|{
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"Unable to retrieve metadata for "
operator|+
name|artifact
operator|+
literal|", not including dependencies for it"
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|void
name|writeCurrentProjectFeature
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"<feature name='"
operator|+
name|featureName
operator|+
literal|"'>"
argument_list|)
expr_stmt|;
name|writeBundle
argument_list|(
name|out
argument_list|,
name|project
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|project
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|project
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|Iterator
name|iterator
init|=
name|project
operator|.
name|getDependencies
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Dependency
name|dependency
init|=
operator|(
name|Dependency
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isValidDependency
argument_list|(
name|dependency
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|writeBundle
argument_list|(
name|out
argument_list|,
name|dependency
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getArtifactId
argument_list|()
argument_list|,
name|dependency
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|println
argument_list|(
literal|"</feature>"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isValidDependency
parameter_list|(
name|Dependency
name|dependency
parameter_list|)
block|{
comment|// TODO filter out only compile time dependencies which are OSGi
comment|// bundles?
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|writeBundle
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|,
name|String
name|version
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"<bundle>mvn:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|artifactId
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"</bundle>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

