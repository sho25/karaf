begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|KarArtifactInstallerTest
block|{
specifier|private
name|KarArtifactInstaller
name|karArtifactInstaller
decl_stmt|;
specifier|private
name|FeaturesService
name|featuresService
decl_stmt|;
specifier|private
name|URI
name|goodKarFile
decl_stmt|;
specifier|private
name|URI
name|zipFileWithKarafManifest
decl_stmt|;
specifier|private
name|URI
name|zipFileWithoutKarafManifest
decl_stmt|;
specifier|private
name|URI
name|badZipFile
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|featuresService
operator|=
name|createMock
argument_list|(
name|FeaturesService
operator|.
name|class
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|=
operator|new
name|KarArtifactInstaller
argument_list|()
expr_stmt|;
name|karArtifactInstaller
operator|.
name|setFeaturesService
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|.
name|setBasePath
argument_list|(
literal|"./target"
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|.
name|setLocalRepoPath
argument_list|(
literal|"./target/local-repo"
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|.
name|init
argument_list|()
expr_stmt|;
name|goodKarFile
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"goodKarFile.kar"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
name|zipFileWithKarafManifest
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karFileAsZip.zip"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
name|zipFileWithoutKarafManifest
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karFileAsZipNoManifest.zip"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
name|badZipFile
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"badZipFile.zip"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|karArtifactInstaller
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|karArtifactInstaller
operator|.
name|deleteLocalRepository
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHandleKarFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|goodKarFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHandleZipFileWithKarafManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|zipFileWithKarafManifest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldIgnoreZipFileWithoutKarafManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|zipFileWithoutKarafManifest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldIgnoreBadZipFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|badZipFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldRecognizeGoodFeaturesFile
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|goodFeaturesXml
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"goodKarFile/org/foo/goodFeaturesXml.xml"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|karArtifactInstaller
operator|.
name|isFeaturesRepository
argument_list|(
name|goodFeaturesXml
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldRejectNonFeaturesXMLFile
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|goodFeaturesXml
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"badFeaturesXml.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|karArtifactInstaller
operator|.
name|isFeaturesRepository
argument_list|(
name|goodFeaturesXml
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldRejectMalformedXMLFile
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|malformedXml
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"malformedXml.xml"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|karArtifactInstaller
operator|.
name|isFeaturesRepository
argument_list|(
name|malformedXml
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldExtractAndRegisterFeaturesFromKar
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup expectations on the features service
name|featuresService
operator|.
name|addRepository
argument_list|(
operator|(
name|URI
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
comment|// Test
comment|//
name|File
name|goodKarFile
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"goodKarFile.kar"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|karArtifactInstaller
operator|.
name|install
argument_list|(
name|goodKarFile
argument_list|)
expr_stmt|;
comment|// Verify expectations.
comment|//
name|EasyMock
operator|.
name|verify
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldLogAndNotThrowExceptionIfCannotAddToFeaturesRepository
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup expectations on the features service
name|featuresService
operator|.
name|addRepository
argument_list|(
operator|(
name|URI
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Unable to add to repository."
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
comment|// Test
comment|//
name|File
name|goodKarFile
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"goodKarFile.kar"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|karArtifactInstaller
operator|.
name|install
argument_list|(
name|goodKarFile
argument_list|)
expr_stmt|;
comment|// Verify expectations.
comment|//
name|EasyMock
operator|.
name|verify
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldIgnoreUpdateIfFileHasNotChanged
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup expectations on the features service: the addRepository
comment|// should only be added once, as the update command should be ignored!
comment|//
name|featuresService
operator|.
name|addRepository
argument_list|(
operator|(
name|URI
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
comment|// Test
comment|//
name|File
name|goodKarFile
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"goodKarFile.kar"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|karArtifactInstaller
operator|.
name|install
argument_list|(
name|goodKarFile
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|.
name|update
argument_list|(
name|goodKarFile
argument_list|)
expr_stmt|;
comment|// Verify expectations.
comment|//
name|EasyMock
operator|.
name|verify
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldExtractAndRegisterFeaturesFromZip
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup expectations on the features service
name|featuresService
operator|.
name|addRepository
argument_list|(
operator|(
name|URI
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
comment|// Test
comment|//
name|File
name|karFileAsZip
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karFileAsZip.zip"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|karArtifactInstaller
operator|.
name|install
argument_list|(
name|karFileAsZip
argument_list|)
expr_stmt|;
comment|// Verify expectations.
comment|//
name|EasyMock
operator|.
name|verify
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|java
operator|.
name|io
operator|.
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|shouldThrowExceptionIfFileDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|nonExistantFile
init|=
operator|new
name|File
argument_list|(
literal|"DoesNotExist"
argument_list|)
decl_stmt|;
name|karArtifactInstaller
operator|.
name|install
argument_list|(
name|nonExistantFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|uninstallShouldDoNothing
parameter_list|()
throws|throws
name|Exception
block|{
name|EasyMock
operator|.
name|replay
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
comment|// Test
comment|//
name|File
name|karFileAsZip
init|=
operator|new
name|File
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karFileAsZip.zip"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|karArtifactInstaller
operator|.
name|uninstall
argument_list|(
name|karFileAsZip
argument_list|)
expr_stmt|;
comment|// Verify expectations.
comment|//
name|EasyMock
operator|.
name|verify
argument_list|(
name|featuresService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathToMvnUri
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|KarArtifactInstaller
operator|.
name|pathToMvnUri
argument_list|(
literal|"org/apache/geronimo/features/org.apache.geronimo.transaction.kar/3.1.1-SNAPSHOT/org.apache.geronimo.transaction.kar-3.1.1-SNAPSHOT-features.xml"
argument_list|)
decl_stmt|;
assert|assert
literal|"mvn:org.apache.geronimo.features/org.apache.geronimo.transaction.kar/3.1.1-SNAPSHOT/xml/features"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
assert|;
block|}
block|}
end_class

end_unit

