begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|KarService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|KarArtifactInstallerTest
block|{
specifier|private
name|KarArtifactInstaller
name|karArtifactInstaller
decl_stmt|;
specifier|private
name|KarService
name|karService
decl_stmt|;
specifier|private
name|URI
name|goodKarFile
decl_stmt|;
specifier|private
name|URI
name|zipFileWithKarafManifest
decl_stmt|;
specifier|private
name|URI
name|zipFileWithoutKarafManifest
decl_stmt|;
specifier|private
name|URI
name|badZipFile
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|karService
operator|=
name|createMock
argument_list|(
name|KarService
operator|.
name|class
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|=
operator|new
name|KarArtifactInstaller
argument_list|()
expr_stmt|;
name|karArtifactInstaller
operator|.
name|setKarService
argument_list|(
name|karService
argument_list|)
expr_stmt|;
name|goodKarFile
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"goodKarFile.kar"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
name|zipFileWithKarafManifest
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karFileAsZip.zip"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
name|zipFileWithoutKarafManifest
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karFileAsZipNoManifest.zip"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
name|badZipFile
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"badZipFile.zip"
argument_list|)
operator|.
name|toURI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHandleKarFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|goodKarFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldHandleZipFileWithKarafManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|zipFileWithKarafManifest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldIgnoreZipFileWithoutKarafManifest
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|zipFileWithoutKarafManifest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldIgnoreBadZipFile
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|karArtifactInstaller
operator|.
name|canHandle
argument_list|(
operator|new
name|File
argument_list|(
name|badZipFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is test for KARAF-5533. Issue comes from fact that internally KAR service process file in it's own way.      *      * Because of that artifact installer must follow the same logic of service it calls, as returned list of installed.      * KAR files is not list of full file names, but files with stripped extensions.      *      * @throws Exception Any exception causes test failure.      */
annotation|@
name|Test
specifier|public
name|void
name|shouldNotInstallSameFileTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|goodKarFile
argument_list|)
decl_stmt|;
name|URI
name|uri
init|=
name|file
operator|.
name|toURI
argument_list|()
decl_stmt|;
comment|// make sure we have clean state.
name|presentKarList
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|karService
operator|.
name|install
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|karService
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|.
name|install
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|karService
argument_list|)
expr_stmt|;
comment|// once again,
name|reset
argument_list|(
name|karService
argument_list|)
expr_stmt|;
name|presentKarList
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|karArtifactInstaller
operator|.
name|getKarName
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|karService
argument_list|)
expr_stmt|;
name|karArtifactInstaller
operator|.
name|install
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|karService
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|presentKarList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|deployedKars
parameter_list|)
throws|throws
name|Exception
block|{
name|expect
argument_list|(
name|karService
operator|.
name|list
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|deployedKars
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

