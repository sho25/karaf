begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|fileinstall
operator|.
name|ArtifactInstaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|KarService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|KarArtifactInstaller
implements|implements
name|ArtifactInstaller
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FEATURE_CLASSIFIER
init|=
literal|"features"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KarArtifactInstaller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|KAR_SUFFIX
init|=
literal|".kar"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ZIP_SUFFIX
init|=
literal|".zip"
decl_stmt|;
specifier|private
name|KarService
name|karService
decl_stmt|;
specifier|public
name|void
name|install
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check if the KAR is not already installed
if|if
condition|(
name|karService
operator|.
name|list
argument_list|()
operator|.
name|contains
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"KAR {} is already installed. Please uninstall it first."
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Installing KAR file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|karService
operator|.
name|install
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|uninstall
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Uninstalling KAR {}"
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|karService
operator|.
name|uninstall
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Karaf archive {}' has been updated; redeploying."
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|karService
operator|.
name|uninstall
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|karService
operator|.
name|install
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canHandle
parameter_list|(
name|File
name|file
parameter_list|)
block|{
comment|// If the file ends with .kar, then we can handle it!
comment|//
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|KAR_SUFFIX
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Found a .kar file to deploy."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Otherwise, check to see if it's a zip file containing a META-INF/KARAF.MF manifest.
comment|//
elseif|else
if|if
condition|(
name|file
operator|.
name|isFile
argument_list|()
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|ZIP_SUFFIX
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Found a .zip file to deploy; checking contents to see if it's a Karaf archive."
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|new
name|ZipFile
argument_list|(
name|file
argument_list|)
operator|.
name|getEntry
argument_list|(
literal|"META-INF/KARAF.MF"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Found a Karaf archive with .zip prefix; will deploy."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem extracting zip file '{}'; ignoring."
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|KarService
name|getKarService
parameter_list|()
block|{
return|return
name|karService
return|;
block|}
specifier|public
name|void
name|setKarService
parameter_list|(
name|KarService
name|karService
parameter_list|)
block|{
name|this
operator|.
name|karService
operator|=
name|karService
expr_stmt|;
block|}
block|}
end_class

end_unit

