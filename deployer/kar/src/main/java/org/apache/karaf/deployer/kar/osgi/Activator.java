begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|fileinstall
operator|.
name|ArtifactInstaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|fileinstall
operator|.
name|ArtifactListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|kar
operator|.
name|KarArtifactInstaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|KarService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|SingleServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
implements|,
name|SingleServiceTracker
operator|.
name|SingleServiceListener
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|ServiceRegistration
name|urlTransformerRegistration
decl_stmt|;
specifier|private
name|SingleServiceTracker
argument_list|<
name|KarService
argument_list|>
name|karServiceTracker
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|bundleContext
operator|=
name|context
expr_stmt|;
name|karServiceTracker
operator|=
operator|new
name|SingleServiceTracker
argument_list|<
name|KarService
argument_list|>
argument_list|(
name|context
argument_list|,
name|KarService
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|karServiceTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|karServiceTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceFound
parameter_list|()
block|{
name|KarService
name|service
init|=
name|karServiceTracker
operator|.
name|getService
argument_list|()
decl_stmt|;
if|if
condition|(
name|urlTransformerRegistration
operator|==
literal|null
operator|&&
name|service
operator|!=
literal|null
condition|)
block|{
name|KarArtifactInstaller
name|installer
init|=
operator|new
name|KarArtifactInstaller
argument_list|()
decl_stmt|;
name|installer
operator|.
name|setKarService
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|urlTransformerRegistration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
operator|new
name|String
index|[]
block|{
name|ArtifactInstaller
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|ArtifactListener
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
name|installer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceLost
parameter_list|()
block|{
if|if
condition|(
name|urlTransformerRegistration
operator|!=
literal|null
condition|)
block|{
name|urlTransformerRegistration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|urlTransformerRegistration
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|serviceReplaced
parameter_list|()
block|{
name|serviceLost
argument_list|()
expr_stmt|;
name|serviceFound
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

