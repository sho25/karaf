begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|war
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|fileinstall
operator|.
name|ArtifactUrlTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_comment
comment|/**  * A deployment listener that listens for war deployements.  */
end_comment

begin_class
specifier|public
class|class
name|WarDeploymentListener
implements|implements
name|ArtifactUrlTransformer
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WarDeploymentListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DocumentBuilderFactory
name|dbf
decl_stmt|;
specifier|public
name|boolean
name|canHandle
parameter_list|(
name|File
name|artifact
parameter_list|)
block|{
try|try
block|{
name|JarFile
name|jar
init|=
operator|new
name|JarFile
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|JarEntry
name|entry
init|=
name|jar
operator|.
name|getJarEntry
argument_list|(
literal|"WEB-INF/web.xml"
argument_list|)
decl_stmt|;
comment|// Only handle WAR artifacts
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Only handle non OSGi bundles
name|Manifest
name|m
init|=
name|jar
operator|.
name|getManifest
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"Bundle-SymbolicName"
argument_list|)
argument_list|)
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
operator|new
name|Attributes
operator|.
name|Name
argument_list|(
literal|"Bundle-Version"
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|URL
name|transform
parameter_list|(
name|URL
name|artifact
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|artifact
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|protocol
init|=
name|artifact
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|int
name|lastSlash
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|"jardir"
operator|.
name|equalsIgnoreCase
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
name|lastSlash
operator|=
name|path
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
comment|// match the last File.seperator to
comment|// retrieve the name of the archive
block|}
else|else
block|{
name|lastSlash
operator|=
name|path
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
comment|// match the last slash to
comment|// retrieve the name of the archive
block|}
name|int
name|suffixPos
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|".war"
argument_list|)
decl_stmt|;
comment|// match the suffix so we get
comment|// rid of it for displaying
comment|// Fall back if there is no display-name set in the web.xml or if the
comment|// web.xml can't be read.
name|String
name|displayName
init|=
name|path
operator|.
name|substring
argument_list|(
name|lastSlash
operator|+
literal|1
argument_list|,
name|suffixPos
argument_list|)
decl_stmt|;
try|try
block|{
comment|// step through the jar to find the web.xml
name|JarInputStream
name|jar
init|=
operator|new
name|JarInputStream
argument_list|(
name|artifact
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|JarEntry
name|nextJarEntry
init|=
name|jar
operator|.
name|getNextJarEntry
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|nextJarEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextJarEntry
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"web.xml"
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|nextJarEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Document
name|doc
init|=
name|parse
argument_list|(
name|jar
argument_list|)
decl_stmt|;
comment|// found the web.xml
name|NodeList
name|nodeList
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
comment|// getElementsByTagName("display-name");
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|item
init|=
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|item
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"display-name"
operator|.
name|equalsIgnoreCase
argument_list|(
name|nodeName
argument_list|)
condition|)
block|{
name|String
name|nodeValue
init|=
name|item
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeValue
operator|!=
literal|null
condition|)
block|{
name|displayName
operator|=
name|nodeValue
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
name|jar
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
condition|)
break|break;
else|else
name|nextJarEntry
operator|=
name|jar
operator|.
name|getNextJarEntry
argument_list|()
expr_stmt|;
block|}
comment|// alter the original URL artifact
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to create Weapp-Context from web.xml"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|URL
argument_list|(
literal|"war"
argument_list|,
literal|null
argument_list|,
name|protocol
operator|+
literal|":"
operator|+
name|path
operator|+
literal|"?Webapp-Context="
operator|+
name|displayName
argument_list|)
return|;
block|}
specifier|private
name|Document
name|parse
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|dbf
operator|==
literal|null
condition|)
block|{
name|dbf
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|db
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|ErrorHandler
argument_list|()
block|{
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
comment|// ignore waring
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|exception
throw|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
throw|throw
name|exception
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|db
operator|.
name|parse
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
block|}
end_class

end_unit

