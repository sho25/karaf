begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|features
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|fileinstall
operator|.
name|ArtifactUrlTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesNamespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleListener
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
operator|.
name|ROOT_REGION
import|;
end_import

begin_comment
comment|/**  * A deployment listener able to hot deploy a feature descriptor  */
end_comment

begin_class
specifier|public
class|class
name|FeatureDeploymentListener
implements|implements
name|ArtifactUrlTransformer
implements|,
name|BundleListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FEATURE_PATH
init|=
literal|"org.apache.karaf.shell.features"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FeatureDeploymentListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|XMLInputFactory
name|xif
decl_stmt|;
specifier|private
name|FeaturesService
name|featuresService
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setFeaturesService
parameter_list|(
name|FeaturesService
name|featuresService
parameter_list|)
block|{
name|this
operator|.
name|featuresService
operator|=
name|featuresService
expr_stmt|;
block|}
specifier|public
name|FeaturesService
name|getFeaturesService
parameter_list|()
block|{
return|return
name|featuresService
return|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|bundleContext
operator|.
name|addBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|loadProperties
argument_list|()
expr_stmt|;
comment|// Scan bundles
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|RESOLVED
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|STARTING
operator|||
name|bundle
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
condition|)
name|bundleChanged
argument_list|(
operator|new
name|BundleEvent
argument_list|(
name|BundleEvent
operator|.
name|RESOLVED
argument_list|,
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|bundleContext
operator|.
name|removeBundleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isKnownFeaturesURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|ns
range|:
name|FeaturesNamespaces
operator|.
name|SUPPORTED_URIS
control|)
block|{
if|if
condition|(
name|ns
operator|.
name|equalsIgnoreCase
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|loadProperties
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Load properties
name|File
name|file
init|=
name|getPropertiesFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
init|(
name|InputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|saveProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|getPropertiesFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|OutputStream
name|output
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
name|properties
operator|.
name|store
argument_list|(
name|output
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|File
name|getPropertiesFile
parameter_list|()
block|{
try|try
block|{
return|return
name|bundleContext
operator|.
name|getDataFile
argument_list|(
literal|"FeatureDeploymentListener.cfg"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Unable to get FeatureDeploymentListener.cfg"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|canHandle
parameter_list|(
name|File
name|artifact
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|artifact
operator|.
name|isFile
argument_list|()
operator|&&
name|artifact
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|QName
name|qname
init|=
name|getRootElementName
argument_list|(
name|artifact
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|isKnownFeaturesURI
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"unknown features uri"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|""
operator|+
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to parse deployed file "
operator|+
name|artifact
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|URL
name|transform
parameter_list|(
name|URL
name|artifact
parameter_list|)
block|{
comment|// We can't really install the feature right now and just return nothing.
comment|// We would not be aware of the fact that the bundle has been uninstalled
comment|// and therefore require the feature to be uninstalled.
comment|// So instead, create a fake bundle with the file inside, which will be listened by
comment|// this deployer: installation / uninstallation of the feature will be done
comment|// while the bundle is installed / uninstalled.
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
literal|"feature"
argument_list|,
literal|null
argument_list|,
name|artifact
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to build feature bundle"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|bundleChanged
parameter_list|(
name|BundleEvent
name|bundleEvent
parameter_list|)
block|{
comment|// Only handle resolved and uninstalled events
if|if
condition|(
name|bundleEvent
operator|.
name|getType
argument_list|()
operator|!=
name|BundleEvent
operator|.
name|RESOLVED
operator|&&
name|bundleEvent
operator|.
name|getType
argument_list|()
operator|!=
name|BundleEvent
operator|.
name|UNINSTALLED
condition|)
block|{
return|return;
block|}
name|Bundle
name|bundle
init|=
name|bundleEvent
operator|.
name|getBundle
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Remove previous informations
name|List
argument_list|<
name|URI
argument_list|>
name|repsToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reqsToRemove
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Remove old properties
name|String
name|prefix
init|=
literal|"bundle."
operator|+
name|bundle
operator|.
name|getBundleId
argument_list|()
decl_stmt|;
name|String
name|countStr
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|remove
argument_list|(
name|prefix
operator|+
literal|".reps.count"
argument_list|)
decl_stmt|;
if|if
condition|(
name|countStr
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|countStr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|rep
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|remove
argument_list|(
name|prefix
operator|+
literal|".reps.item"
operator|+
name|i
argument_list|)
decl_stmt|;
name|repsToRemove
operator|.
name|add
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|rep
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|countStr
operator|=
operator|(
name|String
operator|)
name|properties
operator|.
name|remove
argument_list|(
name|prefix
operator|+
literal|".reqs.count"
argument_list|)
expr_stmt|;
if|if
condition|(
name|countStr
operator|!=
literal|null
condition|)
block|{
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|countStr
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|req
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|remove
argument_list|(
name|prefix
operator|+
literal|".reqs.item"
operator|+
name|i
argument_list|)
decl_stmt|;
name|reqsToRemove
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
name|saveProperties
argument_list|()
expr_stmt|;
comment|// Compute new informations
name|List
argument_list|<
name|URI
argument_list|>
name|repsToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reqsToAdd
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundleEvent
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|RESOLVED
condition|)
block|{
name|Enumeration
name|featuresUrlEnumeration
init|=
name|bundle
operator|.
name|findEntries
argument_list|(
literal|"/META-INF/"
operator|+
name|FEATURE_PATH
operator|+
literal|"/"
argument_list|,
literal|"*.xml"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|featuresUrlEnumeration
operator|!=
literal|null
operator|&&
name|featuresUrlEnumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
operator|(
name|URL
operator|)
name|featuresUrlEnumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|url
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|repsToAdd
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|Repository
name|rep
init|=
name|featuresService
operator|.
name|createRepository
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Stream
operator|.
name|of
argument_list|(
name|rep
operator|.
name|getFeatures
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|f
lambda|->
name|f
operator|.
name|getInstall
argument_list|()
operator|==
literal|null
operator|||
name|Feature
operator|.
name|DEFAULT_INSTALL_MODE
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getInstall
argument_list|()
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|f
lambda|->
literal|"feature:"
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
operator|new
name|VersionRange
argument_list|(
name|f
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|reqsToAdd
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|repsToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|".reps.count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|repsToAdd
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repsToAdd
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|".reps.item"
operator|+
name|i
argument_list|,
name|repsToAdd
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|".reqs.count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|reqsToAdd
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reqsToAdd
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|prefix
operator|+
literal|".reqs.item"
operator|+
name|i
argument_list|,
name|reqsToAdd
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|saveProperties
argument_list|()
expr_stmt|;
comment|// Call features service
name|List
argument_list|<
name|Repository
argument_list|>
name|requiredRepos
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|featuresService
operator|.
name|listRequiredRepositories
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|URI
argument_list|>
name|requiredReposUris
init|=
name|requiredRepos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Repository
operator|::
name|getURI
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|requiredReposUris
operator|.
name|removeAll
argument_list|(
name|repsToRemove
argument_list|)
expr_stmt|;
name|requiredReposUris
operator|.
name|addAll
argument_list|(
name|repsToAdd
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|requirements
init|=
name|featuresService
operator|.
name|listRequirements
argument_list|()
decl_stmt|;
name|requirements
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
operator|.
name|removeAll
argument_list|(
name|reqsToRemove
argument_list|)
expr_stmt|;
name|requirements
operator|.
name|get
argument_list|(
name|ROOT_REGION
argument_list|)
operator|.
name|addAll
argument_list|(
name|reqsToAdd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reqsToRemove
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|reqsToAdd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|featuresService
operator|.
name|updateReposAndRequirements
argument_list|(
name|requiredReposUris
argument_list|,
name|requirements
argument_list|,
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to update deployed features for bundle: "
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|" - "
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|QName
name|getRootElementName
parameter_list|(
name|File
name|artifact
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|xif
operator|==
literal|null
condition|)
block|{
name|xif
operator|=
name|XMLInputFactory
operator|.
name|newFactory
argument_list|()
expr_stmt|;
name|xif
operator|.
name|setProperty
argument_list|(
name|XMLInputFactory
operator|.
name|IS_NAMESPACE_AWARE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|artifact
argument_list|)
init|)
block|{
name|XMLStreamReader
name|sr
init|=
name|xif
operator|.
name|createXMLStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|sr
operator|.
name|nextTag
argument_list|()
expr_stmt|;
return|return
name|sr
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

