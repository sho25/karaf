begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstanceSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|InstanceServiceImplTest
block|{
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|buildDirectory
init|=
name|ClassLoader
operator|.
name|getSystemResource
argument_list|(
literal|"etc/startup.properties"
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|replace
argument_list|(
literal|"startup.properties"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.etc"
argument_list|,
name|buildDirectory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|InstanceServiceImpl
name|as
init|=
operator|new
name|InstanceServiceImpl
argument_list|()
decl_stmt|;
name|File
name|f
init|=
name|tempFolder
operator|.
name|newFile
argument_list|(
name|getName
argument_list|()
operator|+
literal|".test"
argument_list|)
decl_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"featuresBoot"
argument_list|,
literal|"abc,def "
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"featuresRepositories"
argument_list|,
literal|"somescheme://xyz"
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
init|)
block|{
name|p
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|"Test comment"
argument_list|)
expr_stmt|;
block|}
name|InstanceSettings
name|s
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|8122
argument_list|,
literal|1122
argument_list|,
literal|44444
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|as
operator|.
name|addFeaturesFromSettings
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Properties
name|p2
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
init|)
block|{
name|p2
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc,def,test"
argument_list|,
name|p2
operator|.
name|get
argument_list|(
literal|"featuresBoot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"somescheme://xyz"
argument_list|,
name|p2
operator|.
name|get
argument_list|(
literal|"featuresRepositories"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurationFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|InstanceServiceImpl
name|service
init|=
operator|new
name|InstanceServiceImpl
argument_list|()
decl_stmt|;
name|service
operator|.
name|setStorageLocation
argument_list|(
name|tempFolder
operator|.
name|newFolder
argument_list|(
literal|"instances"
argument_list|)
argument_list|)
expr_stmt|;
name|InstanceSettings
name|settings
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|8122
argument_list|,
literal|1122
argument_list|,
literal|44444
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Instance
name|instance
init|=
name|service
operator|.
name|createInstance
argument_list|(
name|getName
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/config.properties"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/users.properties"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/startup.properties"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/java.util.logging.properties"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/org.apache.karaf.features.cfg"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/org.ops4j.pax.logging.cfg"
argument_list|)
expr_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/org.ops4j.pax.url.mvn.cfg"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTextResources
parameter_list|()
throws|throws
name|Exception
block|{
name|InstanceServiceImpl
name|service
init|=
operator|new
name|InstanceServiceImpl
argument_list|()
decl_stmt|;
name|service
operator|.
name|setStorageLocation
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/instances/"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|textResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|textResources
operator|.
name|put
argument_list|(
literal|"etc/myresource"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"myresource"
argument_list|)
argument_list|)
expr_stmt|;
name|InstanceSettings
name|settings
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|8122
argument_list|,
literal|1122
argument_list|,
literal|44444
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|textResources
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Instance
name|instance
init|=
name|service
operator|.
name|createInstance
argument_list|(
name|getName
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFileExists
argument_list|(
name|instance
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"etc/myresource"
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>      * Test the renaming of an existing instance.      *</p>      */
annotation|@
name|Test
specifier|public
name|void
name|testRenameInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|InstanceServiceImpl
name|service
init|=
operator|new
name|InstanceServiceImpl
argument_list|()
decl_stmt|;
name|service
operator|.
name|setStorageLocation
argument_list|(
name|tempFolder
operator|.
name|newFolder
argument_list|(
literal|"instances"
argument_list|)
argument_list|)
expr_stmt|;
name|InstanceSettings
name|settings
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|8122
argument_list|,
literal|1122
argument_list|,
literal|44444
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|service
operator|.
name|createInstance
argument_list|(
name|getName
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|service
operator|.
name|renameInstance
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getName
argument_list|()
operator|+
literal|"b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
operator|.
name|getInstance
argument_list|(
name|getName
argument_list|()
operator|+
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>      * Test the renaming of an existing instance.      *</p>      */
annotation|@
name|Test
specifier|public
name|void
name|testToSimulateRenameInstanceByExternalProcess
parameter_list|()
throws|throws
name|Exception
block|{
name|InstanceServiceImpl
name|service
init|=
operator|new
name|InstanceServiceImpl
argument_list|()
decl_stmt|;
name|File
name|storageLocation
init|=
name|tempFolder
operator|.
name|newFolder
argument_list|(
literal|"instances"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setStorageLocation
argument_list|(
name|storageLocation
argument_list|)
expr_stmt|;
name|InstanceSettings
name|settings
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|8122
argument_list|,
literal|1122
argument_list|,
literal|44444
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|service
operator|.
name|createInstance
argument_list|(
name|getName
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//to simulate the scenario that the instance name get changed by
comment|//external process, likely the admin command CLI tool, which cause
comment|//the instance storage file get updated, the AdminService should be
comment|//able to reload the storage file before check any status for the
comment|//instance
name|File
name|storageFile
init|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|InstanceServiceImpl
operator|.
name|STORAGE_FILE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|storageFile
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|storage
init|=
name|loadStorage
argument_list|(
name|storageFile
argument_list|)
decl_stmt|;
name|storage
operator|.
name|setProperty
argument_list|(
literal|"item.0.name"
argument_list|,
name|getName
argument_list|()
operator|+
literal|"b"
argument_list|)
expr_stmt|;
name|saveStorage
argument_list|(
name|storage
argument_list|,
name|storageFile
argument_list|,
literal|"testToSimulateRenameInstanceByExternalProcess"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
operator|.
name|getInstance
argument_list|(
name|getName
argument_list|()
operator|+
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSshPortChange
parameter_list|()
throws|throws
name|Exception
block|{
name|InstanceServiceImpl
name|service
init|=
operator|new
name|InstanceServiceImpl
argument_list|()
decl_stmt|;
name|File
name|storageLocation
init|=
name|tempFolder
operator|.
name|newFolder
argument_list|(
literal|"instances"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setStorageLocation
argument_list|(
name|storageLocation
argument_list|)
expr_stmt|;
name|InstanceSettings
name|settings
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|8122
argument_list|,
literal|1122
argument_list|,
literal|44444
argument_list|,
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|service
operator|.
name|createInstance
argument_list|(
name|getName
argument_list|()
argument_list|,
name|settings
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|service
operator|.
name|changeInstanceSshPort
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|9999
argument_list|)
expr_stmt|;
name|File
name|shellCfg
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
literal|"org.apache.karaf.shell.cfg"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|shellCfg
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"9999"
argument_list|,
name|props
operator|.
name|get
argument_list|(
literal|"sshPort"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
operator|.
name|getMethodName
argument_list|()
return|;
block|}
specifier|private
name|void
name|saveStorage
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|location
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|location
argument_list|)
init|)
block|{
name|props
operator|.
name|store
argument_list|(
name|os
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Properties
name|loadStorage
parameter_list|(
name|File
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|location
argument_list|)
init|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
specifier|private
name|void
name|assertFileExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|file
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|" to exist"
argument_list|,
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

