begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstanceService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstanceSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_class
specifier|public
class|class
name|CreateCommandTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCreateCommandExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|InstanceService
name|instanceService
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|InstanceService
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|instanceService
argument_list|)
expr_stmt|;
name|CreateCommand
name|cc
init|=
operator|new
name|CreateCommand
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setInstanceService
argument_list|(
name|instanceService
argument_list|)
expr_stmt|;
name|cc
operator|.
name|sshPort
operator|=
literal|9941
expr_stmt|;
name|cc
operator|.
name|rmiRegistryPort
operator|=
literal|1122
expr_stmt|;
name|cc
operator|.
name|rmiServerPort
operator|=
literal|44444
expr_stmt|;
name|cc
operator|.
name|location
operator|=
literal|"top"
expr_stmt|;
name|cc
operator|.
name|javaOpts
operator|=
literal|"foo"
expr_stmt|;
name|cc
operator|.
name|features
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|cc
operator|.
name|featureURLs
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"http://something"
argument_list|)
expr_stmt|;
name|cc
operator|.
name|instance
operator|=
literal|"myInstance"
expr_stmt|;
name|cc
operator|.
name|verbose
operator|=
literal|true
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|instanceService
argument_list|)
expr_stmt|;
comment|// check precondition
name|EasyMock
operator|.
name|reset
argument_list|(
name|instanceService
argument_list|)
expr_stmt|;
name|InstanceSettings
name|expectedIS
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|9941
argument_list|,
literal|1122
argument_list|,
literal|44444
argument_list|,
literal|"top"
argument_list|,
literal|"foo"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"http://something"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"abc"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|instanceService
operator|.
name|createInstance
argument_list|(
literal|"myInstance"
argument_list|,
name|expectedIS
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|instanceService
argument_list|)
expr_stmt|;
name|cc
operator|.
name|doExecute
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|instanceService
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

