begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|PosixFilePermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstanceService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstanceSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|main
operator|.
name|Execute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|Process
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|impl
operator|.
name|ProcessBuilderFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|impl
operator|.
name|ScriptUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|config
operator|.
name|PropertiesLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|locks
operator|.
name|FileLockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|InstanceServiceImpl
implements|implements
name|InstanceService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_FILE
init|=
literal|"instance.properties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_EXTENSION
init|=
literal|".bak"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_CFG
init|=
literal|"etc/org.apache.karaf.features.cfg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_BASE
init|=
literal|"org/apache/karaf/instance/resources/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InstanceServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT
init|=
literal|"karaf.shutdown.port"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_HOST
init|=
literal|"karaf.shutdown.host"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT_FILE
init|=
literal|"karaf.shutdown.port.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_COMMAND
init|=
literal|"karaf.shutdown.command"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_TIMEOUT
init|=
literal|"karaf.shutdown.timeout"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SHUTDOWN_COMMAND
init|=
literal|"SHUTDOWN"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_JAVA_OPTS
init|=
literal|"-Xmx512M -Dcom.sun.management.jmxremote -XX:+UnlockDiagnosticVMOptions"
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|InstanceImpl
argument_list|>
name|proxies
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|File
name|storageLocation
decl_stmt|;
specifier|private
name|long
name|stopTimeout
init|=
literal|30000
decl_stmt|;
specifier|static
class|class
name|InstanceState
block|{
name|String
name|name
decl_stmt|;
name|String
name|loc
decl_stmt|;
name|String
name|opts
decl_stmt|;
name|int
name|pid
decl_stmt|;
name|boolean
name|root
decl_stmt|;
block|}
specifier|static
class|class
name|State
block|{
name|int
name|defaultSshPortStart
init|=
literal|8101
decl_stmt|;
name|int
name|defaultRmiRegistryPortStart
init|=
literal|1099
decl_stmt|;
name|int
name|defaultRmiServerPortStart
init|=
literal|44444
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InstanceState
argument_list|>
name|instances
decl_stmt|;
specifier|public
name|State
parameter_list|()
block|{
comment|//read port start value from the root instance configuration
try|try
block|{
name|Properties
name|shellProperty
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|shellProperty
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
argument_list|,
literal|"org.apache.karaf.shell.cfg"
argument_list|)
argument_list|)
expr_stmt|;
name|defaultSshPortStart
operator|=
name|getInt
argument_list|(
name|shellProperty
argument_list|,
literal|"sshPort"
argument_list|,
literal|8101
argument_list|)
expr_stmt|;
name|Properties
name|managementProperty
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|managementProperty
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
argument_list|,
literal|"org.apache.karaf.management.cfg"
argument_list|)
argument_list|)
expr_stmt|;
name|defaultRmiRegistryPortStart
operator|=
name|getInt
argument_list|(
name|managementProperty
argument_list|,
literal|"rmiRegistryPort"
argument_list|,
literal|1099
argument_list|)
expr_stmt|;
name|defaultRmiServerPortStart
operator|=
name|getInt
argument_list|(
name|managementProperty
argument_list|,
literal|"rmiServerPort"
argument_list|,
literal|1099
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not read port start value from the root instance configuration."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|InstanceServiceImpl
parameter_list|()
block|{
name|String
name|prop
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.instances"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|storageLocation
operator|=
operator|new
name|File
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|File
name|getStorageLocation
parameter_list|()
block|{
return|return
name|storageLocation
return|;
block|}
specifier|public
name|void
name|setStorageLocation
parameter_list|(
name|File
name|storage
parameter_list|)
block|{
name|this
operator|.
name|storageLocation
operator|=
name|storage
expr_stmt|;
block|}
specifier|public
name|long
name|getStopTimeout
parameter_list|()
block|{
return|return
name|stopTimeout
return|;
block|}
specifier|public
name|void
name|setStopTimeout
parameter_list|(
name|long
name|stopTimeout
parameter_list|)
block|{
name|this
operator|.
name|stopTimeout
operator|=
name|stopTimeout
expr_stmt|;
block|}
specifier|private
name|State
name|loadData
parameter_list|(
name|Properties
name|storage
parameter_list|)
block|{
name|State
name|state
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"count"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|state
operator|.
name|defaultSshPortStart
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"ssh.port"
argument_list|,
name|state
operator|.
name|defaultSshPortStart
argument_list|)
expr_stmt|;
name|state
operator|.
name|defaultRmiRegistryPortStart
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"rmi.registry.port"
argument_list|,
name|state
operator|.
name|defaultRmiRegistryPortStart
argument_list|)
expr_stmt|;
name|state
operator|.
name|defaultRmiServerPortStart
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"rmi.server.port"
argument_list|,
name|state
operator|.
name|defaultRmiServerPortStart
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|InstanceState
name|instance
init|=
operator|new
name|InstanceState
argument_list|()
decl_stmt|;
name|instance
operator|.
name|name
operator|=
name|getString
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|instance
operator|.
name|loc
operator|=
name|getString
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|instance
operator|.
name|opts
operator|=
name|getString
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".opts"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|instance
operator|.
name|pid
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|instance
operator|.
name|root
operator|=
name|getBool
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".root"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|instance
operator|.
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
comment|// Update proxies list
for|for
control|(
name|InstanceState
name|instance
range|:
name|state
operator|.
name|instances
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|proxies
operator|.
name|containsKey
argument_list|(
name|instance
operator|.
name|name
argument_list|)
condition|)
block|{
name|proxies
operator|.
name|put
argument_list|(
name|instance
operator|.
name|name
argument_list|,
operator|new
name|InstanceImpl
argument_list|(
name|this
argument_list|,
name|instance
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|proxies
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|instances
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|proxies
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
specifier|private
name|void
name|saveData
parameter_list|(
name|State
name|state
parameter_list|,
name|Properties
name|storage
parameter_list|)
block|{
name|storage
operator|.
name|put
argument_list|(
literal|"ssh.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|defaultSshPortStart
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"rmi.registry.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|defaultRmiRegistryPortStart
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"rmi.server.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|defaultRmiServerPortStart
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|instances
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstanceState
name|instance
range|:
name|state
operator|.
name|instances
operator|.
name|values
argument_list|()
control|)
block|{
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
name|instance
operator|.
name|name
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".root"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|instance
operator|.
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|,
name|instance
operator|.
name|loc
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|instance
operator|.
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".opts"
argument_list|,
name|instance
operator|.
name|opts
operator|!=
literal|null
condition|?
name|instance
operator|.
name|opts
else|:
literal|""
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|storage
operator|.
name|containsKey
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
condition|)
block|{
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".root"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".opts"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|getBool
parameter_list|(
name|Properties
name|storage
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
name|Object
name|value
init|=
name|storage
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|value
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|def
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getInt
parameter_list|(
name|Properties
name|storage
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|def
parameter_list|)
block|{
name|Object
name|value
init|=
name|storage
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|def
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getString
parameter_list|(
name|Properties
name|storage
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|Object
name|value
init|=
name|storage
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|def
return|;
block|}
interface|interface
name|Task
parameter_list|<
name|U
parameter_list|,
name|T
parameter_list|>
block|{
name|T
name|call
parameter_list|(
name|U
name|state
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|execute
parameter_list|(
specifier|final
name|Task
argument_list|<
name|State
argument_list|,
name|T
argument_list|>
name|callback
parameter_list|,
specifier|final
name|boolean
name|writeToFile
parameter_list|)
block|{
specifier|final
name|File
name|storageFile
init|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|STORAGE_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|storageFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|storageFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|storageFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|storageFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|storageFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance storage location should be a file: "
operator|+
name|storageFile
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|storageFile
argument_list|,
name|properties
lambda|->
block|{
name|State
name|state
init|=
name|loadData
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|T
name|t
init|=
name|callback
operator|.
name|call
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeToFile
condition|)
block|{
name|saveData
argument_list|(
name|state
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
argument_list|,
name|writeToFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance storage location does not exist: "
operator|+
name|storageFile
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|logInfo
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|printOutput
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isInfoEnabled
argument_list|()
operator|||
name|printOutput
condition|)
block|{
name|String
name|formatted
init|=
name|String
operator|.
name|format
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
if|if
condition|(
name|printOutput
condition|)
block|{
name|println
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|logDebug
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|printOutput
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
operator|||
name|printOutput
condition|)
block|{
name|String
name|formatted
init|=
name|String
operator|.
name|format
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
if|if
condition|(
name|printOutput
condition|)
block|{
name|println
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|Instance
name|createInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|InstanceSettings
name|settings
parameter_list|,
specifier|final
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
if|if
condition|(
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance '"
operator|+
name|name
operator|+
literal|"' already exists"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|settings
operator|.
name|getProfiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|ProfileApplier
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|error
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Profile service package is not available"
argument_list|)
throw|;
block|}
block|}
name|String
name|loc
init|=
name|settings
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|?
name|settings
operator|.
name|getLocation
argument_list|()
else|:
name|name
decl_stmt|;
name|File
name|karafBase
init|=
operator|new
name|File
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|karafBase
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|karafBase
operator|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
name|int
name|sshPort
init|=
name|settings
operator|.
name|getSshPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|sshPort
operator|<=
literal|0
condition|)
block|{
name|sshPort
operator|=
operator|++
name|state
operator|.
name|defaultSshPortStart
expr_stmt|;
block|}
name|String
name|sshHost
init|=
name|settings
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|int
name|rmiRegistryPort
init|=
name|settings
operator|.
name|getRmiRegistryPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmiRegistryPort
operator|<=
literal|0
condition|)
block|{
name|rmiRegistryPort
operator|=
operator|++
name|state
operator|.
name|defaultRmiRegistryPortStart
expr_stmt|;
block|}
name|int
name|rmiServerPort
init|=
name|settings
operator|.
name|getRmiServerPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmiServerPort
operator|<=
literal|0
condition|)
block|{
name|rmiServerPort
operator|=
operator|++
name|state
operator|.
name|defaultRmiServerPortStart
expr_stmt|;
block|}
name|logInfo
argument_list|(
literal|"Creating new instance on SSH port %d and registry port %d / RMI server port %d at: %s"
argument_list|,
name|printOutput
argument_list|,
name|sshPort
argument_list|,
name|rmiRegistryPort
argument_list|,
name|rmiServerPort
argument_list|,
name|karafBase
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"bin"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/scripts"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"system"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"deploy"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"data"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|textResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|settings
operator|.
name|getTextResources
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|binaryResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|settings
operator|.
name|getBinaryResources
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|resources
init|=
block|{
literal|"etc/all.policy"
operator|,
literal|"etc/config.properties"
operator|,
literal|"etc/custom.properties"
operator|,
literal|"etc/distribution.info"
operator|,
literal|"etc/equinox-debug.properties"
operator|,
literal|"etc/java.util.logging.properties"
operator|,
literal|"etc/jmx.acl.cfg"
operator|,
literal|"etc/jmx.acl.java.lang.Memory.cfg"
operator|,
literal|"etc/jmx.acl.org.apache.karaf.bundle.cfg"
operator|,
literal|"etc/jmx.acl.org.apache.karaf.config.cfg"
operator|,
literal|"etc/jmx.acl.org.apache.karaf.security.jmx.cfg"
operator|,
literal|"etc/jmx.acl.osgi.compendium.cm.cfg"
operator|,
literal|"etc/jre.properties"
operator|,
literal|"etc/keys.properties"
operator|,
literal|"etc/org.apache.felix.eventadmin.impl.EventAdmin.cfg"
operator|,
literal|"etc/org.apache.felix.fileinstall-deploy.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.bundle.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.config.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.feature.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.jaas.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.kar.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.scope_bundle.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.shell.cfg"
operator|,
literal|"etc/org.apache.karaf.command.acl.system.cfg"
operator|,
literal|"etc/org.apache.karaf.features.repos.cfg"
operator|,
literal|"etc/org.apache.karaf.jaas.cfg"
operator|,
literal|"etc/org.apache.karaf.kar.cfg"
operator|,
literal|"etc/org.apache.karaf.log.cfg"
operator|,
literal|"etc/org.ops4j.pax.logging.cfg"
operator|,
literal|"etc/org.ops4j.pax.url.mvn.cfg"
operator|,
literal|"etc/shell.init.script"
operator|,
literal|"etc/users.properties"
operator|,
literal|"etc/scripts/shell.completion.script"
operator|,
name|FEATURES_CFG
block|}
empty_stmt|;
name|copyResourcesToDir
argument_list|(
name|resources
argument_list|,
name|karafBase
argument_list|,
name|textResources
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|addFeaturesFromSettings
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|FEATURES_CFG
argument_list|)
argument_list|,
name|settings
argument_list|)
expr_stmt|;
comment|// The startup.properties is now generated by the karaf maven plugin, so
comment|// we use the one from the root instance instead of embedding it
name|File
name|rootEtc
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
argument_list|)
decl_stmt|;
name|copy
argument_list|(
operator|new
name|File
argument_list|(
name|rootEtc
argument_list|,
literal|"startup.properties"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc/startup.properties"
argument_list|)
argument_list|)
expr_stmt|;
comment|// align child with any bundles we have overriden in the root instance
name|File
name|rootOverrides
init|=
operator|new
name|File
argument_list|(
name|rootEtc
argument_list|,
literal|"overrides.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootOverrides
operator|.
name|exists
argument_list|()
condition|)
block|{
name|copy
argument_list|(
name|rootOverrides
argument_list|,
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc/overrides.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-KARAF-NAME}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-KARAF-HOME}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-KARAF-BASE}"
argument_list|,
name|karafBase
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-SSH-PORT}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sshPort
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-SSH-HOST}"
argument_list|,
name|sshHost
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-RMI-REGISTRY-PORT}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|rmiRegistryPort
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-RMI-SERVER-PORT}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|rmiServerPort
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|filteredResources
init|=
block|{
literal|"etc/system.properties"
operator|,
literal|"etc/org.apache.karaf.shell.cfg"
operator|,
literal|"etc/org.apache.karaf.management.cfg"
operator|,
literal|"bin/karaf"
operator|,
literal|"bin/start"
operator|,
literal|"bin/stop"
operator|,
literal|"bin/karaf.bat"
operator|,
literal|"bin/start.bat"
operator|,
literal|"bin/stop.bat"
block|}
empty_stmt|;
name|copyFilteredResourcesToDir
argument_list|(
name|filteredResources
argument_list|,
name|karafBase
argument_list|,
name|textResources
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
try|try
block|{
name|makeFileExecutable
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/karaf"
argument_list|)
argument_list|)
expr_stmt|;
name|makeFileExecutable
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/start"
argument_list|)
argument_list|)
expr_stmt|;
name|makeFileExecutable
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/stop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not set file mode on scripts."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|resource
range|:
name|textResources
operator|.
name|keySet
argument_list|()
control|)
block|{
name|copyFilteredResourceToDir
argument_list|(
name|resource
argument_list|,
name|karafBase
argument_list|,
name|textResources
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|resource
range|:
name|binaryResources
operator|.
name|keySet
argument_list|()
control|)
block|{
name|copyBinaryResourceToDir
argument_list|(
name|resource
argument_list|,
name|karafBase
argument_list|,
name|binaryResources
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|settings
operator|.
name|getProfiles
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProfileApplier
operator|.
name|applyProfiles
argument_list|(
name|karafBase
argument_list|,
name|settings
operator|.
name|getProfiles
argument_list|()
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
block|}
name|String
name|javaOpts
init|=
name|settings
operator|.
name|getJavaOpts
argument_list|()
decl_stmt|;
if|if
condition|(
name|javaOpts
operator|==
literal|null
operator|||
name|javaOpts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|javaOpts
operator|=
name|DEFAULT_JAVA_OPTS
expr_stmt|;
block|}
name|InstanceState
name|is
init|=
operator|new
name|InstanceState
argument_list|()
decl_stmt|;
name|is
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|is
operator|.
name|loc
operator|=
name|karafBase
operator|.
name|toString
argument_list|()
expr_stmt|;
name|is
operator|.
name|opts
operator|=
name|javaOpts
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|InstanceImpl
name|instance
init|=
operator|new
name|InstanceImpl
argument_list|(
name|InstanceServiceImpl
operator|.
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|void
name|addFeaturesFromSettings
parameter_list|(
name|File
name|featuresCfg
parameter_list|,
specifier|final
name|InstanceSettings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|featuresCfg
argument_list|,
name|properties
lambda|->
block|{
name|appendToPropList
argument_list|(
name|properties
argument_list|,
literal|"featuresBoot"
argument_list|,
name|settings
operator|.
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
name|appendToPropList
argument_list|(
name|properties
argument_list|,
literal|"featuresRepositories"
argument_list|,
name|settings
operator|.
name|getFeatureURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|appendToPropList
parameter_list|(
name|Properties
name|p
parameter_list|,
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|p
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|elements
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Instance
index|[]
name|getInstances
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
name|proxies
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Instance
index|[
name|proxies
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|Instance
name|getInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
name|proxies
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|void
name|startInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|javaOpts
parameter_list|)
block|{
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already started"
argument_list|)
throw|;
block|}
name|doStart
argument_list|(
name|instance
argument_list|,
name|name
argument_list|,
name|javaOpts
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doStart
parameter_list|(
name|InstanceState
name|instance
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|javaOpts
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|opts
init|=
name|javaOpts
decl_stmt|;
if|if
condition|(
name|opts
operator|==
literal|null
operator|||
name|opts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|opts
operator|=
name|instance
operator|.
name|opts
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|==
literal|null
operator|||
name|opts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|opts
operator|=
name|DEFAULT_JAVA_OPTS
expr_stmt|;
block|}
comment|// fallback and read karafOpts from KARAF_OPTS environment if no System property present
name|String
name|karafOptsEnv
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"KARAF_OPTS"
argument_list|)
decl_stmt|;
name|String
name|karafOpts
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.opts"
argument_list|,
name|karafOptsEnv
operator|!=
literal|null
condition|?
name|karafOptsEnv
else|:
literal|""
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|instance
operator|.
name|loc
decl_stmt|;
name|File
name|libDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
name|File
name|bootLibDir
init|=
operator|new
name|File
argument_list|(
name|libDir
argument_list|,
literal|"boot"
argument_list|)
decl_stmt|;
name|File
name|childLibDir
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
name|StringBuilder
name|classpath
init|=
name|classpathFromLibDir
argument_list|(
name|bootLibDir
argument_list|)
decl_stmt|;
name|StringBuilder
name|childClasspath
init|=
name|classpathFromLibDir
argument_list|(
name|childLibDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|childClasspath
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|bootLibDir
operator|.
name|equals
argument_list|(
name|childLibDir
argument_list|)
condition|)
block|{
name|classpath
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|classpath
operator|.
name|append
argument_list|(
name|childClasspath
argument_list|)
expr_stmt|;
block|}
name|String
name|jdkOpts
decl_stmt|;
if|if
condition|(
operator|!
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"1."
argument_list|)
condition|)
block|{
name|StringBuilder
name|jdk9Classpath
init|=
name|classpathFromLibDir
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"jdk9plus"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jdk9Classpath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classpath
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
name|classpath
operator|.
name|append
argument_list|(
name|jdk9Classpath
argument_list|)
expr_stmt|;
block|}
name|jdkOpts
operator|=
literal|" --add-reads=java.xml=java.logging"
operator|+
literal|" --add-exports=java.base/org.apache.karaf.specs.locator=java.xml,ALL-UNNAMED"
operator|+
literal|" --patch-module java.base=lib/endorsed/org.apache.karaf.specs.locator-"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.version"
argument_list|)
operator|+
literal|".jar"
operator|+
literal|" --patch-module java.xml=lib/endorsed/org.apache.karaf.specs.java.xml-"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.version"
argument_list|)
operator|+
literal|".jar"
operator|+
literal|" --add-opens java.base/java.security=ALL-UNNAMED"
operator|+
literal|" --add-opens java.base/java.net=ALL-UNNAMED"
operator|+
literal|" --add-opens java.base/java.lang=ALL-UNNAMED"
operator|+
literal|" --add-opens java.base/java.util=ALL-UNNAMED"
operator|+
literal|" --add-opens java.naming/javax.naming.spi=ALL-UNNAMED"
operator|+
literal|" --add-opens java.rmi/sun.rmi.transport.tcp=ALL-UNNAMED"
operator|+
literal|" --add-exports=java.base/sun.net.www.protocol.http=ALL-UNNAMED"
operator|+
literal|" --add-exports=java.base/sun.net.www.protocol.https=ALL-UNNAMED"
operator|+
literal|" --add-exports=java.base/sun.net.www.protocol.jar=ALL-UNNAMED"
operator|+
literal|" --add-exports=jdk.xml.dom/org.w3c.dom.html=ALL-UNNAMED"
operator|+
literal|" --add-exports=jdk.naming.rmi/com.sun.jndi.url.rmi=ALL-UNNAMED"
expr_stmt|;
block|}
else|else
block|{
name|jdkOpts
operator|=
literal|" -Djava.endorsed.dirs=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"jre"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"endorsed"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"endorsed"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
name|libDir
argument_list|,
literal|"endorsed"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Djava.ext.dirs=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"jre"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"ext"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"ext"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
name|libDir
argument_list|,
literal|"ext"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
expr_stmt|;
block|}
name|String
name|command
init|=
literal|"\""
operator|+
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
name|ScriptUtils
operator|.
name|isWindows
argument_list|()
condition|?
literal|"bin\\java.exe"
else|:
literal|"bin/java"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\" "
operator|+
name|opts
operator|+
literal|" "
operator|+
name|karafOpts
operator|+
literal|" "
operator|+
name|jdkOpts
operator|+
literal|" -Djava.util.logging.config.file=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc/java.util.logging.properties"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.home=\""
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.base=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.data=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"data"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.etc=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"etc"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.log=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"log"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Djava.io.tmpdir=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"tmp"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.restart.jvm.supported=true"
operator|+
literal|" -Dkaraf.startLocalConsole=false"
operator|+
literal|" -Dkaraf.startRemoteShell=true"
operator|+
literal|" -classpath \""
operator|+
name|classpath
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
operator|+
literal|" org.apache.karaf.main.Main server"
decl_stmt|;
if|if
condition|(
name|System
operator|.
name|getenv
argument_list|(
literal|"KARAF_REDIRECT"
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|System
operator|.
name|getenv
argument_list|(
literal|"KARAF_REDIRECT"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|command
operator|=
name|command
operator|+
literal|">> "
operator|+
name|System
operator|.
name|getenv
argument_list|(
literal|"KARAF_REDIRECT"
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Starting instance "
operator|+
name|name
operator|+
literal|" with command: "
operator|+
name|command
argument_list|)
expr_stmt|;
name|Process
name|process
init|=
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|directory
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
argument_list|)
operator|.
name|command
argument_list|(
name|command
argument_list|)
operator|.
name|start
argument_list|()
decl_stmt|;
name|instance
operator|.
name|pid
operator|=
name|process
operator|.
name|getPid
argument_list|()
expr_stmt|;
block|}
specifier|private
name|StringBuilder
name|classpathFromLibDir
parameter_list|(
name|File
name|libDir
parameter_list|)
throws|throws
name|IOException
block|{
name|File
index|[]
name|jars
init|=
name|libDir
operator|.
name|listFiles
argument_list|(
parameter_list|(
name|dir
parameter_list|,
name|name
parameter_list|)
lambda|->
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|classpath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|jars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|jar
range|:
name|jars
control|)
block|{
if|if
condition|(
name|classpath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classpath
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|classpath
operator|.
name|append
argument_list|(
name|jar
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|classpath
return|;
block|}
specifier|private
name|void
name|addJar
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|groupId
parameter_list|,
name|String
name|artifactId
parameter_list|)
block|{
name|File
name|artifactDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"system"
operator|+
name|File
operator|.
name|separator
operator|+
name|groupId
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
name|File
operator|.
name|separator
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
name|artifactId
operator|+
name|File
operator|.
name|separator
argument_list|)
decl_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|jars
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|versions
init|=
name|artifactDir
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|versions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|version
range|:
name|versions
control|)
block|{
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
name|artifactDir
argument_list|,
name|version
operator|+
name|File
operator|.
name|separator
operator|+
name|artifactId
operator|+
literal|"-"
operator|+
name|version
operator|+
literal|".jar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|jar
operator|.
name|exists
argument_list|()
condition|)
block|{
name|jars
operator|.
name|put
argument_list|(
name|version
argument_list|,
name|jar
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|jars
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cound not find jar for "
operator|+
name|groupId
operator|+
literal|"/"
operator|+
name|artifactId
argument_list|)
throw|;
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|jars
operator|.
name|lastEntry
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|restartInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|javaOpts
parameter_list|)
block|{
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|String
name|current
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|String
name|location
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
decl_stmt|;
name|StringBuilder
name|classpath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|addJar
argument_list|(
name|classpath
argument_list|,
literal|"org.apache.karaf.instance"
argument_list|,
literal|"org.apache.karaf.instance.core"
argument_list|)
expr_stmt|;
name|addJar
argument_list|(
name|classpath
argument_list|,
literal|"org.apache.karaf.shell"
argument_list|,
literal|"org.apache.karaf.shell.core"
argument_list|)
expr_stmt|;
name|addJar
argument_list|(
name|classpath
argument_list|,
literal|"org.ops4j.pax.logging"
argument_list|,
literal|"pax-logging-api"
argument_list|)
expr_stmt|;
name|addJar
argument_list|(
name|classpath
argument_list|,
literal|"jline"
argument_list|,
literal|"jline"
argument_list|)
expr_stmt|;
name|String
name|command
init|=
literal|"\""
operator|+
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
name|ScriptUtils
operator|.
name|isWindows
argument_list|()
condition|?
literal|"bin\\java.exe"
else|:
literal|"bin/java"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\" "
operator|+
literal|" -Djava.util.logging.config.file=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc/java.util.logging.properties"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.home=\""
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.base=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.data=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"data"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.etc=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"etc"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.log=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"log"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.instances=\""
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.instances"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -classpath \""
operator|+
name|classpath
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
operator|+
literal|" "
operator|+
name|Execute
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" restart --java-opts \""
operator|+
name|javaOpts
operator|+
literal|"\" "
operator|+
name|name
decl_stmt|;
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|directory
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|command
argument_list|(
name|command
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
name|cleanShutdown
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
name|doStart
argument_list|(
name|instance
argument_list|,
name|name
argument_list|,
name|javaOpts
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stopInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|Integer
name|pid
init|=
name|execute
argument_list|(
name|state
lambda|->
block|{
name|int
name|rootInstancePID
init|=
literal|0
decl_stmt|;
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already stopped"
argument_list|)
throw|;
block|}
name|cleanShutdown
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|instance
operator|.
name|root
condition|)
block|{
name|Process
name|process
init|=
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|attach
argument_list|(
name|instance
operator|.
name|pid
argument_list|)
decl_stmt|;
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//can't simply destroy root instance here
comment|//as it will lose the update in instances.properties
comment|//because of no chance to run the saveData
name|rootInstancePID
operator|=
name|instance
operator|.
name|pid
expr_stmt|;
block|}
name|instance
operator|.
name|pid
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|rootInstancePID
return|;
block|}
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|pid
operator|!=
literal|0
operator|&&
name|isInstanceRoot
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|Process
name|process
decl_stmt|;
try|try
block|{
name|process
operator|=
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|attach
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Unable to cleanly shutdown root instance "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|destroyInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|renameInstance
parameter_list|(
specifier|final
name|String
name|oldName
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|,
specifier|final
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|execute
argument_list|(
name|state
lambda|->
block|{
if|if
condition|(
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|newName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|newName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|oldName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|instance
operator|.
name|root
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Root instance cannot be renamed"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|println
argument_list|(
literal|"Renaming instance "
operator|+
name|SimpleAnsi
operator|.
name|INTENSITY_BOLD
operator|+
name|oldName
operator|+
name|SimpleAnsi
operator|.
name|INTENSITY_NORMAL
operator|+
literal|" to "
operator|+
name|SimpleAnsi
operator|.
name|INTENSITY_BOLD
operator|+
name|newName
operator|+
name|SimpleAnsi
operator|.
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
comment|// rename directory
name|String
name|oldLocationPath
init|=
name|instance
operator|.
name|loc
decl_stmt|;
name|File
name|oldLocation
init|=
operator|new
name|File
argument_list|(
name|oldLocationPath
argument_list|)
decl_stmt|;
name|String
name|basedir
init|=
name|oldLocation
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|File
name|newLocation
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|newName
argument_list|)
decl_stmt|;
name|oldLocation
operator|.
name|renameTo
argument_list|(
name|newLocation
argument_list|)
expr_stmt|;
comment|// create the properties map including the instance name and instance location
comment|// TODO: replacing is bad, we should re-extract the needed files
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|oldLocationPath
argument_list|,
name|newLocation
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// replace all references to the "old" name by the new one in etc/system.properties
comment|// NB: it's replacement to avoid to override the user's changes
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"etc/system.properties"
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// replace all references to the "old" name by the new one in bin/karaf
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/karaf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/start"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/stop"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/karaf.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/start.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/stop.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// update instance
name|instance
operator|.
name|name
operator|=
name|newName
expr_stmt|;
name|instance
operator|.
name|loc
operator|=
name|newLocation
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|newName
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|InstanceImpl
name|proxy
init|=
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
name|proxy
operator|=
operator|new
name|InstanceImpl
argument_list|(
name|InstanceServiceImpl
operator|.
name|this
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|.
name|doSetName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|put
argument_list|(
name|newName
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Instance
name|cloneInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|cloneName
parameter_list|,
specifier|final
name|InstanceSettings
name|settings
parameter_list|,
specifier|final
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|instanceSshPort
init|=
name|getInstanceSshPort
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|int
name|instanceRmiRegistryPort
init|=
name|getInstanceRmiRegistryPort
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|int
name|instanceRmiServerPort
init|=
name|getInstanceRmiServerPort
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
if|if
condition|(
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|cloneName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|cloneName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
comment|// define the clone instance location
name|String
name|cloneLocationPath
init|=
name|settings
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|?
name|settings
operator|.
name|getLocation
argument_list|()
else|:
name|cloneName
decl_stmt|;
name|File
name|cloneLocation
init|=
operator|new
name|File
argument_list|(
name|cloneLocationPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cloneLocation
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|cloneLocation
operator|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|cloneLocationPath
argument_list|)
expr_stmt|;
block|}
comment|// copy instance directory
name|String
name|locationPath
init|=
name|instance
operator|.
name|loc
decl_stmt|;
name|File
name|location
init|=
operator|new
name|File
argument_list|(
name|locationPath
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|location
argument_list|,
name|cloneLocation
argument_list|)
expr_stmt|;
comment|// create the properties map including the instance name, location, ssh and rmi port numbers
comment|// TODO: replacing stuff anywhere is not really good, we might end up replacing unwanted stuff
comment|// TODO: if no ports are overriden, shouldn't we choose new ports ?
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cloneName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|locationPath
argument_list|,
name|cloneLocationPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getSshPort
argument_list|()
operator|>
literal|0
condition|)
name|props
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|instanceSshPort
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|settings
operator|.
name|getSshPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getRmiRegistryPort
argument_list|()
operator|>
literal|0
condition|)
name|props
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|instanceRmiRegistryPort
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|settings
operator|.
name|getRmiRegistryPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getRmiServerPort
argument_list|()
operator|>
literal|0
condition|)
name|props
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|instanceRmiServerPort
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|settings
operator|.
name|getRmiServerPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// filtering clone files
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/custom.properties"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/system.properties"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/karaf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/start"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/stop"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/karaf.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/start.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/stop.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// create and add the clone instance in the registry
name|String
name|javaOpts
init|=
name|settings
operator|.
name|getJavaOpts
argument_list|()
decl_stmt|;
if|if
condition|(
name|javaOpts
operator|==
literal|null
operator|||
name|javaOpts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|javaOpts
operator|=
name|DEFAULT_JAVA_OPTS
expr_stmt|;
block|}
name|InstanceState
name|is
init|=
operator|new
name|InstanceState
argument_list|()
decl_stmt|;
name|is
operator|.
name|name
operator|=
name|cloneName
expr_stmt|;
name|is
operator|.
name|loc
operator|=
name|cloneLocation
operator|.
name|toString
argument_list|()
expr_stmt|;
name|is
operator|.
name|opts
operator|=
name|javaOpts
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|cloneName
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|InstanceImpl
name|cloneInstance
init|=
operator|new
name|InstanceImpl
argument_list|(
name|InstanceServiceImpl
operator|.
name|this
argument_list|,
name|cloneName
argument_list|)
decl_stmt|;
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|put
argument_list|(
name|cloneName
argument_list|,
name|cloneInstance
argument_list|)
expr_stmt|;
return|return
name|cloneInstance
return|;
block|}
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkPid
parameter_list|(
name|InstanceState
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
name|Process
name|process
init|=
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|attach
argument_list|(
name|instance
operator|.
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|process
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|instance
operator|.
name|pid
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|cleanShutdown
parameter_list|(
name|InstanceState
name|instance
parameter_list|)
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
name|PropertiesLoader
operator|.
name|loadPropertiesFile
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.base"
argument_list|,
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.home"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.data"
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
argument_list|,
literal|"data"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.etc"
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
argument_list|,
literal|"etc"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.log"
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|"log"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|InterpolationHelper
operator|.
name|performSubstitution
argument_list|(
name|props
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_HOST
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|String
name|portFile
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT_FILE
argument_list|)
decl_stmt|;
name|String
name|shutdown
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_COMMAND
argument_list|,
name|DEFAULT_SHUTDOWN_COMMAND
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
operator|&&
name|portFile
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|portFile
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|String
name|portStr
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portStr
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We found the port, try to send the command
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|shutdown
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|stopTimeout
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_TIMEOUT
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|getStopTimeout
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|stopTimeout
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|t
operator|&&
name|instance
operator|.
name|pid
operator|>
literal|0
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Unable to cleanly shutdown instance "
operator|+
name|instance
operator|.
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|getInstanceSshPort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshPort"
argument_list|)
return|;
block|}
name|void
name|changeInstanceSshPort
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|setKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshPort"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|String
name|getInstanceSshHost
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafHost
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshHost"
argument_list|)
return|;
block|}
name|int
name|getInstanceRmiRegistryPort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiRegistryPort"
argument_list|)
return|;
block|}
name|void
name|changeInstanceRmiRegistryPort
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|setKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiRegistryPort"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|String
name|getInstanceRmiRegistryHost
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafHost
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiRegistryHost"
argument_list|)
return|;
block|}
name|int
name|getInstanceRmiServerPort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiServerPort"
argument_list|)
return|;
block|}
name|void
name|changeInstanceRmiServerPort
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|setKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiServerPort"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|String
name|getInstanceRmiServerHost
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafHost
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiServerHost"
argument_list|)
return|;
block|}
specifier|private
name|int
name|getKarafPort
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
name|getKarafPort
argument_list|(
name|state
argument_list|,
name|name
argument_list|,
name|path
argument_list|,
name|key
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|getKarafPort
parameter_list|(
name|State
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
name|path
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|f
argument_list|,
name|properties
lambda|->
block|{
name|Object
name|obj
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|obj
operator|instanceof
name|Number
condition|?
operator|(
operator|(
name|Number
operator|)
name|obj
operator|)
operator|.
name|intValue
argument_list|()
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|private
name|void
name|setKarafPort
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance is not stopped"
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|f
argument_list|,
name|properties
lambda|->
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|port
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getKarafHost
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|getKarafHost
argument_list|(
name|state
argument_list|,
name|name
argument_list|,
name|path
argument_list|,
name|key
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|String
name|getKarafHost
parameter_list|(
name|State
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
name|path
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|f
argument_list|,
parameter_list|(
name|Properties
name|properties
parameter_list|)
lambda|->
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|"0.0.0.0"
return|;
block|}
block|}
name|boolean
name|isInstanceRoot
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|instance
operator|.
name|root
return|;
block|}
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|String
name|getInstanceLocation
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|instance
operator|.
name|loc
return|;
block|}
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|int
name|getInstancePid
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|boolean
name|updateInstanceProperties
init|=
name|isInstancePidNeedUpdate
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
operator|.
name|pid
return|;
block|}
argument_list|,
name|updateInstanceProperties
argument_list|)
return|;
block|}
name|String
name|getInstanceJavaOpts
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|instance
operator|.
name|opts
return|;
block|}
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|void
name|changeInstanceJavaOpts
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|opts
parameter_list|)
block|{
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|instance
operator|.
name|opts
operator|=
name|opts
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|getInstanceState
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|boolean
name|updateInstanceProperties
init|=
name|isInstancePidNeedUpdate
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|int
name|port
init|=
name|getKarafPort
argument_list|(
name|state
argument_list|,
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshPort"
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|getKarafHost
argument_list|(
name|state
argument_list|,
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshHost"
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
literal|"0.0.0.0"
argument_list|)
condition|)
block|{
name|host
operator|=
literal|"localhost"
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
operator|.
name|isDirectory
argument_list|()
operator|||
name|port
operator|<=
literal|0
condition|)
block|{
return|return
name|Instance
operator|.
name|ERROR
return|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|==
literal|0
condition|)
block|{
return|return
name|Instance
operator|.
name|STOPPED
return|;
block|}
else|else
block|{
try|try
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Instance
operator|.
name|STARTED
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|Instance
operator|.
name|STARTING
return|;
block|}
block|}
argument_list|,
name|updateInstanceProperties
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|deleteFile
parameter_list|(
name|File
name|fileToDelete
parameter_list|)
block|{
if|if
condition|(
name|fileToDelete
operator|==
literal|null
operator|||
operator|!
name|fileToDelete
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fileToDelete
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|fileToDelete
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|&=
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|&=
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|result
operator|&=
name|fileToDelete
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|copyResourcesToDir
parameter_list|(
name|String
index|[]
name|resourcesToCopy
parameter_list|,
name|File
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|resources
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|resource
range|:
name|resourcesToCopy
control|)
block|{
name|copyResourceToDir
argument_list|(
name|resource
argument_list|,
name|target
argument_list|,
name|resources
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyResourceToDir
parameter_list|(
name|String
name|resource
parameter_list|,
name|File
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|resources
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"Creating file: %s"
argument_list|,
name|printOutput
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceStream
argument_list|(
name|resource
argument_list|,
name|resources
argument_list|)
init|;                 OutputStream os = new FileOutputStream(outFile)
block|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|logInfo
argument_list|(
literal|"\tWARNING: unable to find %s"
argument_list|,
literal|true
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyStream
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
specifier|private
name|InputStream
name|getResourceStream
parameter_list|(
name|String
name|resource
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|resources
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|resources
operator|.
name|containsKey
argument_list|(
name|resource
argument_list|)
condition|?
name|resources
operator|.
name|remove
argument_list|(
name|resource
argument_list|)
operator|.
name|openStream
argument_list|()
else|:
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|RESOURCE_BASE
operator|+
name|resource
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|println
parameter_list|(
name|String
name|st
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|st
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
specifier|static
name|Properties
name|loadPropertiesFile
parameter_list|(
name|URL
name|configPropURL
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|configPropURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|configProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_function

begin_comment
comment|/**      * Read stream one line at a time so that we can use the platform      * line ending when we write it out.      * @param is      * @param os      */
end_comment

begin_function
specifier|private
name|void
name|copyStream
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|)
block|{
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|filterResource
parameter_list|(
name|File
name|basedir
parameter_list|,
name|String
name|path
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|File
name|bak
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|path
operator|+
name|BACKUP_EXTENSION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// rename the file to the backup one
name|file
operator|.
name|renameTo
argument_list|(
name|bak
argument_list|)
expr_stmt|;
comment|// copy and filter the bak file back to the original name
name|copyAndFilterResource
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|bak
argument_list|)
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// remove the bak file
name|bak
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|copyFilteredResourcesToDir
parameter_list|(
name|String
index|[]
name|resourcesToCopy
parameter_list|,
name|File
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|resources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|resource
range|:
name|resourcesToCopy
control|)
block|{
name|copyFilteredResourceToDir
argument_list|(
name|resource
argument_list|,
name|target
argument_list|,
name|resources
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|copyFilteredResourceToDir
parameter_list|(
name|String
name|resource
parameter_list|,
name|File
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|resources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"Creating file: %s"
argument_list|,
name|printOutput
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceStream
argument_list|(
name|resource
argument_list|,
name|resources
argument_list|)
init|;                 OutputStream os = new FileOutputStream(outFile)
block|)
block|{
name|copyAndFilterResource
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
unit|}      private
name|void
name|copyAndFilterResource
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|OutputStream
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read it line at a time so that we can use the platform line ending when we write it out.
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|source
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|line
operator|=
name|filter
argument_list|(
name|line
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|copyBinaryResourceToDir
parameter_list|(
name|String
name|resource
parameter_list|,
name|File
name|target
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|URL
argument_list|>
name|resources
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"Creating file: %s"
argument_list|,
name|printOutput
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|getResourceStream
argument_list|(
name|resource
argument_list|,
name|resources
argument_list|)
init|;                 OutputStream os = new FileOutputStream(outFile)
block|)
block|{
name|StreamUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
unit|}      private
name|String
name|filter
parameter_list|(
name|String
name|line
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|i
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|p1
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|>=
literal|0
condition|)
block|{
name|String
name|l1
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|String
name|l2
init|=
name|line
operator|.
name|substring
argument_list|(
name|p1
operator|+
name|i
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|=
name|l1
operator|+
name|i
operator|.
name|getValue
argument_list|()
operator|+
name|l2
expr_stmt|;
block|}
block|}
return|return
name|line
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|mkdir
parameter_list|(
name|File
name|karafBase
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logDebug
argument_list|(
literal|"Creating dir: %s"
argument_list|,
name|printOutput
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|makeFileExecutable
parameter_list|(
name|File
name|serviceFile
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|permissions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|permissions
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OWNER_EXECUTE
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|GROUP_EXECUTE
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|add
argument_list|(
name|PosixFilePermission
operator|.
name|OTHERS_EXECUTE
argument_list|)
expr_stmt|;
comment|// Get the existing permissions and add the executable permissions to them
name|Set
argument_list|<
name|PosixFilePermission
argument_list|>
name|filePermissions
init|=
name|Files
operator|.
name|getPosixFilePermissions
argument_list|(
name|serviceFile
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
name|filePermissions
operator|.
name|addAll
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|Files
operator|.
name|setPosixFilePermissions
argument_list|(
name|serviceFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|filePermissions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
name|serviceFile
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|copy
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cache.lock"
argument_list|)
condition|)
block|{
comment|// ignore cache.lock file
return|return;
block|}
if|if
condition|(
name|source
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lock"
argument_list|)
condition|)
block|{
comment|// ignore lock file
return|return;
block|}
if|if
condition|(
name|source
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"transaction_\\d+\\.log"
argument_list|)
condition|)
block|{
comment|// ignore active txlog files
return|return;
block|}
if|if
condition|(
name|source
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".instance"
argument_list|)
condition|)
block|{
comment|// ignore instance bundles cache
return|return;
block|}
if|if
condition|(
name|source
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|destination
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destination
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|children
init|=
name|source
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|contains
argument_list|(
literal|"instances"
argument_list|)
operator|&&
operator|!
name|child
operator|.
name|contains
argument_list|(
literal|"lib"
argument_list|)
condition|)
name|copy
argument_list|(
operator|new
name|File
argument_list|(
name|source
argument_list|,
name|child
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|destination
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
init|;                 OutputStream out = new FileOutputStream(destination)
block|)
block|{
name|StreamUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
unit|}      public
name|void
name|changeInstanceSshHost
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|)
throws|throws
name|Exception
block|{
name|setKarafHost
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshHost"
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|setKarafHost
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|host
parameter_list|)
throws|throws
name|IOException
block|{
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance is not stopped"
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|f
argument_list|,
name|properties
lambda|->
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|isInstancePidNeedUpdate
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
name|state
lambda|->
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|int
name|originalPid
init|=
name|instance
operator|.
name|pid
decl_stmt|;
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|int
name|newPid
init|=
name|instance
operator|.
name|pid
decl_stmt|;
return|return
name|originalPid
operator|!=
name|newPid
return|;
block|}
argument_list|,
literal|false
argument_list|)
return|;
block|}
end_function

begin_class
specifier|private
specifier|static
class|class
name|ProfileApplier
block|{
comment|// Verify that profile package is wired correctly
specifier|static
name|void
name|verify
parameter_list|()
block|{
name|Profile
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|applyProfiles
parameter_list|(
name|File
name|karafBase
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|profiles
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|BundleContext
name|bundleContext
init|=
name|FrameworkUtil
operator|.
name|getBundle
argument_list|(
name|ProfileApplier
operator|.
name|class
argument_list|)
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|ServiceReference
argument_list|<
name|ProfileService
argument_list|>
name|reference
init|=
name|bundleContext
operator|.
name|getServiceReference
argument_list|(
name|ProfileService
operator|.
name|class
argument_list|)
decl_stmt|;
name|ProfileService
name|service
init|=
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"temp"
argument_list|)
operator|.
name|addParents
argument_list|(
name|profiles
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|overlay
init|=
name|service
operator|.
name|getOverlayProfile
argument_list|(
name|profile
argument_list|)
decl_stmt|;
specifier|final
name|Profile
name|effective
init|=
name|service
operator|.
name|getEffectiveProfile
argument_list|(
name|overlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|configs
init|=
name|effective
operator|.
name|getFileConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|config
range|:
name|configs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pid
init|=
name|config
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pid
operator|.
name|equals
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
operator|+
name|Profile
operator|.
name|PROPERTIES_SUFFIX
argument_list|)
condition|)
block|{
name|Path
name|configFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|karafBase
operator|.
name|toString
argument_list|()
argument_list|,
literal|"etc"
argument_list|,
name|pid
argument_list|)
decl_stmt|;
name|logDebug
argument_list|(
literal|"Creating file: %s"
argument_list|,
name|printOutput
argument_list|,
name|configFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|FileLockUtils
operator|.
name|execute
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|FEATURES_CFG
argument_list|)
argument_list|,
name|properties
lambda|->
block|{
name|appendToPropList
argument_list|(
name|properties
argument_list|,
literal|"featuresBoot"
argument_list|,
name|effective
operator|.
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
name|appendToPropList
argument_list|(
name|properties
argument_list|,
literal|"featuresRepositories"
argument_list|,
name|effective
operator|.
name|getRepositories
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
end_class

unit|}
end_unit

