begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|command
operator|.
name|completers
operator|.
name|InstanceCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Completion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|MultiException
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"instance"
argument_list|,
name|name
operator|=
literal|"restart"
argument_list|,
name|description
operator|=
literal|"Restart an existing container instance."
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|RestartCommand
extends|extends
name|InstanceCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-d"
argument_list|,
name|aliases
operator|=
block|{
literal|"--debug"
block|}
argument_list|,
name|description
operator|=
literal|"Start the instance in debug mode"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|debug
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-o"
argument_list|,
name|aliases
operator|=
block|{
literal|"--java-opts"
block|}
argument_list|,
name|description
operator|=
literal|"Java options when launching the instance"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|javaOpts
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"name"
argument_list|,
name|description
operator|=
literal|"The name of the container instance"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
annotation|@
name|Completion
argument_list|(
name|InstanceCompleter
operator|.
name|class
argument_list|)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|instances
init|=
literal|null
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEBUG_OPTS
init|=
literal|" -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_OPTS
init|=
literal|"-server -Xmx512M -Dcom.sun.management.jmxremote"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiException
name|exception
init|=
operator|new
name|MultiException
argument_list|(
literal|"Error starting instance(s)"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Instance
argument_list|>
name|toWaitFor
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Instance
name|instance
range|:
name|getMatchingInstances
argument_list|(
name|instances
argument_list|)
control|)
block|{
try|try
block|{
name|String
name|opts
init|=
name|javaOpts
decl_stmt|;
if|if
condition|(
name|opts
operator|==
literal|null
condition|)
block|{
name|opts
operator|=
name|instance
operator|.
name|getJavaOpts
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|==
literal|null
condition|)
block|{
name|opts
operator|=
name|DEFAULT_OPTS
expr_stmt|;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|opts
operator|+=
name|DEBUG_OPTS
expr_stmt|;
block|}
name|instance
operator|.
name|restart
argument_list|(
name|opts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|.
name|addException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|exception
operator|.
name|throwIfExceptions
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|allStarted
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Instance
name|child
range|:
name|toWaitFor
control|)
block|{
name|allStarted
operator|&=
name|Instance
operator|.
name|STARTED
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allStarted
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

