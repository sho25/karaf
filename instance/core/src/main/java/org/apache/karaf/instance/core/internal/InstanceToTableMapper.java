begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstancesMBean
import|;
end_import

begin_class
specifier|public
class|class
name|InstanceToTableMapper
block|{
specifier|private
name|InstanceToTableMapper
parameter_list|()
block|{     }
specifier|private
specifier|static
name|CompositeDataSupport
name|mapInstance
parameter_list|(
name|Instance
name|instance
parameter_list|,
name|CompositeType
name|comp
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|String
name|state
decl_stmt|;
try|try
block|{
name|state
operator|=
name|instance
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|state
operator|=
literal|"Error"
expr_stmt|;
block|}
name|Object
index|[]
name|itemValues
init|=
operator|new
name|Object
index|[]
block|{
name|instance
operator|.
name|getPid
argument_list|()
block|,
name|instance
operator|.
name|getName
argument_list|()
block|,
name|instance
operator|.
name|isRoot
argument_list|()
block|,
name|instance
operator|.
name|getSshPort
argument_list|()
block|,
name|instance
operator|.
name|getRmiRegistryPort
argument_list|()
block|,
name|instance
operator|.
name|getRmiServerPort
argument_list|()
block|,
name|state
block|,
name|instance
operator|.
name|getLocation
argument_list|()
block|,
name|instance
operator|.
name|getJavaOpts
argument_list|()
block|}
decl_stmt|;
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|comp
argument_list|,
name|InstancesMBean
operator|.
name|INSTANCE
argument_list|,
name|itemValues
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|CompositeType
name|createRowType
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|String
name|desc
init|=
literal|"This type describes Karaf instance"
decl_stmt|;
name|OpenType
argument_list|<
name|?
argument_list|>
index|[]
name|itemTypes
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
decl_stmt|;
name|String
index|[]
name|descriptions
init|=
operator|new
name|String
index|[]
block|{
literal|"The Process ID of the instance or 0 if not running"
block|,
literal|"The name of the instance"
block|,
literal|"Whether the instance is root"
block|,
literal|"The SSH port that can be used to connect to the instance"
block|,
literal|"The RMI registry port that can be used to manage the instance"
block|,
literal|"The RMI server port that can be used to manage the instance"
block|,
literal|"The state of the instance"
block|,
literal|"The location of the instance"
block|,
literal|"The Java options of the instance"
block|}
decl_stmt|;
name|CompositeType
name|comp
init|=
operator|new
name|CompositeType
argument_list|(
literal|"Instances"
argument_list|,
name|desc
argument_list|,
name|InstancesMBean
operator|.
name|INSTANCE
argument_list|,
name|descriptions
argument_list|,
name|itemTypes
argument_list|)
decl_stmt|;
return|return
name|comp
return|;
block|}
specifier|public
specifier|static
name|TabularData
name|tableFrom
parameter_list|(
name|List
argument_list|<
name|Instance
argument_list|>
name|instances
parameter_list|)
block|{
try|try
block|{
name|CompositeType
name|rowType
init|=
name|createRowType
argument_list|()
decl_stmt|;
name|TabularType
name|tableType
init|=
operator|new
name|TabularType
argument_list|(
literal|"Instances"
argument_list|,
literal|"Table of all Karaf instances"
argument_list|,
name|rowType
argument_list|,
operator|new
name|String
index|[]
block|{
name|InstancesMBean
operator|.
name|INSTANCE_NAME
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|table
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tableType
argument_list|)
decl_stmt|;
for|for
control|(
name|Instance
name|instance
range|:
name|instances
control|)
block|{
name|CompositeDataSupport
name|row
init|=
name|mapInstance
argument_list|(
name|instance
argument_list|,
name|rowType
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
return|return
name|table
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error building instance table"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

