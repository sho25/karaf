begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstanceService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|instance
operator|.
name|core
operator|.
name|InstanceSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|Process
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|impl
operator|.
name|ProcessBuilderFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|impl
operator|.
name|ScriptUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|properties
operator|.
name|FileLockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_class
specifier|public
class|class
name|InstanceServiceImpl
implements|implements
name|InstanceService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_FILE
init|=
literal|"instance.properties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_EXTENSION
init|=
literal|".bak"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_CFG
init|=
literal|"etc/org.apache.karaf.features.cfg"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InstanceServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT
init|=
literal|"karaf.shutdown.port"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_HOST
init|=
literal|"karaf.shutdown.host"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT_FILE
init|=
literal|"karaf.shutdown.port.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_COMMAND
init|=
literal|"karaf.shutdown.command"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PID_FILE
init|=
literal|"karaf.shutdown.pid.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SHUTDOWN_COMMAND
init|=
literal|"SHUTDOWN"
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|InstanceImpl
argument_list|>
name|proxies
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|InstanceImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|File
name|storageLocation
decl_stmt|;
specifier|private
name|long
name|stopTimeout
init|=
literal|30000
decl_stmt|;
specifier|static
class|class
name|InstanceState
block|{
name|String
name|name
decl_stmt|;
name|String
name|loc
decl_stmt|;
name|String
name|opts
decl_stmt|;
name|int
name|pid
decl_stmt|;
name|boolean
name|root
decl_stmt|;
block|}
specifier|static
class|class
name|State
block|{
name|int
name|defaultSshPortStart
init|=
literal|8101
decl_stmt|;
name|int
name|defaultRmiRegistryPortStart
init|=
literal|1099
decl_stmt|;
name|int
name|defaultRmiServerPortStart
init|=
literal|44444
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InstanceState
argument_list|>
name|instances
decl_stmt|;
block|}
specifier|public
name|File
name|getStorageLocation
parameter_list|()
block|{
return|return
name|storageLocation
return|;
block|}
specifier|public
name|void
name|setStorageLocation
parameter_list|(
name|File
name|storage
parameter_list|)
block|{
name|this
operator|.
name|storageLocation
operator|=
name|storage
expr_stmt|;
block|}
specifier|public
name|long
name|getStopTimeout
parameter_list|()
block|{
return|return
name|stopTimeout
return|;
block|}
specifier|public
name|void
name|setStopTimeout
parameter_list|(
name|long
name|stopTimeout
parameter_list|)
block|{
name|this
operator|.
name|stopTimeout
operator|=
name|stopTimeout
expr_stmt|;
block|}
specifier|private
name|State
name|loadData
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|storage
parameter_list|)
block|{
name|State
name|state
init|=
operator|new
name|State
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"count"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|state
operator|.
name|defaultSshPortStart
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"ssh.port"
argument_list|,
name|state
operator|.
name|defaultSshPortStart
argument_list|)
expr_stmt|;
name|state
operator|.
name|defaultRmiRegistryPortStart
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"rmi.registry.port"
argument_list|,
name|state
operator|.
name|defaultRmiRegistryPortStart
argument_list|)
expr_stmt|;
name|state
operator|.
name|defaultRmiServerPortStart
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"rmi.server.port"
argument_list|,
name|state
operator|.
name|defaultRmiServerPortStart
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|InstanceState
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|InstanceState
name|instance
init|=
operator|new
name|InstanceState
argument_list|()
decl_stmt|;
name|instance
operator|.
name|name
operator|=
name|getString
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|instance
operator|.
name|loc
operator|=
name|getString
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|instance
operator|.
name|opts
operator|=
name|getString
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".opts"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|instance
operator|.
name|pid
operator|=
name|getInt
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|instance
operator|.
name|root
operator|=
name|getBool
argument_list|(
name|storage
argument_list|,
literal|"item."
operator|+
name|i
operator|+
literal|".root"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|instance
operator|.
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
comment|// Update proxies list
for|for
control|(
name|InstanceState
name|instance
range|:
name|state
operator|.
name|instances
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|proxies
operator|.
name|containsKey
argument_list|(
name|instance
operator|.
name|name
argument_list|)
condition|)
block|{
name|proxies
operator|.
name|put
argument_list|(
name|instance
operator|.
name|name
argument_list|,
operator|new
name|InstanceImpl
argument_list|(
name|this
argument_list|,
name|instance
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|this
operator|.
name|proxies
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|instances
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|this
operator|.
name|proxies
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|state
return|;
block|}
specifier|private
name|void
name|saveData
parameter_list|(
name|State
name|state
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|storage
parameter_list|)
block|{
name|storage
operator|.
name|put
argument_list|(
literal|"ssh.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|defaultSshPortStart
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"rmi.registry.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|defaultRmiRegistryPortStart
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"rmi.server.port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|defaultRmiServerPortStart
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|state
operator|.
name|instances
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstanceState
name|instance
range|:
name|state
operator|.
name|instances
operator|.
name|values
argument_list|()
control|)
block|{
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
name|instance
operator|.
name|name
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".root"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|instance
operator|.
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|,
name|instance
operator|.
name|loc
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|instance
operator|.
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|put
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".opts"
argument_list|,
name|instance
operator|.
name|opts
operator|!=
literal|null
condition|?
name|instance
operator|.
name|opts
else|:
literal|""
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
while|while
condition|(
name|storage
operator|.
name|containsKey
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
condition|)
block|{
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".root"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|)
expr_stmt|;
name|storage
operator|.
name|remove
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".opts"
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|getBool
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|storage
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|def
parameter_list|)
block|{
name|Object
name|value
init|=
name|storage
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|def
return|;
block|}
block|}
specifier|private
name|int
name|getInt
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|storage
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|def
parameter_list|)
block|{
name|Object
name|value
init|=
name|storage
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|def
return|;
block|}
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|storage
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|Object
name|value
init|=
name|storage
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|def
return|;
block|}
interface|interface
name|Task
parameter_list|<
name|T
parameter_list|>
block|{
name|T
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|synchronized
parameter_list|<
name|T
parameter_list|>
name|T
name|execute
parameter_list|(
specifier|final
name|Task
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
block|{
specifier|final
name|File
name|storageFile
init|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|STORAGE_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|storageFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|storageFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|storageFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|storageFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|storageFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance storage location should be a file: "
operator|+
name|storageFile
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|storageFile
argument_list|,
operator|new
name|FileLockUtils
operator|.
name|CallableWithProperties
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|call
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|State
name|state
init|=
name|loadData
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|T
name|t
init|=
name|callback
operator|.
name|call
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|saveData
argument_list|(
name|state
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance storage location does not exist: "
operator|+
name|storageFile
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|refreshInstance
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|private
name|void
name|logInfo
parameter_list|(
name|String
name|message
parameter_list|,
name|boolean
name|printOutput
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isInfoEnabled
argument_list|()
operator|||
name|printOutput
condition|)
block|{
name|String
name|formatted
init|=
name|String
operator|.
name|format
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
if|if
condition|(
name|printOutput
condition|)
block|{
name|println
argument_list|(
name|formatted
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|Instance
name|createInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|InstanceSettings
name|settings
parameter_list|,
specifier|final
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Instance
argument_list|>
argument_list|()
block|{
specifier|public
name|Instance
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance '"
operator|+
name|name
operator|+
literal|"' already exists"
argument_list|)
throw|;
block|}
name|String
name|loc
init|=
name|settings
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|?
name|settings
operator|.
name|getLocation
argument_list|()
else|:
name|name
decl_stmt|;
name|File
name|karafBase
init|=
operator|new
name|File
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|karafBase
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|karafBase
operator|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
name|int
name|sshPort
init|=
name|settings
operator|.
name|getSshPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|sshPort
operator|<=
literal|0
condition|)
block|{
name|sshPort
operator|=
operator|++
name|state
operator|.
name|defaultSshPortStart
expr_stmt|;
block|}
name|int
name|rmiRegistryPort
init|=
name|settings
operator|.
name|getRmiRegistryPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmiRegistryPort
operator|<=
literal|0
condition|)
block|{
name|rmiRegistryPort
operator|=
operator|++
name|state
operator|.
name|defaultRmiRegistryPortStart
expr_stmt|;
block|}
name|int
name|rmiServerPort
init|=
name|settings
operator|.
name|getRmiServerPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmiServerPort
operator|<=
literal|0
condition|)
block|{
name|rmiServerPort
operator|=
operator|++
name|state
operator|.
name|defaultRmiServerPortStart
expr_stmt|;
block|}
name|logInfo
argument_list|(
literal|"Creating new instance on SSH port %d and registry port %d / RMI server port %d at: %s"
argument_list|,
name|printOutput
argument_list|,
name|sshPort
argument_list|,
name|rmiRegistryPort
argument_list|,
name|rmiServerPort
argument_list|,
name|karafBase
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"bin"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"system"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"deploy"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"data"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/config.properties"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/jre.properties"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/custom.properties"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/java.util.logging.properties"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.felix.fileinstall-deploy.cfg"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.karaf.features.obr.cfg"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.karaf.features.repos.cfg"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.karaf.log.cfg"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.ops4j.pax.logging.cfg"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.ops4j.pax.url.mvn.cfg"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/users.properties"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/keys.properties"
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
name|FEATURES_CFG
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|addFeaturesFromSettings
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|FEATURES_CFG
argument_list|)
argument_list|,
name|settings
argument_list|)
expr_stmt|;
comment|// The startup.properties is now generated by the karaf maven plugin, so
comment|// we use the one from the root instance instead of embedding it
name|File
name|curbase
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|)
decl_stmt|;
name|copy
argument_list|(
operator|new
name|File
argument_list|(
name|curbase
argument_list|,
literal|"etc/startup.properties"
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc/startup.properties"
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-KARAF-NAME}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-KARAF-HOME}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-KARAF-BASE}"
argument_list|,
name|karafBase
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-SSH-PORT}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sshPort
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-RMI-REGISTRY-PORT}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|rmiRegistryPort
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${SUBST-RMI-SERVER-PORT}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|rmiServerPort
argument_list|)
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/system.properties"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
comment|// If we use batch files, use batch files, else use bash scripts (even on cygwin)
name|boolean
name|windows
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Win"
argument_list|)
decl_stmt|;
name|boolean
name|cygwin
init|=
name|windows
operator|&&
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|,
literal|"bin/admin"
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|windows
operator|&&
operator|!
name|cygwin
condition|)
block|{
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/karaf.bat"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/start.bat"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/stop.bat"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/karaf"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/start"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/stop"
argument_list|,
name|props
argument_list|,
name|printOutput
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cygwin
condition|)
block|{
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/karaf"
argument_list|)
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/start"
argument_list|)
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/stop"
argument_list|)
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|javaOpts
init|=
name|settings
operator|.
name|getJavaOpts
argument_list|()
decl_stmt|;
if|if
condition|(
name|javaOpts
operator|==
literal|null
operator|||
name|javaOpts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|javaOpts
operator|=
literal|"-server -Xmx512M -Dcom.sun.management.jmxremote"
expr_stmt|;
block|}
name|InstanceState
name|is
init|=
operator|new
name|InstanceState
argument_list|()
decl_stmt|;
name|is
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|is
operator|.
name|loc
operator|=
name|karafBase
operator|.
name|toString
argument_list|()
expr_stmt|;
name|is
operator|.
name|opts
operator|=
name|javaOpts
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|InstanceImpl
name|instance
init|=
operator|new
name|InstanceImpl
argument_list|(
name|InstanceServiceImpl
operator|.
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|void
name|addFeaturesFromSettings
parameter_list|(
name|File
name|featuresCfg
parameter_list|,
specifier|final
name|InstanceSettings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|featuresCfg
argument_list|,
operator|new
name|FileLockUtils
operator|.
name|RunnableWithProperties
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|appendToPropList
argument_list|(
name|properties
argument_list|,
literal|"featuresBoot"
argument_list|,
name|settings
operator|.
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
name|appendToPropList
argument_list|(
name|properties
argument_list|,
literal|"featuresRepositories"
argument_list|,
name|settings
operator|.
name|getFeatureURLs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendToPropList
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|p
parameter_list|,
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|elements
parameter_list|)
block|{
if|if
condition|(
name|elements
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|p
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|elements
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Instance
index|[]
name|getInstances
parameter_list|()
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Instance
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Instance
index|[]
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|proxies
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Instance
index|[
name|proxies
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Instance
name|getInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Instance
argument_list|>
argument_list|()
block|{
specifier|public
name|Instance
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|proxies
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|void
name|startInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|javaOpts
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already started"
argument_list|)
throw|;
block|}
name|String
name|opts
init|=
name|javaOpts
decl_stmt|;
if|if
condition|(
name|opts
operator|==
literal|null
operator|||
name|opts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|opts
operator|=
name|instance
operator|.
name|opts
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|==
literal|null
operator|||
name|opts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|opts
operator|=
literal|"-server -Xmx512M -Dcom.sun.management.jmxremote"
expr_stmt|;
block|}
name|String
name|karafOpts
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.opts"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|File
name|libDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
name|File
index|[]
name|jars
init|=
name|libDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|StringBuilder
name|classpath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|jar
range|:
name|jars
control|)
block|{
if|if
condition|(
name|classpath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classpath
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|classpath
operator|.
name|append
argument_list|(
name|jar
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|location
init|=
name|instance
operator|.
name|loc
decl_stmt|;
name|String
name|command
init|=
literal|"\""
operator|+
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
name|ScriptUtils
operator|.
name|isWindows
argument_list|()
condition|?
literal|"bin\\java.exe"
else|:
literal|"bin/java"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\" "
operator|+
name|opts
operator|+
literal|" "
operator|+
name|karafOpts
operator|+
literal|" -Djava.util.logging.config.file=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc/java.util.logging.properties"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Djava.endorsed.dirs=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"jre"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"endorsed"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"endorsed"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
name|libDir
argument_list|,
literal|"endorsed"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Djava.ext.dirs=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"jre"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"ext"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"ext"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
name|libDir
argument_list|,
literal|"ext"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.home=\""
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.base=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.data=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"data"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.etc=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|,
literal|"etc"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Djavax.management.builder.initial=org.apache.karaf.management.boot.KarafMBeanServerBuilder"
operator|+
literal|" -Dkaraf.startLocalConsole=false"
operator|+
literal|" -Dkaraf.startRemoteShell=true"
operator|+
literal|" -classpath \""
operator|+
name|classpath
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
operator|+
literal|" org.apache.karaf.main.Main"
decl_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Starting instance "
operator|+
name|name
operator|+
literal|" with command: "
operator|+
name|command
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|Process
name|process
init|=
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|directory
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
argument_list|)
operator|.
name|command
argument_list|(
name|command
argument_list|)
operator|.
name|start
argument_list|()
decl_stmt|;
name|instance
operator|.
name|pid
operator|=
name|process
operator|.
name|getPid
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stopInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already stopped"
argument_list|)
throw|;
block|}
name|cleanShutdown
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|>
literal|0
condition|)
block|{
name|Process
name|process
init|=
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|attach
argument_list|(
name|instance
operator|.
name|pid
argument_list|)
decl_stmt|;
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|destroyInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|renameInstance
parameter_list|(
specifier|final
name|String
name|oldName
parameter_list|,
specifier|final
name|String
name|newName
parameter_list|,
specifier|final
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|Exception
block|{
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|newName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|newName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|oldName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|instance
operator|.
name|root
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Root instance cannot be renamed"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Renaming instance "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|oldName
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|a
argument_list|(
literal|" to "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|newName
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// rename directory
name|String
name|oldLocationPath
init|=
name|instance
operator|.
name|loc
decl_stmt|;
name|File
name|oldLocation
init|=
operator|new
name|File
argument_list|(
name|oldLocationPath
argument_list|)
decl_stmt|;
name|String
name|basedir
init|=
name|oldLocation
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|File
name|newLocation
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|newName
argument_list|)
decl_stmt|;
name|oldLocation
operator|.
name|renameTo
argument_list|(
name|newLocation
argument_list|)
expr_stmt|;
comment|// create the properties map including the instance name and instance location
comment|// TODO: replacing is bad, we should re-extract the needed files
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|oldName
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|oldLocationPath
argument_list|,
name|newLocation
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// replace all references to the "old" name by the new one in etc/system.properties
comment|// NB: it's replacement to avoid to override the user's changes
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"etc/system.properties"
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// replace all references to the "old" name by the new one in bin/karaf
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/karaf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/start"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/stop"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/karaf.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/start.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|newLocation
argument_list|,
literal|"bin/stop.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// update instance
name|instance
operator|.
name|name
operator|=
name|newName
expr_stmt|;
name|instance
operator|.
name|loc
operator|=
name|newLocation
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|newName
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|InstanceImpl
name|proxy
init|=
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
name|proxy
operator|=
operator|new
name|InstanceImpl
argument_list|(
name|InstanceServiceImpl
operator|.
name|this
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|.
name|doSetName
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|put
argument_list|(
name|newName
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Instance
name|cloneInstance
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|cloneName
parameter_list|,
specifier|final
name|InstanceSettings
name|settings
parameter_list|,
specifier|final
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|instanceSshPort
init|=
name|getInstanceSshPort
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|int
name|instanceRmiRegistryPort
init|=
name|getInstanceRmiRegistryPort
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|int
name|instanceRmiServerPort
init|=
name|getInstanceRmiServerPort
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Instance
argument_list|>
argument_list|()
block|{
specifier|public
name|Instance
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|cloneName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|cloneName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
comment|// define the clone instance location
name|String
name|cloneLocationPath
init|=
name|settings
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|?
name|settings
operator|.
name|getLocation
argument_list|()
else|:
name|cloneName
decl_stmt|;
name|File
name|cloneLocation
init|=
operator|new
name|File
argument_list|(
name|cloneLocationPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cloneLocation
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|cloneLocation
operator|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|cloneLocationPath
argument_list|)
expr_stmt|;
block|}
comment|// copy instance directory
name|String
name|locationPath
init|=
name|instance
operator|.
name|loc
decl_stmt|;
name|File
name|location
init|=
operator|new
name|File
argument_list|(
name|locationPath
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|location
argument_list|,
name|cloneLocation
argument_list|)
expr_stmt|;
comment|// create the properties map including the instance name, location, ssh and rmi port numbers
comment|// TODO: replacing stuff anywhere is not really good, we might end up replacing unwanted stuff
comment|// TODO: if no ports are overriden, shouldn't we choose new ports ?
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cloneName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|locationPath
argument_list|,
name|cloneLocationPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getSshPort
argument_list|()
operator|>
literal|0
condition|)
name|props
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|instanceSshPort
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|settings
operator|.
name|getSshPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getRmiRegistryPort
argument_list|()
operator|>
literal|0
condition|)
name|props
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|instanceRmiRegistryPort
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|settings
operator|.
name|getRmiRegistryPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getRmiServerPort
argument_list|()
operator|>
literal|0
condition|)
name|props
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|instanceRmiServerPort
argument_list|)
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|settings
operator|.
name|getRmiServerPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// filtering clone files
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/custom.properties"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"etc/system.properties"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/karaf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/start"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/stop"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/karaf.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/start.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|filterResource
argument_list|(
name|cloneLocation
argument_list|,
literal|"bin/stop.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// create and add the clone instance in the registry
name|String
name|javaOpts
init|=
name|settings
operator|.
name|getJavaOpts
argument_list|()
decl_stmt|;
if|if
condition|(
name|javaOpts
operator|==
literal|null
operator|||
name|javaOpts
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|javaOpts
operator|=
literal|"-server -Xmx512M -Dcom.sun.management.jmxremote"
expr_stmt|;
block|}
name|InstanceState
name|is
init|=
operator|new
name|InstanceState
argument_list|()
decl_stmt|;
name|is
operator|.
name|name
operator|=
name|cloneName
expr_stmt|;
name|is
operator|.
name|loc
operator|=
name|cloneLocation
operator|.
name|toString
argument_list|()
expr_stmt|;
name|is
operator|.
name|opts
operator|=
name|javaOpts
expr_stmt|;
name|state
operator|.
name|instances
operator|.
name|put
argument_list|(
name|cloneName
argument_list|,
name|is
argument_list|)
expr_stmt|;
name|InstanceImpl
name|cloneInstance
init|=
operator|new
name|InstanceImpl
argument_list|(
name|InstanceServiceImpl
operator|.
name|this
argument_list|,
name|cloneName
argument_list|)
decl_stmt|;
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|proxies
operator|.
name|put
argument_list|(
name|cloneName
argument_list|,
name|cloneInstance
argument_list|)
expr_stmt|;
return|return
name|cloneInstance
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|void
name|checkPid
parameter_list|(
name|InstanceState
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
name|Process
name|process
init|=
operator|new
name|ProcessBuilderFactoryImpl
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|attach
argument_list|(
name|instance
operator|.
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|process
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|instance
operator|.
name|pid
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|cleanShutdown
parameter_list|(
name|InstanceState
name|instance
parameter_list|)
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|URL
name|configPropURL
init|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.base"
argument_list|,
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.home"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.data"
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
argument_list|,
literal|"data"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.etc"
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
argument_list|,
literal|"etc"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|substVars
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_HOST
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|String
name|portFile
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT_FILE
argument_list|)
decl_stmt|;
name|String
name|shutdown
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_COMMAND
argument_list|,
name|DEFAULT_SHUTDOWN_COMMAND
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
operator|&&
name|portFile
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|portFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|portStr
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portStr
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// We found the port, try to send the command
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|shutdown
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|getStopTimeout
argument_list|()
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|t
operator|&&
name|instance
operator|.
name|pid
operator|>
literal|0
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Unable to cleanly shutdown instance "
operator|+
name|instance
operator|.
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|getInstanceSshPort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshPort"
argument_list|)
return|;
block|}
name|void
name|changeInstanceSshPort
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|setKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshPort"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|int
name|getInstanceRmiRegistryPort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiRegistryPort"
argument_list|)
return|;
block|}
name|void
name|changeInstanceRmiRegistryPort
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|setKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiRegistryPort"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
name|int
name|getInstanceRmiServerPort
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|getKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiServerPort"
argument_list|)
return|;
block|}
name|void
name|changeInstanceRmiServerPort
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|setKarafPort
argument_list|(
name|name
argument_list|,
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiServerPort"
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getKarafPort
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|InstanceServiceImpl
operator|.
name|this
operator|.
name|getKarafPort
argument_list|(
name|state
argument_list|,
name|name
argument_list|,
name|path
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|getKarafPort
parameter_list|(
name|State
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|)
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
name|path
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|f
argument_list|,
operator|new
name|FileLockUtils
operator|.
name|CallableWithProperties
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|private
name|void
name|setKarafPort
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance is not stopped"
argument_list|)
throw|;
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|FileLockUtils
operator|.
name|execute
argument_list|(
name|f
argument_list|,
operator|new
name|FileLockUtils
operator|.
name|RunnableWithProperties
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isInstanceRoot
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|instance
operator|.
name|root
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|String
name|getInstanceLocation
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|instance
operator|.
name|loc
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|int
name|getInstancePid
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
return|return
name|instance
operator|.
name|pid
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|String
name|getInstanceJavaOpts
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|instance
operator|.
name|opts
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|void
name|changeInstanceJavaOpts
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|opts
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|instance
operator|.
name|opts
operator|=
name|opts
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|getInstanceState
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|execute
argument_list|(
operator|new
name|Task
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|call
parameter_list|(
name|State
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|InstanceState
name|instance
init|=
name|state
operator|.
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|int
name|port
init|=
name|getKarafPort
argument_list|(
name|state
argument_list|,
name|name
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|,
literal|"sshPort"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|instance
operator|.
name|loc
argument_list|)
operator|.
name|isDirectory
argument_list|()
operator|||
name|port
operator|<=
literal|0
condition|)
block|{
return|return
name|Instance
operator|.
name|ERROR
return|;
block|}
name|checkPid
argument_list|(
name|instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|instance
operator|.
name|pid
operator|==
literal|0
condition|)
block|{
return|return
name|Instance
operator|.
name|STOPPED
return|;
block|}
else|else
block|{
try|try
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|Instance
operator|.
name|STARTED
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|Instance
operator|.
name|STARTING
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|deleteFile
parameter_list|(
name|File
name|fileToDelete
parameter_list|)
block|{
if|if
condition|(
name|fileToDelete
operator|==
literal|null
operator|||
operator|!
name|fileToDelete
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fileToDelete
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|fileToDelete
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|&=
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|&=
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|result
operator|&=
name|fileToDelete
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|copyResourceToDir
parameter_list|(
name|File
name|target
parameter_list|,
name|String
name|resource
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logInfo
argument_list|(
literal|"Creating file: %s"
argument_list|,
name|printOutput
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/karaf/instance/resources/"
operator|+
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Read it line at a time so that we can use the platform line ending when we write it out.
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|println
parameter_list|(
name|String
name|st
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|st
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|Properties
name|loadPropertiesFile
parameter_list|(
name|URL
name|configPropURL
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read the properties file.
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|configPropURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|configProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return
literal|null
return|;
block|}
return|return
name|configProps
return|;
block|}
specifier|private
name|void
name|filterResource
parameter_list|(
name|File
name|basedir
parameter_list|,
name|String
name|path
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|File
name|bak
init|=
operator|new
name|File
argument_list|(
name|basedir
argument_list|,
name|path
operator|+
name|BACKUP_EXTENSION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// rename the file to the backup one
name|file
operator|.
name|renameTo
argument_list|(
name|bak
argument_list|)
expr_stmt|;
comment|// copy and filter the bak file back to the original name
name|copyAndFilterResource
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|bak
argument_list|)
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
comment|// remove the bak file
name|bak
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copyFilteredResourceToDir
parameter_list|(
name|File
name|target
parameter_list|,
name|String
name|resource
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logInfo
argument_list|(
literal|"Creating file: %s"
argument_list|,
name|printOutput
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/karaf/instance/resources/"
operator|+
name|resource
argument_list|)
decl_stmt|;
name|copyAndFilterResource
argument_list|(
name|is
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyAndFilterResource
parameter_list|(
name|InputStream
name|source
parameter_list|,
name|OutputStream
name|target
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// read it line at a time so that we can use the platform line ending when we write it out.
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|target
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|source
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|line
operator|=
name|filter
argument_list|(
name|line
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|OutputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
block|}
specifier|private
name|String
name|filter
parameter_list|(
name|String
name|line
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|i
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|p1
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|>=
literal|0
condition|)
block|{
name|String
name|l1
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|String
name|l2
init|=
name|line
operator|.
name|substring
argument_list|(
name|p1
operator|+
name|i
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|=
name|l1
operator|+
name|i
operator|.
name|getValue
argument_list|()
operator|+
name|l2
expr_stmt|;
block|}
block|}
return|return
name|line
return|;
block|}
specifier|private
name|void
name|mkdir
parameter_list|(
name|File
name|karafBase
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|printOutput
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|logInfo
argument_list|(
literal|"Creating dir: %s"
argument_list|,
name|printOutput
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|chmod
parameter_list|(
name|File
name|serviceFile
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|java
operator|.
name|lang
operator|.
name|ProcessBuilder
name|builder
init|=
operator|new
name|java
operator|.
name|lang
operator|.
name|ProcessBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|command
argument_list|(
literal|"chmod"
argument_list|,
name|mode
argument_list|,
name|serviceFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|java
operator|.
name|lang
operator|.
name|Process
name|p
init|=
name|builder
operator|.
name|start
argument_list|()
decl_stmt|;
comment|// gnodet: Fix SMX4KNL-46: cpu goes to 100% after running the 'admin create' command
comment|// Not sure exactly what happens, but commenting the process io redirection seems
comment|// to work around the problem.
comment|//
comment|//PumpStreamHandler handler = new PumpStreamHandler(io.inputStream, io.outputStream, io.errorStream);
comment|//handler.attach(p);
comment|//handler.start();
try|try
block|{
return|return
name|p
operator|.
name|waitFor
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//handler.stop();
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|source
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cache.lock"
argument_list|)
condition|)
block|{
comment|// ignore cache.lock file
return|return;
block|}
if|if
condition|(
name|source
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lock"
argument_list|)
condition|)
block|{
comment|// ignore lock file
return|return;
block|}
if|if
condition|(
name|source
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|destination
operator|.
name|exists
argument_list|()
condition|)
block|{
name|destination
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|String
index|[]
name|children
init|=
name|source
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|child
operator|.
name|contains
argument_list|(
literal|"instances"
argument_list|)
operator|&&
operator|!
name|child
operator|.
name|contains
argument_list|(
literal|"lib"
argument_list|)
condition|)
name|copy
argument_list|(
operator|new
name|File
argument_list|(
name|source
argument_list|,
name|child
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|destination
argument_list|,
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|length
decl_stmt|;
while|while
condition|(
operator|(
name|length
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_START
init|=
literal|"${"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_STOP
init|=
literal|"}"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|substVars
parameter_list|(
name|String
name|val
parameter_list|,
name|String
name|currentKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cycleMap
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// If there is currently no cycle map, then create
comment|// one for detecting cycles for this invocation.
if|if
condition|(
name|cycleMap
operator|==
literal|null
condition|)
block|{
name|cycleMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Put the current key in the cycle map.
name|cycleMap
operator|.
name|put
argument_list|(
name|currentKey
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
comment|// Assume we have a value that is something like:
comment|// "leading ${foo.${bar}} middle ${baz} trailing"
comment|// Find the first ending '}' variable delimiter, which
comment|// will correspond to the first deepest nested variable
comment|// placeholder.
name|int
name|stopDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_STOP
argument_list|)
decl_stmt|;
comment|// Find the matching starting "${" variable delimiter
comment|// by looping until we find a start delimiter that is
comment|// greater than the stop delimiter we have found.
name|int
name|startDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|)
decl_stmt|;
while|while
condition|(
name|stopDelim
operator|>=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|,
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>
name|stopDelim
operator|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|idx
operator|<
name|stopDelim
condition|)
block|{
name|startDelim
operator|=
name|idx
expr_stmt|;
block|}
block|}
comment|// If we do not have a start or stop delimiter, then just
comment|// return the existing value.
if|if
condition|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|&&
operator|(
name|stopDelim
operator|<
literal|0
operator|)
condition|)
block|{
return|return
name|val
return|;
block|}
comment|// At this point, we found a stop delimiter without a start,
comment|// so throw an exception.
elseif|else
if|if
condition|(
operator|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|||
operator|(
name|startDelim
operator|>
name|stopDelim
operator|)
operator|)
operator|&&
operator|(
name|stopDelim
operator|>=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stop delimiter with no start delimiter: "
operator|+
name|val
argument_list|)
throw|;
block|}
comment|// At this point, we have found a variable placeholder so
comment|// we must perform a variable substitution on it.
comment|// Using the start and stop delimiter indices, extract
comment|// the first, deepest nested variable placeholder.
name|String
name|variable
init|=
name|val
operator|.
name|substring
argument_list|(
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|,
name|stopDelim
argument_list|)
decl_stmt|;
comment|// Verify that this is not a recursive variable reference.
if|if
condition|(
name|cycleMap
operator|.
name|get
argument_list|(
name|variable
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"recursive variable reference: "
operator|+
name|variable
argument_list|)
throw|;
block|}
comment|// Get the value of the deepest nested variable placeholder.
comment|// Try to configuration properties first.
name|String
name|substValue
init|=
operator|(
name|configProps
operator|!=
literal|null
operator|)
condition|?
name|configProps
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|null
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|substValue
operator|==
literal|null
condition|)
block|{
comment|// Ignore unknown property values.
name|substValue
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Remove the found variable from the cycle map, since
comment|// it may appear more than once in the value and we don't
comment|// want such situations to appear as a recursive reference.
name|cycleMap
operator|.
name|remove
argument_list|(
name|variable
argument_list|)
expr_stmt|;
comment|// Append the leading characters, the substituted value of
comment|// the variable, and the trailing characters to get the new
comment|// value.
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startDelim
argument_list|)
operator|+
name|substValue
operator|+
name|val
operator|.
name|substring
argument_list|(
name|stopDelim
operator|+
name|DELIM_STOP
operator|.
name|length
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now perform substitution again, since there could still
comment|// be substitutions to make.
name|val
operator|=
name|substVars
argument_list|(
name|val
argument_list|,
name|currentKey
argument_list|,
name|cycleMap
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
comment|// Return the value.
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

