begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|specs
operator|.
name|locator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_class
specifier|public
class|class
name|OsgiLocator
block|{
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMEOUT
init|=
literal|0L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIMEOUT
init|=
literal|"org.apache.karaf.specs.timeout"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Callable
argument_list|<
name|Class
argument_list|>
argument_list|>
argument_list|>
name|FACTORIES
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ReadWriteLock
name|LOCK
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|OsgiLocator
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|unregister
parameter_list|(
name|String
name|id
parameter_list|,
name|Callable
argument_list|<
name|Class
argument_list|>
name|factory
parameter_list|)
block|{
name|LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|Class
argument_list|>
argument_list|>
name|l
init|=
name|FACTORIES
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|remove
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|register
parameter_list|(
name|String
name|id
parameter_list|,
name|Callable
argument_list|<
name|Class
argument_list|>
name|factory
parameter_list|)
block|{
name|LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|FACTORIES
operator|.
name|computeIfAbsent
argument_list|(
name|id
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|factory
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|LOCK
init|)
block|{
name|LOCK
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LOCK
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|locate
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryId
parameter_list|)
block|{
return|return
name|locate
argument_list|(
name|factoryId
argument_list|,
name|factoryId
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|getTimeout
parameter_list|()
block|{
name|long
name|timeout
init|=
name|DEFAULT_TIMEOUT
decl_stmt|;
try|try
block|{
name|String
name|prop
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TIMEOUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|timeout
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{ }
return|return
name|timeout
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|locate
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryClass
parameter_list|,
name|String
name|factoryId
parameter_list|)
block|{
name|long
name|timeout
init|=
name|getTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|<=
literal|0
condition|)
block|{
return|return
name|doLocate
argument_list|(
name|factoryClass
argument_list|,
name|factoryId
argument_list|)
return|;
block|}
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|t1
init|=
name|t0
decl_stmt|;
while|while
condition|(
name|t1
operator|-
name|t0
operator|<
name|timeout
condition|)
block|{
name|Class
argument_list|<
name|T
argument_list|>
name|impl
init|=
name|doLocate
argument_list|(
name|factoryClass
argument_list|,
name|factoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
return|return
name|impl
return|;
block|}
synchronized|synchronized
init|(
name|LOCK
init|)
block|{
try|try
block|{
name|LOCK
operator|.
name|wait
argument_list|(
name|timeout
operator|-
operator|(
name|t1
operator|-
name|t0
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|t1
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|T
argument_list|>
name|doLocate
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryClass
parameter_list|,
name|String
name|factoryId
parameter_list|)
block|{
name|LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Callable
argument_list|<
name|Class
argument_list|>
argument_list|>
name|l
init|=
name|FACTORIES
operator|.
name|get
argument_list|(
name|factoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
operator|&&
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// look up the System property first
name|String
name|factoryClassName
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|factoryId
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Callable
argument_list|<
name|Class
argument_list|>
name|i
range|:
name|l
control|)
block|{
name|Class
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|i
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// do nothing here
block|}
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|factoryClass
operator|==
name|c
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|factoryClass
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
name|factoryClassName
operator|==
literal|null
operator|||
name|c
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|factoryClassName
argument_list|)
operator|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// do nothing here
block|}
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|locateAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryId
parameter_list|)
block|{
return|return
name|locateAll
argument_list|(
name|factoryId
argument_list|,
name|factoryId
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|locateAll
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryClass
parameter_list|,
name|String
name|factoryId
parameter_list|)
block|{
name|LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Callable
argument_list|<
name|Class
argument_list|>
argument_list|>
name|l
init|=
name|FACTORIES
operator|.
name|get
argument_list|(
name|factoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Callable
argument_list|<
name|Class
argument_list|>
name|i
range|:
name|l
control|)
block|{
try|try
block|{
name|Class
name|c
init|=
name|i
operator|.
name|call
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|factoryClass
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                     }
block|}
block|}
return|return
name|classes
return|;
block|}
finally|finally
block|{
name|LOCK
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

