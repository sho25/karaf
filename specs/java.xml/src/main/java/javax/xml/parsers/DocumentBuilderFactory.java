begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|javax
operator|.
name|xml
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|DocumentBuilderFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_IMPL
init|=
literal|"com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl"
decl_stmt|;
specifier|private
name|boolean
name|validating
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|namespaceAware
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|whitespace
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|expandEntityRef
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|ignoreComments
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|coalescing
init|=
literal|false
decl_stmt|;
specifier|protected
name|DocumentBuilderFactory
parameter_list|()
block|{     }
specifier|public
specifier|static
name|DocumentBuilderFactory
name|newDefaultInstance
parameter_list|()
block|{
return|return
name|$FactoryFinder
operator|.
name|newInstance
argument_list|(
name|DocumentBuilderFactory
operator|.
name|class
argument_list|,
name|DEFAULT_IMPL
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DocumentBuilderFactory
name|newInstance
parameter_list|()
block|{
return|return
name|$FactoryFinder
operator|.
name|find
argument_list|(
name|DocumentBuilderFactory
operator|.
name|class
argument_list|,
name|DEFAULT_IMPL
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DocumentBuilderFactory
name|newInstance
parameter_list|(
name|String
name|factoryClassName
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
return|return
name|$FactoryFinder
operator|.
name|newInstance
argument_list|(
name|DocumentBuilderFactory
operator|.
name|class
argument_list|,
name|factoryClassName
argument_list|,
name|classLoader
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|DocumentBuilder
name|newDocumentBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
function_decl|;
specifier|public
name|boolean
name|isNamespaceAware
parameter_list|()
block|{
return|return
name|namespaceAware
return|;
block|}
specifier|public
name|void
name|setNamespaceAware
parameter_list|(
name|boolean
name|awareness
parameter_list|)
block|{
name|this
operator|.
name|namespaceAware
operator|=
name|awareness
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValidating
parameter_list|()
block|{
return|return
name|validating
return|;
block|}
specifier|public
name|void
name|setValidating
parameter_list|(
name|boolean
name|validating
parameter_list|)
block|{
name|this
operator|.
name|validating
operator|=
name|validating
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoringElementContentWhitespace
parameter_list|()
block|{
return|return
name|whitespace
return|;
block|}
specifier|public
name|void
name|setIgnoringElementContentWhitespace
parameter_list|(
name|boolean
name|whitespace
parameter_list|)
block|{
name|this
operator|.
name|whitespace
operator|=
name|whitespace
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExpandEntityReferences
parameter_list|()
block|{
return|return
name|expandEntityRef
return|;
block|}
specifier|public
name|void
name|setExpandEntityReferences
parameter_list|(
name|boolean
name|expandEntityRef
parameter_list|)
block|{
name|this
operator|.
name|expandEntityRef
operator|=
name|expandEntityRef
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoringComments
parameter_list|()
block|{
return|return
name|ignoreComments
return|;
block|}
specifier|public
name|void
name|setIgnoringComments
parameter_list|(
name|boolean
name|ignoreComments
parameter_list|)
block|{
name|this
operator|.
name|ignoreComments
operator|=
name|ignoreComments
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCoalescing
parameter_list|()
block|{
return|return
name|coalescing
return|;
block|}
specifier|public
name|void
name|setCoalescing
parameter_list|(
name|boolean
name|coalescing
parameter_list|)
block|{
name|this
operator|.
name|coalescing
operator|=
name|coalescing
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
specifier|public
specifier|abstract
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
function_decl|;
specifier|public
specifier|abstract
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|ParserConfigurationException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ParserConfigurationException
function_decl|;
specifier|public
name|Schema
name|getSchema
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This parser does not support specification \""
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getSpecificationTitle
argument_list|()
operator|+
literal|"\" version \""
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getSpecificationVersion
argument_list|()
operator|+
literal|"\""
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|Schema
name|schema
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This parser does not support specification \""
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getSpecificationTitle
argument_list|()
operator|+
literal|"\" version \""
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getSpecificationVersion
argument_list|()
operator|+
literal|"\""
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|isXIncludeAware
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This parser does not support specification \""
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getSpecificationTitle
argument_list|()
operator|+
literal|"\" version \""
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getSpecificationVersion
argument_list|()
operator|+
literal|"\""
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setXIncludeAware
parameter_list|(
specifier|final
name|boolean
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|" setXIncludeAware "
operator|+
literal|"is not supported on this JAXP"
operator|+
literal|" implementation or earlier: "
operator|+
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

