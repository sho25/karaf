begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|javax
operator|.
name|xml
operator|.
name|parsers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceConfigurationError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_class
class|class
name|$FactoryFinder
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PACKAGE
init|=
literal|"com.sun.xml.internal."
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|debug
decl_stmt|;
specifier|final
specifier|private
specifier|static
name|Properties
name|cacheProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
static|static
block|{
try|try
block|{
name|String
name|val
init|=
name|getSystemProperty
argument_list|(
literal|"jaxp.debug"
argument_list|)
decl_stmt|;
name|debug
operator|=
name|val
operator|!=
literal|null
operator|&&
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|debug
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|dPrint
parameter_list|(
name|Supplier
argument_list|<
name|String
argument_list|>
name|msgGen
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"JAXP: "
operator|+
name|msgGen
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|private
name|Class
name|getProviderClass
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|cl
parameter_list|,
name|boolean
name|doFallback
parameter_list|,
name|boolean
name|useBSClsLoader
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|useBSClsLoader
condition|)
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|,
name|$FactoryFinder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|cl
operator|=
name|getContextClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|()
throw|;
block|}
else|else
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|,
name|cl
argument_list|)
return|;
block|}
block|}
block|}
else|else
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|,
name|cl
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e1
parameter_list|)
block|{
if|if
condition|(
name|doFallback
condition|)
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|,
literal|false
argument_list|,
name|$FactoryFinder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
name|e1
throw|;
block|}
block|}
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|className
parameter_list|,
name|ClassLoader
name|cl
parameter_list|,
name|boolean
name|doFallback
parameter_list|)
throws|throws
name|FactoryConfigurationError
block|{
return|return
name|newInstance
argument_list|(
name|type
argument_list|,
name|className
argument_list|,
name|cl
argument_list|,
name|doFallback
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|className
parameter_list|,
name|ClassLoader
name|cl
parameter_list|,
name|boolean
name|doFallback
parameter_list|,
name|boolean
name|useBSClsLoader
parameter_list|)
throws|throws
name|FactoryConfigurationError
block|{
assert|assert
name|type
operator|!=
literal|null
assert|;
if|if
condition|(
name|System
operator|.
name|getSecurityManager
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|startsWith
argument_list|(
name|DEFAULT_PACKAGE
argument_list|)
condition|)
block|{
name|cl
operator|=
literal|null
expr_stmt|;
name|useBSClsLoader
operator|=
literal|true
expr_stmt|;
block|}
block|}
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|providerClass
init|=
name|getProviderClass
argument_list|(
name|className
argument_list|,
name|cl
argument_list|,
name|doFallback
argument_list|,
name|useBSClsLoader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|providerClass
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
name|className
operator|+
literal|" cannot be cast to "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|Object
name|instance
init|=
name|providerClass
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|final
name|ClassLoader
name|clD
init|=
name|cl
decl_stmt|;
name|dPrint
argument_list|(
parameter_list|()
lambda|->
literal|"created new instance of "
operator|+
name|providerClass
operator|+
literal|" using ClassLoader: "
operator|+
name|clD
argument_list|)
expr_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|instance
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|FactoryConfigurationError
argument_list|(
name|x
argument_list|,
literal|"Provider "
operator|+
name|className
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|FactoryConfigurationError
argument_list|(
name|x
argument_list|,
literal|"Provider "
operator|+
name|className
operator|+
literal|" could not be instantiated: "
operator|+
name|x
argument_list|)
throw|;
block|}
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|find
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|fallbackClassName
parameter_list|)
throws|throws
name|FactoryConfigurationError
block|{
return|return
name|find
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|fallbackClassName
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|find
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|String
name|factoryId
parameter_list|,
name|ClassLoader
name|cl
parameter_list|,
name|String
name|fallbackClassName
parameter_list|)
throws|throws
name|FactoryConfigurationError
block|{
try|try
block|{
comment|// If we are deployed into an OSGi environment, leverage it
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|spiClass
init|=
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|specs
operator|.
name|locator
operator|.
name|OsgiLocator
operator|.
name|locate
argument_list|(
name|type
argument_list|,
name|factoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|spiClass
operator|!=
literal|null
condition|)
block|{
return|return
name|spiClass
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
try|try
block|{
specifier|final
name|String
name|systemProp
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|factoryId
argument_list|)
condition|)
block|{
name|systemProp
operator|=
name|getSystemProperty
argument_list|(
name|factoryId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|systemProp
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|factoryId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|systemProp
operator|!=
literal|null
condition|)
block|{
name|dPrint
argument_list|(
parameter_list|()
lambda|->
literal|"found system property, value="
operator|+
name|systemProp
argument_list|)
expr_stmt|;
return|return
name|newInstance
argument_list|(
name|type
argument_list|,
name|systemProp
argument_list|,
name|cl
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|FactoryConfigurationError
argument_list|(
name|se
argument_list|,
literal|"Failed to read factoryId '"
operator|+
name|factoryId
operator|+
literal|"'"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|firstTime
condition|)
block|{
synchronized|synchronized
init|(
name|cacheProps
init|)
block|{
if|if
condition|(
name|firstTime
condition|)
block|{
name|firstTime
operator|=
literal|false
expr_stmt|;
name|String
name|javaHome
init|=
name|getSystemProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
name|String
name|configFile
decl_stmt|;
name|configFile
operator|=
name|javaHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"jaxp.properties"
expr_stmt|;
name|File
name|jaxp
init|=
operator|new
name|File
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|doesFileExist
argument_list|(
name|jaxp
argument_list|)
condition|)
block|{
name|cacheProps
operator|.
name|load
argument_list|(
name|getFileInputStream
argument_list|(
name|jaxp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|configFile
operator|=
name|javaHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|"conf"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"stax.properties"
expr_stmt|;
name|File
name|stax
init|=
operator|new
name|File
argument_list|(
name|configFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|doesFileExist
argument_list|(
name|stax
argument_list|)
condition|)
block|{
name|cacheProps
operator|.
name|load
argument_list|(
name|getFileInputStream
argument_list|(
name|stax
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|String
name|factoryClassName
init|=
name|cacheProps
operator|.
name|getProperty
argument_list|(
name|factoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryClassName
operator|!=
literal|null
condition|)
block|{
return|return
name|newInstance
argument_list|(
name|type
argument_list|,
name|factoryClassName
argument_list|,
name|cl
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|factoryId
argument_list|)
condition|)
block|{
specifier|final
name|T
name|provider
init|=
name|findServiceProvider
argument_list|(
name|type
argument_list|,
name|cl
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
block|{
return|return
name|provider
return|;
block|}
block|}
else|else
block|{
assert|assert
name|fallbackClassName
operator|==
literal|null
assert|;
block|}
if|if
condition|(
name|fallbackClassName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FactoryConfigurationError
argument_list|(
literal|"Provider for "
operator|+
name|factoryId
operator|+
literal|" cannot be found"
argument_list|)
throw|;
block|}
name|dPrint
argument_list|(
parameter_list|()
lambda|->
literal|"loaded from fallback value: "
operator|+
name|fallbackClassName
argument_list|)
expr_stmt|;
return|return
name|newInstance
argument_list|(
name|type
argument_list|,
name|fallbackClassName
argument_list|,
name|cl
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|findServiceProvider
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
specifier|final
name|ClassLoader
name|cl
parameter_list|)
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|final
name|ServiceLoader
argument_list|<
name|T
argument_list|>
name|serviceLoader
block|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
name|serviceLoader
operator|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceLoader
operator|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|type
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
name|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
operator|=
name|serviceLoader
operator|.
name|iterator
argument_list|()
argument_list|;                 if
operator|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|)
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|)
function|;
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|ServiceConfigurationError
name|e
parameter_list|)
block|{
specifier|final
name|RuntimeException
name|x
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"Provider for "
operator|+
name|type
operator|+
literal|" cannot be created"
argument_list|,
name|e
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|FactoryConfigurationError
argument_list|(
name|x
argument_list|,
name|x
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
end_catch

begin_function
unit|}      private
specifier|static
name|ClassLoader
name|getContextClassLoader
parameter_list|()
throws|throws
name|SecurityException
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|ClassLoader
name|cl
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
block|;
if|if
condition|(
name|cl
operator|==
literal|null
condition|)
block|{
name|cl
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
return|return
name|cl
return|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}      private
specifier|static
name|String
name|getSystemProperty
parameter_list|(
specifier|final
name|String
name|propName
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|String
argument_list|>
call|)
argument_list|()
operator|->
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|FileInputStream
name|getFileInputStream
parameter_list|(
specifier|final
name|File
name|file
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|FileInputStream
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|FileNotFoundException
operator|)
name|e
operator|.
name|getException
argument_list|()
throw|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|boolean
name|doesFileExist
parameter_list|(
specifier|final
name|File
name|f
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|(
name|PrivilegedAction
argument_list|<
name|Boolean
argument_list|>
operator|)
name|f
operator|::
name|exists
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

