begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|javax
operator|.
name|xml
operator|.
name|datatype
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|DatatypeFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DATATYPEFACTORY_PROPERTY
init|=
literal|"javax.xml.datatype.DatatypeFactory"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATATYPEFACTORY_IMPLEMENTATION_CLASS
init|=
literal|"com.sun.org.apache.xerces.internal.jaxp.datatype.DatatypeFactoryImpl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|XDTSCHEMA_YMD
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^DT]*"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|XDTSCHEMA_DTD
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^YM]*[DT].*"
argument_list|)
decl_stmt|;
specifier|protected
name|DatatypeFactory
parameter_list|()
block|{     }
specifier|public
specifier|static
name|DatatypeFactory
name|newDefaultInstance
parameter_list|()
block|{
try|try
block|{
return|return
name|$FactoryFinder
operator|.
name|newInstance
argument_list|(
name|DatatypeFactory
operator|.
name|class
argument_list|,
name|DATATYPEFACTORY_IMPLEMENTATION_CLASS
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create default instance"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|DatatypeFactory
name|newInstance
parameter_list|()
throws|throws
name|DatatypeConfigurationException
block|{
return|return
name|$FactoryFinder
operator|.
name|find
argument_list|(
name|DatatypeFactory
operator|.
name|class
argument_list|,
name|DATATYPEFACTORY_IMPLEMENTATION_CLASS
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DatatypeFactory
name|newInstance
parameter_list|(
name|String
name|factoryClassName
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|DatatypeConfigurationException
block|{
return|return
name|$FactoryFinder
operator|.
name|newInstance
argument_list|(
name|DatatypeFactory
operator|.
name|class
argument_list|,
name|factoryClassName
argument_list|,
name|classLoader
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|Duration
name|newDuration
parameter_list|(
specifier|final
name|String
name|lexicalRepresentation
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|Duration
name|newDuration
parameter_list|(
specifier|final
name|long
name|durationInMilliSeconds
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|Duration
name|newDuration
parameter_list|(
specifier|final
name|boolean
name|isPositive
parameter_list|,
specifier|final
name|BigInteger
name|years
parameter_list|,
specifier|final
name|BigInteger
name|months
parameter_list|,
specifier|final
name|BigInteger
name|days
parameter_list|,
specifier|final
name|BigInteger
name|hours
parameter_list|,
specifier|final
name|BigInteger
name|minutes
parameter_list|,
specifier|final
name|BigDecimal
name|seconds
parameter_list|)
function_decl|;
specifier|public
name|Duration
name|newDuration
parameter_list|(
specifier|final
name|boolean
name|isPositive
parameter_list|,
specifier|final
name|int
name|years
parameter_list|,
specifier|final
name|int
name|months
parameter_list|,
specifier|final
name|int
name|days
parameter_list|,
specifier|final
name|int
name|hours
parameter_list|,
specifier|final
name|int
name|minutes
parameter_list|,
specifier|final
name|int
name|seconds
parameter_list|)
block|{
name|BigInteger
name|realYears
init|=
operator|(
name|years
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|?
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|years
argument_list|)
else|:
literal|null
decl_stmt|;
name|BigInteger
name|realMonths
init|=
operator|(
name|months
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|?
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|months
argument_list|)
else|:
literal|null
decl_stmt|;
name|BigInteger
name|realDays
init|=
operator|(
name|days
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|?
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|days
argument_list|)
else|:
literal|null
decl_stmt|;
name|BigInteger
name|realHours
init|=
operator|(
name|hours
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|?
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|hours
argument_list|)
else|:
literal|null
decl_stmt|;
name|BigInteger
name|realMinutes
init|=
operator|(
name|minutes
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|?
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|minutes
argument_list|)
else|:
literal|null
decl_stmt|;
name|BigDecimal
name|realSeconds
init|=
operator|(
name|seconds
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|?
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|seconds
argument_list|)
else|:
literal|null
decl_stmt|;
return|return
name|newDuration
argument_list|(
name|isPositive
argument_list|,
name|realYears
argument_list|,
name|realMonths
argument_list|,
name|realDays
argument_list|,
name|realHours
argument_list|,
name|realMinutes
argument_list|,
name|realSeconds
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationDayTime
parameter_list|(
specifier|final
name|String
name|lexicalRepresentation
parameter_list|)
block|{
if|if
condition|(
name|lexicalRepresentation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Trying to create an xdt:dayTimeDuration with an invalid lexical representation of \"null\""
argument_list|)
throw|;
block|}
name|Matcher
name|matcher
init|=
name|XDTSCHEMA_DTD
operator|.
name|matcher
argument_list|(
name|lexicalRepresentation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Trying to create an xdt:dayTimeDuration with an invalid"
operator|+
literal|" lexical representation of \""
operator|+
name|lexicalRepresentation
operator|+
literal|"\", data model requires years and months only."
argument_list|)
throw|;
block|}
return|return
name|newDuration
argument_list|(
name|lexicalRepresentation
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationDayTime
parameter_list|(
specifier|final
name|long
name|durationInMilliseconds
parameter_list|)
block|{
return|return
name|newDuration
argument_list|(
name|durationInMilliseconds
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationDayTime
parameter_list|(
specifier|final
name|boolean
name|isPositive
parameter_list|,
specifier|final
name|BigInteger
name|day
parameter_list|,
specifier|final
name|BigInteger
name|hour
parameter_list|,
specifier|final
name|BigInteger
name|minute
parameter_list|,
specifier|final
name|BigInteger
name|second
parameter_list|)
block|{
return|return
name|newDuration
argument_list|(
name|isPositive
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
operator|(
name|second
operator|!=
literal|null
operator|)
condition|?
operator|new
name|BigDecimal
argument_list|(
name|second
argument_list|)
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationDayTime
parameter_list|(
specifier|final
name|boolean
name|isPositive
parameter_list|,
specifier|final
name|int
name|day
parameter_list|,
specifier|final
name|int
name|hour
parameter_list|,
specifier|final
name|int
name|minute
parameter_list|,
specifier|final
name|int
name|second
parameter_list|)
block|{
return|return
name|newDurationDayTime
argument_list|(
name|isPositive
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|day
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|hour
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|minute
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|second
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationYearMonth
parameter_list|(
specifier|final
name|String
name|lexicalRepresentation
parameter_list|)
block|{
if|if
condition|(
name|lexicalRepresentation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Trying to create an xdt:yearMonthDuration with an invalid"
operator|+
literal|" lexical representation of \"null\""
argument_list|)
throw|;
block|}
name|Matcher
name|matcher
init|=
name|XDTSCHEMA_YMD
operator|.
name|matcher
argument_list|(
name|lexicalRepresentation
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Trying to create an xdt:yearMonthDuration with an invalid"
operator|+
literal|" lexical representation of \""
operator|+
name|lexicalRepresentation
operator|+
literal|"\", data model requires days and times only."
argument_list|)
throw|;
block|}
return|return
name|newDuration
argument_list|(
name|lexicalRepresentation
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationYearMonth
parameter_list|(
specifier|final
name|long
name|durationInMilliseconds
parameter_list|)
block|{
name|Duration
name|fullDuration
init|=
name|newDuration
argument_list|(
name|durationInMilliseconds
argument_list|)
decl_stmt|;
name|boolean
name|isPositive
init|=
name|fullDuration
operator|.
name|getSign
argument_list|()
operator|!=
operator|-
literal|1
decl_stmt|;
name|BigInteger
name|years
init|=
operator|(
name|BigInteger
operator|)
name|fullDuration
operator|.
name|getField
argument_list|(
name|DatatypeConstants
operator|.
name|YEARS
argument_list|)
decl_stmt|;
if|if
condition|(
name|years
operator|==
literal|null
condition|)
block|{
name|years
operator|=
name|BigInteger
operator|.
name|ZERO
expr_stmt|;
block|}
name|BigInteger
name|months
init|=
operator|(
name|BigInteger
operator|)
name|fullDuration
operator|.
name|getField
argument_list|(
name|DatatypeConstants
operator|.
name|MONTHS
argument_list|)
decl_stmt|;
if|if
condition|(
name|months
operator|==
literal|null
condition|)
block|{
name|months
operator|=
name|BigInteger
operator|.
name|ZERO
expr_stmt|;
block|}
return|return
name|newDurationYearMonth
argument_list|(
name|isPositive
argument_list|,
name|years
argument_list|,
name|months
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationYearMonth
parameter_list|(
specifier|final
name|boolean
name|isPositive
parameter_list|,
specifier|final
name|BigInteger
name|year
parameter_list|,
specifier|final
name|BigInteger
name|month
parameter_list|)
block|{
return|return
name|newDuration
argument_list|(
name|isPositive
argument_list|,
name|year
argument_list|,
name|month
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Duration
name|newDurationYearMonth
parameter_list|(
specifier|final
name|boolean
name|isPositive
parameter_list|,
specifier|final
name|int
name|year
parameter_list|,
specifier|final
name|int
name|month
parameter_list|)
block|{
return|return
name|newDurationYearMonth
argument_list|(
name|isPositive
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|year
argument_list|)
argument_list|,
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|month
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|XMLGregorianCalendar
name|newXMLGregorianCalendar
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|XMLGregorianCalendar
name|newXMLGregorianCalendar
parameter_list|(
specifier|final
name|String
name|lexicalRepresentation
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|XMLGregorianCalendar
name|newXMLGregorianCalendar
parameter_list|(
specifier|final
name|GregorianCalendar
name|cal
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|XMLGregorianCalendar
name|newXMLGregorianCalendar
parameter_list|(
specifier|final
name|BigInteger
name|year
parameter_list|,
specifier|final
name|int
name|month
parameter_list|,
specifier|final
name|int
name|day
parameter_list|,
specifier|final
name|int
name|hour
parameter_list|,
specifier|final
name|int
name|minute
parameter_list|,
specifier|final
name|int
name|second
parameter_list|,
specifier|final
name|BigDecimal
name|fractionalSecond
parameter_list|,
specifier|final
name|int
name|timezone
parameter_list|)
function_decl|;
specifier|public
name|XMLGregorianCalendar
name|newXMLGregorianCalendar
parameter_list|(
specifier|final
name|int
name|year
parameter_list|,
specifier|final
name|int
name|month
parameter_list|,
specifier|final
name|int
name|day
parameter_list|,
specifier|final
name|int
name|hour
parameter_list|,
specifier|final
name|int
name|minute
parameter_list|,
specifier|final
name|int
name|second
parameter_list|,
specifier|final
name|int
name|millisecond
parameter_list|,
specifier|final
name|int
name|timezone
parameter_list|)
block|{
name|BigInteger
name|realYear
init|=
operator|(
name|year
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
operator|)
condition|?
name|BigInteger
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|year
argument_list|)
else|:
literal|null
decl_stmt|;
name|BigDecimal
name|realMillisecond
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|millisecond
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
if|if
condition|(
name|millisecond
argument_list|<
literal|0
operator|||
name|millisecond
argument_list|>
literal|1000
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendar("
operator|+
literal|"int year, int month, int day, int hour, int minute, int second, int millisecond, int timezone)"
operator|+
literal|"with invalid millisecond: "
operator|+
name|millisecond
argument_list|)
throw|;
block|}
name|realMillisecond
operator|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|millisecond
argument_list|)
operator|.
name|movePointLeft
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
return|return
name|newXMLGregorianCalendar
argument_list|(
name|realYear
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|,
name|realMillisecond
argument_list|,
name|timezone
argument_list|)
return|;
block|}
specifier|public
name|XMLGregorianCalendar
name|newXMLGregorianCalendarDate
parameter_list|(
specifier|final
name|int
name|year
parameter_list|,
specifier|final
name|int
name|month
parameter_list|,
specifier|final
name|int
name|day
parameter_list|,
specifier|final
name|int
name|timezone
parameter_list|)
block|{
return|return
name|newXMLGregorianCalendar
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|timezone
argument_list|)
return|;
block|}
specifier|public
name|XMLGregorianCalendar
name|newXMLGregorianCalendarTime
parameter_list|(
specifier|final
name|int
name|hours
parameter_list|,
specifier|final
name|int
name|minutes
parameter_list|,
specifier|final
name|int
name|seconds
parameter_list|,
specifier|final
name|int
name|timezone
parameter_list|)
block|{
return|return
name|newXMLGregorianCalendar
argument_list|(
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|hours
argument_list|,
name|minutes
argument_list|,
name|seconds
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|timezone
argument_list|)
return|;
block|}
specifier|public
name|XMLGregorianCalendar
name|newXMLGregorianCalendarTime
parameter_list|(
specifier|final
name|int
name|hours
parameter_list|,
specifier|final
name|int
name|minutes
parameter_list|,
specifier|final
name|int
name|seconds
parameter_list|,
specifier|final
name|BigDecimal
name|fractionalSecond
parameter_list|,
specifier|final
name|int
name|timezone
parameter_list|)
block|{
return|return
name|newXMLGregorianCalendar
argument_list|(
literal|null
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|,
name|hours
argument_list|,
name|minutes
argument_list|,
name|seconds
argument_list|,
name|fractionalSecond
argument_list|,
name|timezone
argument_list|)
return|;
block|}
specifier|public
name|XMLGregorianCalendar
name|newXMLGregorianCalendarTime
parameter_list|(
specifier|final
name|int
name|hours
parameter_list|,
specifier|final
name|int
name|minutes
parameter_list|,
specifier|final
name|int
name|seconds
parameter_list|,
specifier|final
name|int
name|milliseconds
parameter_list|,
specifier|final
name|int
name|timezone
parameter_list|)
block|{
name|BigDecimal
name|realMilliseconds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|milliseconds
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
if|if
condition|(
name|milliseconds
argument_list|<
literal|0
operator|||
name|milliseconds
argument_list|>
literal|1000
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"javax.xml.datatype.DatatypeFactory#newXMLGregorianCalendarTime("
operator|+
literal|"int hours, int minutes, int seconds, int milliseconds, int timezone)"
operator|+
literal|"with invalid milliseconds: "
operator|+
name|milliseconds
argument_list|)
throw|;
block|}
name|realMilliseconds
operator|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
operator|(
name|long
operator|)
name|milliseconds
argument_list|)
operator|.
name|movePointLeft
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
return|return
name|newXMLGregorianCalendarTime
argument_list|(
name|hours
argument_list|,
name|minutes
argument_list|,
name|seconds
argument_list|,
name|realMilliseconds
argument_list|,
name|timezone
argument_list|)
return|;
block|}
block|}
end_class

end_unit

