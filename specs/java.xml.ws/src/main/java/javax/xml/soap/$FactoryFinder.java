begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|javax
operator|.
name|xml
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_class
class|class
name|$FactoryFinder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"javax.xml.soap"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|find
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryClass
parameter_list|,
name|String
name|defaultClassName
parameter_list|,
name|boolean
name|tryFallback
parameter_list|,
name|String
name|deprecatedFactoryId
parameter_list|)
throws|throws
name|SOAPException
block|{
name|ClassLoader
name|tccl
init|=
name|contextClassLoader
argument_list|()
decl_stmt|;
name|String
name|factoryId
init|=
name|factoryClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|fromSystemProperty
argument_list|(
name|factoryId
argument_list|,
name|deprecatedFactoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|Object
name|result
init|=
name|newInstance
argument_list|(
name|className
argument_list|,
name|defaultClassName
argument_list|,
name|tccl
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|result
return|;
block|}
name|className
operator|=
name|fromJDKProperties
argument_list|(
name|factoryId
argument_list|,
name|deprecatedFactoryId
argument_list|)
expr_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|Object
name|result
init|=
name|newInstance
argument_list|(
name|className
argument_list|,
name|defaultClassName
argument_list|,
name|tccl
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|result
return|;
block|}
try|try
block|{
name|Class
argument_list|<
name|T
argument_list|>
name|spiClass
init|=
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|specs
operator|.
name|locator
operator|.
name|OsgiLocator
operator|.
name|locate
argument_list|(
name|factoryClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|spiClass
operator|!=
literal|null
condition|)
block|{
return|return
name|spiClass
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{         }
name|T
name|factory
init|=
name|firstByServiceLoader
argument_list|(
name|factoryClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
return|return
name|factory
return|;
block|}
name|className
operator|=
name|fromMetaInfServices
argument_list|(
name|deprecatedFactoryId
argument_list|,
name|tccl
argument_list|)
expr_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Using deprecated META-INF/services mechanism with non-standard property: {0}. "
operator|+
literal|"Property {1} should be used instead."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|deprecatedFactoryId
block|,
name|factoryId
block|}
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|newInstance
argument_list|(
name|className
argument_list|,
name|defaultClassName
argument_list|,
name|tccl
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|result
return|;
block|}
if|if
condition|(
operator|!
name|tryFallback
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|defaultClassName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SOAPException
argument_list|(
literal|"Provider for "
operator|+
name|factoryId
operator|+
literal|" cannot be found"
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
operator|(
name|T
operator|)
name|newInstance
argument_list|(
name|defaultClassName
argument_list|,
name|defaultClassName
argument_list|,
name|tccl
argument_list|)
return|;
block|}
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|find
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|factoryClass
parameter_list|,
name|String
name|defaultClassName
parameter_list|,
name|boolean
name|tryFallback
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
name|find
argument_list|(
name|factoryClass
argument_list|,
name|defaultClassName
argument_list|,
name|tryFallback
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|fromMetaInfServices
parameter_list|(
name|String
name|deprecatedFactoryId
parameter_list|,
name|ClassLoader
name|tccl
parameter_list|)
block|{
name|String
name|serviceId
init|=
literal|"META-INF/services/"
operator|+
name|deprecatedFactoryId
decl_stmt|;
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Checking deprecated {0} resource"
argument_list|,
name|serviceId
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|tccl
operator|==
literal|null
condition|?
name|ClassLoader
operator|.
name|getSystemResourceAsStream
argument_list|(
name|serviceId
argument_list|)
else|:
name|tccl
operator|.
name|getResourceAsStream
argument_list|(
name|serviceId
argument_list|)
init|)
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|String
name|factoryClassName
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|;                      BufferedReader rd = new BufferedReader(isr)
block|)
block|{
name|factoryClassName
operator|=
name|rd
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|logFound
argument_list|(
name|factoryClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|factoryClassName
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|factoryClassName
argument_list|)
condition|)
block|{
return|return
name|factoryClassName
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
return|return
literal|null
return|;
block|}
end_class

begin_function
specifier|private
specifier|static
name|String
name|fromJDKProperties
parameter_list|(
name|String
name|factoryId
parameter_list|,
name|String
name|deprecatedFactoryId
parameter_list|)
block|{
name|Path
name|path
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|JAVA_HOME
init|=
name|getSystemProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
name|path
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|JAVA_HOME
argument_list|,
literal|"conf"
argument_list|,
literal|"jaxm.properties"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Checking configuration in {0}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|JAVA_HOME
argument_list|,
literal|"lib"
argument_list|,
literal|"jaxm.properties"
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Checking configuration in {0}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
block|}
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Checking property {0}"
argument_list|,
name|factoryId
argument_list|)
expr_stmt|;
name|String
name|factoryClassName
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|factoryId
argument_list|)
decl_stmt|;
name|logFound
argument_list|(
name|factoryClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|factoryClassName
operator|!=
literal|null
condition|)
block|{
return|return
name|factoryClassName
return|;
block|}
if|if
condition|(
name|deprecatedFactoryId
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Checking deprecated property {0}"
argument_list|,
name|deprecatedFactoryId
argument_list|)
expr_stmt|;
name|factoryClassName
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|deprecatedFactoryId
argument_list|)
expr_stmt|;
name|logFound
argument_list|(
name|factoryClassName
argument_list|)
expr_stmt|;
if|if
condition|(
name|factoryClassName
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Using non-standard property: {0}. Property {1} should be used instead."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|deprecatedFactoryId
block|,
name|factoryId
block|}
argument_list|)
expr_stmt|;
return|return
name|factoryClassName
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Error reading SAAJ configuration from ["
operator|+
name|path
operator|+
literal|"] file. Check it is accessible and has correct format."
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|String
name|fromSystemProperty
parameter_list|(
name|String
name|factoryId
parameter_list|,
name|String
name|deprecatedFactoryId
parameter_list|)
block|{
name|String
name|systemProp
init|=
name|getSystemProperty
argument_list|(
name|factoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|systemProp
operator|!=
literal|null
condition|)
block|{
return|return
name|systemProp
return|;
block|}
if|if
condition|(
name|deprecatedFactoryId
operator|!=
literal|null
condition|)
block|{
name|systemProp
operator|=
name|getSystemProperty
argument_list|(
name|deprecatedFactoryId
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemProp
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Using non-standard property: {0}. Property {1} should be used instead."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|deprecatedFactoryId
block|,
name|factoryId
block|}
argument_list|)
expr_stmt|;
return|return
name|systemProp
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|String
name|getSystemProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Checking system property {0}"
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|String
argument_list|>
call|)
argument_list|()
operator|->
name|System
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
argument_list|)
decl_stmt|;
name|logFound
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|logFound
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"  found {0}"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"  not found"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|firstByServiceLoader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|spiClass
parameter_list|)
throws|throws
name|SOAPException
block|{
name|LOGGER
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Using java.util.ServiceLoader to find {0}"
argument_list|,
name|spiClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|ServiceLoader
argument_list|<
name|T
argument_list|>
name|serviceLoader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|spiClass
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|impl
range|:
name|serviceLoader
control|)
block|{
name|LOGGER
operator|.
name|fine
argument_list|(
literal|"ServiceProvider loading Facility used; returning object ["
operator|+
name|impl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|SOAPException
argument_list|(
literal|"Error while searching for service ["
operator|+
name|spiClass
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|t
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|void
name|checkPackageAccess
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|SecurityManager
name|s
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|int
name|i
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|s
operator|.
name|checkPackageAccess
argument_list|(
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|Class
name|nullSafeLoadClass
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|Object
name|newInstance
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|defaultImplClassName
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|SOAPException
block|{
try|try
block|{
return|return
name|safeLoadClass
argument_list|(
name|className
argument_list|,
name|defaultImplClassName
argument_list|,
name|classLoader
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|SOAPException
argument_list|(
literal|"Provider "
operator|+
name|className
operator|+
literal|" not found"
argument_list|,
name|x
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|SOAPException
argument_list|(
literal|"Provider "
operator|+
name|className
operator|+
literal|" could not be instantiated: "
operator|+
name|x
argument_list|,
name|x
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|safeLoadClass
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|defaultImplClassName
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
name|checkPackageAccess
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
if|if
condition|(
name|defaultImplClassName
operator|!=
literal|null
operator|&&
name|defaultImplClassName
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
return|;
block|}
throw|throw
name|se
throw|;
block|}
return|return
name|nullSafeLoadClass
argument_list|(
name|className
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|ClassLoader
name|contextClassLoader
parameter_list|()
throws|throws
name|SOAPException
block|{
try|try
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
throw|throw
operator|new
name|SOAPException
argument_list|(
name|x
operator|.
name|toString
argument_list|()
argument_list|,
name|x
argument_list|)
throw|;
block|}
block|}
end_function

unit|}
end_unit

