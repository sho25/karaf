begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|javax
operator|.
name|xml
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|MessageFactory
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_MESSAGE_FACTORY
init|=
literal|"com.sun.xml.internal.messaging.saaj.soap.ver1_1.SOAPMessageFactory1_1Impl"
decl_stmt|;
specifier|public
specifier|static
name|MessageFactory
name|newInstance
parameter_list|()
throws|throws
name|SOAPException
block|{
try|try
block|{
name|MessageFactory
name|factory
init|=
name|$FactoryFinder
operator|.
name|find
argument_list|(
name|MessageFactory
operator|.
name|class
argument_list|,
name|DEFAULT_MESSAGE_FACTORY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
return|return
name|factory
return|;
block|}
return|return
name|newInstance
argument_list|(
name|SOAPConstants
operator|.
name|SOAP_1_1_PROTOCOL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SOAPException
argument_list|(
literal|"Unable to create message factory for SOAP: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|MessageFactory
name|newInstance
parameter_list|(
name|String
name|protocol
parameter_list|)
throws|throws
name|SOAPException
block|{
return|return
name|SAAJMetaFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|newMessageFactory
argument_list|(
name|protocol
argument_list|)
return|;
block|}
specifier|public
specifier|abstract
name|SOAPMessage
name|createMessage
parameter_list|()
throws|throws
name|SOAPException
function_decl|;
specifier|public
specifier|abstract
name|SOAPMessage
name|createMessage
parameter_list|(
name|MimeHeaders
name|headers
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|SOAPException
function_decl|;
block|}
end_class

end_unit

