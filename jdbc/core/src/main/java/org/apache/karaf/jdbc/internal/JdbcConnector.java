begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jdbc
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|JdbcConnector
implements|implements
name|Closeable
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|String
name|datasourceName
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Deque
argument_list|<
name|Closeable
argument_list|>
name|resources
decl_stmt|;
specifier|private
name|ServiceReference
argument_list|<
name|DataSource
argument_list|>
name|reference
decl_stmt|;
specifier|public
name|JdbcConnector
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|String
name|datasourceName
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|datasourceName
operator|=
name|datasourceName
expr_stmt|;
name|this
operator|.
name|resources
operator|=
operator|new
name|LinkedList
argument_list|<
name|Closeable
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Connection
name|connect
parameter_list|()
throws|throws
name|SQLException
block|{
name|reference
operator|=
name|lookupDataSource
argument_list|(
name|datasourceName
argument_list|)
expr_stmt|;
name|DataSource
name|ds
init|=
operator|(
name|DataSource
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|ds
operator|.
name|getConnection
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|public
name|Statement
name|createStatement
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
return|return
name|register
argument_list|(
name|connection
operator|.
name|createStatement
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Connection
name|register
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|)
block|{
name|resources
operator|.
name|addFirst
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|public
name|Statement
name|register
parameter_list|(
specifier|final
name|Statement
name|statement
parameter_list|)
block|{
name|resources
operator|.
name|addFirst
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|statement
return|;
block|}
specifier|public
name|ResultSet
name|register
parameter_list|(
specifier|final
name|ResultSet
name|resultSet
parameter_list|)
block|{
name|resources
operator|.
name|addFirst
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|resultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|resultSet
return|;
block|}
specifier|private
name|ServiceReference
argument_list|<
name|DataSource
argument_list|>
name|lookupDataSource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Collection
argument_list|<
name|ServiceReference
argument_list|<
name|DataSource
argument_list|>
argument_list|>
name|references
decl_stmt|;
try|try
block|{
name|references
operator|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|DataSource
operator|.
name|class
argument_list|,
literal|"(|(osgi.jndi.service.name="
operator|+
name|name
operator|+
literal|")(datasource="
operator|+
name|name
operator|+
literal|")(name="
operator|+
name|name
operator|+
literal|")(service.id="
operator|+
name|name
operator|+
literal|"))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error finding datasource with name "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|references
operator|==
literal|null
operator|||
name|references
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No JDBC datasource found for "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|references
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple JDBC datasource found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|references
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|StreamUtils
operator|.
name|close
argument_list|(
name|resources
operator|.
name|toArray
argument_list|(
operator|new
name|Closeable
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

