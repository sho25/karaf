begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jdbc
operator|.
name|command
operator|.
name|parsing
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|parsing
operator|.
name|CommandLineImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|parsing
operator|.
name|GogoParser
import|;
end_import

begin_comment
comment|/**  * A parser for JDBC commands using SQL.  */
end_comment

begin_class
annotation|@
name|Service
specifier|public
class|class
name|JdbcParser
implements|implements
name|Parser
block|{
annotation|@
name|Override
specifier|public
name|CommandLine
name|parse
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|command
parameter_list|,
name|int
name|cursor
parameter_list|)
block|{
name|GogoParser
name|parser
init|=
operator|new
name|GogoParser
argument_list|(
name|command
argument_list|,
name|cursor
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|parser
operator|.
name|statement
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nargs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|state
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|arg
range|:
name|args
control|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
comment|// command
case|case
literal|0
case|:
name|nargs
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|state
operator|=
literal|1
expr_stmt|;
break|break;
comment|// option or target
case|case
literal|1
case|:
name|nargs
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|state
operator|=
literal|2
expr_stmt|;
block|}
break|break;
comment|// first sql fragment
case|case
literal|2
case|:
name|nargs
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|state
operator|=
literal|3
expr_stmt|;
break|break;
comment|// addtional sql
case|case
literal|3
case|:
name|nargs
operator|.
name|set
argument_list|(
name|nargs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|nargs
operator|.
name|get
argument_list|(
name|nargs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|" "
operator|+
name|arg
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|nargs
operator|.
name|set
argument_list|(
name|nargs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|"\""
operator|+
name|nargs
operator|.
name|get
argument_list|(
name|nargs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
return|return
operator|new
name|CommandLineImpl
argument_list|(
name|nargs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|nargs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|parser
operator|.
name|cursorArgumentIndex
argument_list|()
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|parser
operator|.
name|argumentPosition
argument_list|()
argument_list|,
name|nargs
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|cursor
argument_list|,
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|position
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

