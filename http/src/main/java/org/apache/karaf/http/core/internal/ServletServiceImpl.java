begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Servlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|ServletInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|ServletService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|web
operator|.
name|service
operator|.
name|spi
operator|.
name|ServletEvent
import|;
end_import

begin_class
specifier|public
class|class
name|ServletServiceImpl
implements|implements
name|ServletService
block|{
specifier|private
name|ServletEventHandler
name|servletEventHandler
decl_stmt|;
specifier|public
name|ServletServiceImpl
parameter_list|(
name|ServletEventHandler
name|servletEventHandler
parameter_list|)
block|{
name|this
operator|.
name|servletEventHandler
operator|=
name|servletEventHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServletInfo
argument_list|>
name|getServlets
parameter_list|()
block|{
name|List
argument_list|<
name|ServletInfo
argument_list|>
name|servletInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ServletEvent
argument_list|>
name|events
init|=
name|servletEventHandler
operator|.
name|getServletEvents
argument_list|()
decl_stmt|;
for|for
control|(
name|ServletEvent
name|event
range|:
name|events
control|)
block|{
name|Servlet
name|servlet
init|=
name|event
operator|.
name|getServlet
argument_list|()
decl_stmt|;
name|String
name|servletClassName
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|servlet
operator|!=
literal|null
condition|)
block|{
name|servletClassName
operator|=
name|servlet
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|servletClassName
operator|=
name|servletClassName
operator|.
name|substring
argument_list|(
name|servletClassName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|,
name|servletClassName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|servletName
init|=
name|event
operator|.
name|getServletName
argument_list|()
operator|!=
literal|null
condition|?
name|event
operator|.
name|getServletName
argument_list|()
else|:
literal|" "
decl_stmt|;
if|if
condition|(
name|servletName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|servletName
operator|=
name|servletName
operator|.
name|substring
argument_list|(
name|servletName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|,
name|servletName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|alias
init|=
name|event
operator|.
name|getAlias
argument_list|()
operator|!=
literal|null
condition|?
name|event
operator|.
name|getAlias
argument_list|()
else|:
literal|" "
decl_stmt|;
name|String
index|[]
name|urls
init|=
name|event
operator|.
name|getUrlParameter
argument_list|()
operator|!=
literal|null
condition|?
name|event
operator|.
name|getUrlParameter
argument_list|()
else|:
operator|new
name|String
index|[]
block|{
literal|""
block|}
decl_stmt|;
name|ServletInfo
name|info
init|=
operator|new
name|ServletInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setBundleId
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setName
argument_list|(
name|servletName
argument_list|)
expr_stmt|;
name|info
operator|.
name|setClassName
argument_list|(
name|servletClassName
argument_list|)
expr_stmt|;
name|info
operator|.
name|setState
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAlias
argument_list|(
name|alias
argument_list|)
expr_stmt|;
name|info
operator|.
name|setUrls
argument_list|(
name|urls
argument_list|)
expr_stmt|;
name|servletInfos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|servletInfos
return|;
block|}
block|}
end_class

end_unit

