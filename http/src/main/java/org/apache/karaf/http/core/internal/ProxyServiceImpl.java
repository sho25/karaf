begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|BalancingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|ProxyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|proxy
operator|.
name|ProxyServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ProxyServiceImpl
implements|implements
name|ProxyService
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProxyServiceImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CONFIGURATION_PID
init|=
literal|"org.apache.karaf.http"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CONFIGURATION_KEY
init|=
literal|"proxies"
decl_stmt|;
specifier|private
name|ConfigurationAdmin
name|configurationAdmin
decl_stmt|;
specifier|private
name|HttpService
name|httpService
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Proxy
argument_list|>
name|proxies
decl_stmt|;
specifier|public
name|ProxyServiceImpl
parameter_list|(
name|HttpService
name|httpService
parameter_list|,
name|ConfigurationAdmin
name|configurationAdmin
parameter_list|,
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|httpService
operator|=
name|httpService
expr_stmt|;
name|this
operator|.
name|configurationAdmin
operator|=
name|configurationAdmin
expr_stmt|;
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|proxies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
try|try
block|{
name|Configuration
name|configuration
init|=
name|configurationAdmin
operator|.
name|getConfiguration
argument_list|(
name|CONFIGURATION_PID
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|configuration
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't load proxies"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Proxy
argument_list|>
name|getProxies
parameter_list|()
block|{
return|return
name|proxies
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getBalancingPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|balancingPolicies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ServiceReference
argument_list|<
name|BalancingPolicy
argument_list|>
argument_list|>
name|serviceReferences
init|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|BalancingPolicy
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|ServiceReference
name|serviceReference
range|:
name|serviceReferences
control|)
block|{
if|if
condition|(
name|serviceReference
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|balancingPolicies
operator|.
name|add
argument_list|(
name|serviceReference
operator|.
name|getProperty
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|balancingPolicies
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addProxy
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|proxyTo
parameter_list|,
name|String
name|balancingProxy
parameter_list|)
throws|throws
name|Exception
block|{
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|url
argument_list|,
name|proxyTo
argument_list|,
name|balancingProxy
argument_list|)
decl_stmt|;
name|addProxyInternal
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|updateConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProxy
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"removing proxy {}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|httpService
operator|.
name|unregister
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|remove
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|updateConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"update proxies"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|properties
operator|.
name|get
argument_list|(
name|CONFIGURATION_KEY
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
name|properties
operator|.
name|get
argument_list|(
name|CONFIGURATION_KEY
argument_list|)
operator|instanceof
name|String
index|[]
operator|)
condition|)
block|{
name|String
index|[]
name|proxiesArray
init|=
operator|(
name|String
index|[]
operator|)
name|properties
operator|.
name|get
argument_list|(
name|CONFIGURATION_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|proxyString
range|:
name|proxiesArray
control|)
block|{
name|String
index|[]
name|proxySplit
init|=
name|proxyString
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxySplit
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|String
name|url
init|=
name|proxySplit
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|proxyTo
init|=
name|proxySplit
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|balancingPolicy
init|=
name|proxySplit
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|proxies
operator|.
name|containsKey
argument_list|(
name|url
argument_list|)
condition|)
block|{
if|if
condition|(
name|balancingPolicy
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|)
block|{
name|balancingPolicy
operator|=
literal|null
expr_stmt|;
block|}
name|Proxy
name|proxy
init|=
operator|new
name|Proxy
argument_list|(
name|url
argument_list|,
name|proxyTo
argument_list|,
name|balancingPolicy
argument_list|)
decl_stmt|;
name|addProxyInternal
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|addProxyInternal
parameter_list|(
name|Proxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|.
name|getBalancingPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding {} proxy to {} ({})"
argument_list|,
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|,
name|proxy
operator|.
name|getProxyTo
argument_list|()
argument_list|,
name|proxy
operator|.
name|getBalancingPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding {} proxy to {}"
argument_list|,
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|,
name|proxy
operator|.
name|getProxyTo
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ProxyServlet
name|proxyServlet
init|=
operator|new
name|ProxyServlet
argument_list|()
decl_stmt|;
name|proxyServlet
operator|.
name|setProxyTo
argument_list|(
name|proxy
operator|.
name|getProxyTo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|.
name|getBalancingPolicy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|ServiceReference
argument_list|<
name|BalancingPolicy
argument_list|>
argument_list|>
name|serviceReferences
init|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|BalancingPolicy
operator|.
name|class
argument_list|,
literal|"(type="
operator|+
name|proxy
operator|.
name|getBalancingPolicy
argument_list|()
operator|+
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceReferences
operator|!=
literal|null
operator|&&
name|serviceReferences
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|BalancingPolicy
name|balancingPolicy
init|=
name|bundleContext
operator|.
name|getService
argument_list|(
name|serviceReferences
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|proxyServlet
operator|.
name|setBalancingPolicy
argument_list|(
name|balancingPolicy
argument_list|)
expr_stmt|;
block|}
block|}
name|httpService
operator|.
name|registerServlet
argument_list|(
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|,
name|proxyServlet
argument_list|,
operator|new
name|Hashtable
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|put
argument_list|(
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't add {} proxy to {}"
argument_list|,
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|,
name|proxy
operator|.
name|getProxyTo
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateConfiguration
parameter_list|()
block|{
try|try
block|{
comment|// get configuration
name|Configuration
name|configuration
init|=
name|configurationAdmin
operator|.
name|getConfiguration
argument_list|(
name|CONFIGURATION_PID
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|configurationProperties
init|=
name|configuration
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|configurationProperties
operator|==
literal|null
condition|)
block|{
name|configurationProperties
operator|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|// convert proxies map to String array
name|String
index|[]
name|proxyArray
init|=
operator|new
name|String
index|[
name|proxies
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Proxy
argument_list|>
name|entry
range|:
name|proxies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|proxyArray
index|[
name|i
index|]
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getProxyTo
argument_list|()
operator|+
literal|" "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getBalancingPolicy
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|configurationProperties
operator|.
name|put
argument_list|(
name|CONFIGURATION_KEY
argument_list|,
name|proxyArray
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|update
argument_list|(
name|configurationProperties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unable to update http proxy from configuration"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

