begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|BalancingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|ProxyService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|ServletService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|HttpMBeanImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|ProxyServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|ServletEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|ServletServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|proxy
operator|.
name|RandomBalancingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|proxy
operator|.
name|RoundRobinBalancingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|BaseActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|annotation
operator|.
name|Managed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|annotation
operator|.
name|ProvideService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|annotation
operator|.
name|RequireService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|tracker
operator|.
name|annotation
operator|.
name|Services
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|web
operator|.
name|service
operator|.
name|spi
operator|.
name|ServletListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_class
annotation|@
name|Services
argument_list|(
name|requires
operator|=
block|{
annotation|@
name|RequireService
argument_list|(
name|HttpService
operator|.
name|class
argument_list|)
block|,
annotation|@
name|RequireService
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
block|}
argument_list|,
name|provides
operator|=
block|{
annotation|@
name|ProvideService
argument_list|(
name|ServletService
operator|.
name|class
argument_list|)
block|,
annotation|@
name|ProvideService
argument_list|(
name|ProxyService
operator|.
name|class
argument_list|)
block|}
argument_list|)
annotation|@
name|Managed
argument_list|(
literal|"org.apache.karaf.http"
argument_list|)
specifier|public
class|class
name|Activator
extends|extends
name|BaseActivator
implements|implements
name|ManagedService
block|{
specifier|private
name|BundleListener
name|listener
decl_stmt|;
specifier|private
name|ProxyService
name|proxyService
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpService
name|httpService
init|=
name|getTrackedService
argument_list|(
name|HttpService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpService
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ConfigurationAdmin
name|configurationAdmin
init|=
name|getTrackedService
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|configurationAdmin
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|ServletEventHandler
name|servletEventHandler
init|=
operator|new
name|ServletEventHandler
argument_list|()
decl_stmt|;
name|register
argument_list|(
name|ServletListener
operator|.
name|class
argument_list|,
name|servletEventHandler
argument_list|)
expr_stmt|;
name|ServletServiceImpl
name|servletService
init|=
operator|new
name|ServletServiceImpl
argument_list|(
name|servletEventHandler
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|ServletService
operator|.
name|class
argument_list|,
name|servletService
argument_list|)
expr_stmt|;
name|listener
operator|=
name|event
lambda|->
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|UNINSTALLED
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|UNRESOLVED
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|BundleEvent
operator|.
name|STOPPED
condition|)
block|{
name|servletEventHandler
operator|.
name|removeEventsForBundle
argument_list|(
name|event
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|bundleContext
operator|.
name|addBundleListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|RandomBalancingPolicy
name|randomBalancingPolicy
init|=
operator|new
name|RandomBalancingPolicy
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|randomBalancingPolicyProperties
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|randomBalancingPolicyProperties
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"random"
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|BalancingPolicy
operator|.
name|class
argument_list|,
name|randomBalancingPolicy
argument_list|,
name|randomBalancingPolicyProperties
argument_list|)
expr_stmt|;
name|RoundRobinBalancingPolicy
name|roundRobinBalancingPolicy
init|=
operator|new
name|RoundRobinBalancingPolicy
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|roundRobinBalancingPolicyProperties
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|roundRobinBalancingPolicyProperties
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"round-robin"
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|BalancingPolicy
operator|.
name|class
argument_list|,
name|roundRobinBalancingPolicy
argument_list|,
name|roundRobinBalancingPolicyProperties
argument_list|)
expr_stmt|;
name|proxyService
operator|=
operator|new
name|ProxyServiceImpl
argument_list|(
name|httpService
argument_list|,
name|configurationAdmin
argument_list|,
name|bundleContext
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|ProxyService
operator|.
name|class
argument_list|,
name|proxyService
argument_list|)
expr_stmt|;
name|HttpMBeanImpl
name|httpMBean
init|=
operator|new
name|HttpMBeanImpl
argument_list|(
name|servletService
argument_list|,
name|proxyService
argument_list|)
decl_stmt|;
name|registerMBean
argument_list|(
name|httpMBean
argument_list|,
literal|"type=http"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|removeBundleListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updated
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|proxyService
operator|!=
literal|null
condition|)
block|{
name|proxyService
operator|.
name|update
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

