begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|http
operator|.
name|core
operator|.
name|internal
operator|.
name|proxy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BalancingPoliciesTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|proxyTo
init|=
literal|"A,B,C"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSingleHost
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|proxyTos
init|=
literal|"A"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|proxyTos
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|proxyTos
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRandomBalancingPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomBalancingPolicy
name|balancingPolicy
init|=
operator|new
name|RandomBalancingPolicy
argument_list|()
decl_stmt|;
name|String
name|selected
init|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
name|proxyTo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"First call: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|selected
operator|.
name|equals
argument_list|(
literal|"A"
argument_list|)
operator|||
name|selected
operator|.
name|equals
argument_list|(
literal|"B"
argument_list|)
operator|||
name|selected
operator|.
name|equals
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|selected
operator|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
name|proxyTo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Second call: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|selected
operator|.
name|equals
argument_list|(
literal|"A"
argument_list|)
operator|||
name|selected
operator|.
name|equals
argument_list|(
literal|"B"
argument_list|)
operator|||
name|selected
operator|.
name|equals
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|selected
operator|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
name|proxyTo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Third call: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|selected
operator|.
name|equals
argument_list|(
literal|"A"
argument_list|)
operator|||
name|selected
operator|.
name|equals
argument_list|(
literal|"B"
argument_list|)
operator|||
name|selected
operator|.
name|equals
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|selected
operator|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
literal|"A"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Single host: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundRobinBalancingPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|RoundRobinBalancingPolicy
name|balancingPolicy
init|=
operator|new
name|RoundRobinBalancingPolicy
argument_list|()
decl_stmt|;
name|String
name|selected
init|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
name|proxyTo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"First call: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|selected
operator|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
name|proxyTo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Second call: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|selected
operator|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
name|proxyTo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Third call: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"C"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|selected
operator|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
name|proxyTo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Fourth call: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
name|selected
operator|=
name|balancingPolicy
operator|.
name|selectHost
argument_list|(
literal|"A"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Single host: "
operator|+
name|selected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

