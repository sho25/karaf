begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|java
operator|.
name|lang
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_comment
comment|/**  * {@code Exception} is the superclass of all classes that represent recoverable  * exceptions. When exceptions are thrown, they may be caught by application  * code.  *  * @see Throwable  * @see Error  * @see RuntimeException  */
end_comment

begin_class
specifier|public
class|class
name|Exception
extends|extends
name|Throwable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3387516993124229948L
decl_stmt|;
specifier|private
specifier|transient
name|Class
index|[]
name|classContext
init|=
name|SecurityManagerEx
operator|.
name|getInstance
argument_list|()
operator|.
name|getThrowableContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|/**      * Constructs a new {@code Exception} that includes the current stack trace.      */
specifier|public
name|Exception
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructs a new {@code Exception} with the current stack trace and the      * specified detail message.      *      * @param detailMessage      *            the detail message for this exception.      */
specifier|public
name|Exception
parameter_list|(
name|String
name|detailMessage
parameter_list|)
block|{
name|super
argument_list|(
name|detailMessage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new {@code Exception} with the current stack trace, the      * specified detail message and the specified cause.      *      * @param detailMessage      *            the detail message for this exception.      * @param throwable      *            the cause of this exception.      */
specifier|public
name|Exception
parameter_list|(
name|String
name|detailMessage
parameter_list|,
name|Throwable
name|throwable
parameter_list|)
block|{
name|super
argument_list|(
name|detailMessage
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new {@code Exception} with the current stack trace and the      * specified cause.      *      * @param throwable      *            the cause of this exception.      */
specifier|public
name|Exception
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|super
argument_list|(
name|throwable
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructs a new exception with the specified detail message,      * cause, suppression enabled or disabled, and writable stack      * trace enabled or disabled.      *      * @param  message the detail message.      * @param cause the cause.  (A {@code null} value is permitted,      * and indicates that the cause is nonexistent or unknown.)      * @param enableSuppression whether or not suppression is enabled      *                          or disabled      * @param writableStackTrace whether or not the stack trace should      *                           be writable      */
specifier|protected
name|Exception
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|,
name|boolean
name|enableSuppression
parameter_list|,
name|boolean
name|writableStackTrace
parameter_list|)
block|{
try|try
block|{
name|Field
name|field
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|writableStackTrace
condition|)
block|{
name|fillInStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|field
operator|=
name|Throwable
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"stackTrace"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|field
operator|=
name|Throwable
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"detailMessage"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|field
operator|=
name|Throwable
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"cause"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|cause
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enableSuppression
condition|)
block|{
name|field
operator|=
name|Throwable
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"suppressedExceptions"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Class
index|[]
name|getClassContext
parameter_list|()
block|{
return|return
name|classContext
return|;
block|}
specifier|private
specifier|static
class|class
name|SecurityManagerEx
extends|extends
name|SecurityManager
block|{
specifier|private
specifier|static
name|SecurityManagerEx
name|sm
decl_stmt|;
specifier|public
specifier|static
name|SecurityManagerEx
name|getInstance
parameter_list|()
block|{
comment|// No synchronized block because we don't really care
comment|// if multiple instances are created at some point
if|if
condition|(
name|sm
operator|==
literal|null
condition|)
block|{
name|sm
operator|=
operator|new
name|SecurityManagerEx
argument_list|()
expr_stmt|;
block|}
return|return
name|sm
return|;
block|}
specifier|public
name|Class
index|[]
name|getThrowableContext
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|Class
index|[]
name|context
init|=
name|getClassContext
argument_list|()
decl_stmt|;
name|int
name|nb
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|context
index|[
name|context
operator|.
name|length
operator|-
literal|1
operator|-
name|nb
index|]
operator|==
name|t
operator|.
name|getClass
argument_list|()
condition|)
block|{
break|break;
block|}
name|nb
operator|++
expr_stmt|;
block|}
name|Class
index|[]
name|nc
init|=
operator|new
name|Class
index|[
name|nb
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|length
operator|-
name|nb
argument_list|,
name|nc
argument_list|,
literal|0
argument_list|,
name|nb
argument_list|)
expr_stmt|;
return|return
name|nc
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

