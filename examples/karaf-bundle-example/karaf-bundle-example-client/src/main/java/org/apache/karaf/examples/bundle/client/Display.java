begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|bundle
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|bundle
operator|.
name|common
operator|.
name|Booking
import|;
end_import

begin_comment
comment|/**  * Simple class getting the booking service (thanks to Blueprint), adding a random booking and displaying periodically.  */
end_comment

begin_class
specifier|public
class|class
name|Display
block|{
specifier|private
name|ClientService
name|clientService
decl_stmt|;
specifier|private
name|BookingDisplayThread
name|thread
decl_stmt|;
specifier|private
name|boolean
name|bookingThreadStarted
init|=
literal|false
decl_stmt|;
comment|/**      * This setter is used by Blueprint to inject the client service.      */
specifier|public
name|void
name|setClientService
parameter_list|(
name|ClientService
name|clientService
parameter_list|)
block|{
name|this
operator|.
name|clientService
operator|=
name|clientService
expr_stmt|;
block|}
comment|/**      * Init method used to start the thread.      */
specifier|public
name|void
name|init
parameter_list|()
block|{
name|thread
operator|=
operator|new
name|BookingDisplayThread
argument_list|(
name|clientService
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * Destroy method used to stop the thread.      */
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|thread
operator|.
name|terminate
argument_list|()
expr_stmt|;
block|}
comment|/**      * Very simple thread adding random booking and displaying the bookings on System.out every 5s.      */
specifier|private
class|class
name|BookingDisplayThread
extends|extends
name|Thread
block|{
specifier|private
name|ClientService
name|clientService
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|running
init|=
literal|true
decl_stmt|;
specifier|public
name|BookingDisplayThread
parameter_list|(
name|ClientService
name|clientService
parameter_list|)
block|{
name|this
operator|.
name|clientService
operator|=
name|clientService
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
comment|// TODO test
name|Booking
name|booking
init|=
operator|new
name|Booking
argument_list|(
literal|"John Doo"
argument_list|,
literal|"AF3030"
argument_list|)
decl_stmt|;
name|clientService
operator|.
name|addBooking
argument_list|(
name|booking
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|displayBookings
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
block|}
specifier|private
name|String
name|displayBookings
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Booking
name|booking
range|:
name|clientService
operator|.
name|bookings
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|booking
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
operator|.
name|append
argument_list|(
name|booking
operator|.
name|getCustomer
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
operator|.
name|append
argument_list|(
name|booking
operator|.
name|getFlight
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|terminate
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

