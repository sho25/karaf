begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|camel
operator|.
name|java
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|ExampleCamelRouteBuilder
extends|extends
name|RouteBuilder
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"jetty:http://0.0.0.0:9090/example"
argument_list|)
operator|.
name|id
argument_list|(
literal|"example-http-inbound"
argument_list|)
operator|.
name|convertBodyTo
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|log
argument_list|(
literal|"[EXAMPLE INBOUND] Received: ${body}"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|simple
argument_list|(
literal|"${headers.CamelHttpMethod} == 'POST'"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"type"
argument_list|)
operator|.
name|jsonpath
argument_list|(
literal|"$.notification.type"
argument_list|)
operator|.
name|choice
argument_list|()
operator|.
name|when
argument_list|()
operator|.
name|simple
argument_list|(
literal|"${header.type} == 'email'"
argument_list|)
operator|.
name|log
argument_list|(
literal|"[EXAMPLE INBOUND] Received email notification"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:email"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"Exchange.HTTP_RESPONSE_CODE"
argument_list|,
name|constant
argument_list|(
literal|200
argument_list|)
argument_list|)
operator|.
name|when
argument_list|()
operator|.
name|simple
argument_list|(
literal|"${header.type} == 'http'"
argument_list|)
operator|.
name|log
argument_list|(
literal|"[EXAMPLE INBOUND] Received http notification"
argument_list|)
operator|.
name|to
argument_list|(
literal|"direct:http"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"Exchange.HTTP_RESPONSE_CODE"
argument_list|,
name|constant
argument_list|(
literal|200
argument_list|)
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|log
argument_list|(
literal|"[EXAMPLE INBOUND] Unknown notification"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"{ \"status\": \"reject\", \"type\": \"unknown\" }"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"Exchange.HTTP_RESPONSE_CODE"
argument_list|,
name|constant
argument_list|(
literal|400
argument_list|)
argument_list|)
operator|.
name|otherwise
argument_list|()
operator|.
name|log
argument_list|(
literal|"[EXAMPLE INBOUND] only POST is accepted (${headers.CamelHttpMethod})"
argument_list|)
operator|.
name|setBody
argument_list|(
name|constant
argument_list|(
literal|"{ \"error\": \"only POST is accepted\" }"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"Exchange.HTTP_RESPONSE_CODE"
argument_list|,
name|constant
argument_list|(
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:email"
argument_list|)
operator|.
name|id
argument_list|(
literal|"example-email"
argument_list|)
operator|.
name|log
argument_list|(
literal|"[EXAMPLE EMAIL] Sending notification email"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"to"
argument_list|)
operator|.
name|jsonpath
argument_list|(
literal|"$.notification.to"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"subject"
argument_list|,
name|constant
argument_list|(
literal|"Notification"
argument_list|)
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"payload"
argument_list|)
operator|.
name|jsonpath
argument_list|(
literal|"$.notification.message"
argument_list|)
comment|//.to("smtp://localhost");
operator|.
name|setBody
argument_list|(
name|simple
argument_list|(
literal|"{ \"status\": \"email sent\", \"to\": \"${header.to}\", \"subject\": \"${header.subject}\" }"
argument_list|)
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"direct:http"
argument_list|)
operator|.
name|id
argument_list|(
literal|"example-http"
argument_list|)
operator|.
name|log
argument_list|(
literal|"[EXAMPLE HTTP] Sending http notification"
argument_list|)
operator|.
name|setHeader
argument_list|(
literal|"service"
argument_list|)
operator|.
name|jsonpath
argument_list|(
literal|"$.notification.service"
argument_list|)
comment|// send to HTTP service
operator|.
name|setBody
argument_list|(
name|simple
argument_list|(
literal|"{ \"status\": \"http requested\", \"service\": \"${header.service}\" }"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

