begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|dump
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|DisplayMode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GraphicsDevice
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GraphicsEnvironment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Robot
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|DumpDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|DumpProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_class
annotation|@
name|Component
specifier|public
class|class
name|ScreenshotDumpProvider
implements|implements
name|DumpProvider
block|{
annotation|@
name|Override
specifier|public
name|void
name|createDump
parameter_list|(
name|DumpDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|GraphicsEnvironment
name|ge
init|=
name|GraphicsEnvironment
operator|.
name|getLocalGraphicsEnvironment
argument_list|()
decl_stmt|;
comment|// get all graphic devices attached to computer
name|GraphicsDevice
index|[]
name|gs
init|=
name|ge
operator|.
name|getScreenDevices
argument_list|()
decl_stmt|;
comment|// create dump entry for each device
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DisplayMode
name|mode
init|=
name|gs
index|[
name|i
index|]
operator|.
name|getDisplayMode
argument_list|()
decl_stmt|;
name|Rectangle
name|bounds
init|=
operator|new
name|Rectangle
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|mode
operator|.
name|getWidth
argument_list|()
argument_list|,
name|mode
operator|.
name|getHeight
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedImage
name|screenshot
init|=
operator|new
name|Robot
argument_list|(
name|gs
index|[
name|i
index|]
argument_list|)
operator|.
name|createScreenCapture
argument_list|(
name|bounds
argument_list|)
decl_stmt|;
comment|// to attach your entry to destination you have to execute this line
name|OutputStream
name|outputStream
init|=
name|destination
operator|.
name|add
argument_list|(
literal|"screenshot/display_"
operator|+
name|i
operator|+
literal|".png"
argument_list|)
decl_stmt|;
name|ImageIO
operator|.
name|write
argument_list|(
name|screenshot
argument_list|,
literal|"PNG"
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

