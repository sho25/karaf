begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|servlet
operator|.
name|upload
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|MultipartConfigElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRegistration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|UploadServlet
extends|extends
name|HttpServlet
block|{
comment|/** The size threshold after which the file will be written to disk. */
specifier|private
specifier|static
specifier|final
name|int
name|FILE_SIZE_THRESHOLD
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|2
decl_stmt|;
comment|/** The maximum size allowed for uploaded files (-1L means unlimited). */
specifier|private
specifier|static
specifier|final
name|long
name|MAX_FILE_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/** The maximum size allowed for "multipart/form-data" requests (-1L means unlimited). */
specifier|private
specifier|static
specifier|final
name|long
name|MAX_REQUEST_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|File
name|tempDir
decl_stmt|;
specifier|public
name|UploadServlet
parameter_list|(
specifier|final
name|Path
name|tempDir
parameter_list|)
block|{
name|this
operator|.
name|tempDir
operator|=
name|tempDir
operator|.
name|toFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
specifier|final
name|MultipartConfigElement
name|multipartConfigElement
init|=
operator|new
name|MultipartConfigElement
argument_list|(
name|tempDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|MAX_FILE_SIZE
argument_list|,
name|MAX_REQUEST_SIZE
argument_list|,
name|FILE_SIZE_THRESHOLD
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|ServletRegistration
argument_list|>
name|entry
range|:
name|getServletContext
argument_list|()
operator|.
name|getServletRegistrations
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|ServletRegistration
name|reg
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|reg
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|reg
operator|instanceof
name|ServletRegistration
operator|.
name|Dynamic
condition|)
block|{
specifier|final
name|ServletRegistration
operator|.
name|Dynamic
name|regDyn
init|=
operator|(
name|ServletRegistration
operator|.
name|Dynamic
operator|)
name|reg
decl_stmt|;
name|regDyn
operator|.
name|setMultipartConfig
argument_list|(
name|multipartConfigElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|doPost
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|Collection
argument_list|<
name|Part
argument_list|>
name|parts
init|=
name|request
operator|.
name|getParts
argument_list|()
decl_stmt|;
block|}
block|}
end_class

end_unit

