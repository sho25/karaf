begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one or more  *  contributor license agreements.  See the NOTICE file distributed with  *  this work for additional information regarding copyright ownership.  *  The ASF licenses this file to You under the Apache License, Version 2.0  *  (the "License"); you may not use this file except in compliance with  *  the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|jdbc
operator|.
name|provider
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|jdbc
operator|.
name|api
operator|.
name|Booking
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|examples
operator|.
name|jdbc
operator|.
name|api
operator|.
name|BookingService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Simple implementation of the {@link BookingService} storing the {@link org.apache.karaf.examples.jdbc.api.Booking}  * instances in a list in memory.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|name
operator|=
literal|"org.apache.karaf.examples.jdbc.provider.bookingService"
argument_list|,
name|immediate
operator|=
literal|true
argument_list|)
specifier|public
class|class
name|BookingServiceJdbcImpl
implements|implements
name|BookingService
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BookingService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DATABASE_SCHEMA
init|=
literal|"KARAF_EXAMPLE"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|createTableQueryDerbyTemplate
init|=
operator|new
name|String
index|[]
block|{
literal|"CREATE SCHEMA "
operator|+
name|DATABASE_SCHEMA
block|,
literal|"CREATE TABLE "
operator|+
name|DATABASE_SCHEMA
operator|+
literal|".BOOKING(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY "
operator|+
literal|" CONSTRAINT BOOKING_PK PRIMARY KEY, customer VARCHAR(200) NOT NULL, flight VARCHAR(100))"
block|}
decl_stmt|;
comment|/** Select queries */
specifier|private
specifier|final
specifier|static
name|String
name|selectBookingSql
init|=
literal|"select id, customer, flight "
operator|+
literal|"from "
operator|+
name|DATABASE_SCHEMA
operator|+
literal|".BOOKING"
decl_stmt|;
comment|/** Insert queries */
specifier|private
specifier|final
specifier|static
name|String
name|insertBookingSql
init|=
literal|"insert into "
operator|+
name|DATABASE_SCHEMA
operator|+
literal|".BOOKING "
operator|+
literal|"(customer, flight) "
operator|+
literal|"values (?, ?)"
decl_stmt|;
comment|/** Update queries */
specifier|private
specifier|final
specifier|static
name|String
name|updateBookingSql
init|=
literal|"update "
operator|+
name|DATABASE_SCHEMA
operator|+
literal|".BOOKING "
operator|+
literal|"set customer = ?, flight = ?"
operator|+
literal|"where id = ?"
decl_stmt|;
comment|/** Delete queries */
specifier|private
specifier|final
specifier|static
name|String
name|deleteBookingSql
init|=
literal|"delete from "
operator|+
name|DATABASE_SCHEMA
operator|+
literal|".BOOKING "
operator|+
literal|"where id = ?"
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|target
operator|=
literal|"(osgi.jndi.service.name=jdbc/karaf-example)"
argument_list|)
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|)
block|{
name|open
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|open
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Datasource {} "
argument_list|,
name|this
operator|.
name|dataSource
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
name|createTables
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error creating table "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getValue
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
operator|)
condition|?
name|value
else|:
name|defaultValue
return|;
block|}
specifier|private
name|void
name|createTables
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|DatabaseMetaData
name|dbm
decl_stmt|;
name|ResultSet
name|tables
decl_stmt|;
try|try
block|{
name|dbm
operator|=
name|connection
operator|.
name|getMetaData
argument_list|()
expr_stmt|;
name|tables
operator|=
name|dbm
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|"KARAF_EXAMPLE"
argument_list|,
literal|"BOOKING"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tables
operator|.
name|next
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Tables does not exist"
argument_list|)
expr_stmt|;
comment|// Tables does not exist so we create all the tables
name|String
index|[]
name|createTemplate
init|=
name|createTemplate
operator|=
name|createTableQueryDerbyTemplate
decl_stmt|;
try|try
init|(
name|Statement
name|createStatement
init|=
name|connection
operator|.
name|createStatement
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|cpt
init|=
literal|0
init|;
name|cpt
operator|<
name|createTemplate
operator|.
name|length
condition|;
name|cpt
operator|++
control|)
block|{
name|createStatement
operator|.
name|addBatch
argument_list|(
name|createTemplate
index|[
name|cpt
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|createStatement
operator|.
name|executeBatch
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"No table has been created !"
argument_list|)
throw|;
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Schema and tables has been created"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can't create tables"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Tables already exist"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can't verify tables existence"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Booking
argument_list|>
name|list
parameter_list|()
block|{
name|Collection
argument_list|<
name|Booking
argument_list|>
name|bookings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
try|try
init|(
name|PreparedStatement
name|selectStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|selectBookingSql
argument_list|)
init|)
block|{
name|ResultSet
name|rs
init|=
name|selectStatement
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|Booking
name|booking
init|=
operator|new
name|Booking
argument_list|()
decl_stmt|;
name|booking
operator|.
name|setId
argument_list|(
name|rs
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|booking
operator|.
name|setCustomer
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"customer"
argument_list|)
argument_list|)
expr_stmt|;
name|booking
operator|.
name|setFlight
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"flight"
argument_list|)
argument_list|)
expr_stmt|;
name|bookings
operator|.
name|add
argument_list|(
name|booking
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can't retreive the bookings"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error getting connection "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
name|bookings
return|;
block|}
annotation|@
name|Override
specifier|public
name|Booking
name|get
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
name|String
name|sqlQuery
init|=
name|selectBookingSql
operator|+
literal|" where id = ?"
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|selectStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|sqlQuery
argument_list|)
init|)
block|{
name|selectStatement
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ResultSet
name|rs
init|=
name|selectStatement
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|Booking
name|booking
init|=
operator|new
name|Booking
argument_list|()
decl_stmt|;
name|booking
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|booking
operator|.
name|setCustomer
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"customer"
argument_list|)
argument_list|)
expr_stmt|;
name|booking
operator|.
name|setFlight
argument_list|(
name|rs
operator|.
name|getString
argument_list|(
literal|"flight"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|booking
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can't find booking with id {}"
argument_list|,
name|id
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error getting connection "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Booking
name|booking
parameter_list|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
if|if
condition|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PreparedStatement
name|insertStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|insertBookingSql
argument_list|,
name|PreparedStatement
operator|.
name|RETURN_GENERATED_KEYS
argument_list|)
init|)
block|{
comment|// set values
name|insertStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|booking
operator|.
name|getCustomer
argument_list|()
argument_list|)
expr_stmt|;
name|insertStatement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|booking
operator|.
name|getFlight
argument_list|()
argument_list|)
expr_stmt|;
name|insertStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|int
name|newId
init|=
literal|0
decl_stmt|;
name|ResultSet
name|rs
init|=
name|insertStatement
operator|.
name|getGeneratedKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|newId
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|booking
operator|.
name|setId
argument_list|(
operator|new
name|Long
argument_list|(
name|newId
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Booking created with id = {}"
argument_list|,
name|newId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can't insert booking with customer {}"
argument_list|,
name|booking
operator|.
name|getCustomer
argument_list|()
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error getting connection "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
if|if
condition|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|connection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PreparedStatement
name|deleteStatement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|deleteBookingSql
argument_list|)
init|)
block|{
comment|// where values
name|deleteStatement
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|deleteStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Service deleted with id = {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|exception
parameter_list|)
block|{
name|connection
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can't delete service with id {}"
argument_list|,
name|id
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error getting connection "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

