begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|jasypt
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ComponentDefinitionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|ExtendedBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|blueprint
operator|.
name|mutable
operator|.
name|MutableBeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|ComponentDefinitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|BeanMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|BeanProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|ComponentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|reflect
operator|.
name|ValueMetadata
import|;
end_import

begin_comment
comment|/**  * Utility for placeholders parsing / validation  *  * @version $Rev$, $Date$  */
end_comment

begin_class
specifier|public
class|class
name|PlaceholdersUtils
block|{
specifier|public
specifier|static
name|void
name|validatePlaceholder
parameter_list|(
name|MutableBeanMetadata
name|metadata
parameter_list|,
name|ComponentDefinitionRegistry
name|registry
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPlaceholderProperty
argument_list|(
name|metadata
argument_list|,
literal|"placeholderPrefix"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|getPlaceholderProperty
argument_list|(
name|metadata
argument_list|,
literal|"placeholderSuffix"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|registry
operator|.
name|getComponentDefinitionNames
argument_list|()
control|)
block|{
name|ComponentMetadata
name|component
init|=
name|registry
operator|.
name|getComponentDefinition
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|component
operator|instanceof
name|ExtendedBeanMetadata
condition|)
block|{
name|ExtendedBeanMetadata
name|bean
init|=
operator|(
name|ExtendedBeanMetadata
operator|)
name|component
decl_stmt|;
if|if
condition|(
name|bean
operator|.
name|getRuntimeClass
argument_list|()
operator|!=
literal|null
operator|&&
name|AbstractPropertyPlaceholder
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|bean
operator|.
name|getRuntimeClass
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|otherPrefix
init|=
name|getPlaceholderProperty
argument_list|(
name|bean
argument_list|,
literal|"placeholderPrefix"
argument_list|)
decl_stmt|;
name|String
name|otherSuffix
init|=
name|getPlaceholderProperty
argument_list|(
name|bean
argument_list|,
literal|"placeholderSuffix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|otherPrefix
argument_list|)
operator|&&
name|suffix
operator|.
name|equals
argument_list|(
name|otherSuffix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ComponentDefinitionException
argument_list|(
literal|"Multiple placeholders with the same prefix and suffix are not allowed"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getPlaceholderProperty
parameter_list|(
name|BeanMetadata
name|bean
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|BeanProperty
name|property
range|:
name|bean
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ValueMetadata
name|value
init|=
operator|(
name|ValueMetadata
operator|)
name|property
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|value
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

