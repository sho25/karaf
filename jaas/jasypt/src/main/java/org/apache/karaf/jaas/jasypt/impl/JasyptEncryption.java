begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *   *       http://www.apache.org/licenses/LICENSE-2.0  *   *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|jasypt
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|EncryptionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|digest
operator|.
name|config
operator|.
name|DigesterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|digest
operator|.
name|config
operator|.
name|SimpleDigesterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|digest
operator|.
name|config
operator|.
name|SimpleStringDigesterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|exceptions
operator|.
name|EncryptionInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|util
operator|.
name|password
operator|.
name|ConfigurablePasswordEncryptor
import|;
end_import

begin_comment
comment|/**  * Jasypt implementation of the Encryption service.  */
end_comment

begin_class
specifier|public
class|class
name|JasyptEncryption
implements|implements
name|Encryption
block|{
specifier|private
name|ConfigurablePasswordEncryptor
name|passwordEncryptor
decl_stmt|;
comment|/**      *<p>      * Default constructor with the encryption algorithm.      *</p>      *       * @param params encryption parameters      */
specifier|public
name|JasyptEncryption
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|SimpleStringDigesterConfig
name|config
init|=
operator|new
name|SimpleStringDigesterConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|EncryptionService
operator|.
name|ALGORITHM
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|setAlgorithm
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EncryptionService
operator|.
name|ENCODING
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|setStringOutputType
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"providerName"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|setProviderName
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"saltSizeBytes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|setSaltSizeBytes
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"iterations"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|setIterations
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"providerClassName"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|setProviderClassName
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"saltGeneratorClassName"
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|config
operator|.
name|setSaltGeneratorClassName
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported encryption parameter: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|passwordEncryptor
operator|=
operator|new
name|ConfigurablePasswordEncryptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|passwordEncryptor
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|passwordEncryptor
operator|.
name|encryptPassword
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EncryptionInitializationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.karaf.jaas.modules.Encryption#encryptPassword(java.lang.String)      */
specifier|public
name|String
name|encryptPassword
parameter_list|(
name|String
name|plain
parameter_list|)
block|{
return|return
name|this
operator|.
name|passwordEncryptor
operator|.
name|encryptPassword
argument_list|(
name|plain
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.karaf.jaas.modules.Encryption#checkPassword(java.lang.String, java.lang.String)      */
specifier|public
name|boolean
name|checkPassword
parameter_list|(
name|String
name|input
parameter_list|,
name|String
name|password
parameter_list|)
block|{
return|return
name|passwordEncryptor
operator|.
name|checkPassword
argument_list|(
name|input
argument_list|,
name|password
argument_list|)
return|;
block|}
block|}
end_class

end_unit

