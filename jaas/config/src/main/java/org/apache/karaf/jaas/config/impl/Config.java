begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|ProxyLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|JaasRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_comment
comment|/**  * An implementation of JaasRealm which is created  * by the spring namespace handler.  */
end_comment

begin_class
specifier|public
class|class
name|Config
implements|implements
name|JaasRealm
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|int
name|rank
decl_stmt|;
specifier|private
name|Module
index|[]
name|modules
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|transient
name|AppConfigurationEntry
index|[]
name|entries
decl_stmt|;
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|int
name|getRank
parameter_list|()
block|{
return|return
name|rank
return|;
block|}
specifier|public
name|void
name|setRank
parameter_list|(
name|int
name|rank
parameter_list|)
block|{
name|this
operator|.
name|rank
operator|=
name|rank
expr_stmt|;
block|}
specifier|public
name|Module
index|[]
name|getModules
parameter_list|()
block|{
return|return
name|modules
return|;
block|}
specifier|public
name|void
name|setModules
parameter_list|(
name|Module
index|[]
name|modules
parameter_list|)
block|{
name|this
operator|.
name|modules
operator|=
name|modules
expr_stmt|;
name|this
operator|.
name|entries
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|AppConfigurationEntry
index|[]
name|getEntries
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|entries
operator|==
literal|null
operator|&&
name|this
operator|.
name|modules
operator|!=
literal|null
condition|)
block|{
name|Module
index|[]
name|modules
init|=
name|this
operator|.
name|modules
decl_stmt|;
name|AppConfigurationEntry
index|[]
name|entries
init|=
operator|new
name|AppConfigurationEntry
index|[
name|modules
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modules
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|modules
index|[
name|i
index|]
operator|.
name|getOptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
name|modules
index|[
name|i
index|]
operator|.
name|getOptions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|options
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|options
operator|.
name|put
argument_list|(
name|ProxyLoginModule
operator|.
name|PROPERTY_MODULE
argument_list|,
name|modules
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|ProxyLoginModule
operator|.
name|PROPERTY_BUNDLE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entries
index|[
name|i
index|]
operator|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|ProxyLoginModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|getControlFlag
argument_list|(
name|modules
index|[
name|i
index|]
operator|.
name|getFlags
argument_list|()
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|entries
operator|=
name|entries
expr_stmt|;
block|}
return|return
name|this
operator|.
name|entries
return|;
block|}
specifier|private
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
name|getControlFlag
parameter_list|(
name|String
name|flags
parameter_list|)
block|{
if|if
condition|(
literal|"required"
operator|.
name|equalsIgnoreCase
argument_list|(
name|flags
argument_list|)
condition|)
block|{
return|return
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
return|;
block|}
if|if
condition|(
literal|"optional"
operator|.
name|equalsIgnoreCase
argument_list|(
name|flags
argument_list|)
condition|)
block|{
return|return
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|OPTIONAL
return|;
block|}
if|if
condition|(
literal|"requisite"
operator|.
name|equalsIgnoreCase
argument_list|(
name|flags
argument_list|)
condition|)
block|{
return|return
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUISITE
return|;
block|}
if|if
condition|(
literal|"sufficient"
operator|.
name|equalsIgnoreCase
argument_list|(
name|flags
argument_list|)
condition|)
block|{
return|return
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|SUFFICIENT
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

