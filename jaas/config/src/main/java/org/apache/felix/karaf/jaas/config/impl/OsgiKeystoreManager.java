begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|KeystoreInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|KeystoreIsLocked
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|KeystoreManager
import|;
end_import

begin_comment
comment|/**  * Implementation of KeystoreManager  */
end_comment

begin_class
specifier|public
class|class
name|OsgiKeystoreManager
implements|implements
name|KeystoreManager
block|{
specifier|private
name|List
argument_list|<
name|KeystoreInstance
argument_list|>
name|keystores
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|KeystoreInstance
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|register
parameter_list|(
name|KeystoreInstance
name|keystore
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|keystores
operator|.
name|add
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|KeystoreInstance
name|keystore
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
name|keystores
operator|.
name|remove
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KeystoreInstance
name|getKeystore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|KeystoreInstance
name|keystore
init|=
literal|null
decl_stmt|;
for|for
control|(
name|KeystoreInstance
name|ks
range|:
name|keystores
control|)
block|{
if|if
condition|(
name|ks
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|keystore
operator|==
literal|null
operator|||
name|keystore
operator|.
name|getRank
argument_list|()
operator|<
name|ks
operator|.
name|getRank
argument_list|()
condition|)
block|{
name|keystore
operator|=
name|ks
expr_stmt|;
block|}
block|}
block|}
return|return
name|keystore
return|;
block|}
specifier|public
name|SSLContext
name|createSSLContext
parameter_list|(
name|String
name|provider
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|String
name|keyStore
parameter_list|,
name|String
name|keyAlias
parameter_list|,
name|String
name|trustStore
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|KeystoreInstance
name|keyInstance
init|=
name|getKeystore
argument_list|(
name|keyStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyInstance
operator|!=
literal|null
operator|&&
name|keyInstance
operator|.
name|isKeystoreLocked
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|KeystoreIsLocked
argument_list|(
literal|"Keystore '"
operator|+
name|keyStore
operator|+
literal|"' is locked"
argument_list|)
throw|;
block|}
if|if
condition|(
name|keyInstance
operator|!=
literal|null
operator|&&
name|keyInstance
operator|.
name|isKeyLocked
argument_list|(
name|keyAlias
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|KeystoreIsLocked
argument_list|(
literal|"Key '"
operator|+
name|keyAlias
operator|+
literal|"' in keystore '"
operator|+
name|keyStore
operator|+
literal|"' is locked"
argument_list|)
throw|;
block|}
name|KeystoreInstance
name|trustInstance
init|=
name|trustStore
operator|==
literal|null
condition|?
literal|null
else|:
name|getKeystore
argument_list|(
name|trustStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|trustInstance
operator|!=
literal|null
operator|&&
name|trustInstance
operator|.
name|isKeystoreLocked
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|KeystoreIsLocked
argument_list|(
literal|"Keystore '"
operator|+
name|trustStore
operator|+
literal|"' is locked"
argument_list|)
throw|;
block|}
name|SSLContext
name|context
decl_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|init
argument_list|(
name|keyInstance
operator|==
literal|null
condition|?
literal|null
else|:
name|keyInstance
operator|.
name|getKeyManager
argument_list|(
name|algorithm
argument_list|,
name|keyAlias
argument_list|)
argument_list|,
name|trustInstance
operator|==
literal|null
condition|?
literal|null
else|:
name|trustInstance
operator|.
name|getTrustManager
argument_list|(
name|algorithm
argument_list|)
argument_list|,
operator|new
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
specifier|public
name|SSLServerSocketFactory
name|createSSLServerFactory
parameter_list|(
name|String
name|provider
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|String
name|keyStore
parameter_list|,
name|String
name|keyAlias
parameter_list|,
name|String
name|trustStore
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|SSLContext
name|context
init|=
name|createSSLContext
argument_list|(
name|provider
argument_list|,
name|protocol
argument_list|,
name|algorithm
argument_list|,
name|keyStore
argument_list|,
name|keyAlias
argument_list|,
name|trustStore
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getServerSocketFactory
argument_list|()
return|;
block|}
specifier|public
name|SSLSocketFactory
name|createSSLFactory
parameter_list|(
name|String
name|provider
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|String
name|keyStore
parameter_list|,
name|String
name|keyAlias
parameter_list|,
name|String
name|trustStore
parameter_list|)
throws|throws
name|GeneralSecurityException
block|{
name|SSLContext
name|context
init|=
name|createSSLContext
argument_list|(
name|provider
argument_list|,
name|protocol
argument_list|,
name|algorithm
argument_list|,
name|keyStore
argument_list|,
name|keyAlias
argument_list|,
name|trustStore
argument_list|)
decl_stmt|;
return|return
name|context
operator|.
name|getSocketFactory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

