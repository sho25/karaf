begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|jaas
operator|.
name|boot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_comment
comment|/**  * An OSGi proxy login module that should be used instead of a plain reference to  * a given login module.  Two properties must be set, the name of the login module  * class and the bundle to be used to load it.  * This class must be available from all modules, so it has to be either in a fragment  * bundle attached to the system bundle or be made available through the boot delegation  * class path.  */
end_comment

begin_class
specifier|public
class|class
name|ProxyLoginModule
implements|implements
name|LoginModule
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_MODULE
init|=
literal|"org.apache.servicemix.kernel.jaas.module"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_BUNDLE
init|=
literal|"org.apache.servicemix.kernel.jaas.bundle"
decl_stmt|;
specifier|private
specifier|static
name|BundleContext
name|bundleContext
init|=
literal|null
decl_stmt|;
specifier|private
name|LoginModule
name|target
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|void
name|init
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|bundleContext
operator|=
name|context
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see javax.security.auth.spi.LoginModule#initialize(javax.security.auth.Subject, javax.security.auth.callback.CallbackHandler, java.util.Map, java.util.Map)      */
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
if|if
condition|(
name|bundleContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ProxyLoginModule not initialized. Init must be called prior any invocation."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|newOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|String
name|module
init|=
operator|(
name|String
operator|)
name|newOptions
operator|.
name|remove
argument_list|(
name|PROPERTY_MODULE
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Option "
operator|+
name|PROPERTY_MODULE
operator|+
literal|" must be set to the name of the factory service"
argument_list|)
throw|;
block|}
name|String
name|bundleId
init|=
operator|(
name|String
operator|)
name|newOptions
operator|.
name|remove
argument_list|(
name|PROPERTY_BUNDLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Option "
operator|+
name|PROPERTY_BUNDLE
operator|+
literal|" must be set to the name of the factory service"
argument_list|)
throw|;
block|}
name|Bundle
name|bundle
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|bundleId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No bundle found for id "
operator|+
name|bundleId
argument_list|)
throw|;
block|}
try|try
block|{
name|target
operator|=
operator|(
name|LoginModule
operator|)
name|bundle
operator|.
name|loadClass
argument_list|(
name|module
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can not load or create login module "
operator|+
name|module
operator|+
literal|" for bundle "
operator|+
name|bundleId
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|target
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|callbackHandler
argument_list|,
name|sharedState
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see javax.security.auth.spi.LoginModule#login()      */
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
name|target
operator|.
name|login
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see javax.security.auth.spi.LoginModule#commit()      */
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
name|target
operator|.
name|commit
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see javax.security.auth.spi.LoginModule#abort()      */
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
name|target
operator|.
name|abort
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see javax.security.auth.spi.LoginModule#logout()      */
specifier|public
name|boolean
name|logout
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
name|target
operator|.
name|logout
argument_list|()
return|;
block|}
block|}
end_class

end_unit

