begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|command
operator|.
name|completers
operator|.
name|LoginModuleNameCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|JaasRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|impl
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|impl
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|BackingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Completion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"jaas"
argument_list|,
name|name
operator|=
literal|"module-add"
argument_list|,
name|description
operator|=
literal|"Add a Login Module"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ModuleAddCommand
extends|extends
name|JaasCommandSupport
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"loginModule"
argument_list|,
name|description
operator|=
literal|"Class Name of Login Module"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
annotation|@
name|Completion
argument_list|(
name|LoginModuleNameCompleter
operator|.
name|class
argument_list|)
specifier|private
name|String
name|loginModule
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|name
operator|=
literal|"properties"
argument_list|,
name|description
operator|=
literal|"Pair of Properties (key value)"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|propertiesList
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|(
name|BackingEngine
name|engine
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Fetch Realm
name|JaasRealm
name|realm
init|=
operator|(
name|JaasRealm
operator|)
name|session
operator|.
name|get
argument_list|(
name|JAAS_REALM
argument_list|)
decl_stmt|;
if|if
condition|(
name|realm
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No JAAS Realm has been selected"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No JAAS Realm has been selected"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|realm
operator|instanceof
name|Config
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Selected JAAS Realm was not added via jaas:add-realm, only those are supported!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Selected JAAS Realm was not added via jaas:add-realm, only those are supported!"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|checkIfClassExists
argument_list|(
name|loginModule
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Module class '"
operator|+
name|loginModule
operator|+
literal|"' is unknown!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Module class '"
operator|+
name|loginModule
operator|+
literal|"' is unknown!"
argument_list|)
throw|;
block|}
name|Module
name|module
init|=
name|createModuleFromCmdParameters
argument_list|(
name|loginModule
argument_list|,
name|propertiesList
argument_list|)
decl_stmt|;
comment|// Add the Login Module to the current Realm
name|List
argument_list|<
name|Module
argument_list|>
name|modulesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
operator|(
name|Config
operator|)
name|realm
operator|)
operator|.
name|getModules
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|modulesList
operator|.
name|add
argument_list|(
name|module
argument_list|)
expr_stmt|;
name|Module
index|[]
name|newModules
init|=
name|modulesList
operator|.
name|toArray
argument_list|(
operator|new
name|Module
index|[]
block|{}
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Config
operator|)
name|realm
operator|)
operator|.
name|setModules
argument_list|(
name|newModules
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Parses the Command Line Parameters given to create a valid Module and Properties from it.      * @param loginModule Class Name of the login Module      * @param propertiesList List of Properties interpreted as "key1 value1 key2 value2"      * @return Module      */
specifier|static
name|Module
name|createModuleFromCmdParameters
parameter_list|(
name|String
name|loginModule
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|propertiesList
parameter_list|)
block|{
comment|// Parse Properties
if|if
condition|(
name|propertiesList
operator|!=
literal|null
operator|&&
name|propertiesList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|propertiesList
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|)
operator|==
literal|1
condition|)
block|{
comment|// Properties are uneven... bad
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Properties have to be given as \"key1 value1 key2 value2 ...\" but number of Arguments is uneven!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertiesList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertiesList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|propertiesList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|propertiesList
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Assemble Login Module
name|Module
name|module
init|=
operator|new
name|Module
argument_list|()
decl_stmt|;
name|module
operator|.
name|setClassName
argument_list|(
name|loginModule
argument_list|)
expr_stmt|;
name|module
operator|.
name|setFlags
argument_list|(
literal|"required"
argument_list|)
expr_stmt|;
name|module
operator|.
name|setOptions
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|module
return|;
block|}
specifier|public
name|String
name|getLoginModule
parameter_list|()
block|{
return|return
name|loginModule
return|;
block|}
specifier|public
name|void
name|setLoginModule
parameter_list|(
name|String
name|loginModule
parameter_list|)
block|{
name|this
operator|.
name|loginModule
operator|=
name|loginModule
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPropertiesList
parameter_list|()
block|{
return|return
name|propertiesList
return|;
block|}
specifier|public
name|void
name|setPropertiesList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|propertiesList
parameter_list|)
block|{
name|this
operator|.
name|propertiesList
operator|=
name|propertiesList
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkIfClassExists
parameter_list|(
name|String
name|loginModule
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|loginModule
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

