begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|command
operator|.
name|completers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|ProxyLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|config
operator|.
name|JaasRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|StringsCompleter
import|;
end_import

begin_class
annotation|@
name|Service
specifier|public
class|class
name|LoginModuleNameCompleter
implements|implements
name|Completer
block|{
annotation|@
name|Reference
specifier|private
name|List
argument_list|<
name|JaasRealm
argument_list|>
name|realms
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|complete
parameter_list|(
name|Session
name|session
parameter_list|,
name|CommandLine
name|commandLine
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
name|StringsCompleter
name|delegate
init|=
operator|new
name|StringsCompleter
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|realms
operator|!=
literal|null
operator|&&
operator|!
name|realms
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|JaasRealm
name|realm
range|:
name|realms
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|moduleClassNames
init|=
name|findLoginModuleClassNames
argument_list|(
name|realm
argument_list|)
decl_stmt|;
if|if
condition|(
name|moduleClassNames
operator|!=
literal|null
operator|&&
operator|!
name|moduleClassNames
operator|.
name|isEmpty
argument_list|()
condition|)
name|delegate
operator|.
name|getStrings
argument_list|()
operator|.
name|addAll
argument_list|(
name|moduleClassNames
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
name|delegate
operator|.
name|complete
argument_list|(
name|session
argument_list|,
name|commandLine
argument_list|,
name|candidates
argument_list|)
return|;
block|}
comment|/**      * Finds the login module class name in the {@link JaasRealm} entries.      * @param realm      * @return      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|findLoginModuleClassNames
parameter_list|(
name|JaasRealm
name|realm
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|moduleClassNames
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|AppConfigurationEntry
name|entry
range|:
name|realm
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|String
name|moduleClass
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
name|ProxyLoginModule
operator|.
name|PROPERTY_MODULE
argument_list|)
decl_stmt|;
if|if
condition|(
name|moduleClass
operator|!=
literal|null
condition|)
block|{
name|moduleClassNames
operator|.
name|add
argument_list|(
name|moduleClass
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|moduleClassNames
return|;
block|}
block|}
end_class

end_unit

