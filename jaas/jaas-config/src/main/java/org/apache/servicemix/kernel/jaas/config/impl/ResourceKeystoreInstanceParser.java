begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|jaas
operator|.
name|config
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|jaas
operator|.
name|config
operator|.
name|KeystoreInstance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinitionHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|parsing
operator|.
name|BeanComponentDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|BeanDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|AbstractSingleBeanDefinitionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|ParserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|service
operator|.
name|exporter
operator|.
name|support
operator|.
name|OsgiServiceFactoryBean
import|;
end_import

begin_comment
comment|/**  * Spring parser for a keystore instance  */
end_comment

begin_class
specifier|public
class|class
name|ResourceKeystoreInstanceParser
extends|extends
name|AbstractSingleBeanDefinitionParser
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PUBLISH_ATTRIBUTE
init|=
literal|"publish"
decl_stmt|;
specifier|protected
name|Class
name|getBeanClass
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
return|return
name|ResourceKeystoreInstance
operator|.
name|class
return|;
block|}
specifier|protected
name|void
name|doParse
parameter_list|(
name|Element
name|element
parameter_list|,
name|ParserContext
name|parserContext
parameter_list|,
name|BeanDefinitionBuilder
name|builder
parameter_list|)
block|{
comment|// Parse name
name|String
name|name
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Parse rank
name|String
name|rank
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"rank"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rank
operator|!=
literal|null
operator|&&
name|rank
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"rank"
argument_list|,
name|rank
argument_list|)
expr_stmt|;
block|}
comment|// Parse path
name|String
name|path
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"path"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
comment|// Parse keystorePassword
name|String
name|keystorePassword
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"keystorePassword"
argument_list|)
decl_stmt|;
if|if
condition|(
name|keystorePassword
operator|!=
literal|null
operator|&&
name|keystorePassword
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"keystorePassword"
argument_list|,
name|keystorePassword
argument_list|)
expr_stmt|;
block|}
comment|// Parse keyPasswords
name|String
name|keyPasswords
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"keyPasswords"
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPasswords
operator|!=
literal|null
operator|&&
name|keyPasswords
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|addPropertyValue
argument_list|(
literal|"keyPasswords"
argument_list|,
name|keyPasswords
argument_list|)
expr_stmt|;
block|}
comment|// Parse publish
name|String
name|publish
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"publish"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|publish
argument_list|)
condition|)
block|{
comment|// Publish Config
name|BeanDefinitionBuilder
name|bd
init|=
name|BeanDefinitionBuilder
operator|.
name|genericBeanDefinition
argument_list|(
name|OsgiServiceFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|bd
operator|.
name|addPropertyValue
argument_list|(
literal|"target"
argument_list|,
name|builder
operator|.
name|getBeanDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|bd
operator|.
name|addPropertyValue
argument_list|(
literal|"interfaces"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|KeystoreInstance
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|BeanDefinition
name|def
init|=
name|bd
operator|.
name|getBeanDefinition
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|parserContext
operator|.
name|getReaderContext
argument_list|()
operator|.
name|generateBeanName
argument_list|(
name|def
argument_list|)
decl_stmt|;
name|BeanDefinitionHolder
name|holder
init|=
operator|new
name|BeanDefinitionHolder
argument_list|(
name|def
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|registerBeanDefinition
argument_list|(
name|holder
argument_list|,
name|parserContext
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldFireEvents
argument_list|()
condition|)
block|{
name|BeanComponentDefinition
name|componentDefinition
init|=
operator|new
name|BeanComponentDefinition
argument_list|(
name|holder
argument_list|)
decl_stmt|;
name|postProcessComponentDefinition
argument_list|(
name|componentDefinition
argument_list|)
expr_stmt|;
name|parserContext
operator|.
name|registerComponent
argument_list|(
name|componentDefinition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

