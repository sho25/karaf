begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|jaas
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|support
operator|.
name|AbstractApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|osgi
operator|.
name|context
operator|.
name|support
operator|.
name|BundleContextAwareProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|support
operator|.
name|DefaultListableBeanFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|jaas
operator|.
name|boot
operator|.
name|ProxyLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|jaas
operator|.
name|config
operator|.
name|impl
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|NamespaceHandlerTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testConfig
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Dictionary
name|headers
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|,
literal|"1.0.0.SNAPSHOT"
argument_list|)
expr_stmt|;
specifier|final
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Bundle
name|bundle
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ServiceRegistration
name|reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundle
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"symbolic-name"
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|32
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|headers
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|aryEq
argument_list|(
operator|new
name|String
index|[]
block|{
name|JaasRealm
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Dictionary
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|registerService
argument_list|(
name|aryEq
argument_list|(
operator|new
name|String
index|[]
block|{
name|KeystoreInstance
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|,
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
expr|<
name|Dictionary
operator|>
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
name|AbstractApplicationContext
name|ctx
init|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"classpath:config.xml"
block|}
argument_list|,
literal|false
argument_list|)
block|{
specifier|protected
name|DefaultListableBeanFactory
name|createBeanFactory
parameter_list|()
block|{
name|DefaultListableBeanFactory
name|f
init|=
name|super
operator|.
name|createBeanFactory
argument_list|()
decl_stmt|;
name|f
operator|.
name|addBeanPostProcessor
argument_list|(
operator|new
name|BundleContextAwareProcessor
argument_list|(
name|bundleContext
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
block|}
decl_stmt|;
name|ctx
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|bundleContext
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
comment|// Test realm
name|Object
name|obj
init|=
name|ctx
operator|.
name|getBean
argument_list|(
literal|"realm"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|Config
argument_list|)
expr_stmt|;
name|Config
name|cfg
init|=
operator|(
name|Config
operator|)
name|obj
decl_stmt|;
name|assertNotNull
argument_list|(
name|cfg
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"realm"
argument_list|,
name|cfg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cfg
operator|.
name|getModules
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cfg
operator|.
name|getModules
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cfg
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.servicemix.kernel.jaas.config.SimpleLoginModule"
argument_list|,
name|cfg
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"required"
argument_list|,
name|cfg
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cfg
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cfg
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOptions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|cfg
operator|.
name|getModules
argument_list|()
index|[
literal|0
index|]
operator|.
name|getOptions
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|AppConfigurationEntry
index|[]
name|entries
init|=
name|cfg
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entries
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ProxyLoginModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getLoginModuleName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|entries
index|[
literal|0
index|]
operator|.
name|getControlFlag
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
init|=
name|entries
index|[
literal|0
index|]
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|options
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"org.apache.servicemix.kernel.jaas.config.SimpleLoginModule"
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|ProxyLoginModule
operator|.
name|PROPERTY_MODULE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"32"
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|ProxyLoginModule
operator|.
name|PROPERTY_BUNDLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test keystore
name|obj
operator|=
name|ctx
operator|.
name|getBean
argument_list|(
literal|"keystore"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|KeystoreInstance
argument_list|)
expr_stmt|;
name|KeystoreInstance
name|ks
init|=
operator|(
name|KeystoreInstance
operator|)
name|obj
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ks"
argument_list|,
name|ks
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ks
operator|.
name|getRank
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ks
operator|.
name|getPrivateKey
argument_list|(
literal|"myalias"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

