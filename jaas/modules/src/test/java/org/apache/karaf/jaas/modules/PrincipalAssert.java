begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|PrincipalAssert
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
return|return
name|principals
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|assertPrincipalNamed
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|clazz
parameter_list|,
name|String
name|expectedName
parameter_list|)
block|{
name|Long
name|numMatching
init|=
name|subject
operator|.
name|getPrincipals
argument_list|(
name|clazz
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|pr
lambda|->
name|expectedName
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|counting
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|clazz
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" principal in subject with name="
operator|+
name|expectedName
argument_list|,
literal|1l
argument_list|,
name|numMatching
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

