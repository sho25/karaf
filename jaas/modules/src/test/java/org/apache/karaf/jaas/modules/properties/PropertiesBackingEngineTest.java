begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|PropertiesBackingEngineTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testUserRoles
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|PropertiesBackingEngine
name|engine
init|=
operator|new
name|PropertiesBackingEngine
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|engine
operator|.
name|addUser
argument_list|(
literal|"a"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|listUsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UserPrincipal
name|upa
init|=
name|engine
operator|.
name|listUsers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|upa
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addUser
argument_list|(
literal|"b"
argument_list|,
literal|"bb"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addRole
argument_list|(
literal|"a"
argument_list|,
literal|"role1"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addRole
argument_list|(
literal|"a"
argument_list|,
literal|"role2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|engine
operator|.
name|listRoles
argument_list|(
name|upa
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundR1
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR2
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|engine
operator|.
name|listRoles
argument_list|(
name|upa
argument_list|)
control|)
block|{
if|if
condition|(
literal|"role1"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR1
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role2"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR2
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundR1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR2
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addGroup
argument_list|(
literal|"a"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addGroupRole
argument_list|(
literal|"g"
argument_list|,
literal|"role2"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addGroupRole
argument_list|(
literal|"g"
argument_list|,
literal|"role3"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addGroup
argument_list|(
literal|"b"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addGroup
argument_list|(
literal|"b"
argument_list|,
literal|"g2"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|addGroupRole
argument_list|(
literal|"g2"
argument_list|,
literal|"role4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|engine
operator|.
name|listUsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UserPrincipal
name|upa_1
init|=
literal|null
decl_stmt|;
name|UserPrincipal
name|upb_1
init|=
literal|null
decl_stmt|;
for|for
control|(
name|UserPrincipal
name|u
range|:
name|engine
operator|.
name|listUsers
argument_list|()
control|)
block|{
if|if
condition|(
literal|"a"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|upa_1
operator|=
name|u
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"b"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|upb_1
operator|=
name|u
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|upa_1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|upb_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|engine
operator|.
name|listRoles
argument_list|(
name|upa
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundR1_2
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR2_2
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR3_2
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|engine
operator|.
name|listRoles
argument_list|(
name|upa
argument_list|)
control|)
block|{
if|if
condition|(
literal|"role1"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR1_2
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role2"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR2_2
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role3"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR3_2
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundR1_2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR2_2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR3_2
argument_list|)
expr_stmt|;
comment|// check that the loading works
name|PropertiesBackingEngine
name|engine2
init|=
operator|new
name|PropertiesBackingEngine
argument_list|(
operator|new
name|Properties
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|engine2
operator|.
name|listUsers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UserPrincipal
name|upa_2
init|=
literal|null
decl_stmt|;
name|UserPrincipal
name|upb_2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|UserPrincipal
name|u
range|:
name|engine2
operator|.
name|listUsers
argument_list|()
control|)
block|{
if|if
condition|(
literal|"a"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|upa_2
operator|=
name|u
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"b"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|upb_2
operator|=
name|u
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|upa_2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|upb_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|engine2
operator|.
name|listRoles
argument_list|(
name|upa_2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundR1_3
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR2_3
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR3_3
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|engine2
operator|.
name|listRoles
argument_list|(
name|upa_2
argument_list|)
control|)
block|{
if|if
condition|(
literal|"role1"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR1_3
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role2"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR2_3
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role3"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR3_3
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundR1_3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR2_3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR3_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|engine2
operator|.
name|listRoles
argument_list|(
name|upb_2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundR2_4
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR3_4
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR4_4
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|engine2
operator|.
name|listRoles
argument_list|(
name|upb_2
argument_list|)
control|)
block|{
if|if
condition|(
literal|"role2"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR2_4
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role3"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR3_4
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role4"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR4_4
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundR2_4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR3_4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR4_4
argument_list|)
expr_stmt|;
comment|// removing some stuff
name|UserPrincipal
name|upb
init|=
literal|null
decl_stmt|;
for|for
control|(
name|UserPrincipal
name|up
range|:
name|engine
operator|.
name|listUsers
argument_list|()
control|)
block|{
if|if
condition|(
literal|"b"
operator|.
name|equals
argument_list|(
name|up
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|upb
operator|=
name|up
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|listGroups
argument_list|(
name|upa
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|engine
operator|.
name|listGroups
argument_list|(
name|upb
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GroupPrincipal
name|gp
init|=
name|engine
operator|.
name|listGroups
argument_list|(
name|upa
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|engine
operator|.
name|deleteGroupRole
argument_list|(
literal|"g"
argument_list|,
literal|"role2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|engine
operator|.
name|listRoles
argument_list|(
name|gp
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"role3"
argument_list|,
name|engine
operator|.
name|listRoles
argument_list|(
name|gp
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the user roles are reported correctly
name|assertEquals
argument_list|(
literal|"role2 should still be there as it was added to the user directly too"
argument_list|,
literal|3
argument_list|,
name|engine
operator|.
name|listRoles
argument_list|(
name|upa
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundR1_5
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR2_5
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR3_5
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|engine
operator|.
name|listRoles
argument_list|(
name|upa
argument_list|)
control|)
block|{
if|if
condition|(
literal|"role1"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR1_5
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role2"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR2_5
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role3"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR3_5
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundR1_5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR2_5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR3_5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|engine
operator|.
name|listRoles
argument_list|(
name|upb
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundR3_6
init|=
literal|false
decl_stmt|;
name|boolean
name|foundR4_6
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|engine
operator|.
name|listRoles
argument_list|(
name|upb
argument_list|)
control|)
block|{
if|if
condition|(
literal|"role3"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR3_6
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"role4"
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|foundR4_6
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundR3_6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundR4_6
argument_list|)
expr_stmt|;
name|engine
operator|.
name|deleteGroup
argument_list|(
literal|"b"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|deleteGroup
argument_list|(
literal|"b"
argument_list|,
literal|"g2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|engine
operator|.
name|listRoles
argument_list|(
name|upb
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|engine
operator|.
name|deleteUser
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|engine
operator|.
name|deleteUser
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Properties should be empty now"
argument_list|,
literal|0
argument_list|,
name|p
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|delete
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Could not delete temporary file: "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

