begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|publickey
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|PrincipalHelper
operator|.
name|names
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|isIn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AlgorithmParameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|DSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECGenParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|KeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|FailedLoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|NamePubkeyCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PublicKeyLoginModuleTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|PK_PROPERTIES_FILE
init|=
literal|"org/apache/karaf/jaas/modules/publickey/pubkey.properties"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testRSALogin
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|getLoginModuleOptions
argument_list|()
decl_stmt|;
name|PublickeyLoginModule
name|module
init|=
operator|new
name|PublickeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|String
name|knownModulus
init|=
literal|"2504227846033126752625313329217708474924890377669312098933267135871562327792150810915433595733"
operator|+
literal|"979130785790337621243914845149325143098632580183245971502051291613503136182182218708721890923769091345704"
operator|+
literal|"119963221758691543226829294312457492456071842409242817598014777158790065648435489978774648853589909638928"
operator|+
literal|"448069481622573966178879417253888452317622624006445863588961367514293886664167742695648199055900918338245"
operator|+
literal|"701727653606086096756173044470526840851957391900922886984556493506186438991284463663361749451775578708454"
operator|+
literal|"0181594148839238901052763862484299588887844606103377160953183624788815045644521767391398467190125279747"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
name|knownModulus
argument_list|)
decl_stmt|;
name|BigInteger
name|exponent
init|=
operator|new
name|BigInteger
argument_list|(
literal|"65537"
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
name|modulus
argument_list|,
name|exponent
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"rsa"
argument_list|,
name|publicKey
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"rsa"
argument_list|,
name|isIn
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|UserPrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"ssh"
argument_list|,
name|isIn
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|RolePrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Principals should be gone as the user has logged out"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDSALogin
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|getLoginModuleOptions
argument_list|()
decl_stmt|;
name|PublickeyLoginModule
name|module
init|=
operator|new
name|PublickeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|String
name|p
init|=
literal|"1076175237625726563105954460741409330556298182412863930703571469202992312952487088821612089126846931217220"
operator|+
literal|"139938550642040962241586994856559462488140821681403960733982209827487135132210000913512532065787125116985685638"
operator|+
literal|"40437219296134522589816052156357553531846010339651017908589163855315552516201352809575855397"
decl_stmt|;
name|String
name|q
init|=
literal|"918380515194943729419256231914804453973955269349"
decl_stmt|;
name|String
name|g
init|=
literal|"5928865413019314795162062081939159959737363875586187627523617102819491716184351195073908492559564825805562"
operator|+
literal|"104476892066919492044841627907376461274343797017375757242038772707578284292374846844427026690399002493750530347"
operator|+
literal|"2378225083646830569532678306021077676137269211638266431262139218141967811197461432032698462"
decl_stmt|;
name|String
name|y
init|=
literal|"3780682190459260799543888842390974417268312111951424991203659597814001671832656608276823896973755971735795"
operator|+
literal|"130565245682634187551545737028902938478313465290457154458005480679650487421678748598551351730312164280338152996"
operator|+
literal|"0448119336850459047721615478019482431582683540283279032651976075781966545889409150149549269"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"DSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|DSAPublicKeySpec
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|p
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|q
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|g
argument_list|)
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"dsa"
argument_list|,
name|publicKey
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"dsa"
argument_list|,
name|isIn
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|UserPrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// We didn't configure any roles
name|assertTrue
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|RolePrincipal
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Principals should be gone as the user has logged out"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testECLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|getLoginModuleOptions
argument_list|()
decl_stmt|;
name|PublickeyLoginModule
name|module
init|=
operator|new
name|PublickeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|String
name|x
init|=
literal|"-29742501866672735446035294501787338870744851402037490785638836399245997090445"
decl_stmt|;
name|String
name|y
init|=
literal|"-47637824304079393691947094099226900728731860400898598466261954347951527449659"
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|AlgorithmParameters
name|parameters
init|=
name|AlgorithmParameters
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|init
argument_list|(
operator|new
name|ECGenParameterSpec
argument_list|(
literal|"secp256r1"
argument_list|)
argument_list|)
expr_stmt|;
name|ECParameterSpec
name|ecParameters
init|=
name|parameters
operator|.
name|getParameterSpec
argument_list|(
name|ECParameterSpec
operator|.
name|class
argument_list|)
decl_stmt|;
name|ECPoint
name|pubPoint
init|=
operator|new
name|ECPoint
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|x
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|KeySpec
name|keySpec
init|=
operator|new
name|ECPublicKeySpec
argument_list|(
name|pubPoint
argument_list|,
name|ecParameters
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"ec"
argument_list|,
name|publicKey
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"ec"
argument_list|,
name|isIn
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|UserPrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"ssh"
argument_list|,
name|isIn
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|RolePrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Principals should be gone as the user has logged out"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|getLoginModuleOptions
argument_list|()
decl_stmt|;
name|PublickeyLoginModule
name|module
init|=
operator|new
name|PublickeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|String
name|knownModulus
init|=
literal|"2504227846033126752625313329217708474924890377669312098933267135871562327792150810915433595733"
operator|+
literal|"979130785790337621243914845149325143098632580183245971502051291613503136182182218708721890923769091345704"
operator|+
literal|"119963221758691543226829294312457492456071842409242817598014777158790065648435489978774648853589909638928"
operator|+
literal|"448069481622573966178879417253888452317622624006445863588961367514293886664167742695648199055900918338245"
operator|+
literal|"701727653606086096756173044470526840851957391900922886984556493506186438991284463663361749451775578708454"
operator|+
literal|"0181594148839238901052763862484299588887844606103377160953183624788815045644521767391398467190125279747"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
name|knownModulus
argument_list|)
decl_stmt|;
name|BigInteger
name|exponent
init|=
operator|new
name|BigInteger
argument_list|(
literal|"65537"
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
name|modulus
argument_list|,
name|exponent
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"unknown"
argument_list|,
name|publicKey
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|module
operator|.
name|login
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unknown user"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedLoginException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownKeyRSA
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|getLoginModuleOptions
argument_list|()
decl_stmt|;
name|PublickeyLoginModule
name|module
init|=
operator|new
name|PublickeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|String
name|knownModulus
init|=
literal|"2504227846033126752625313329217708474924890377669312098933267135871562327792150810915433595733"
operator|+
literal|"979130785790337621243914845149325143098632580183245971502051291613503136182182218708721890923769091345704"
operator|+
literal|"119963221758691543226829294312457492456071842409242817598014777158790065648435489978774648853589909638928"
operator|+
literal|"448069481622573966178879417253888452317622624006445863588961367514293886664167742695648199055900918338245"
operator|+
literal|"701727653606086096756173044470526840851957391900922886984556493506186438991284463663361749451775578708454"
operator|+
literal|"0181594148839238901052763862484299588887844606103377160953183624788815045644521767391398467190125279745"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
name|knownModulus
argument_list|)
decl_stmt|;
name|BigInteger
name|exponent
init|=
operator|new
name|BigInteger
argument_list|(
literal|"65537"
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
name|modulus
argument_list|,
name|exponent
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"rsa"
argument_list|,
name|publicKey
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|module
operator|.
name|login
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unknown user"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedLoginException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownKeyDSA
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|getLoginModuleOptions
argument_list|()
decl_stmt|;
name|PublickeyLoginModule
name|module
init|=
operator|new
name|PublickeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|String
name|p
init|=
literal|"1076175237625726563105954460741409330556298182412863930703571469202992312952487088821612089126846931217220"
operator|+
literal|"139938550642040962241586994856559462488140821681403960733982209827487135132210000913512532065787125116985685638"
operator|+
literal|"40437219296134522589816052156357553531846010339651017908589163855315552516201352809575855397"
decl_stmt|;
name|String
name|q
init|=
literal|"918380515194943729419256231914804453973955269349"
decl_stmt|;
name|String
name|g
init|=
literal|"5928865413019314795162062081939159959737363875586187627523617102819491716184351195073908492559564825805562"
operator|+
literal|"104476892066919492044841627907376461274343797017375757242038772707578284292374846844427026690399002493750530347"
operator|+
literal|"2378225083646830569532678306021077676137269211638266431262139218141967811197461432032698462"
decl_stmt|;
name|String
name|y
init|=
literal|"3780682190459260799543888842390974417268312111951424991203659597814001671832656608276823896973755971735795"
operator|+
literal|"130565245682634187551545737028902938478313465290457154458005480679650487421678748598551351730312164280338152996"
operator|+
literal|"0448119336850459047721615478019482431582683540283279032651976075781966545889409150149549267"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"DSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|DSAPublicKeySpec
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|p
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|q
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|g
argument_list|)
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"dsa"
argument_list|,
name|publicKey
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|module
operator|.
name|login
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unknown user"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedLoginException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownKeyEC
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|getLoginModuleOptions
argument_list|()
decl_stmt|;
name|PublickeyLoginModule
name|module
init|=
operator|new
name|PublickeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|String
name|x
init|=
literal|"2145382594999641569030545431803328907795332312211583318014254232969998637145"
decl_stmt|;
name|String
name|y
init|=
literal|"52282205184471090919696434245736603165041352971927370430120381994413951213993"
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|AlgorithmParameters
name|parameters
init|=
name|AlgorithmParameters
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|init
argument_list|(
operator|new
name|ECGenParameterSpec
argument_list|(
literal|"secp256r1"
argument_list|)
argument_list|)
expr_stmt|;
name|ECParameterSpec
name|ecParameters
init|=
name|parameters
operator|.
name|getParameterSpec
argument_list|(
name|ECParameterSpec
operator|.
name|class
argument_list|)
decl_stmt|;
name|ECPoint
name|pubPoint
init|=
operator|new
name|ECPoint
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|x
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|KeySpec
name|keySpec
init|=
operator|new
name|ECPublicKeySpec
argument_list|(
name|pubPoint
argument_list|,
name|ecParameters
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"ec"
argument_list|,
name|publicKey
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|module
operator|.
name|login
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failure expected on an unknown user"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedLoginException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|protected
name|Properties
name|getLoginModuleOptions
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|+
literal|"/target/test-classes/"
operator|+
name|PK_PROPERTIES_FILE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Properties
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
end_class

end_unit

