begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_class
specifier|public
class|class
name|LdapPropsUpdater
block|{
specifier|private
name|LdapPropsUpdater
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|updatePort
parameter_list|(
name|String
name|propsPath
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
comment|// Read in ldap.properties and substitute in the correct port
name|String
name|content
init|=
name|readProperties
argument_list|(
name|basedir
operator|+
literal|"/src/test/resources/"
operator|+
name|propsPath
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replaceAll
argument_list|(
literal|"portno"
argument_list|,
literal|""
operator|+
name|port
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|basedir
operator|+
literal|"/target/test-classes/"
operator|+
name|propsPath
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|readProperties
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
name|FileInputStream
name|inputStream
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
init|)
block|{
empty_stmt|;
return|return
name|IOUtils
operator|.
name|toString
argument_list|(
name|inputStream
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeProperties
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
try|try
init|(
name|FileOutputStream
name|outputStream
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|content
argument_list|,
name|outputStream
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

