begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * To change this license header, choose License Headers in Project Properties.  * To change this template file, choose Tools | Templates  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|annotations
operator|.
name|CreateTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|ApplyLdifFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreateDS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|annotations
operator|.
name|CreatePartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|AbstractLdapTestUnit
operator|.
name|getLdapServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|directory
operator|.
name|server
operator|.
name|core
operator|.
name|integ
operator|.
name|FrameworkRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|NamePubkeyCallbackHandler
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|PrincipalHelper
operator|.
name|names
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
operator|.
name|LdapPropsUpdater
operator|.
name|ldapProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|FrameworkRunner
operator|.
name|class
argument_list|)
annotation|@
name|CreateLdapServer
argument_list|(
name|transports
operator|=
block|{
annotation|@
name|CreateTransport
argument_list|(
name|protocol
operator|=
literal|"LDAP"
argument_list|)
block|}
argument_list|)
annotation|@
name|CreateDS
argument_list|(
name|name
operator|=
literal|"LdapPubkeyLoginModuleTest-class"
argument_list|,
name|partitions
operator|=
block|{
annotation|@
name|CreatePartition
argument_list|(
name|name
operator|=
literal|"example"
argument_list|,
name|suffix
operator|=
literal|"dc=example,dc=com"
argument_list|)
block|}
argument_list|)
annotation|@
name|ApplyLdifFiles
argument_list|(
literal|"org/apache/karaf/jaas/modules/ldap/example.com_pubkey.ldif"
argument_list|)
specifier|public
class|class
name|LDAPPubkeyLoginModuleTest
extends|extends
name|AbstractLdapTestUnit
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LDAP_PROPERTIES_FILE
init|=
literal|"org/apache/karaf/jaas/modules/ldap/ldap_pubkey.properties"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|updatePort
parameter_list|()
throws|throws
name|Exception
block|{
name|ldapProps
argument_list|(
name|LDAP_PROPERTIES_FILE
argument_list|,
name|LdapLoginModuleTest
operator|::
name|replacePort
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|replacePort
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|line
operator|.
name|replaceAll
argument_list|(
literal|"portno"
argument_list|,
literal|""
operator|+
name|getLdapServer
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|LDAPCache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAdminLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|ldapLoginModuleOptions
argument_list|()
decl_stmt|;
name|LDAPPubkeyLoginModule
name|module
init|=
operator|new
name|LDAPPubkeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|Path
name|pubkeyFile
init|=
name|srcTestResourcePath
argument_list|(
literal|"org/apache/karaf/jaas/modules/ldap/ldaptest.admin.id_rsa"
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"admin"
argument_list|,
name|pubkeyFile
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|UserPrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|RolePrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Principals should be gone as the user has logged out"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonAdminLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|ldapLoginModuleOptions
argument_list|()
decl_stmt|;
name|LDAPPubkeyLoginModule
name|module
init|=
operator|new
name|LDAPPubkeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|Path
name|pubkeyFile
init|=
name|srcTestResourcePath
argument_list|(
literal|"org/apache/karaf/jaas/modules/ldap/ldaptest.cheese.id_rsa"
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"cheese"
argument_list|,
name|pubkeyFile
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|UserPrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"cheese"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|RolePrincipal
operator|.
name|class
argument_list|)
argument_list|)
argument_list|,
name|Matchers
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|module
operator|.
name|logout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Principals should be gone as the user has logged out"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadPrivateKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|ldapLoginModuleOptions
argument_list|()
decl_stmt|;
name|LDAPPubkeyLoginModule
name|module
init|=
operator|new
name|LDAPPubkeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|Path
name|pubkeyFile
init|=
name|srcTestResourcePath
argument_list|(
literal|"org/apache/karaf/jaas/modules/ldap/ldaptest.cheese.id_rsa"
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"admin"
argument_list|,
name|pubkeyFile
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|logger
init|=
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|LDAPLoginModule
operator|.
name|class
argument_list|)
decl_stmt|;
name|Level
name|oldLevel
init|=
name|logger
operator|.
name|getLevel
argument_list|()
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
try|try
block|{
name|module
operator|.
name|login
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown LoginException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Authentication failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logger
operator|.
name|setLevel
argument_list|(
name|oldLevel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserNotFound
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|options
init|=
name|ldapLoginModuleOptions
argument_list|()
decl_stmt|;
name|LDAPPubkeyLoginModule
name|module
init|=
operator|new
name|LDAPPubkeyLoginModule
argument_list|()
decl_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|Path
name|pubkeyFile
init|=
name|srcTestResourcePath
argument_list|(
literal|"org/apache/karaf/jaas/modules/ldap/ldaptest.admin.id_rsa"
argument_list|)
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
operator|new
name|NamePubkeyCallbackHandler
argument_list|(
literal|"imnothere"
argument_list|,
name|pubkeyFile
argument_list|)
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|module
operator|.
name|login
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|srcTestResourcePath
parameter_list|(
name|String
name|relativePath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
name|Path
name|pubkeyFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|basedir
argument_list|,
literal|"/src/test/resources/"
argument_list|,
name|relativePath
argument_list|)
decl_stmt|;
return|return
name|pubkeyFile
return|;
block|}
specifier|protected
name|Properties
name|ldapLoginModuleOptions
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|basedir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|basedir
operator|==
literal|null
condition|)
block|{
name|basedir
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|basedir
operator|+
literal|"/target/test-classes/"
operator|+
name|LDAP_PROPERTIES_FILE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Properties
argument_list|(
name|file
argument_list|)
return|;
block|}
block|}
end_class

end_unit

