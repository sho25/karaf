begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|publickey
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AlgorithmParameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|DSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECGenParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECParameterSpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|ECPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidParameterSpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|KeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|FailedLoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PublicKeyEncodingTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testRSAKeys
parameter_list|()
throws|throws
name|FailedLoginException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
comment|// Generated using: ssh-keygen -t rsa
name|String
name|storedKey
init|=
literal|"AAAAB3NzaC1yc2EAAAADAQABAAABAQDGX4CpCL49sWHaIuDE4VbGkdTMhsDLV3b8MDZ37Llsx3kRBs/x7G3OhSvQPhI"
operator|+
literal|"jMNcbnUnCr+6O6poKjRcFI1Aj76TiSSYlvz9QbsWqc50ZwCuR39h6F9u8f9k62AV7IVA4aNVSJBFn2nOA00HOWvDDrU3ykG0cPeJcmP1l"
operator|+
literal|"PeOO9WJVG7dc37v3soZZniIH+uop/UFQ4Ga0zWy4xjggAy2rE2p0BYHchrJb43ovInh5cGgXx2vNVwURsAf0TAPJwn7GLNpMYr3IFbRC3"
operator|+
literal|"Tbe1wPdy9YM4rFlKL78o/dFbvUOH+Vd1BlYDofoxT4kHxod7W5wPALBr/Bm8CD2tR6OLLoD"
decl_stmt|;
name|String
name|knownModulus
init|=
literal|"2504227846033126752625313329217708474924890377669312098933267135871562327792150810915433595733"
operator|+
literal|"979130785790337621243914845149325143098632580183245971502051291613503136182182218708721890923769091345704"
operator|+
literal|"119963221758691543226829294312457492456071842409242817598014777158790065648435489978774648853589909638928"
operator|+
literal|"448069481622573966178879417253888452317622624006445863588961367514293886664167742695648199055900918338245"
operator|+
literal|"701727653606086096756173044470526840851957391900922886984556493506186438991284463663361749451775578708454"
operator|+
literal|"0181594148839238901052763862484299588887844606103377160953183624788815045644521767391398467190125279747"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
name|knownModulus
argument_list|)
decl_stmt|;
name|BigInteger
name|exponent
init|=
operator|new
name|BigInteger
argument_list|(
literal|"65537"
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
name|modulus
argument_list|,
name|exponent
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|storedKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure a different stored key does not work
name|String
name|differentKey
init|=
literal|"AAAAB3NzaC1yc2EAAAADAQABAAABAQC9nIk6uBMouH2KhMZnnVhkEGC7ZdSOHZbCcmQSsvK3bl/Ly2yzvXNdqqRhlyv"
operator|+
literal|"Lv/Qjq0i4HnZsOUFAsfarYh8A0IP238AhTCoAeZf+ga+Mpm2uc+AOgDzwupfMYs6Zz81HWr1UsDr+LCOJkCC1/zzh5lub/Obif49j+nC1XX"
operator|+
literal|"0fT0AJ9BeGnR9HWg3m72SCUmWYMSYGwgfjNqTtqA9IHxCfEr29J8YO7HiJME3zwj0ok133RuZASEclTYXtJkKYvAzE6obhBPw7J6kqETJIH"
operator|+
literal|"0G0SkNjIm7cWThBalzyqcfydZ+0O+f/3LuSSp7EawaKu3g8mHkjt8b8ZxtjhgY0BZNV"
decl_stmt|;
name|assertFalse
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|differentKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRSA1024
parameter_list|()
throws|throws
name|FailedLoginException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
comment|// Generated using: ssh-keygen -t rsa -b 1024
name|String
name|storedKey
init|=
literal|"AAAAB3NzaC1yc2EAAAADAQABAAAAgQCpvuUWHwGUbRtunzgNaiKo9varvw3rZ6xRwV37/tNsMcdE98T07zF3UiUzfm79vv"
operator|+
literal|"u6LrsMX6yzR3j1hSKxGtHoCuLO+wdx20Cxn+aqDsQsjTEgOE3SnqUhqX0aFRWs9GUo2sXRZooR7+5EKhSzFTmkgmx0b/FhlJQ2/Bdc9woZAw=="
decl_stmt|;
name|String
name|knownModulus
init|=
literal|"1191994723232881252194746074531692276628392720352218105656446277364105948933208899459090143"
operator|+
literal|"34485583082055798404847857986526198262831735131892900109314572095535330090724020090628526184947685186417937"
operator|+
literal|"713630451839747221181072495928766941603698696083904958230358940260930311021743608730447712164571127205526640899"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
name|knownModulus
argument_list|)
decl_stmt|;
name|BigInteger
name|exponent
init|=
operator|new
name|BigInteger
argument_list|(
literal|"65537"
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
name|modulus
argument_list|,
name|exponent
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|storedKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure a different stored key does not work
name|String
name|differentKey
init|=
literal|"AAAAB3NzaC1yc2EAAAADAQABAAABAQC9nIk6uBMouH2KhMZnnVhkEGC7ZdSOHZbCcmQSsvK3bl/Ly2yzvXNdqqRhlyv"
operator|+
literal|"Lv/Qjq0i4HnZsOUFAsfarYh8A0IP238AhTCoAeZf+ga+Mpm2uc+AOgDzwupfMYs6Zz81HWr1UsDr+LCOJkCC1/zzh5lub/Obif49j+nC1XX"
operator|+
literal|"0fT0AJ9BeGnR9HWg3m72SCUmWYMSYGwgfjNqTtqA9IHxCfEr29J8YO7HiJME3zwj0ok133RuZASEclTYXtJkKYvAzE6obhBPw7J6kqETJIH"
operator|+
literal|"0G0SkNjIm7cWThBalzyqcfydZ+0O+f/3LuSSp7EawaKu3g8mHkjt8b8ZxtjhgY0BZNV"
decl_stmt|;
name|assertFalse
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|differentKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDSA
parameter_list|()
throws|throws
name|FailedLoginException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
comment|// Generated using: ssh-keygen -t dsa
name|String
name|storedKey
init|=
literal|"AAAAB3NzaC1kc3MAAACBAJlAn/bPWpugKCLyoQpe8AbSZiIxdEJhl+VV8YEH6jfb9lLPA9JkQAf/lnG1Jx01UM65RRyKtnMAiB"
operator|+
literal|"pkhrPy3DbqJ4FgYBmc1Sdiufomilq6zSbE0esJEMyxEvSNDQLqIiUcSwVyJJj1vpV6ZPA6ihipTIaiSV+rmfKcS05i27UlAAAAFQCg3ZtIytPmG"
operator|+
literal|"ILQ7OEifIJvCSlS5QAAAIBUbgpjk7vSWVNICgKG6OrXeK0kJYRG6AaUZSiB2neoABMyGIHQ8dBCk+jtYqRMYyoc+OPi5q43VcDMxgzR/cHGjZi6"
operator|+
literal|"0w/I3M83072dAdaoi0cleL/V8NaH+SOvkkYkAG57OIa3ly9PVpPfeXRnbbjkz1EsrvXIelqb5enLhlIgXgAAAIA11rUkN/J3K7nw/BiolhpZR3M"
operator|+
literal|"VhWWIJFjJyU7ZC0yO8a+3AExuhTI6YQvsyvlY69KCwAwZsZvx9DryDE5xTfhzYa5kV4mM4AJSrE8/GtxLUVPZLwV6eoZLv1RIqP543ihZtoFyVm"
operator|+
literal|"MaTQFj45Qo8uAuVDjx5mpk/Rk1pYPUd0lc1Q=="
decl_stmt|;
name|String
name|p
init|=
literal|"1076175237625726563105954460741409330556298182412863930703571469202992312952487088821612089126846931217220"
operator|+
literal|"139938550642040962241586994856559462488140821681403960733982209827487135132210000913512532065787125116985685638"
operator|+
literal|"40437219296134522589816052156357553531846010339651017908589163855315552516201352809575855397"
decl_stmt|;
name|String
name|q
init|=
literal|"918380515194943729419256231914804453973955269349"
decl_stmt|;
name|String
name|g
init|=
literal|"5928865413019314795162062081939159959737363875586187627523617102819491716184351195073908492559564825805562"
operator|+
literal|"104476892066919492044841627907376461274343797017375757242038772707578284292374846844427026690399002493750530347"
operator|+
literal|"2378225083646830569532678306021077676137269211638266431262139218141967811197461432032698462"
decl_stmt|;
name|String
name|y
init|=
literal|"3780682190459260799543888842390974417268312111951424991203659597814001671832656608276823896973755971735795"
operator|+
literal|"130565245682634187551545737028902938478313465290457154458005480679650487421678748598551351730312164280338152996"
operator|+
literal|"0448119336850459047721615478019482431582683540283279032651976075781966545889409150149549269"
decl_stmt|;
comment|// Generate a PublicKey using the known values
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"DSA"
argument_list|)
decl_stmt|;
name|KeySpec
name|publicKeySpec
init|=
operator|new
name|DSAPublicKeySpec
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|p
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|q
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|g
argument_list|)
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|publicKeySpec
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|storedKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure a different stored key does not work
name|String
name|differentKey
init|=
literal|"AAAAB3NzaC1kc3MAAACBALE+qmsDN5lJYqQUmtrM7RI4vFcAQnla7Jp8Qy5ZUf63IFEA+tDzareKZOadwYbHOrIq3bDFCMH"
operator|+
literal|"HIVvFWJNhcJUBH8ZZnk7942Sxg6P5B3OQlCC6O4ADpe6NmwsxCpjpkyJizWTwvTspE6vV32VMa70UJlL1OtymgsWDef8ZQKqBAAAAFQCwiMFuOv"
operator|+
literal|"t6AZ1PgOwytbS1ra/FswAAAIAvf9b+K6eF6Mx3CnUVMHVldK4VybXjn/GwARH7BG8HJ8aGmMLvhk2qKGN5NatxgAc6IzRcwFbKvtniTTh06seuY"
operator|+
literal|"CwIvHs+7nldZ255D23as90jAqstkBGt5NmX5R/TgHQPwQILJpydaYUEf6f/KU6MZPANo8cbEi2hxgljWCQcwAAAAIEAh2S+0V+64AZy8+T03eMX"
operator|+
literal|"yBmt4xn8JPJzIHizF4VeUpTVwyA2EsiG9/YEWEGATj7mAcfAmLKl5rV1tQdXgUl2uxCDXw91c9PrYbfrHJjD1Oj6xHOjExDZI31Z8S6OKwo7df7"
operator|+
literal|"0GumGSDsg0nibs5rEwkkcT64AOMn1o4JvabsP200="
decl_stmt|;
name|assertFalse
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|differentKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEC521
parameter_list|()
throws|throws
name|FailedLoginException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
throws|,
name|InvalidParameterSpecException
block|{
comment|// ecdsa-sha2-nistp521 - generated using: ssh-keygen -t ecdsa -b 521
name|String
name|storedKey
init|=
literal|"AAAAE2VjZHNhLXNoYTItbmlzdHA1MjEAAAAIbmlzdHA1MjEAAACFBADLxNQ1lf99/8WlEg1nYbDL+qcWY4KSFZG+"
operator|+
literal|"2euZ1hAO9m1ly4ByuqLhuf1M3JPhhOCMIn9ihrPcxplG2zjpOnhaugDdwGJn+qcwkZSXVWoZOxpYUaQRdfnSd5wAKo9XOPqvc/L3BeHK"
operator|+
literal|"mPPygLH7eW2MEz2qOWe7Bby9duELK+9Zn3ebOQ=="
decl_stmt|;
name|String
name|x
init|=
literal|"273209377797440455675669012133614826094878213786507845287169633163915658072657502796285437529808606"
operator|+
literal|"0585712688028315849324172582722748448938768134500098005690"
decl_stmt|;
name|String
name|y
init|=
literal|"297320154107898594969162703371411878757449109919929193169657424280609259087338914952452468191452153"
operator|+
literal|"1633519626430088785609447337443826933969196755052278553401"
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|AlgorithmParameters
name|parameters
init|=
name|AlgorithmParameters
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|init
argument_list|(
operator|new
name|ECGenParameterSpec
argument_list|(
literal|"secp521r1"
argument_list|)
argument_list|)
expr_stmt|;
name|ECParameterSpec
name|ecParameters
init|=
name|parameters
operator|.
name|getParameterSpec
argument_list|(
name|ECParameterSpec
operator|.
name|class
argument_list|)
decl_stmt|;
name|ECPoint
name|pubPoint
init|=
operator|new
name|ECPoint
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|x
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|KeySpec
name|keySpec
init|=
operator|new
name|ECPublicKeySpec
argument_list|(
name|pubPoint
argument_list|,
name|ecParameters
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|storedKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure a different stored key does not work
name|String
name|differentKey
init|=
literal|"AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL4+Vytknywh/XuOluxIqcHRoBsZHa12z+jpK"
operator|+
literal|"pwuGFlzlq3yatwC8DqUaywJjzSnoGKSge9GBjuFYwvHN17hq8U="
decl_stmt|;
name|assertFalse
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|differentKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEC256
parameter_list|()
throws|throws
name|FailedLoginException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
throws|,
name|InvalidParameterSpecException
block|{
comment|// ecdsa-sha2-nistp256 - generated using: ssh-keygen -t ecdsa
name|String
name|storedKey
init|=
literal|"AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL4+Vytknywh/XuOluxIqcHRoBsZHa12z+jpK"
operator|+
literal|"pwuGFlzlq3yatwC8DqUaywJjzSnoGKSge9GBjuFYwvHN17hq8U="
decl_stmt|;
name|String
name|x
init|=
literal|"-29742501866672735446035294501787338870744851402037490785638836399245997090445"
decl_stmt|;
name|String
name|y
init|=
literal|"-47637824304079393691947094099226900728731860400898598466261954347951527449659"
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|AlgorithmParameters
name|parameters
init|=
name|AlgorithmParameters
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|init
argument_list|(
operator|new
name|ECGenParameterSpec
argument_list|(
literal|"secp256r1"
argument_list|)
argument_list|)
expr_stmt|;
name|ECParameterSpec
name|ecParameters
init|=
name|parameters
operator|.
name|getParameterSpec
argument_list|(
name|ECParameterSpec
operator|.
name|class
argument_list|)
decl_stmt|;
name|ECPoint
name|pubPoint
init|=
operator|new
name|ECPoint
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|x
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|KeySpec
name|keySpec
init|=
operator|new
name|ECPublicKeySpec
argument_list|(
name|pubPoint
argument_list|,
name|ecParameters
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|storedKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure a different stored key does not work
name|String
name|differentKey
init|=
literal|"AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDWwVudH/QYr/Nlkf/lZ0yMXVL+PvXBsGat8"
operator|+
literal|"+n07/Bw0xZGP5E8+x1wbkZVS6qx8XyPMI61NnCRLawB+UX3ZE/A="
decl_stmt|;
name|assertFalse
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|differentKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEC256_2
parameter_list|()
throws|throws
name|FailedLoginException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
throws|,
name|InvalidParameterSpecException
block|{
comment|// ecdsa-sha2-nistp256 - generated using: ssh-keygen -t ecdsa
name|String
name|storedKey
init|=
literal|"AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDWwVudH/QYr/Nlkf/lZ0yMXVL+PvXBsGat8"
operator|+
literal|"+n07/Bw0xZGP5E8+x1wbkZVS6qx8XyPMI61NnCRLawB+UX3ZE/A="
decl_stmt|;
name|String
name|x
init|=
literal|"24284145843828879115537963613603143837878136357229118319568173718380870376500"
decl_stmt|;
name|String
name|y
init|=
literal|"-26429272137078923303974425138822683171929812869671300956629169158527526562832"
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|AlgorithmParameters
name|parameters
init|=
name|AlgorithmParameters
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
name|parameters
operator|.
name|init
argument_list|(
operator|new
name|ECGenParameterSpec
argument_list|(
literal|"secp256r1"
argument_list|)
argument_list|)
expr_stmt|;
name|ECParameterSpec
name|ecParameters
init|=
name|parameters
operator|.
name|getParameterSpec
argument_list|(
name|ECParameterSpec
operator|.
name|class
argument_list|)
decl_stmt|;
name|ECPoint
name|pubPoint
init|=
operator|new
name|ECPoint
argument_list|(
operator|new
name|BigInteger
argument_list|(
name|x
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
name|KeySpec
name|keySpec
init|=
operator|new
name|ECPublicKeySpec
argument_list|(
name|pubPoint
argument_list|,
name|ecParameters
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|storedKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure a different stored key does not work
name|String
name|differentKey
init|=
literal|"AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL4+Vytknywh/XuOluxIqcHRoBsZHa12z+jpK"
operator|+
literal|"pwuGFlzlq3yatwC8DqUaywJjzSnoGKSge9GBjuFYwvHN17hq8U="
decl_stmt|;
name|assertFalse
argument_list|(
name|PublickeyLoginModule
operator|.
name|equals
argument_list|(
name|publicKey
argument_list|,
name|differentKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

