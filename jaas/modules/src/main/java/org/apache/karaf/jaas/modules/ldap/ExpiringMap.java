begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing,  *  software distributed under the License is distributed on an  *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *  KIND, either express or implied.  See the License for the  *  specific language governing permissions and limitations  *  under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_comment
comment|/**  * This map comes from the org.apache.mina.util package with a small  * modification to remove the listeners to avoid an additional class.  */
end_comment

begin_comment
comment|/**  * A map with expiration.  This class contains a worker thread that will   * periodically check this class in order to determine if any objects   * should be removed based on the provided time-to-live value.  *  * @author<a href="http://mina.apache.org">Apache MINA Project</a>  */
end_comment

begin_class
specifier|public
class|class
name|ExpiringMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
comment|/**      * The default value, 60      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIME_TO_LIVE
init|=
literal|60
decl_stmt|;
comment|/**      * The default value, 1      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_EXPIRATION_INTERVAL
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|int
name|expirerCount
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|ExpiringObject
argument_list|>
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|Expirer
name|expirer
decl_stmt|;
comment|/**      * Creates a new instance of ExpiringMap using the default values       * DEFAULT_TIME_TO_LIVE and DEFAULT_EXPIRATION_INTERVAL      *      */
specifier|public
name|ExpiringMap
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_TIME_TO_LIVE
argument_list|,
name|DEFAULT_EXPIRATION_INTERVAL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of ExpiringMap using the supplied       * time-to-live value and the default value for DEFAULT_EXPIRATION_INTERVAL      *      * @param timeToLive      *  The time-to-live value (seconds)      */
specifier|public
name|ExpiringMap
parameter_list|(
name|int
name|timeToLive
parameter_list|)
block|{
name|this
argument_list|(
name|timeToLive
argument_list|,
name|DEFAULT_EXPIRATION_INTERVAL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of ExpiringMap using the supplied values and       * a {@link ConcurrentHashMap} for the internal data structure.      *      * @param timeToLive      *  The time-to-live value (seconds)      * @param expirationInterval      *  The time between checks to see if a value should be removed (seconds)      */
specifier|public
name|ExpiringMap
parameter_list|(
name|int
name|timeToLive
parameter_list|,
name|int
name|expirationInterval
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|ExpiringObject
argument_list|>
argument_list|()
argument_list|,
name|timeToLive
argument_list|,
name|expirationInterval
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ExpiringMap
parameter_list|(
name|ConcurrentHashMap
argument_list|<
name|K
argument_list|,
name|ExpiringObject
argument_list|>
name|delegate
parameter_list|,
name|int
name|timeToLive
parameter_list|,
name|int
name|expirationInterval
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|expirer
operator|=
operator|new
name|Expirer
argument_list|()
expr_stmt|;
name|expirer
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
name|expirer
operator|.
name|setExpirationInterval
argument_list|(
name|expirationInterval
argument_list|)
expr_stmt|;
block|}
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|ExpiringObject
name|answer
init|=
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|ExpiringObject
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|answer
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ExpiringObject
name|object
init|=
name|delegate
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|object
operator|.
name|setLastAccessTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|object
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|ExpiringObject
name|answer
init|=
name|delegate
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|answer
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|inMap
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|e
range|:
name|inMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|this
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Expirer
name|getExpirer
parameter_list|()
block|{
return|return
name|expirer
return|;
block|}
specifier|public
name|int
name|getExpirationInterval
parameter_list|()
block|{
return|return
name|expirer
operator|.
name|getExpirationInterval
argument_list|()
return|;
block|}
specifier|public
name|int
name|getTimeToLive
parameter_list|()
block|{
return|return
name|expirer
operator|.
name|getTimeToLive
argument_list|()
return|;
block|}
specifier|public
name|void
name|setExpirationInterval
parameter_list|(
name|int
name|expirationInterval
parameter_list|)
block|{
name|expirer
operator|.
name|setExpirationInterval
argument_list|(
name|expirationInterval
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|int
name|timeToLive
parameter_list|)
block|{
name|expirer
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|ExpiringObject
block|{
specifier|private
name|K
name|key
decl_stmt|;
specifier|private
name|V
name|value
decl_stmt|;
specifier|private
name|long
name|lastAccessTime
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|lastAccessTimeLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|ExpiringObject
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|long
name|lastAccessTime
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"An expiring object cannot be null."
argument_list|)
throw|;
block|}
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|lastAccessTime
operator|=
name|lastAccessTime
expr_stmt|;
block|}
specifier|public
name|long
name|getLastAccessTime
parameter_list|()
block|{
name|lastAccessTimeLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|lastAccessTime
return|;
block|}
finally|finally
block|{
name|lastAccessTimeLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setLastAccessTime
parameter_list|(
name|long
name|lastAccessTime
parameter_list|)
block|{
name|lastAccessTimeLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|lastAccessTime
operator|=
name|lastAccessTime
expr_stmt|;
block|}
finally|finally
block|{
name|lastAccessTimeLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|value
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
comment|/**      * A Thread that monitors an {@link ExpiringMap} and will remove      * elements that have passed the threshold.      *      */
specifier|public
class|class
name|Expirer
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|ReadWriteLock
name|stateLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|long
name|timeToLiveMillis
decl_stmt|;
specifier|private
name|long
name|expirationIntervalMillis
decl_stmt|;
specifier|private
name|boolean
name|running
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|expirerThread
decl_stmt|;
comment|/**          * Creates a new instance of Expirer.            *          */
specifier|public
name|Expirer
parameter_list|()
block|{
name|expirerThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
literal|"ExpiringMapExpirer-"
operator|+
name|expirerCount
operator|++
argument_list|)
expr_stmt|;
name|expirerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
condition|)
block|{
name|processExpires
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|expirationIntervalMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Do nothing
block|}
block|}
block|}
specifier|private
name|void
name|processExpires
parameter_list|()
block|{
name|long
name|timeNow
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|ExpiringObject
name|o
range|:
name|delegate
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|timeToLiveMillis
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
name|long
name|timeIdle
init|=
name|timeNow
operator|-
name|o
operator|.
name|getLastAccessTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeIdle
operator|>=
name|timeToLiveMillis
condition|)
block|{
name|delegate
operator|.
name|remove
argument_list|(
name|o
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Kick off this thread which will look for old objects and remove them.          *          */
specifier|public
name|void
name|startExpiring
parameter_list|()
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|expirerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * If this thread has not started, then start it.            * Otherwise just return;          */
specifier|public
name|void
name|startExpiringIfNotStarted
parameter_list|()
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|running
condition|)
block|{
return|return;
block|}
block|}
finally|finally
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|running
operator|=
literal|true
expr_stmt|;
name|expirerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Stop the thread from monitoring the map.          */
specifier|public
name|void
name|stopExpiring
parameter_list|()
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|running
condition|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|expirerThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Checks to see if the thread is running          *          * @return          *  If the thread is running, true.  Otherwise false.          */
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|running
return|;
block|}
finally|finally
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Returns the Time-to-live value.          *          * @return          *  The time-to-live (seconds)          */
specifier|public
name|int
name|getTimeToLive
parameter_list|()
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|(
name|int
operator|)
name|timeToLiveMillis
operator|/
literal|1000
return|;
block|}
finally|finally
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Update the value for the time-to-live          *          * @param timeToLive          *  The time-to-live (seconds)          */
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|long
name|timeToLive
parameter_list|)
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|timeToLiveMillis
operator|=
name|timeToLive
operator|*
literal|1000
expr_stmt|;
block|}
finally|finally
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Get the interval in which an object will live in the map before          * it is removed.          *          * @return          *  The time in seconds.          */
specifier|public
name|int
name|getExpirationInterval
parameter_list|()
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|(
name|int
operator|)
name|expirationIntervalMillis
operator|/
literal|1000
return|;
block|}
finally|finally
block|{
name|stateLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Set the interval in which an object will live in the map before          * it is removed.          *          * @param expirationInterval          *  The time in seconds          */
specifier|public
name|void
name|setExpirationInterval
parameter_list|(
name|long
name|expirationInterval
parameter_list|)
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|expirationIntervalMillis
operator|=
name|expirationInterval
operator|*
literal|1000
expr_stmt|;
block|}
finally|finally
block|{
name|stateLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

