begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_class
specifier|public
class|class
name|LDAPCache
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_TIME_TO_LIVE
init|=
literal|"cache.timeToLive"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIME_TO_LIVE
init|=
literal|60
operator|*
literal|60
decl_stmt|;
comment|// One hour
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
argument_list|,
name|LDAPCache
argument_list|>
name|CACHES
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|CACHES
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|LDAPCache
name|getCache
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|LDAPCache
name|cache
init|=
name|CACHES
operator|.
name|get
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|CACHES
operator|.
name|putIfAbsent
argument_list|(
name|options
argument_list|,
operator|new
name|LDAPCache
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|=
name|CACHES
operator|.
name|get
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
return|return
name|cache
return|;
block|}
specifier|private
specifier|final
name|int
name|timeToLive
decl_stmt|;
specifier|private
specifier|final
name|ExpiringMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|userDnAndNamespace
decl_stmt|;
specifier|private
specifier|final
name|ExpiringMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|userRoles
decl_stmt|;
specifier|public
name|LDAPCache
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|CACHE_TIME_TO_LIVE
argument_list|)
condition|)
block|{
name|timeToLive
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|options
operator|.
name|get
argument_list|(
name|CACHE_TIME_TO_LIVE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timeToLive
operator|=
name|DEFAULT_TIME_TO_LIVE
expr_stmt|;
block|}
name|userDnAndNamespace
operator|=
operator|new
name|ExpiringMap
argument_list|<>
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
name|userRoles
operator|=
operator|new
name|ExpiringMap
argument_list|<>
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getUserDnAndNamespace
parameter_list|(
name|String
name|user
parameter_list|,
name|Callable
argument_list|<
name|String
index|[]
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|result
init|=
name|userDnAndNamespace
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|callable
operator|.
name|call
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|userDnAndNamespace
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|String
index|[]
name|getUserRoles
parameter_list|(
name|String
name|userDN
parameter_list|,
name|Callable
argument_list|<
name|String
index|[]
argument_list|>
name|callable
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|result
init|=
name|userRoles
operator|.
name|get
argument_list|(
name|userDN
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|callable
operator|.
name|call
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|userRoles
operator|.
name|put
argument_list|(
name|userDN
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

