begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|EncryptionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|BasicEncryption
implements|implements
name|Encryption
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BasicEncryption
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|algorithm
decl_stmt|;
specifier|private
name|String
name|encoding
decl_stmt|;
specifier|private
name|MessageDigest
name|md
decl_stmt|;
specifier|public
name|BasicEncryption
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|EncryptionService
operator|.
name|ALGORITHM
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|algorithm
operator|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EncryptionService
operator|.
name|ENCODING
operator|.
name|equalsIgnoreCase
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported encryption parameter: "
operator|+
name|key
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|algorithm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Digest algorithm must be specified"
argument_list|)
throw|;
block|}
comment|// Check if the algorithm algorithm is available
try|try
block|{
name|md
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Initialization failed. Digest algorithm "
operator|+
name|algorithm
operator|+
literal|" is not available."
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to configure login module: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|encoding
operator|!=
literal|null
operator|&&
name|encoding
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|EncryptionService
operator|.
name|ENCODING_HEXADECIMAL
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
operator|&&
operator|!
name|EncryptionService
operator|.
name|ENCODING_BASE64
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Initialization failed. Digest encoding "
operator|+
name|encoding
operator|+
literal|" is not supported."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to configure login module. Digest Encoding "
operator|+
name|encoding
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|encryptPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Digest the user provided password
name|byte
index|[]
name|data
init|=
name|md
operator|.
name|digest
argument_list|(
name|password
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
operator|||
name|encoding
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|EncryptionService
operator|.
name|ENCODING_HEXADECIMAL
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
return|return
name|hexEncode
argument_list|(
name|data
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|EncryptionService
operator|.
name|ENCODING_BASE64
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
return|return
name|base64Encode
argument_list|(
name|data
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to configure login module. Digest Encoding "
operator|+
name|encoding
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|checkPassword
parameter_list|(
name|String
name|provided
parameter_list|,
name|String
name|real
parameter_list|)
block|{
if|if
condition|(
name|real
operator|==
literal|null
operator|&&
name|provided
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|real
operator|==
literal|null
operator|||
name|provided
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// both are non-null
name|String
name|encoded
init|=
name|encryptPassword
argument_list|(
name|provided
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
operator|||
name|encoding
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|EncryptionService
operator|.
name|ENCODING_HEXADECIMAL
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
return|return
name|real
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoded
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|EncryptionService
operator|.
name|ENCODING_BASE64
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
return|return
name|real
operator|.
name|equals
argument_list|(
name|encoded
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|hexEncode
parameter_list|(
name|byte
index|[]
name|in
parameter_list|)
block|{
return|return
name|DatatypeConverter
operator|.
name|printHexBinary
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**      * Encode the input data producing a base 64 encoded byte array.      *      * @param input the String to encore as an array of byte.      * @return a byte array containing the base 64 encoded data.      */
specifier|public
specifier|static
name|String
name|base64Encode
parameter_list|(
name|byte
index|[]
name|input
parameter_list|)
block|{
return|return
name|DatatypeConverter
operator|.
name|printBase64Binary
argument_list|(
name|input
argument_list|)
return|;
block|}
block|}
end_class

end_unit

