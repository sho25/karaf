begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|AbstractKarafLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Specific LDAPLoginModule to be used with GSSAPI. Uses the specified realm as login context.  */
end_comment

begin_class
specifier|public
class|class
name|GSSAPILdapLoginModule
extends|extends
name|AbstractKarafLoginModule
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LDAPLoginModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|REALM_PROPERTY
init|=
literal|"gssapiRealm"
decl_stmt|;
specifier|private
name|LoginContext
name|context
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|callbackHandler
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|containsKey
argument_list|(
name|REALM_PROPERTY
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|REALM_PROPERTY
operator|+
literal|" is not set"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"cannot authenticate through the delegating realm"
argument_list|)
throw|;
block|}
name|context
operator|=
operator|new
name|LoginContext
argument_list|(
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
name|REALM_PROPERTY
argument_list|)
argument_list|,
name|this
operator|.
name|subject
argument_list|,
name|this
operator|.
name|callbackHandler
argument_list|)
expr_stmt|;
name|context
operator|.
name|login
argument_list|()
expr_stmt|;
try|try
block|{
name|succeeded
operator|=
name|Subject
operator|.
name|doAs
argument_list|(
name|context
operator|.
name|getSubject
argument_list|()
argument_list|,
operator|(
name|PrivilegedExceptionAction
argument_list|<
name|Boolean
argument_list|>
operator|)
name|this
operator|::
name|doLogin
argument_list|)
expr_stmt|;
return|return
name|succeeded
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pExcp
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"error with delegated authentication"
argument_list|,
name|pExcp
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LoginException
argument_list|(
name|pExcp
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|boolean
name|doLogin
parameter_list|()
throws|throws
name|LoginException
block|{
comment|//force GSSAPI for login
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|opts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|options
argument_list|)
decl_stmt|;
name|opts
operator|.
name|put
argument_list|(
name|LDAPOptions
operator|.
name|AUTHENTICATION
argument_list|,
literal|"GSSAPI"
argument_list|)
expr_stmt|;
name|ClassLoader
name|tccl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|LDAPOptions
name|lOptions
init|=
operator|new
name|LDAPOptions
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|NameCallback
index|[]
name|callbacks
init|=
operator|new
name|NameCallback
index|[
literal|1
index|]
decl_stmt|;
name|callbacks
index|[
literal|0
index|]
operator|=
operator|new
name|NameCallback
argument_list|(
literal|"Username: "
argument_list|)
expr_stmt|;
try|try
block|{
name|callbackHandler
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"error with callback handler"
argument_list|,
name|ioException
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LoginException
argument_list|(
name|ioException
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|unsupportedCallbackException
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"error with callback handler"
argument_list|,
name|unsupportedCallbackException
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LoginException
argument_list|(
name|unsupportedCallbackException
operator|.
name|getMessage
argument_list|()
operator|+
literal|" not available to obtain information from user."
argument_list|)
throw|;
block|}
name|user
operator|=
name|callbacks
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
name|principals
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|String
index|[]
name|userDnAndNamespace
decl_stmt|;
try|try
init|(
name|LDAPCache
name|cache
init|=
name|LDAPCache
operator|.
name|getCache
argument_list|(
name|lOptions
argument_list|)
init|)
block|{
try|try
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Get the user DN."
argument_list|)
expr_stmt|;
name|userDnAndNamespace
operator|=
name|cache
operator|.
name|getUserDnAndNamespace
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Can't connect to the LDAP server: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Can't connect to the LDAP server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|userDnAndNamespace
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|principals
operator|.
name|add
argument_list|(
operator|new
name|UserPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|roles
init|=
name|cache
operator|.
name|getUserRoles
argument_list|(
name|user
argument_list|,
name|userDnAndNamespace
index|[
literal|0
index|]
argument_list|,
name|userDnAndNamespace
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|role
range|:
name|roles
control|)
block|{
name|principals
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Can't get user "
operator|+
name|user
operator|+
literal|" roles: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
name|ManagedSSLSocketFactory
operator|.
name|setSocketFactory
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|tccl
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
name|boolean
name|ret
init|=
name|super
operator|.
name|commit
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|principals
operator|.
name|addAll
argument_list|(
name|subject
operator|.
name|getPrincipals
argument_list|(
name|KerberosPrincipal
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

