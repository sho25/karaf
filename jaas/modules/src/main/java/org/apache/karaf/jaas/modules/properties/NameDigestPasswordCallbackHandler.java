begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|NameDigestPasswordCallbackHandler
implements|implements
name|CallbackHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NameDigestPasswordCallbackHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD_CALLBACK_NAME
init|=
literal|"setObject"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|PASSWORD_CALLBACK_TYPES
init|=
operator|new
name|Class
index|[]
block|{
name|Object
operator|.
name|class
block|,
name|char
index|[]
operator|.
name|class
block|,
name|String
operator|.
name|class
block|}
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|nonce
decl_stmt|;
specifier|private
name|String
name|createdTime
decl_stmt|;
specifier|private
name|String
name|passwordCallbackName
decl_stmt|;
specifier|public
name|NameDigestPasswordCallbackHandler
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|nonce
parameter_list|,
name|String
name|createdTime
parameter_list|)
block|{
name|this
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|nonce
argument_list|,
name|createdTime
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NameDigestPasswordCallbackHandler
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|nonce
parameter_list|,
name|String
name|createdTime
parameter_list|,
name|String
name|passwordCallbackName
parameter_list|)
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|nonce
operator|=
name|nonce
expr_stmt|;
name|this
operator|.
name|createdTime
operator|=
name|createdTime
expr_stmt|;
name|this
operator|.
name|passwordCallbackName
operator|=
name|passwordCallbackName
expr_stmt|;
block|}
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbacks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Callback
name|callback
init|=
name|callbacks
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|handleCallback
argument_list|(
name|callback
argument_list|)
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
operator|(
operator|(
name|NameCallback
operator|)
name|callback
operator|)
operator|.
name|setName
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
name|PasswordCallback
name|pwCallback
init|=
operator|(
name|PasswordCallback
operator|)
name|callback
decl_stmt|;
name|pwCallback
operator|.
name|setPassword
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|invokePasswordCallback
argument_list|(
name|callback
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Unsupported callback type"
operator|+
name|callbacks
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callbacks
index|[
name|i
index|]
argument_list|,
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|handleCallback
parameter_list|(
name|Callback
name|callback
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/*      * This method is called from the handle(Callback[]) method when the specified callback       * did not match any of the known callback classes. It looks for the callback method       * having the specified method name with one of the suppported parameter types.      * If found, it invokes the callback method on the object and returns true.       * If not, it returns false.      */
specifier|private
name|boolean
name|invokePasswordCallback
parameter_list|(
name|Callback
name|callback
parameter_list|)
block|{
name|String
name|cbname
init|=
name|passwordCallbackName
operator|==
literal|null
condition|?
name|PASSWORD_CALLBACK_NAME
else|:
name|passwordCallbackName
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|arg
range|:
name|PASSWORD_CALLBACK_TYPES
control|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|callback
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|cbname
argument_list|,
name|arg
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|callback
argument_list|,
name|arg
operator|==
name|String
operator|.
name|class
condition|?
name|password
else|:
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore and continue
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getNonce
parameter_list|()
block|{
return|return
name|this
operator|.
name|nonce
return|;
block|}
specifier|public
name|String
name|getCreatedTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|createdTime
return|;
block|}
block|}
end_class

end_unit

