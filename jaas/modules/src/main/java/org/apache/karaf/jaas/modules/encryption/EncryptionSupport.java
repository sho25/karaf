begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|encryption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|EncryptionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|JAASUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_class
specifier|public
class|class
name|EncryptionSupport
block|{
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|EncryptionSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|Encryption
name|encryption
decl_stmt|;
specifier|private
name|String
name|encryptionPrefix
decl_stmt|;
specifier|private
name|String
name|encryptionSuffix
decl_stmt|;
specifier|private
name|boolean
name|debug
decl_stmt|;
specifier|private
name|boolean
name|enabled
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|encOpts
decl_stmt|;
specifier|public
specifier|static
name|EncryptionSupport
name|noEncryptionSupport
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
operator|new
name|EncryptionSupport
argument_list|(
name|options
argument_list|)
return|;
block|}
specifier|public
name|EncryptionSupport
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|debug
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|JAASUtils
operator|.
name|getString
argument_list|(
name|options
argument_list|,
literal|"debug"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the bundle context is set in the Config JaasRealm by default
name|this
operator|.
name|bundleContext
operator|=
operator|(
name|BundleContext
operator|)
name|options
operator|.
name|get
argument_list|(
name|BundleContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|encOpts
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"encryption."
argument_list|)
condition|)
block|{
name|encOpts
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|"encryption."
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|encryptionPrefix
operator|=
name|defaulIfNull
argument_list|(
name|encOpts
operator|.
name|remove
argument_list|(
literal|"prefix"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|encryptionSuffix
operator|=
name|defaulIfNull
argument_list|(
name|encOpts
operator|.
name|remove
argument_list|(
literal|"suffix"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|enabled
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|encOpts
operator|.
name|remove
argument_list|(
literal|"enabled"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|enabled
operator|&&
name|debug
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Encryption is disabled."
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|encOpts
operator|.
name|remove
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|logOptions
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|encrypt
parameter_list|(
name|String
name|plain
parameter_list|)
block|{
name|getEncryption
argument_list|()
expr_stmt|;
if|if
condition|(
name|encryption
operator|==
literal|null
operator|||
name|isEncrypted
argument_list|(
name|plain
argument_list|)
condition|)
block|{
return|return
name|plain
return|;
block|}
else|else
block|{
return|return
name|encryptionPrefix
operator|+
name|encryption
operator|.
name|encryptPassword
argument_list|(
name|plain
argument_list|)
operator|+
name|encryptionSuffix
return|;
block|}
block|}
specifier|public
name|boolean
name|checkPassword
parameter_list|(
name|String
name|provided
parameter_list|,
name|String
name|real
parameter_list|)
block|{
name|getEncryption
argument_list|()
expr_stmt|;
if|if
condition|(
name|encryption
operator|==
literal|null
condition|)
block|{
return|return
name|provided
operator|!=
literal|null
operator|&&
name|provided
operator|.
name|equals
argument_list|(
name|real
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|encryptedPassword
init|=
name|real
operator|.
name|substring
argument_list|(
name|encryptionPrefix
operator|.
name|length
argument_list|()
argument_list|,
name|real
operator|.
name|length
argument_list|()
operator|-
name|encryptionSuffix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|encryption
operator|.
name|checkPassword
argument_list|(
name|provided
argument_list|,
name|encryptedPassword
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|logOptions
parameter_list|()
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Encryption is enabled. Using service "
operator|+
name|name
operator|+
literal|" with options "
operator|+
name|encOpts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Encryption is enabled. Using options "
operator|+
name|encOpts
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|defaulIfNull
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
specifier|private
name|boolean
name|isEncrypted
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|boolean
name|prefixPresent
init|=
literal|""
operator|.
name|equals
argument_list|(
name|encryptionPrefix
argument_list|)
operator|||
name|password
operator|.
name|startsWith
argument_list|(
name|encryptionPrefix
argument_list|)
decl_stmt|;
name|boolean
name|suffixPresent
init|=
literal|""
operator|.
name|equals
argument_list|(
name|encryptionSuffix
argument_list|)
operator|||
name|password
operator|.
name|endsWith
argument_list|(
name|encryptionSuffix
argument_list|)
decl_stmt|;
return|return
name|prefixPresent
operator|&&
name|suffixPresent
return|;
block|}
comment|/**      * @deprecated Use encrypt instead. This method will be made private      * @return chosen encryption      */
annotation|@
name|Deprecated
specifier|public
name|Encryption
name|getEncryption
parameter_list|()
block|{
if|if
condition|(
name|encryption
operator|!=
literal|null
operator|||
operator|!
name|enabled
condition|)
block|{
return|return
name|encryption
return|;
block|}
name|ServiceTracker
argument_list|<
name|EncryptionService
argument_list|,
name|EncryptionService
argument_list|>
name|tracker
init|=
operator|new
name|ServiceTracker
argument_list|<>
argument_list|(
name|bundleContext
argument_list|,
name|getFilter
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getEncryptionInternal
argument_list|(
name|tracker
argument_list|)
return|;
block|}
finally|finally
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Encryption
name|getEncryptionInternal
parameter_list|(
name|ServiceTracker
argument_list|<
name|EncryptionService
argument_list|,
name|EncryptionService
argument_list|>
name|tracker
parameter_list|)
block|{
try|try
block|{
name|tracker
operator|.
name|waitForService
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|SortedMap
argument_list|<
name|ServiceReference
argument_list|<
name|EncryptionService
argument_list|>
argument_list|,
name|EncryptionService
argument_list|>
name|tracked
init|=
name|tracker
operator|.
name|getTracked
argument_list|()
decl_stmt|;
if|if
condition|(
name|tracked
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|noEncryptionServiceMsg
argument_list|()
argument_list|)
throw|;
block|}
for|for
control|(
name|EncryptionService
name|encryptionService
range|:
name|tracked
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|Encryption
name|encr
init|=
name|encryptionService
operator|.
name|createEncryption
argument_list|(
name|encOpts
argument_list|)
decl_stmt|;
if|if
condition|(
name|encr
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|encryption
operator|=
name|encr
expr_stmt|;
return|return
name|encryption
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No EncryptionService supporting the required options could be found."
argument_list|)
throw|;
block|}
specifier|private
name|String
name|noEncryptionServiceMsg
parameter_list|()
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|"Encryption service "
operator|+
name|name
operator|+
literal|" not found. Please check that the encryption service is correctly set up."
return|;
block|}
else|else
block|{
return|return
literal|"No encryption service found. Please install the Karaf encryption feature and check that the encryption algorithm is supported."
return|;
block|}
block|}
specifier|private
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
name|getFilter
parameter_list|()
block|{
name|String
name|nameFilter
init|=
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|"(name="
operator|+
name|name
operator|+
literal|")"
else|:
literal|null
decl_stmt|;
name|String
name|objFilter
init|=
literal|"(objectClass="
operator|+
name|EncryptionService
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
decl_stmt|;
name|String
name|filter
init|=
name|nameFilter
operator|==
literal|null
condition|?
name|objFilter
else|:
literal|"(&"
operator|+
name|nameFilter
operator|+
name|objFilter
operator|+
literal|")"
decl_stmt|;
try|try
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|filter
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deprecated
specifier|public
name|String
name|getEncryptionSuffix
parameter_list|()
block|{
return|return
name|encryptionSuffix
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|setEncryptionSuffix
parameter_list|(
name|String
name|encryptionSuffix
parameter_list|)
block|{
name|this
operator|.
name|encryptionSuffix
operator|=
name|encryptionSuffix
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|String
name|getEncryptionPrefix
parameter_list|()
block|{
return|return
name|encryptionPrefix
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|setEncryptionPrefix
parameter_list|(
name|String
name|encryptionPrefix
parameter_list|)
block|{
name|this
operator|.
name|encryptionPrefix
operator|=
name|encryptionPrefix
expr_stmt|;
block|}
comment|/**      * For tests      */
name|void
name|setEncryption
parameter_list|(
name|Encryption
name|encryption
parameter_list|)
block|{
name|this
operator|.
name|encryption
operator|=
name|encryption
expr_stmt|;
block|}
block|}
end_class

end_unit

