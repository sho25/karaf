begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JDBCUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DATASOURCE
init|=
literal|"datasource"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JNDI
init|=
literal|"jndi:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OSGI
init|=
literal|"osgi:"
decl_stmt|;
specifier|private
name|JDBCUtils
parameter_list|()
block|{ }
comment|/**      * Look up a datasource from the url. The datasource can be passed either as jndi name or bundles ldap filter.      *      * @param bc the bundle context.      * @param url the datasource URL.      * @return the {@link DataSource} object.      * @throws Exception in case of datasource creation failure.      */
specifier|public
specifier|static
name|DataSource
name|createDatasource
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|ds
init|=
name|doCreateDatasource
argument_list|(
name|bc
argument_list|,
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|ds
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to create datasource for "
operator|+
name|url
argument_list|)
throw|;
block|}
return|return
name|DataSource
operator|.
name|class
operator|.
name|cast
argument_list|(
name|ds
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Object
name|doCreateDatasource
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|url
operator|=
operator|(
name|url
operator|!=
literal|null
operator|)
condition|?
name|url
operator|.
name|trim
argument_list|()
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Illegal datasource url format. Datasource URL cannot be null or empty."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
name|JNDI
argument_list|)
condition|)
block|{
name|String
name|jndiName
init|=
name|url
operator|.
name|substring
argument_list|(
name|JNDI
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|InitialContext
name|ic
init|=
operator|new
name|InitialContext
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|ic
operator|.
name|lookup
argument_list|(
name|jndiName
argument_list|)
return|;
block|}
finally|finally
block|{
name|ic
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
name|OSGI
argument_list|)
condition|)
block|{
name|String
name|osgiFilter
init|=
name|url
operator|.
name|substring
argument_list|(
name|OSGI
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|clazz
init|=
literal|null
decl_stmt|;
name|String
name|filter
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|osgiFilter
operator|.
name|split
argument_list|(
literal|"/"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|clazz
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|filter
operator|=
name|tokens
index|[
literal|1
index|]
expr_stmt|;
block|}
name|ServiceReference
index|[]
name|references
init|=
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|clazz
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
name|ServiceReference
name|ref
init|=
name|references
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|ds
init|=
name|bc
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|bc
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find service reference for datasource: "
operator|+
name|clazz
operator|+
literal|"/"
operator|+
name|filter
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Illegal datasource url format "
operator|+
name|url
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
name|int
name|rawUpdate
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|query
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
try|try
init|(
name|PreparedStatement
name|statement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|statement
operator|.
name|setString
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|res
init|=
name|statement
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|int
name|rawUpdate
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|query
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
init|(
name|PreparedStatement
name|statement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|statement
operator|.
name|setString
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|statement
operator|.
name|executeUpdate
argument_list|()
return|;
block|}
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|rawSelect
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|String
name|query
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|SQLException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
init|)
block|{
return|return
name|rawSelect
argument_list|(
name|connection
argument_list|,
name|query
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
specifier|protected
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|rawSelect
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|query
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|SQLException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|PreparedStatement
name|statement
init|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|query
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|statement
operator|.
name|setString
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|params
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|ResultSet
name|resultSet
init|=
name|statement
operator|.
name|executeQuery
argument_list|()
init|)
block|{
while|while
condition|(
name|resultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|resultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

