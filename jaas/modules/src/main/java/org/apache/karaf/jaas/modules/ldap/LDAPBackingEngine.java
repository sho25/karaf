begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|BackingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
operator|.
name|LDAPCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|ldap
operator|.
name|LDAPOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|DirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Karaf JAAS backing engine to support basic list funcitonality  * for the LDAP login module.  Modification is not supported  * at this time  */
end_comment

begin_class
specifier|public
class|class
name|LDAPBackingEngine
implements|implements
name|BackingEngine
block|{
specifier|private
name|LDAPCache
name|cache
decl_stmt|;
specifier|private
name|LDAPOptions
name|options
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LDAPBackingEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|LDAPBackingEngine
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
operator|new
name|LDAPOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|cache
operator|=
name|LDAPCache
operator|.
name|getCache
argument_list|(
name|this
operator|.
name|options
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addUser
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Adding a user is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteUser
parameter_list|(
name|String
name|username
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Deleting a user is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UserPrincipal
argument_list|>
name|listUsers
parameter_list|()
block|{
name|DirContext
name|context
init|=
literal|null
decl_stmt|;
name|ArrayList
argument_list|<
name|UserPrincipal
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|=
name|cache
operator|.
name|open
argument_list|()
expr_stmt|;
name|SearchControls
name|controls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|getUserSearchSubtree
argument_list|()
condition|)
block|{
name|controls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|controls
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|ONELEVEL_SCOPE
argument_list|)
expr_stmt|;
block|}
name|String
name|filter
init|=
name|options
operator|.
name|getUserFilter
argument_list|()
decl_stmt|;
name|filter
operator|=
name|filter
operator|.
name|replaceAll
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
literal|"%u"
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"\\\\"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Looking for the users in LDAP with "
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"  base DN: "
operator|+
name|options
operator|.
name|getUserBaseDn
argument_list|()
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"  filter: "
operator|+
name|filter
argument_list|)
expr_stmt|;
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|namingEnumeration
init|=
name|context
operator|.
name|search
argument_list|(
name|options
operator|.
name|getUserBaseDn
argument_list|()
argument_list|,
name|filter
argument_list|,
name|controls
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|namingEnumeration
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|SearchResult
name|result
init|=
name|namingEnumeration
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We need to do the following because slashes are handled badly. For example, when searching
comment|// for a user with lots of special characters like cn=admin,=+<>#;\
comment|// SearchResult contains 2 different results:
comment|//
comment|// SearchResult.getName = cn=admin\,\=\+\<\>\#\;\\\\
comment|// SearchResult.getNameInNamespace = cn=admin\,\=\+\<\>#\;\\,ou=people,dc=example,dc=com
comment|//
comment|// the second escapes the slashes correctly.
name|String
name|userDNNamespace
init|=
name|result
operator|.
name|getNameInNamespace
argument_list|()
decl_stmt|;
comment|// handle case where cn, ou, dc case doesn't match
name|int
name|indexOfUserBaseDN
init|=
name|userDNNamespace
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|","
operator|+
name|options
operator|.
name|getUserBaseDn
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|userDN
init|=
operator|(
name|indexOfUserBaseDN
operator|>
literal|0
operator|)
condition|?
name|userDNNamespace
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfUserBaseDN
argument_list|)
else|:
name|result
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// we need to pull out the cn=, uid=, ect.. from the user name to get the actual user name
name|String
name|userName
init|=
name|userDN
decl_stmt|;
if|if
condition|(
name|userDN
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
name|userName
operator|=
name|userDN
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
operator|new
name|UserPrincipal
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|namingEnumeration
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|namingEnumeration
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
return|return
name|users
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|GroupPrincipal
argument_list|>
name|listGroups
parameter_list|(
name|UserPrincipal
name|user
parameter_list|)
block|{
comment|// for now return empty list, group implementation is not supported
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|GroupPrincipal
argument_list|,
name|String
argument_list|>
name|listGroups
parameter_list|()
block|{
comment|// for now return empty list, group implementation is not supported
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroup
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Adding a group is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Creating a group is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteGroup
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Deleting a group is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipal
argument_list|>
name|listRoles
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|userAndNameSpace
init|=
name|cache
operator|.
name|getUserDnAndNamespace
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userAndNameSpace
operator|==
literal|null
operator|||
name|userAndNameSpace
operator|.
name|length
operator|<
literal|2
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
name|ArrayList
argument_list|<
name|RolePrincipal
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|role
range|:
name|cache
operator|.
name|getUserRoles
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|,
name|userAndNameSpace
index|[
literal|0
index|]
argument_list|,
name|userAndNameSpace
index|[
literal|1
index|]
argument_list|)
control|)
block|{
name|roles
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|roles
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRole
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|role
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Adding a role is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteRole
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|role
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Deleting a role is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroupRole
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|role
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Adding a group role is not supporting in LDAP"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteGroupRole
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|role
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Deleting a group role is not supporting in LDAP"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

