begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *   *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *   *       http://www.apache.org/licenses/LICENSE-2.0  *   *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  *  under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|XADataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|AbstractKarafLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|properties
operator|.
name|PropertiesLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_comment
comment|/**  *  * @author iocanel  */
end_comment

begin_class
specifier|public
class|class
name|JDBCLoginModule
extends|extends
name|AbstractKarafLoginModule
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PropertiesLoginModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DATASOURCE
init|=
literal|"datasource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JNDI
init|=
literal|"jndi:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OSGI
init|=
literal|"osgi:"
decl_stmt|;
specifier|private
name|String
name|datasourceURL
decl_stmt|;
specifier|protected
name|String
name|passwordQuery
init|=
literal|"SELECT PASSWORD FROM USERS WHERE USERNAME=?"
decl_stmt|;
specifier|protected
name|String
name|roleQuery
init|=
literal|"SELECT ROLE FROM ROLES WHERE USERNAME=?"
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|callbackHandler
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|datasourceURL
operator|=
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
name|DATASOURCE
argument_list|)
expr_stmt|;
if|if
condition|(
name|datasourceURL
operator|==
literal|null
operator|||
name|datasourceURL
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No datasource was specified "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|datasourceURL
operator|.
name|startsWith
argument_list|(
name|JNDI
argument_list|)
operator|&&
operator|!
name|datasourceURL
operator|.
name|startsWith
argument_list|(
name|OSGI
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid datasource lookup protocol"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Looks up a datasource from the url. The datasource can be passed either as jndi name or osgi ldap filter.      * @param url      * @return      * @throws Exception      */
specifier|public
name|Object
name|createDatasource
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Illegal datasource url format. Datasource URL cannot be null."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Illegal datasource url format. Datasource URL cannot be empty."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
name|JNDI
argument_list|)
condition|)
block|{
name|String
name|jndiName
init|=
name|url
operator|.
name|substring
argument_list|(
name|JNDI
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|InitialContext
name|ic
init|=
operator|new
name|InitialContext
argument_list|()
decl_stmt|;
name|Object
name|ds
init|=
name|ic
operator|.
name|lookup
argument_list|(
name|jndiName
argument_list|)
decl_stmt|;
return|return
name|ds
return|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
name|OSGI
argument_list|)
condition|)
block|{
name|String
name|osgiFilter
init|=
name|url
operator|.
name|substring
argument_list|(
name|OSGI
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|clazz
init|=
literal|null
decl_stmt|;
name|String
name|filter
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|tokens
init|=
name|osgiFilter
operator|.
name|split
argument_list|(
literal|"/"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|clazz
operator|=
name|tokens
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
name|tokens
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|filter
operator|=
name|tokens
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
name|ServiceReference
index|[]
name|references
init|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|clazz
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
name|ServiceReference
name|ref
init|=
name|references
index|[
literal|0
index|]
decl_stmt|;
name|Object
name|ds
init|=
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find service reference for datasource: "
operator|+
name|clazz
operator|+
literal|"/"
operator|+
name|filter
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Illegal datasource url format"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|passwordStatement
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|roleStatement
init|=
literal|null
decl_stmt|;
name|ResultSet
name|passwordResultSet
init|=
literal|null
decl_stmt|;
name|ResultSet
name|roleResultSet
init|=
literal|null
decl_stmt|;
name|Callback
index|[]
name|callbacks
init|=
operator|new
name|Callback
index|[
literal|2
index|]
decl_stmt|;
name|callbacks
index|[
literal|0
index|]
operator|=
operator|new
name|NameCallback
argument_list|(
literal|"Username: "
argument_list|)
expr_stmt|;
name|callbacks
index|[
literal|1
index|]
operator|=
operator|new
name|PasswordCallback
argument_list|(
literal|"Password: "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|callbackHandler
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|uce
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|uce
operator|.
name|getMessage
argument_list|()
operator|+
literal|" not available to obtain information from user"
argument_list|)
throw|;
block|}
name|user
operator|=
operator|(
operator|(
name|NameCallback
operator|)
name|callbacks
index|[
literal|0
index|]
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|char
index|[]
name|tmpPassword
init|=
operator|(
operator|(
name|PasswordCallback
operator|)
name|callbacks
index|[
literal|1
index|]
operator|)
operator|.
name|getPassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpPassword
operator|==
literal|null
condition|)
block|{
name|tmpPassword
operator|=
operator|new
name|char
index|[
literal|0
index|]
expr_stmt|;
block|}
name|String
name|password
init|=
operator|new
name|String
argument_list|(
name|tmpPassword
argument_list|)
decl_stmt|;
name|principals
operator|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|Object
name|credentialsDatasource
init|=
name|createDatasource
argument_list|(
name|datasourceURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|credentialsDatasource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Cannot obtain data source:"
operator|+
name|datasourceURL
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|credentialsDatasource
operator|instanceof
name|DataSource
condition|)
block|{
name|connection
operator|=
operator|(
operator|(
name|DataSource
operator|)
name|credentialsDatasource
operator|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|credentialsDatasource
operator|instanceof
name|XADataSource
condition|)
block|{
name|connection
operator|=
operator|(
operator|(
name|XADataSource
operator|)
name|credentialsDatasource
operator|)
operator|.
name|getXAConnection
argument_list|()
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Unknow dataSource type "
operator|+
name|credentialsDatasource
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|//Retrieve user credentials from database.
name|passwordStatement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|passwordQuery
argument_list|)
expr_stmt|;
name|passwordStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|passwordResultSet
operator|=
name|passwordStatement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|passwordResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"User "
operator|+
name|user
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
else|else
block|{
name|String
name|storedPassword
init|=
name|passwordResultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkPassword
argument_list|(
name|password
argument_list|,
name|storedPassword
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Password for "
operator|+
name|user
operator|+
literal|" does not match"
argument_list|)
throw|;
block|}
name|principals
operator|.
name|add
argument_list|(
operator|new
name|UserPrincipal
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Retrieve user roles from database
name|roleStatement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|roleQuery
argument_list|)
expr_stmt|;
name|roleStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|roleResultSet
operator|=
name|roleStatement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
name|roleResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|role
init|=
name|roleResultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Error has occured while retrieving credentials from databse:"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|passwordResultSet
operator|!=
literal|null
operator|&&
operator|!
name|passwordResultSet
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|passwordResultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|passwordStatement
operator|!=
literal|null
operator|&&
operator|!
name|passwordStatement
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|passwordStatement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roleResultSet
operator|!=
literal|null
operator|&&
operator|!
name|roleResultSet
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|roleResultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roleStatement
operator|!=
literal|null
operator|&&
operator|!
name|roleStatement
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|roleStatement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
operator|!
name|connection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to clearly close connection to the database:"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|logout
parameter_list|()
throws|throws
name|LoginException
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|removeAll
argument_list|(
name|principals
argument_list|)
expr_stmt|;
name|principals
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"logout"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

