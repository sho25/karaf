begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|BackingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|encryption
operator|.
name|EncryptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCBackingEngine
implements|implements
name|BackingEngine
block|{
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCBackingEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
name|EncryptionSupport
name|encryptionSupport
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MSG_CONNECTION_CLOSE_FAILED
init|=
literal|"Failed to clearly close connection to the database:"
decl_stmt|;
specifier|private
name|String
name|addUserStatement
init|=
literal|"INSERT INTO USERS VALUES(?,?)"
decl_stmt|;
specifier|private
name|String
name|addRoleStatement
init|=
literal|"INSERT INTO ROLES VALUES(?,?)"
decl_stmt|;
specifier|private
name|String
name|deleteRoleStatement
init|=
literal|"DELETE FROM ROLES WHERE USERNAME=? AND ROLE=?"
decl_stmt|;
specifier|private
name|String
name|deleteAllUserRolesStatement
init|=
literal|"DELETE FROM ROLES WHERE USERNAME=?"
decl_stmt|;
specifier|private
name|String
name|deleteUserStatement
init|=
literal|"DELETE FROM USERS WHERE USERNAME=?"
decl_stmt|;
specifier|private
name|String
name|selectUsersQuery
init|=
literal|"SELECT USERNAME FROM USERS"
decl_stmt|;
specifier|private
name|String
name|selectRolesQuery
init|=
literal|"SELECT ROLE FROM ROLES WHERE USERNAME=?"
decl_stmt|;
comment|/**      * Constructor      *      * @param dataSource      */
specifier|public
name|JDBCBackingEngine
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
block|}
specifier|public
name|JDBCBackingEngine
parameter_list|(
name|DataSource
name|dataSource
parameter_list|,
name|EncryptionSupport
name|encryptionSupport
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
name|this
operator|.
name|encryptionSupport
operator|=
name|encryptionSupport
expr_stmt|;
block|}
comment|/**      * Adds a new user.      *      * @param username      * @param password      */
specifier|public
name|void
name|addUser
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|statement
init|=
literal|null
decl_stmt|;
name|String
name|newPassword
init|=
name|password
decl_stmt|;
comment|//If encryption support is enabled, encrypt password
if|if
condition|(
name|encryptionSupport
operator|!=
literal|null
operator|&&
name|encryptionSupport
operator|.
name|getEncryption
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newPassword
operator|=
name|encryptionSupport
operator|.
name|getEncryption
argument_list|()
operator|.
name|encryptPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|encryptionSupport
operator|.
name|getEncryptionPrefix
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newPassword
operator|=
name|encryptionSupport
operator|.
name|getEncryptionPrefix
argument_list|()
operator|+
name|newPassword
expr_stmt|;
block|}
if|if
condition|(
name|encryptionSupport
operator|.
name|getEncryptionSuffix
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|newPassword
operator|=
name|newPassword
operator|+
name|encryptionSupport
operator|.
name|getEncryptionSuffix
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|addUserStatement
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|newPassword
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
name|statement
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Executiong [%s], USERNAME=%s, PASSWORD=%s. %i rows affected."
argument_list|,
name|addUserStatement
argument_list|,
name|username
argument_list|,
name|newPassword
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error executiong statement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|MSG_CONNECTION_CLOSE_FAILED
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Delete user by username.      *      * @param username      */
specifier|public
name|void
name|deleteUser
parameter_list|(
name|String
name|username
parameter_list|)
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|userStatement
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|roleStatement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
comment|//Remove from roles
name|roleStatement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|deleteAllUserRolesStatement
argument_list|)
expr_stmt|;
name|roleStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|roleStatement
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
comment|//Remove from users
name|userStatement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|deleteUserStatement
argument_list|)
expr_stmt|;
name|userStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|int
name|userRows
init|=
name|userStatement
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Executiong [%s], USERNAME=%s. %i userRows affected."
argument_list|,
name|deleteUserStatement
argument_list|,
name|username
argument_list|,
name|userRows
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error executiong statement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|userStatement
operator|!=
literal|null
condition|)
block|{
name|userStatement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roleStatement
operator|!=
literal|null
condition|)
block|{
name|roleStatement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|MSG_CONNECTION_CLOSE_FAILED
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * List all Users      *      * @return      */
specifier|public
name|List
argument_list|<
name|UserPrincipal
argument_list|>
name|listUsers
parameter_list|()
block|{
name|List
argument_list|<
name|UserPrincipal
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|UserPrincipal
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|listUserStatement
init|=
literal|null
decl_stmt|;
name|ResultSet
name|usersResultSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
comment|//Remove from users
name|listUserStatement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|selectUsersQuery
argument_list|)
expr_stmt|;
name|usersResultSet
operator|=
name|listUserStatement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|usersResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|username
init|=
name|usersResultSet
operator|.
name|getString
argument_list|(
literal|"USERNAME"
argument_list|)
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
operator|new
name|UserPrincipal
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error executiong statement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|usersResultSet
operator|!=
literal|null
condition|)
block|{
name|usersResultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|listUserStatement
operator|!=
literal|null
condition|)
block|{
name|listUserStatement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|MSG_CONNECTION_CLOSE_FAILED
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|users
return|;
block|}
comment|/**      * List the roles of the {@param principal}.      *      * @param principal      * @return      */
specifier|public
name|List
argument_list|<
name|RolePrincipal
argument_list|>
name|listRoles
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
name|List
argument_list|<
name|RolePrincipal
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|RolePrincipal
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|listRolesStatement
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rolesResultSet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
comment|//Remove from roles
name|listRolesStatement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|selectRolesQuery
argument_list|)
expr_stmt|;
name|listRolesStatement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rolesResultSet
operator|=
name|listRolesStatement
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|rolesResultSet
operator|.
name|next
argument_list|()
condition|)
block|{
name|String
name|role
init|=
name|rolesResultSet
operator|.
name|getString
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|roles
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error executiong statement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|rolesResultSet
operator|!=
literal|null
condition|)
block|{
name|rolesResultSet
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|listRolesStatement
operator|!=
literal|null
condition|)
block|{
name|listRolesStatement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|MSG_CONNECTION_CLOSE_FAILED
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|roles
return|;
block|}
comment|/**      * Add a role to a user.      *      * @param username      * @param role      */
specifier|public
name|void
name|addRole
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|statement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|addRoleStatement
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
name|statement
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Executiong [%s], USERNAME=%s, ROLE=%s. %i rows affected."
argument_list|,
name|addRoleStatement
argument_list|,
name|username
argument_list|,
name|role
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error executiong statement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|MSG_CONNECTION_CLOSE_FAILED
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Remove role from user.      *      * @param username      * @param role      */
specifier|public
name|void
name|deleteRole
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|PreparedStatement
name|statement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dataSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|=
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|statement
operator|=
name|connection
operator|.
name|prepareStatement
argument_list|(
name|deleteRoleStatement
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|int
name|rows
init|=
name|statement
operator|.
name|executeUpdate
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connection
operator|.
name|getAutoCommit
argument_list|()
condition|)
block|{
name|connection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Executiong [%s], USERNAME=%s, ROLE=%s. %i rows affected."
argument_list|,
name|deleteRoleStatement
argument_list|,
name|username
argument_list|,
name|role
argument_list|,
name|rows
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error executing statement"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
name|MSG_CONNECTION_CLOSE_FAILED
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getAddUserStatement
parameter_list|()
block|{
return|return
name|addUserStatement
return|;
block|}
specifier|public
name|void
name|setAddUserStatement
parameter_list|(
name|String
name|addUserStatement
parameter_list|)
block|{
name|this
operator|.
name|addUserStatement
operator|=
name|addUserStatement
expr_stmt|;
block|}
specifier|public
name|String
name|getAddRoleStatement
parameter_list|()
block|{
return|return
name|addRoleStatement
return|;
block|}
specifier|public
name|void
name|setAddRoleStatement
parameter_list|(
name|String
name|addRoleStatement
parameter_list|)
block|{
name|this
operator|.
name|addRoleStatement
operator|=
name|addRoleStatement
expr_stmt|;
block|}
specifier|public
name|String
name|getDeleteRoleStatement
parameter_list|()
block|{
return|return
name|deleteRoleStatement
return|;
block|}
specifier|public
name|void
name|setDeleteRoleStatement
parameter_list|(
name|String
name|deleteRoleStatement
parameter_list|)
block|{
name|this
operator|.
name|deleteRoleStatement
operator|=
name|deleteRoleStatement
expr_stmt|;
block|}
specifier|public
name|String
name|getDeleteAllUserRolesStatement
parameter_list|()
block|{
return|return
name|deleteAllUserRolesStatement
return|;
block|}
specifier|public
name|void
name|setDeleteAllUserRolesStatement
parameter_list|(
name|String
name|deleteAllUserRolesStatement
parameter_list|)
block|{
name|this
operator|.
name|deleteAllUserRolesStatement
operator|=
name|deleteAllUserRolesStatement
expr_stmt|;
block|}
specifier|public
name|String
name|getDeleteUserStatement
parameter_list|()
block|{
return|return
name|deleteUserStatement
return|;
block|}
specifier|public
name|void
name|setDeleteUserStatement
parameter_list|(
name|String
name|deleteUserStatement
parameter_list|)
block|{
name|this
operator|.
name|deleteUserStatement
operator|=
name|deleteUserStatement
expr_stmt|;
block|}
specifier|public
name|String
name|getSelectUsersQuery
parameter_list|()
block|{
return|return
name|selectUsersQuery
return|;
block|}
specifier|public
name|void
name|setSelectUsersQuery
parameter_list|(
name|String
name|selectUsersQuery
parameter_list|)
block|{
name|this
operator|.
name|selectUsersQuery
operator|=
name|selectUsersQuery
expr_stmt|;
block|}
specifier|public
name|String
name|getSelectRolesQuery
parameter_list|()
block|{
return|return
name|selectRolesQuery
return|;
block|}
specifier|public
name|void
name|setSelectRolesQuery
parameter_list|(
name|String
name|selectRolesQuery
parameter_list|)
block|{
name|this
operator|.
name|selectRolesQuery
operator|=
name|selectRolesQuery
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|GroupPrincipal
argument_list|>
name|listGroups
parameter_list|(
name|UserPrincipal
name|user
parameter_list|)
block|{
comment|// TODO support of groups has to be added
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroup
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
block|{
comment|// TODO support of groups has to be added
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteGroup
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
block|{
comment|// TODO support of groups has to be added
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroupRole
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|role
parameter_list|)
block|{
comment|// TODO support of groups has to be added
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteGroupRole
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|role
parameter_list|)
block|{
comment|// TODO support of groups has to be added
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

