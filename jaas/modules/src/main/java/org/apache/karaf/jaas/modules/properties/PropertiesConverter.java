begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|ReifiedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Custom converter to transform a string into a Properties instance.  * (to avoid removing \ from the values as is done by the default blueprint converter)  */
end_comment

begin_class
specifier|public
class|class
name|PropertiesConverter
implements|implements
name|Converter
block|{
specifier|public
name|boolean
name|canConvert
parameter_list|(
name|Object
name|from
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
block|{
return|return
name|String
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|from
operator|.
name|getClass
argument_list|()
argument_list|)
operator|&&
name|Properties
operator|.
name|class
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getRawClass
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|from
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|text
init|=
operator|(
name|String
operator|)
name|from
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|text
operator|.
name|split
argument_list|(
literal|"[\\r\\n]+"
argument_list|)
control|)
block|{
name|int
name|index
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|String
name|key
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|line
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|replaceAll
argument_list|(
literal|"\\\\"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

