begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|publickey
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|BackingEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|modules
operator|.
name|encryption
operator|.
name|EncryptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|PublickeyBackingEngine
implements|implements
name|BackingEngine
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PublickeyBackingEngine
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Properties
name|users
decl_stmt|;
specifier|public
name|PublickeyBackingEngine
parameter_list|(
name|Properties
name|users
parameter_list|)
block|{
name|this
operator|.
name|users
operator|=
name|users
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addUser
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|publickey
parameter_list|)
block|{
if|if
condition|(
name|username
operator|.
name|startsWith
argument_list|(
name|GROUP_PREFIX
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Prefix not permitted: "
operator|+
name|GROUP_PREFIX
argument_list|)
throw|;
name|addUserInternal
argument_list|(
name|username
argument_list|,
name|publickey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addUserInternal
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|publickey
parameter_list|)
block|{
name|String
index|[]
name|infos
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|userInfoBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|newPublickey
init|=
name|publickey
decl_stmt|;
name|String
name|userInfos
init|=
name|users
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
comment|//If user already exists, update publickey
if|if
condition|(
name|userInfos
operator|!=
literal|null
operator|&&
name|userInfos
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|infos
operator|=
name|userInfos
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|userInfoBuffer
operator|.
name|append
argument_list|(
name|newPublickey
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|userInfoBuffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|userInfoBuffer
operator|.
name|append
argument_list|(
name|infos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|String
name|newUserInfo
init|=
name|userInfoBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|users
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|newUserInfo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|users
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|newPublickey
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|users
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Cannot update users file,"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteUser
parameter_list|(
name|String
name|username
parameter_list|)
block|{
comment|// delete all its groups first, for garbage collection of the groups
for|for
control|(
name|GroupPrincipal
name|gp
range|:
name|listGroups
argument_list|(
name|username
argument_list|)
control|)
block|{
name|deleteGroup
argument_list|(
name|username
argument_list|,
name|gp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|users
operator|.
name|remove
argument_list|(
name|username
argument_list|)
expr_stmt|;
try|try
block|{
name|users
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Cannot remove users file,"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|UserPrincipal
argument_list|>
name|listUsers
parameter_list|()
block|{
name|List
argument_list|<
name|UserPrincipal
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|user
range|:
name|users
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|userName
init|=
operator|(
name|String
operator|)
name|user
decl_stmt|;
if|if
condition|(
name|userName
operator|.
name|startsWith
argument_list|(
name|GROUP_PREFIX
argument_list|)
condition|)
continue|continue;
name|UserPrincipal
name|userPrincipal
init|=
operator|new
name|UserPrincipal
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|userPrincipal
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipal
argument_list|>
name|listRoles
parameter_list|(
name|Principal
name|principal
parameter_list|)
block|{
name|String
name|userName
init|=
name|principal
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|principal
operator|instanceof
name|GroupPrincipal
condition|)
block|{
name|userName
operator|=
name|GROUP_PREFIX
operator|+
name|userName
expr_stmt|;
block|}
return|return
name|listRoles
argument_list|(
name|userName
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|RolePrincipal
argument_list|>
name|listRoles
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|RolePrincipal
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|userInfo
init|=
name|users
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
index|[]
name|infos
init|=
name|userInfo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|roleName
init|=
name|infos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|roleName
operator|.
name|startsWith
argument_list|(
name|GROUP_PREFIX
argument_list|)
condition|)
block|{
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|listRoles
argument_list|(
name|roleName
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|rp
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|RolePrincipal
name|rp
init|=
operator|new
name|RolePrincipal
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|rp
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addRole
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|String
name|userInfos
init|=
name|users
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|userInfos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|listRoles
argument_list|(
name|username
argument_list|)
control|)
block|{
if|if
condition|(
name|role
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|String
name|newUserInfos
init|=
name|userInfos
operator|+
literal|","
operator|+
name|role
decl_stmt|;
name|users
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|newUserInfos
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|users
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Cannot update users file,"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteRole
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|String
index|[]
name|infos
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|userInfoBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|userInfos
init|=
name|users
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
comment|//If user already exists, remove the role
if|if
condition|(
name|userInfos
operator|!=
literal|null
operator|&&
name|userInfos
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|infos
operator|=
name|userInfos
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|String
name|password
init|=
name|infos
index|[
literal|0
index|]
decl_stmt|;
name|userInfoBuffer
operator|.
name|append
argument_list|(
name|password
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|infos
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|infos
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|role
argument_list|)
condition|)
block|{
name|userInfoBuffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|userInfoBuffer
operator|.
name|append
argument_list|(
name|infos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|newUserInfo
init|=
name|userInfoBuffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|users
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|newUserInfo
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|users
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Cannot update users file,"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|GroupPrincipal
argument_list|>
name|listGroups
parameter_list|(
name|UserPrincipal
name|user
parameter_list|)
block|{
name|String
name|userName
init|=
name|user
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|listGroups
argument_list|(
name|userName
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|GroupPrincipal
argument_list|>
name|listGroups
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|List
argument_list|<
name|GroupPrincipal
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|userInfo
init|=
name|users
operator|.
name|get
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userInfo
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|infos
init|=
name|userInfo
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|infos
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|GROUP_PREFIX
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|GROUP_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroup
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|String
name|groupName
init|=
name|GROUP_PREFIX
operator|+
name|group
decl_stmt|;
if|if
condition|(
name|users
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addUserInternal
argument_list|(
name|groupName
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
block|}
name|addRole
argument_list|(
name|username
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteGroup
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|group
parameter_list|)
block|{
name|deleteRole
argument_list|(
name|username
argument_list|,
name|GROUP_PREFIX
operator|+
name|group
argument_list|)
expr_stmt|;
comment|// garbage collection, clean up the groups if needed
for|for
control|(
name|UserPrincipal
name|user
range|:
name|listUsers
argument_list|()
control|)
block|{
for|for
control|(
name|GroupPrincipal
name|g
range|:
name|listGroups
argument_list|(
name|user
argument_list|)
control|)
block|{
if|if
condition|(
name|group
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// there is another user of this group, nothing to clean up
return|return;
block|}
block|}
block|}
comment|// nobody is using this group any more, remote it
name|deleteUser
argument_list|(
name|GROUP_PREFIX
operator|+
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroupRole
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|addRole
argument_list|(
name|GROUP_PREFIX
operator|+
name|group
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteGroupRole
parameter_list|(
name|String
name|group
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|deleteRole
argument_list|(
name|GROUP_PREFIX
operator|+
name|group
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|GroupPrincipal
argument_list|,
name|String
argument_list|>
name|listGroups
parameter_list|()
block|{
name|Map
argument_list|<
name|GroupPrincipal
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|users
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|GROUP_PREFIX
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|GROUP_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|users
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|createGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|String
name|groupName
init|=
name|GROUP_PREFIX
operator|+
name|group
decl_stmt|;
if|if
condition|(
name|users
operator|.
name|get
argument_list|(
name|groupName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addUserInternal
argument_list|(
name|groupName
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group: "
operator|+
name|group
operator|+
literal|" already exist"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

