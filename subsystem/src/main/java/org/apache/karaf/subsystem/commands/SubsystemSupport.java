begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|subsystem
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|subsystem
operator|.
name|Subsystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|subsystem
operator|.
name|SubsystemConstants
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|SubsystemSupport
block|{
annotation|@
name|Reference
name|Subsystem
name|subsystem
decl_stmt|;
specifier|protected
name|Subsystem
name|getRoot
parameter_list|()
block|{
name|Subsystem
name|ss
init|=
name|subsystem
decl_stmt|;
while|while
condition|(
operator|!
name|ss
operator|.
name|getParents
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ss
operator|=
name|ss
operator|.
name|getParents
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|ss
return|;
block|}
specifier|protected
name|Subsystem
name|getSubsystem
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|List
argument_list|<
name|Subsystem
argument_list|>
name|subsystems
init|=
name|getSubsystems
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|int
name|nb
init|=
name|subsystems
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|nb
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No subsystem matching "
operator|+
name|id
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nb
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple subsystems matching "
operator|+
name|id
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|subsystems
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Subsystem
argument_list|>
name|getSubsystems
parameter_list|(
name|String
name|id
parameter_list|)
block|{
comment|// Null id
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|id
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|getSubsystems
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Subsystem
argument_list|>
name|subsystems
init|=
operator|new
name|ArrayList
argument_list|<
name|Subsystem
argument_list|>
argument_list|()
decl_stmt|;
comment|// Try with the id
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\d+$"
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|long
name|lid
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
decl_stmt|;
for|for
control|(
name|Subsystem
name|ss
range|:
name|getSubsystems
argument_list|()
control|)
block|{
if|if
condition|(
name|ss
operator|.
name|getSubsystemId
argument_list|()
operator|==
name|lid
condition|)
block|{
name|subsystems
operator|.
name|add
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subsystems
return|;
block|}
comment|// Try with an id range
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^(\\d+)-(\\d+)$"
argument_list|)
expr_stmt|;
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|index
init|=
name|id
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
name|long
name|startId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|endId
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|id
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Subsystem
name|ss
range|:
name|getSubsystems
argument_list|()
control|)
block|{
if|if
condition|(
name|startId
operator|<=
name|ss
operator|.
name|getSubsystemId
argument_list|()
operator|&&
name|ss
operator|.
name|getSubsystemId
argument_list|()
operator|<=
name|endId
condition|)
block|{
name|subsystems
operator|.
name|add
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subsystems
return|;
block|}
name|int
name|index
init|=
name|id
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|Pattern
name|p1
decl_stmt|,
name|p2
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|p1
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|p2
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|p1
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|id
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Subsystem
name|ss
range|:
name|getSubsystems
argument_list|()
control|)
block|{
if|if
condition|(
name|p1
operator|.
name|matcher
argument_list|(
name|ss
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
operator|&&
operator|(
name|p2
operator|==
literal|null
operator|||
name|p2
operator|.
name|matcher
argument_list|(
name|ss
operator|.
name|getVersion
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
operator|)
condition|)
block|{
name|subsystems
operator|.
name|add
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|subsystems
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Long
argument_list|>
name|getSubsytemIds
parameter_list|(
name|Collection
argument_list|<
name|Subsystem
argument_list|>
name|subsystems
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Subsystem
name|ss
range|:
name|subsystems
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|ss
operator|.
name|getSubsystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Subsystem
argument_list|>
name|getSubsystems
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Subsystem
argument_list|>
name|subsystems
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Subsystem
argument_list|>
argument_list|()
decl_stmt|;
name|doGetSubsystems
argument_list|(
name|subsystems
argument_list|,
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|Subsystem
argument_list|>
argument_list|(
name|subsystems
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|doGetSubsystems
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Subsystem
argument_list|>
name|subsystems
parameter_list|,
name|Subsystem
name|subsystem
parameter_list|)
block|{
if|if
condition|(
name|subsystems
operator|.
name|put
argument_list|(
name|subsystem
operator|.
name|getSubsystemId
argument_list|()
argument_list|,
name|subsystem
argument_list|)
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Subsystem
name|child
range|:
name|subsystem
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|doGetSubsystems
argument_list|(
name|subsystems
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

