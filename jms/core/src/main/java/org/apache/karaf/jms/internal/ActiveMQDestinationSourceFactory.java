begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
class|class
name|ActiveMQDestinationSourceFactory
implements|implements
name|DestinationSource
operator|.
name|Factory
block|{
annotation|@
name|Override
specifier|public
name|DestinationSource
name|create
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|connection
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"org\\.apache\\.activemq\\.ActiveMQ(XA)?Connection"
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|Object
name|destSource
init|=
name|connection
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getDestinationSource"
argument_list|)
operator|.
name|invoke
argument_list|(
name|connection
argument_list|)
decl_stmt|;
return|return
name|type
lambda|->
name|getNames
argument_list|(
name|destSource
argument_list|,
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|Object
name|destSource
parameter_list|,
name|DestinationSource
operator|.
name|DestinationType
name|type
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|type
operator|==
name|DestinationSource
operator|.
name|DestinationType
operator|.
name|Queue
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Set
argument_list|<
name|Queue
argument_list|>
name|queues
init|=
operator|(
name|Set
operator|)
name|destSource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getQueues"
argument_list|)
operator|.
name|invoke
argument_list|(
name|destSource
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Queue
name|queue
range|:
name|queues
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
if|if
condition|(
name|type
operator|==
name|DestinationSource
operator|.
name|DestinationType
operator|.
name|Topic
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Set
argument_list|<
name|Topic
argument_list|>
name|topics
init|=
operator|(
name|Set
operator|)
name|destSource
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getTopics"
argument_list|)
operator|.
name|invoke
argument_list|(
name|destSource
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Topic
name|topic
range|:
name|topics
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|topic
operator|.
name|getTopicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
end_class

end_unit

