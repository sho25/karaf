begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|DestinationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|JmsMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|JmsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Default implementation of the JMS Service.  */
end_comment

begin_class
specifier|public
class|class
name|JmsServiceImpl
implements|implements
name|JmsService
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|create
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"activemq"
argument_list|)
operator|&&
operator|!
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"webspheremq"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JMS connection factory type not known"
argument_list|)
throw|;
block|}
name|File
name|karafBase
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|deployFolder
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"deploy"
argument_list|)
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|deployFolder
argument_list|,
literal|"connectionfactory-"
operator|+
name|name
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"activemq"
argument_list|)
condition|)
block|{
comment|// activemq
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"${name}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"${url}"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|copyDataSourceFile
argument_list|(
name|outFile
argument_list|,
literal|"connectionfactory-activemq.xml"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// webspheremq
name|String
index|[]
name|splitted
init|=
name|url
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitted
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"WebsphereMQ URI should be in the following format: host/port/queuemanager/channel"
argument_list|)
throw|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"${name}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"${host}"
argument_list|,
name|splitted
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"${port}"
argument_list|,
name|splitted
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"${queuemanager}"
argument_list|,
name|splitted
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"${channel}"
argument_list|,
name|splitted
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|copyDataSourceFile
argument_list|(
name|outFile
argument_list|,
literal|"connectionfactory-webspheremq.xml"
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|delete
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|karafBase
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|deployFolder
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"deploy"
argument_list|)
decl_stmt|;
name|File
name|connectionFactoryFile
init|=
operator|new
name|File
argument_list|(
name|deployFolder
argument_list|,
literal|"connectionfactory-"
operator|+
name|name
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connectionFactoryFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The JMS connection factory file "
operator|+
name|connectionFactoryFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|connectionFactoryFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|connectionFactories
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|connectionFactories
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceReference
index|[]
name|references
init|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|ConnectionFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
name|reference
range|:
name|references
control|)
block|{
if|if
condition|(
name|reference
operator|.
name|getProperty
argument_list|(
literal|"osgi.jndi.service.name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|connectionFactories
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
literal|"osgi.jndi.service.name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reference
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|connectionFactories
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionFactories
operator|.
name|add
argument_list|(
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|connectionFactories
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|ConnectionMetaData
name|metaData
init|=
name|connection
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"product"
argument_list|,
name|metaData
operator|.
name|getJMSProviderName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"version"
argument_list|,
name|metaData
operator|.
name|getProviderVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|count
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|destination
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|destination
argument_list|)
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|Message
argument_list|>
name|enumeration
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|enumeration
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|browser
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|instanceof
name|PooledConnection
condition|)
block|{
name|connection
operator|=
operator|(
operator|(
name|PooledConnection
operator|)
name|connection
operator|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|instanceof
name|ActiveMQConnection
condition|)
block|{
name|DestinationSource
name|destinationSource
init|=
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|getDestinationSource
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ActiveMQQueue
argument_list|>
name|activeMQQueues
init|=
name|destinationSource
operator|.
name|getQueues
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQQueue
name|activeMQQueue
range|:
name|activeMQQueues
control|)
block|{
name|queues
operator|.
name|add
argument_list|(
name|activeMQQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|queues
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|topics
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|topics
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|instanceof
name|PooledConnection
condition|)
block|{
name|connection
operator|=
operator|(
operator|(
name|PooledConnection
operator|)
name|connection
operator|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|instanceof
name|ActiveMQConnection
condition|)
block|{
name|DestinationSource
name|destinationSource
init|=
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|getDestinationSource
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ActiveMQTopic
argument_list|>
name|activeMQTopics
init|=
name|destinationSource
operator|.
name|getTopics
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQTopic
name|activeMQTopic
range|:
name|activeMQTopics
control|)
block|{
name|topics
operator|.
name|add
argument_list|(
name|activeMQTopic
operator|.
name|getTopicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|topics
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|JmsMessage
argument_list|>
name|browse
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|filter
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|JmsMessage
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|JmsMessage
argument_list|>
argument_list|()
decl_stmt|;
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|queue
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|Message
argument_list|>
name|enumeration
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
decl_stmt|;
while|while
condition|(
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Message
name|message
init|=
name|enumeration
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|messages
operator|.
name|add
argument_list|(
operator|new
name|JmsMessage
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|browser
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|messages
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|body
parameter_list|,
name|String
name|replyTo
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|body
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|replyTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|queue
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|consume
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|selector
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|queue
argument_list|)
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|Message
name|message
decl_stmt|;
do|do
block|{
name|message
operator|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
name|message
operator|!=
literal|null
condition|)
do|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|move
parameter_list|(
name|String
name|connectionFactory
parameter_list|,
name|String
name|sourceQueue
parameter_list|,
name|String
name|targetQueue
parameter_list|,
name|String
name|selector
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ServiceReference
name|reference
init|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|sourceQueue
argument_list|)
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|Message
name|message
decl_stmt|;
do|do
block|{
name|message
operator|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|targetQueue
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
name|message
operator|!=
literal|null
condition|)
do|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|ServiceReference
name|lookupConnectionFactory
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceReference
index|[]
name|references
init|=
name|bundleContext
operator|.
name|getServiceReferences
argument_list|(
name|ConnectionFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"(|(osgi.jndi.service.name="
operator|+
name|name
operator|+
literal|")(name="
operator|+
name|name
operator|+
literal|")(service.id="
operator|+
name|name
operator|+
literal|"))"
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|==
literal|null
operator|||
name|references
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No JMS connection factory found for "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|references
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple JMS connection factories found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|references
index|[
literal|0
index|]
return|;
block|}
specifier|private
name|void
name|copyDataSourceFile
parameter_list|(
name|File
name|outFile
parameter_list|,
name|String
name|resource
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|InputStream
name|is
init|=
name|JmsServiceImpl
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
try|try
block|{
comment|// read it line at a time so that we can use the platform line ending when we write it out
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|line
operator|=
name|filter
argument_list|(
name|line
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"File "
operator|+
name|outFile
operator|.
name|getPath
argument_list|()
operator|+
literal|" already exists. Remove it if you wish to recreate it."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|OutputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
specifier|private
name|String
name|filter
parameter_list|(
name|String
name|line
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|i
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|p1
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|>=
literal|0
condition|)
block|{
name|String
name|l1
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|String
name|l2
init|=
name|line
operator|.
name|substring
argument_list|(
name|p1
operator|+
name|i
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|=
name|l1
operator|+
name|i
operator|.
name|getValue
argument_list|()
operator|+
name|l2
expr_stmt|;
block|}
block|}
return|return
name|line
return|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|bundleContext
return|;
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
block|}
end_class

end_unit

