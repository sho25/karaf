begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|json
operator|.
name|JsonReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueRequestor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|ArtemisDestinationSourceFactory
implements|implements
name|DestinationSource
operator|.
name|Factory
block|{
annotation|@
name|Override
specifier|public
name|DestinationSource
name|create
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|connection
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"org\\.apache\\.activemq\\.artemis\\.jms\\.client\\.ActiveMQ(XA)?Connection"
argument_list|)
condition|)
block|{
return|return
name|type
lambda|->
name|getNames
argument_list|(
name|connection
argument_list|,
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|DestinationSource
operator|.
name|DestinationType
name|type
parameter_list|)
block|{
try|try
block|{
name|QueueSession
name|session
init|=
operator|(
operator|(
name|QueueConnection
operator|)
name|connection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|managementQueue
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"activemq.management"
argument_list|)
decl_stmt|;
name|QueueRequestor
name|requestor
init|=
operator|new
name|QueueRequestor
argument_list|(
name|session
argument_list|,
name|managementQueue
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|TextMessage
name|m
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setStringProperty
argument_list|(
literal|"_AMQ_ResourceName"
argument_list|,
literal|"broker"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStringProperty
argument_list|(
literal|"_AMQ_OperationName"
argument_list|,
literal|"getQueueNames"
argument_list|)
expr_stmt|;
name|String
name|routing
init|=
name|type
operator|==
name|DestinationSource
operator|.
name|DestinationType
operator|.
name|Queue
condition|?
literal|"ANYCAST"
else|:
literal|"MULTICAST"
decl_stmt|;
name|m
operator|.
name|setText
argument_list|(
literal|"[\""
operator|+
name|routing
operator|+
literal|"\"]"
argument_list|)
expr_stmt|;
name|Message
name|reply
init|=
name|requestor
operator|.
name|request
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|String
name|json
init|=
operator|(
operator|(
name|TextMessage
operator|)
name|reply
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|array
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|JsonReader
operator|.
name|read
argument_list|(
operator|new
name|StringReader
argument_list|(
name|json
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|array
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

