begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|JmsTemplate
block|{
specifier|private
name|BundleContext
name|bc
decl_stmt|;
specifier|private
name|String
name|connectionFactoryName
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|public
name|JmsTemplate
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|String
name|connectionFactoryName
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|bc
operator|=
name|bc
expr_stmt|;
name|this
operator|.
name|connectionFactoryName
operator|=
name|connectionFactoryName
expr_stmt|;
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|execute
parameter_list|(
name|JmsCallback
argument_list|<
name|E
argument_list|>
name|callback
parameter_list|)
block|{
name|ServiceReference
name|reference
init|=
literal|null
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reference
operator|=
name|this
operator|.
name|lookupConnectionFactory
argument_list|(
name|connectionFactoryName
argument_list|)
expr_stmt|;
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|bc
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|E
name|result
init|=
name|callback
operator|.
name|doInSession
argument_list|(
name|connection
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e1
parameter_list|)
block|{
comment|// Ignore
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
if|if
condition|(
name|reference
operator|!=
literal|null
condition|)
block|{
name|bc
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|ServiceReference
name|lookupConnectionFactory
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|ServiceReference
index|[]
name|references
init|=
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|ConnectionFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"(|(osgi.jndi.service.name="
operator|+
name|name
operator|+
literal|")(name="
operator|+
name|name
operator|+
literal|")(service.id="
operator|+
name|name
operator|+
literal|"))"
argument_list|)
decl_stmt|;
if|if
condition|(
name|references
operator|==
literal|null
operator|||
name|references
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No JMS connection factory found for "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|references
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple JMS connection factories found for "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|references
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

