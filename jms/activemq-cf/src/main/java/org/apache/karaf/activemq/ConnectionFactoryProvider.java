begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_class
annotation|@
name|Component
comment|//
argument_list|(
comment|//
name|configurationPid
operator|=
literal|"org.apache.karaf.activemq"
argument_list|,
comment|//
name|immediate
operator|=
literal|true
argument_list|,
comment|//
name|configurationPolicy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
comment|//
argument_list|)
specifier|public
class|class
name|ConnectionFactoryProvider
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OSGI_JNDI_SERVICE_NAME
init|=
literal|"osgi.jndi.service.name"
decl_stmt|;
specifier|private
name|ServiceRegistration
argument_list|<
name|ConnectionFactory
argument_list|>
name|reg
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|create
parameter_list|(
name|ComponentContext
name|compContext
parameter_list|)
block|{
name|BundleContext
name|context
init|=
name|compContext
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|compContext
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|brokerURL
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"url"
argument_list|,
literal|"tcp://localhost:61616"
argument_list|)
decl_stmt|;
name|String
name|jndiName
init|=
name|getString
argument_list|(
name|config
argument_list|,
name|OSGI_JNDI_SERVICE_NAME
argument_list|,
literal|"jms/local"
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"userName"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|getString
argument_list|(
name|config
argument_list|,
literal|"password"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|expiryTimeout
init|=
operator|new
name|Long
argument_list|(
name|getString
argument_list|(
name|config
argument_list|,
literal|"expiryTimeout"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|idleTimeout
init|=
operator|new
name|Integer
argument_list|(
name|getString
argument_list|(
name|config
argument_list|,
literal|"idleTimeout"
argument_list|,
literal|"30000"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxConnections
init|=
operator|new
name|Integer
argument_list|(
name|getString
argument_list|(
name|config
argument_list|,
literal|"maxConnections"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
name|cf
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
name|PooledConnectionFactory
name|pcf
init|=
operator|new
name|PooledConnectionFactory
argument_list|()
decl_stmt|;
name|pcf
operator|.
name|setConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|pcf
operator|.
name|setExpiryTimeout
argument_list|(
name|expiryTimeout
argument_list|)
expr_stmt|;
name|pcf
operator|.
name|setIdleTimeout
argument_list|(
name|idleTimeout
argument_list|)
expr_stmt|;
name|pcf
operator|.
name|setMaxConnections
argument_list|(
name|maxConnections
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|OSGI_JNDI_SERVICE_NAME
argument_list|,
name|jndiName
argument_list|)
expr_stmt|;
name|reg
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|ConnectionFactory
operator|.
name|class
argument_list|,
name|pcf
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|Object
name|value
init|=
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
name|defaultValue
return|;
block|}
block|}
end_class

end_unit

