begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionMetaData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
class|class
name|ActiveMQDestinationSourceFactory
implements|implements
name|DestinationSource
operator|.
name|Factory
block|{
annotation|@
name|Override
specifier|public
name|DestinationSource
name|create
parameter_list|(
name|JMSContext
name|context
parameter_list|)
block|{
try|try
block|{
name|ConnectionMetaData
name|cmd
init|=
name|context
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|getJMSProviderName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ActiveMQ"
argument_list|)
operator|&&
name|cmd
operator|.
name|getProviderVersion
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"5."
argument_list|)
condition|)
block|{
return|return
name|type
lambda|->
name|getNames
argument_list|(
name|context
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|(
name|JMSContext
name|context
parameter_list|,
name|DestinationSource
operator|.
name|DestinationType
name|type
parameter_list|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|context
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|dest
init|=
literal|"ActiveMQ.Advisory."
operator|+
operator|(
name|type
operator|==
name|DestinationSource
operator|.
name|DestinationType
operator|.
name|Queue
condition|?
literal|"Queue"
else|:
literal|"Topic"
operator|)
decl_stmt|;
try|try
init|(
name|JMSConsumer
name|consumer
init|=
name|context
operator|.
name|createConsumer
argument_list|(
name|context
operator|.
name|createTopic
argument_list|(
name|dest
argument_list|)
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
name|names
return|;
block|}
name|Destination
name|destination
init|=
operator|(
name|Destination
operator|)
name|getField
argument_list|(
name|message
argument_list|,
literal|"super.dataStructure"
argument_list|,
literal|"destination"
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
operator|(
operator|(
name|Topic
operator|)
name|destination
operator|)
operator|.
name|getTopicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
name|String
name|msg
init|=
name|e
operator|.
name|toString
argument_list|()
decl_stmt|;
block|}
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Object
name|getField
parameter_list|(
name|Object
name|context
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|Object
name|obj
init|=
name|context
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|Class
name|cl
init|=
name|obj
operator|.
name|getClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|field
operator|.
name|startsWith
argument_list|(
literal|"super."
argument_list|)
condition|)
block|{
name|cl
operator|=
name|cl
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
name|field
operator|=
name|field
operator|.
name|substring
argument_list|(
literal|"super."
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Field
name|f
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|obj
operator|=
name|f
operator|.
name|get
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|obj
return|;
block|}
block|}
end_class

end_unit

