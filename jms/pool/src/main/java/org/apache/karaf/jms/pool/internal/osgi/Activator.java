begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|pool
operator|.
name|internal
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jms
operator|.
name|pool
operator|.
name|internal
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_class
specifier|public
class|class
name|Activator
implements|implements
name|BundleActivator
implements|,
name|ServiceTrackerCustomizer
argument_list|<
name|ConnectionFactory
argument_list|,
name|Activator
operator|.
name|ConnectionFactoryData
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROP_PREFIX
init|=
literal|"karaf.jms."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_OPT_IN
init|=
name|PROP_PREFIX
operator|+
literal|"wrap"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_POOL
init|=
name|PROP_PREFIX
operator|+
literal|"pool."
decl_stmt|;
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|ServiceTracker
argument_list|<
name|ConnectionFactory
argument_list|,
name|ConnectionFactoryData
argument_list|>
name|cfTracker
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|cfTracker
operator|=
operator|new
name|ServiceTracker
argument_list|<>
argument_list|(
name|context
argument_list|,
name|context
operator|.
name|createFilter
argument_list|(
literal|"(&(objectClass=javax.jms.ConnectionFactory)("
operator|+
name|PROP_OPT_IN
operator|+
literal|"=*))"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|cfTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|cfTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionFactoryData
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|ConnectionFactory
argument_list|>
name|reference
parameter_list|)
block|{
name|ConnectionFactoryData
name|data
init|=
operator|new
name|ConnectionFactoryData
argument_list|(
name|context
argument_list|,
name|reference
argument_list|)
decl_stmt|;
try|try
block|{
name|data
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error creating pooled JMS ConnectionFactory"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|data
operator|.
name|destroy
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
argument_list|<
name|ConnectionFactory
argument_list|>
name|reference
parameter_list|,
name|ConnectionFactoryData
name|service
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|ConnectionFactory
argument_list|>
name|reference
parameter_list|,
name|ConnectionFactoryData
name|service
parameter_list|)
block|{
name|service
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
class|class
name|ConnectionFactoryData
block|{
specifier|private
specifier|final
name|BundleContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|ServiceReference
argument_list|<
name|ConnectionFactory
argument_list|>
name|reference
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|PooledConnectionFactory
name|pooledConnectionFactory
decl_stmt|;
specifier|private
name|ServiceRegistration
argument_list|<
name|ConnectionFactory
argument_list|>
name|registration
decl_stmt|;
name|ConnectionFactoryData
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|ServiceReference
argument_list|<
name|ConnectionFactory
argument_list|>
name|reference
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
block|}
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|connectionFactory
operator|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|PooledConnectionFactory
name|pcf
init|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
name|populate
argument_list|(
name|pcf
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|pcf
argument_list|)
expr_stmt|;
block|}
name|void
name|destroy
parameter_list|()
block|{
name|unregister
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectionFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
finally|finally
block|{
name|connectionFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
name|void
name|populate
parameter_list|(
name|PooledConnectionFactory
name|pcf
parameter_list|)
block|{
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"maxConnections"
argument_list|,
name|Integer
operator|::
name|parseInt
argument_list|,
name|pcf
operator|::
name|setMaxConnections
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"maximumActiveSessionPerConnection"
argument_list|,
name|Integer
operator|::
name|parseInt
argument_list|,
name|pcf
operator|::
name|setMaximumActiveSessionPerConnection
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"idleTimeout"
argument_list|,
name|Integer
operator|::
name|parseInt
argument_list|,
name|pcf
operator|::
name|setIdleTimeout
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"blockIfSessionPoolIsFull"
argument_list|,
name|Boolean
operator|::
name|parseBoolean
argument_list|,
name|pcf
operator|::
name|setBlockIfSessionPoolIsFull
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"blockIfSessionPoolIsFullTimeout"
argument_list|,
name|Long
operator|::
name|parseLong
argument_list|,
name|pcf
operator|::
name|setBlockIfSessionPoolIsFullTimeout
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"expiryTimeout"
argument_list|,
name|Long
operator|::
name|parseLong
argument_list|,
name|pcf
operator|::
name|setExpiryTimeout
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"createConnectionOnStartup"
argument_list|,
name|Boolean
operator|::
name|parseBoolean
argument_list|,
name|pcf
operator|::
name|setCreateConnectionOnStartup
argument_list|)
expr_stmt|;
name|setObject
argument_list|(
name|PROP_POOL
operator|+
literal|"useAnonymousProducers"
argument_list|,
name|Boolean
operator|::
name|parseBoolean
argument_list|,
name|pcf
operator|::
name|setUseAnonymousProducers
argument_list|)
expr_stmt|;
block|}
parameter_list|<
name|T
parameter_list|>
name|void
name|setObject
parameter_list|(
name|String
name|name
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|parser
parameter_list|,
name|Consumer
argument_list|<
name|T
argument_list|>
name|setter
parameter_list|)
block|{
name|Object
name|o
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|setter
operator|.
name|accept
argument_list|(
name|parser
operator|.
name|apply
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|register
parameter_list|(
name|PooledConnectionFactory
name|pcf
parameter_list|)
block|{
name|this
operator|.
name|pooledConnectionFactory
operator|=
name|pcf
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|ranking
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|reference
operator|.
name|getPropertyKeys
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|SERVICE_RANKING
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|ranking
operator|=
operator|(
name|Integer
operator|)
name|value
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
literal|"service."
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|PROP_PREFIX
argument_list|)
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
name|ranking
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pcf
operator|.
name|start
argument_list|()
expr_stmt|;
name|BundleContext
name|context
init|=
name|reference
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|registration
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|ConnectionFactory
operator|.
name|class
argument_list|,
name|pooledConnectionFactory
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
name|void
name|unregister
parameter_list|()
block|{
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
finally|finally
block|{
name|registration
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pooledConnectionFactory
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|pooledConnectionFactory
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
finally|finally
block|{
name|pooledConnectionFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

