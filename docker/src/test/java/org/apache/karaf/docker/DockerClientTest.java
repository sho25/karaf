begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * DockerClient factory test.  */
end_comment

begin_class
specifier|public
class|class
name|DockerClientTest
block|{
specifier|private
name|DockerClient
name|dockerClient
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|dockerClient
operator|=
operator|new
name|DockerClient
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testDockerInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Info
name|info
init|=
name|dockerClient
operator|.
name|info
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Info:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tDriver: "
operator|+
name|info
operator|.
name|getDriver
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tDriver Status: "
operator|+
name|info
operator|.
name|getDriverStatus
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tExecution Driver: "
operator|+
name|info
operator|.
name|getExecutionDriver
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tIndex Server Address: "
operator|+
name|info
operator|.
name|getIndexServerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tInit Path: "
operator|+
name|info
operator|.
name|getInitPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tInit SHA1: "
operator|+
name|info
operator|.
name|getInitSha1
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tKernel Version: "
operator|+
name|info
operator|.
name|getKernelVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tContainers: "
operator|+
name|info
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tImages: "
operator|+
name|info
operator|.
name|getImages
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tNFD: "
operator|+
name|info
operator|.
name|getNfd
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tNGoRoutines: "
operator|+
name|info
operator|.
name|getNgoroutines
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tMemory Limit enabled: "
operator|+
name|info
operator|.
name|isMemoryLimit
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tSwap Limit enabled: "
operator|+
name|info
operator|.
name|isSwapLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testDockerVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Version
name|version
init|=
name|dockerClient
operator|.
name|version
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Version:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tAPI version: "
operator|+
name|version
operator|.
name|getApiVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tArch: "
operator|+
name|version
operator|.
name|getArch
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tBuild Time: "
operator|+
name|version
operator|.
name|getBuildTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tExperimental: "
operator|+
name|version
operator|.
name|getExperimental
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tGit Commit: "
operator|+
name|version
operator|.
name|getGitCommit
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tGo Version: "
operator|+
name|version
operator|.
name|getGoVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tKernel Version: "
operator|+
name|version
operator|.
name|getKernelVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tOS: "
operator|+
name|version
operator|.
name|getOs
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\tVersion: "
operator|+
name|version
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testListImages
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Image
name|image
range|:
name|dockerClient
operator|.
name|images
argument_list|(
literal|true
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image ID: "
operator|+
name|image
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created: "
operator|+
name|image
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Size: "
operator|+
name|image
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Virtual size: "
operator|+
name|image
operator|.
name|getVirtualSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RepoTags: "
operator|+
name|image
operator|.
name|getRepoTags
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Labels: "
operator|+
name|image
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Containers: "
operator|+
name|image
operator|.
name|getContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testHistoryImage
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ImageHistory
name|history
range|:
name|dockerClient
operator|.
name|history
argument_list|(
literal|"sha256:f3ea90d50ffd7851cb984764409326b82593c612fe6e6dc7933d9568f735084b"
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ID: "
operator|+
name|history
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created: "
operator|+
name|history
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created by: "
operator|+
name|history
operator|.
name|getCreatedBy
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Comment: "
operator|+
name|history
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Size: "
operator|+
name|history
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tags: "
operator|+
name|history
operator|.
name|getTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testSearchImages
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ImageSearch
argument_list|>
name|images
init|=
name|dockerClient
operator|.
name|search
argument_list|(
literal|"karaf"
argument_list|)
decl_stmt|;
for|for
control|(
name|ImageSearch
name|image
range|:
name|images
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image Name: "
operator|+
name|image
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image Star Count: "
operator|+
name|image
operator|.
name|getStarCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image Automated: "
operator|+
name|image
operator|.
name|isAutomated
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image Official: "
operator|+
name|image
operator|.
name|isOfficial
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image Description: "
operator|+
name|image
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testPullImage
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|pull
argument_list|(
literal|"mkroli/karaf"
argument_list|,
literal|"latest"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testRemoveImage
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|rmi
argument_list|(
literal|"sha256:f3ea90d50ffd7851cb984764409326b82593c612fe6e6dc7933d9568f735084b"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testContainers
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Container
name|container
range|:
name|dockerClient
operator|.
name|ps
argument_list|(
literal|true
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"----"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Command: "
operator|+
name|container
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created: "
operator|+
name|container
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image: "
operator|+
name|container
operator|.
name|getImage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Image ID: "
operator|+
name|container
operator|.
name|getImageId
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Names: "
operator|+
name|container
operator|.
name|getNames
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Port
name|port
range|:
name|container
operator|.
name|getPorts
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Port: "
operator|+
name|port
operator|.
name|getPublicPort
argument_list|()
operator|+
literal|":"
operator|+
name|port
operator|.
name|getPrivatePort
argument_list|()
operator|+
literal|" ("
operator|+
name|port
operator|.
name|getType
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status: "
operator|+
name|container
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"State: "
operator|+
name|container
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Size: "
operator|+
name|container
operator|.
name|getSizeRw
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Size Root: "
operator|+
name|container
operator|.
name|getSizeRootFs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testCreateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerConfig
name|config
init|=
operator|new
name|ContainerConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setImage
argument_list|(
literal|"java:8-jre-alpine"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAttachStderr
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAttachStdin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAttachStdout
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setTty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dockerClient
operator|.
name|create
argument_list|(
name|config
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testCreateKarafContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerConfig
name|config
init|=
operator|new
name|ContainerConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setTty
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAttachStdout
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAttachStderr
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAttachStdin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setImage
argument_list|(
literal|"karaf:latest"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setHostname
argument_list|(
literal|"docker"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUser
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCmd
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"/bin/karaf"
block|}
argument_list|)
expr_stmt|;
name|config
operator|.
name|setWorkingDir
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|config
operator|.
name|setOpenStdin
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|setStdinOnce
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|exposedPorts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|exposedPort
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|exposedPorts
operator|.
name|put
argument_list|(
literal|"8101/tcp"
argument_list|,
name|exposedPort
argument_list|)
expr_stmt|;
name|config
operator|.
name|setExposedPorts
argument_list|(
name|exposedPorts
argument_list|)
expr_stmt|;
name|HostConfig
name|hostConfig
init|=
operator|new
name|HostConfig
argument_list|()
decl_stmt|;
name|hostConfig
operator|.
name|setPrivileged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hostConfig
operator|.
name|setPublishAllPorts
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// getting the dock
name|File
name|dock
init|=
operator|new
name|File
argument_list|(
literal|"/tmp/docker"
argument_list|,
literal|"karaf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dock
operator|.
name|exists
argument_list|()
condition|)
block|{
name|hostConfig
operator|.
name|setBinds
argument_list|(
operator|new
name|String
index|[]
block|{
name|dock
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|":/opt/apache-karaf"
block|}
argument_list|)
expr_stmt|;
block|}
name|hostConfig
operator|.
name|setNetworkMode
argument_list|(
literal|"bridge"
argument_list|)
expr_stmt|;
name|hostConfig
operator|.
name|setLxcConf
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|HostPortBinding
argument_list|>
argument_list|>
name|portBindings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HostPortBinding
argument_list|>
name|hostPortBindings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|HostPortBinding
name|hostPortBinding
init|=
operator|new
name|HostPortBinding
argument_list|()
decl_stmt|;
name|hostPortBinding
operator|.
name|setHostIp
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|hostPortBinding
operator|.
name|setHostPort
argument_list|(
literal|"8101"
argument_list|)
expr_stmt|;
name|hostPortBindings
operator|.
name|add
argument_list|(
name|hostPortBinding
argument_list|)
expr_stmt|;
name|portBindings
operator|.
name|put
argument_list|(
literal|"8101/tcp"
argument_list|,
name|hostPortBindings
argument_list|)
expr_stmt|;
name|hostConfig
operator|.
name|setPortBindings
argument_list|(
name|portBindings
argument_list|)
expr_stmt|;
name|config
operator|.
name|setHostConfig
argument_list|(
name|hostConfig
argument_list|)
expr_stmt|;
name|dockerClient
operator|.
name|create
argument_list|(
name|config
argument_list|,
literal|"karaf"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testStartContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|start
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testStopContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|stop
argument_list|(
literal|"test"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testRestartContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|restart
argument_list|(
literal|"test"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testKillContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|kill
argument_list|(
literal|"test"
argument_list|,
literal|"SIGKILL"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testRemoveContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|rm
argument_list|(
literal|"test"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testRenameContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|rename
argument_list|(
literal|"test"
argument_list|,
literal|"karaf-test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testPauseContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|pause
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testUnpauseContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|dockerClient
operator|.
name|unpause
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testContainerLog
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dockerClient
operator|.
name|logs
argument_list|(
literal|"test"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Need a running Docker daemon"
argument_list|)
specifier|public
name|void
name|testContainerTop
parameter_list|()
throws|throws
name|Exception
block|{
name|Top
name|top
init|=
name|dockerClient
operator|.
name|top
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|title
range|:
name|top
operator|.
name|getTitles
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|process
range|:
name|top
operator|.
name|getProcesses
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|p
range|:
name|process
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

