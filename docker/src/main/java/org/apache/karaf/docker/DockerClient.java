begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|docker
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|type
operator|.
name|TypeReference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Service to manipulate docker via REST API.  */
end_comment

begin_class
specifier|public
class|class
name|DockerClient
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DockerClient
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_URL
init|=
literal|"http://localhost:2375"
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
specifier|private
name|ObjectMapper
name|mapper
decl_stmt|;
specifier|public
name|DockerClient
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|url
operator|=
name|DEFAULT_URL
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
name|mapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Info
name|info
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/info"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|Info
name|info
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Info
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
specifier|public
name|Version
name|version
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/version"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|Version
name|version
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Version
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|ps
parameter_list|(
name|boolean
name|showAll
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/json?all="
operator|+
name|showAll
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|Container
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|containers
control|)
block|{
name|cleanName
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
return|return
name|containers
return|;
block|}
specifier|private
name|void
name|cleanName
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|cleanNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|container
operator|.
name|getNames
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|cleanNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|container
operator|.
name|setNames
argument_list|(
name|cleanNames
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Container
name|inspect
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/json?size=1"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
specifier|public
name|Top
name|top
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/top?ps_args=aux"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|Top
name|top
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Top
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|top
return|;
block|}
specifier|public
name|void
name|create
parameter_list|(
name|ContainerConfig
name|config
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/create?name="
operator|+
name|name
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setRequestProperty
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|connection
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|201
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't create Docker container "
operator|+
name|name
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|rm
parameter_list|(
name|String
name|id
parameter_list|,
name|boolean
name|removeVolumes
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"?v="
operator|+
name|removeVolumes
operator|+
literal|"&force="
operator|+
name|force
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"DELETE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't remove Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/start"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't start Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|timeToWait
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/stop?t="
operator|+
name|timeToWait
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't stop Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|restart
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|timeToWait
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/restart?t="
operator|+
name|timeToWait
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't restart Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|kill
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|signal
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/kill?signal="
operator|+
name|signal
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't kill Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|rename
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/rename?name="
operator|+
name|name
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't rename Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|pause
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/pause"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't pause Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|unpause
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/unpause"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|204
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't unpause Docker container "
operator|+
name|id
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|logs
parameter_list|(
name|String
name|id
parameter_list|,
name|boolean
name|stdout
parameter_list|,
name|boolean
name|stderr
parameter_list|,
name|boolean
name|timestamps
parameter_list|,
name|boolean
name|details
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/containers/"
operator|+
name|id
operator|+
literal|"/logs?stdout="
operator|+
name|stdout
operator|+
literal|"&stderr="
operator|+
name|stderr
operator|+
literal|"&timestamps="
operator|+
name|timestamps
operator|+
literal|"&details="
operator|+
name|details
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|String
name|container
parameter_list|,
name|ContainerConfig
name|config
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|repo
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/commit?container="
operator|+
name|container
operator|+
literal|"&comment="
operator|+
name|message
operator|+
literal|"&repo="
operator|+
name|repo
operator|+
literal|"&tag="
operator|+
name|tag
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|writeValue
argument_list|(
name|connection
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|201
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't commit Docker container "
operator|+
name|container
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|Image
argument_list|>
name|images
parameter_list|(
name|boolean
name|showAll
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/json?all="
operator|+
name|showAll
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Image
argument_list|>
name|images
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|Image
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
return|return
name|images
return|;
block|}
specifier|public
name|void
name|pull
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|tag
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/create?fromImage="
operator|+
name|name
operator|+
literal|"&tag="
operator|+
name|tag
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't pull image "
operator|+
name|name
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|push
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|tag
parameter_list|,
name|boolean
name|verbose
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/"
operator|+
name|name
operator|+
literal|"/push?tag="
operator|+
name|tag
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't push image "
operator|+
name|name
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|tag
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|repo
parameter_list|,
name|String
name|tag
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/"
operator|+
name|name
operator|+
literal|"/tag?repo="
operator|+
name|repo
operator|+
literal|"&tag="
operator|+
name|tag
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"POST"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|201
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't tag image "
operator|+
name|name
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|rmi
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|noprune
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/"
operator|+
name|name
operator|+
literal|"?force="
operator|+
name|force
operator|+
literal|"&noprune="
operator|+
name|noprune
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"DELETE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|!=
literal|200
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't remove image "
operator|+
name|name
operator|+
literal|": "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ImageSearch
argument_list|>
name|search
parameter_list|(
name|String
name|term
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/search?term="
operator|+
name|term
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ImageSearch
argument_list|>
name|images
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|ImageSearch
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
return|return
name|images
return|;
block|}
specifier|public
name|Image
name|getImage
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/"
operator|+
name|name
operator|+
literal|"/json"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|Image
name|image
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|Image
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|image
return|;
block|}
specifier|public
name|List
argument_list|<
name|ImageHistory
argument_list|>
name|history
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|dockerUrl
init|=
operator|new
name|URL
argument_list|(
name|this
operator|.
name|url
operator|+
literal|"/images/"
operator|+
name|name
operator|+
literal|"/history"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|dockerUrl
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ImageHistory
argument_list|>
name|images
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
operator|new
name|TypeReference
argument_list|<
name|List
argument_list|<
name|ImageHistory
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
decl_stmt|;
return|return
name|images
return|;
block|}
block|}
end_class

end_unit

