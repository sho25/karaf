begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Console
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOError
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|SshAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|AgentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|LocalAgentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|ClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|ClientFactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|SshClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|auth
operator|.
name|keyboard
operator|.
name|UserInteraction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|channel
operator|.
name|ChannelExec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|channel
operator|.
name|ChannelShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|channel
operator|.
name|ClientChannelEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|channel
operator|.
name|PtyCapableChannelSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|future
operator|.
name|ConnectFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|session
operator|.
name|ClientSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|RuntimeSshException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|channel
operator|.
name|PtyMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|config
operator|.
name|keys
operator|.
name|FilePasswordProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|FileKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|io
operator|.
name|NoCloseInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|io
operator|.
name|NoCloseOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Attributes
operator|.
name|ControlChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Attributes
operator|.
name|InputFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Attributes
operator|.
name|LocalFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Attributes
operator|.
name|OutputFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|TerminalBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|impl
operator|.
name|SimpleLogger
import|;
end_import

begin_comment
comment|/**  * A very simple  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ClientConfig
name|config
init|=
operator|new
name|ClientConfig
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|SimpleLogger
operator|.
name|setLevel
argument_list|(
name|config
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
init|(
name|Reader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|config
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|c
init|=
name|reader
operator|.
name|read
argument_list|()
init|;
name|c
operator|>=
literal|0
condition|;
name|c
operator|=
name|reader
operator|.
name|read
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|setCommand
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|isBatch
argument_list|()
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
name|reader
operator|.
name|read
argument_list|()
init|;
name|c
operator|>=
literal|0
condition|;
name|c
operator|=
name|reader
operator|.
name|read
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setCommand
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|SshClient
name|client
init|=
name|ClientBuilder
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
init|)
block|{
name|FilePasswordProvider
name|passwordProvider
init|=
literal|null
decl_stmt|;
specifier|final
name|Console
name|console
init|=
name|System
operator|.
name|console
argument_list|()
decl_stmt|;
if|if
condition|(
name|console
operator|!=
literal|null
condition|)
block|{
name|passwordProvider
operator|=
name|resourceKey
lambda|->
block|{
name|char
index|[]
name|pwd
init|=
name|console
operator|.
name|readPassword
argument_list|(
literal|"Enter password for "
operator|+
name|resourceKey
operator|+
literal|": "
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|pwd
argument_list|)
return|;
block|}
expr_stmt|;
name|client
operator|.
name|setFilePasswordProvider
argument_list|(
name|passwordProvider
argument_list|)
expr_stmt|;
name|client
operator|.
name|setUserInteraction
argument_list|(
operator|new
name|UserInteraction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|welcome
parameter_list|(
name|ClientSession
name|s
parameter_list|,
name|String
name|banner
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|banner
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|interactive
parameter_list|(
name|ClientSession
name|s
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|instruction
parameter_list|,
name|String
name|lang
parameter_list|,
name|String
index|[]
name|prompt
parameter_list|,
name|boolean
index|[]
name|echo
parameter_list|)
block|{
name|String
index|[]
name|answers
init|=
operator|new
name|String
index|[
name|prompt
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prompt
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|echo
index|[
name|i
index|]
condition|)
block|{
name|answers
index|[
name|i
index|]
operator|=
name|console
operator|.
name|readLine
argument_list|(
name|prompt
index|[
name|i
index|]
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|answers
index|[
name|i
index|]
operator|=
operator|new
name|String
argument_list|(
name|console
operator|.
name|readPassword
argument_list|(
name|prompt
index|[
name|i
index|]
operator|+
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answers
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|answers
return|;
block|}
catch|catch
parameter_list|(
name|IOError
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInteractionAllowed
parameter_list|(
name|ClientSession
name|session
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serverVersionInfo
parameter_list|(
name|ClientSession
name|session
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|String
name|getUpdatedPassword
parameter_list|(
name|ClientSession
name|session
parameter_list|,
name|String
name|prompt
parameter_list|,
name|String
name|lang
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUser
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getUser
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|user
init|=
name|console
operator|.
name|readLine
argument_list|(
literal|"Enter user: "
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"User must not be empty!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|config
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|console
operator|!=
literal|null
condition|)
block|{
name|console
operator|.
name|printf
argument_list|(
literal|"Logging in as %s\n"
argument_list|,
name|config
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setupAgent
argument_list|(
name|config
operator|.
name|getUser
argument_list|()
argument_list|,
name|config
operator|.
name|getKeyFile
argument_list|()
argument_list|,
name|client
argument_list|,
name|passwordProvider
argument_list|)
expr_stmt|;
comment|// define hearbeat (for the keep alive) and timeouts
comment|// TODO this should be dealt by Apache SSH client directly using .ssh/config
name|client
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ClientFactoryManager
operator|.
name|HEARTBEAT_INTERVAL
argument_list|,
literal|"60000"
argument_list|)
expr_stmt|;
name|client
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ClientFactoryManager
operator|.
name|IDLE_TIMEOUT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|config
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ClientFactoryManager
operator|.
name|NIO2_READ_TIMEOUT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|config
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: remove the line below when SSHD-732 is fixed
name|client
operator|.
name|setKeyPairProvider
argument_list|(
operator|new
name|FileKeyPairProvider
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|ClientSession
name|session
init|=
name|connectWithRetries
argument_list|(
name|client
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|addPasswordIdentity
argument_list|(
name|config
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|auth
argument_list|()
operator|.
name|verify
argument_list|()
expr_stmt|;
name|int
name|exitStatus
init|=
literal|0
decl_stmt|;
name|String
name|type
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TerminalBuilder
operator|.
name|PROP_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|System
operator|.
name|getenv
argument_list|(
literal|"TERM"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|Terminal
operator|.
name|TYPE_DUMB
expr_stmt|;
block|}
try|try
init|(
name|Terminal
name|terminal
init|=
name|TerminalBuilder
operator|.
name|builder
argument_list|()
operator|.
name|nativeSignals
argument_list|(
literal|true
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
operator|.
name|signalHandler
argument_list|(
name|Terminal
operator|.
name|SignalHandler
operator|.
name|SIG_IGN
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
if|if
condition|(
name|config
operator|.
name|getCommand
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ChannelExec
name|channel
init|=
name|session
operator|.
name|createExecChannel
argument_list|(
name|config
operator|.
name|getCommand
argument_list|()
operator|+
literal|"\n"
argument_list|)
decl_stmt|;
name|channel
operator|.
name|setIn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|isBatch
argument_list|()
condition|)
block|{
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|int
name|a
init|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|==
operator|-
literal|1
condition|)
block|{
name|channel
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|channel
operator|.
name|setAgentForwarding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|NoCloseOutputStream
name|output
init|=
operator|new
name|NoCloseOutputStream
argument_list|(
name|terminal
operator|.
name|output
argument_list|()
argument_list|)
decl_stmt|;
name|channel
operator|.
name|setOut
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setErr
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|channel
operator|.
name|open
argument_list|()
operator|.
name|verify
argument_list|()
expr_stmt|;
name|channel
operator|.
name|waitFor
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ClientChannelEvent
operator|.
name|CLOSED
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|channel
operator|.
name|getExitStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exitStatus
operator|=
name|channel
operator|.
name|getExitStatus
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|ChannelShell
name|channel
init|=
name|session
operator|.
name|createShellChannel
argument_list|()
decl_stmt|;
name|Attributes
name|attributes
init|=
name|terminal
operator|.
name|enterRawMode
argument_list|()
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|PtyMode
argument_list|,
name|Integer
argument_list|>
name|modes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Control chars
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VINTR
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VINTR
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VQUIT
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VQUIT
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VERASE
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VERASE
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VKILL
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VKILL
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VEOF
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VEOF
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VEOL
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VEOL
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VEOL2
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VEOL2
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VSTART
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VSTART
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VSTOP
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VSTOP
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VSUSP
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VSUSP
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VDSUSP
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VDSUSP
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VREPRINT
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VREPRINT
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VWERASE
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VWERASE
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VLNEXT
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VLNEXT
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VSTATUS
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VSTATUS
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|VDISCARD
argument_list|,
name|attributes
operator|.
name|getControlChar
argument_list|(
name|ControlChar
operator|.
name|VDISCARD
argument_list|)
argument_list|)
expr_stmt|;
comment|// Input flags
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|IGNPAR
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|IGNPAR
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|PARMRK
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|PARMRK
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|INPCK
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|INPCK
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ISTRIP
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|ISTRIP
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|INLCR
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|INLCR
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|IGNCR
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|IGNCR
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ICRNL
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|ICRNL
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|IXON
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|IXON
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|IXANY
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|IXANY
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|IXOFF
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|InputFlag
operator|.
name|IXOFF
argument_list|)
argument_list|)
expr_stmt|;
comment|// Local flags
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ISIG
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|ISIG
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ICANON
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|ICANON
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ECHO
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|ECHO
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ECHOE
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|ECHOE
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ECHOK
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|ECHOK
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ECHONL
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|ECHONL
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|NOFLSH
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|NOFLSH
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|TOSTOP
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|TOSTOP
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|IEXTEN
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|LocalFlag
operator|.
name|IEXTEN
argument_list|)
argument_list|)
expr_stmt|;
comment|// Output flags
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|OPOST
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|OutputFlag
operator|.
name|OPOST
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ONLCR
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|OutputFlag
operator|.
name|ONLCR
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|OCRNL
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|OutputFlag
operator|.
name|OCRNL
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ONOCR
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|OutputFlag
operator|.
name|ONOCR
argument_list|)
argument_list|)
expr_stmt|;
name|modes
operator|.
name|put
argument_list|(
name|PtyMode
operator|.
name|ONLRET
argument_list|,
name|getFlag
argument_list|(
name|attributes
argument_list|,
name|OutputFlag
operator|.
name|ONLRET
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setPtyModes
argument_list|(
name|modes
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setPtyColumns
argument_list|(
name|terminal
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setPtyLines
argument_list|(
name|terminal
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setAgentForwarding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setEnv
argument_list|(
literal|"TERM"
argument_list|,
name|terminal
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ctype
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"LC_CTYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctype
operator|==
literal|null
condition|)
block|{
name|ctype
operator|=
name|Locale
operator|.
name|getDefault
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"."
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"input.encoding"
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|channel
operator|.
name|setEnv
argument_list|(
literal|"LC_CTYPE"
argument_list|,
name|ctype
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setIn
argument_list|(
operator|new
name|NoCloseInputStream
argument_list|(
name|terminal
operator|.
name|input
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setOut
argument_list|(
operator|new
name|NoCloseOutputStream
argument_list|(
name|terminal
operator|.
name|output
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setErr
argument_list|(
operator|new
name|NoCloseOutputStream
argument_list|(
name|terminal
operator|.
name|output
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|open
argument_list|()
operator|.
name|verify
argument_list|()
expr_stmt|;
name|Terminal
operator|.
name|SignalHandler
name|prevWinchHandler
init|=
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|WINCH
argument_list|,
name|signal
lambda|->
block|{
try|try
block|{
name|Size
name|size
init|=
name|terminal
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|channel
operator|.
name|sendWindowChange
argument_list|(
name|size
operator|.
name|getColumns
argument_list|()
argument_list|,
name|size
operator|.
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
argument_list|)
decl_stmt|;
name|Terminal
operator|.
name|SignalHandler
name|prevQuitHandler
init|=
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|QUIT
argument_list|,
name|signal
lambda|->
block|{
try|try
block|{
name|channel
operator|.
name|getInvertedIn
argument_list|()
operator|.
name|write
argument_list|(
name|attributes
operator|.
name|getControlChar
argument_list|(
name|Attributes
operator|.
name|ControlChar
operator|.
name|VQUIT
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|getInvertedIn
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
argument_list|)
decl_stmt|;
name|Terminal
operator|.
name|SignalHandler
name|prevIntHandler
init|=
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|INT
argument_list|,
name|signal
lambda|->
block|{
try|try
block|{
name|channel
operator|.
name|getInvertedIn
argument_list|()
operator|.
name|write
argument_list|(
name|attributes
operator|.
name|getControlChar
argument_list|(
name|Attributes
operator|.
name|ControlChar
operator|.
name|VINTR
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|getInvertedIn
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
argument_list|)
decl_stmt|;
name|Terminal
operator|.
name|SignalHandler
name|prevStopHandler
init|=
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|TSTP
argument_list|,
name|signal
lambda|->
block|{
try|try
block|{
name|channel
operator|.
name|getInvertedIn
argument_list|()
operator|.
name|write
argument_list|(
name|attributes
operator|.
name|getControlChar
argument_list|(
name|Attributes
operator|.
name|ControlChar
operator|.
name|VDSUSP
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|getInvertedIn
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|channel
operator|.
name|waitFor
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ClientChannelEvent
operator|.
name|CLOSED
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|WINCH
argument_list|,
name|prevWinchHandler
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|INT
argument_list|,
name|prevIntHandler
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|TSTP
argument_list|,
name|prevStopHandler
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|QUIT
argument_list|,
name|prevQuitHandler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|channel
operator|.
name|getExitStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exitStatus
operator|=
name|channel
operator|.
name|getExitStatus
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|terminal
operator|.
name|setAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|System
operator|.
name|exit
argument_list|(
name|exitStatus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|config
operator|.
name|getLevel
argument_list|()
operator|>
name|SimpleLogger
operator|.
name|WARN
condition|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|int
name|getFlag
parameter_list|(
name|Attributes
name|attributes
parameter_list|,
name|InputFlag
name|flag
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|getInputFlag
argument_list|(
name|flag
argument_list|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
specifier|private
specifier|static
name|int
name|getFlag
parameter_list|(
name|Attributes
name|attributes
parameter_list|,
name|OutputFlag
name|flag
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|getOutputFlag
argument_list|(
name|flag
argument_list|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
specifier|private
specifier|static
name|int
name|getFlag
parameter_list|(
name|Attributes
name|attributes
parameter_list|,
name|LocalFlag
name|flag
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|getLocalFlag
argument_list|(
name|flag
argument_list|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
specifier|private
specifier|static
name|void
name|setupAgent
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|keyFile
parameter_list|,
name|SshClient
name|client
parameter_list|,
name|FilePasswordProvider
name|passwordProvider
parameter_list|)
block|{
name|SshAgent
name|agent
decl_stmt|;
name|URL
name|builtInPrivateKey
init|=
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karaf.key"
argument_list|)
decl_stmt|;
name|agent
operator|=
name|startAgent
argument_list|(
name|user
argument_list|,
name|builtInPrivateKey
argument_list|,
name|keyFile
argument_list|,
name|passwordProvider
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAgentFactory
argument_list|(
operator|new
name|LocalAgentFactory
argument_list|(
name|agent
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ClientSession
name|connectWithRetries
parameter_list|(
name|SshClient
name|client
parameter_list|,
name|ClientConfig
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|ClientSession
name|session
init|=
literal|null
decl_stmt|;
name|int
name|retries
init|=
literal|0
decl_stmt|;
do|do
block|{
name|ConnectFuture
name|future
init|=
name|client
operator|.
name|connect
argument_list|(
name|config
operator|.
name|getUser
argument_list|()
argument_list|,
name|config
operator|.
name|getHost
argument_list|()
argument_list|,
name|config
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|future
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
name|session
operator|=
name|future
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeSshException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|++
operator|<
name|config
operator|.
name|getRetryAttempts
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|config
operator|.
name|getRetryDelay
argument_list|()
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"retrying (attempt "
operator|+
name|retries
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
do|while
condition|(
name|session
operator|==
literal|null
condition|)
do|;
return|return
name|session
return|;
block|}
specifier|private
specifier|static
name|SshAgent
name|startAgent
parameter_list|(
name|String
name|user
parameter_list|,
name|URL
name|privateKeyUrl
parameter_list|,
name|String
name|keyFile
parameter_list|,
name|FilePasswordProvider
name|passwordProvider
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SshAgent
name|agent
init|=
operator|new
name|AgentImpl
argument_list|()
decl_stmt|;
name|is
operator|=
name|privateKeyUrl
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|ObjectInputStream
name|r
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
operator|(
name|KeyPair
operator|)
name|r
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|agent
operator|.
name|addIdentity
argument_list|(
name|keyPair
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyFile
operator|!=
literal|null
condition|)
block|{
name|FileKeyPairProvider
name|fileKeyPairProvider
init|=
operator|new
name|FileKeyPairProvider
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|keyFile
argument_list|)
argument_list|)
decl_stmt|;
name|fileKeyPairProvider
operator|.
name|setPasswordFinder
argument_list|(
name|passwordProvider
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyPair
name|key
range|:
name|fileKeyPairProvider
operator|.
name|loadKeys
argument_list|()
control|)
block|{
name|agent
operator|.
name|addIdentity
argument_list|(
name|key
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|agent
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error starting ssh agent for: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|Closeable
name|is
parameter_list|)
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|registerSignalHandler
parameter_list|(
specifier|final
name|Terminal
name|terminal
parameter_list|,
specifier|final
name|PtyCapableChannelSession
name|channel
parameter_list|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|signalClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Signal"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|signalHandlerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.SignalHandler"
argument_list|)
decl_stmt|;
comment|// Implement signal handler
name|Object
name|signalHandler
init|=
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|signalHandlerClass
block|}
operator|,
parameter_list|(
name|proxy
parameter_list|,
name|method
parameter_list|,
name|args
parameter_list|)
lambda|->
block|{
name|Size
name|size
init|=
name|terminal
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|channel
operator|.
name|sendWindowChange
argument_list|(
name|size
operator|.
name|getColumns
argument_list|()
argument_list|,
name|size
operator|.
name|getRows
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|)
empty_stmt|;
comment|// Register the signal handler, this code is equivalent to:
comment|// Signal.handle(new Signal("CONT"), signalHandler);
name|signalClass
operator|.
name|getMethod
argument_list|(
literal|"handle"
argument_list|,
name|signalClass
argument_list|,
name|signalHandlerClass
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|signalClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
literal|"WINCH"
argument_list|)
argument_list|,
name|signalHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore this exception, if the above failed, the signal API is incompatible with what we're expecting
block|}
block|}
end_class

begin_function
specifier|private
specifier|static
name|void
name|unregisterSignalHandler
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|signalClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Signal"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|signalHandlerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.SignalHandler"
argument_list|)
decl_stmt|;
name|Object
name|signalHandler
init|=
name|signalHandlerClass
operator|.
name|getField
argument_list|(
literal|"SIG_DFL"
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Register the signal handler, this code is equivalent to:
comment|// Signal.handle(new Signal("CONT"), signalHandler);
name|signalClass
operator|.
name|getMethod
argument_list|(
literal|"handle"
argument_list|,
name|signalClass
argument_list|,
name|signalHandlerClass
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|signalClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
literal|"WINCH"
argument_list|)
argument_list|,
name|signalHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore this exception, if the above failed, the signal API is incompatible with what we're expecting
block|}
block|}
end_function

unit|}
end_unit

