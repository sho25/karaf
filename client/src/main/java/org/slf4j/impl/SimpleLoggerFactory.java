begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|slf4j
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|ILoggerFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link ILoggerFactory} which always returns  * {@link SimpleLogger} instances.  *   * @author Ceki G&uuml;lc&uuml;  */
end_comment

begin_class
specifier|public
class|class
name|SimpleLoggerFactory
implements|implements
name|ILoggerFactory
block|{
specifier|final
specifier|static
name|SimpleLoggerFactory
name|INSTANCE
init|=
operator|new
name|SimpleLoggerFactory
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Logger
argument_list|>
name|loggerMap
decl_stmt|;
specifier|public
name|SimpleLoggerFactory
parameter_list|()
block|{
name|loggerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Logger
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Return an appropriate {@link SimpleLogger} instance by name.    */
specifier|public
name|Logger
name|getLogger
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Logger
name|slogger
init|=
literal|null
decl_stmt|;
comment|// protect against concurrent access of the loggerMap
synchronized|synchronized
init|(
name|this
init|)
block|{
name|slogger
operator|=
operator|(
name|Logger
operator|)
name|loggerMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|slogger
operator|==
literal|null
condition|)
block|{
name|slogger
operator|=
operator|new
name|SimpleLogger
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|loggerMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|slogger
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|slogger
return|;
block|}
block|}
end_class

end_unit

