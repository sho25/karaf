begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|system
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Command that allow access to system properties easily.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"system"
argument_list|,
name|name
operator|=
literal|"property"
argument_list|,
name|description
operator|=
literal|"Get or set a system property."
argument_list|)
specifier|public
class|class
name|SystemProperty
extends|extends
name|AbstractSystemAction
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-p"
argument_list|,
name|aliases
operator|=
block|{
literal|"--persistent"
block|}
argument_list|,
name|description
operator|=
literal|"Persist the new value to the etc/system.properties file"
argument_list|)
name|boolean
name|persistent
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-f"
argument_list|,
name|aliases
operator|=
block|{
literal|"--file-dump"
block|}
argument_list|,
name|description
operator|=
literal|"Dump all system properties in a file"
argument_list|)
name|boolean
name|dumpToFile
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-u"
argument_list|,
name|aliases
operator|=
block|{
literal|"--unset"
block|}
argument_list|,
name|description
operator|=
literal|"Show unset know properties with value unset"
argument_list|)
name|boolean
name|unset
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"key"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"The system property name"
argument_list|)
name|String
name|key
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|name
operator|=
literal|"value"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"New value for the system property"
argument_list|)
name|String
name|value
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|key
operator|==
literal|null
operator|&&
name|value
operator|==
literal|null
condition|)
block|{
name|Properties
name|props
init|=
operator|(
name|Properties
operator|)
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|clone
argument_list|()
decl_stmt|;
name|String
name|def
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|unset
condition|)
block|{
name|def
operator|=
literal|"unset"
expr_stmt|;
block|}
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BEGINNING_STARTLEVEL
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BUNDLE_PARENT
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BUNDLE_PARENT_APP
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BUNDLE_PARENT_BOOT
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BUNDLE_PARENT_EXT
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BUNDLE_PARENT_FRAMEWORK
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_EXECPERMISSION
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_EXECUTIONENVIRONMENT
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_LANGUAGE
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_LIBRARY_EXTENSIONS
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_OS_NAME
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_OS_VERSION
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_PROCESSOR
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SECURITY
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SECURITY_OSGI
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_STORAGE
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_VENDOR
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_VERSION
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_WINDOWSYSTEM
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|SUPPORTS_BOOTCLASSPATH_EXTENSION
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|SUPPORTS_FRAMEWORK_EXTENSION
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|SUPPORTS_FRAMEWORK_FRAGMENT
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|props
argument_list|,
name|Constants
operator|.
name|SUPPORTS_FRAMEWORK_REQUIREBUNDLE
argument_list|,
name|def
argument_list|)
expr_stmt|;
if|if
condition|(
name|dumpToFile
condition|)
block|{
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|File
argument_list|(
name|bundleContext
operator|.
name|getProperty
argument_list|(
literal|"karaf.data"
argument_list|)
argument_list|,
literal|"dump-properties-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|".properties"
argument_list|)
argument_list|)
decl_stmt|;
name|ps
operator|.
name|println
argument_list|(
literal|"#Dump of the System and OSGi properties with the command dev:dump-properties"
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
literal|"#Dump execute at "
operator|+
operator|new
name|SimpleDateFormat
argument_list|()
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printOrderedProperties
argument_list|(
name|props
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|ps
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dumping OSGi and System properties"
argument_list|)
expr_stmt|;
name|printOrderedProperties
argument_list|(
name|props
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|systemService
operator|.
name|setSystemProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|printOrderedProperties
parameter_list|(
name|Properties
name|props
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|Set
argument_list|<
name|Object
argument_list|>
name|keys
init|=
name|props
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|order
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|str
init|=
operator|(
name|Object
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|order
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|str
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|order
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|order
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|"="
operator|+
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setProperty
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|String
name|val
init|=
name|bundleContext
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
operator|&&
name|def
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

