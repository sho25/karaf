begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|system
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|system
operator|.
name|SystemService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_comment
comment|/**  * Implementation of the system service.  */
end_comment

begin_class
specifier|public
class|class
name|SystemServiceImpl
implements|implements
name|SystemService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SystemServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|BundleContext
name|getBundleContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|bundleContext
return|;
block|}
specifier|public
name|void
name|halt
parameter_list|()
throws|throws
name|Exception
block|{
name|halt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|halt
parameter_list|(
name|String
name|time
parameter_list|)
throws|throws
name|Exception
block|{
name|shutdown
argument_list|(
name|timeToSleep
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reboot
parameter_list|()
throws|throws
name|Exception
block|{
name|reboot
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reboot
parameter_list|(
name|String
name|time
parameter_list|,
name|boolean
name|cleanup
parameter_list|)
throws|throws
name|Exception
block|{
name|reboot
argument_list|(
name|timeToSleep
argument_list|(
name|time
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|shutdown
parameter_list|(
specifier|final
name|long
name|sleep
parameter_list|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|sleep
operator|>
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Shutdown in "
operator|+
name|sleep
operator|/
literal|1000
operator|/
literal|60
operator|+
literal|" minute(s)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Shutdown in "
operator|+
name|sleep
operator|/
literal|1000
operator|/
literal|60
operator|+
literal|" minutes(s)"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Halt error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|reboot
parameter_list|(
specifier|final
name|long
name|sleep
parameter_list|,
specifier|final
name|boolean
name|clean
parameter_list|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|sleep
operator|>
literal|0
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Reboot in "
operator|+
name|sleep
operator|/
literal|1000
operator|/
literal|60
operator|+
literal|" minute(s)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Reboot in "
operator|+
name|sleep
operator|/
literal|1000
operator|/
literal|60
operator|+
literal|" minute(s)"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart.clean"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|clean
argument_list|)
argument_list|)
expr_stmt|;
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Reboot error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setStartLevel
parameter_list|(
name|int
name|startLevel
parameter_list|)
throws|throws
name|Exception
block|{
comment|// get start level service
name|ServiceReference
name|ref
init|=
name|bundleContext
operator|.
name|getServiceReference
argument_list|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StartLevel service is unavailable"
argument_list|)
throw|;
block|}
try|try
block|{
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
name|startLevelService
init|=
operator|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLevelService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StartLevel service is unavailable"
argument_list|)
throw|;
block|}
name|startLevelService
operator|.
name|setStartLevel
argument_list|(
name|startLevel
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getStartLevel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get start level service
name|ServiceReference
name|ref
init|=
name|bundleContext
operator|.
name|getServiceReference
argument_list|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StartLevel service is unavailable"
argument_list|)
throw|;
block|}
try|try
block|{
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
name|startLevelService
init|=
operator|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|startLevelService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StartLevel service is unavailable"
argument_list|)
throw|;
block|}
return|return
name|startLevelService
operator|.
name|getStartLevel
argument_list|()
return|;
block|}
finally|finally
block|{
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Convert a time string to sleep period (in millisecond).      *      * @param time the time string.      * @return the corresponding sleep period in millisecond.      */
specifier|private
name|long
name|timeToSleep
parameter_list|(
name|String
name|time
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|sleep
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|time
operator|.
name|equals
argument_list|(
literal|"now"
argument_list|)
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
comment|// delay in number of minutes provided
name|time
operator|=
name|time
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|sleep
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|time
argument_list|)
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Time "
operator|+
name|time
operator|+
literal|" is not valid"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// try to parse the date in hh:mm
name|String
index|[]
name|strings
init|=
name|time
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|strings
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Time "
operator|+
name|time
operator|+
literal|" is not valid"
argument_list|)
throw|;
block|}
name|GregorianCalendar
name|currentDate
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|GregorianCalendar
name|shutdownDate
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|currentDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|currentDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|currentDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|strings
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|strings
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|shutdownDate
operator|.
name|before
argument_list|(
name|currentDate
argument_list|)
condition|)
block|{
name|shutdownDate
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
name|shutdownDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|sleep
operator|=
name|shutdownDate
operator|.
name|getTimeInMillis
argument_list|()
operator|-
name|currentDate
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|sleep
return|;
block|}
block|}
end_class

end_unit

