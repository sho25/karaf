begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|system
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_comment
comment|/**  * Implementation of the system service.  */
end_comment

begin_class
specifier|public
class|class
name|SystemServiceImplTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NEW_NAME
init|=
literal|"newName"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSetName
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|SystemServiceImpl
name|system
init|=
operator|new
name|SystemServiceImpl
argument_list|()
decl_stmt|;
name|BundleContext
name|bundleContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|propUrl
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"etc/system.properties"
argument_list|)
decl_stmt|;
name|File
name|propfile
init|=
operator|new
name|File
argument_list|(
name|propUrl
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bundleContext
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|propfile
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParent
argument_list|()
operator|+
literal|"/etc"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|system
operator|.
name|setBundleContext
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|system
operator|.
name|setName
argument_list|(
name|NEW_NAME
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|(
name|propfile
argument_list|)
decl_stmt|;
name|String
name|nameAfter
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NEW_NAME
argument_list|,
name|nameAfter
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

