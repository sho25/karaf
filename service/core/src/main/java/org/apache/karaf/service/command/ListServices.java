begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Completion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ShellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"service"
argument_list|,
name|name
operator|=
literal|"list"
argument_list|,
name|description
operator|=
literal|"Lists OSGi services."
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ListServices
implements|implements
name|Action
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"objectClass"
argument_list|,
name|description
operator|=
literal|"Name of service objectClass to filter for"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
annotation|@
name|Completion
argument_list|(
name|ObjectClassCompleter
operator|.
name|class
argument_list|)
name|String
name|objectClass
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-a"
argument_list|,
name|aliases
operator|=
block|{}
argument_list|,
name|description
operator|=
literal|"Shows all services. (By default Karaf commands are hidden)"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|showAll
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-n"
argument_list|,
name|aliases
operator|=
block|{}
argument_list|,
name|description
operator|=
literal|"Shows only service class names"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|onlyNames
decl_stmt|;
annotation|@
name|Reference
name|BundleContext
name|bundleContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|onlyNames
condition|)
block|{
name|listNames
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|serviceRefs
init|=
operator|new
name|ArrayList
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[]
name|services
init|=
name|bundle
operator|.
name|getRegisteredServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|ref
range|:
name|services
control|)
block|{
name|String
index|[]
name|objectClasses
init|=
operator|(
name|String
index|[]
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectClass
operator|==
literal|null
operator|||
name|ObjectClassMatcher
operator|.
name|matchesAtLeastOneName
argument_list|(
name|objectClasses
argument_list|,
name|objectClass
argument_list|)
condition|)
block|{
name|serviceRefs
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|serviceRefs
argument_list|,
operator|new
name|ServiceClassComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|serviceRef
range|:
name|serviceRefs
control|)
block|{
if|if
condition|(
name|showAll
operator|||
operator|!
name|isCommand
argument_list|(
operator|(
name|String
index|[]
operator|)
name|serviceRef
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
argument_list|)
condition|)
block|{
name|printServiceRef
argument_list|(
name|serviceRef
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|listNames
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|serviceNames
init|=
name|getServiceNamesMap
argument_list|(
name|bundleContext
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|serviceNamesList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|serviceNames
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|serviceNamesList
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|serviceNamesList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|+
literal|" ("
operator|+
name|serviceNames
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getServiceNamesMap
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|serviceNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Bundle
index|[]
name|bundles
init|=
name|bundleContext
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundles
control|)
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[]
name|services
init|=
name|bundle
operator|.
name|getRegisteredServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|serviceReference
range|:
name|services
control|)
block|{
name|String
index|[]
name|names
init|=
operator|(
name|String
index|[]
operator|)
name|serviceReference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|int
name|curCount
init|=
operator|(
name|serviceNames
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
operator|)
condition|?
name|serviceNames
operator|.
name|get
argument_list|(
name|name
argument_list|)
else|:
literal|0
decl_stmt|;
name|serviceNames
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|curCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|serviceNames
return|;
block|}
specifier|private
name|void
name|printServiceRef
parameter_list|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|serviceRef
parameter_list|)
block|{
name|String
index|[]
name|objectClass
init|=
operator|(
name|String
index|[]
operator|)
name|serviceRef
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
decl_stmt|;
name|String
name|serviceClasses
init|=
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|objectClass
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|serviceClasses
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ShellUtil
operator|.
name|getUnderlineString
argument_list|(
name|serviceClasses
argument_list|)
argument_list|)
expr_stmt|;
name|printProperties
argument_list|(
name|serviceRef
argument_list|)
expr_stmt|;
name|String
name|bundleName
init|=
name|ShellUtil
operator|.
name|getBundleName
argument_list|(
name|serviceRef
operator|.
name|getBundle
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Provided by : "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|bundleName
argument_list|)
expr_stmt|;
name|Bundle
index|[]
name|usingBundles
init|=
name|serviceRef
operator|.
name|getUsingBundles
argument_list|()
decl_stmt|;
if|if
condition|(
name|usingBundles
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Used by: "
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|usingBundles
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|ShellUtil
operator|.
name|getBundleName
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isCommand
parameter_list|(
name|String
index|[]
name|objectClasses
parameter_list|)
block|{
for|for
control|(
name|String
name|objectClass
range|:
name|objectClasses
control|)
block|{
if|if
condition|(
name|objectClass
operator|.
name|equals
argument_list|(
literal|"org.apache.felix.service.command.Function"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|printProperties
parameter_list|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|serviceRef
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|serviceRef
operator|.
name|getPropertyKeys
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Constants
operator|.
name|OBJECTCLASS
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" "
operator|+
name|key
operator|+
literal|" = "
operator|+
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|serviceRef
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
class|class
name|ServiceClassComparator
implements|implements
name|Comparator
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|o1
parameter_list|,
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|o2
parameter_list|)
block|{
name|String
index|[]
name|classes1
init|=
operator|(
name|String
index|[]
operator|)
name|o1
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
decl_stmt|;
name|String
index|[]
name|classes2
init|=
operator|(
name|String
index|[]
operator|)
name|o2
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
decl_stmt|;
return|return
name|classes1
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|classes2
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
block|}
end_class

end_unit

