begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|TestBundleFactory
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|createServiceRef
parameter_list|(
name|Object
modifier|...
name|keyProp
parameter_list|)
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|serviceRef
init|=
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyProp
operator|.
name|length
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|keyPropMap
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|c
operator|<
name|keyProp
operator|.
name|length
condition|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|keyProp
index|[
name|c
operator|++
index|]
decl_stmt|;
name|Object
name|value
init|=
operator|(
name|Object
operator|)
name|keyProp
index|[
name|c
operator|++
index|]
decl_stmt|;
name|keyPropMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|serviceRef
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|value
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
name|expect
argument_list|(
name|serviceRef
operator|.
name|getPropertyKeys
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|Collections
operator|.
name|list
argument_list|(
name|keyPropMap
operator|.
name|keys
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|serviceRef
return|;
block|}
name|Bundle
name|createBundle
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|id
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|BUNDLE_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundle
operator|.
name|getHeaders
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|headers
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|private
name|Bundle
index|[]
name|createBundles
parameter_list|()
block|{
name|Bundle
name|bundle1
init|=
name|createBundle
argument_list|(
literal|1
argument_list|,
literal|"Bundle A"
argument_list|)
decl_stmt|;
name|Bundle
name|bundle2
init|=
name|createBundle
argument_list|(
literal|2
argument_list|,
literal|"Bundle B"
argument_list|)
decl_stmt|;
name|Bundle
name|bundle3
init|=
name|createBundle
argument_list|(
literal|3
argument_list|,
literal|"Bundle C"
argument_list|)
decl_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|ref1
init|=
name|createServiceRef
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org.example.MyService"
block|}
argument_list|,
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
decl_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|ref2
init|=
name|createServiceRef
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"org.example.OtherService"
block|}
argument_list|,
literal|"key2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|addRegisteredServices
argument_list|(
name|bundle1
argument_list|,
name|ref1
argument_list|,
name|ref2
argument_list|)
expr_stmt|;
name|addRegisteredServices
argument_list|(
name|bundle2
argument_list|,
name|ref2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|bundle3
operator|.
name|getRegisteredServices
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundle1
operator|.
name|getServicesInUse
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|addUsedServices
argument_list|(
name|bundle2
argument_list|,
name|ref1
argument_list|)
expr_stmt|;
name|addUsedServices
argument_list|(
name|bundle3
argument_list|,
name|ref1
argument_list|,
name|ref2
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|ref1
operator|.
name|getUsingBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[]
block|{
name|bundle2
block|,
name|bundle3
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|ref2
operator|.
name|getUsingBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Bundle
index|[]
block|{
name|bundle3
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundle1
argument_list|,
name|bundle2
argument_list|,
name|bundle3
argument_list|,
name|ref1
argument_list|,
name|ref2
argument_list|)
expr_stmt|;
return|return
operator|new
name|Bundle
index|[]
block|{
name|bundle1
block|,
name|bundle2
block|,
name|bundle3
block|}
return|;
block|}
specifier|private
name|void
name|addUsedServices
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|ServiceReference
argument_list|<
name|?
argument_list|>
modifier|...
name|refs
parameter_list|)
block|{
name|expect
argument_list|(
name|bundle
operator|.
name|getServicesInUse
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|refs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addRegisteredServices
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|ServiceReference
argument_list|<
name|?
argument_list|>
modifier|...
name|refs
parameter_list|)
block|{
name|expect
argument_list|(
name|bundle
operator|.
name|getRegisteredServices
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|refs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
for|for
control|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|ref
range|:
name|refs
control|)
block|{
name|expect
argument_list|(
name|ref
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|BundleContext
name|createBundleContext
parameter_list|()
block|{
name|BundleContext
name|bundleContext
init|=
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Bundle
index|[]
name|bundles
init|=
name|createBundles
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundles
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundles
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundles
index|[
literal|0
index|]
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|expect
argument_list|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bundles
index|[
literal|1
index|]
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|bundleContext
argument_list|)
expr_stmt|;
return|return
name|bundleContext
return|;
block|}
block|}
end_class

end_unit

