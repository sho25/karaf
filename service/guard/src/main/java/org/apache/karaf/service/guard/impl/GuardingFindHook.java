begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|guard
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|hooks
operator|.
name|service
operator|.
name|FindHook
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
class|class
name|GuardingFindHook
implements|implements
name|FindHook
block|{
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|final
name|GuardProxyCatalog
name|guardProxyCatalog
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|servicesFilter
decl_stmt|;
name|GuardingFindHook
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|GuardProxyCatalog
name|guardProxyCatalog
parameter_list|,
name|Filter
name|securedServicesFilter
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|guardProxyCatalog
operator|=
name|guardProxyCatalog
expr_stmt|;
name|this
operator|.
name|servicesFilter
operator|=
name|securedServicesFilter
expr_stmt|;
block|}
specifier|public
name|void
name|find
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|filter
parameter_list|,
name|boolean
name|allServices
parameter_list|,
name|Collection
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|references
parameter_list|)
block|{
if|if
condition|(
name|servicesFilter
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|bundleContext
operator|.
name|equals
argument_list|(
name|bundleContext
argument_list|)
operator|||
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// don't hide anything from this bundle or the system bundle
return|return;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|>
name|i
init|=
name|references
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|sr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|servicesFilter
operator|.
name|match
argument_list|(
name|sr
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|guardProxyCatalog
operator|.
name|handleProxificationForHook
argument_list|(
name|sr
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

