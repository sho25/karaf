begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|guard
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|proxy
operator|.
name|ProxyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|aries
operator|.
name|proxy
operator|.
name|impl
operator|.
name|AsmProxyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|guard
operator|.
name|impl
operator|.
name|GuardProxyCatalog
operator|.
name|CreateProxyRunnable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|guard
operator|.
name|impl
operator|.
name|GuardProxyCatalog
operator|.
name|ServiceRegistrationHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_class
specifier|public
class|class
name|GuardProxyCatalogTest
block|{
comment|// Some assertions fail when run under a code coverage tool, they are skipped when this is set to true
specifier|private
specifier|static
specifier|final
name|boolean
name|runningUnderCoverage
init|=
literal|false
decl_stmt|;
comment|// set to false before committing any changes
annotation|@
name|Test
specifier|public
name|void
name|testGuardProxyCatalog
parameter_list|()
throws|throws
name|Exception
block|{
name|Bundle
name|b
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|9823L
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|b
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|bc
operator|.
name|addServiceListener
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|String
name|caFilter
init|=
literal|"(&(objectClass=org.osgi.service.cm.ConfigurationAdmin)"
operator|+
literal|"(!("
operator|+
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
operator|+
literal|"=*)))"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|caFilter
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|caFilter
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|String
name|pmFilter
init|=
literal|"(&(objectClass=org.apache.aries.proxy.ProxyManager)"
operator|+
literal|"(!("
operator|+
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
operator|+
literal|"=*)))"
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|pmFilter
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|pmFilter
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Service Tracker for ConfigAdmin should be opened"
argument_list|,
name|gpc
operator|.
name|configAdminTracker
operator|.
name|getTrackingCount
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Service Tracker for ProxyManager should be opened"
argument_list|,
name|gpc
operator|.
name|proxyManagerTracker
operator|.
name|getTrackingCount
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bc
argument_list|)
expr_stmt|;
comment|// Add some more behaviour checks to the bundle context
name|EasyMock
operator|.
name|reset
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|bc
operator|.
name|removeServiceListener
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Service Tracker for ConfigAdmin should be closed"
argument_list|,
operator|-
literal|1
argument_list|,
name|gpc
operator|.
name|configAdminTracker
operator|.
name|getTrackingCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Service Tracker for ProxyManager should be closed"
argument_list|,
operator|-
literal|1
argument_list|,
name|gpc
operator|.
name|proxyManagerTracker
operator|.
name|getTrackingCount
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsProxy
parameter_list|()
throws|throws
name|Exception
block|{
name|BundleContext
name|bc
init|=
name|mockBundleContext
argument_list|()
decl_stmt|;
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gpc
operator|.
name|isProxy
argument_list|(
name|mockServiceReference
argument_list|(
name|props
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gpc
operator|.
name|isProxy
argument_list|(
name|mockServiceReference
argument_list|(
operator|new
name|Hashtable
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testHandleProxificationForHook
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|GuardProxyCatalog
operator|.
name|SERVICE_ACL_PREFIX
operator|+
literal|"foo"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_KEY
argument_list|,
literal|"(a>=5)"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
literal|13L
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|sref2
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Should not hide an existing proxy for this client"
argument_list|,
name|gpc
operator|.
name|handleProxificationForHook
argument_list|(
name|sref2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No proxy should have been created"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props4
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|props4
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
literal|15L
argument_list|)
expr_stmt|;
name|props4
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|sref4
init|=
name|mockServiceReference
argument_list|(
name|props4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should hide a service that needs to be proxied"
argument_list|,
name|gpc
operator|.
name|handleProxificationForHook
argument_list|(
name|sref4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should trigger proxy creation"
argument_list|,
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testHandleServiceUnregistering
parameter_list|()
throws|throws
name|Exception
block|{
name|BundleContext
name|clientBC
init|=
name|openStrictMockBundleContext
argument_list|(
name|mockBundle
argument_list|(
literal|12345L
argument_list|)
argument_list|)
decl_stmt|;
name|BundleContext
name|client2BC
init|=
name|openStrictMockBundleContext
argument_list|(
name|mockBundle
argument_list|(
literal|6L
argument_list|)
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|clientBC
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|client2BC
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|originalServiceID
init|=
literal|12345678901234L
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
operator|new
name|Long
argument_list|(
name|originalServiceID
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|originalRef
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|anotherServiceID
init|=
literal|5123456789012345L
decl_stmt|;
name|props2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
name|anotherServiceID
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|anotherRef
init|=
name|mockServiceReference
argument_list|(
name|props2
argument_list|)
decl_stmt|;
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|mockBundleContext
argument_list|()
argument_list|)
decl_stmt|;
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|proxyReg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|proxyReg
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|ServiceReference
operator|)
name|mockServiceReference
argument_list|(
name|props
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|proxyReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|proxyReg
argument_list|)
expr_stmt|;
name|ServiceRegistrationHolder
name|srh
init|=
operator|new
name|GuardProxyCatalog
operator|.
name|ServiceRegistrationHolder
argument_list|()
decl_stmt|;
name|srh
operator|.
name|registration
operator|=
name|proxyReg
expr_stmt|;
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|proxy2Reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|proxy2Reg
argument_list|)
expr_stmt|;
name|ServiceRegistrationHolder
name|srh2
init|=
operator|new
name|GuardProxyCatalog
operator|.
name|ServiceRegistrationHolder
argument_list|()
decl_stmt|;
name|srh2
operator|.
name|registration
operator|=
name|proxy2Reg
expr_stmt|;
name|gpc
operator|.
name|proxyMap
operator|.
name|put
argument_list|(
name|originalServiceID
argument_list|,
name|srh
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|proxyMap
operator|.
name|put
argument_list|(
name|anotherServiceID
argument_list|,
name|srh2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|2
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|createProxyQueue
operator|.
name|put
argument_list|(
operator|new
name|MockCreateProxyRunnable
argument_list|(
name|originalServiceID
argument_list|)
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|createProxyQueue
operator|.
name|put
argument_list|(
operator|new
name|MockCreateProxyRunnable
argument_list|(
literal|777
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|2
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|REGISTERED
argument_list|,
name|originalRef
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Registered events should be ignored"
argument_list|,
literal|2
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Registered events should be ignored"
argument_list|,
literal|2
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|proxyProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|proxyProps
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|proxyRef
init|=
name|mockServiceReference
argument_list|(
name|proxyProps
argument_list|)
decl_stmt|;
name|gpc
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|UNREGISTERING
argument_list|,
name|proxyRef
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unregistering the proxy should be ignored by the listener"
argument_list|,
literal|2
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unregistering the proxy should be ignored by the listener"
argument_list|,
literal|2
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|UNREGISTERING
argument_list|,
name|originalRef
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The proxy for this service should have been removed"
argument_list|,
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|anotherRef
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The create proxy job for this service should have been removed"
argument_list|,
literal|1
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|777
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getOriginalServiceID
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|proxyReg
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|proxy2Reg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateProxy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This method tests proxy creation for various service implementation types.
name|testCreateProxy
argument_list|(
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|TestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|DescendantTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|PrivateTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|PrivateTestServiceNoDirectInterfaces
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|FinalTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|TestObjectWithoutInterface
operator|.
name|class
argument_list|,
operator|new
name|TestObjectWithoutInterface
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|CombinedTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|PrivateTestService
operator|.
name|class
argument_list|,
operator|new
name|PrivateTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|PrivateTestServiceNoDirectInterfaces
operator|.
name|class
argument_list|,
operator|new
name|PrivateTestServiceNoDirectInterfaces
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|TestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|DescendantTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|PrivateTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|TestObjectWithoutInterface
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|CombinedTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|FinalTestService
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|TestServiceAPI
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|()
block|{
return|return
literal|"Doing it"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|ClassWithFinalMethod
argument_list|()
argument_list|)
expr_stmt|;
name|testCreateProxy
argument_list|(
name|Object
operator|.
name|class
argument_list|,
operator|new
name|ClassWithPrivateMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateProxyMultipleObjectClasses
parameter_list|()
throws|throws
name|Exception
block|{
name|testCreateProxy
argument_list|(
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
block|,
name|TestService
operator|.
name|class
block|}
argument_list|,
operator|new
name|TestService
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testAssignRoles
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"somemethod"
argument_list|,
literal|"a,b"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"someOtherMethod(int)"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"someOtherMethod(int)[/12/]"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"someOtherMethod(int)[\"42\"]"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"someOtherMethod[/.*[x][y][z].*/]"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"someFoo*"
argument_list|,
literal|"g"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|proxyProps
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|TestService
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|,
literal|"g"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|proxyProps
operator|.
name|get
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testAssignRoles2
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|proxyProps
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|TestService
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"No security defined for this API, so no roles should be specified at all"
argument_list|,
name|proxyProps
operator|.
name|get
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testAssignRoles3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|abstract
class|class
name|MyAbstractClass
implements|implements
name|TestServiceAPI
implements|,
name|TestServiceAPI2
block|{}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|Object
argument_list|>
name|serviceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
block|,
name|TestServiceAPI2
operator|.
name|class
block|}
argument_list|,
operator|new
name|MyAbstractClass
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|serviceMap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serviceMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"X"
argument_list|)
argument_list|,
name|serviceMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getProperty
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testAssignRoles4
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"somemethod"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"someOtherMethod"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"somethingelse"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|proxyProps
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
name|TestServiceAPI
operator|.
name|class
argument_list|,
operator|new
name|TestService
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|(
name|Collection
argument_list|<
name|String
argument_list|>
operator|)
name|proxyProps
operator|.
name|get
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|result
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvocationBlocking1
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"a,b"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"barfoobar"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestObjectWithoutInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|put
argument_list|(
literal|"compute"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
block|,
name|TestObjectWithoutInterface
operator|.
name|class
block|}
argument_list|,
operator|new
name|CombinedTestService
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run with the right credentials so we can test the expected roles
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Doing it"
argument_list|,
operator|(
operator|(
name|TestServiceAPI
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runningUnderCoverage
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|TestObjectWithoutInterface
operator|)
name|proxy
operator|)
operator|.
name|compute
argument_list|(
literal|44L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have been blocked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvocationBlocking2
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"barfoobar"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestObjectWithoutInterface
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"compute(long)[\"42\"]"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"compute(long)"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|config
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
block|,
name|TestObjectWithoutInterface
operator|.
name|class
block|}
argument_list|,
operator|new
name|CombinedTestService
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run with the right credentials so we can test the expected roles
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|runningUnderCoverage
condition|)
block|{
name|assertEquals
argument_list|(
operator|-
literal|42L
argument_list|,
operator|(
operator|(
name|TestObjectWithoutInterface
operator|)
name|proxy
operator|)
operator|.
name|compute
argument_list|(
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|TestObjectWithoutInterface
operator|)
name|proxy
operator|)
operator|.
name|compute
argument_list|(
literal|44L
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have been blocked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvocationBlocking3
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|MyService
implements|implements
name|TestServiceAPI
implements|,
name|TestServiceAPI2
block|{
specifier|public
name|String
name|doit
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
operator|.
name|reverse
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|doit
parameter_list|()
block|{
return|return
literal|"Doing it"
return|;
block|}
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"do*"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar2"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)[/[tT][a]+/]"
argument_list|,
literal|"b,d # a regex rule"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|put
argument_list|(
literal|"doit(java.lang.String)"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
block|,
name|TestServiceAPI2
operator|.
name|class
block|}
argument_list|,
operator|new
name|MyService
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run with the right credentials so we can test the expected roles
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Doing it"
argument_list|,
operator|(
operator|(
name|TestServiceAPI
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Subject
name|subject2
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject2
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|subject2
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject2
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"Doing it"
argument_list|,
operator|(
operator|(
name|TestServiceAPI
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have been blocked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
name|assertEquals
argument_list|(
literal|"aaT"
argument_list|,
operator|(
operator|(
name|TestServiceAPI2
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|(
literal|"Taa"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|TestServiceAPI2
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|(
literal|"t"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have been blocked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvocationBlocking4
parameter_list|()
throws|throws
name|Exception
block|{
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
block|,
name|TestObjectWithoutInterface
operator|.
name|class
block|}
argument_list|,
operator|new
name|CombinedTestService
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run with the right credentials so we can test the expected roles
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Doing it"
argument_list|,
operator|(
operator|(
name|TestServiceAPI
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runningUnderCoverage
condition|)
block|{
name|assertEquals
argument_list|(
literal|42L
argument_list|,
operator|(
operator|(
name|TestObjectWithoutInterface
operator|)
name|proxy
operator|)
operator|.
name|compute
argument_list|(
operator|-
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|44L
argument_list|,
operator|(
operator|(
name|TestObjectWithoutInterface
operator|)
name|proxy
operator|)
operator|.
name|compute
argument_list|(
literal|44L
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvocationBlocking5
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"a,b"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|c1
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI2
operator|.
name|class
block|}
argument_list|,
operator|new
name|TestServiceAPI2
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Invoke the service with role 'c'.
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"The invocation under role 'c' should be ok, as there are no rules specified "
operator|+
literal|"for this service at all."
argument_list|,
literal|"HELLO"
argument_list|,
operator|(
operator|(
name|TestServiceAPI2
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvocationBlocking6
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"a,b"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar2"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c2
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI2
operator|.
name|class
block|}
argument_list|,
operator|new
name|TestServiceAPI2
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|toUpperCase
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Invoke the service with role 'c'.
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
try|try
block|{
operator|(
operator|(
name|TestServiceAPI2
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The invocation should not process as the 'doit' operation has no roles associated with it"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testInvocationBlocking7
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI3
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"foo()"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|c1
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI3
operator|.
name|class
block|}
argument_list|,
operator|new
name|TestService3
argument_list|()
argument_list|)
decl_stmt|;
name|Subject
name|s1
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|s1
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|TestServiceAPI3
name|obj
init|=
operator|(
name|TestServiceAPI3
operator|)
name|proxy
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have allowed this invocation for any (or no) role"
argument_list|,
operator|-
literal|7
argument_list|,
name|obj
operator|.
name|foo
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|obj
operator|.
name|foo
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have been blocked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|obj
operator|.
name|bar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have been blocked"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Subject
name|s2
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|s2
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|s2
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|s2
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|s2
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|TestServiceAPI3
name|obj
init|=
operator|(
name|TestServiceAPI3
operator|)
name|proxy
decl_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|obj
operator|.
name|foo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|obj
operator|.
name|bar
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|32767
argument_list|,
name|obj
operator|.
name|foo
argument_list|(
literal|32767
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testCustomRole
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|MyRolePrincipal
implements|implements
name|Principal
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"role1"
return|;
block|}
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|c1
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|c1
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|c1
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
name|MyRolePrincipal
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|":role1"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|c1
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|proxy
init|=
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
operator|new
name|Class
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
block|}
argument_list|,
operator|new
name|TestService
argument_list|()
argument_list|)
decl_stmt|;
name|Subject
name|s1
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|s1
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|s1
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
try|try
block|{
operator|(
operator|(
name|TestServiceAPI
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have prevented this invocation as the custom role is required"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Subject
name|s2
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|s2
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MyRolePrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|s2
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
operator|(
operator|(
name|TestServiceAPI
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|()
expr_stmt|;
comment|// Should work, the custom role is there
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Subject
name|s3
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|s3
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MyRolePrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|s3
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"role1"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|s3
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
operator|(
operator|(
name|TestServiceAPI
operator|)
name|proxy
operator|)
operator|.
name|doit
argument_list|()
expr_stmt|;
comment|// Should work, the custom role is there
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testProxyCreationThread
parameter_list|()
throws|throws
name|Exception
block|{
name|ProxyManager
name|proxyManager
init|=
name|getProxyManager
argument_list|()
decl_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ca
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|ServiceReference
name|pmSref
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|pmSref
argument_list|)
expr_stmt|;
name|ServiceReference
name|pmSref2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|pmSref2
argument_list|)
expr_stmt|;
name|ServiceReference
name|cmSref
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cmSref
argument_list|)
expr_stmt|;
name|Bundle
name|b
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|23992734L
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|b
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Filter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
specifier|final
name|ServiceListener
index|[]
name|pmListenerHolder
init|=
operator|new
name|ServiceListener
index|[
literal|1
index|]
decl_stmt|;
name|String
name|pmFilter
init|=
literal|"(&(objectClass="
operator|+
name|ProxyManager
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|+
literal|"(!("
operator|+
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
operator|+
literal|"=*)))"
decl_stmt|;
name|bc
operator|.
name|addServiceListener
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceListener
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|pmFilter
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|pmListenerHolder
index|[
literal|0
index|]
operator|=
operator|(
name|ServiceListener
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|contains
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ServiceReference
index|[]
block|{
name|cmSref
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getService
argument_list|(
name|pmSref
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|proxyManager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getService
argument_list|(
name|pmSref2
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|proxyManager
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getService
argument_list|(
name|cmSref
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ca
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
comment|// This should put a ServiceListener in the pmListenerHolder, the ServiceTracker does that
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
comment|// The service being proxied has these properties
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
literal|162L
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|serviceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The mock bundle context for the bundle providing the service is set up here
name|BundleContext
name|providerBC
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// These are the expected service properties of the proxy registration. Note the proxy marker...
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedProxyProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|serviceProps
argument_list|)
decl_stmt|;
name|expectedProxyProps
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServiceRegistration
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|ServiceRegistration
name|reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|serviceMap
operator|.
name|put
argument_list|(
name|sr
argument_list|,
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|getService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|serviceMap
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// In some cases the proxy-creating code is looking for a classloader (e.g. when run through
comment|// a coverage tool such as EclEmma). This will satisfy that.
name|BundleWiring
name|bw
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bw
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bw
argument_list|)
expr_stmt|;
comment|// The mock bundle that provides the original service (and also the proxy is registered with this)
name|Bundle
name|providerBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|providerBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bw
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBundle
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|providerBundle
argument_list|,
name|serviceProps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the proxy for the service
name|gpc
operator|.
name|proxyIfNotAlreadyProxied
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The actual proxy creation is done asynchronously.
name|GuardProxyCatalog
operator|.
name|ServiceRegistrationHolder
name|holder
init|=
name|gpc
operator|.
name|proxyMap
operator|.
name|get
argument_list|(
literal|162L
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"The registration shouldn't have happened yet"
argument_list|,
name|holder
operator|.
name|registration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|tarray
init|=
operator|new
name|Thread
index|[
name|Thread
operator|.
name|activeCount
argument_list|()
index|]
decl_stmt|;
name|Thread
operator|.
name|enumerate
argument_list|(
name|tarray
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|tarray
control|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
operator|!
name|GuardProxyCatalog
operator|.
name|PROXY_CREATOR_THREAD_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make the proxy manager appear
name|pmListenerHolder
index|[
literal|0
index|]
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|REGISTERED
argument_list|,
name|pmSref
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|400
argument_list|)
expr_stmt|;
comment|// give the system some time to send the events...
name|Thread
name|ourThread
init|=
literal|null
decl_stmt|;
name|Thread
index|[]
name|tarray2
init|=
operator|new
name|Thread
index|[
name|Thread
operator|.
name|activeCount
argument_list|()
index|]
decl_stmt|;
name|Thread
operator|.
name|enumerate
argument_list|(
name|tarray2
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|tarray2
control|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_CREATOR_THREAD_NAME
argument_list|)
condition|)
block|{
name|ourThread
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
name|assertNotNull
argument_list|(
name|ourThread
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ourThread
operator|.
name|isDaemon
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ourThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|holder
operator|.
name|registration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numProxyThreads
init|=
literal|0
decl_stmt|;
name|pmListenerHolder
index|[
literal|0
index|]
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|REGISTERED
argument_list|,
name|pmSref2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// give the system some time to send the events...
name|Thread
index|[]
name|tarray3
init|=
operator|new
name|Thread
index|[
name|Thread
operator|.
name|activeCount
argument_list|()
index|]
decl_stmt|;
name|Thread
operator|.
name|enumerate
argument_list|(
name|tarray3
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|tarray3
control|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_CREATOR_THREAD_NAME
argument_list|)
condition|)
block|{
name|numProxyThreads
operator|++
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"Maximum 1 proxy thread, even if there is more than 1 proxy service"
argument_list|,
literal|1
argument_list|,
name|numProxyThreads
argument_list|)
expr_stmt|;
comment|// Clean up thread
name|pmListenerHolder
index|[
literal|0
index|]
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|UNREGISTERING
argument_list|,
name|pmSref
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// Give the system some time to stop the threads...
name|Thread
index|[]
name|tarray4
init|=
operator|new
name|Thread
index|[
name|Thread
operator|.
name|activeCount
argument_list|()
index|]
decl_stmt|;
name|Thread
operator|.
name|enumerate
argument_list|(
name|tarray4
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|tarray4
control|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
operator|!
name|GuardProxyCatalog
operator|.
name|PROXY_CREATOR_THREAD_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testHandleServiceModified
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"test.1.2.3"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"role.1"
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config2
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|config2
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
literal|"test.1.2.4"
argument_list|)
expr_stmt|;
name|config2
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(objectClass="
operator|+
name|TestServiceAPI2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|config2
operator|.
name|put
argument_list|(
literal|"doit"
argument_list|,
literal|"role.2"
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|(
name|config
argument_list|,
name|config2
argument_list|)
decl_stmt|;
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
comment|// The service being proxied has these properties
name|long
name|serviceID
init|=
literal|1L
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|TestServiceAPI2
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
name|serviceID
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"someone"
argument_list|)
argument_list|)
expr_stmt|;
comment|// will be overwritten
name|Object
name|myObject
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
literal|"foo.bar"
argument_list|,
name|myObject
argument_list|)
expr_stmt|;
name|BundleContext
name|providerBC
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|aryEq
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|TestServiceAPI2
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Dictionary
name|props
init|=
operator|(
name|Dictionary
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceRegistration
name|reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|reg
operator|.
name|setProperties
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Push the update into the service reference
name|ArrayList
argument_list|<
name|String
argument_list|>
name|oldKeys
init|=
name|Collections
operator|.
name|list
argument_list|(
name|props
operator|.
name|keys
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|oldKeys
control|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newProps
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|Collections
operator|.
name|list
argument_list|(
name|newProps
operator|.
name|keys
argument_list|()
argument_list|)
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|reg
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// In some cases the proxy-creating code is looking for a classloader (e.g. when run through
comment|// a coverage tool such as EclEmma). This will satisfy that.
name|BundleWiring
name|bw
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bw
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bw
argument_list|)
expr_stmt|;
comment|// The mock bundle that provides the original service (and also the proxy is registered with this)
name|Bundle
name|providerBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|providerBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bw
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBundle
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|providerBundle
argument_list|,
name|serviceProps
argument_list|)
decl_stmt|;
name|gpc
operator|.
name|proxyIfNotAlreadyProxied
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|GuardProxyCatalog
operator|.
name|CreateProxyRunnable
name|runnable
init|=
name|gpc
operator|.
name|createProxyQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|(
name|getProxyManager
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceRegistrationHolder
name|holder
init|=
name|gpc
operator|.
name|proxyMap
operator|.
name|get
argument_list|(
name|serviceID
argument_list|)
decl_stmt|;
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|reg
init|=
name|holder
operator|.
name|registration
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|serviceProps
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"role.1"
argument_list|,
literal|"role.2"
argument_list|)
argument_list|)
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|serviceProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|)
argument_list|)
expr_stmt|;
comment|// now change the original service and let the proxy react
name|serviceProps
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"property"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition, the mocked reference should have picked up this change"
argument_list|,
literal|"property"
argument_list|,
name|sr
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|MODIFIED
argument_list|,
name|sr
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Changing the service should not change the number of proxies"
argument_list|,
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|serviceProps
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"role.1"
argument_list|,
literal|"role.2"
argument_list|)
argument_list|)
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|serviceProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"property"
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testHandleServiceModified2
parameter_list|()
throws|throws
name|Exception
block|{
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|()
decl_stmt|;
comment|// no configuration used in this test...
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
comment|// The service being proxied has these properties
name|long
name|serviceID
init|=
literal|1L
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
name|serviceID
argument_list|)
expr_stmt|;
name|BundleContext
name|providerBC
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|aryEq
argument_list|(
operator|new
name|String
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
specifier|final
name|Dictionary
name|props
init|=
operator|(
name|Dictionary
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceRegistration
name|reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|reg
operator|.
name|setProperties
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Push the update into the service reference
name|ArrayList
argument_list|<
name|String
argument_list|>
name|oldKeys
init|=
name|Collections
operator|.
name|list
argument_list|(
name|props
operator|.
name|keys
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|oldKeys
control|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newProps
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|Collections
operator|.
name|list
argument_list|(
name|newProps
operator|.
name|keys
argument_list|()
argument_list|)
control|)
block|{
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|newProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|reg
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// In some cases the proxy-creating code is looking for a classloader (e.g. when run through
comment|// a coverage tool such as EclEmma). This will satisfy that.
name|BundleWiring
name|bw
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bw
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bw
argument_list|)
expr_stmt|;
comment|// The mock bundle that provides the original service (and also the proxy is registered with this)
name|Bundle
name|providerBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|providerBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bw
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBundle
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|providerBundle
argument_list|,
name|serviceProps
argument_list|)
decl_stmt|;
name|gpc
operator|.
name|proxyIfNotAlreadyProxied
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|GuardProxyCatalog
operator|.
name|CreateProxyRunnable
name|runnable
init|=
name|gpc
operator|.
name|createProxyQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|(
name|getProxyManager
argument_list|()
argument_list|)
expr_stmt|;
name|ServiceRegistrationHolder
name|holder
init|=
name|gpc
operator|.
name|proxyMap
operator|.
name|get
argument_list|(
name|serviceID
argument_list|)
decl_stmt|;
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|reg
init|=
name|holder
operator|.
name|registration
decl_stmt|;
name|assertFalse
argument_list|(
literal|"No roles defined for this service using configuration, so roles property should not be set"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getPropertyKeys
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|serviceProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|serviceProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|)
argument_list|)
expr_stmt|;
comment|// now change the original service and let the proxy react
name|serviceProps
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|,
literal|"foobar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition, the mocked reference should have picked up this change"
argument_list|,
literal|"foobar"
argument_list|,
name|sr
operator|.
name|getProperty
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|serviceChanged
argument_list|(
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|MODIFIED
argument_list|,
name|sr
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Changing the service should not change the number of proxies"
argument_list|,
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The roles property set on the modified service should have been removed"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getPropertyKeys
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|reg
operator|.
name|getReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|void
name|testServiceFactoryBehaviour
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|Object
argument_list|>
name|serviceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TestServiceAPI
name|testService
init|=
operator|new
name|TestService
argument_list|()
decl_stmt|;
name|BundleContext
name|bc
init|=
name|mockConfigAdminBundleContext
argument_list|()
decl_stmt|;
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
comment|// The service being proxied has these properties
name|long
name|serviceID
init|=
literal|117L
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
name|TestServiceAPI
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
name|serviceID
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|BundleContext
name|providerBC
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServiceRegistration
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|ServiceRegistration
name|reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|serviceMap
operator|.
name|put
argument_list|(
name|sr
argument_list|,
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|getService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|serviceMap
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// In some cases the proxy-creating code is looking for a classloader (e.g. when run through
comment|// a coverage tool such as EclEmma). This will satisfy that.
name|BundleWiring
name|bw
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bw
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bw
argument_list|)
expr_stmt|;
comment|// The mock bundle that provides the original service (and also the proxy is registered with this)
name|Bundle
name|providerBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|providerBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bw
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBundle
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|providerBundle
argument_list|,
name|serviceProps
argument_list|)
decl_stmt|;
comment|// The mock bundle context for the client bundle
name|BundleContext
name|clientBC
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|clientBC
operator|.
name|getService
argument_list|(
name|sr
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|testService
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|clientBC
argument_list|)
expr_stmt|;
comment|// The mock bundle that consumes the service
name|Bundle
name|clientBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|clientBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|clientBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|clientBundle
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|proxyIfNotAlreadyProxied
argument_list|(
name|sr
argument_list|)
expr_stmt|;
comment|// The actual proxy creation is done asynchronously.
name|GuardProxyCatalog
operator|.
name|ServiceRegistrationHolder
name|holder
init|=
name|gpc
operator|.
name|proxyMap
operator|.
name|get
argument_list|(
name|serviceID
argument_list|)
decl_stmt|;
comment|// Mimic the thread that works the queue to create the proxy
name|GuardProxyCatalog
operator|.
name|CreateProxyRunnable
name|runnable
init|=
name|gpc
operator|.
name|createProxyQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|117L
argument_list|,
name|runnable
operator|.
name|getOriginalServiceID
argument_list|()
argument_list|)
expr_stmt|;
name|ProxyManager
name|pm
init|=
name|getProxyManager
argument_list|()
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|(
name|pm
argument_list|)
expr_stmt|;
comment|// The runnable should have put the actual registration in the holder
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|proxySR
init|=
name|holder
operator|.
name|registration
operator|.
name|getReference
argument_list|()
decl_stmt|;
comment|// Check that the proxy registration was done on the original provider bundle's context
name|EasyMock
operator|.
name|verify
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// Test that the actual proxy invokes the original service...
name|ServiceFactory
name|proxyServiceSF
init|=
operator|(
name|ServiceFactory
operator|)
name|serviceMap
operator|.
name|get
argument_list|(
name|proxySR
argument_list|)
decl_stmt|;
name|TestServiceAPI
name|proxyService
init|=
operator|(
name|TestServiceAPI
operator|)
name|proxyServiceSF
operator|.
name|getService
argument_list|(
name|clientBundle
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"The proxy should not be the same object as the original service"
argument_list|,
name|testService
argument_list|,
name|proxyService
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Doing it"
argument_list|,
name|proxyService
operator|.
name|doit
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|reset
argument_list|(
name|clientBC
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|clientBC
operator|.
name|ungetService
argument_list|(
name|sr
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|clientBC
argument_list|)
expr_stmt|;
name|proxyServiceSF
operator|.
name|ungetService
argument_list|(
name|clientBundle
argument_list|,
literal|null
argument_list|,
name|proxyService
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|clientBC
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testCreateProxy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|intf
parameter_list|,
name|Object
name|testService
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testCreateProxy
argument_list|(
name|mockConfigAdminBundleContext
argument_list|()
argument_list|,
name|intf
argument_list|,
name|intf
argument_list|,
name|testService
argument_list|)
return|;
block|}
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testCreateProxy
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|intf
parameter_list|,
name|Object
name|testService
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
name|intf
argument_list|,
name|intf
argument_list|,
name|testService
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|testCreateProxy
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|Class
name|intf
parameter_list|,
specifier|final
name|Class
name|proxyRegClass
parameter_list|,
name|Object
name|testService
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create the object that is actually being tested here
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
comment|// The service being proxied has these properties
name|long
name|serviceID
init|=
literal|456L
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
name|intf
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
name|serviceID
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
literal|".foo"
argument_list|,
literal|123L
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|ServiceReference
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|serviceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The mock bundle context for the bundle providing the service is set up here
name|BundleContext
name|providerBC
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// These are the expected service properties of the proxy registration. Note the proxy marker...
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedProxyProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|serviceProps
argument_list|)
decl_stmt|;
name|expectedProxyProps
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// This will check that the right proxy is being registered.
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServiceRegistration
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|runningUnderCoverage
condition|)
block|{
comment|// Some of these checks don't work when running under coverage
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|proxyRegClass
operator|.
name|getName
argument_list|()
block|}
argument_list|,
operator|(
name|String
index|[]
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Object
name|svc
init|=
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|svc
operator|instanceof
name|ServiceFactory
argument_list|)
expr_stmt|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expectedProxyProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedProxyProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ServiceRegistration
name|reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|serviceMap
operator|.
name|put
argument_list|(
name|sr
argument_list|,
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|getService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|serviceMap
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// In some cases the proxy-creating code is looking for a classloader (e.g. when run through
comment|// a coverage tool such as EclEmma). This will satisfy that.
name|BundleWiring
name|bw
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bw
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bw
argument_list|)
expr_stmt|;
comment|// The mock bundle that provides the original service (and also the proxy is registered with this)
name|Bundle
name|providerBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|providerBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bw
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBundle
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|providerBundle
argument_list|,
name|serviceProps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the proxy for the service
name|gpc
operator|.
name|proxyIfNotAlreadyProxied
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The actual proxy creation is done asynchronously.
name|GuardProxyCatalog
operator|.
name|ServiceRegistrationHolder
name|holder
init|=
name|gpc
operator|.
name|proxyMap
operator|.
name|get
argument_list|(
name|serviceID
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"The registration shouldn't have happened yet"
argument_list|,
name|holder
operator|.
name|registration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mimic the thread that works the queue to create the proxy
name|GuardProxyCatalog
operator|.
name|CreateProxyRunnable
name|runnable
init|=
name|gpc
operator|.
name|createProxyQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|ProxyManager
name|pm
init|=
name|getProxyManager
argument_list|()
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|(
name|pm
argument_list|)
expr_stmt|;
comment|// The runnable should have put the actual registration in the holder
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|proxySR
init|=
name|holder
operator|.
name|registration
operator|.
name|getReference
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expectedProxyProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expectedProxyProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|proxySR
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check that the proxy registration was done on the original provider bundle's context
name|EasyMock
operator|.
name|verify
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// Test that the actual proxy invokes the original service...
name|Object
name|proxyService
init|=
name|serviceMap
operator|.
name|get
argument_list|(
name|proxySR
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"The proxy should not be the same object as the original service"
argument_list|,
name|testService
argument_list|,
name|proxyService
argument_list|)
expr_stmt|;
comment|// Attempt to proxy the service again, make sure that no re-proxying happens
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|gpc
operator|.
name|proxyIfNotAlreadyProxied
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No additional proxy should have been created"
argument_list|,
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No additional work on the queue is expected"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|proxyProps
init|=
name|getServiceReferenceProperties
argument_list|(
name|proxySR
argument_list|)
decl_stmt|;
name|gpc
operator|.
name|close
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|holder
operator|.
name|registration
argument_list|)
expr_stmt|;
comment|// checks that the unregister call was made
return|return
name|proxyProps
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|Object
name|testCreateProxy
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|objectClasses
parameter_list|,
name|Object
name|testService
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testCreateProxy
argument_list|(
name|mockConfigAdminBundleContext
argument_list|()
argument_list|,
name|objectClasses
argument_list|,
name|objectClasses
argument_list|,
name|testService
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Object
name|testCreateProxy
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|objectClasses
parameter_list|,
name|Object
name|testService
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
name|objectClasses
argument_list|,
name|objectClasses
argument_list|,
name|testService
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Object
name|testCreateProxy
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|objectClasses
parameter_list|,
name|Object
name|testService
parameter_list|,
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|Object
argument_list|>
name|serviceMap
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|testCreateProxy
argument_list|(
name|bc
argument_list|,
name|objectClasses
argument_list|,
name|objectClasses
argument_list|,
name|testService
argument_list|,
name|serviceMap
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|Object
name|testCreateProxy
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|Class
index|[]
name|objectClasses
parameter_list|,
specifier|final
name|Class
index|[]
name|proxyRegClasses
parameter_list|,
name|Object
name|testService
parameter_list|,
specifier|final
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|Object
argument_list|>
name|serviceMap
parameter_list|)
throws|throws
name|Exception
block|{
comment|// A linked hash map to keep iteration order over the keys predictable
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|objClsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cls
range|:
name|objectClasses
control|)
block|{
name|objClsMap
operator|.
name|put
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
comment|// A linked hash map to keep iteration order over the keys predictable
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|proxyRegClsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
name|cls
range|:
name|proxyRegClasses
control|)
block|{
name|proxyRegClsMap
operator|.
name|put
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|,
name|cls
argument_list|)
expr_stmt|;
block|}
comment|// Create the object that is actually being tested here
name|GuardProxyCatalog
name|gpc
init|=
operator|new
name|GuardProxyCatalog
argument_list|(
name|bc
argument_list|)
decl_stmt|;
comment|// The service being proxied has these properties
name|long
name|serviceID
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
name|objClsMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|,
name|serviceID
argument_list|)
expr_stmt|;
name|serviceProps
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"everyone"
argument_list|)
argument_list|)
expr_stmt|;
comment|// will be overwritten
name|serviceProps
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
comment|// The mock bundle context for the bundle providing the service is set up here
name|BundleContext
name|providerBC
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// These are the expected service properties of the proxy registration. Note the proxy marker...
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedProxyProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|serviceProps
argument_list|)
decl_stmt|;
name|expectedProxyProps
operator|.
name|put
argument_list|(
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
comment|// This will check that the right proxy is being registered.
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServiceRegistration
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|runningUnderCoverage
condition|)
block|{
comment|// Some of these checks don't work when running under coverage
name|assertArrayEquals
argument_list|(
name|proxyRegClsMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
argument_list|,
operator|(
name|String
index|[]
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Object
name|svc
init|=
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|svc
operator|instanceof
name|ServiceFactory
argument_list|)
expr_stmt|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expectedProxyProps
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"The roles property should have been overwritten"
argument_list|,
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
literal|"everyone"
argument_list|)
operator|.
name|equals
argument_list|(
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedProxyProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ServiceRegistration
name|reg
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceRegistration
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|reg
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|sr
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|reg
argument_list|)
expr_stmt|;
name|serviceMap
operator|.
name|put
argument_list|(
name|sr
argument_list|,
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|reg
return|;
block|}
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBC
operator|.
name|getService
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|serviceMap
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// In some cases the proxy-creating code is looking for a classloader (e.g. when run through
comment|// a coverage tool such as EclEmma). This will satisfy that.
name|BundleWiring
name|bw
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bw
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bw
argument_list|)
expr_stmt|;
comment|// The mock bundle that provides the original service (and also the proxy is registered with this)
name|Bundle
name|providerBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|providerBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|providerBundle
operator|.
name|adapt
argument_list|(
name|BundleWiring
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|bw
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|providerBundle
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|mockServiceReference
argument_list|(
name|providerBundle
argument_list|,
name|serviceProps
argument_list|)
decl_stmt|;
comment|// The mock bundle context for the client bundle
name|BundleContext
name|clientBC
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|clientBC
operator|.
name|getService
argument_list|(
name|sr
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|testService
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|clientBC
argument_list|)
expr_stmt|;
comment|// The mock bundle that consumes the service
name|Bundle
name|clientBundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|clientBundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|2999L
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|clientBundle
operator|.
name|getBundleContext
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|clientBC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|clientBundle
operator|.
name|loadClass
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|objClsMap
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|clientBundle
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create the proxy for the service
name|gpc
operator|.
name|proxyIfNotAlreadyProxied
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpc
operator|.
name|proxyMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The actual proxy creation is done asynchronously.
name|GuardProxyCatalog
operator|.
name|ServiceRegistrationHolder
name|holder
init|=
name|gpc
operator|.
name|proxyMap
operator|.
name|get
argument_list|(
name|serviceID
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"The registration shouldn't have happened yet"
argument_list|,
name|holder
operator|.
name|registration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|gpc
operator|.
name|createProxyQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mimic the thread that works the queue to create the proxy
name|GuardProxyCatalog
operator|.
name|CreateProxyRunnable
name|runnable
init|=
name|gpc
operator|.
name|createProxyQueue
operator|.
name|take
argument_list|()
decl_stmt|;
name|ProxyManager
name|pm
init|=
name|getProxyManager
argument_list|()
decl_stmt|;
name|runnable
operator|.
name|run
argument_list|(
name|pm
argument_list|)
expr_stmt|;
comment|// The runnable should have put the actual registration in the holder
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|proxySR
init|=
name|holder
operator|.
name|registration
operator|.
name|getReference
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|expectedProxyProps
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|GuardProxyCatalog
operator|.
name|SERVICE_GUARD_ROLES_PROPERTY
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"The roles property should have been overwritten"
argument_list|,
operator|!
name|Arrays
operator|.
name|asList
argument_list|(
literal|"everyone"
argument_list|)
operator|.
name|equals
argument_list|(
name|proxySR
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedProxyProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|proxySR
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that the proxy registration was done on the original provider bundle's context
name|EasyMock
operator|.
name|verify
argument_list|(
name|providerBC
argument_list|)
expr_stmt|;
comment|// Test that the actual proxy invokes the original service...
name|ServiceFactory
name|proxyServiceSF
init|=
operator|(
name|ServiceFactory
operator|)
name|serviceMap
operator|.
name|get
argument_list|(
name|proxySR
argument_list|)
decl_stmt|;
name|Object
name|proxyService
init|=
name|proxyServiceSF
operator|.
name|getService
argument_list|(
name|clientBundle
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
literal|"The proxy should not be the same object as the original service"
argument_list|,
name|testService
argument_list|,
name|proxyService
argument_list|)
expr_stmt|;
return|return
name|proxyService
return|;
block|}
specifier|private
name|ProxyManager
name|getProxyManager
parameter_list|()
block|{
return|return
operator|new
name|AsmProxyManager
argument_list|()
return|;
block|}
specifier|private
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getServiceReferenceProperties
parameter_list|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|sr
parameter_list|)
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|dict
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|sr
operator|.
name|getPropertyKeys
argument_list|()
control|)
block|{
name|dict
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sr
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dict
return|;
block|}
specifier|private
name|Bundle
name|mockBundle
parameter_list|(
name|long
name|id
parameter_list|)
block|{
name|Bundle
name|bundle
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|id
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
return|return
name|bundle
return|;
block|}
specifier|private
name|BundleContext
name|mockBundleContext
parameter_list|()
throws|throws
name|InvalidSyntaxException
block|{
return|return
name|mockBundleContext
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
name|BundleContext
name|mockBundleContext
parameter_list|(
name|Bundle
name|b
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|89334L
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Filter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|b
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
return|return
name|bc
return|;
block|}
specifier|private
name|BundleContext
name|openStrictMockBundleContext
parameter_list|(
name|Bundle
name|b
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Filter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|b
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
return|return
name|bc
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|private
name|BundleContext
name|mockConfigAdminBundleContext
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
modifier|...
name|configs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|Configuration
index|[]
name|configurations
init|=
operator|new
name|Configuration
index|[
name|configs
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|conf
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|conf
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|configs
index|[
name|i
index|]
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|conf
operator|.
name|getPid
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|String
operator|)
name|configs
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|configurations
index|[
name|i
index|]
operator|=
name|conf
expr_stmt|;
block|}
if|if
condition|(
name|configurations
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|configurations
operator|=
literal|null
expr_stmt|;
block|}
name|ConfigurationAdmin
name|ca
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ca
operator|.
name|listConfigurations
argument_list|(
literal|"(&(service.pid=org.apache.karaf.service.acl.*)(service.guard=*))"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|configurations
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|ca
argument_list|)
expr_stmt|;
specifier|final
name|ServiceReference
name|caSR
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|caSR
argument_list|)
expr_stmt|;
name|Bundle
name|b
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|877342449L
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|b
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Filter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|String
name|cmFilter
init|=
literal|"(&(objectClass="
operator|+
name|ConfigurationAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
operator|+
literal|"(!("
operator|+
name|GuardProxyCatalog
operator|.
name|PROXY_SERVICE_KEY
operator|+
literal|"=*)))"
decl_stmt|;
name|bc
operator|.
name|addServiceListener
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceListener
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|cmFilter
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|cmFilter
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|caSR
block|}
block|)
function|.anyTimes
parameter_list|()
function|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getService
argument_list|(
name|caSR
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|ca
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
parameter_list|(
name|bc
parameter_list|)
constructor_decl|;
return|return
name|bc
return|;
block|}
end_class

begin_function
specifier|private
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|mockServiceReference
parameter_list|(
specifier|final
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
return|return
name|mockServiceReference
argument_list|(
name|props
argument_list|,
name|Object
operator|.
name|class
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|ServiceReference
argument_list|<
name|T
argument_list|>
name|mockServiceReference
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
return|return
operator|(
name|ServiceReference
argument_list|<
name|T
argument_list|>
operator|)
name|mockServiceReference
argument_list|(
literal|null
argument_list|,
name|props
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|mockServiceReference
parameter_list|(
name|Bundle
name|providerBundle
parameter_list|,
specifier|final
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceProps
parameter_list|)
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|sr
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Make sure the properties are 'live' in that if they change the reference changes too
name|EasyMock
operator|.
name|expect
argument_list|(
name|sr
operator|.
name|getPropertyKeys
argument_list|()
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
index|[]
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|Collections
operator|.
name|list
argument_list|(
name|serviceProps
operator|.
name|keys
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|sr
operator|.
name|getProperty
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|serviceProps
operator|.
name|get
argument_list|(
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
if|if
condition|(
name|providerBundle
operator|!=
literal|null
condition|)
block|{
name|EasyMock
operator|.
name|expect
argument_list|(
name|sr
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|providerBundle
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
block|}
name|EasyMock
operator|.
name|replay
argument_list|(
name|sr
argument_list|)
expr_stmt|;
return|return
name|sr
return|;
block|}
end_function

begin_class
class|class
name|MockCreateProxyRunnable
implements|implements
name|CreateProxyRunnable
block|{
specifier|private
specifier|final
name|long
name|orgServiceID
decl_stmt|;
specifier|public
name|MockCreateProxyRunnable
parameter_list|(
name|long
name|serviceID
parameter_list|)
block|{
name|orgServiceID
operator|=
name|serviceID
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getOriginalServiceID
parameter_list|()
block|{
return|return
name|orgServiceID
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|ProxyManager
name|pm
parameter_list|)
throws|throws
name|Exception
block|{}
block|}
end_class

begin_interface
specifier|public
interface|interface
name|TestServiceAPI
block|{
name|String
name|doit
parameter_list|()
function_decl|;
block|}
end_interface

begin_class
specifier|public
class|class
name|TestService
implements|implements
name|TestServiceAPI
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|()
block|{
return|return
literal|"Doing it"
return|;
block|}
block|}
end_class

begin_interface
specifier|public
interface|interface
name|TestServiceAPI2
block|{
name|String
name|doit
parameter_list|(
name|String
name|s
parameter_list|)
function_decl|;
block|}
end_interface

begin_interface
specifier|public
interface|interface
name|TestServiceAPI3
block|{
name|int
name|foo
parameter_list|()
function_decl|;
name|int
name|foo
parameter_list|(
name|int
name|f
parameter_list|)
function_decl|;
name|int
name|bar
parameter_list|()
function_decl|;
block|}
end_interface

begin_class
class|class
name|TestService3
implements|implements
name|TestServiceAPI3
block|{
specifier|public
name|int
name|foo
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
specifier|public
name|int
name|foo
parameter_list|(
name|int
name|f
parameter_list|)
block|{
return|return
operator|-
name|f
return|;
block|}
specifier|public
name|int
name|bar
parameter_list|()
block|{
return|return
literal|99
return|;
block|}
block|}
end_class

begin_class
specifier|public
class|class
name|TestObjectWithoutInterface
block|{
specifier|public
name|long
name|compute
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
operator|-
name|l
return|;
block|}
block|}
end_class

begin_class
specifier|public
class|class
name|CombinedTestService
extends|extends
name|TestObjectWithoutInterface
implements|implements
name|TestServiceAPI
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|()
block|{
return|return
literal|"Doing it"
return|;
block|}
block|}
end_class

begin_class
specifier|private
specifier|abstract
class|class
name|AbstractService
implements|implements
name|TestServiceAPI
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|()
block|{
return|return
literal|"Doing it"
return|;
block|}
block|}
end_class

begin_class
specifier|public
class|class
name|EmptyPublicTestService
extends|extends
name|AbstractService
block|{}
end_class

begin_class
specifier|public
class|class
name|DescendantTestService
extends|extends
name|EmptyPublicTestService
block|{}
end_class

begin_class
specifier|private
class|class
name|PrivateTestService
implements|implements
name|TestServiceAPI
block|{
annotation|@
name|Override
specifier|public
name|String
name|doit
parameter_list|()
block|{
return|return
literal|"Doing it"
return|;
block|}
block|}
end_class

begin_class
specifier|private
class|class
name|PrivateTestServiceNoDirectInterfaces
extends|extends
name|PrivateTestService
block|{}
end_class

begin_class
specifier|public
specifier|final
class|class
name|FinalTestService
extends|extends
name|AbstractService
implements|implements
name|TestServiceAPI
block|{}
end_class

begin_class
specifier|public
class|class
name|ClassWithFinalMethod
block|{
specifier|public
name|void
name|foo
parameter_list|()
block|{}
specifier|public
specifier|final
name|String
name|bar
parameter_list|()
block|{
return|return
literal|"Bar"
return|;
block|}
block|}
end_class

begin_class
specifier|public
class|class
name|ClassWithPrivateMethod
block|{
specifier|public
name|void
name|foo
parameter_list|()
block|{}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|bar
parameter_list|()
block|{}
block|}
end_class

unit|}
end_unit

