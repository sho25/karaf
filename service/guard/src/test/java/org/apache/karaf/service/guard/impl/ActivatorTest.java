begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|service
operator|.
name|guard
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|hooks
operator|.
name|service
operator|.
name|EventListenerHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|hooks
operator|.
name|service
operator|.
name|FindHook
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|ActivatorTest
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testStartActivator
parameter_list|()
throws|throws
name|Exception
block|{
comment|// keep the old properties. Note that the Properties 'copy constructor' new Properties(props)
comment|// doesn't actually copy, hence the awkward setup here...
name|Properties
name|oldProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|oldProps
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|GuardProxyCatalog
operator|.
name|KARAF_SECURED_SERVICES_SYSPROP
argument_list|,
literal|"(foo=bar)"
argument_list|)
expr_stmt|;
name|Bundle
name|b
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Bundle
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|768L
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|b
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|EasyMock
operator|.
name|anyObject
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Filter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|EventListenerHook
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|EventListenerHook
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isNull
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|registerService
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|FindHook
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|FindHook
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isNull
argument_list|(
name|Dictionary
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|Activator
name|a
init|=
operator|new
name|Activator
argument_list|()
decl_stmt|;
name|a
operator|.
name|start
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|a
operator|.
name|guardProxyCatalog
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|a
operator|.
name|guardingEventHook
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|a
operator|.
name|guardingFindHook
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|bc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperties
argument_list|(
name|oldProps
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStartActivatorNoServicesSecured
parameter_list|()
throws|throws
name|Exception
block|{
comment|// keep the old properties. Note that the Properties 'copy constructor' new Properties(props)
comment|// doesn't actually copy, hence the awkward setup here...
name|Properties
name|oldProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|oldProps
operator|.
name|putAll
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Properties
name|newProps
init|=
name|removeProperties
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|,
name|GuardProxyCatalog
operator|.
name|KARAF_SECURED_SERVICES_SYSPROP
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperties
argument_list|(
name|newProps
argument_list|)
expr_stmt|;
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createNiceMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|Activator
name|a
init|=
operator|new
name|Activator
argument_list|()
decl_stmt|;
name|a
operator|.
name|start
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|a
operator|.
name|guardProxyCatalog
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setProperties
argument_list|(
name|oldProps
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopActivator
parameter_list|()
throws|throws
name|Exception
block|{
name|Activator
name|a
init|=
operator|new
name|Activator
argument_list|()
decl_stmt|;
name|a
operator|.
name|guardProxyCatalog
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|GuardProxyCatalog
operator|.
name|class
argument_list|)
expr_stmt|;
name|a
operator|.
name|guardProxyCatalog
operator|.
name|close
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|a
operator|.
name|guardProxyCatalog
argument_list|)
expr_stmt|;
name|a
operator|.
name|stop
argument_list|(
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|a
operator|.
name|guardProxyCatalog
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|removeProperties
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
modifier|...
name|keys
parameter_list|)
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|p
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

