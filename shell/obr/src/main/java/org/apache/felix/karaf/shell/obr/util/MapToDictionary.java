begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|obr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * This is a simple class that implements a<tt>Dictionary</tt>  * from a<tt>Map</tt>. The resulting dictionary is immutatable. **/
end_comment

begin_class
specifier|public
class|class
name|MapToDictionary
extends|extends
name|Dictionary
block|{
comment|/**      * Map source.     **/
specifier|private
name|Map
name|m_map
init|=
literal|null
decl_stmt|;
specifier|public
name|MapToDictionary
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|m_map
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|void
name|setSourceMap
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|m_map
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|Enumeration
name|elements
parameter_list|()
block|{
if|if
condition|(
name|m_map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|IteratorToEnumeration
argument_list|(
name|m_map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|m_map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|m_map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
if|if
condition|(
name|m_map
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|m_map
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Enumeration
name|keys
parameter_list|()
block|{
if|if
condition|(
name|m_map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|IteratorToEnumeration
argument_list|(
name|m_map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
if|if
condition|(
name|m_map
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|m_map
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

