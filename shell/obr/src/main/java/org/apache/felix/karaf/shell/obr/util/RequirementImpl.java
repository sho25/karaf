begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|obr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|Capability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|obr
operator|.
name|Requirement
import|;
end_import

begin_comment
comment|/**  * @version $Rev$ $Date$  */
end_comment

begin_class
specifier|public
class|class
name|RequirementImpl
implements|implements
name|Requirement
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|multiple
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|optional
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|extend
decl_stmt|;
specifier|private
specifier|final
name|String
name|comment
decl_stmt|;
specifier|public
name|RequirementImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|filter
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RequirementImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|boolean
name|multiple
parameter_list|,
name|boolean
name|optional
parameter_list|,
name|boolean
name|extend
parameter_list|,
name|String
name|comment
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|multiple
operator|=
name|multiple
expr_stmt|;
name|this
operator|.
name|optional
operator|=
name|optional
expr_stmt|;
name|this
operator|.
name|extend
operator|=
name|extend
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|filter
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isMultiple
parameter_list|()
block|{
return|return
name|multiple
return|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
specifier|public
name|boolean
name|isExtend
parameter_list|()
block|{
return|return
name|extend
return|;
block|}
specifier|public
name|String
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|(
name|Capability
name|capability
parameter_list|)
block|{
return|return
name|filter
operator|.
name|match
argument_list|(
operator|new
name|MapToDictionary
argument_list|(
name|capability
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

