begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|help
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|HelpProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|NameScoping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|util
operator|.
name|IndentFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_class
specifier|public
class|class
name|HelpSystem
implements|implements
name|HelpProvider
block|{
specifier|private
name|BundleContext
name|context
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|GogoCommandHelper
argument_list|>
name|helpers
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|GogoCommandHelper
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|HelpSystem
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
try|try
block|{
name|ServiceTracker
name|commandTracker
init|=
name|trackOSGiCommands
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|commandTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|HelpProvider
argument_list|>
name|getProviders
parameter_list|()
block|{
name|ServiceReference
argument_list|<
name|HelpProvider
argument_list|>
index|[]
name|refs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|refs
operator|=
name|context
operator|.
name|getServiceReferences
argument_list|(
name|HelpProvider
operator|.
name|class
argument_list|,
literal|null
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|ServiceReference
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|refs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HelpProvider
argument_list|>
name|providers
init|=
operator|new
name|ArrayList
argument_list|<
name|HelpProvider
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|refs
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|providers
operator|.
name|add
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|refs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|providers
return|;
block|}
specifier|public
name|String
name|getHelp
parameter_list|(
specifier|final
name|CommandSession
name|session
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|session
operator|.
name|put
argument_list|(
name|GOGO_COMMAND_HELPERS
argument_list|,
name|helpers
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"%root%"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
literal|"${"
operator|+
name|path
operator|+
literal|"}"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|HelpProvider
argument_list|>
name|providers
init|=
name|getProviders
argument_list|()
decl_stmt|;
name|InterpolationHelper
operator|.
name|performSubstitution
argument_list|(
name|props
argument_list|,
operator|new
name|InterpolationHelper
operator|.
name|SubstitutionCallback
argument_list|()
block|{
specifier|public
name|String
name|getValue
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|HelpProvider
name|hp
range|:
name|providers
control|)
block|{
name|String
name|result
init|=
name|hp
operator|.
name|getHelp
argument_list|(
name|session
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|removeNewLine
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|props
operator|.
name|get
argument_list|(
literal|"data"
argument_list|)
return|;
block|}
specifier|private
name|String
name|removeNewLine
parameter_list|(
name|String
name|help
parameter_list|)
block|{
if|if
condition|(
name|help
operator|!=
literal|null
operator|&&
name|help
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|help
operator|=
name|help
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|help
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|help
return|;
block|}
specifier|public
specifier|static
name|String
name|GOGO_COMMAND_HELPERS
init|=
literal|"gogocommand_helpers"
decl_stmt|;
specifier|private
name|ServiceTracker
name|trackOSGiCommands
parameter_list|(
specifier|final
name|BundleContext
name|context
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|Filter
name|filter
init|=
name|context
operator|.
name|createFilter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=*)(%s=*))"
argument_list|,
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|,
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ServiceTracker
argument_list|(
name|context
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|)
block|{
name|Object
name|scope
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
decl_stmt|;
name|Object
name|function
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Object
name|commandObject
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
operator|&&
name|function
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|function
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|f
range|:
operator|(
operator|(
name|Object
index|[]
operator|)
name|function
operator|)
control|)
block|{
name|GogoCommandHelper
name|gogoCommandHelper
init|=
operator|new
name|GogoCommandHelper
argument_list|(
name|commandObject
argument_list|,
operator|(
name|String
operator|)
name|scope
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|helpers
operator|.
name|put
argument_list|(
name|scope
operator|+
literal|":"
operator|+
name|f
operator|.
name|toString
argument_list|()
argument_list|,
name|gogoCommandHelper
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|GogoCommandHelper
name|gogoCommandHelper
init|=
operator|new
name|GogoCommandHelper
argument_list|(
name|commandObject
argument_list|,
operator|(
name|String
operator|)
name|scope
argument_list|,
name|function
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|helpers
operator|.
name|put
argument_list|(
name|scope
operator|+
literal|":"
operator|+
name|function
operator|.
name|toString
argument_list|()
argument_list|,
name|gogoCommandHelper
argument_list|)
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|super
operator|.
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
class|class
name|GogoCommandHelper
block|{
specifier|private
name|Object
name|commandObject
decl_stmt|;
specifier|private
name|String
name|scope
decl_stmt|;
specifier|private
name|String
name|function
decl_stmt|;
specifier|private
name|String
name|description
init|=
literal|""
decl_stmt|;
specifier|public
name|GogoCommandHelper
parameter_list|(
name|Object
name|commandObject
parameter_list|,
name|String
name|scope
parameter_list|,
name|String
name|function
parameter_list|)
block|{
name|this
operator|.
name|commandObject
operator|=
name|commandObject
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|function
expr_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|commandObject
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|function
argument_list|)
condition|)
block|{
name|Descriptor
name|descriptor
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|Descriptor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptor
operator|!=
literal|null
condition|)
block|{
name|description
operator|=
name|descriptor
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|void
name|printUsage
parameter_list|(
name|CommandSession
name|session
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|Terminal
name|term
init|=
name|session
operator|!=
literal|null
condition|?
operator|(
name|Terminal
operator|)
name|session
operator|.
name|get
argument_list|(
literal|".jline.terminal"
argument_list|)
else|:
literal|null
decl_stmt|;
name|int
name|termWidth
init|=
name|term
operator|!=
literal|null
condition|?
name|term
operator|.
name|getWidth
argument_list|()
else|:
literal|80
decl_stmt|;
name|boolean
name|globalScope
init|=
name|NameScoping
operator|.
name|isGlobalScope
argument_list|(
name|session
argument_list|,
name|scope
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|arguments
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|commandObject
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|function
argument_list|)
condition|)
block|{
name|Annotation
index|[]
index|[]
name|annotations
init|=
name|m
operator|.
name|getParameterAnnotations
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramClass
range|:
name|m
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
name|String
name|argumentDescription
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Annotation
name|annotation
range|:
name|annotations
index|[
name|i
operator|++
index|]
control|)
block|{
if|if
condition|(
name|annotation
operator|.
name|annotationType
argument_list|()
operator|.
name|equals
argument_list|(
name|Descriptor
operator|.
name|class
argument_list|)
condition|)
block|{
name|argumentDescription
operator|=
operator|(
operator|(
name|Descriptor
operator|)
name|annotation
operator|)
operator|.
name|value
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|arguments
operator|.
name|put
argument_list|(
name|paramClass
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|argumentDescription
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"DESCRIPTION"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
if|if
condition|(
name|globalScope
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|function
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|scope
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|function
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"ARGUMENTS"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|argumentName
range|:
name|arguments
operator|.
name|keySet
argument_list|()
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|argumentName
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|IndentFormatter
operator|.
name|printFormatted
argument_list|(
literal|"                "
argument_list|,
name|arguments
operator|.
name|get
argument_list|(
name|argumentName
argument_list|)
argument_list|,
name|termWidth
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

