begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|admin
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|admin
operator|.
name|InstanceSettings
import|;
end_import

begin_class
specifier|public
class|class
name|AdminServiceImplTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testHandleFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|AdminServiceImpl
name|as
init|=
operator|new
name|AdminServiceImpl
argument_list|()
decl_stmt|;
name|File
name|f
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|".test"
argument_list|)
decl_stmt|;
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"featuresBoot"
argument_list|,
literal|"abc,def "
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"featuresRepositories"
argument_list|,
literal|"somescheme://xyz"
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|p
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|"Test comment"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|InstanceSettings
name|s
init|=
operator|new
name|InstanceSettings
argument_list|(
literal|8122
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
decl_stmt|;
name|as
operator|.
name|handleFeatures
argument_list|(
name|f
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|Properties
name|p2
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|p2
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|p2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abc,def,test"
argument_list|,
name|p2
operator|.
name|get
argument_list|(
literal|"featuresBoot"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"somescheme://xyz"
argument_list|,
name|p2
operator|.
name|get
argument_list|(
literal|"featuresRepositories"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

