begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|admin
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|admin
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|admin
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_class
specifier|public
class|class
name|AdminServiceImpl
implements|implements
name|AdminService
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STORAGE_FILE
init|=
literal|"instance.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AdminServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Instance
argument_list|>
name|instances
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Instance
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|defaultPortStart
init|=
literal|8101
decl_stmt|;
specifier|private
name|File
name|storageLocation
decl_stmt|;
specifier|public
name|File
name|getStorageLocation
parameter_list|()
block|{
return|return
name|storageLocation
return|;
block|}
specifier|public
name|void
name|setStorageLocation
parameter_list|(
name|File
name|storage
parameter_list|)
block|{
name|this
operator|.
name|storageLocation
operator|=
name|storage
expr_stmt|;
block|}
specifier|private
name|Properties
name|loadStorage
parameter_list|(
name|File
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|saveStorage
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|props
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|"Admin Service storage"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|File
name|storageFile
init|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|STORAGE_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|storageFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|storageFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Instances storage location should be a file: "
operator|+
name|storageFile
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|Properties
name|storage
init|=
name|loadStorage
argument_list|(
name|storageFile
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|storage
operator|.
name|getProperty
argument_list|(
literal|"count"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|defaultPortStart
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|storage
operator|.
name|getProperty
argument_list|(
literal|"port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|defaultPortStart
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Instance
argument_list|>
name|newInstances
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Instance
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|storage
operator|.
name|getProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|loc
init|=
name|storage
operator|.
name|getProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|pid
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|storage
operator|.
name|getProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|InstanceImpl
name|instance
init|=
operator|new
name|InstanceImpl
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
name|pid
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|instance
operator|.
name|attach
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|newInstances
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
name|instances
operator|=
name|newInstances
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to reload Karaf instance list"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|Instance
name|createInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Instance '"
operator|+
name|name
operator|+
literal|"' already exists"
argument_list|)
throw|;
block|}
name|String
name|loc
init|=
name|location
operator|!=
literal|null
condition|?
name|location
else|:
name|name
decl_stmt|;
name|File
name|karafBase
init|=
operator|new
name|File
argument_list|(
name|loc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|karafBase
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|karafBase
operator|=
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|loc
argument_list|)
expr_stmt|;
block|}
name|int
name|sshPort
init|=
name|port
decl_stmt|;
if|if
condition|(
name|sshPort
operator|<=
literal|0
condition|)
block|{
name|sshPort
operator|=
operator|++
name|defaultPortStart
expr_stmt|;
block|}
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating new instance on port "
argument_list|)
operator|.
name|a
argument_list|(
name|sshPort
argument_list|)
operator|.
name|a
argument_list|(
literal|" at: "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|karafBase
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"bin"
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"system"
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"deploy"
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|karafBase
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/config.properties"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/java.util.logging.properties"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.felix.karaf.log.cfg"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.felix.karaf.features.cfg"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.felix.karaf.management.cfg"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.ops4j.pax.logging.cfg"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.ops4j.pax.url.mvn.cfg"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/startup.properties"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|copyResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/users.properties"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.name}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.home}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.base}"
argument_list|,
name|karafBase
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.sshPort}"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sshPort
argument_list|)
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/system.properties"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"etc/org.apache.felix.karaf.shell.cfg"
argument_list|,
name|props
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Win"
argument_list|)
condition|)
block|{
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/start.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/stop.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/start"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|copyFilteredResourceToDir
argument_list|(
name|karafBase
argument_list|,
literal|"bin/stop"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/start"
argument_list|)
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"bin/stop"
argument_list|)
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
block|}
name|Instance
name|instance
init|=
operator|new
name|InstanceImpl
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|karafBase
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|instances
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|saveState
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
specifier|public
specifier|synchronized
name|Instance
index|[]
name|getInstances
parameter_list|()
block|{
return|return
name|instances
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Instance
index|[
literal|0
index|]
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Instance
name|getInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|instances
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|synchronized
name|void
name|forget
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|instances
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|void
name|saveState
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|storage
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Instance
index|[]
name|data
init|=
name|getInstances
argument_list|()
decl_stmt|;
name|storage
operator|.
name|setProperty
argument_list|(
literal|"port"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|defaultPortStart
argument_list|)
argument_list|)
expr_stmt|;
name|storage
operator|.
name|setProperty
argument_list|(
literal|"count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|data
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|storage
operator|.
name|setProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|,
name|data
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|setProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".loc"
argument_list|,
name|data
index|[
name|i
index|]
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|storage
operator|.
name|setProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|data
index|[
name|i
index|]
operator|.
name|getPid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|saveStorage
argument_list|(
name|storage
argument_list|,
operator|new
name|File
argument_list|(
name|storageLocation
argument_list|,
name|STORAGE_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyResourceToDir
parameter_list|(
name|File
name|target
parameter_list|,
name|String
name|resource
parameter_list|,
name|boolean
name|text
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating file: "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/felix/karaf/shell/admin/"
operator|+
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|text
condition|)
block|{
comment|// Read it line at a time so that we can use the platform line ending when we write it out.
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Binary so just write it out the way it came in.
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|println
parameter_list|(
name|String
name|st
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|st
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyFilteredResourceToDir
parameter_list|(
name|File
name|target
parameter_list|,
name|String
name|resource
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|,
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating file: "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/apache/felix/karaf/shell/admin/"
operator|+
name|resource
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Read it line at a time so that we can use the platform line ending when we write it out.
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|line
operator|=
name|filter
argument_list|(
name|line
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|OutputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
block|}
specifier|private
name|String
name|filter
parameter_list|(
name|String
name|line
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|i
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|p1
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|>=
literal|0
condition|)
block|{
name|String
name|l1
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|String
name|l2
init|=
name|line
operator|.
name|substring
argument_list|(
name|p1
operator|+
name|i
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|=
name|l1
operator|+
name|i
operator|.
name|getValue
argument_list|()
operator|+
name|l2
expr_stmt|;
block|}
block|}
return|return
name|line
return|;
block|}
specifier|private
name|void
name|mkdir
parameter_list|(
name|File
name|karafBase
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating dir:  "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|chmod
parameter_list|(
name|File
name|serviceFile
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|command
argument_list|(
literal|"chmod"
argument_list|,
name|mode
argument_list|,
name|serviceFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|Process
name|p
init|=
name|builder
operator|.
name|start
argument_list|()
decl_stmt|;
comment|// gnodet: Fix SMX4KNL-46: cpu goes to 100% after running the 'admin create' command
comment|// Not sure exactly what happens, but commenting the process io redirection seems
comment|// to work around the problem.
comment|//
comment|//PumpStreamHandler handler = new PumpStreamHandler(io.inputStream, io.outputStream, io.errorStream);
comment|//handler.attach(p);
comment|//handler.start();
name|int
name|status
init|=
name|p
operator|.
name|waitFor
argument_list|()
decl_stmt|;
comment|//handler.stop();
return|return
name|status
return|;
block|}
block|}
end_class

end_unit

