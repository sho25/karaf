begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|completer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|basic
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|basic
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|basic
operator|.
name|SimpleSubShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|CommandSessionHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|ExitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|SessionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|CompletionTest
extends|extends
name|CompleterTestSupport
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSubShellCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
literal|"SCOPE"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|SessionProperties
operator|.
name|COMPLETION_MODE
argument_list|,
literal|"subshell"
argument_list|)
expr_stmt|;
name|CommandSessionHolder
operator|.
name|setSession
argument_list|(
name|context
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"*"
argument_list|,
operator|new
name|SimpleSubShell
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"*"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|ExitAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"exit"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"my-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyActionTwoArguments
operator|.
name|class
argument_list|)
argument_list|,
literal|"one-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"one-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyActionTwoArguments
operator|.
name|class
argument_list|)
argument_list|,
literal|"another"
argument_list|)
expr_stmt|;
name|Completer
name|comp
init|=
operator|new
name|CommandsCompleter
argument_list|(
name|context
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|execute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"my-action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"exit "
argument_list|,
literal|"my-action "
argument_list|,
literal|"one-action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"an"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--check"
argument_list|,
literal|"--foo"
argument_list|,
literal|"--help"
argument_list|,
literal|"--integer"
argument_list|,
literal|"--string"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my-action --"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--dummy"
argument_list|,
literal|"--help"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"one-action --"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|execute
argument_list|(
literal|"exit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"exit "
argument_list|,
literal|"foo "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"an"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
literal|"SCOPE"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|SessionProperties
operator|.
name|COMPLETION_MODE
argument_list|,
literal|"first"
argument_list|)
expr_stmt|;
name|CommandSessionHolder
operator|.
name|setSession
argument_list|(
name|context
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"*"
argument_list|,
operator|new
name|SimpleSubShell
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"*"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|ExitAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"exit"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"my-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyActionTwoArguments
operator|.
name|class
argument_list|)
argument_list|,
literal|"one-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"one-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyActionTwoArguments
operator|.
name|class
argument_list|)
argument_list|,
literal|"another"
argument_list|)
expr_stmt|;
name|Completer
name|comp
init|=
operator|new
name|CommandsCompleter
argument_list|(
name|context
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|execute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"my-action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"my-action "
argument_list|,
literal|"one-action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"another "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"an"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--check"
argument_list|,
literal|"--foo"
argument_list|,
literal|"--help"
argument_list|,
literal|"--integer"
argument_list|,
literal|"--string"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my-action --"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--dummy"
argument_list|,
literal|"--help"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"one-action --"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|execute
argument_list|(
literal|"exit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"my-action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*:exit"
argument_list|,
literal|"*:foo"
argument_list|,
literal|"another"
argument_list|,
literal|"bar:another"
argument_list|,
literal|"bar:one-action"
argument_list|,
literal|"exit"
argument_list|,
literal|"foo"
argument_list|,
literal|"foo:my-action"
argument_list|,
literal|"foo:one-action"
argument_list|,
literal|"my-action"
argument_list|,
literal|"one-action"
argument_list|,
literal|"one-action"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"another "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"an"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobalCompletion
parameter_list|()
throws|throws
name|Exception
block|{
name|Context
name|context
init|=
operator|new
name|Context
argument_list|()
decl_stmt|;
name|context
operator|.
name|set
argument_list|(
literal|"SCOPE"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|context
operator|.
name|set
argument_list|(
name|SessionProperties
operator|.
name|COMPLETION_MODE
argument_list|,
literal|"global"
argument_list|)
expr_stmt|;
name|CommandSessionHolder
operator|.
name|setSession
argument_list|(
name|context
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"*"
argument_list|,
operator|new
name|SimpleSubShell
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"*"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|ExitAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"exit"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"my-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyActionTwoArguments
operator|.
name|class
argument_list|)
argument_list|,
literal|"one-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"one-action"
argument_list|)
expr_stmt|;
name|context
operator|.
name|addCommand
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyActionTwoArguments
operator|.
name|class
argument_list|)
argument_list|,
literal|"another"
argument_list|)
expr_stmt|;
name|Completer
name|comp
init|=
operator|new
name|CommandsCompleter
argument_list|(
name|context
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|execute
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"my-action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*:exit"
argument_list|,
literal|"*:foo"
argument_list|,
literal|"another"
argument_list|,
literal|"bar:another"
argument_list|,
literal|"bar:one-action"
argument_list|,
literal|"exit"
argument_list|,
literal|"foo"
argument_list|,
literal|"foo:my-action"
argument_list|,
literal|"foo:one-action"
argument_list|,
literal|"my-action"
argument_list|,
literal|"one-action"
argument_list|,
literal|"one-action"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"another "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"an"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--check"
argument_list|,
literal|"--foo"
argument_list|,
literal|"--help"
argument_list|,
literal|"--integer"
argument_list|,
literal|"--string"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my-action --"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--dummy"
argument_list|,
literal|"--help"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"one-action --"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|execute
argument_list|(
literal|"exit"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"my-action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"*:exit"
argument_list|,
literal|"*:foo"
argument_list|,
literal|"another"
argument_list|,
literal|"bar:another"
argument_list|,
literal|"bar:one-action"
argument_list|,
literal|"exit"
argument_list|,
literal|"foo"
argument_list|,
literal|"foo:my-action"
argument_list|,
literal|"foo:one-action"
argument_list|,
literal|"my-action"
argument_list|,
literal|"one-action"
argument_list|,
literal|"one-action"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"another "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"an"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MyAction
implements|implements
name|Action
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-f"
argument_list|,
name|aliases
operator|=
block|{
literal|"--foo"
block|}
argument_list|)
name|int
name|f
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-c"
argument_list|,
name|aliases
operator|=
literal|"--check"
argument_list|)
name|boolean
name|check
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-s"
argument_list|,
name|aliases
operator|=
literal|"--string"
argument_list|)
name|String
name|string
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-i"
argument_list|,
name|aliases
operator|=
literal|"--integer"
argument_list|)
name|String
name|integer
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
name|CommandSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyActionTwoArguments
implements|implements
name|Action
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--dummy"
argument_list|)
name|boolean
name|dummy
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"one"
argument_list|,
name|description
operator|=
literal|"one description"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|one
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|name
operator|=
literal|"two"
argument_list|,
name|description
operator|=
literal|"two description"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|two
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
name|CommandSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

