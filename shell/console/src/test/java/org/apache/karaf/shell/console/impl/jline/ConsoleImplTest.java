begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|impl
operator|.
name|jline
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|api
operator|.
name|CommandSessionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|threadio
operator|.
name|ThreadIOImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|impl
operator|.
name|jline
operator|.
name|ConsoleImpl
operator|.
name|DelegateSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|security
operator|.
name|impl
operator|.
name|SecuredCommandProcessorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|ConsoleImplTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testConsoleImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|cmRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cmRef
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"myscope"
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cmRef
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"myfunction"
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cmRef
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[]
name|cmRefs
init|=
operator|new
name|ServiceReference
index|[]
block|{
name|cmRef
block|}
decl_stmt|;
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReference
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getService
argument_list|(
operator|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|bc
operator|.
name|addServiceListener
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceListener
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReferences
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|,
literal|"(&(osgi.command.scope=*)(osgi.command.function=*)"
operator|+
literal|"(|(org.apache.karaf.service.guard.roles=myrole)(!(org.apache.karaf.service.guard.roles=*))))"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|cmRefs
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|Converter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReferences
argument_list|(
name|CommandSessionListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Filter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
specifier|final
name|ConsoleImpl
name|console
init|=
operator|new
name|ConsoleImpl
argument_list|(
literal|null
argument_list|,
operator|new
name|ThreadIOImpl
argument_list|()
argument_list|,
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|,
literal|null
argument_list|,
literal|"UTF-8"
argument_list|,
literal|null
argument_list|,
name|bc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|console
operator|.
name|session
operator|instanceof
name|DelegateSession
argument_list|)
expr_stmt|;
name|console
operator|.
name|session
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
specifier|final
name|DelegateSession
name|ds
init|=
operator|(
name|DelegateSession
operator|)
name|console
operator|.
name|session
decl_stmt|;
name|assertNull
argument_list|(
literal|"Precondition"
argument_list|,
name|ds
operator|.
name|delegate
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"myrole"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|SecuredCommandProcessorImpl
name|secCP
init|=
name|console
operator|.
name|createSecuredCommandProcessor
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ds
operator|.
name|delegate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Attributes set before the delegate was set should have been transferred"
argument_list|,
literal|"bar"
argument_list|,
name|ds
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Attributes set before the delegate was set should have been transferred"
argument_list|,
literal|"bar"
argument_list|,
name|ds
operator|.
name|delegate
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|ds
operator|.
name|delegate
operator|.
name|getConsole
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|System
operator|.
name|out
argument_list|,
name|ds
operator|.
name|getConsole
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secCP
operator|.
name|getCommands
argument_list|()
operator|.
name|contains
argument_list|(
literal|"myscope:myfunction"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelegateSession
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegateSession
name|ds
init|=
operator|new
name|DelegateSession
argument_list|()
decl_stmt|;
name|ds
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|ds
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|TestSession
name|ts
init|=
operator|new
name|TestSession
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Precondition"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setDelegate
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"put(a,b)"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"put(c,d)"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|execute
argument_list|(
literal|"hello 1234"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"execute(hello 1234)"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"close"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|getKeyboard
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getKeyboard"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|getConsole
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getConsole"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|get
argument_list|(
literal|"xyz"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"get(xyz)"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|format
argument_list|(
literal|"foo"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"format(foo,12)"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
name|ds
operator|.
name|convert
argument_list|(
name|TestSession
operator|.
name|class
argument_list|,
literal|"a string"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"convert(TestSession,a string)"
argument_list|,
name|ts
operator|.
name|lastInvoked
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|TestSession
implements|implements
name|CommandSession
block|{
name|String
name|lastInvoked
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|(
name|CharSequence
name|commandline
parameter_list|)
throws|throws
name|Exception
block|{
name|lastInvoked
operator|=
literal|"execute("
operator|+
name|commandline
operator|+
literal|")"
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|lastInvoked
operator|=
literal|"close"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getKeyboard
parameter_list|()
block|{
name|lastInvoked
operator|=
literal|"getKeyboard"
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrintStream
name|getConsole
parameter_list|()
block|{
name|lastInvoked
operator|=
literal|"getConsole"
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|lastInvoked
operator|=
literal|"get("
operator|+
name|name
operator|+
literal|")"
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|lastInvoked
operator|=
literal|"put("
operator|+
name|name
operator|+
literal|","
operator|+
name|value
operator|+
literal|")"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CharSequence
name|format
parameter_list|(
name|Object
name|target
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|lastInvoked
operator|=
literal|"format("
operator|+
name|target
operator|+
literal|","
operator|+
name|level
operator|+
literal|")"
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|Object
name|instance
parameter_list|)
block|{
name|lastInvoked
operator|=
literal|"convert("
operator|+
name|type
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|","
operator|+
name|instance
operator|+
literal|")"
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

