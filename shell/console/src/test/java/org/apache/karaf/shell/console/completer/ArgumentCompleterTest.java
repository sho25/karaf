begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|completer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|basic
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|CompletableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ArgumentCompleterTest
extends|extends
name|CompleterTestSupport
block|{
annotation|@
name|Test
specifier|public
name|void
name|testParser1
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
literal|"echo foo | cat bar ; ta"
argument_list|,
literal|23
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|p
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|c1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parser
operator|.
name|c3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParser2
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
literal|"echo foo ; cat bar | ta"
argument_list|,
literal|23
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|p
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|parser
operator|.
name|c3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParser3
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
literal|"echo foo ; cat bar | ta"
argument_list|,
literal|22
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|p
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParser4
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
literal|"echo foo ; cat bar | ta reta"
argument_list|,
literal|27
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|p
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|parser
operator|.
name|c3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParser5
parameter_list|()
throws|throws
name|Exception
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
literal|"echo foo ; cat bar | ta reta"
argument_list|,
literal|24
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|p
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|parser
operator|.
name|c2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|c3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteOptions
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandSession
name|session
init|=
operator|new
name|DummyCommandSession
argument_list|()
decl_stmt|;
name|Completer
name|comp
init|=
operator|new
name|ArgumentCompleter
argument_list|(
name|session
argument_list|,
operator|new
name|MyFunction
argument_list|()
argument_list|,
literal|"my:action"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--check"
argument_list|,
literal|"--foo"
argument_list|,
literal|"--help"
argument_list|,
literal|"-c"
argument_list|,
literal|"-f"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action -"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action --foo "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"acti"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"my:action "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"my:ac"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--foo "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action --f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--help "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action --h"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-c "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action -c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--check "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action -f 2 --c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo1 "
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action -f 2 --check foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bar1"
argument_list|,
literal|"bar2"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action -f 2 --check foo1 "
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MyFunction
extends|extends
name|SimpleCommand
implements|implements
name|CompletableFunction
block|{
specifier|public
name|MyFunction
parameter_list|()
block|{
name|super
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Completer
argument_list|>
name|getCompleters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
expr|<
name|Completer
operator|>
name|asList
argument_list|(
operator|new
name|StringsCompleter
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|StringsCompleter
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bar1"
argument_list|,
literal|"bar2"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyAction
implements|implements
name|Action
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-f"
argument_list|,
name|aliases
operator|=
block|{
literal|"--foo"
block|}
argument_list|)
name|int
name|f
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-c"
argument_list|,
name|aliases
operator|=
literal|"--check"
argument_list|)
name|boolean
name|check
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
name|CommandSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

