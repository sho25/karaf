begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|security
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationEvent
import|;
end_import

begin_class
specifier|public
class|class
name|SecuredCommandConfigTransformerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTransformation
parameter_list|()
throws|throws
name|Exception
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"bar[/.*[a]+*/]"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"zar[/.*HiThere*/]"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"service.pid"
argument_list|,
name|SecuredCommandConfigTransformer
operator|.
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"abc"
argument_list|)
expr_stmt|;
name|Configuration
name|commandConfig
init|=
name|mockConfiguration
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props2
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props2
operator|.
name|put
argument_list|(
literal|"xxx"
argument_list|,
literal|"yyy"
argument_list|)
expr_stmt|;
name|props2
operator|.
name|put
argument_list|(
literal|"service.pid"
argument_list|,
name|SecuredCommandConfigTransformer
operator|.
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"xyz.123"
argument_list|)
expr_stmt|;
name|Configuration
name|commandConfig2
init|=
name|mockConfiguration
argument_list|(
name|props2
argument_list|)
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props3
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props3
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"toast"
argument_list|)
expr_stmt|;
name|props3
operator|.
name|put
argument_list|(
literal|"service.pid"
argument_list|,
literal|"xyz.123"
argument_list|)
expr_stmt|;
name|Configuration
name|otherConfig
init|=
name|mockConfiguration
argument_list|(
name|props3
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Configuration
argument_list|>
name|configurations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Configuration
argument_list|>
argument_list|()
decl_stmt|;
name|ConfigurationAdmin
name|ca
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ca
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid="
operator|+
name|SecuredCommandConfigTransformer
operator|.
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"*)"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Configuration
index|[]
block|{
name|commandConfig
block|,
name|commandConfig2
block|,
name|otherConfig
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|ca
operator|.
name|getConfiguration
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Configuration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Configuration
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|String
name|pid
init|=
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|Configuration
name|c
init|=
name|configurations
operator|.
name|get
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Put some expectations in the various mocks
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"org.apache.karaf.service.acl.command.abc.foo"
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(&(osgi.command.scope=abc)(osgi.command.function=foo))"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"execute"
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.karaf.service.acl.command.abc.bar"
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(&(osgi.command.scope=abc)(osgi.command.function=bar))"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"execute[/.*/,/.*[a]+*/]"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"execute"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"bar[/.*[a]+*/]"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"bar"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.karaf.service.acl.command.abc.zar"
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(&(osgi.command.scope=abc)(osgi.command.function=zar))"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"execute[/.*/,/.*HiThere*/]"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"zar[/.*HiThere*/]"
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected PID: "
operator|+
name|pid
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|c
operator|.
name|update
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|configurations
operator|.
name|put
argument_list|(
name|pid
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|SecuredCommandConfigTransformer
name|scct
init|=
operator|new
name|SecuredCommandConfigTransformer
argument_list|()
decl_stmt|;
name|scct
operator|.
name|setConfigAdmin
argument_list|(
name|ca
argument_list|)
expr_stmt|;
name|scct
operator|.
name|init
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundFoo
init|=
literal|false
decl_stmt|;
name|boolean
name|foundBar
init|=
literal|false
decl_stmt|;
name|boolean
name|foundZar
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Configuration
argument_list|>
name|entry
range|:
name|configurations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Configuration
name|c
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"org.apache.karaf.service.acl.command.abc.foo"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|foundFoo
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.karaf.service.acl.command.abc.bar"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|foundBar
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"org.apache.karaf.service.acl.command.abc.zar"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|foundZar
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundFoo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundBar
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundZar
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|mockConfiguration
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
name|Configuration
name|commandConfig
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|commandConfig
operator|.
name|getPid
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|commandConfig
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|props
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|commandConfig
argument_list|)
expr_stmt|;
return|return
name|commandConfig
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurationEventAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testPid
init|=
name|SecuredCommandConfigTransformer
operator|.
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"test123"
decl_stmt|;
name|Configuration
name|conf
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|conf
operator|.
name|getPid
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|testPid
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ConfigurationAdmin
name|cm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cm
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cm
operator|.
name|getConfiguration
argument_list|(
name|testPid
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|conf
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cm
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|generateCalled
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SecuredCommandConfigTransformer
name|scct
init|=
operator|new
name|SecuredCommandConfigTransformer
argument_list|()
block|{
annotation|@
name|Override
name|void
name|generateServiceGuardConfig
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|generateCalled
operator|.
name|add
argument_list|(
name|config
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|scct
operator|.
name|setConfigAdmin
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|scct
operator|.
name|init
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ServiceReference
argument_list|<
name|ConfigurationAdmin
argument_list|>
name|cmRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cmRef
operator|.
name|getBundle
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cmRef
argument_list|)
expr_stmt|;
name|ConfigurationEvent
name|event
init|=
operator|new
name|ConfigurationEvent
argument_list|(
name|cmRef
argument_list|,
name|ConfigurationEvent
operator|.
name|CM_UPDATED
argument_list|,
literal|null
argument_list|,
name|testPid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Precondition"
argument_list|,
literal|0
argument_list|,
name|generateCalled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scct
operator|.
name|configurationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|generateCalled
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPid
argument_list|,
name|generateCalled
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurationEventAddedNonCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigurationAdmin
name|cm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cm
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|SecuredCommandConfigTransformer
name|scct
init|=
operator|new
name|SecuredCommandConfigTransformer
argument_list|()
decl_stmt|;
name|scct
operator|.
name|setConfigAdmin
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|scct
operator|.
name|init
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ServiceReference
argument_list|<
name|ConfigurationAdmin
argument_list|>
name|cmRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cmRef
argument_list|)
expr_stmt|;
name|ConfigurationEvent
name|event
init|=
operator|new
name|ConfigurationEvent
argument_list|(
name|cmRef
argument_list|,
name|ConfigurationEvent
operator|.
name|CM_UPDATED
argument_list|,
literal|null
argument_list|,
literal|"test123"
argument_list|)
decl_stmt|;
name|scct
operator|.
name|configurationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|cm
argument_list|)
expr_stmt|;
comment|// Ensure that this doesn't cause any unwanted calls on ConfigAdmin
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurationEventDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testPid
init|=
name|SecuredCommandConfigTransformer
operator|.
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"test123"
decl_stmt|;
name|ConfigurationAdmin
name|cm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cm
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|SecuredCommandConfigTransformer
name|scct
init|=
operator|new
name|SecuredCommandConfigTransformer
argument_list|()
decl_stmt|;
name|scct
operator|.
name|setConfigAdmin
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|scct
operator|.
name|init
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ServiceReference
argument_list|<
name|ConfigurationAdmin
argument_list|>
name|cmRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cmRef
argument_list|)
expr_stmt|;
name|ConfigurationEvent
name|event
init|=
operator|new
name|ConfigurationEvent
argument_list|(
name|cmRef
argument_list|,
name|ConfigurationEvent
operator|.
name|CM_DELETED
argument_list|,
literal|null
argument_list|,
name|testPid
argument_list|)
decl_stmt|;
name|Configuration
name|c1
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|c1
operator|.
name|delete
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|Configuration
name|c2
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
decl_stmt|;
name|c2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|reset
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cm
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid=org.apache.karaf.service.acl.command.test123.*)"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|Configuration
index|[]
block|{
name|c1
block|,
name|c2
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|scct
operator|.
name|configurationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurationEventDeletedNonScope
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testPid
init|=
name|SecuredCommandConfigTransformer
operator|.
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"abc.def"
decl_stmt|;
name|ConfigurationAdmin
name|cm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cm
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|SecuredCommandConfigTransformer
name|scct
init|=
operator|new
name|SecuredCommandConfigTransformer
argument_list|()
decl_stmt|;
name|scct
operator|.
name|setConfigAdmin
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|scct
operator|.
name|init
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ServiceReference
argument_list|<
name|ConfigurationAdmin
argument_list|>
name|cmRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cmRef
argument_list|)
expr_stmt|;
name|ConfigurationEvent
name|event
init|=
operator|new
name|ConfigurationEvent
argument_list|(
name|cmRef
argument_list|,
name|ConfigurationEvent
operator|.
name|CM_DELETED
argument_list|,
literal|null
argument_list|,
name|testPid
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|reset
argument_list|(
name|cm
argument_list|)
expr_stmt|;
comment|// Do not expect any further calls to cm...
name|EasyMock
operator|.
name|replay
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|scct
operator|.
name|configurationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|cm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConfigurationLocationChangedEventNoEffect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testPid
init|=
name|SecuredCommandConfigTransformer
operator|.
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"test123"
decl_stmt|;
name|ConfigurationAdmin
name|cm
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cm
operator|.
name|listConfigurations
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|SecuredCommandConfigTransformer
name|scct
init|=
operator|new
name|SecuredCommandConfigTransformer
argument_list|()
decl_stmt|;
name|scct
operator|.
name|setConfigAdmin
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|scct
operator|.
name|init
argument_list|()
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ServiceReference
argument_list|<
name|ConfigurationAdmin
argument_list|>
name|cmRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cmRef
argument_list|)
expr_stmt|;
name|ConfigurationEvent
name|event
init|=
operator|new
name|ConfigurationEvent
argument_list|(
name|cmRef
argument_list|,
name|ConfigurationEvent
operator|.
name|CM_LOCATION_CHANGED
argument_list|,
literal|null
argument_list|,
name|testPid
argument_list|)
decl_stmt|;
name|scct
operator|.
name|configurationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|cm
argument_list|)
expr_stmt|;
comment|// Ensure that this doesn't cause any unwanted calls on ConfigAdmin
block|}
block|}
end_class

end_unit

