begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|security
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|api
operator|.
name|CommandSessionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|threadio
operator|.
name|ThreadIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IAnswer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|SecuredCommandProcessorImplTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCommandProcessor
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadIO
name|tio
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ThreadIO
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|tio
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ServiceReference
argument_list|<
name|ThreadIO
argument_list|>
name|tioRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|tioRef
argument_list|)
expr_stmt|;
specifier|final
name|BundleContext
name|bc
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReference
argument_list|(
name|ThreadIO
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|tioRef
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getService
argument_list|(
name|tioRef
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|tio
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|createFilter
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Filter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|bc
operator|.
name|getServiceReferences
argument_list|(
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
comment|// Capture the listeners
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceListener
argument_list|>
name|listeners
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServiceListener
argument_list|>
argument_list|()
decl_stmt|;
comment|// Here are the expected calls
specifier|final
name|String
name|commandFilter
init|=
literal|"(&(osgi.command.scope=*)(osgi.command.function=*)"
operator|+
literal|"(|(org.apache.karaf.service.guard.roles=aaabbbccc)(!(org.apache.karaf.service.guard.roles=*))))"
decl_stmt|;
name|expectServiceTracker
argument_list|(
name|bc
argument_list|,
name|commandFilter
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
name|expectServiceTracker
argument_list|(
name|bc
argument_list|,
literal|"(objectClass="
operator|+
name|Converter
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
name|expectServiceTracker
argument_list|(
name|bc
argument_list|,
literal|"(objectClass="
operator|+
name|CommandSessionListener
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|,
name|listeners
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"aaabbbccc"
argument_list|)
argument_list|)
expr_stmt|;
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|MySecuredCommandProcessorImpl
name|scp
init|=
operator|new
name|MySecuredCommandProcessorImpl
argument_list|(
name|bc
argument_list|)
block|{}
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|contains
argument_list|(
literal|"osgi:addcommand"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|contains
argument_list|(
literal|"osgi:removecommand"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|contains
argument_list|(
literal|"osgi:eval"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scp
operator|.
name|getConstants
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bc
argument_list|,
name|scp
operator|.
name|getConstants
argument_list|()
operator|.
name|get
argument_list|(
literal|".context"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now let's make a command appear...
name|ServiceListener
name|commandListener
init|=
name|listeners
operator|.
name|get
argument_list|(
name|commandFilter
argument_list|)
decl_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|cdRef
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cdRef
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cdRef
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cdRef
argument_list|)
expr_stmt|;
name|ServiceEvent
name|event
init|=
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|REGISTERED
argument_list|,
name|cdRef
argument_list|)
decl_stmt|;
name|commandListener
operator|.
name|serviceChanged
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|contains
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|cd2Ref
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cd2Ref
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"xxx"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|cd2Ref
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"aaa"
block|,
literal|"bbb"
block|}
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|cd2Ref
argument_list|)
expr_stmt|;
name|ServiceEvent
name|event2
init|=
operator|new
name|ServiceEvent
argument_list|(
name|ServiceEvent
operator|.
name|REGISTERED
argument_list|,
name|cd2Ref
argument_list|)
decl_stmt|;
name|commandListener
operator|.
name|serviceChanged
argument_list|(
name|event2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|contains
argument_list|(
literal|"xxx:aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scp
operator|.
name|getCommands
argument_list|()
operator|.
name|contains
argument_list|(
literal|"xxx:bbb"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|expectServiceTracker
parameter_list|(
specifier|final
name|BundleContext
name|bc
parameter_list|,
specifier|final
name|String
name|expectedFilter
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ServiceListener
argument_list|>
name|listeners
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|bc
operator|.
name|addServiceListener
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|ServiceListener
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedFilter
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
operator|new
name|IAnswer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|()
throws|throws
name|Throwable
block|{
name|listeners
operator|.
name|put
argument_list|(
name|expectedFilter
argument_list|,
operator|(
name|ServiceListener
operator|)
name|EasyMock
operator|.
name|getCurrentArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|once
argument_list|()
expr_stmt|;
block|}
comment|// Subclass to provide access to some protected members
specifier|static
class|class
name|MySecuredCommandProcessorImpl
extends|extends
name|SecuredCommandProcessorImpl
block|{
specifier|public
name|MySecuredCommandProcessorImpl
parameter_list|(
name|BundleContext
name|bc
parameter_list|)
block|{
name|super
argument_list|(
name|bc
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getConstants
parameter_list|()
block|{
return|return
name|constants
return|;
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

