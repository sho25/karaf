begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|completer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|CompleterValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|basic
operator|.
name|SimpleCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|CompleterValuesTest
extends|extends
name|CompleterTestSupport
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCompleteArgumnets
parameter_list|()
throws|throws
name|Exception
block|{
name|CommandSession
name|session
init|=
operator|new
name|DummyCommandSession
argument_list|()
decl_stmt|;
name|Completer
name|comp
init|=
operator|new
name|ArgumentCompleter
argument_list|(
name|session
argument_list|,
operator|new
name|SimpleCommand
argument_list|(
name|MyAction
operator|.
name|class
argument_list|)
argument_list|,
literal|"my:action"
argument_list|)
decl_stmt|;
comment|// arg 0
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a1"
argument_list|,
literal|"a2"
argument_list|,
literal|"a3"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"b4"
argument_list|,
literal|"b5"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// arg 1
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"c2"
argument_list|,
literal|"c3"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action a1 c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"d5"
argument_list|,
literal|"d6"
argument_list|,
literal|"d7"
argument_list|)
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action b4 d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// unknown args
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|()
argument_list|,
name|complete
argument_list|(
name|comp
argument_list|,
literal|"action a1 d5 a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MyAction
implements|implements
name|Action
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|)
name|String
name|foo
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|)
name|String
name|bar
decl_stmt|;
specifier|public
name|Object
name|execute
parameter_list|(
name|CommandSession
name|session
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|CompleterValues
argument_list|(
name|index
operator|=
literal|0
argument_list|)
specifier|public
name|String
index|[]
name|getFooValues
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|,
literal|"a3"
block|,
literal|"b4"
block|,
literal|"b5"
block|}
return|;
block|}
annotation|@
name|CompleterValues
argument_list|(
name|index
operator|=
literal|1
argument_list|)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBarValues
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"c2"
argument_list|,
literal|"c3"
argument_list|,
literal|"d5"
argument_list|,
literal|"d6"
argument_list|,
literal|"d7"
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

