begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2002-2016, the original author or authors.  *  * This software is distributable under the BSD license. See the terms of the  * BSD license in the documentation provided with this software.  *  * http://www.opensource.org/licenses/bsd-license.php  */
end_comment

begin_package
package|package
name|jline
operator|.
name|console
operator|.
name|completer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|jline
operator|.
name|internal
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Completer for a set of strings.  *  * @author<a href="mailto:jason@planet57.com">Jason Dillon</a>  * @since 2.3  */
end_comment

begin_class
specifier|public
class|class
name|StringsCompleter
implements|implements
name|Completer
block|{
specifier|private
specifier|final
name|SortedSet
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|StringsCompleter
parameter_list|()
block|{
comment|// empty
block|}
specifier|public
name|StringsCompleter
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|String
argument_list|>
name|strings
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|getStrings
argument_list|()
operator|.
name|addAll
argument_list|(
name|strings
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StringsCompleter
parameter_list|(
specifier|final
name|String
modifier|...
name|strings
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|strings
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getStrings
parameter_list|()
block|{
return|return
name|strings
return|;
block|}
specifier|public
name|int
name|complete
parameter_list|(
specifier|final
name|String
name|buffer
parameter_list|,
specifier|final
name|int
name|cursor
parameter_list|,
specifier|final
name|List
argument_list|<
name|CharSequence
argument_list|>
name|candidates
parameter_list|)
block|{
comment|// buffer could be null
name|checkNotNull
argument_list|(
name|candidates
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|candidates
operator|.
name|addAll
argument_list|(
name|strings
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|match
range|:
name|strings
operator|.
name|tailSet
argument_list|(
name|buffer
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|match
operator|.
name|startsWith
argument_list|(
name|buffer
argument_list|)
condition|)
block|{
break|break;
block|}
name|candidates
operator|.
name|add
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

