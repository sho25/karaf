begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|jline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|AnsiConsole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|WindowsAnsiOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|AnsiWindowsTerminal
extends|extends
name|WindowsTerminal
block|{
specifier|private
name|boolean
name|ansisupported
init|=
name|checkAnsiSupport
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isANSISupported
parameter_list|()
block|{
return|return
name|ansisupported
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readCharacter
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|read
argument_list|()
return|;
block|}
specifier|public
name|int
name|readDirectChar
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|readCharacter
argument_list|(
name|in
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|checkAnsiSupport
parameter_list|()
block|{
name|OutputStream
name|dummy
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStream
name|ansiout
init|=
name|AnsiConsole
operator|.
name|wrapOutputStream
argument_list|(
name|dummy
argument_list|)
decl_stmt|;
try|try
block|{
name|dummy
operator|.
name|close
argument_list|()
expr_stmt|;
name|ansiout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{         }
return|return
operator|(
name|ansiout
operator|instanceof
name|WindowsAnsiOutputStream
operator|)
return|;
block|}
block|}
end_class

end_unit

