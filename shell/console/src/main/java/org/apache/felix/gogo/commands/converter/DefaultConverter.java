begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|DefaultConverter
block|{
specifier|private
name|Object
name|loader
decl_stmt|;
specifier|public
name|DefaultConverter
parameter_list|(
name|Object
name|loader
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|source
parameter_list|,
name|Type
name|target
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|convert
argument_list|(
name|source
argument_list|,
operator|new
name|GenericType
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|fromValue
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Discard null values
if|if
condition|(
name|fromValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// If the object is an instance of the type, just return it
if|if
condition|(
name|isAssignable
argument_list|(
name|fromValue
argument_list|,
name|type
argument_list|)
condition|)
block|{
return|return
name|fromValue
return|;
block|}
name|Object
name|value
init|=
name|convertWithConverters
argument_list|(
name|fromValue
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|fromValue
operator|instanceof
name|Number
operator|&&
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|unwrap
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|convertToNumber
argument_list|(
operator|(
name|Number
operator|)
name|fromValue
argument_list|,
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|fromValue
operator|instanceof
name|String
condition|)
block|{
return|return
name|convertFromString
argument_list|(
operator|(
name|String
operator|)
name|fromValue
argument_list|,
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|,
name|loader
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|toClass
argument_list|(
name|type
argument_list|)
operator|.
name|isArray
argument_list|()
operator|&&
operator|(
name|fromValue
operator|instanceof
name|Collection
operator|||
name|fromValue
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|)
condition|)
block|{
return|return
name|convertToArray
argument_list|(
name|fromValue
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Map
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
operator|&&
operator|(
name|fromValue
operator|instanceof
name|Map
operator|||
name|fromValue
operator|instanceof
name|Dictionary
operator|)
condition|)
block|{
return|return
name|convertToMap
argument_list|(
name|fromValue
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Dictionary
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
operator|&&
operator|(
name|fromValue
operator|instanceof
name|Map
operator|||
name|fromValue
operator|instanceof
name|Dictionary
operator|)
condition|)
block|{
return|return
name|convertToDictionary
argument_list|(
name|fromValue
argument_list|,
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
operator|&&
operator|(
name|fromValue
operator|instanceof
name|Collection
operator|||
name|fromValue
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|)
condition|)
block|{
return|return
name|convertToCollection
argument_list|(
name|fromValue
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert value "
operator|+
name|fromValue
operator|+
literal|" to type "
operator|+
name|type
argument_list|)
throw|;
block|}
block|}
return|return
name|value
return|;
block|}
specifier|private
name|Object
name|convertWithConverters
parameter_list|(
name|Object
name|source
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|value
init|=
literal|null
decl_stmt|;
comment|//        for (Converter converter : converters) {
comment|//            if (converter.canConvert(source, type)) {
comment|//                value = converter.convert(source, type);
comment|//                if (value != null) {
comment|//                    return value;
comment|//                }
comment|//            }
comment|//        }
return|return
name|value
return|;
block|}
specifier|public
name|Object
name|convertToNumber
parameter_list|(
name|Number
name|value
parameter_list|,
name|Class
name|toType
parameter_list|)
throws|throws
name|Exception
block|{
name|toType
operator|=
name|unwrap
argument_list|(
name|toType
argument_list|)
expr_stmt|;
if|if
condition|(
name|AtomicInteger
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
operator|new
name|AtomicInteger
argument_list|(
operator|(
name|Integer
operator|)
name|convertToNumber
argument_list|(
name|value
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|AtomicLong
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
operator|new
name|AtomicLong
argument_list|(
operator|(
name|Long
operator|)
name|convertToNumber
argument_list|(
name|value
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Integer
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|value
operator|.
name|intValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Short
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|value
operator|.
name|shortValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Long
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|value
operator|.
name|longValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Float
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|value
operator|.
name|floatValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|value
operator|.
name|doubleValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|Byte
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|value
operator|.
name|byteValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|BigInteger
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
operator|new
name|BigInteger
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|BigDecimal
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert number "
operator|+
name|value
operator|+
literal|" to "
operator|+
name|toType
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|convertFromString
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
name|toType
parameter_list|,
name|Object
name|loader
parameter_list|)
throws|throws
name|Exception
block|{
name|toType
operator|=
name|unwrap
argument_list|(
name|toType
argument_list|)
expr_stmt|;
if|if
condition|(
name|ReifiedType
operator|.
name|class
operator|==
name|toType
condition|)
block|{
try|try
block|{
return|return
name|GenericType
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|loader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Class
operator|.
name|class
operator|==
name|toType
condition|)
block|{
try|try
block|{
return|return
name|GenericType
operator|.
name|parse
argument_list|(
name|value
argument_list|,
name|loader
argument_list|)
operator|.
name|getRawClass
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Locale
operator|.
name|class
operator|==
name|toType
condition|)
block|{
name|String
index|[]
name|tokens
init|=
name|value
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|Locale
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|2
condition|)
block|{
return|return
operator|new
name|Locale
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|,
name|tokens
index|[
literal|1
index|]
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|3
condition|)
block|{
return|return
operator|new
name|Locale
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|,
name|tokens
index|[
literal|1
index|]
argument_list|,
name|tokens
index|[
literal|2
index|]
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid locale string:"
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Pattern
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|Pattern
operator|.
name|compile
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Properties
operator|.
name|class
operator|==
name|toType
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|value
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
elseif|else
if|if
condition|(
name|Boolean
operator|.
name|class
operator|==
name|toType
condition|)
block|{
if|if
condition|(
literal|"yes"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"on"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
elseif|else
if|if
condition|(
literal|"no"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
operator|||
literal|"off"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid boolean value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Integer
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Short
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Long
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Float
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Double
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Character
operator|.
name|class
operator|==
name|toType
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|==
literal|6
operator|&&
name|value
operator|.
name|startsWith
argument_list|(
literal|"\\u"
argument_list|)
condition|)
block|{
name|int
name|code
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
return|return
operator|(
name|char
operator|)
name|code
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid value for character type: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|Byte
operator|.
name|class
operator|==
name|toType
condition|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|Enum
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|toType
argument_list|)
condition|)
block|{
return|return
name|Enum
operator|.
name|valueOf
argument_list|(
operator|(
name|Class
argument_list|<
name|Enum
argument_list|>
operator|)
name|toType
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createObject
argument_list|(
name|value
argument_list|,
name|toType
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Object
name|createObject
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
name|type
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|type
operator|.
name|isInterface
argument_list|()
operator|||
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|type
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert value "
operator|+
name|value
operator|+
literal|" to type "
operator|+
name|type
operator|+
literal|". Type "
operator|+
name|type
operator|+
literal|" is an interface or an abstract class"
argument_list|)
throw|;
block|}
name|Constructor
name|constructor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|constructor
operator|=
name|type
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to convert to "
operator|+
name|type
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert "
argument_list|,
name|getRealCause
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Throwable
name|getRealCause
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|InvocationTargetException
operator|&&
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|t
operator|.
name|getCause
argument_list|()
return|;
block|}
return|return
name|t
return|;
block|}
specifier|private
name|Object
name|convertToCollection
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|ReifiedType
name|valueType
init|=
name|type
operator|.
name|getActualTypeArgument
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Collection
name|newCol
init|=
operator|(
name|Collection
operator|)
name|getCollection
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|obj
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|newCol
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|obj
argument_list|,
name|i
argument_list|)
argument_list|,
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
operator|+
literal|"(error converting array element)"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Object
name|item
range|:
operator|(
name|Collection
operator|)
name|obj
control|)
block|{
try|try
block|{
name|newCol
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|item
argument_list|,
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
operator|+
literal|"(error converting collection entry)"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|newCol
return|;
block|}
specifier|private
name|Object
name|convertToDictionary
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|ReifiedType
name|keyType
init|=
name|type
operator|.
name|getActualTypeArgument
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReifiedType
name|valueType
init|=
name|type
operator|.
name|getActualTypeArgument
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Dictionary
name|newDic
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Dictionary
condition|)
block|{
name|Dictionary
name|dic
init|=
operator|(
name|Dictionary
operator|)
name|obj
decl_stmt|;
for|for
control|(
name|Enumeration
name|keyEnum
init|=
name|dic
operator|.
name|keys
argument_list|()
init|;
name|keyEnum
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|keyEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
try|try
block|{
name|newDic
operator|.
name|put
argument_list|(
name|convert
argument_list|(
name|key
argument_list|,
name|keyType
argument_list|)
argument_list|,
name|convert
argument_list|(
name|dic
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
operator|+
literal|"(error converting map entry)"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
operator|(
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|newDic
operator|.
name|put
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyType
argument_list|)
argument_list|,
name|convert
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
operator|+
literal|"(error converting map entry)"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|newDic
return|;
block|}
specifier|private
name|Object
name|convertToMap
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|ReifiedType
name|keyType
init|=
name|type
operator|.
name|getActualTypeArgument
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReifiedType
name|valueType
init|=
name|type
operator|.
name|getActualTypeArgument
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Map
name|newMap
init|=
operator|(
name|Map
operator|)
name|getMap
argument_list|(
name|toClass
argument_list|(
name|type
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Dictionary
condition|)
block|{
name|Dictionary
name|dic
init|=
operator|(
name|Dictionary
operator|)
name|obj
decl_stmt|;
for|for
control|(
name|Enumeration
name|keyEnum
init|=
name|dic
operator|.
name|keys
argument_list|()
init|;
name|keyEnum
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|keyEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
try|try
block|{
name|newMap
operator|.
name|put
argument_list|(
name|convert
argument_list|(
name|key
argument_list|,
name|keyType
argument_list|)
argument_list|,
name|convert
argument_list|(
name|dic
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
operator|+
literal|"(error converting map entry)"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
operator|(
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
try|try
block|{
name|newMap
operator|.
name|put
argument_list|(
name|convert
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyType
argument_list|)
argument_list|,
name|convert
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|valueType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
operator|+
literal|"(error converting map entry)"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|newMap
return|;
block|}
specifier|private
name|Object
name|convertToArray
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ReifiedType
name|type
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Collection
condition|)
block|{
name|obj
operator|=
operator|(
operator|(
name|Collection
operator|)
name|obj
operator|)
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
argument_list|)
throw|;
block|}
name|ReifiedType
name|componentType
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|componentType
operator|=
name|type
operator|.
name|getActualTypeArgument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|componentType
operator|=
operator|new
name|GenericType
argument_list|(
name|type
operator|.
name|getRawClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|array
init|=
name|Array
operator|.
name|newInstance
argument_list|(
name|toClass
argument_list|(
name|componentType
argument_list|)
argument_list|,
name|Array
operator|.
name|getLength
argument_list|(
name|obj
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Array
operator|.
name|getLength
argument_list|(
name|obj
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Array
operator|.
name|set
argument_list|(
name|array
argument_list|,
name|i
argument_list|,
name|convert
argument_list|(
name|Array
operator|.
name|get
argument_list|(
name|obj
argument_list|,
name|i
argument_list|)
argument_list|,
name|componentType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to convert from "
operator|+
name|obj
operator|+
literal|" to "
operator|+
name|type
operator|+
literal|"(error converting array element)"
argument_list|,
name|t
argument_list|)
throw|;
block|}
block|}
return|return
name|array
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAssignable
parameter_list|(
name|Object
name|source
parameter_list|,
name|ReifiedType
name|target
parameter_list|)
block|{
return|return
name|source
operator|==
literal|null
operator|||
operator|(
name|target
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|unwrap
argument_list|(
name|target
operator|.
name|getRawClass
argument_list|()
argument_list|)
operator|.
name|isAssignableFrom
argument_list|(
name|unwrap
argument_list|(
name|source
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|Class
name|unwrap
parameter_list|(
name|Class
name|c
parameter_list|)
block|{
name|Class
name|u
init|=
name|primitives
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
return|return
name|u
operator|!=
literal|null
condition|?
name|u
else|:
name|c
return|;
block|}
specifier|private
specifier|static
name|Class
name|getMap
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|hasDefaultConstructor
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|SortedMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|TreeMap
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|ConcurrentMap
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|ConcurrentHashMap
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|LinkedHashMap
operator|.
name|class
return|;
block|}
block|}
specifier|private
specifier|static
name|Class
name|getCollection
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|hasDefaultConstructor
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|type
return|;
block|}
elseif|else
if|if
condition|(
name|SortedSet
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|TreeSet
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|Set
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|LinkedHashSet
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|List
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|ArrayList
operator|.
name|class
return|;
block|}
elseif|else
if|if
condition|(
name|Queue
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
name|LinkedList
operator|.
name|class
return|;
block|}
else|else
block|{
return|return
name|ArrayList
operator|.
name|class
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|hasDefaultConstructor
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isPublic
argument_list|(
name|type
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|type
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Constructor
index|[]
name|constructors
init|=
name|type
operator|.
name|getConstructors
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
name|constructor
range|:
name|constructors
control|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isPublic
argument_list|(
name|constructor
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|&&
name|constructor
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
name|primitives
decl_stmt|;
static|static
block|{
name|primitives
operator|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|Class
argument_list|>
argument_list|()
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|char
operator|.
name|class
argument_list|,
name|Character
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|primitives
operator|.
name|put
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Class
name|toClass
parameter_list|(
name|ReifiedType
name|type
parameter_list|)
block|{
return|return
name|type
operator|.
name|getRawClass
argument_list|()
return|;
block|}
block|}
end_class

end_unit

