begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|basic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|CommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|converter
operator|.
name|DefaultConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|converter
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|NameScoping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultActionPreparator
implements|implements
name|ActionPreparator
block|{
specifier|public
specifier|static
specifier|final
name|Option
name|HELP
init|=
operator|new
name|Option
argument_list|()
block|{
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"--help"
return|;
block|}
specifier|public
name|String
index|[]
name|aliases
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{ }
return|;
block|}
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"Display this help message"
return|;
block|}
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|multiValued
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|Option
operator|.
name|class
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|boolean
name|prepare
parameter_list|(
name|Action
name|action
parameter_list|,
name|CommandSession
name|session
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|arguments
init|=
operator|new
name|HashMap
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Argument
argument_list|>
name|orderedArguments
init|=
operator|new
name|ArrayList
argument_list|<
name|Argument
argument_list|>
argument_list|()
decl_stmt|;
comment|// Introspect
for|for
control|(
name|Class
name|type
init|=
name|action
operator|.
name|getClass
argument_list|()
init|;
name|type
operator|!=
literal|null
condition|;
name|type
operator|=
name|type
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
for|for
control|(
name|Field
name|field
range|:
name|type
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Option
name|option
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Option
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|options
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
name|Argument
name|argument
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Argument
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|argument
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Argument
operator|.
name|DEFAULT
operator|.
name|equals
argument_list|(
name|argument
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|Argument
name|delegate
init|=
name|argument
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|argument
operator|=
operator|new
name|Argument
argument_list|()
block|{
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|description
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|required
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|required
argument_list|()
return|;
block|}
specifier|public
name|int
name|index
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|index
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|multiValued
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|multiValued
argument_list|()
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|annotationType
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
name|arguments
operator|.
name|put
argument_list|(
name|argument
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|argument
operator|.
name|index
argument_list|()
decl_stmt|;
while|while
condition|(
name|orderedArguments
operator|.
name|size
argument_list|()
operator|<=
name|index
condition|)
block|{
name|orderedArguments
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|orderedArguments
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Duplicate argument index: "
operator|+
name|index
argument_list|)
throw|;
block|}
name|orderedArguments
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|argument
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check indexes are correct
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orderedArguments
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|orderedArguments
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Missing argument for index: "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
comment|// Populate
name|Map
argument_list|<
name|Option
argument_list|,
name|Object
argument_list|>
name|optionValues
init|=
operator|new
name|HashMap
argument_list|<
name|Option
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Argument
argument_list|,
name|Object
argument_list|>
name|argumentValues
init|=
operator|new
name|HashMap
argument_list|<
name|Argument
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|processOptions
init|=
literal|true
decl_stmt|;
name|int
name|argIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|params
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|param
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Check for help
if|if
condition|(
name|HELP
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|param
argument_list|)
operator|||
name|Arrays
operator|.
name|asList
argument_list|(
name|HELP
operator|.
name|aliases
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|param
argument_list|)
condition|)
block|{
name|printUsage
argument_list|(
name|session
argument_list|,
name|action
argument_list|,
name|options
argument_list|,
name|arguments
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|processOptions
operator|&&
name|param
operator|instanceof
name|String
operator|&&
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|boolean
name|isKeyValuePair
init|=
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|String
name|name
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isKeyValuePair
condition|)
block|{
name|name
operator|=
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|substring
argument_list|(
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|param
expr_stmt|;
block|}
name|Option
name|option
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Option
name|opt
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|opt
operator|.
name|name
argument_list|()
argument_list|)
operator|||
name|Arrays
operator|.
name|asList
argument_list|(
name|opt
operator|.
name|aliases
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|option
operator|=
name|opt
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"Error executing command "
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|" undefined option "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|param
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Undefined option: "
operator|+
name|param
argument_list|)
throw|;
block|}
name|Field
name|field
init|=
name|options
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
operator|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|boolean
operator|.
name|class
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|==
name|Boolean
operator|.
name|class
operator|)
condition|)
block|{
name|value
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|value
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"Error executing command "
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|" missing value for option "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|param
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Missing value for option: "
operator|+
name|param
argument_list|)
throw|;
block|}
if|if
condition|(
name|option
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|optionValues
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|optionValues
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optionValues
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|processOptions
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|argIndex
operator|>=
name|orderedArguments
operator|.
name|size
argument_list|()
condition|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"Error executing command "
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|": too many arguments specified"
argument_list|)
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Too many arguments specified"
argument_list|)
throw|;
block|}
name|Argument
name|argument
init|=
name|orderedArguments
operator|.
name|get
argument_list|(
name|argIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|argument
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|argIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|argument
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|argumentValues
operator|.
name|get
argument_list|(
name|argument
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|argumentValues
operator|.
name|put
argument_list|(
name|argument
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentValues
operator|.
name|put
argument_list|(
name|argument
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check required arguments / options
for|for
control|(
name|Option
name|option
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|required
argument_list|()
operator|&&
name|optionValues
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"Error executing command "
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|": option "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|" is required"
argument_list|)
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Option "
operator|+
name|option
operator|.
name|name
argument_list|()
operator|+
literal|" is required"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|argument
operator|.
name|required
argument_list|()
operator|&&
name|argumentValues
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"Error executing command "
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|": argument "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|argument
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|" is required"
argument_list|)
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Argument "
operator|+
name|argument
operator|.
name|name
argument_list|()
operator|+
literal|" is required"
argument_list|)
throw|;
block|}
block|}
comment|// Convert and inject values
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Option
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|optionValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Field
name|field
init|=
name|options
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|convert
argument_list|(
name|action
argument_list|,
name|session
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"Error executing command "
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|": unable to convert option "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|" with value '"
argument_list|)
operator|.
name|a
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|"' to type "
argument_list|)
operator|.
name|a
argument_list|(
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Unable to convert option "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" with value '"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to type "
operator|+
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|action
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Argument
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|argumentValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Field
name|field
init|=
name|arguments
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|convert
argument_list|(
name|action
argument_list|,
name|session
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"Error executing command "
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|": unable to convert argument "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
operator|.
name|a
argument_list|(
literal|" with value '"
argument_list|)
operator|.
name|a
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|"' to type "
argument_list|)
operator|.
name|a
argument_list|(
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Unable to convert argument "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" with value '"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to type "
operator|+
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|action
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|printUsage
parameter_list|(
name|CommandSession
name|session
parameter_list|,
name|Action
name|action
parameter_list|,
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|optionsMap
parameter_list|,
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|argsMap
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|Command
name|command
init|=
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
name|Terminal
name|term
init|=
name|session
operator|!=
literal|null
condition|?
operator|(
name|Terminal
operator|)
name|session
operator|.
name|get
argument_list|(
literal|".jline.terminal"
argument_list|)
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|Argument
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|Argument
argument_list|>
argument_list|(
name|argsMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|arguments
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Argument
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Argument
name|o1
parameter_list|,
name|Argument
name|o2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|o1
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|o2
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|HashSet
argument_list|<
name|Option
argument_list|>
argument_list|(
name|optionsMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|options
operator|.
name|add
argument_list|(
name|HELP
argument_list|)
expr_stmt|;
name|boolean
name|globalScope
init|=
name|NameScoping
operator|.
name|isGlobalScope
argument_list|(
name|session
argument_list|,
name|command
operator|.
name|scope
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
operator|&&
operator|(
name|command
operator|.
name|description
argument_list|()
operator|!=
literal|null
operator|||
name|command
operator|.
name|name
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"DESCRIPTION"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|name
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|globalScope
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|command
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|StringBuffer
name|syntax
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|globalScope
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|command
operator|.
name|scope
argument_list|()
argument_list|,
name|command
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|" [options]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
if|if
condition|(
operator|!
name|argument
operator|.
name|required
argument_list|()
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"[%s] "
argument_list|,
name|argument
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s "
argument_list|,
name|argument
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"SYNTAX"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|syntax
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"ARGUMENTS"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|arguments
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|argument
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|printFormatted
argument_list|(
literal|"                "
argument_list|,
name|argument
operator|.
name|description
argument_list|()
argument_list|,
name|term
operator|!=
literal|null
condition|?
name|term
operator|.
name|getWidth
argument_list|()
else|:
literal|80
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|argument
operator|.
name|required
argument_list|()
condition|)
block|{
try|try
block|{
name|argsMap
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|argsMap
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"                    (defaults to "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"OPTIONS"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|options
control|)
block|{
name|String
name|opt
init|=
name|option
operator|.
name|name
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|option
operator|.
name|aliases
argument_list|()
control|)
block|{
name|opt
operator|+=
literal|", "
operator|+
name|alias
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|opt
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|printFormatted
argument_list|(
literal|"                "
argument_list|,
name|option
operator|.
name|description
argument_list|()
argument_list|,
name|term
operator|!=
literal|null
condition|?
name|term
operator|.
name|getWidth
argument_list|()
else|:
literal|80
argument_list|,
name|out
argument_list|)
expr_stmt|;
try|try
block|{
name|optionsMap
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|optionsMap
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"                (defaults to "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|detailedDescription
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"DETAILS"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
name|loadDescription
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
argument_list|,
name|command
operator|.
name|detailedDescription
argument_list|()
argument_list|)
decl_stmt|;
name|printFormatted
argument_list|(
literal|"        "
argument_list|,
name|desc
argument_list|,
name|term
operator|!=
literal|null
condition|?
name|term
operator|.
name|getWidth
argument_list|()
else|:
literal|80
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|loadDescription
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|InputStream
name|is
init|=
name|clazz
operator|.
name|getResourceAsStream
argument_list|(
name|desc
operator|.
name|substring
argument_list|(
literal|"classpath:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|is
operator|=
name|clazz
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|desc
operator|.
name|substring
argument_list|(
literal|"classpath:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
name|desc
operator|=
literal|"Unable to load description from "
operator|+
name|desc
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Reader
name|r
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|r
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|sw
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|desc
operator|=
name|sw
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|desc
operator|=
literal|"Unable to load description from "
operator|+
name|desc
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
return|return
name|desc
return|;
block|}
comment|// TODO move this to a helper class?
specifier|public
specifier|static
name|void
name|printFormatted
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|str
parameter_list|,
name|int
name|termWidth
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|int
name|pfxLen
init|=
name|length
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|int
name|maxwidth
init|=
name|termWidth
operator|-
name|pfxLen
decl_stmt|;
name|Pattern
name|wrap
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\S\\S{"
operator|+
name|maxwidth
operator|+
literal|",}|.{1,"
operator|+
name|maxwidth
operator|+
literal|"})(\\s+|$)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|wrap
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|m
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|length
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|length
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|convert
parameter_list|(
name|Action
name|action
parameter_list|,
name|CommandSession
name|session
parameter_list|,
name|Object
name|value
parameter_list|,
name|Type
name|toType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|toType
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
return|return
operator|new
name|DefaultConverter
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|toType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

