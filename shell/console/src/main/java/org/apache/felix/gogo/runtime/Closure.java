begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|Tokenizer
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_class
specifier|public
class|class
name|Closure
implements|implements
name|Function
implements|,
name|Evaluate
block|{
specifier|public
specifier|static
specifier|final
name|String
name|LOCATION
init|=
literal|".location"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_LOCK
init|=
literal|".defaultLock"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|location
init|=
operator|new
name|ThreadLocal
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CommandSessionImpl
name|session
decl_stmt|;
specifier|private
specifier|final
name|Closure
name|parent
decl_stmt|;
specifier|private
specifier|final
name|CharSequence
name|source
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
argument_list|>
name|program
decl_stmt|;
specifier|private
specifier|final
name|Object
name|script
decl_stmt|;
specifier|private
name|Token
name|errTok
decl_stmt|;
specifier|private
name|Token
name|errTok2
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|parms
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|parmv
init|=
literal|null
decl_stmt|;
specifier|public
name|Closure
parameter_list|(
name|CommandSessionImpl
name|session
parameter_list|,
name|Closure
name|parent
parameter_list|,
name|CharSequence
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|script
operator|=
name|session
operator|.
name|get
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
comment|// by convention, $0 is script name
try|try
block|{
name|program
operator|=
operator|new
name|Parser
argument_list|(
name|source
argument_list|)
operator|.
name|program
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|setLocation
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CommandSessionImpl
name|session
parameter_list|()
block|{
return|return
name|session
return|;
block|}
specifier|private
name|Exception
name|setLocation
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|session
operator|.
name|get
argument_list|(
name|DEFAULT_LOCK
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|loc
init|=
name|location
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|loc
condition|)
block|{
name|loc
operator|=
operator|(
literal|null
operator|==
name|script
condition|?
literal|""
else|:
name|script
operator|+
literal|":"
operator|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SyntaxError
condition|)
block|{
name|SyntaxError
name|se
init|=
operator|(
name|SyntaxError
operator|)
name|e
decl_stmt|;
name|loc
operator|+=
name|se
operator|.
name|line
argument_list|()
operator|+
literal|"."
operator|+
name|se
operator|.
name|column
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|errTok
condition|)
block|{
name|loc
operator|+=
name|errTok
operator|.
name|line
operator|+
literal|"."
operator|+
name|errTok
operator|.
name|column
expr_stmt|;
block|}
name|location
operator|.
name|set
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|script
operator|&&
operator|!
name|loc
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|location
operator|.
name|set
argument_list|(
name|script
operator|+
literal|":"
operator|+
name|loc
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|put
argument_list|(
name|LOCATION
argument_list|,
name|location
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|EOFError
condition|)
block|{
comment|// map to public exception, so interactive clients can provide more input
name|EOFException
name|eofe
init|=
operator|new
name|EOFException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|eofe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|eofe
return|;
block|}
return|return
name|e
return|;
block|}
comment|// implements Function interface
specifier|public
name|Object
name|execute
parameter_list|(
name|CommandSession
name|x
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|location
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|variables
operator|.
name|remove
argument_list|(
name|LOCATION
argument_list|)
expr_stmt|;
return|return
name|execute
argument_list|(
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|setLocation
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Object
name|execute
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|null
operator|!=
name|values
condition|)
block|{
name|parmv
operator|=
name|values
expr_stmt|;
name|parms
operator|=
operator|new
name|ArgList
argument_list|(
name|parmv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|parent
condition|)
block|{
comment|// inherit parent closure parameters
name|parms
operator|=
name|parent
operator|.
name|parms
expr_stmt|;
name|parmv
operator|=
name|parent
operator|.
name|parmv
expr_stmt|;
block|}
else|else
block|{
comment|// inherit session parameters
name|Object
name|args
init|=
name|session
operator|.
name|get
argument_list|(
literal|"args"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|args
operator|&&
name|args
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|parmv
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|args
expr_stmt|;
name|parms
operator|=
operator|new
name|ArgList
argument_list|(
name|parmv
argument_list|)
expr_stmt|;
block|}
block|}
name|Pipe
name|last
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|mark
init|=
name|Pipe
operator|.
name|mark
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
name|pipeline
range|:
name|program
control|)
block|{
name|ArrayList
argument_list|<
name|Pipe
argument_list|>
name|pipes
init|=
operator|new
name|ArrayList
argument_list|<
name|Pipe
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Token
argument_list|>
name|statement
range|:
name|pipeline
control|)
block|{
name|Pipe
name|current
init|=
operator|new
name|Pipe
argument_list|(
name|this
argument_list|,
name|statement
argument_list|)
decl_stmt|;
if|if
condition|(
name|pipes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|out
operator|==
literal|null
condition|)
block|{
name|current
operator|.
name|setIn
argument_list|(
name|session
operator|.
name|in
argument_list|)
expr_stmt|;
name|current
operator|.
name|setOut
argument_list|(
name|session
operator|.
name|out
argument_list|)
expr_stmt|;
name|current
operator|.
name|setErr
argument_list|(
name|session
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Pipe
name|previous
init|=
name|pipes
operator|.
name|get
argument_list|(
name|pipes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|previous
operator|.
name|connect
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|pipes
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pipes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|pipes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pipes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|Pipe
name|pipe
range|:
name|pipes
control|)
block|{
name|pipe
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// FELIX-2723
comment|//for (Pipe pipe : pipes)
comment|//{
comment|//    pipe.join();
comment|//}
try|try
block|{
for|for
control|(
name|Pipe
name|pipe
range|:
name|pipes
control|)
block|{
name|pipe
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
for|for
control|(
name|Pipe
name|pipe
range|:
name|pipes
control|)
block|{
name|pipe
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
name|last
operator|=
name|pipes
operator|.
name|remove
argument_list|(
name|pipes
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Pipe
name|pipe
range|:
name|pipes
control|)
block|{
if|if
condition|(
name|pipe
operator|.
name|exception
operator|!=
literal|null
condition|)
block|{
comment|// can't throw exception, as result is defined by last pipe
name|Object
name|oloc
init|=
name|session
operator|.
name|get
argument_list|(
name|LOCATION
argument_list|)
decl_stmt|;
name|String
name|loc
init|=
operator|(
name|String
operator|.
name|valueOf
argument_list|(
name|oloc
argument_list|)
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|?
name|oloc
operator|+
literal|": "
else|:
literal|"pipe: "
operator|)
decl_stmt|;
name|session
operator|.
name|err
operator|.
name|println
argument_list|(
name|loc
operator|+
name|pipe
operator|.
name|exception
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|"pipe-exception"
argument_list|,
name|pipe
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|last
operator|.
name|exception
operator|!=
literal|null
condition|)
block|{
name|Pipe
operator|.
name|reset
argument_list|(
name|mark
argument_list|)
expr_stmt|;
throw|throw
name|last
operator|.
name|exception
throw|;
block|}
block|}
name|Pipe
operator|.
name|reset
argument_list|(
name|mark
argument_list|)
expr_stmt|;
comment|// reset IO in case same thread used for new client
return|return
name|last
operator|==
literal|null
condition|?
literal|null
else|:
name|last
operator|.
name|result
return|;
block|}
specifier|private
name|Object
name|eval
parameter_list|(
name|Object
name|v
parameter_list|)
block|{
name|String
name|s
init|=
name|v
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"null"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|v
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|v
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|v
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
name|s
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
specifier|public
name|Object
name|eval
parameter_list|(
specifier|final
name|Token
name|t
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|v
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|t
operator|.
name|type
condition|)
block|{
case|case
name|WORD
case|:
name|v
operator|=
name|Tokenizer
operator|.
name|expand
argument_list|(
name|t
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
name|v
condition|)
block|{
name|v
operator|=
name|eval
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CLOSURE
case|:
name|v
operator|=
operator|new
name|Closure
argument_list|(
name|session
argument_list|,
name|this
argument_list|,
name|t
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXECUTION
case|:
name|v
operator|=
operator|new
name|Closure
argument_list|(
name|session
argument_list|,
name|this
argument_list|,
name|t
argument_list|)
operator|.
name|execute
argument_list|(
name|session
argument_list|,
name|parms
argument_list|)
expr_stmt|;
break|break;
case|case
name|ARRAY
case|:
name|v
operator|=
name|array
argument_list|(
name|t
argument_list|)
expr_stmt|;
break|break;
case|case
name|ASSIGN
case|:
name|v
operator|=
name|t
operator|.
name|type
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|t
operator|.
name|line
argument_list|,
name|t
operator|.
name|column
argument_list|,
literal|"unexpected token: "
operator|+
name|t
operator|.
name|type
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
comment|/*      * executeStatement handles the following cases:      *<string> '=' word // simple assignment      *<string> '=' word word.. // complex assignment      *<bareword> word.. // command invocation      *<object> // value of<object>      *<object> word.. // method call      */
specifier|public
name|Object
name|executeStatement
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|statement
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|echo
init|=
name|session
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
decl_stmt|;
name|String
name|xtrace
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|echo
operator|!=
literal|null
operator|&&
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|echo
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
comment|// set -x execution trace
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"+"
argument_list|)
decl_stmt|;
for|for
control|(
name|Token
name|token
range|:
name|statement
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|token
operator|.
name|source
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|xtrace
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
name|session
operator|.
name|err
operator|.
name|println
argument_list|(
name|xtrace
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|errTok
operator|=
name|statement
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|statement
operator|.
name|size
argument_list|()
operator|>
literal|3
operator|)
operator|&&
name|Type
operator|.
name|ASSIGN
operator|.
name|equals
argument_list|(
name|statement
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|)
condition|)
block|{
name|errTok2
operator|=
name|statement
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Token
name|t
range|:
name|statement
control|)
block|{
name|Object
name|v
init|=
name|eval
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|Type
operator|.
name|EXECUTION
operator|==
name|t
operator|.
name|type
operator|)
operator|&&
operator|(
name|statement
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
return|return
name|v
return|;
block|}
if|if
condition|(
name|parms
operator|==
name|v
operator|&&
name|parms
operator|!=
literal|null
condition|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|parms
argument_list|)
expr_stmt|;
comment|// explode $args array
block|}
else|else
block|{
name|values
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|cmd
init|=
name|values
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Command name evaluates to null: "
operator|+
name|errTok
argument_list|)
throw|;
block|}
if|if
condition|(
name|cmd
operator|instanceof
name|CharSequence
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|Type
operator|.
name|ASSIGN
operator|.
name|equals
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|values
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|scmd
init|=
name|cmd
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Object
name|value
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|session
operator|.
name|variables
operator|.
name|remove
argument_list|(
name|scmd
argument_list|)
return|;
block|}
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|value
operator|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
name|values
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|cmd
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Command name evaluates to null: "
operator|+
name|errTok2
argument_list|)
throw|;
block|}
name|trace2
argument_list|(
name|xtrace
argument_list|,
name|cmd
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|value
operator|=
name|bareword
argument_list|(
name|statement
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|?
name|executeCmd
argument_list|(
name|cmd
operator|.
name|toString
argument_list|()
argument_list|,
name|values
argument_list|)
else|:
name|executeMethod
argument_list|(
name|cmd
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|assignment
argument_list|(
name|scmd
argument_list|,
name|value
argument_list|)
return|;
block|}
name|trace2
argument_list|(
name|xtrace
argument_list|,
name|cmd
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|bareword
argument_list|(
name|statement
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|?
name|executeCmd
argument_list|(
name|cmd
operator|.
name|toString
argument_list|()
argument_list|,
name|values
argument_list|)
else|:
name|executeMethod
argument_list|(
name|cmd
argument_list|,
name|values
argument_list|)
return|;
block|}
comment|// second level expanded execution trace
specifier|private
name|void
name|trace2
parameter_list|(
name|String
name|trace1
parameter_list|,
name|Object
name|cmd
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
literal|"verbose"
operator|.
name|equals
argument_list|(
name|session
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
argument_list|)
condition|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"+ "
operator|+
name|cmd
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|String
name|trace2
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|trace2
operator|.
name|equals
argument_list|(
name|trace1
argument_list|)
condition|)
block|{
name|session
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"+"
operator|+
name|trace2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|bareword
parameter_list|(
name|Token
name|t
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|(
name|t
operator|.
name|type
operator|==
name|Type
operator|.
name|WORD
operator|)
operator|&&
operator|(
name|t
operator|==
name|Tokenizer
operator|.
name|expand
argument_list|(
name|t
argument_list|,
name|this
argument_list|)
operator|)
operator|&&
operator|(
name|eval
argument_list|(
operator|(
name|Object
operator|)
name|t
argument_list|)
operator|instanceof
name|String
operator|)
operator|)
return|;
block|}
specifier|private
name|Object
name|executeCmd
parameter_list|(
name|String
name|scmd
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|scopedFunction
init|=
name|scmd
decl_stmt|;
name|Object
name|x
init|=
name|get
argument_list|(
name|scmd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|x
operator|instanceof
name|Function
operator|)
condition|)
block|{
if|if
condition|(
name|scmd
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|scopedFunction
operator|=
literal|"*:"
operator|+
name|scmd
expr_stmt|;
block|}
name|x
operator|=
name|get
argument_list|(
name|scopedFunction
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
operator|!
operator|(
name|x
operator|instanceof
name|Function
operator|)
condition|)
block|{
comment|// try default command handler
if|if
condition|(
name|session
operator|.
name|get
argument_list|(
name|DEFAULT_LOCK
argument_list|)
operator|==
literal|null
condition|)
block|{
name|x
operator|=
name|get
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
name|x
operator|=
name|get
argument_list|(
literal|"*:default"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|instanceof
name|Function
condition|)
block|{
try|try
block|{
name|session
operator|.
name|put
argument_list|(
name|DEFAULT_LOCK
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|values
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|scmd
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Function
operator|)
name|x
operator|)
operator|.
name|execute
argument_list|(
name|session
argument_list|,
name|values
argument_list|)
return|;
block|}
finally|finally
block|{
name|session
operator|.
name|variables
operator|.
name|remove
argument_list|(
name|DEFAULT_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
throw|throw
operator|new
name|CommandNotFoundException
argument_list|(
name|scmd
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
operator|(
name|Function
operator|)
name|x
operator|)
operator|.
name|execute
argument_list|(
name|session
argument_list|,
name|values
argument_list|)
return|;
block|}
specifier|private
name|Object
name|executeMethod
parameter_list|(
name|Object
name|cmd
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|cmd
return|;
block|}
name|boolean
name|dot
init|=
name|values
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
literal|"."
operator|.
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// FELIX-1473 - allow method chaining using dot pseudo-operator, e.g.
comment|//  (bundle 0) . loadClass java.net.InetAddress . localhost . hostname
comment|//  (((bundle 0) loadClass java.net.InetAddress ) localhost ) hostname
if|if
condition|(
name|dot
condition|)
block|{
name|Object
name|target
init|=
name|cmd
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|values
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|arg
range|:
name|values
control|)
block|{
if|if
condition|(
literal|"."
operator|.
name|equals
argument_list|(
name|arg
argument_list|)
condition|)
block|{
name|target
operator|=
name|Reflective
operator|.
name|invoke
argument_list|(
name|session
argument_list|,
name|target
argument_list|,
name|args
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|target
return|;
block|}
return|return
name|Reflective
operator|.
name|invoke
argument_list|(
name|session
argument_list|,
name|target
argument_list|,
name|args
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|args
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
operator|&&
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Object
index|[]
name|cmdv
init|=
operator|(
name|Object
index|[]
operator|)
name|cmd
decl_stmt|;
name|String
name|index
init|=
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
literal|"length"
operator|.
name|equals
argument_list|(
name|index
argument_list|)
condition|?
name|cmdv
operator|.
name|length
else|:
name|cmdv
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
else|else
block|{
return|return
name|Reflective
operator|.
name|invoke
argument_list|(
name|session
argument_list|,
name|cmd
argument_list|,
name|values
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|values
argument_list|)
return|;
block|}
block|}
specifier|private
name|Object
name|assignment
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|session
operator|.
name|variables
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
specifier|private
name|Object
name|array
parameter_list|(
name|Token
name|array
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
argument_list|()
decl_stmt|;
operator|(
operator|new
name|Parser
argument_list|(
name|array
argument_list|)
operator|)
operator|.
name|array
argument_list|(
name|list
argument_list|,
name|map
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|olist
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Token
name|t
range|:
name|list
control|)
block|{
name|Object
name|oval
init|=
name|eval
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|oval
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Object
index|[]
operator|)
name|oval
control|)
block|{
name|olist
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|olist
operator|.
name|add
argument_list|(
name|oval
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|olist
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|omap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Token
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|k
init|=
name|eval
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|k
operator|instanceof
name|String
operator|)
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|key
operator|.
name|line
argument_list|,
name|key
operator|.
name|column
argument_list|,
literal|"map key null or not String: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|omap
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|eval
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|omap
return|;
block|}
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|parms
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"args"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|parms
return|;
block|}
if|if
condition|(
literal|"argv"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|parmv
return|;
block|}
if|if
condition|(
literal|"it"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|parms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|-
literal|'0'
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
return|return
name|parms
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|session
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|session
operator|.
name|variables
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|source
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n+"
argument_list|,
literal|"\n"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"([^\\\\{(\\[])\n"
argument_list|,
literal|"\\1;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"[ \\\\\t\n]+"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
comment|/**      * List that overrides toString() for implicit $args expansion.      * Also checks for index out of bounds, so that $1 evaluates to null      * rather than throwing IndexOutOfBoundsException.      * e.g. x = { a$args }; x 1 2 => a1 2 and not a[1, 2]      */
class|class
name|ArgList
extends|extends
name|AbstractList
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|list
decl_stmt|;
specifier|public
name|ArgList
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|args
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|index
operator|<
name|list
operator|.
name|size
argument_list|()
condition|?
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|list
operator|.
name|remove
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

