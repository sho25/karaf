begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|HelpOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|util
operator|.
name|IndentFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|util
operator|.
name|ShellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_class
specifier|public
class|class
name|ActionMetaData
block|{
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|actionClass
decl_stmt|;
specifier|private
specifier|final
name|Command
name|command
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|options
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|arguments
decl_stmt|;
name|List
argument_list|<
name|Argument
argument_list|>
name|orderedArguments
decl_stmt|;
specifier|private
specifier|final
name|Completer
index|[]
name|completers
decl_stmt|;
specifier|public
name|ActionMetaData
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|actionClass
parameter_list|,
name|Command
name|command
parameter_list|,
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|options
parameter_list|,
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|args
parameter_list|,
name|List
argument_list|<
name|Argument
argument_list|>
name|orderedArguments
parameter_list|,
name|Completer
index|[]
name|completers
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|actionClass
operator|=
name|actionClass
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|args
expr_stmt|;
name|this
operator|.
name|orderedArguments
operator|=
name|orderedArguments
expr_stmt|;
name|this
operator|.
name|completers
operator|=
name|completers
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|getActionClass
parameter_list|()
block|{
return|return
name|actionClass
return|;
block|}
specifier|public
name|Command
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|getArguments
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|Completer
index|[]
name|getCompleters
parameter_list|()
block|{
return|return
name|completers
return|;
block|}
specifier|public
name|List
argument_list|<
name|Argument
argument_list|>
name|getOrderedArguments
parameter_list|()
block|{
return|return
name|orderedArguments
return|;
block|}
specifier|public
name|void
name|printUsage
parameter_list|(
name|Action
name|action
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|globalScope
parameter_list|,
name|int
name|termWidth
parameter_list|)
block|{
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Argument
argument_list|>
name|argumentsSet
init|=
operator|new
name|ArrayList
argument_list|<
name|Argument
argument_list|>
argument_list|(
name|arguments
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|argumentsSet
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Argument
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Argument
name|o1
parameter_list|,
name|Argument
name|o2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|o1
operator|.
name|index
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|o2
operator|.
name|index
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Option
argument_list|>
name|optionsSet
init|=
operator|new
name|HashSet
argument_list|<
name|Option
argument_list|>
argument_list|(
name|options
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|optionsSet
operator|.
name|add
argument_list|(
name|HelpOption
operator|.
name|HELP
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
operator|&&
operator|(
name|command
operator|.
name|description
argument_list|()
operator|!=
literal|null
operator|||
name|command
operator|.
name|name
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"DESCRIPTION"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|name
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|globalScope
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|command
operator|.
name|scope
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
literal|":"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|command
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|StringBuffer
name|syntax
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|globalScope
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
name|command
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s:%s"
argument_list|,
name|command
operator|.
name|scope
argument_list|()
argument_list|,
name|command
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|" [options]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|argumentsSet
control|)
block|{
if|if
condition|(
operator|!
name|argument
operator|.
name|required
argument_list|()
condition|)
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"[%s] "
argument_list|,
name|argument
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|syntax
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s "
argument_list|,
name|argument
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"SYNTAX"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|syntax
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"ARGUMENTS"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Argument
name|argument
range|:
name|argumentsSet
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|argument
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|IndentFormatter
operator|.
name|printFormatted
argument_list|(
literal|"                "
argument_list|,
name|argument
operator|.
name|description
argument_list|()
argument_list|,
name|termWidth
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|argument
operator|.
name|required
argument_list|()
condition|)
block|{
if|if
condition|(
name|argument
operator|.
name|valueToShowInHelp
argument_list|()
operator|!=
literal|null
operator|&&
name|argument
operator|.
name|valueToShowInHelp
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
name|Argument
operator|.
name|DEFAULT_STRING
operator|.
name|equals
argument_list|(
name|argument
operator|.
name|valueToShowInHelp
argument_list|()
argument_list|)
condition|)
block|{
name|arguments
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|arguments
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|printObjectDefaultsTo
argument_list|(
name|out
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printDefaultsTo
argument_list|(
name|out
argument_list|,
name|argument
operator|.
name|valueToShowInHelp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"OPTIONS"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|optionsSet
control|)
block|{
name|String
name|opt
init|=
name|option
operator|.
name|name
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|alias
range|:
name|option
operator|.
name|aliases
argument_list|()
control|)
block|{
name|opt
operator|+=
literal|", "
operator|+
name|alias
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|opt
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|IndentFormatter
operator|.
name|printFormatted
argument_list|(
literal|"                "
argument_list|,
name|option
operator|.
name|description
argument_list|()
argument_list|,
name|termWidth
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|valueToShowInHelp
argument_list|()
operator|!=
literal|null
operator|&&
name|option
operator|.
name|valueToShowInHelp
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
try|try
block|{
if|if
condition|(
name|Option
operator|.
name|DEFAULT_STRING
operator|.
name|equals
argument_list|(
name|option
operator|.
name|valueToShowInHelp
argument_list|()
argument_list|)
condition|)
block|{
name|options
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|options
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|printObjectDefaultsTo
argument_list|(
name|out
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printDefaultsTo
argument_list|(
name|out
argument_list|,
name|option
operator|.
name|valueToShowInHelp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|detailedDescription
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
literal|"DETAILS"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
name|loadDescription
argument_list|(
name|actionClass
argument_list|,
name|command
operator|.
name|detailedDescription
argument_list|()
argument_list|)
decl_stmt|;
name|IndentFormatter
operator|.
name|printFormatted
argument_list|(
literal|"        "
argument_list|,
name|desc
argument_list|,
name|termWidth
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|loadDescription
parameter_list|(
name|Class
name|clazz
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|.
name|startsWith
argument_list|(
literal|"classpath:"
argument_list|)
condition|)
block|{
name|desc
operator|=
name|ShellUtil
operator|.
name|loadClassPathResource
argument_list|(
name|clazz
argument_list|,
name|desc
operator|.
name|substring
argument_list|(
literal|"classpath:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
specifier|private
name|void
name|printObjectDefaultsTo
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Boolean
operator|)
operator|||
operator|(
operator|(
name|Boolean
operator|)
name|o
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|o
operator|instanceof
name|Number
operator|)
operator|||
operator|(
operator|(
name|Number
operator|)
name|o
operator|)
operator|.
name|doubleValue
argument_list|()
operator|!=
literal|0.0
operator|)
condition|)
block|{
name|printDefaultsTo
argument_list|(
name|out
argument_list|,
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printDefaultsTo
parameter_list|(
name|PrintStream
name|out
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"                (defaults to "
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

