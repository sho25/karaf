begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|security
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|CommandProcessorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|CommandProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|activator
operator|.
name|Activator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSessionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|threadio
operator|.
name|ThreadIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|util
operator|.
name|ShellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|SecuredCommandProcessorImpl
extends|extends
name|CommandProcessorImpl
block|{
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|final
name|ServiceReference
argument_list|<
name|ThreadIO
argument_list|>
name|threadIOServiceReference
decl_stmt|;
specifier|private
specifier|final
name|ServiceTracker
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|commandTracker
decl_stmt|;
specifier|private
specifier|final
name|ServiceTracker
argument_list|<
name|Converter
argument_list|,
name|Converter
argument_list|>
name|converterTracker
decl_stmt|;
specifier|private
specifier|final
name|ServiceTracker
argument_list|<
name|CommandSessionListener
argument_list|,
name|CommandSessionListener
argument_list|>
name|listenerTracker
decl_stmt|;
specifier|public
name|SecuredCommandProcessorImpl
parameter_list|(
name|BundleContext
name|bc
parameter_list|)
block|{
name|this
argument_list|(
name|bc
argument_list|,
name|bc
operator|.
name|getServiceReference
argument_list|(
name|ThreadIO
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SecuredCommandProcessorImpl
parameter_list|(
name|BundleContext
name|bc
parameter_list|,
name|ServiceReference
argument_list|<
name|ThreadIO
argument_list|>
name|sr
parameter_list|)
block|{
name|super
argument_list|(
name|bc
operator|.
name|getService
argument_list|(
name|sr
argument_list|)
argument_list|)
expr_stmt|;
name|bundleContext
operator|=
name|bc
expr_stmt|;
name|threadIOServiceReference
operator|=
name|sr
expr_stmt|;
name|AccessControlContext
name|acc
init|=
name|AccessController
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|Subject
name|sub
init|=
name|Subject
operator|.
name|getSubject
argument_list|(
name|acc
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"No current Subject in the Access Control Context"
argument_list|)
throw|;
name|Set
argument_list|<
name|RolePrincipal
argument_list|>
name|rolePrincipals
init|=
name|sub
operator|.
name|getPrincipals
argument_list|(
name|RolePrincipal
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rolePrincipals
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Current user "
operator|+
name|ShellUtil
operator|.
name|getCurrentUserName
argument_list|()
operator|+
literal|" has no associated roles."
argument_list|)
throw|;
comment|// TODO cater for custom roles
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(|"
argument_list|)
expr_stmt|;
for|for
control|(
name|RolePrincipal
name|rp
range|:
name|rolePrincipals
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"org.apache.karaf.service.guard.roles"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|escapeforFilterString
argument_list|(
name|rp
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"(!(org.apache.karaf.service.guard.roles=*))"
argument_list|)
expr_stmt|;
comment|// Or no roles specified at all
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|String
name|roleClause
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|addConstant
argument_list|(
name|Activator
operator|.
name|CONTEXT
argument_list|,
name|bc
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
literal|"osgi"
argument_list|,
name|this
argument_list|,
literal|"addCommand"
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
literal|"osgi"
argument_list|,
name|this
argument_list|,
literal|"removeCommand"
argument_list|)
expr_stmt|;
name|addCommand
argument_list|(
literal|"osgi"
argument_list|,
name|this
argument_list|,
literal|"eval"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// The role clause is used to only display commands that the current user can invoke.
name|commandTracker
operator|=
name|trackCommands
argument_list|(
name|bc
argument_list|,
name|roleClause
argument_list|)
expr_stmt|;
name|commandTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|converterTracker
operator|=
name|trackConverters
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|converterTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|listenerTracker
operator|=
name|trackListeners
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|listenerTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|commandTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|converterTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|listenerTracker
operator|.
name|close
argument_list|()
expr_stmt|;
name|bundleContext
operator|.
name|ungetService
argument_list|(
name|threadIOServiceReference
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ServiceTracker
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|trackCommands
parameter_list|(
specifier|final
name|BundleContext
name|context
parameter_list|,
name|String
name|roleClause
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|Filter
name|filter
init|=
name|context
operator|.
name|createFilter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=*)(%s=*)%s)"
argument_list|,
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|,
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|,
name|roleClause
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ServiceTracker
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|(
name|context
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|Object
argument_list|>
name|reference
parameter_list|)
block|{
name|Object
name|scope
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
decl_stmt|;
name|Object
name|function
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
operator|&&
name|function
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|function
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|f
range|:
operator|(
operator|(
name|Object
index|[]
operator|)
name|function
operator|)
control|)
block|{
name|Function
name|target
init|=
operator|new
name|CommandProxy
argument_list|(
name|context
argument_list|,
name|reference
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|addCommand
argument_list|(
name|scope
operator|.
name|toString
argument_list|()
argument_list|,
name|target
argument_list|,
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Function
name|target
init|=
operator|new
name|CommandProxy
argument_list|(
name|context
argument_list|,
name|reference
argument_list|,
name|function
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|addCommand
argument_list|(
name|scope
operator|.
name|toString
argument_list|()
argument_list|,
name|target
argument_list|,
name|function
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|Object
argument_list|>
name|reference
parameter_list|,
name|Object
name|service
parameter_list|)
block|{
name|Object
name|scope
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
decl_stmt|;
name|Object
name|function
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|!=
literal|null
operator|&&
name|function
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|function
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|removeCommand
argument_list|(
name|scope
operator|.
name|toString
argument_list|()
argument_list|,
name|function
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Object
name|func
range|:
operator|(
name|Object
index|[]
operator|)
name|function
control|)
block|{
name|removeCommand
argument_list|(
name|scope
operator|.
name|toString
argument_list|()
argument_list|,
name|func
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|ServiceTracker
argument_list|<
name|Converter
argument_list|,
name|Converter
argument_list|>
name|trackConverters
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ServiceTracker
argument_list|<
name|Converter
argument_list|,
name|Converter
argument_list|>
argument_list|(
name|context
argument_list|,
name|Converter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Converter
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|Converter
argument_list|>
name|reference
parameter_list|)
block|{
name|Converter
name|converter
init|=
name|super
operator|.
name|addingService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|addConverter
argument_list|(
name|converter
argument_list|)
expr_stmt|;
return|return
name|converter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|Converter
argument_list|>
name|reference
parameter_list|,
name|Converter
name|service
parameter_list|)
block|{
name|removeConverter
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|super
operator|.
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|ServiceTracker
argument_list|<
name|CommandSessionListener
argument_list|,
name|CommandSessionListener
argument_list|>
name|trackListeners
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|ServiceTracker
argument_list|<
name|CommandSessionListener
argument_list|,
name|CommandSessionListener
argument_list|>
argument_list|(
name|context
argument_list|,
name|CommandSessionListener
operator|.
name|class
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|CommandSessionListener
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|CommandSessionListener
argument_list|>
name|reference
parameter_list|)
block|{
name|CommandSessionListener
name|listener
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
name|listener
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|CommandSessionListener
argument_list|>
name|reference
parameter_list|,
name|CommandSessionListener
name|service
parameter_list|)
block|{
name|removeListener
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|String
name|escapeforFilterString
parameter_list|(
name|String
name|original
parameter_list|)
block|{
comment|//the filter string follow the LDAP rule
comment|//where we need escape the special char
name|String
name|ret
init|=
name|original
decl_stmt|;
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"\\\\"
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
literal|"*"
argument_list|,
literal|"\\*"
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
literal|"("
argument_list|,
literal|"\\("
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
literal|")"
argument_list|,
literal|"\\)"
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

