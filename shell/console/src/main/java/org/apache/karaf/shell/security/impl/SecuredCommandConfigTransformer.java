begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|security
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|SecuredCommandConfigTransformer
implements|implements
name|ConfigurationListener
block|{
specifier|static
specifier|final
name|String
name|PROXY_COMMAND_ACL_PID_PREFIX
init|=
literal|"org.apache.karaf.command.acl."
decl_stmt|;
specifier|static
specifier|final
name|String
name|PROXY_SERVICE_ACL_PID_PREFIX
init|=
literal|"org.apache.karaf.service.acl.command."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SecuredCommandConfigTransformer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIGURATION_FILTER
init|=
literal|"("
operator|+
name|Constants
operator|.
name|SERVICE_PID
operator|+
literal|"="
operator|+
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|+
literal|"*)"
decl_stmt|;
specifier|private
name|ConfigurationAdmin
name|configAdmin
decl_stmt|;
specifier|public
name|void
name|setConfigAdmin
parameter_list|(
name|ConfigurationAdmin
name|configAdmin
parameter_list|)
block|{
name|this
operator|.
name|configAdmin
operator|=
name|configAdmin
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
index|[]
name|configs
init|=
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
name|CONFIGURATION_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Configuration
name|config
range|:
name|configs
control|)
block|{
name|generateServiceGuardConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|generateServiceGuardConfig
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|getPid
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PROXY_COMMAND_ACL_PID_PREFIX
argument_list|)
condition|)
block|{
comment|// not a command scope configuration file
return|return;
block|}
name|String
name|scopeName
init|=
name|config
operator|.
name|getPid
argument_list|()
operator|.
name|substring
argument_list|(
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scopeName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// scopes don't contains dots, not a command scope
return|return;
block|}
name|scopeName
operator|=
name|scopeName
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|configMaps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|bareCommand
init|=
name|key
decl_stmt|;
name|String
name|arguments
init|=
literal|""
decl_stmt|;
name|int
name|idx
init|=
name|bareCommand
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|arguments
operator|=
name|convertArgs
argument_list|(
name|bareCommand
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|bareCommand
operator|=
name|bareCommand
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bareCommand
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// not a command
continue|continue;
block|}
name|bareCommand
operator|=
name|bareCommand
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|pid
init|=
name|PROXY_SERVICE_ACL_PID_PREFIX
operator|+
name|scopeName
operator|+
literal|"."
operator|+
name|bareCommand
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
if|if
condition|(
operator|!
name|configMaps
operator|.
name|containsKey
argument_list|(
name|pid
argument_list|)
condition|)
block|{
name|map
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"service.guard"
argument_list|,
literal|"(&("
operator|+
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
operator|+
literal|"="
operator|+
name|scopeName
operator|+
literal|")("
operator|+
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
operator|+
literal|"="
operator|+
name|bareCommand
operator|+
literal|"))"
argument_list|)
expr_stmt|;
name|configMaps
operator|.
name|put
argument_list|(
name|pid
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
name|configMaps
operator|.
name|get
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
comment|// put rules on the map twice, once for commands that 'execute' (implement Function) and
comment|// once for commands that are invoked directly
name|Object
name|roleString
init|=
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"execute"
operator|+
name|arguments
argument_list|,
name|roleString
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|roleString
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"*"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
comment|// any other method may be invoked by anyone
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Generating command ACL config {} into service ACL configs {}"
argument_list|,
name|config
operator|.
name|getPid
argument_list|()
argument_list|,
name|configMaps
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// update config admin with the generated configuration
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|configMaps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Configuration
name|genConfig
init|=
name|configAdmin
operator|.
name|getConfiguration
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|genConfig
operator|.
name|update
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|convertArgs
parameter_list|(
name|String
name|commandACLArgs
parameter_list|)
block|{
if|if
condition|(
operator|!
name|commandACLArgs
operator|.
name|startsWith
argument_list|(
literal|"[/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Badly formatted argument match: "
operator|+
name|commandACLArgs
operator|+
literal|" Should start with '[/'"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|commandACLArgs
operator|.
name|endsWith
argument_list|(
literal|"/]"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Badly formatted argument match: "
operator|+
name|commandACLArgs
operator|+
literal|" Should end with '/]'"
argument_list|)
throw|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"[/.*/,"
argument_list|)
expr_stmt|;
comment|// add a wildcard argument since the Function execute method has the arguments as second arg
name|sb
operator|.
name|append
argument_list|(
name|commandACLArgs
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|void
name|deleteServiceGuardConfig
parameter_list|(
name|String
name|originatingPid
parameter_list|,
name|String
name|scope
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
if|if
condition|(
name|scope
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
comment|// This is not a command scope as that should be a single word without any further dots
return|return;
comment|// Delete all the generated configurations for this scope
name|Configuration
index|[]
name|configs
init|=
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid="
operator|+
name|PROXY_SERVICE_ACL_PID_PREFIX
operator|+
name|scope
operator|+
literal|".*)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configs
operator|==
literal|null
condition|)
return|return;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Config ACL deleted: {}. Deleting generated service ACL configs {}"
argument_list|,
name|originatingPid
argument_list|,
name|configs
argument_list|)
expr_stmt|;
for|for
control|(
name|Configuration
name|config
range|:
name|configs
control|)
block|{
name|config
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|configurationEvent
parameter_list|(
name|ConfigurationEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getPid
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PROXY_COMMAND_ACL_PID_PREFIX
argument_list|)
condition|)
return|return;
try|try
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ConfigurationEvent
operator|.
name|CM_DELETED
case|:
name|deleteServiceGuardConfig
argument_list|(
name|event
operator|.
name|getPid
argument_list|()
argument_list|,
name|event
operator|.
name|getPid
argument_list|()
operator|.
name|substring
argument_list|(
name|PROXY_COMMAND_ACL_PID_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|ConfigurationEvent
operator|.
name|CM_UPDATED
case|:
name|generateServiceGuardConfig
argument_list|(
name|configAdmin
operator|.
name|getConfiguration
argument_list|(
name|event
operator|.
name|getPid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Problem processing Configuration Event {}"
argument_list|,
name|event
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

