begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|table2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|Row
block|{
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|data
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|content
decl_stmt|;
name|Row
parameter_list|()
block|{
name|data
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|content
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|Row
parameter_list|(
name|List
argument_list|<
name|Col
argument_list|>
name|cols
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
for|for
control|(
name|Col
name|col
range|:
name|cols
control|)
block|{
name|data
operator|.
name|add
argument_list|(
name|col
operator|.
name|getHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addContent
parameter_list|(
name|Object
modifier|...
name|cellDataAr
parameter_list|)
block|{
name|data
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cellDataAr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|formatContent
parameter_list|(
name|List
argument_list|<
name|Col
argument_list|>
name|cols
parameter_list|)
block|{
name|content
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Col
name|col
range|:
name|cols
control|)
block|{
name|content
operator|.
name|add
argument_list|(
name|col
operator|.
name|format
argument_list|(
name|data
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|++
expr_stmt|;
block|}
block|}
name|String
name|getContent
parameter_list|(
name|List
argument_list|<
name|Col
argument_list|>
name|cols
parameter_list|)
block|{
name|StringBuilder
name|st
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cols
operator|.
name|size
argument_list|()
operator|!=
name|content
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Number of columns and number of content elements do not match"
argument_list|)
throw|;
block|}
name|st
operator|.
name|append
argument_list|(
literal|"| "
argument_list|)
expr_stmt|;
for|for
control|(
name|Col
name|col
range|:
name|cols
control|)
block|{
name|st
operator|.
name|append
argument_list|(
name|col
operator|.
name|getContent
argument_list|(
name|content
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|+
literal|1
operator|<
name|cols
operator|.
name|size
argument_list|()
condition|)
block|{
name|st
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|c
operator|++
expr_stmt|;
block|}
name|st
operator|.
name|append
argument_list|(
literal|" |"
argument_list|)
expr_stmt|;
return|return
name|st
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

