begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|jline
package|;
end_package

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|UnsupportedTerminal
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|AnsiWindowsTerminal
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|NoInterruptUnixTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|internal
operator|.
name|WindowsSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_class
specifier|public
class|class
name|TerminalFactory
block|{
specifier|private
name|Terminal
name|term
decl_stmt|;
specifier|public
specifier|synchronized
name|Terminal
name|getTerminal
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
return|return
name|term
return|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"jline.UnsupportedTerminal"
operator|.
name|equals
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"jline.terminal"
argument_list|)
argument_list|)
condition|)
block|{
name|term
operator|=
operator|new
name|UnsupportedTerminal
argument_list|()
expr_stmt|;
return|return;
block|}
name|boolean
name|windows
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"windows"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|windows
condition|)
block|{
name|AnsiWindowsTerminal
name|t
init|=
operator|new
name|KarafWindowsTerminal
argument_list|()
decl_stmt|;
name|t
operator|.
name|setDirectConsole
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|init
argument_list|()
expr_stmt|;
name|term
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|NoInterruptUnixTerminal
name|t
init|=
operator|new
name|NoInterruptUnixTerminal
argument_list|()
decl_stmt|;
name|t
operator|.
name|init
argument_list|()
expr_stmt|;
name|term
operator|=
name|t
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using an unsupported terminal: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|term
operator|=
operator|new
name|UnsupportedTerminal
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
name|term
operator|.
name|restore
argument_list|()
expr_stmt|;
name|term
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|KarafWindowsTerminal
extends|extends
name|AnsiWindowsTerminal
block|{
specifier|public
name|KarafWindowsTerminal
parameter_list|()
throws|throws
name|Exception
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|readCharacter
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isSystemIn
argument_list|(
name|in
argument_list|)
condition|)
block|{
return|return
name|WindowsSupport
operator|.
name|readByte
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|readCharacter
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|isSystemIn
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
if|if
condition|(
name|in
operator|==
name|System
operator|.
name|in
condition|)
block|{
return|return
literal|true
return|;
block|}
while|while
condition|(
name|in
operator|instanceof
name|FilterInputStream
condition|)
block|{
try|try
block|{
name|Field
name|f
init|=
name|FilterInputStream
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"in"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|in
operator|=
operator|(
name|InputStream
operator|)
name|f
operator|.
name|get
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
break|break;
block|}
if|if
condition|(
name|in
operator|==
name|System
operator|.
name|in
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|in
operator|instanceof
name|FileInputStream
operator|&&
operator|(
operator|(
name|FileInputStream
operator|)
name|in
operator|)
operator|.
name|getFD
argument_list|()
operator|==
name|FileDescriptor
operator|.
name|in
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

