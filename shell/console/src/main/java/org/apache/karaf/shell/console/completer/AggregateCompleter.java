begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|completer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_comment
comment|/**  * Completer which contains multipule completers and aggregates them together.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|AggregateCompleter
implements|implements
name|Completer
block|{
specifier|private
specifier|final
name|Collection
argument_list|<
name|Completer
argument_list|>
name|completers
decl_stmt|;
specifier|public
name|AggregateCompleter
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Completer
argument_list|>
name|completers
parameter_list|)
block|{
assert|assert
name|completers
operator|!=
literal|null
assert|;
name|this
operator|.
name|completers
operator|=
name|completers
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|int
name|complete
parameter_list|(
specifier|final
name|String
name|buffer
parameter_list|,
specifier|final
name|int
name|cursor
parameter_list|,
specifier|final
name|List
name|candidates
parameter_list|)
block|{
comment|// buffer could be null
assert|assert
name|candidates
operator|!=
literal|null
assert|;
name|List
argument_list|<
name|Completion
argument_list|>
name|completions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|completers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run each completer, saving its completion results
name|int
name|max
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Completer
name|completer
range|:
name|completers
control|)
block|{
name|Completion
name|completion
init|=
operator|new
name|Completion
argument_list|(
name|candidates
argument_list|)
decl_stmt|;
name|completion
operator|.
name|complete
argument_list|(
name|completer
argument_list|,
name|buffer
argument_list|,
name|cursor
argument_list|)
expr_stmt|;
comment|// Compute the max cursor position
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|completion
operator|.
name|cursor
argument_list|)
expr_stmt|;
name|completions
operator|.
name|add
argument_list|(
name|completion
argument_list|)
expr_stmt|;
block|}
comment|// Append candiates from completions which have the same cursor position as max
for|for
control|(
name|Completion
name|completion
range|:
name|completions
control|)
block|{
if|if
condition|(
name|completion
operator|.
name|cursor
operator|==
name|max
condition|)
block|{
comment|// noinspection unchecked
name|candidates
operator|.
name|addAll
argument_list|(
name|completion
operator|.
name|candidates
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|max
return|;
block|}
specifier|private
class|class
name|Completion
block|{
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|candidates
decl_stmt|;
specifier|public
name|int
name|cursor
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|Completion
parameter_list|(
specifier|final
name|List
name|candidates
parameter_list|)
block|{
assert|assert
name|candidates
operator|!=
literal|null
assert|;
comment|// noinspection unchecked
name|this
operator|.
name|candidates
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|(
name|candidates
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|complete
parameter_list|(
specifier|final
name|Completer
name|completer
parameter_list|,
specifier|final
name|String
name|buffer
parameter_list|,
specifier|final
name|int
name|cursor
parameter_list|)
block|{
assert|assert
name|completer
operator|!=
literal|null
assert|;
name|this
operator|.
name|cursor
operator|=
name|completer
operator|.
name|complete
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

