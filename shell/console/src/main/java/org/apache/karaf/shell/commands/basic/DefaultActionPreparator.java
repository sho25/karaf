begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|basic
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|COLOR_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|COLOR_RED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|INTENSITY_BOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|INTENSITY_NORMAL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|CommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|HelpOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|converter
operator|.
name|DefaultConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|converter
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|meta
operator|.
name|ActionMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|meta
operator|.
name|ActionMetaDataFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|NameScoping
import|;
end_import

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|DefaultActionPreparator
implements|implements
name|ActionPreparator
block|{
specifier|public
name|boolean
name|prepare
parameter_list|(
name|Action
name|action
parameter_list|,
name|CommandSession
name|session
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|ActionMetaData
name|actionMetaData
init|=
operator|new
name|ActionMetaDataFactory
argument_list|()
operator|.
name|create
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|options
init|=
name|actionMetaData
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Argument
argument_list|,
name|Field
argument_list|>
name|arguments
init|=
name|actionMetaData
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Argument
argument_list|>
name|orderedArguments
init|=
name|actionMetaData
operator|.
name|getOrderedArguments
argument_list|()
decl_stmt|;
name|Command
name|command2
init|=
name|actionMetaData
operator|.
name|getCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|command2
operator|==
literal|null
condition|)
block|{
comment|// to avoid NPE with subshell
return|return
literal|true
return|;
block|}
name|String
name|commandErrorSt
init|=
operator|(
name|command2
operator|!=
literal|null
operator|)
condition|?
name|COLOR_RED
operator|+
literal|"Error executing command "
operator|+
name|command2
operator|.
name|scope
argument_list|()
operator|+
literal|":"
operator|+
name|INTENSITY_BOLD
operator|+
name|command2
operator|.
name|name
argument_list|()
operator|+
name|INTENSITY_NORMAL
operator|+
name|COLOR_DEFAULT
operator|+
literal|": "
else|:
literal|""
decl_stmt|;
for|for
control|(
name|Object
name|param
range|:
name|params
control|)
block|{
if|if
condition|(
name|HelpOption
operator|.
name|HELP
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|param
argument_list|)
condition|)
block|{
name|int
name|termWidth
init|=
name|getWidth
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|boolean
name|globalScope
init|=
name|NameScoping
operator|.
name|isGlobalScope
argument_list|(
name|session
argument_list|,
name|actionMetaData
operator|.
name|getCommand
argument_list|()
operator|.
name|scope
argument_list|()
argument_list|)
decl_stmt|;
name|actionMetaData
operator|.
name|printUsage
argument_list|(
name|action
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|globalScope
argument_list|,
name|termWidth
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// Populate
name|Map
argument_list|<
name|Option
argument_list|,
name|Object
argument_list|>
name|optionValues
init|=
operator|new
name|HashMap
argument_list|<
name|Option
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Argument
argument_list|,
name|Object
argument_list|>
name|argumentValues
init|=
operator|new
name|HashMap
argument_list|<
name|Argument
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|processOptions
init|=
literal|true
decl_stmt|;
name|int
name|argIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|it
init|=
name|params
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|param
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|processOptions
operator|&&
name|param
operator|instanceof
name|String
operator|&&
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|boolean
name|isKeyValuePair
init|=
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|String
name|name
decl_stmt|;
name|Object
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isKeyValuePair
condition|)
block|{
name|name
operator|=
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|substring
argument_list|(
operator|(
operator|(
name|String
operator|)
name|param
operator|)
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
operator|(
name|String
operator|)
name|param
expr_stmt|;
block|}
name|Option
name|option
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Option
name|opt
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|opt
operator|.
name|name
argument_list|()
argument_list|)
operator|||
name|Arrays
operator|.
name|asList
argument_list|(
name|opt
operator|.
name|aliases
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|option
operator|=
name|opt
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
name|commandErrorSt
operator|+
literal|"undefined option "
operator|+
name|INTENSITY_BOLD
operator|+
name|param
operator|+
name|INTENSITY_NORMAL
operator|+
literal|"\n"
operator|+
literal|"Try<command> --help' for more information."
argument_list|,
literal|"Undefined option: "
operator|+
name|param
argument_list|)
throw|;
block|}
name|Field
name|field
init|=
name|options
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
operator|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|boolean
operator|.
name|class
operator|||
name|field
operator|.
name|getType
argument_list|()
operator|==
name|Boolean
operator|.
name|class
operator|)
condition|)
block|{
name|value
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|value
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
name|commandErrorSt
operator|+
literal|"missing value for option "
operator|+
name|INTENSITY_BOLD
operator|+
name|param
operator|+
name|INTENSITY_NORMAL
argument_list|,
literal|"Missing value for option: "
operator|+
name|param
argument_list|)
throw|;
block|}
if|if
condition|(
name|option
operator|.
name|multiValued
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|optionValues
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|optionValues
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|optionValues
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|processOptions
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|argIndex
operator|>=
name|orderedArguments
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
name|commandErrorSt
operator|+
literal|"too many arguments specified"
argument_list|,
literal|"Too many arguments specified"
argument_list|)
throw|;
block|}
name|Argument
name|argument
init|=
name|orderedArguments
operator|.
name|get
argument_list|(
name|argIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|argument
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|argIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|argument
operator|.
name|multiValued
argument_list|()
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|l
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|argumentValues
operator|.
name|get
argument_list|(
name|argument
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|argumentValues
operator|.
name|put
argument_list|(
name|argument
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|argumentValues
operator|.
name|put
argument_list|(
name|argument
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check required arguments / options
for|for
control|(
name|Option
name|option
range|:
name|options
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|option
operator|.
name|required
argument_list|()
operator|&&
name|optionValues
operator|.
name|get
argument_list|(
name|option
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
name|commandErrorSt
operator|+
literal|"option "
operator|+
name|INTENSITY_BOLD
operator|+
name|option
operator|.
name|name
argument_list|()
operator|+
name|INTENSITY_NORMAL
operator|+
literal|" is required"
argument_list|,
literal|"Option "
operator|+
name|option
operator|.
name|name
argument_list|()
operator|+
literal|" is required"
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Argument
name|argument
range|:
name|orderedArguments
control|)
block|{
if|if
condition|(
name|argument
operator|.
name|required
argument_list|()
operator|&&
name|argumentValues
operator|.
name|get
argument_list|(
name|argument
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
name|commandErrorSt
operator|+
literal|"argument "
operator|+
name|INTENSITY_BOLD
operator|+
name|argument
operator|.
name|name
argument_list|()
operator|+
name|INTENSITY_NORMAL
operator|+
literal|" is required"
argument_list|,
literal|"Argument "
operator|+
name|argument
operator|.
name|name
argument_list|()
operator|+
literal|" is required"
argument_list|)
throw|;
block|}
block|}
comment|// Convert and inject values
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Option
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|optionValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Field
name|field
init|=
name|options
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|convert
argument_list|(
name|action
argument_list|,
name|session
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
name|commandErrorSt
operator|+
literal|"unable to convert option "
operator|+
name|INTENSITY_BOLD
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
operator|+
name|INTENSITY_NORMAL
operator|+
literal|" with value '"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to type "
operator|+
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Unable to convert option "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" with value '"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to type "
operator|+
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|action
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Argument
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|argumentValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Field
name|field
init|=
name|arguments
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|value
decl_stmt|;
try|try
block|{
name|value
operator|=
name|convert
argument_list|(
name|action
argument_list|,
name|session
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CommandException
argument_list|(
name|commandErrorSt
operator|+
literal|"unable to convert argument "
operator|+
name|INTENSITY_BOLD
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
operator|+
name|INTENSITY_NORMAL
operator|+
literal|" with value '"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to type "
operator|+
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Unable to convert argument "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|" with value '"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|"' to type "
operator|+
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|action
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|Object
name|convert
parameter_list|(
name|Action
name|action
parameter_list|,
name|CommandSession
name|session
parameter_list|,
name|Object
name|value
parameter_list|,
name|Type
name|toType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|toType
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
return|return
operator|new
name|DefaultConverter
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|toType
argument_list|)
return|;
block|}
specifier|private
name|int
name|getWidth
parameter_list|(
name|CommandSession
name|session
parameter_list|)
block|{
name|Object
name|cols
init|=
name|session
operator|.
name|get
argument_list|(
literal|"COLUMNS"
argument_list|)
decl_stmt|;
return|return
operator|(
name|cols
operator|!=
literal|null
operator|&&
name|cols
operator|instanceof
name|Integer
operator|)
condition|?
operator|(
name|Integer
operator|)
name|cols
else|:
literal|80
return|;
block|}
block|}
end_class

end_unit

