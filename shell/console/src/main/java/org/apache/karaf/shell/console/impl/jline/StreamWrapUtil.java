begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|impl
operator|.
name|jline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|AnsiConsole
import|;
end_import

begin_class
specifier|final
class|class
name|StreamWrapUtil
block|{
specifier|private
name|StreamWrapUtil
parameter_list|()
block|{     }
specifier|private
specifier|static
name|Object
name|invokePrivateMethod
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|methodName
parameter_list|,
name|Object
index|[]
name|params
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Method
name|methods
index|[]
init|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|methods
index|[
name|i
index|]
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|methods
index|[
name|i
index|]
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
return|return
name|o
return|;
block|}
comment|/**      * unwrap stream so it can be recognized by the terminal and wrapped to get      * special keys in windows      *       * @param stream      * @return      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrapBIS
parameter_list|(
name|T
name|stream
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|T
operator|)
name|invokePrivateMethod
argument_list|(
name|stream
argument_list|,
literal|"getInIfOpen"
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|stream
return|;
block|}
block|}
specifier|private
specifier|static
name|PrintStream
name|wrap
parameter_list|(
name|PrintStream
name|stream
parameter_list|)
block|{
name|OutputStream
name|o
init|=
name|AnsiConsole
operator|.
name|wrapOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|PrintStream
condition|)
block|{
return|return
operator|(
operator|(
name|PrintStream
operator|)
name|o
operator|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PrintStream
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|T
name|stream
parameter_list|)
block|{
try|try
block|{
name|Method
name|mth
init|=
name|stream
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getRoot"
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|mth
operator|.
name|invoke
argument_list|(
name|stream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|stream
return|;
block|}
block|}
specifier|static
name|InputStream
name|reWrapIn
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|InputStream
name|stream
parameter_list|)
block|{
try|try
block|{
return|return
name|terminal
operator|.
name|wrapInIfNeeded
argument_list|(
name|unwrapBIS
argument_list|(
name|unwrap
argument_list|(
name|stream
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
name|PrintStream
name|reWrap
parameter_list|(
name|PrintStream
name|stream
parameter_list|)
block|{
return|return
name|wrap
argument_list|(
name|unwrap
argument_list|(
name|stream
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

