begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|table
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
operator|.
name|Attribute
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
operator|.
name|Color
import|;
end_import

begin_comment
comment|/**  * Class which covers {@link org.fusesource.jansi.Ansi} class with standard fluent-api.  */
end_comment

begin_class
specifier|public
class|class
name|Style
block|{
comment|/**      * We register all styles here.      */
specifier|private
name|Ansi
name|style
init|=
operator|new
name|Ansi
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|clean
init|=
literal|true
decl_stmt|;
comment|/**      * Mark text as bold.      *       * @return Style.      */
specifier|public
name|Style
name|bold
parameter_list|()
block|{
name|unclean
argument_list|()
operator|.
name|a
argument_list|(
name|INTENSITY_BOLD
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Mark text as italic.      *       * @return Style.      */
specifier|public
name|Style
name|italic
parameter_list|()
block|{
name|unclean
argument_list|()
operator|.
name|a
argument_list|(
name|ITALIC
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets text color.      *       * @param c Color.      * @return Style.      */
specifier|public
name|Style
name|color
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
name|unclean
argument_list|()
operator|.
name|fg
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets background color.      *       * @param c Color.      * @return Style.      */
specifier|public
name|Style
name|background
parameter_list|(
name|Color
name|c
parameter_list|)
block|{
name|unclean
argument_list|()
operator|.
name|bg
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Strike text.      *       * @return Style.      */
specifier|public
name|Style
name|strike
parameter_list|()
block|{
name|unclean
argument_list|()
operator|.
name|a
argument_list|(
name|STRIKETHROUGH_ON
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Underline text.      *       * @return Style.      */
specifier|public
name|Style
name|underline
parameter_list|()
block|{
name|unclean
argument_list|()
operator|.
name|a
argument_list|(
name|UNDERLINE
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Make text blink.      *       * @return Style.      */
specifier|public
name|Style
name|blink
parameter_list|()
block|{
name|unclean
argument_list|()
operator|.
name|a
argument_list|(
name|BLINK_SLOW
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Change foreground with background.      *       * @return Style.      */
specifier|public
name|Style
name|inverse
parameter_list|()
block|{
name|unclean
argument_list|()
operator|.
name|a
argument_list|(
name|NEGATIVE_ON
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Mark text as invisible;      *       * @return Style.      */
specifier|public
name|Style
name|invisible
parameter_list|()
block|{
name|unclean
argument_list|()
operator|.
name|a
argument_list|(
name|NEGATIVE_ON
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Is any values was set?      *       * @return Boolean.      */
specifier|public
name|boolean
name|isClean
parameter_list|()
block|{
return|return
name|clean
return|;
block|}
comment|/**      * Apply style to given text.      *       * @param text Text to stylish.      * @return Styled text - with ansi espace codes.      */
specifier|public
name|String
name|apply
parameter_list|(
name|String
name|text
parameter_list|)
block|{
comment|//        return new Ansi(style).a(text).reset().toString();
return|return
literal|""
return|;
block|}
comment|/**      * Sets dirty flag and return ansi object.      */
specifier|private
name|Ansi
name|unclean
parameter_list|()
block|{
name|clean
operator|=
literal|false
expr_stmt|;
return|return
name|style
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|//        return isClean() ? "[no style]" : "[ansi: " + new Ansi(style).a("x").reset() + "]";
return|return
literal|""
return|;
block|}
block|}
end_class

end_unit

