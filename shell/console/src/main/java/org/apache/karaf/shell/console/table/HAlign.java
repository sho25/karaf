begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|table
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|table
operator|.
name|StringUtil
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Enumeration type which contains all possible horizontal alignments.  */
end_comment

begin_enum
specifier|public
enum|enum
name|HAlign
block|{
comment|/**      * Center align.      */
name|center
block|{
annotation|@
name|Override
specifier|public
name|String
name|position
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colWidth
parameter_list|)
block|{
name|int
name|width
init|=
name|colWidth
operator|-
name|length
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|text
operator|=
name|repeat
argument_list|(
literal|" "
argument_list|,
name|width
operator|/
literal|2
argument_list|)
operator|+
name|text
operator|+
name|repeat
argument_list|(
literal|" "
argument_list|,
name|width
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
argument_list|(
name|text
argument_list|)
operator|<
name|colWidth
condition|)
block|{
comment|// if colWidth is odd we add space at the end.
name|text
operator|+=
literal|" "
expr_stmt|;
block|}
return|return
name|text
return|;
block|}
block|}
block|,
comment|/**      * Left align.      */
name|left
block|{
annotation|@
name|Override
specifier|public
name|String
name|position
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colWidth
parameter_list|)
block|{
return|return
name|text
operator|+
name|repeat
argument_list|(
literal|" "
argument_list|,
name|colWidth
operator|-
name|length
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
block|}
block|,
comment|/**      * Right align.      */
name|right
block|{
annotation|@
name|Override
specifier|public
name|String
name|position
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colWidth
parameter_list|)
block|{
return|return
name|repeat
argument_list|(
literal|" "
argument_list|,
name|colWidth
operator|-
name|length
argument_list|(
name|text
argument_list|)
argument_list|)
operator|+
name|text
return|;
block|}
block|}
block|;
comment|/**      * Calculate text position.      *       * @param text Text       * @param colWidth      * @return      */
specifier|public
specifier|abstract
name|String
name|position
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colWidth
parameter_list|)
function_decl|;
block|}
end_enum

end_unit

