begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|table
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Row information.  */
end_comment

begin_class
specifier|public
class|class
name|Row
extends|extends
name|TableElement
block|{
comment|/**      * List of cells.      */
specifier|private
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Add borders?      */
specifier|private
name|boolean
name|borders
decl_stmt|;
specifier|public
name|Row
parameter_list|(
name|Object
index|[]
name|row
parameter_list|)
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|row
control|)
block|{
name|addCell
argument_list|(
operator|new
name|Cell
argument_list|(
name|object
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Row
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Row
parameter_list|(
name|boolean
name|borders
parameter_list|)
block|{
name|this
operator|.
name|borders
operator|=
name|borders
expr_stmt|;
block|}
specifier|public
name|void
name|addCell
parameter_list|(
name|Cell
name|cell
parameter_list|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Cell
argument_list|>
name|getCells
parameter_list|()
block|{
return|return
name|cells
return|;
block|}
specifier|public
name|boolean
name|isBorders
parameter_list|()
block|{
return|return
name|borders
return|;
block|}
specifier|public
name|void
name|addCell
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|addCell
argument_list|(
operator|new
name|Cell
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

