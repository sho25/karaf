begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|IndentFormatter
block|{
specifier|public
specifier|static
name|void
name|printFormatted
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|str
parameter_list|,
name|int
name|termWidth
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|boolean
name|prefixFirstLine
parameter_list|)
block|{
name|int
name|pfxLen
init|=
name|prefix
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|maxwidth
init|=
name|termWidth
operator|-
name|pfxLen
decl_stmt|;
name|Pattern
name|wrap
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\S\\S{"
operator|+
name|maxwidth
operator|+
literal|",}|.{1,"
operator|+
name|maxwidth
operator|+
literal|"})(\\s+|$)"
argument_list|)
decl_stmt|;
name|int
name|cur
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cur
operator|>=
literal|0
condition|)
block|{
name|int
name|lst
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|,
name|cur
argument_list|)
decl_stmt|;
name|String
name|s
init|=
operator|(
name|lst
operator|>=
literal|0
operator|)
condition|?
name|str
operator|.
name|substring
argument_list|(
name|cur
argument_list|,
name|lst
argument_list|)
else|:
name|str
operator|.
name|substring
argument_list|(
name|cur
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Matcher
name|m
init|=
name|wrap
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|cur
operator|>
literal|0
operator|||
name|prefixFirstLine
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
name|m
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lst
operator|>=
literal|0
condition|)
block|{
name|cur
operator|=
name|lst
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|printFormatted
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|str
parameter_list|,
name|int
name|termWidth
parameter_list|,
name|PrintStream
name|out
parameter_list|)
block|{
name|printFormatted
argument_list|(
name|prefix
argument_list|,
name|str
argument_list|,
name|termWidth
argument_list|,
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

