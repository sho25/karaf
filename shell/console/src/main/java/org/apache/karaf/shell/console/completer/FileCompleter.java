begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|completer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_comment
comment|/**  * A file name completer takes the buffer and issues a list of  * potential completions.  *<p/>  * This completer tries to behave as similar as possible to  *<i>bash</i>'s file name completion (using GNU readline)  * with the following exceptions:  *<p/>  *<ul>  *<li>Candidates that are directories will end with "/"</li>  *<li>Wildcard regular expressions are not evaluated or replaced</li>  *<li>The "~" character can be used to represent the user's home,  * but it cannot complete to other users' homes, since java does  * not provide any way of determining that easily</li>  *</ul>  *  * @author<a href="mailto:mwp1@cornell.edu">Marc Prud'hommeaux</a>  * @author<a href="mailto:jason@planet57.com">Jason Dillon</a>  * @since 2.3  */
end_comment

begin_class
specifier|public
class|class
name|FileCompleter
implements|implements
name|Completer
block|{
specifier|private
specifier|static
name|String
name|OS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// TODO: Handle files with spaces in them
specifier|private
specifier|static
specifier|final
name|boolean
name|OS_IS_WINDOWS
init|=
name|isWindows
argument_list|()
decl_stmt|;
specifier|public
name|FileCompleter
parameter_list|(
name|CommandSession
name|session
parameter_list|)
block|{     }
specifier|public
specifier|static
name|boolean
name|isWindows
parameter_list|()
block|{
return|return
operator|(
name|OS
operator|.
name|indexOf
argument_list|(
literal|"win"
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
specifier|public
name|int
name|complete
parameter_list|(
name|String
name|buffer
parameter_list|,
specifier|final
name|int
name|cursor
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
comment|// buffer can be null
if|if
condition|(
name|candidates
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|OS_IS_WINDOWS
condition|)
block|{
name|buffer
operator|=
name|buffer
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|String
name|translated
init|=
name|buffer
decl_stmt|;
name|File
name|homeDir
init|=
name|getUserHome
argument_list|()
decl_stmt|;
comment|// Special character: ~ maps to the user's home directory
if|if
condition|(
name|translated
operator|.
name|startsWith
argument_list|(
literal|"~"
operator|+
name|separator
argument_list|()
argument_list|)
condition|)
block|{
name|translated
operator|=
name|homeDir
operator|.
name|getPath
argument_list|()
operator|+
name|translated
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|translated
operator|.
name|startsWith
argument_list|(
literal|"~"
argument_list|)
condition|)
block|{
name|translated
operator|=
name|homeDir
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
operator|(
name|translated
operator|.
name|startsWith
argument_list|(
name|separator
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|String
name|cwd
init|=
name|getUserDir
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|translated
operator|=
name|cwd
operator|+
name|separator
argument_list|()
operator|+
name|translated
expr_stmt|;
block|}
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|translated
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dir
decl_stmt|;
if|if
condition|(
name|translated
operator|.
name|endsWith
argument_list|(
name|separator
argument_list|()
argument_list|)
condition|)
block|{
name|dir
operator|=
name|file
expr_stmt|;
block|}
else|else
block|{
name|dir
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
name|File
index|[]
name|entries
init|=
name|dir
operator|==
literal|null
condition|?
operator|new
name|File
index|[
literal|0
index|]
else|:
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
return|return
name|matchFiles
argument_list|(
name|buffer
argument_list|,
name|translated
argument_list|,
name|entries
argument_list|,
name|candidates
argument_list|)
return|;
block|}
specifier|protected
name|String
name|separator
parameter_list|()
block|{
return|return
name|File
operator|.
name|separator
return|;
block|}
specifier|protected
name|File
name|getUserHome
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|File
name|getUserDir
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
return|;
block|}
specifier|protected
name|int
name|matchFiles
parameter_list|(
specifier|final
name|String
name|buffer
parameter_list|,
specifier|final
name|String
name|translated
parameter_list|,
specifier|final
name|File
index|[]
name|files
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|int
name|matches
init|=
literal|0
decl_stmt|;
comment|// first pass: just count the matches
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|translated
argument_list|)
condition|)
block|{
name|matches
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|translated
argument_list|)
condition|)
block|{
name|CharSequence
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|matches
operator|==
literal|1
operator|&&
name|file
operator|.
name|isDirectory
argument_list|()
condition|?
name|separator
argument_list|()
else|:
literal|" "
operator|)
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
name|render
argument_list|(
name|file
argument_list|,
name|name
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|index
init|=
name|buffer
operator|.
name|lastIndexOf
argument_list|(
name|separator
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|index
operator|+
name|separator
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
specifier|protected
name|CharSequence
name|render
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|CharSequence
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

