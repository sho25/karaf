begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|basic
operator|.
name|AbstractCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|converter
operator|.
name|DefaultConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|converter
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|converter
operator|.
name|ReifiedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|CompletableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|Commands
block|{
specifier|protected
specifier|final
name|List
argument_list|<
name|CommandBuilder
argument_list|>
name|commandBuilders
init|=
operator|new
name|ArrayList
argument_list|<
name|CommandBuilder
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|CompleterBuilder
argument_list|>
name|completerBuilders
init|=
operator|new
name|ArrayList
argument_list|<
name|CompleterBuilder
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|DefaultConverter
name|converter
decl_stmt|;
specifier|protected
name|BundleContext
name|context
decl_stmt|;
specifier|public
name|BundleContext
name|getContext
parameter_list|()
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|FrameworkUtil
operator|.
name|getBundle
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|.
name|getBundleContext
argument_list|()
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|DefaultConverter
name|getConverter
parameter_list|()
block|{
if|if
condition|(
name|converter
operator|==
literal|null
condition|)
block|{
name|converter
operator|=
operator|new
name|DefaultConverter
argument_list|(
name|getContext
argument_list|()
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|converter
return|;
block|}
specifier|public
name|void
name|setConverter
parameter_list|(
name|DefaultConverter
name|converter
parameter_list|)
block|{
name|this
operator|.
name|converter
operator|=
name|converter
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|()
block|{
for|for
control|(
name|CompleterBuilder
name|builder
range|:
name|completerBuilders
control|)
block|{
name|builder
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|CommandBuilder
name|builder
range|:
name|commandBuilders
control|)
block|{
name|builder
operator|.
name|register
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregister
parameter_list|()
block|{
for|for
control|(
name|CommandBuilder
name|commandBuilder
range|:
name|commandBuilders
control|)
block|{
name|commandBuilder
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|CompleterBuilder
name|builder
range|:
name|completerBuilders
control|)
block|{
name|builder
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|CommandBuilder
name|command
parameter_list|()
block|{
name|CommandBuilder
name|commandBuilder
init|=
operator|new
name|CommandBuilder
argument_list|()
decl_stmt|;
name|commandBuilders
operator|.
name|add
argument_list|(
name|commandBuilder
argument_list|)
expr_stmt|;
return|return
name|commandBuilder
return|;
block|}
specifier|public
name|CommandBuilder
name|command
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|actionClass
parameter_list|)
block|{
return|return
name|command
argument_list|()
operator|.
name|action
argument_list|(
name|actionClass
argument_list|)
return|;
block|}
specifier|public
name|CompleterBuilder
name|completer
parameter_list|(
name|Completer
name|completer
parameter_list|)
block|{
name|CompleterBuilder
name|completerBuilder
init|=
operator|new
name|CompleterBuilder
argument_list|(
name|completer
argument_list|)
decl_stmt|;
name|completerBuilders
operator|.
name|add
argument_list|(
name|completerBuilder
argument_list|)
expr_stmt|;
return|return
name|completerBuilder
return|;
block|}
specifier|public
class|class
name|CompleterBuilder
block|{
specifier|protected
name|Completer
name|completer
decl_stmt|;
specifier|protected
name|ServiceRegistration
name|registration
decl_stmt|;
specifier|public
name|CompleterBuilder
parameter_list|(
name|Completer
name|completer
parameter_list|)
block|{
name|this
operator|.
name|completer
operator|=
name|completer
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|()
block|{
if|if
condition|(
name|registration
operator|==
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|classes
init|=
block|{
name|Completer
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|completer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|registration
operator|=
name|getContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|classes
argument_list|,
name|completer
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unregister
parameter_list|()
block|{
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|CommandBuilder
block|{
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|clazz
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|properties
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ServiceRegistration
name|registration
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Completer
argument_list|>
name|argCompleters
init|=
operator|new
name|ArrayList
argument_list|<
name|Completer
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Completer
argument_list|>
name|optionCompleters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Completer
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CommandBuilder
name|action
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|actionClass
parameter_list|)
block|{
name|this
operator|.
name|clazz
operator|=
name|actionClass
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CommandBuilder
name|arguments
parameter_list|(
name|Object
modifier|...
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CommandBuilder
name|properties
parameter_list|(
name|Object
modifier|...
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|properties
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CommandBuilder
name|argCompleter
parameter_list|(
name|Completer
name|completer
parameter_list|)
block|{
name|this
operator|.
name|argCompleters
operator|.
name|add
argument_list|(
name|completer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CommandBuilder
name|optionCompleter
parameter_list|(
name|String
name|option
parameter_list|,
name|Completer
name|completer
parameter_list|)
block|{
name|this
operator|.
name|optionCompleters
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|completer
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|CommandBuilder
name|serviceProp
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|this
operator|.
name|serviceProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|void
name|register
parameter_list|()
block|{
if|if
condition|(
name|registration
operator|==
literal|null
condition|)
block|{
name|Command
name|cmd
init|=
name|getCommand
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|,
name|cmd
operator|.
name|scope
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|,
name|cmd
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|putAll
argument_list|(
name|serviceProperties
argument_list|)
expr_stmt|;
name|String
index|[]
name|classes
init|=
block|{
name|Function
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|CompletableFunction
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|CommandWithAction
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|AbstractCommand
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|registration
operator|=
name|getContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|classes
argument_list|,
operator|new
name|CommandWrapper
argument_list|(
name|this
argument_list|)
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unregister
parameter_list|()
block|{
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Action
name|createNewAction
parameter_list|()
block|{
try|try
block|{
name|Action
name|action
decl_stmt|;
comment|// Instantiate action
name|Map
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|matches
init|=
name|findMatchingConstructors
argument_list|(
name|clazz
argument_list|,
name|arguments
argument_list|)
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|match
init|=
name|matches
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|action
operator|=
operator|(
name|Action
operator|)
name|match
operator|.
name|getKey
argument_list|()
operator|.
name|newInstance
argument_list|(
name|match
operator|.
name|getValue
argument_list|()
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to find a matching constructor on class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" for arguments "
operator|+
name|arguments
operator|+
literal|" when instanciating command "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple matching constructors found on class "
operator|+
name|clazz
operator|+
literal|" for arguments "
operator|+
name|arguments
operator|+
literal|" when instanciating bean "
operator|+
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|matches
operator|.
name|keySet
argument_list|()
argument_list|)
throw|;
block|}
comment|// Inject action
for|for
control|(
name|Object
name|prop
range|:
name|properties
control|)
block|{
name|Method
name|setter
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|==
name|void
operator|.
name|class
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|isInstance
argument_list|(
name|prop
argument_list|)
condition|)
block|{
if|if
condition|(
name|setter
operator|==
literal|null
condition|)
block|{
name|setter
operator|=
name|method
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|prop
operator|+
literal|" matches multiple setters on class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|setter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|prop
operator|+
literal|" has no matching setter on class "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|setter
operator|.
name|invoke
argument_list|(
name|action
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to create action"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getName
parameter_list|()
block|{
name|Command
name|cmd
init|=
name|getCommand
argument_list|()
decl_stmt|;
return|return
name|cmd
operator|.
name|scope
argument_list|()
operator|+
literal|":"
operator|+
name|cmd
operator|.
name|name
argument_list|()
return|;
block|}
specifier|private
name|Command
name|getCommand
parameter_list|()
block|{
name|Command
name|cmd
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Action class is not annotated with @Command"
argument_list|)
throw|;
block|}
return|return
name|cmd
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CommandWrapper
extends|extends
name|AbstractCommand
implements|implements
name|CompletableFunction
block|{
specifier|private
specifier|final
name|CommandBuilder
name|builder
decl_stmt|;
specifier|public
name|CommandWrapper
parameter_list|(
name|CommandBuilder
name|builder
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Action
name|createNewAction
parameter_list|()
block|{
return|return
name|builder
operator|.
name|createNewAction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Completer
argument_list|>
name|getCompleters
parameter_list|()
block|{
return|return
name|builder
operator|.
name|argCompleters
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Completer
argument_list|>
name|getOptionalCompleters
parameter_list|()
block|{
return|return
name|builder
operator|.
name|optionCompleters
return|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|findMatchingConstructors
parameter_list|(
name|Class
name|type
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|args
parameter_list|)
block|{
name|Map
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|matches
init|=
operator|new
name|HashMap
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Get constructors
name|List
argument_list|<
name|Constructor
argument_list|>
name|constructors
init|=
operator|new
name|ArrayList
argument_list|<
name|Constructor
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|type
operator|.
name|getConstructors
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Discard any signature with wrong cardinality
for|for
control|(
name|Iterator
argument_list|<
name|Constructor
argument_list|>
name|it
init|=
name|constructors
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
name|args
operator|.
name|size
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Find a direct match with assignment
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Map
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|nmatches
init|=
operator|new
name|HashMap
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
name|cns
range|:
name|constructors
control|)
block|{
name|boolean
name|found
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|match
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ReifiedType
name|argType
init|=
operator|new
name|GenericType
argument_list|(
name|cns
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
comment|//If the arg is an Unwrappered bean then we need to do the assignment check against the
comment|//unwrappered bean itself.
name|Object
name|arg
init|=
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|argToTest
init|=
name|arg
decl_stmt|;
if|if
condition|(
operator|!
name|DefaultConverter
operator|.
name|isAssignable
argument_list|(
name|argToTest
argument_list|,
name|argType
argument_list|)
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
try|try
block|{
name|match
operator|.
name|add
argument_list|(
name|getConverter
argument_list|()
operator|.
name|convert
argument_list|(
name|arg
argument_list|,
name|cns
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|nmatches
operator|.
name|put
argument_list|(
name|cns
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nmatches
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|matches
operator|=
name|nmatches
expr_stmt|;
block|}
block|}
comment|// Find a direct match with conversion
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Map
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|nmatches
init|=
operator|new
name|HashMap
argument_list|<
name|Constructor
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Constructor
name|cns
range|:
name|constructors
control|)
block|{
name|boolean
name|found
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|match
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ReifiedType
name|argType
init|=
operator|new
name|GenericType
argument_list|(
name|cns
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|val
init|=
name|getConverter
argument_list|()
operator|.
name|convert
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|argType
argument_list|)
decl_stmt|;
name|match
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|nmatches
operator|.
name|put
argument_list|(
name|cns
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nmatches
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|matches
operator|=
name|nmatches
expr_stmt|;
block|}
block|}
return|return
name|matches
return|;
block|}
block|}
end_class

end_unit

