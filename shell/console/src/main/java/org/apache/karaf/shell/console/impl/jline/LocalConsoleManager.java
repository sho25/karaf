begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|impl
operator|.
name|jline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Console
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|ConsoleFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|SshAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|AgentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LocalConsoleManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LocalConsoleManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ConsoleFactory
name|consoleFactory
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|TerminalFactory
name|terminalFactory
decl_stmt|;
specifier|private
name|Console
name|console
decl_stmt|;
specifier|private
name|boolean
name|start
decl_stmt|;
specifier|private
specifier|final
name|int
name|defaultStartLevel
decl_stmt|;
specifier|private
name|CommandProcessor
name|commandProcessor
decl_stmt|;
specifier|private
name|ServiceRegistration
name|registration
decl_stmt|;
specifier|private
name|SshAgent
name|local
decl_stmt|;
specifier|public
name|LocalConsoleManager
parameter_list|(
name|boolean
name|start
parameter_list|,
name|String
name|defaultStartLevel
parameter_list|,
name|BundleContext
name|bundleContext
parameter_list|,
name|TerminalFactory
name|terminalFactory
parameter_list|,
name|ConsoleFactory
name|consoleFactory
parameter_list|,
name|CommandProcessor
name|commandProcessor
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|defaultStartLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|defaultStartLevel
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|terminalFactory
operator|=
name|terminalFactory
expr_stmt|;
name|this
operator|.
name|consoleFactory
operator|=
name|consoleFactory
expr_stmt|;
name|this
operator|.
name|commandProcessor
operator|=
name|commandProcessor
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|start
condition|)
block|{
return|return;
block|}
specifier|final
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|UserPrincipal
argument_list|(
literal|"karaf"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Terminal
name|terminal
init|=
name|terminalFactory
operator|.
name|getTerminal
argument_list|()
decl_stmt|;
name|Runnable
name|callback
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
decl_stmt|;
name|String
name|agentId
init|=
name|startAgent
argument_list|(
literal|"karaf"
argument_list|)
decl_stmt|;
name|this
operator|.
name|console
operator|=
name|consoleFactory
operator|.
name|createLocal
argument_list|(
name|this
operator|.
name|commandProcessor
argument_list|,
name|terminal
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|this
operator|.
name|console
operator|.
name|getSession
argument_list|()
operator|.
name|put
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|,
name|agentId
argument_list|)
expr_stmt|;
name|Runnable
name|consoleStarter
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|consoleFactory
operator|.
name|startConsoleAs
argument_list|(
name|console
argument_list|,
name|subject
argument_list|,
literal|"Local"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|boolean
name|delayconsole
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.delay.console"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|delayconsole
condition|)
block|{
name|DelayedStarted
name|watcher
init|=
operator|new
name|DelayedStarted
argument_list|(
name|consoleStarter
argument_list|,
name|bundleContext
argument_list|,
name|System
operator|.
name|in
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|watcher
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|consoleStarter
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|startAgent
parameter_list|(
name|String
name|user
parameter_list|)
block|{
try|try
block|{
name|local
operator|=
operator|new
name|AgentImpl
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karaf.key"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|ObjectInputStream
name|r
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
operator|(
name|KeyPair
operator|)
name|r
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|local
operator|.
name|addIdentity
argument_list|(
name|keyPair
argument_list|,
literal|"karaf"
argument_list|)
expr_stmt|;
name|String
name|agentId
init|=
literal|"local:"
operator|+
name|user
decl_stmt|;
name|Hashtable
name|properties
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|agentId
argument_list|)
expr_stmt|;
name|registration
operator|=
name|bundleContext
operator|.
name|registerService
argument_list|(
name|SshAgent
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|local
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|agentId
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error starting ssh agent for local console"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|registration
operator|!=
literal|null
condition|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
comment|// The bundle is stopped
comment|// so close the console and remove the callback so that the
comment|// osgi framework isn't stopped
if|if
condition|(
name|console
operator|!=
literal|null
condition|)
block|{
name|console
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

