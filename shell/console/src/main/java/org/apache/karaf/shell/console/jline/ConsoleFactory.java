begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|jline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|completer
operator|.
name|AggregateCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|AnsiConsole
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|Terminal
import|;
end_import

begin_class
specifier|public
class|class
name|ConsoleFactory
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
name|CommandProcessor
name|commandProcessor
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Completer
argument_list|>
name|completers
decl_stmt|;
specifier|private
name|TerminalFactory
name|terminalFactory
decl_stmt|;
specifier|private
name|Console
name|console
decl_stmt|;
specifier|private
name|boolean
name|start
decl_stmt|;
specifier|public
name|void
name|setBundleContext
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|registerCommandProcessor
parameter_list|(
name|CommandProcessor
name|commandProcessor
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|commandProcessor
operator|=
name|commandProcessor
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|unregisterCommandProcessor
parameter_list|(
name|CommandProcessor
name|commandProcessor
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|commandProcessor
operator|=
literal|null
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setCompleters
parameter_list|(
name|List
argument_list|<
name|Completer
argument_list|>
name|completers
parameter_list|)
block|{
name|this
operator|.
name|completers
operator|=
name|completers
expr_stmt|;
block|}
specifier|public
name|void
name|setTerminalFactory
parameter_list|(
name|TerminalFactory
name|terminalFactory
parameter_list|)
block|{
name|this
operator|.
name|terminalFactory
operator|=
name|terminalFactory
expr_stmt|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|boolean
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
block|}
specifier|protected
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|start
condition|)
block|{
name|InputStream
name|in
init|=
name|unwrap
argument_list|(
name|System
operator|.
name|in
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
name|unwrap
argument_list|(
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|PrintStream
name|err
init|=
name|unwrap
argument_list|(
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|Runnable
name|callback
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
decl_stmt|;
name|Terminal
name|terminal
init|=
name|terminalFactory
operator|.
name|getTerminal
argument_list|()
decl_stmt|;
name|this
operator|.
name|console
operator|=
operator|new
name|Console
argument_list|(
name|commandProcessor
argument_list|,
name|in
argument_list|,
name|wrap
argument_list|(
name|out
argument_list|)
argument_list|,
name|wrap
argument_list|(
name|err
argument_list|)
argument_list|,
name|terminal
argument_list|,
operator|new
name|AggregateCompleter
argument_list|(
name|completers
argument_list|)
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|CommandSession
name|session
init|=
name|console
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|"USER"
argument_list|,
literal|"karaf"
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|"APPLICATION"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|,
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|"LINES"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|terminal
operator|.
name|getTerminalHeight
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|"COLUMNS"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|terminal
operator|.
name|getTerminalWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|".jline.terminal"
argument_list|,
name|terminal
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|console
argument_list|,
literal|"Karaf Shell Console Thread"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|console
operator|!=
literal|null
condition|)
block|{
name|console
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|PrintStream
name|wrap
parameter_list|(
name|PrintStream
name|stream
parameter_list|)
block|{
name|OutputStream
name|o
init|=
name|AnsiConsole
operator|.
name|wrapOutputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|PrintStream
condition|)
block|{
return|return
operator|(
operator|(
name|PrintStream
operator|)
name|o
operator|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|PrintStream
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|T
name|stream
parameter_list|)
block|{
try|try
block|{
name|Method
name|mth
init|=
name|stream
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getRoot"
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|mth
operator|.
name|invoke
argument_list|(
name|stream
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|stream
return|;
block|}
block|}
block|}
end_class

end_unit

