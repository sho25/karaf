begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|table
package|;
end_package

begin_comment
comment|/**  * Column definition.  */
end_comment

begin_class
specifier|public
class|class
name|Col
block|{
comment|/**      * Column header.      */
specifier|private
name|String
name|header
decl_stmt|;
comment|/**      * Maximum size of this column. The default -1 means the column      * may grow indefinitely      */
name|int
name|maxSize
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
comment|/**      * Alignment      */
specifier|private
name|HAlign
name|align
init|=
name|HAlign
operator|.
name|left
decl_stmt|;
specifier|public
name|Col
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
block|}
specifier|public
name|Col
name|align
parameter_list|(
name|HAlign
name|align
parameter_list|)
block|{
name|this
operator|.
name|align
operator|=
name|align
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Col
name|alignLeft
parameter_list|()
block|{
name|this
operator|.
name|align
operator|=
name|HAlign
operator|.
name|left
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Col
name|alignRight
parameter_list|()
block|{
name|this
operator|.
name|align
operator|=
name|HAlign
operator|.
name|right
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Col
name|alignCenter
parameter_list|()
block|{
name|this
operator|.
name|align
operator|=
name|HAlign
operator|.
name|center
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Col
name|maxSize
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|protected
name|void
name|updateSize
parameter_list|(
name|int
name|cellSize
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|size
operator|<=
name|cellSize
condition|)
block|{
name|this
operator|.
name|size
operator|=
name|getClippedSize
argument_list|(
name|cellSize
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getClippedSize
parameter_list|(
name|int
name|cellSize
parameter_list|)
block|{
return|return
name|this
operator|.
name|maxSize
operator|==
operator|-
literal|1
condition|?
name|cellSize
else|:
name|Math
operator|.
name|min
argument_list|(
name|cellSize
argument_list|,
name|this
operator|.
name|maxSize
argument_list|)
return|;
block|}
name|String
name|format
parameter_list|(
name|Object
name|cellData
parameter_list|)
block|{
if|if
condition|(
name|cellData
operator|==
literal|null
condition|)
block|{
name|cellData
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|fullContent
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
name|cellData
argument_list|)
decl_stmt|;
if|if
condition|(
name|fullContent
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|String
name|finalContent
init|=
name|fullContent
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|getClippedSize
argument_list|(
name|fullContent
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|updateSize
argument_list|(
name|finalContent
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|finalContent
return|;
block|}
name|String
name|getHeader
parameter_list|()
block|{
return|return
name|header
return|;
block|}
name|String
name|getContent
parameter_list|(
name|String
name|content
parameter_list|)
block|{
return|return
name|this
operator|.
name|align
operator|.
name|position
argument_list|(
name|cut
argument_list|(
name|content
argument_list|,
name|this
operator|.
name|size
argument_list|)
argument_list|,
name|this
operator|.
name|size
argument_list|)
return|;
block|}
specifier|private
name|String
name|cut
parameter_list|(
name|String
name|content
parameter_list|,
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|content
operator|.
name|length
argument_list|()
operator|<=
name|size
condition|)
block|{
return|return
name|content
return|;
block|}
else|else
block|{
return|return
name|content
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|size
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

