begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|tabletest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|WriterOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|table
operator|.
name|Col
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|table
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|table
operator|.
name|ShellTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ShellTableTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTable
parameter_list|()
block|{
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"id"
argument_list|)
operator|.
name|alignRight
argument_list|()
operator|.
name|maxSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"Name"
argument_list|)
operator|.
name|maxSize
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"Centered"
argument_list|)
operator|.
name|alignCenter
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|()
operator|.
name|addContent
argument_list|(
literal|1
argument_list|,
literal|"Test"
argument_list|,
literal|"Description"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|()
operator|.
name|addContent
argument_list|(
literal|20
argument_list|,
literal|"My name"
argument_list|,
literal|"Description"
argument_list|)
expr_stmt|;
name|Row
name|row
init|=
name|table
operator|.
name|addRow
argument_list|()
decl_stmt|;
name|row
operator|.
name|addContent
argument_list|(
literal|123456789
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
literal|"A very long text that should be cut"
argument_list|)
expr_stmt|;
name|row
operator|.
name|addContent
argument_list|(
literal|"A very long text that should not be cut"
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|WriterOutputStream
argument_list|(
name|writer
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|print
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
literal|"   id | Name                 |                Centered                \r\n"
operator|+
literal|"----------------------------------------------------------------------\r\n"
operator|+
literal|"    1 | Test                 |               Description              \r\n"
operator|+
literal|"   20 | My name              |               Description              \r\n"
operator|+
literal|"12345 | A very long text tha | A very long text that should not be cut\r\n"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|writer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrow
parameter_list|()
block|{
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
operator|.
name|size
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|()
operator|.
name|addContent
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|WriterOutputStream
argument_list|(
name|writer
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|print
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
literal|"1      | 2\r\n"
operator|+
literal|"----------\r\n"
operator|+
literal|"1      | 2\r\n"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|writer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShrink
parameter_list|()
block|{
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
operator|.
name|size
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"1"
argument_list|)
operator|.
name|maxSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"2"
argument_list|)
operator|.
name|alignRight
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|()
operator|.
name|addContent
argument_list|(
literal|"quite long"
argument_list|,
literal|"and here an even longer text"
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|WriterOutputStream
argument_list|(
name|writer
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|print
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
comment|//
literal|"1     |  2\r\n"
comment|//
operator|+
literal|"----------\r\n"
comment|//
operator|+
literal|"quite |  a\r\n"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|writer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTooSmall
parameter_list|()
block|{
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
operator|.
name|size
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"1"
argument_list|)
operator|.
name|maxSize
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
operator|new
name|Col
argument_list|(
literal|"2"
argument_list|)
operator|.
name|alignRight
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|addRow
argument_list|()
operator|.
name|addContent
argument_list|(
literal|"quite long"
argument_list|,
literal|"and here an even longer text"
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|WriterOutputStream
argument_list|(
name|writer
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|print
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|expected
init|=
comment|//
literal|"1     | \r\n"
operator|+
comment|//
literal|"--------\r\n"
operator|+
comment|//
literal|"quite | \r\n"
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|writer
operator|.
name|getBuffer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

