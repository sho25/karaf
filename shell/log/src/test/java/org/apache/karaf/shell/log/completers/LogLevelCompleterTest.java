begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|log
operator|.
name|completers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|log
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link LogLevelCompleter}  */
end_comment

begin_class
specifier|public
class|class
name|LogLevelCompleterTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|LogLevelCompleter
name|completer
init|=
operator|new
name|LogLevelCompleter
argument_list|()
decl_stmt|;
specifier|public
name|void
name|testComplete
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCompletions
argument_list|(
literal|"I"
argument_list|,
name|Level
operator|.
name|INFO
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertCompletions
argument_list|(
literal|"D"
argument_list|,
name|Level
operator|.
name|DEBUG
operator|.
name|name
argument_list|()
argument_list|,
name|Level
operator|.
name|DEFAULT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompleteLowerCase
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCompletions
argument_list|(
literal|"i"
argument_list|,
name|Level
operator|.
name|INFO
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|assertCompletions
argument_list|(
literal|"d"
argument_list|,
name|Level
operator|.
name|DEBUG
operator|.
name|name
argument_list|()
argument_list|,
name|Level
operator|.
name|DEFAULT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompleteWithNullBuffer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// an empty buffer should return all available options
name|assertCompletions
argument_list|(
literal|null
argument_list|,
name|Level
operator|.
name|strings
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCompletions
parameter_list|(
name|String
name|buffer
parameter_list|,
name|String
modifier|...
name|results
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Completer should have found a match"
argument_list|,
literal|0
argument_list|,
name|completer
operator|.
name|complete
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|candidates
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|length
argument_list|,
name|candidates
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|result
range|:
name|results
control|)
block|{
name|assertContains
argument_list|(
name|result
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertContains
parameter_list|(
name|String
name|value
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|String
name|element
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|element
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Element "
operator|+
name|value
operator|+
literal|" not found in array"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

