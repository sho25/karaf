begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|log
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_comment
comment|/**  * Set the log level for a given logger  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"log"
argument_list|,
name|name
operator|=
literal|"set"
argument_list|,
name|description
operator|=
literal|"Set the log level."
argument_list|)
specifier|public
class|class
name|SetLogLevel
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|name
operator|=
literal|"LEVEL"
argument_list|,
name|description
operator|=
literal|"Level (TRACE, DEBUG, INFO, WARN, ERROR or - to unset"
argument_list|)
name|String
name|level
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|name
operator|=
literal|"LOGGER"
argument_list|,
name|description
operator|=
literal|"Logger name or ROOT (default)"
argument_list|)
name|String
name|logger
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONFIGURATION_PID
init|=
literal|"org.ops4j.pax.logging"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ROOT_LOGGER_PREFIX
init|=
literal|"log4j.rootLogger"
decl_stmt|;
specifier|static
specifier|final
name|String
name|LOGGER_PREFIX
init|=
literal|"log4j.logger."
decl_stmt|;
specifier|static
specifier|final
name|String
name|ROOT_LOGGER
init|=
literal|"ROOT"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TRACE
init|=
literal|"TRACE"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEBUG
init|=
literal|"DEBUG"
decl_stmt|;
specifier|static
specifier|final
name|String
name|INFO
init|=
literal|"INFO"
decl_stmt|;
specifier|static
specifier|final
name|String
name|WARN
init|=
literal|"WARN"
decl_stmt|;
specifier|static
specifier|final
name|String
name|ERROR
init|=
literal|"ERROR"
decl_stmt|;
specifier|static
specifier|final
name|String
name|INHERITED
init|=
literal|"-"
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ROOT_LOGGER
operator|.
name|equalsIgnoreCase
argument_list|(
name|this
operator|.
name|logger
argument_list|)
condition|)
block|{
name|this
operator|.
name|logger
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|TRACE
operator|.
name|equals
argument_list|(
name|level
argument_list|)
operator|&&
operator|!
name|DEBUG
operator|.
name|equals
argument_list|(
name|level
argument_list|)
operator|&&
operator|!
name|INFO
operator|.
name|equals
argument_list|(
name|level
argument_list|)
operator|&&
operator|!
name|WARN
operator|.
name|equals
argument_list|(
name|level
argument_list|)
operator|&&
operator|!
name|ERROR
operator|.
name|equals
argument_list|(
name|level
argument_list|)
operator|&&
operator|!
name|INHERITED
operator|.
name|equals
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"level must be set to TRACE, DEBUG, INFO, WARN or ERROR (or - to unset it)"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|INHERITED
operator|.
name|equals
argument_list|(
name|level
argument_list|)
operator|&&
name|logger
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not unset the ROOT logger"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ConfigurationAdmin
name|cfgAdmin
init|=
name|getConfigAdmin
argument_list|()
decl_stmt|;
name|Configuration
name|cfg
init|=
name|cfgAdmin
operator|.
name|getConfiguration
argument_list|(
name|CONFIGURATION_PID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Dictionary
name|props
init|=
name|cfg
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|logger
init|=
name|this
operator|.
name|logger
decl_stmt|;
name|String
name|val
decl_stmt|;
name|String
name|prop
decl_stmt|;
if|if
condition|(
name|logger
operator|==
literal|null
condition|)
block|{
name|prop
operator|=
name|ROOT_LOGGER_PREFIX
expr_stmt|;
block|}
else|else
block|{
name|prop
operator|=
name|LOGGER_PREFIX
operator|+
name|logger
expr_stmt|;
block|}
name|val
operator|=
operator|(
name|String
operator|)
name|props
operator|.
name|get
argument_list|(
name|prop
argument_list|)
expr_stmt|;
if|if
condition|(
name|INHERITED
operator|.
name|equals
argument_list|(
name|level
argument_list|)
condition|)
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|level
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|val
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|val
operator|=
name|level
operator|+
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|val
operator|=
name|level
operator|+
name|val
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|prop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|props
operator|.
name|put
argument_list|(
name|prop
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|cfg
operator|.
name|update
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|protected
name|ConfigurationAdmin
name|getConfigAdmin
parameter_list|()
block|{
name|ServiceReference
name|ref
init|=
name|getBundleContext
argument_list|()
operator|.
name|getServiceReference
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getService
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
argument_list|,
name|ref
argument_list|)
return|;
block|}
block|}
end_class

end_unit

