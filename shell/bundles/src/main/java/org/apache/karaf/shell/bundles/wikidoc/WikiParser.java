begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|bundles
operator|.
name|wikidoc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Parses wiki syntax from a reader and calls a Wikivisitor with the   * tokens it finds  */
end_comment

begin_class
specifier|public
class|class
name|WikiParser
block|{
name|WikiVisitor
name|visitor
decl_stmt|;
specifier|public
name|WikiParser
parameter_list|(
name|WikiVisitor
name|visitor
parameter_list|)
block|{
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|line
argument_list|,
literal|"[h*"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"["
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|parseLink
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"h"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|parseHeading
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|parseEnumeration
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visitor
operator|.
name|text
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|parseEnumeration
parameter_list|(
name|StringTokenizer
name|tokenizer
parameter_list|)
block|{
name|String
name|text
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"-\n"
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|enumeration
argument_list|(
name|text
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseHeading
parameter_list|(
name|StringTokenizer
name|tokenizer
parameter_list|)
block|{
name|String
name|level
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"123456789"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|level
operator|.
name|matches
argument_list|(
literal|"[123456789]"
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|text
argument_list|(
literal|"h"
operator|+
name|level
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|dot
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|".\n"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"."
operator|.
name|equals
argument_list|(
name|dot
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|text
argument_list|(
literal|"h"
operator|+
name|level
operator|+
name|dot
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|heading
init|=
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|?
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"\n"
argument_list|)
else|:
literal|""
decl_stmt|;
name|visitor
operator|.
name|heading
argument_list|(
operator|new
name|Integer
argument_list|(
name|level
argument_list|)
argument_list|,
name|heading
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseLink
parameter_list|(
name|StringTokenizer
name|tokenizer
parameter_list|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"]"
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|link
argument_list|(
name|token
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|parse
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|text
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

