begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|wrap
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|ExportedPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|PackageAdmin
import|;
end_import

begin_comment
comment|/**  * Command for enabling/disabling debug logging on a bundle and calculating the difference in  * wired imports.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"dev"
argument_list|,
name|name
operator|=
literal|"dynamic-import"
argument_list|,
name|description
operator|=
literal|"Enable/disable dynamic-import for a given bundle"
argument_list|)
specifier|public
class|class
name|DynamicImport
extends|extends
name|AbstractBundleCommand
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DynamicImport
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The header key where we store the active wires when we enable DynamicImport=*      */
specifier|protected
specifier|static
specifier|final
name|String
name|ORIGINAL_WIRES
init|=
literal|"Original-Wires"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doExecute
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|ORIGINAL_WIRES
argument_list|)
operator|==
literal|null
condition|)
block|{
name|enableDynamicImports
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disableDynamicImports
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Enable DynamicImport=* on the bundle      */
specifier|private
name|void
name|enableDynamicImports
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|IOException
throws|,
name|BundleException
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Enabling dynamic imports on bundle %s%n"
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|String
operator|.
name|format
argument_list|(
literal|"wrap:%s$"
operator|+
literal|"Bundle-UpdateLocation=%s&"
operator|+
literal|"DynamicImport-Package=*&"
operator|+
literal|"%s=%s&"
operator|+
literal|"overwrite=merge"
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|,
name|ORIGINAL_WIRES
argument_list|,
name|explode
argument_list|(
name|getWiredBundles
argument_list|(
name|bundle
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"Updating %s with URL %s"
argument_list|,
name|bundle
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|update
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|getPackageAdmin
argument_list|()
operator|.
name|refreshPackages
argument_list|(
operator|new
name|Bundle
index|[]
block|{
name|bundle
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*      * Disable DynamicImport=* on the bundle      *      * At this time, we will also calculate the difference in package wiring for the bundle compared to      * when we enabled the DynamicImport      */
specifier|private
name|void
name|disableDynamicImports
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|BundleException
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Disabling dynamic imports on bundle %s%n"
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|current
init|=
name|getWiredBundles
argument_list|(
name|bundle
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|original
range|:
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|ORIGINAL_WIRES
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|current
operator|.
name|remove
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"(no additional packages have been wired since dynamic import was enabled)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%nAdditional packages wired since dynamic import was enabled:%n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pkg
range|:
name|current
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"- %s%n"
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
name|bundle
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
comment|/*      * Explode a set of string values in to a ,-delimited string      */
specifier|private
name|String
name|explode
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

