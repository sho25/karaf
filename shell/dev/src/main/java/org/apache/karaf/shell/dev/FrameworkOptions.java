begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
operator|.
name|framework
operator|.
name|Equinox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
operator|.
name|framework
operator|.
name|Felix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
operator|.
name|framework
operator|.
name|Framework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Command for enabling/disabling debug logging on the OSGi framework  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"dev"
argument_list|,
name|name
operator|=
literal|"framework"
argument_list|,
name|description
operator|=
literal|"OSGi Framework options"
argument_list|)
specifier|public
class|class
name|FrameworkOptions
extends|extends
name|OsgiCommandSupport
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_BASE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-debug"
argument_list|,
name|aliases
operator|=
block|{
literal|"--enable-debug"
block|}
argument_list|,
name|description
operator|=
literal|"Enable debug for the OSGi framework"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|debug
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-nodebug"
argument_list|,
name|aliases
operator|=
block|{
literal|"--disable-debug"
block|}
argument_list|,
name|description
operator|=
literal|"Disable debug for the OSGi framework"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|nodebug
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|name
operator|=
literal|"framework"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"Name of the OSGi framework to use"
argument_list|)
name|String
name|framework
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|debug
operator|^
name|nodebug
operator|&&
name|framework
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Current OSGi framework is %s%n"
argument_list|,
name|getFramework
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|Framework
name|frwk
init|=
name|getFramework
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Enabling debug for OSGi framework (%s)%n"
argument_list|,
name|frwk
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frwk
operator|.
name|enableDebug
argument_list|(
operator|new
name|File
argument_list|(
name|KARAF_BASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodebug
condition|)
block|{
name|Framework
name|frwk
init|=
name|getFramework
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Disabling debug for OSGi framework (%s)%n"
argument_list|,
name|frwk
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frwk
operator|.
name|disableDebug
argument_list|(
operator|new
name|File
argument_list|(
name|KARAF_BASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|framework
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|Felix
operator|.
name|NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|framework
argument_list|)
operator|&&
operator|!
name|Equinox
operator|.
name|NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|framework
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Unsupported framework: %s%n"
argument_list|,
name|framework
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|,
literal|"etc/config.properties"
argument_list|)
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.framework"
argument_list|,
name|framework
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Framework
name|getFramework
parameter_list|()
block|{
if|if
condition|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"felix"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Felix
argument_list|(
operator|new
name|File
argument_list|(
name|KARAF_BASE
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Equinox
argument_list|(
operator|new
name|File
argument_list|(
name|KARAF_BASE
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

