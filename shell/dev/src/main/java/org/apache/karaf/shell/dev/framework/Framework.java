begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
operator|.
name|framework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Class to represent the underlying OSGi framework  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Framework
block|{
comment|/*      * The Karaf base directory      */
specifier|private
name|File
name|base
decl_stmt|;
comment|/*      * The contents of the etc/config.properties file      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|config
decl_stmt|;
comment|/**      * Create a instance of this framework in the given base directory      *      * @param base the base directory      */
specifier|public
name|Framework
parameter_list|(
name|File
name|base
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
comment|/**      * Get the underlying OSGi framework name      */
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**      * Enable the OSGi framework's debug logging      *      * @param directory the directory containing the Karaf installation      * @throws IOException when a problem occurs configuring debug settings      */
specifier|public
specifier|abstract
name|void
name|enableDebug
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Disable the OSGI framework's debug logging      *      * @param directory the Karaf base installation directory      * @throws IOException when a problem occurs removing debug configuration settings      */
specifier|public
specifier|abstract
name|void
name|disableDebug
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*      * Save the etc/config.properties file      */
specifier|protected
name|void
name|saveConfigProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|PrintWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"etc/config.properties"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|getConfig
argument_list|()
control|)
block|{
name|writer
operator|.
name|printf
argument_list|(
literal|"%s%n"
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|readPropertyFile
parameter_list|(
name|File
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Set a new key and value in the etc/config.properties - if the given key      * already exists, the existing value will be overwritten      *      * @param key property key      * @param value property value      * @throws IOException if the etc/config.properties file can not be read      */
specifier|protected
name|void
name|setConfigProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getConfig
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|getConfig
argument_list|()
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
argument_list|(
literal|"%s=%s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|getConfig
argument_list|()
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|getConfig
argument_list|()
operator|.
name|add
argument_list|(
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
argument_list|(
literal|"%s=%s"
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove an existing key from the etc/config.properties file      *      * @param key the key      * @throws IOException if the etc/config.properties file can not be read      */
specifier|protected
name|void
name|removeConfigProperty
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getConfig
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|getConfig
argument_list|()
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Access the contents of the etc/config.properties file      *      * @return the contents of the file      * @throws IOException if the etc/config.properties file can not be read      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getConfig
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|config
operator|=
name|readPropertyFile
argument_list|(
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"etc/config.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|config
return|;
block|}
block|}
end_class

end_unit

