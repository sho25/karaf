begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
operator|.
name|watch
operator|.
name|BundleWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"dev"
argument_list|,
name|name
operator|=
literal|"watch"
argument_list|,
name|description
operator|=
literal|"Watch and Update bundles"
argument_list|)
specifier|public
class|class
name|Watch
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"urls"
argument_list|,
name|description
operator|=
literal|"The bundle URLs"
argument_list|,
name|required
operator|=
literal|false
argument_list|)
name|String
name|urls
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-i"
argument_list|,
name|aliases
operator|=
block|{}
argument_list|,
name|description
operator|=
literal|"Watch interval"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|long
name|interval
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--stop"
argument_list|,
name|description
operator|=
literal|"Stops watching all bundles"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|protected
name|boolean
name|stop
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--remove"
argument_list|,
name|description
operator|=
literal|"Removes bundles from the watch list"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|protected
name|boolean
name|remove
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--list"
argument_list|,
name|description
operator|=
literal|"Displays the watch list"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|protected
name|boolean
name|list
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Set the interval if exists.
if|if
condition|(
name|interval
operator|>
literal|0
condition|)
block|{
name|BundleWatcher
operator|.
name|getInstance
argument_list|()
operator|.
name|setInterval
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stop
operator|||
name|list
condition|)
block|{
name|doExecute
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|urls
operator|!=
literal|null
operator|&&
name|urls
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundleList
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
comment|//Check if an id is passed instead of URLs
try|try
block|{
name|Long
name|id
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|urls
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|bundleList
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getBundleContext
argument_list|()
operator|.
name|getBundles
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Bundle
name|bundle
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundles
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|wildCardMatch
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|,
name|urls
argument_list|)
condition|)
block|{
name|bundleList
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bundleList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|doExecute
argument_list|(
name|bundleList
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Exectues watch/stop watching the passed bundles.      *      * @param bundleList      */
specifier|public
name|void
name|doExecute
parameter_list|(
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundleList
parameter_list|)
block|{
name|BundleWatcher
name|watcher
init|=
name|BundleWatcher
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|stop
condition|)
block|{
name|watcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|list
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|watchList
init|=
name|watcher
operator|.
name|getWatchList
argument_list|()
decl_stmt|;
if|if
condition|(
name|watchList
operator|!=
literal|null
operator|&&
name|watchList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|format
init|=
literal|"%6s %-40s"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
literal|"ID"
argument_list|,
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|watcher
operator|.
name|getWatchList
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No bundle is being watched."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|remove
condition|)
block|{
name|watcher
operator|.
name|remove
argument_list|(
name|bundleList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|watcher
operator|.
name|add
argument_list|(
name|bundleList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Matches text using a pattern containing wildchards.      *      * @param text      * @param pattern      * @return      */
specifier|public
specifier|static
name|boolean
name|wildCardMatch
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|String
index|[]
name|cards
init|=
name|pattern
operator|.
name|split
argument_list|(
literal|"\\*"
argument_list|)
decl_stmt|;
comment|// Iterate over the cards.
for|for
control|(
name|String
name|card
range|:
name|cards
control|)
block|{
name|int
name|idx
init|=
name|text
operator|.
name|indexOf
argument_list|(
name|card
argument_list|)
decl_stmt|;
comment|// Card not detected in the text.
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Move ahead, towards the right of the text.
name|text
operator|=
name|text
operator|.
name|substring
argument_list|(
name|idx
operator|+
name|card
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

