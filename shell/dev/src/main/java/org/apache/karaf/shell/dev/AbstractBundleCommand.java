begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|ExportedPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|PackageAdmin
import|;
end_import

begin_comment
comment|/**  * Base class for a dev: command that takes a bundle id as an argument  *  * It also provides convient access to the PackageAdmin service  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBundleCommand
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"id"
argument_list|,
name|description
operator|=
literal|"The bundle ID"
argument_list|,
name|required
operator|=
literal|true
argument_list|)
name|Long
name|id
decl_stmt|;
specifier|private
name|PackageAdmin
name|admin
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get package admin service.
name|ServiceReference
name|ref
init|=
name|getBundleContext
argument_list|()
operator|.
name|getServiceReference
argument_list|(
name|PackageAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PackageAdmin service is unavailable."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// using the getService call ensures that the reference will be released at the end
name|admin
operator|=
name|getService
argument_list|(
name|PackageAdmin
operator|.
name|class
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle ID "
operator|+
name|id
operator|+
literal|" is invalid"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|doExecute
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|doExecute
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/*      * Get the list of bundles from which the given bundle imports packages      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
name|getWiredBundles
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
comment|// the set of bundles from which the bundle imports packages
name|Map
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
name|exporters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExportedPackage
name|pkg
range|:
name|getPackageAdmin
argument_list|()
operator|.
name|getExportedPackages
argument_list|(
operator|(
name|Bundle
operator|)
literal|null
argument_list|)
control|)
block|{
name|Bundle
index|[]
name|bundles
init|=
name|pkg
operator|.
name|getImportingBundles
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Bundle
name|importingBundle
range|:
name|bundles
control|)
block|{
if|if
condition|(
name|bundle
operator|.
name|equals
argument_list|(
name|importingBundle
argument_list|)
operator|&&
operator|!
operator|(
name|pkg
operator|.
name|getExportingBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|!
operator|(
name|pkg
operator|.
name|getExportingBundle
argument_list|()
operator|.
name|equals
argument_list|(
name|bundle
argument_list|)
operator|)
condition|)
block|{
name|exporters
operator|.
name|put
argument_list|(
name|pkg
operator|.
name|getName
argument_list|()
argument_list|,
name|pkg
operator|.
name|getExportingBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|exporters
return|;
block|}
specifier|protected
name|PackageAdmin
name|getPackageAdmin
parameter_list|()
block|{
return|return
name|admin
return|;
block|}
block|}
end_class

end_unit

