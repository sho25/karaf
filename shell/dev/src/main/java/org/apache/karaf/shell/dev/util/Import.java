begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|dev
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_comment
comment|/**  * Simple class to model an OSGi Import-Package  */
end_comment

begin_class
specifier|public
class|class
name|Import
block|{
specifier|private
specifier|final
name|String
name|packageName
decl_stmt|;
specifier|private
specifier|final
name|VersionRange
name|version
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
comment|/**      * Create a new import based on the string value found in MANIFEST.MF      *      * @param value the MANIFEST.MF value      */
specifier|protected
name|Import
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|packageName
operator|=
name|extractPackageName
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|"version="
argument_list|)
condition|)
block|{
name|this
operator|.
name|version
operator|=
name|extractVersion
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|version
operator|=
name|VersionRange
operator|.
name|ANY_VERSION
expr_stmt|;
block|}
block|}
comment|/*      * Extract the version from the string      */
specifier|private
name|VersionRange
name|extractVersion
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|int
name|begin
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|"version="
argument_list|)
operator|+
literal|8
decl_stmt|;
name|int
name|end
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|,
name|begin
argument_list|)
decl_stmt|;
if|if
condition|(
name|end
operator|<
literal|0
condition|)
block|{
return|return
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|unquote
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|begin
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|unquote
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/*      * Remove leading/trailing quotes      */
specifier|private
name|String
name|unquote
parameter_list|(
name|String
name|string
parameter_list|)
block|{
return|return
name|string
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPackage
parameter_list|()
block|{
return|return
name|packageName
return|;
block|}
specifier|public
name|VersionRange
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * Parse the value of an Import-Package META-INF header and return      * a list of Import instances      */
specifier|public
specifier|static
name|List
argument_list|<
name|Import
argument_list|>
name|parse
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|Import
argument_list|>
name|imports
init|=
operator|new
name|LinkedList
argument_list|<
name|Import
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|imp
range|:
name|split
argument_list|(
name|value
argument_list|)
control|)
block|{
name|imports
operator|.
name|add
argument_list|(
operator|new
name|Import
argument_list|(
name|imp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|imports
return|;
block|}
comment|/**      * Parse the value of an Import-Package META-INF header and return      * a list of Import instances, filtering out packages that are in the      * Export-Package META-INF header      *      * @param importValue the value of the Import-Package header      * @param exportValue the value of the Export-Package header      */
specifier|public
specifier|static
name|List
argument_list|<
name|Import
argument_list|>
name|parse
parameter_list|(
name|String
name|importValue
parameter_list|,
name|String
name|exportValue
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|exports
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|exp
range|:
name|split
argument_list|(
name|exportValue
argument_list|)
control|)
block|{
name|exports
operator|.
name|add
argument_list|(
name|extractPackageName
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LinkedList
argument_list|<
name|Import
argument_list|>
name|imports
init|=
operator|new
name|LinkedList
argument_list|<
name|Import
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Import
name|imp
range|:
name|parse
argument_list|(
name|importValue
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|exports
operator|.
name|contains
argument_list|(
name|imp
operator|.
name|getPackage
argument_list|()
argument_list|)
condition|)
block|{
name|imports
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|imports
return|;
block|}
comment|/*      * Extract the package name from the value      * e.g. org.apache.karaf;version="1.x" -> org.apache.karaf      */
specifier|private
specifier|static
name|String
name|extractPackageName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|contains
argument_list|(
literal|";"
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
comment|/*      * Counts the number of quotes in a String value      */
specifier|private
specifier|static
name|int
name|quotes
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|replaceAll
argument_list|(
literal|"[^\"]"
argument_list|,
literal|""
argument_list|)
operator|.
name|length
argument_list|()
return|;
block|}
comment|/*      * Split the OSGi headers on the , symbol      */
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|split
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|elements
init|=
name|value
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|quotes
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
operator|%
literal|2
operator|==
literal|1
condition|)
block|{
comment|// we probably split a version range, so joining it again with the next element
name|result
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
operator|+
literal|","
operator|+
name|elements
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|elements
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

