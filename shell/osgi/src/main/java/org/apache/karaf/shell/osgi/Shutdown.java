begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_comment
comment|/**  * Command to shut down Karaf  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"osgi"
argument_list|,
name|name
operator|=
literal|"shutdown"
argument_list|,
name|description
operator|=
literal|"Shuts the framework down."
argument_list|)
specifier|public
class|class
name|Shutdown
extends|extends
name|OsgiCommandSupport
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-f"
argument_list|,
name|aliases
operator|=
literal|"--force"
argument_list|,
name|description
operator|=
literal|"Force the shutdown without confirmation message."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|boolean
name|force
init|=
literal|false
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|name
operator|=
literal|"time"
argument_list|,
name|index
operator|=
literal|0
argument_list|,
name|description
operator|=
literal|"Shutdown after a specified delay. The time argument can have different"
operator|+
literal|" formats. First, it can be an abolute time in the format hh:mm, in which hh is the hour (1 or 2 digits) and mm"
operator|+
literal|" is the minute of the hour (in two digits). Second, it can be in the format +m, in which m is the number of minutes"
operator|+
literal|" to wait. The word now is an alias for +0."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|String
name|time
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|sleep
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|time
operator|.
name|equals
argument_list|(
literal|"now"
argument_list|)
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
comment|// delay in number of minutes provided
name|time
operator|=
name|time
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|sleep
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|time
argument_list|)
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid time argument."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// try to parse the date in hh:mm
name|String
index|[]
name|strings
init|=
name|time
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|strings
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid time argument."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|GregorianCalendar
name|currentDate
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|GregorianCalendar
name|shutdownDate
init|=
operator|new
name|GregorianCalendar
argument_list|(
name|currentDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
name|currentDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
argument_list|,
name|currentDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|strings
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|strings
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|shutdownDate
operator|.
name|before
argument_list|(
name|currentDate
argument_list|)
condition|)
block|{
name|shutdownDate
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
name|shutdownDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|sleep
operator|=
name|shutdownDate
operator|.
name|getTimeInMillis
argument_list|()
operator|-
name|currentDate
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|force
condition|)
block|{
name|this
operator|.
name|shutdown
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|karafName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Confirm: shutdown instance %s (yes/no): "
argument_list|,
name|karafName
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|c
init|=
name|session
operator|.
name|getKeyboard
argument_list|()
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
condition|)
block|{
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|String
name|str
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
condition|)
block|{
name|this
operator|.
name|shutdown
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|shutdown
parameter_list|(
specifier|final
name|long
name|sleep
parameter_list|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|sleep
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Shutdown in "
operator|+
name|sleep
operator|/
literal|1000
operator|/
literal|60
operator|+
literal|" minute(s)."
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error when shutting down"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

