begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|version
operator|.
name|VersionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|ExportedPackage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|packageadmin
operator|.
name|PackageAdmin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"osgi"
argument_list|,
name|name
operator|=
literal|"headers"
argument_list|,
name|description
operator|=
literal|"Displays OSGi headers of a given bundle"
argument_list|)
specifier|public
class|class
name|Headers
extends|extends
name|OsgiCommandSupport
block|{
specifier|protected
specifier|final
specifier|static
name|String
name|BUNDLE_PREFIX
init|=
literal|"Bundle-"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|PACKAGE_SUFFFIX
init|=
literal|"-Package"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|SERVICE_SUFFIX
init|=
literal|"-Service"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|USES_ATTRIB
init|=
literal|"uses:="
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|VERSION_ATTRIB
init|=
literal|"version="
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|RESOLUTION_ATTRIB
init|=
literal|"resolution:="
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|IMPORT_PACKAGES_ATTRIB
init|=
literal|"Import-Package"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|REQUIRE_BUNDLE_ATTRIB
init|=
literal|"Require-Bundle"
decl_stmt|;
specifier|private
name|ServiceReference
name|ref
decl_stmt|;
specifier|private
name|PackageAdmin
name|admin
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"ids"
argument_list|,
name|description
operator|=
literal|"A list of bundle IDs separated by whitespaces"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Long
argument_list|>
name|ids
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Get package admin service.
name|ref
operator|=
name|getBundleContext
argument_list|()
operator|.
name|getServiceReference
argument_list|(
name|PackageAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PackageAdmin service is unavailable."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|admin
operator|=
operator|(
name|PackageAdmin
operator|)
name|getBundleContext
argument_list|()
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"PackageAdmin service is unavailable."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|long
name|id
range|:
name|ids
control|)
block|{
name|Bundle
name|bundle
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundle
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|printHeaders
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle ID "
operator|+
name|id
operator|+
literal|" is invalid."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Bundle
index|[]
name|bundles
init|=
name|getBundleContext
argument_list|()
operator|.
name|getBundles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|printHeaders
argument_list|(
name|bundles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|getBundleContext
argument_list|()
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|printHeaders
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|title
init|=
name|Util
operator|.
name|getBundleName
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n"
operator|+
name|title
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Util
operator|.
name|getUnderlineString
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|generateFormattedOutput
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|generateFormattedOutput
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|otherAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|bundleAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|serviceAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|packagesAttribs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Dictionary
name|dict
init|=
name|bundle
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|Enumeration
name|keys
init|=
name|dict
operator|.
name|keys
argument_list|()
decl_stmt|;
comment|// do an initial loop and separate the attributes in different groups
while|while
condition|(
name|keys
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|k
init|=
operator|(
name|String
operator|)
name|keys
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|v
init|=
name|dict
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
name|BUNDLE_PREFIX
argument_list|)
condition|)
block|{
comment|// starts with Bundle-xxx
name|bundleAttribs
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|endsWith
argument_list|(
name|SERVICE_SUFFIX
argument_list|)
condition|)
block|{
comment|// ends with xxx-Service
name|serviceAttribs
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|endsWith
argument_list|(
name|PACKAGE_SUFFFIX
argument_list|)
condition|)
block|{
comment|// ends with xxx-Package
name|packagesAttribs
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|endsWith
argument_list|(
name|REQUIRE_BUNDLE_ATTRIB
argument_list|)
condition|)
block|{
comment|// require bundle statement
name|packagesAttribs
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the remaining attribs
name|otherAttribs
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we will display the formatted result like this:
comment|// Bundle-Name (ID)
comment|// -----------------------
comment|// all other attributes
comment|//
comment|// all Bundle attributes
comment|//
comment|// all Service attributes
comment|//
comment|// all Package attributes
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|otherAttribs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s = %s\n"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Util
operator|.
name|getValueString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|otherAttribs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|bundleAttribs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s = %s\n"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Util
operator|.
name|getValueString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundleAttribs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|serviceAttribs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s = %s\n"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Util
operator|.
name|getValueString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceAttribs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|packagesAttribs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|REQUIRE_BUNDLE_ATTRIB
argument_list|)
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s = %s\n"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|getFormattedBundles
argument_list|(
name|Util
operator|.
name|getValueString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s = \n%s\n"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|getFormattedPackages
argument_list|(
name|Util
operator|.
name|getValueString
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|IMPORT_PACKAGES_ATTRIB
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|packagesAttribs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getFormattedPackages
parameter_list|(
name|String
name|packagesString
parameter_list|,
name|boolean
name|colorize
parameter_list|)
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PackageDefinition
argument_list|>
name|packages
init|=
name|splitPackages
argument_list|(
name|packagesString
argument_list|,
name|colorize
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|PackageDefinition
name|def
range|:
name|packages
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
name|def
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getFormattedBundles
parameter_list|(
name|String
name|bundlesString
parameter_list|)
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BundleDefinition
argument_list|>
name|bundles
init|=
name|splitBundles
argument_list|(
name|bundlesString
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|BundleDefinition
name|def
range|:
name|bundles
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
name|def
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|List
argument_list|<
name|PackageDefinition
argument_list|>
name|splitPackages
parameter_list|(
name|String
name|packagesString
parameter_list|,
name|boolean
name|colorize
parameter_list|)
block|{
name|boolean
name|inQuotes
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|PackageDefinition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|PackageDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuffer
name|statement
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|packagesString
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|c
init|=
name|packagesString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
comment|// quote switcher
name|inQuotes
operator|=
operator|!
name|inQuotes
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|','
operator|&&
operator|!
name|inQuotes
condition|)
block|{
comment|// package statement ends here
name|parts
operator|.
name|add
argument_list|(
operator|new
name|PackageDefinition
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|colorize
argument_list|)
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|statement
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
operator|new
name|PackageDefinition
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|colorize
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
specifier|protected
name|List
argument_list|<
name|BundleDefinition
argument_list|>
name|splitBundles
parameter_list|(
name|String
name|bundlesString
parameter_list|)
block|{
name|boolean
name|inQuotes
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|BundleDefinition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleDefinition
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuffer
name|statement
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|bundlesString
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|c
init|=
name|bundlesString
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
comment|// quote switcher
name|inQuotes
operator|=
operator|!
name|inQuotes
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|','
operator|&&
operator|!
name|inQuotes
condition|)
block|{
comment|// package statement ends here
name|parts
operator|.
name|add
argument_list|(
operator|new
name|BundleDefinition
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|statement
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
operator|new
name|BundleDefinition
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
class|class
name|PackageDefinition
block|{
specifier|private
name|String
name|packageStr
decl_stmt|;
specifier|private
name|String
name|nameStr
decl_stmt|;
specifier|private
name|String
name|usesStr
decl_stmt|;
specifier|private
name|String
name|versionStr
decl_stmt|;
specifier|private
name|String
name|resolutionStr
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|usesItems
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|parameters
decl_stmt|;
specifier|private
name|boolean
name|colorize
decl_stmt|;
specifier|public
name|PackageDefinition
parameter_list|(
name|String
name|packageString
parameter_list|,
name|boolean
name|colorize
parameter_list|)
block|{
name|this
operator|.
name|packageStr
operator|=
name|packageString
expr_stmt|;
name|this
operator|.
name|colorize
operator|=
name|colorize
expr_stmt|;
name|this
operator|.
name|usesItems
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|parse
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|parse
parameter_list|()
block|{
name|boolean
name|inQuotes
init|=
literal|false
decl_stmt|;
name|StringBuffer
name|statement
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|packageStr
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|c
init|=
name|packageStr
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
comment|// quote switcher
name|inQuotes
operator|=
operator|!
name|inQuotes
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|';'
operator|&&
operator|!
name|inQuotes
condition|)
block|{
comment|// part finished
name|apply
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|statement
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|statement
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|apply
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|apply
parameter_list|(
name|String
name|part
parameter_list|,
name|boolean
name|first
parameter_list|)
block|{
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|USES_ATTRIB
argument_list|)
condition|)
block|{
comment|// uses definition
name|this
operator|.
name|usesStr
operator|=
name|part
expr_stmt|;
name|StringTokenizer
name|usesTok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|this
operator|.
name|usesStr
operator|.
name|substring
argument_list|(
name|this
operator|.
name|usesStr
operator|.
name|indexOf
argument_list|(
name|USES_ATTRIB
argument_list|)
operator|+
name|USES_ATTRIB
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|usesTok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|this
operator|.
name|usesItems
operator|.
name|add
argument_list|(
name|usesTok
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|VERSION_ATTRIB
argument_list|)
condition|)
block|{
comment|// version definition
name|this
operator|.
name|versionStr
operator|=
name|part
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|RESOLUTION_ATTRIB
argument_list|)
condition|)
block|{
comment|// resolution definition
name|this
operator|.
name|resolutionStr
operator|=
name|part
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|first
condition|)
block|{
comment|// must be package name
name|this
operator|.
name|nameStr
operator|=
name|part
expr_stmt|;
block|}
else|else
block|{
name|parameters
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameStr
return|;
block|}
specifier|public
name|String
name|getResolution
parameter_list|()
block|{
return|return
name|this
operator|.
name|resolutionStr
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionStr
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getUsesItems
parameter_list|()
block|{
return|return
name|this
operator|.
name|usesItems
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// output should look like this...
comment|//<package>;
comment|// uses:=<package>,
comment|//<anotherPackage>,
comment|//<etc>;
comment|//<parameters>;
comment|// version="<version>",
comment|// resolution:="<resolution>",
comment|//<blank line>
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t%s"
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// we do a line feed if there are uses defined
if|if
condition|(
name|this
operator|.
name|usesItems
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";\n\t%s \""
argument_list|,
name|USES_ATTRIB
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|usesItem
range|:
name|this
operator|.
name|usesItems
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
literal|",\n\t\t"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
name|usesItem
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|param
range|:
name|this
operator|.
name|parameters
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
literal|";\n\t"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s"
argument_list|,
name|param
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";\n\t%s"
argument_list|,
name|this
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getResolution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";\n\t%s"
argument_list|,
name|this
operator|.
name|getResolution
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if there are no uses defined we put all on a single line
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|param
range|:
name|this
operator|.
name|parameters
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
literal|",\n\t\t"
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";%s"
argument_list|,
name|param
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";%s"
argument_list|,
name|this
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getResolution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";%s"
argument_list|,
name|this
operator|.
name|getResolution
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|retVal
decl_stmt|;
if|if
condition|(
name|colorize
condition|)
block|{
name|boolean
name|isSatisfied
init|=
name|checkPackage
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSatisfied
condition|)
block|{
comment|// color it green
name|retVal
operator|=
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|GREEN
argument_list|)
operator|.
name|a
argument_list|(
name|output
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|reset
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// color it red
name|retVal
operator|=
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
name|output
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|reset
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|retVal
operator|=
name|output
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
specifier|private
name|boolean
name|checkPackage
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|versionInfo
parameter_list|)
block|{
name|boolean
name|satisfied
init|=
literal|false
decl_stmt|;
name|String
name|version
init|=
name|versionInfo
operator|==
literal|null
condition|?
literal|null
else|:
name|versionInfo
operator|.
name|substring
argument_list|(
name|versionInfo
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
operator|+
literal|1
argument_list|,
name|versionInfo
operator|.
name|lastIndexOf
argument_list|(
literal|'"'
argument_list|)
argument_list|)
decl_stmt|;
name|VersionRange
name|range
init|=
name|version
operator|==
literal|null
condition|?
literal|null
else|:
name|VersionRange
operator|.
name|parseVersionRange
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|ExportedPackage
index|[]
name|packages
init|=
name|admin
operator|.
name|getExportedPackages
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
name|satisfied
operator|=
name|packages
operator|!=
literal|null
operator|&&
name|packages
operator|.
name|length
operator|>
literal|0
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|packages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExportedPackage
name|export
range|:
name|packages
control|)
block|{
if|if
condition|(
name|range
operator|.
name|contains
argument_list|(
name|export
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|satisfied
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
return|return
name|satisfied
return|;
block|}
block|}
class|class
name|BundleDefinition
block|{
specifier|private
name|String
name|bundleStr
decl_stmt|;
specifier|private
name|String
name|nameStr
decl_stmt|;
specifier|private
name|String
name|versionStr
decl_stmt|;
specifier|private
name|String
name|resolutionStr
decl_stmt|;
specifier|public
name|BundleDefinition
parameter_list|(
name|String
name|bundleString
parameter_list|)
block|{
name|this
operator|.
name|bundleStr
operator|=
name|bundleString
expr_stmt|;
name|parse
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|parse
parameter_list|()
block|{
name|boolean
name|inQuotes
init|=
literal|false
decl_stmt|;
name|StringBuffer
name|statement
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|this
operator|.
name|bundleStr
operator|.
name|length
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
name|char
name|c
init|=
name|this
operator|.
name|bundleStr
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'"'
condition|)
block|{
comment|// quote switcher
name|inQuotes
operator|=
operator|!
name|inQuotes
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|==
literal|';'
operator|&&
operator|!
name|inQuotes
condition|)
block|{
comment|// part finished
name|apply
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|statement
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|statement
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|statement
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|apply
argument_list|(
name|statement
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|apply
parameter_list|(
name|String
name|part
parameter_list|)
block|{
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|VERSION_ATTRIB
argument_list|)
condition|)
block|{
comment|// version definition
name|this
operator|.
name|versionStr
operator|=
name|part
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|RESOLUTION_ATTRIB
argument_list|)
condition|)
block|{
comment|// resolution definition
name|this
operator|.
name|resolutionStr
operator|=
name|part
expr_stmt|;
block|}
else|else
block|{
comment|// must be bundle name
name|this
operator|.
name|nameStr
operator|=
name|part
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|nameStr
return|;
block|}
specifier|public
name|String
name|getResolution
parameter_list|()
block|{
return|return
name|this
operator|.
name|resolutionStr
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|versionStr
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|// output should look like this...
comment|//<bundle>;
comment|// version="<version>",
comment|// resolution:="<resolution>",
comment|//<blank line>
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t%s"
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if there are no uses defined we put all on a single line
if|if
condition|(
name|this
operator|.
name|getVersion
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";%s"
argument_list|,
name|this
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|getResolution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|";%s"
argument_list|,
name|this
operator|.
name|getResolution
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|retVal
decl_stmt|;
name|boolean
name|isSatisfied
init|=
name|checkBundle
argument_list|(
name|getName
argument_list|()
argument_list|,
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSatisfied
condition|)
block|{
comment|// color it green
name|retVal
operator|=
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|GREEN
argument_list|)
operator|.
name|a
argument_list|(
name|output
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|reset
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// color it red
name|retVal
operator|=
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
name|output
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|reset
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|retVal
return|;
block|}
specifier|private
name|boolean
name|checkBundle
parameter_list|(
name|String
name|bundleName
parameter_list|,
name|String
name|versionInfo
parameter_list|)
block|{
name|boolean
name|satisfied
init|=
literal|false
decl_stmt|;
name|String
name|version
init|=
name|versionInfo
operator|==
literal|null
condition|?
literal|null
else|:
name|versionInfo
operator|.
name|substring
argument_list|(
name|versionInfo
operator|.
name|indexOf
argument_list|(
literal|'"'
argument_list|)
operator|+
literal|1
argument_list|,
name|versionInfo
operator|.
name|lastIndexOf
argument_list|(
literal|'"'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|Bundle
index|[]
name|bundles
init|=
name|admin
operator|.
name|getBundles
argument_list|(
name|bundleName
argument_list|,
name|version
argument_list|)
decl_stmt|;
name|satisfied
operator|=
name|bundles
operator|!=
literal|null
operator|&&
name|bundles
operator|.
name|length
operator|>
literal|0
expr_stmt|;
block|}
return|return
name|satisfied
return|;
block|}
block|}
block|}
end_class

end_unit

