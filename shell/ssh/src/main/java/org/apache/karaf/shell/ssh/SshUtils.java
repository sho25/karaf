begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|NamedFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|BuiltinCiphers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|Cipher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|mac
operator|.
name|BuiltinMacs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|mac
operator|.
name|Mac
import|;
end_import

begin_class
specifier|public
class|class
name|SshUtils
block|{
specifier|public
specifier|static
parameter_list|<
name|S
parameter_list|>
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|S
argument_list|>
argument_list|>
name|filter
parameter_list|(
name|Collection
argument_list|<
name|NamedFactory
argument_list|<
name|S
argument_list|>
argument_list|>
name|factories
parameter_list|,
name|String
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|S
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|NamedFactory
argument_list|<
name|S
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
for|for
control|(
name|NamedFactory
argument_list|<
name|S
argument_list|>
name|factory
range|:
name|factories
control|)
block|{
if|if
condition|(
name|factory
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|Mac
argument_list|>
argument_list|>
name|buildMacs
parameter_list|(
name|String
name|names
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|Mac
argument_list|>
operator|>
name|asList
argument_list|(
name|BuiltinMacs
operator|.
name|hmacmd5
argument_list|,
name|BuiltinMacs
operator|.
name|hmacsha1
argument_list|,
name|BuiltinMacs
operator|.
name|hmacmd596
argument_list|,
name|BuiltinMacs
operator|.
name|hmacsha196
argument_list|)
argument_list|,
name|names
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
argument_list|>
name|buildCiphers
parameter_list|(
name|String
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
argument_list|>
name|avail
init|=
operator|new
name|LinkedList
argument_list|<
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|aes128ctr
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|aes256ctr
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|arcfour128
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|arcfour256
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|aes128cbc
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|tripledescbc
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|blowfishcbc
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|aes192cbc
argument_list|)
expr_stmt|;
name|avail
operator|.
name|add
argument_list|(
name|BuiltinCiphers
operator|.
name|aes256cbc
argument_list|)
expr_stmt|;
name|avail
operator|=
name|filter
argument_list|(
name|avail
argument_list|,
name|names
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
argument_list|>
name|i
init|=
name|avail
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NamedFactory
argument_list|<
name|Cipher
argument_list|>
name|f
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Cipher
name|c
init|=
name|f
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
name|c
operator|.
name|getBlockSize
argument_list|()
index|]
decl_stmt|;
specifier|final
name|byte
index|[]
name|iv
init|=
operator|new
name|byte
index|[
name|c
operator|.
name|getIVSize
argument_list|()
index|]
decl_stmt|;
name|c
operator|.
name|init
argument_list|(
name|Cipher
operator|.
name|Mode
operator|.
name|Encrypt
argument_list|,
name|key
argument_list|,
name|iv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|avail
return|;
block|}
block|}
end_class

end_unit

