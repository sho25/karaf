begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|PublickeyAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|session
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|DSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|DSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A public key authenticator, which reads an OpenSSL2<code>authorized_keys</code> file.  */
end_comment

begin_class
specifier|public
class|class
name|KarafPublickeyAuthenticator
implements|implements
name|PublickeyAuthenticator
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KarafPublickeyAuthenticator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|authorizedKeys
decl_stmt|;
specifier|private
name|boolean
name|active
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|AuthorizedKey
block|{
specifier|private
specifier|final
name|String
name|alias
decl_stmt|;
specifier|private
specifier|final
name|String
name|format
decl_stmt|;
specifier|private
specifier|final
name|PublicKey
name|publicKey
decl_stmt|;
specifier|public
name|AuthorizedKey
parameter_list|(
name|String
name|alias
parameter_list|,
name|String
name|format
parameter_list|,
name|PublicKey
name|publicKey
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|publicKey
operator|=
name|publicKey
expr_stmt|;
block|}
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|this
operator|.
name|alias
return|;
block|}
specifier|public
name|String
name|getFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|format
return|;
block|}
specifier|public
name|PublicKey
name|getPublicKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|publicKey
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|PublicKeyComparator
implements|implements
name|Comparator
argument_list|<
name|PublicKey
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|PublicKey
name|a
parameter_list|,
name|PublicKey
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|DSAPublicKey
condition|)
block|{
if|if
condition|(
name|b
operator|instanceof
name|DSAPublicKey
condition|)
block|{
name|DSAPublicKey
name|da
init|=
operator|(
name|DSAPublicKey
operator|)
name|a
decl_stmt|;
name|DSAPublicKey
name|db
init|=
operator|(
name|DSAPublicKey
operator|)
name|b
decl_stmt|;
name|int
name|r
init|=
name|da
operator|.
name|getParams
argument_list|()
operator|.
name|getG
argument_list|()
operator|.
name|compareTo
argument_list|(
name|db
operator|.
name|getParams
argument_list|()
operator|.
name|getG
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|r
return|;
block|}
name|r
operator|=
name|da
operator|.
name|getParams
argument_list|()
operator|.
name|getP
argument_list|()
operator|.
name|compareTo
argument_list|(
name|db
operator|.
name|getParams
argument_list|()
operator|.
name|getP
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|r
return|;
block|}
name|r
operator|=
name|da
operator|.
name|getParams
argument_list|()
operator|.
name|getQ
argument_list|()
operator|.
name|compareTo
argument_list|(
name|db
operator|.
name|getParams
argument_list|()
operator|.
name|getQ
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|r
return|;
block|}
return|return
name|da
operator|.
name|getY
argument_list|()
operator|.
name|compareTo
argument_list|(
name|db
operator|.
name|getY
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|RSAPublicKey
condition|)
block|{
if|if
condition|(
name|b
operator|instanceof
name|RSAPublicKey
condition|)
block|{
name|RSAPublicKey
name|da
init|=
operator|(
name|RSAPublicKey
operator|)
name|a
decl_stmt|;
name|RSAPublicKey
name|db
init|=
operator|(
name|RSAPublicKey
operator|)
name|b
decl_stmt|;
name|int
name|r
init|=
name|da
operator|.
name|getPublicExponent
argument_list|()
operator|.
name|compareTo
argument_list|(
name|db
operator|.
name|getPublicExponent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|r
return|;
block|}
return|return
name|da
operator|.
name|getModulus
argument_list|()
operator|.
name|compareTo
argument_list|(
name|db
operator|.
name|getModulus
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only RSA and DAS keys are supported."
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|final
class|class
name|AuthorizedKeysProvider
extends|extends
name|TimerTask
block|{
specifier|private
name|Map
argument_list|<
name|PublicKey
argument_list|,
name|AuthorizedKey
argument_list|>
name|keys
decl_stmt|;
specifier|private
name|Long
name|lastModificationDate
decl_stmt|;
specifier|private
name|Boolean
name|fileAvailable
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|File
name|af
init|=
operator|new
name|File
argument_list|(
name|KarafPublickeyAuthenticator
operator|.
name|this
operator|.
name|authorizedKeys
argument_list|)
decl_stmt|;
if|if
condition|(
name|af
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Long
name|newModificationDate
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|af
operator|.
name|lastModified
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|this
operator|.
name|fileAvailable
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|fileAvailable
operator|.
name|booleanValue
argument_list|()
operator|)
operator|||
operator|!
name|newModificationDate
operator|.
name|equals
argument_list|(
name|this
operator|.
name|lastModificationDate
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Parsing authorized keys file {}..."
argument_list|,
name|KarafPublickeyAuthenticator
operator|.
name|this
operator|.
name|authorizedKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileAvailable
operator|=
name|Boolean
operator|.
name|TRUE
expr_stmt|;
name|this
operator|.
name|lastModificationDate
operator|=
name|newModificationDate
expr_stmt|;
name|Map
argument_list|<
name|PublicKey
argument_list|,
name|AuthorizedKey
argument_list|>
name|newKeys
init|=
name|KarafPublickeyAuthenticator
operator|.
name|parseAuthorizedKeys
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|af
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|setKeys
argument_list|(
name|newKeys
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully parsed {} keys from file {}"
argument_list|,
name|newKeys
operator|.
name|size
argument_list|()
argument_list|,
name|KarafPublickeyAuthenticator
operator|.
name|this
operator|.
name|authorizedKeys
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|fileAvailable
operator|!=
literal|null
operator|&&
name|this
operator|.
name|fileAvailable
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Authorized keys file {} disappeared, will recheck every minute"
argument_list|,
name|KarafPublickeyAuthenticator
operator|.
name|this
operator|.
name|authorizedKeys
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|fileAvailable
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Authorized keys file {} does not exist, will recheck every minute"
argument_list|,
name|KarafPublickeyAuthenticator
operator|.
name|this
operator|.
name|authorizedKeys
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|fileAvailable
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
name|this
operator|.
name|lastModificationDate
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|setKeys
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error parsing authorized keys file {}"
argument_list|,
name|KarafPublickeyAuthenticator
operator|.
name|this
operator|.
name|authorizedKeys
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileAvailable
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
name|this
operator|.
name|lastModificationDate
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|setKeys
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|setKeys
parameter_list|(
name|Map
argument_list|<
name|PublicKey
argument_list|,
name|AuthorizedKey
argument_list|>
name|keys
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|AuthorizedKey
name|getKey
parameter_list|(
name|PublicKey
name|publicKey
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|keys
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|this
operator|.
name|keys
operator|.
name|get
argument_list|(
name|publicKey
argument_list|)
return|;
block|}
block|}
specifier|private
name|Timer
name|parseAuthorizedKeysTimer
decl_stmt|;
specifier|private
name|AuthorizedKeysProvider
name|authorizedKeysProvider
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|getInt
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|int
operator|)
name|b
index|[
name|pos
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
operator|+
operator|(
operator|(
operator|(
name|int
operator|)
name|b
index|[
name|pos
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
operator|(
name|int
operator|)
name|b
index|[
name|pos
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|int
operator|)
name|b
index|[
name|pos
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
comment|/**      * Parse an<code>authorized_keys</code> file in OpenSSH style.      *      * @param is the input stream to read.      * @return a map of authorized public keys.      * @throws IOException      * @throws NoSuchAlgorithmException      * @throws InvalidKeySpecException      */
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|PublicKey
argument_list|,
name|AuthorizedKey
argument_list|>
name|parseAuthorizedKeys
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
try|try
block|{
name|Base64
name|decoder
init|=
operator|new
name|Base64
argument_list|()
decl_stmt|;
name|KeyFactory
name|rsaKeyGen
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
name|KeyFactory
name|dsaKeyGen
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"DSA"
argument_list|)
decl_stmt|;
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|PublicKey
argument_list|,
name|AuthorizedKey
argument_list|>
name|ret
init|=
operator|new
name|TreeMap
argument_list|<
name|PublicKey
argument_list|,
name|AuthorizedKey
argument_list|>
argument_list|(
operator|new
name|PublicKeyComparator
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
literal|"[ \\t]+"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authorized keys file line "
operator|+
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" does not contain 3 tokens."
argument_list|)
throw|;
block|}
name|byte
index|[]
name|rawKey
init|=
name|decoder
operator|.
name|decode
argument_list|(
name|tokens
index|[
literal|1
index|]
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|getInt
argument_list|(
name|rawKey
argument_list|,
literal|0
argument_list|)
operator|!=
literal|7
operator|||
operator|!
operator|new
name|String
argument_list|(
name|rawKey
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|"UTF-8"
argument_list|)
operator|.
name|equals
argument_list|(
name|tokens
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authorized keys file line "
operator|+
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" contains a key with a format that does not match the first token."
argument_list|)
throw|;
block|}
name|PublicKey
name|pk
decl_stmt|;
if|if
condition|(
name|tokens
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ssh-dss"
argument_list|)
condition|)
block|{
name|int
name|pos
init|=
literal|11
decl_stmt|;
name|int
name|n
init|=
name|getInt
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
name|BigInteger
name|p
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|,
name|pos
operator|+
name|n
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
name|n
operator|=
name|getInt
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
name|BigInteger
name|q
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|,
name|pos
operator|+
name|n
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
name|n
operator|=
name|getInt
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
name|BigInteger
name|g
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|,
name|pos
operator|+
name|n
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
name|n
operator|=
name|getInt
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
name|BigInteger
name|y
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|,
name|pos
operator|+
name|n
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
name|rawKey
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authorized keys file line "
operator|+
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" contains a DSA key with extra garbage."
argument_list|)
throw|;
block|}
name|DSAPublicKeySpec
name|ps
init|=
operator|new
name|DSAPublicKeySpec
argument_list|(
name|y
argument_list|,
name|p
argument_list|,
name|q
argument_list|,
name|g
argument_list|)
decl_stmt|;
name|pk
operator|=
name|dsaKeyGen
operator|.
name|generatePublic
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokens
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"ssh-rsa"
argument_list|)
condition|)
block|{
name|int
name|pos
init|=
literal|11
decl_stmt|;
name|int
name|n
init|=
name|getInt
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
name|BigInteger
name|e
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|,
name|pos
operator|+
name|n
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
name|n
operator|=
name|getInt
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|+=
literal|4
expr_stmt|;
name|BigInteger
name|modulus
init|=
operator|new
name|BigInteger
argument_list|(
literal|1
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rawKey
argument_list|,
name|pos
argument_list|,
name|pos
operator|+
name|n
argument_list|)
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
name|rawKey
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authorized keys file line "
operator|+
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" contains a RSA key with extra garbage."
argument_list|)
throw|;
block|}
name|RSAPublicKeySpec
name|ps
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
name|modulus
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|pk
operator|=
name|rsaKeyGen
operator|.
name|generatePublic
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Authorized keys file line "
operator|+
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|" does not start with ssh-dss or ssh-rsa."
argument_list|)
throw|;
block|}
name|ret
operator|.
name|put
argument_list|(
name|pk
argument_list|,
operator|new
name|AuthorizedKey
argument_list|(
name|tokens
index|[
literal|2
index|]
argument_list|,
name|tokens
index|[
literal|0
index|]
argument_list|,
name|pk
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|authenticate
parameter_list|(
name|String
name|username
parameter_list|,
name|PublicKey
name|publicKey
parameter_list|,
name|ServerSession
name|session
parameter_list|)
block|{
name|AuthorizedKey
name|ak
init|=
name|this
operator|.
name|authorizedKeysProvider
operator|.
name|getKey
argument_list|(
name|publicKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|ak
operator|==
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Failed authenticate of user {} from {} with unknown public key."
argument_list|,
name|username
argument_list|,
name|session
operator|.
name|getIoSession
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successful authentication of user {} from {} with public key {}."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|username
block|,
name|session
operator|.
name|getIoSession
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
block|,
name|ak
operator|.
name|getAlias
argument_list|()
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setAuthorizedKeys
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|authorizedKeys
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
block|}
specifier|public
name|void
name|startTimer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|active
condition|)
block|{
name|this
operator|.
name|parseAuthorizedKeysTimer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|this
operator|.
name|authorizedKeysProvider
operator|=
operator|new
name|AuthorizedKeysProvider
argument_list|()
expr_stmt|;
name|this
operator|.
name|parseAuthorizedKeysTimer
operator|.
name|schedule
argument_list|(
name|this
operator|.
name|authorizedKeysProvider
argument_list|,
literal|10
argument_list|,
literal|60000L
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopTimer
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|parseAuthorizedKeysTimer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|parseAuthorizedKeysTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|parseAuthorizedKeysTimer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

