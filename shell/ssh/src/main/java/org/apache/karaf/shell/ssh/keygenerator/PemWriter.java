begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
operator|.
name|keygenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|io
operator|.
name|pem
operator|.
name|PemObject
import|;
end_import

begin_class
specifier|public
class|class
name|PemWriter
block|{
specifier|private
name|Path
name|privateKeyPath
decl_stmt|;
specifier|private
name|Path
name|publicKeyPath
decl_stmt|;
specifier|public
name|PemWriter
parameter_list|(
name|Path
name|privateKeyPath
parameter_list|,
name|Path
name|publicKeyPath
parameter_list|)
block|{
name|this
operator|.
name|privateKeyPath
operator|=
name|privateKeyPath
expr_stmt|;
name|this
operator|.
name|publicKeyPath
operator|=
name|publicKeyPath
expr_stmt|;
block|}
specifier|public
name|void
name|writeKeyPair
parameter_list|(
name|String
name|resource
parameter_list|,
name|KeyPair
name|kp
parameter_list|)
throws|throws
name|IOException
throws|,
name|FileNotFoundException
block|{
try|try
init|(
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|io
operator|.
name|pem
operator|.
name|PemWriter
name|writer
init|=
operator|new
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|io
operator|.
name|pem
operator|.
name|PemWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|privateKeyPath
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|writer
operator|.
name|writeObject
argument_list|(
operator|new
name|PemObject
argument_list|(
literal|"PRIVATE KEY"
argument_list|,
name|kp
operator|.
name|getPrivate
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|io
operator|.
name|pem
operator|.
name|PemWriter
name|writer
init|=
operator|new
name|org
operator|.
name|bouncycastle
operator|.
name|util
operator|.
name|io
operator|.
name|pem
operator|.
name|PemWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|publicKeyPath
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|writer
operator|.
name|writeObject
argument_list|(
operator|new
name|PemObject
argument_list|(
literal|"PUBLIC KEY"
argument_list|,
name|kp
operator|.
name|getPublic
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

