begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|SshServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|jaas
operator|.
name|JaasPasswordAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|keyprovider
operator|.
name|SimpleGeneratorHostKeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|cade
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|blueprint
operator|.
name|container
operator|.
name|BlueprintContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SshServerFactory
implements|implements
name|Configurable
argument_list|<
name|SshConfig
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SshServerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|serverId
decl_stmt|;
specifier|private
name|BlueprintContainer
name|blueprintContainer
decl_stmt|;
specifier|private
name|boolean
name|start
decl_stmt|;
specifier|private
name|SshServer
name|server
decl_stmt|;
specifier|public
name|SshServerFactory
parameter_list|()
block|{     }
specifier|public
name|String
name|getServerId
parameter_list|()
block|{
return|return
name|serverId
return|;
block|}
specifier|public
name|void
name|setServerId
parameter_list|(
name|String
name|serverId
parameter_list|)
block|{
name|this
operator|.
name|serverId
operator|=
name|serverId
expr_stmt|;
block|}
specifier|public
name|BlueprintContainer
name|getBlueprintContainer
parameter_list|()
block|{
return|return
name|blueprintContainer
return|;
block|}
specifier|public
name|void
name|setBlueprintContainer
parameter_list|(
name|BlueprintContainer
name|blueprintContainer
parameter_list|)
block|{
name|this
operator|.
name|blueprintContainer
operator|=
name|blueprintContainer
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|boolean
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
specifier|final
name|SshConfig
name|config
parameter_list|)
block|{
if|if
condition|(
name|start
condition|)
block|{
try|try
block|{
name|server
operator|=
operator|(
name|SshServer
operator|)
name|blueprintContainer
operator|.
name|getComponentInstance
argument_list|(
name|serverId
argument_list|)
expr_stmt|;
name|server
operator|.
name|setPort
argument_list|(
name|config
operator|.
name|sshPort
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setHost
argument_list|(
name|config
operator|.
name|sshHost
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setKeyPairProvider
argument_list|(
operator|new
name|SimpleGeneratorHostKeyProvider
argument_list|(
name|config
operator|.
name|hostKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|setPasswordAuthenticator
argument_list|(
name|newJaasPasswordAuthenticator
argument_list|(
operator|(
name|config
operator|.
name|sshRealm
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Error updating SSH server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|JaasPasswordAuthenticator
name|newJaasPasswordAuthenticator
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
name|JaasPasswordAuthenticator
name|auth
init|=
operator|new
name|JaasPasswordAuthenticator
argument_list|()
decl_stmt|;
name|auth
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
return|return
name|auth
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|start
operator|&&
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Error stopping SSH server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setup
parameter_list|(
name|SshConfig
name|sshConfig
parameter_list|)
block|{
name|stop
argument_list|()
expr_stmt|;
name|start
argument_list|(
name|sshConfig
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleted
parameter_list|()
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

