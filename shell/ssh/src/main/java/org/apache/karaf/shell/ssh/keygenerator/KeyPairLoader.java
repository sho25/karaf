begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
operator|.
name|keygenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|DSAPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|ECPrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateCrtKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|DSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|KeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|RSAPublicKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|asn1
operator|.
name|pkcs
operator|.
name|PrivateKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jcajce
operator|.
name|provider
operator|.
name|asymmetric
operator|.
name|util
operator|.
name|EC5Util
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|spec
operator|.
name|ECParameterSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|jce
operator|.
name|spec
operator|.
name|ECPublicKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|math
operator|.
name|ec
operator|.
name|ECPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMDecryptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMEncryptedKeyPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMKeyPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|PEMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|jcajce
operator|.
name|JcaPEMKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|jcajce
operator|.
name|JceOpenSSLPKCS8DecryptorProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|openssl
operator|.
name|jcajce
operator|.
name|JcePEMDecryptorProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|InputDecryptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|operator
operator|.
name|OperatorCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCS8EncryptedPrivateKeyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|bouncycastle
operator|.
name|pkcs
operator|.
name|PKCSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A utility class to convert a private key file into a KeyPair object  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|KeyPairLoader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KeyPairLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|KeyPairLoader
parameter_list|()
block|{
comment|// complete
block|}
specifier|public
specifier|static
name|KeyPair
name|getKeyPair
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
return|return
name|getKeyPair
argument_list|(
name|is
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|KeyPair
name|getKeyPair
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
try|try
init|(
name|PEMParser
name|parser
init|=
operator|new
name|PEMParser
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
init|)
block|{
name|Object
name|o
init|=
name|parser
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|JcaPEMKeyConverter
name|pemConverter
init|=
operator|new
name|JcaPEMKeyConverter
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|PEMEncryptedKeyPair
condition|)
block|{
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
literal|"A password must be supplied to read an encrypted key pair"
argument_list|)
throw|;
block|}
name|JcePEMDecryptorProviderBuilder
name|decryptorBuilder
init|=
operator|new
name|JcePEMDecryptorProviderBuilder
argument_list|()
decl_stmt|;
name|PEMDecryptorProvider
name|pemDecryptor
init|=
name|decryptorBuilder
operator|.
name|build
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|=
name|pemConverter
operator|.
name|getKeyPair
argument_list|(
operator|(
operator|(
name|PEMEncryptedKeyPair
operator|)
name|o
operator|)
operator|.
name|decryptKeyPair
argument_list|(
name|pemDecryptor
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|PKCS8EncryptedPrivateKeyInfo
condition|)
block|{
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
literal|"A password must be supplied to read an encrypted key pair"
argument_list|)
throw|;
block|}
name|JceOpenSSLPKCS8DecryptorProviderBuilder
name|jce
init|=
operator|new
name|JceOpenSSLPKCS8DecryptorProviderBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|InputDecryptorProvider
name|decProv
init|=
name|jce
operator|.
name|build
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|o
operator|=
operator|(
operator|(
name|PKCS8EncryptedPrivateKeyInfo
operator|)
name|o
operator|)
operator|.
name|decryptPrivateKeyInfo
argument_list|(
name|decProv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OperatorCreationException
decl||
name|PKCSException
name|ex
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Error decrypting key pair"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
literal|"Error decrypting key pair"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|o
operator|instanceof
name|PEMKeyPair
condition|)
block|{
return|return
name|pemConverter
operator|.
name|getKeyPair
argument_list|(
operator|(
name|PEMKeyPair
operator|)
name|o
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|KeyPair
condition|)
block|{
return|return
operator|(
name|KeyPair
operator|)
name|o
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|PrivateKeyInfo
condition|)
block|{
name|PrivateKey
name|privateKey
init|=
name|pemConverter
operator|.
name|getPrivateKey
argument_list|(
operator|(
name|PrivateKeyInfo
operator|)
name|o
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|convertPrivateToPublicKey
argument_list|(
name|privateKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|publicKey
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|KeyPair
argument_list|(
name|publicKey
argument_list|,
name|privateKey
argument_list|)
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|GeneralSecurityException
argument_list|(
literal|"Failed to parse input stream"
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|PublicKey
name|convertPrivateToPublicKey
parameter_list|(
name|PrivateKey
name|privateKey
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
if|if
condition|(
name|privateKey
operator|instanceof
name|RSAPrivateCrtKey
condition|)
block|{
name|KeySpec
name|keySpec
init|=
operator|new
name|RSAPublicKeySpec
argument_list|(
operator|(
operator|(
name|RSAPrivateCrtKey
operator|)
name|privateKey
operator|)
operator|.
name|getModulus
argument_list|()
argument_list|,
operator|(
operator|(
name|RSAPrivateCrtKey
operator|)
name|privateKey
operator|)
operator|.
name|getPublicExponent
argument_list|()
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"RSA"
argument_list|)
decl_stmt|;
return|return
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|privateKey
operator|instanceof
name|ECPrivateKey
condition|)
block|{
name|ECPrivateKey
name|ecPrivateKey
init|=
operator|(
name|ECPrivateKey
operator|)
name|privateKey
decl_stmt|;
comment|// Derive the public point by multiplying the generator by the private value
name|ECParameterSpec
name|paramSpec
init|=
name|EC5Util
operator|.
name|convertSpec
argument_list|(
name|ecPrivateKey
operator|.
name|getParams
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ECPoint
name|q
init|=
name|paramSpec
operator|.
name|getG
argument_list|()
operator|.
name|multiply
argument_list|(
name|ecPrivateKey
operator|.
name|getS
argument_list|()
argument_list|)
decl_stmt|;
name|KeySpec
name|keySpec
init|=
operator|new
name|ECPublicKeySpec
argument_list|(
name|q
argument_list|,
name|paramSpec
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"EC"
argument_list|)
decl_stmt|;
return|return
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|privateKey
operator|instanceof
name|DSAPrivateKey
condition|)
block|{
name|DSAPrivateKey
name|dsaPrivateKey
init|=
operator|(
name|DSAPrivateKey
operator|)
name|privateKey
decl_stmt|;
name|BigInteger
name|q
init|=
name|dsaPrivateKey
operator|.
name|getParams
argument_list|()
operator|.
name|getQ
argument_list|()
decl_stmt|;
name|BigInteger
name|p
init|=
name|dsaPrivateKey
operator|.
name|getParams
argument_list|()
operator|.
name|getP
argument_list|()
decl_stmt|;
name|KeySpec
name|keySpec
init|=
operator|new
name|DSAPublicKeySpec
argument_list|(
name|q
operator|.
name|modPow
argument_list|(
name|dsaPrivateKey
operator|.
name|getX
argument_list|()
argument_list|,
name|p
argument_list|)
argument_list|,
name|p
argument_list|,
name|q
argument_list|,
name|dsaPrivateKey
operator|.
name|getParams
argument_list|()
operator|.
name|getG
argument_list|()
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
literal|"DSA"
argument_list|)
decl_stmt|;
return|return
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
return|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Unable to convert private key to public key. Only RSA, DSA + ECDSA supported"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

