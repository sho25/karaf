begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|ClientChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|ClientSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|SshClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|SshAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|AgentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|LocalAgentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|ServerKeyVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|UserInteraction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|channel
operator|.
name|ChannelShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|client
operator|.
name|future
operator|.
name|ConnectFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|RuntimeSshException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|SshException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|FileKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|NoCloseInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|NoCloseOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"ssh"
argument_list|,
name|name
operator|=
literal|"ssh"
argument_list|,
name|description
operator|=
literal|"Connects to a remote SSH server"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|SshAction
implements|implements
name|Action
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-l"
argument_list|,
name|aliases
operator|=
block|{
literal|"--username"
block|}
argument_list|,
name|description
operator|=
literal|"The user name for remote login"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|username
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-P"
argument_list|,
name|aliases
operator|=
block|{
literal|"--password"
block|}
argument_list|,
name|description
operator|=
literal|"The password for remote login"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|password
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-p"
argument_list|,
name|aliases
operator|=
block|{
literal|"--port"
block|}
argument_list|,
name|description
operator|=
literal|"The port to use for SSH connection"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|int
name|port
init|=
literal|22
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-k"
argument_list|,
name|aliases
operator|=
block|{
literal|"--keyfile"
block|}
argument_list|,
name|description
operator|=
literal|"The private keyFile location when using key login, need have BouncyCastle registered as security provider using this flag"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|keyFile
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-q"
argument_list|,
name|description
operator|=
literal|"Quiet Mode. Do not ask for confirmations"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|quiet
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-r"
argument_list|,
name|aliases
operator|=
block|{
literal|"--retries"
block|}
argument_list|,
name|description
operator|=
literal|"retry connection establishment (up to attempts times)"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|int
name|retries
init|=
literal|0
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"hostname"
argument_list|,
name|description
operator|=
literal|"The host name to connect to via SSH"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|hostname
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|name
operator|=
literal|"command"
argument_list|,
name|description
operator|=
literal|"Optional command to execute"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|command
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|keyChangedMessage
init|=
literal|" @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \n"
operator|+
literal|" @    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!      @ \n"
operator|+
literal|" @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ \n"
operator|+
literal|"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
operator|+
literal|"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
operator|+
literal|"It is also possible that the RSA host key has just been changed.\n"
operator|+
literal|"Please contact your system administrator.\n"
operator|+
literal|"Add correct host key in "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.sshkaraf/known_hosts to get rid of this message.\n"
operator|+
literal|"Offending key in "
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.sshkaraf/known_hosts\n"
operator|+
literal|"RSA host key has changed and you have requested strict checking.\n"
operator|+
literal|"Host key verification failed."
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|hostname
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|username
operator|=
name|hostname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hostname
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hostname
operator|=
name|hostname
operator|.
name|substring
argument_list|(
name|hostname
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|+
literal|1
argument_list|,
name|hostname
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connecting to host "
operator|+
name|hostname
operator|+
literal|" on port "
operator|+
name|port
argument_list|)
expr_stmt|;
comment|// If not specified, assume the current user name
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|username
operator|=
operator|(
name|String
operator|)
name|this
operator|.
name|session
operator|.
name|get
argument_list|(
literal|"USER"
argument_list|)
expr_stmt|;
block|}
comment|// If the username was not configured via cli, then prompt the user for the values
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Prompting user for login"
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|username
operator|=
name|session
operator|.
name|readLine
argument_list|(
literal|"Login: "
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|SshClient
name|client
init|=
name|SshClient
operator|.
name|setUpDefaultClient
argument_list|()
decl_stmt|;
name|setupAgent
argument_list|(
name|username
argument_list|,
name|keyFile
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|KnownHostsManager
name|knownHostsManager
init|=
operator|new
name|KnownHostsManager
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|,
literal|".sshkaraf/known_hosts"
argument_list|)
argument_list|)
decl_stmt|;
name|ServerKeyVerifier
name|serverKeyVerifier
init|=
operator|new
name|ServerKeyVerifierImpl
argument_list|(
name|knownHostsManager
argument_list|,
name|quiet
argument_list|)
decl_stmt|;
name|client
operator|.
name|setServerKeyVerifier
argument_list|(
name|serverKeyVerifier
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Created client: {}"
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|client
operator|.
name|setUserInteraction
argument_list|(
operator|new
name|UserInteraction
argument_list|()
block|{
specifier|public
name|void
name|welcome
parameter_list|(
name|String
name|banner
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|banner
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|interactive
parameter_list|(
name|String
name|destination
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|instruction
parameter_list|,
name|String
index|[]
name|prompt
parameter_list|,
name|boolean
index|[]
name|echo
parameter_list|)
block|{
name|String
index|[]
name|answers
init|=
operator|new
name|String
index|[
name|prompt
operator|.
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prompt
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|answers
index|[
name|i
index|]
operator|=
name|session
operator|.
name|readLine
argument_list|(
name|prompt
index|[
name|i
index|]
operator|+
literal|" "
argument_list|,
name|echo
index|[
name|i
index|]
condition|?
literal|null
else|:
literal|'*'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
return|return
name|answers
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|ClientSession
name|sshSession
init|=
name|connectWithRetries
argument_list|(
name|client
argument_list|,
name|username
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|retries
argument_list|)
decl_stmt|;
name|Object
name|oldIgnoreInterrupts
init|=
name|this
operator|.
name|session
operator|.
name|get
argument_list|(
name|Session
operator|.
name|IGNORE_INTERRUPTS
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|sshSession
operator|.
name|addPasswordIdentity
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sshSession
operator|.
name|auth
argument_list|()
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Session is closed"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|keyChangedMessage
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|this
operator|.
name|session
operator|.
name|put
argument_list|(
name|Session
operator|.
name|IGNORE_INTERRUPTS
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|cmd
range|:
name|command
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
name|ClientChannel
name|channel
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|channel
operator|=
name|sshSession
operator|.
name|createChannel
argument_list|(
literal|"exec"
argument_list|,
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setIn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|channel
operator|=
name|sshSession
operator|.
name|createChannel
argument_list|(
literal|"shell"
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setIn
argument_list|(
operator|new
name|NoCloseInputStream
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ChannelShell
operator|)
name|channel
operator|)
operator|.
name|setPtyColumns
argument_list|(
name|getTermWidth
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ChannelShell
operator|)
name|channel
operator|)
operator|.
name|setupSensibleDefaultPty
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ChannelShell
operator|)
name|channel
operator|)
operator|.
name|setAgentForwarding
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|ctype
init|=
name|session
operator|.
name|get
argument_list|(
literal|"LC_CTYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ctype
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|ChannelShell
operator|)
name|channel
operator|)
operator|.
name|setEnv
argument_list|(
literal|"LC_CTYPE"
argument_list|,
name|ctype
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|channel
operator|.
name|setOut
argument_list|(
operator|new
name|NoCloseOutputStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setErr
argument_list|(
operator|new
name|NoCloseOutputStream
argument_list|(
name|System
operator|.
name|err
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|open
argument_list|()
operator|.
name|verify
argument_list|()
expr_stmt|;
name|channel
operator|.
name|waitFor
argument_list|(
name|ClientChannel
operator|.
name|CLOSED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|put
argument_list|(
name|Session
operator|.
name|IGNORE_INTERRUPTS
argument_list|,
name|oldIgnoreInterrupts
argument_list|)
expr_stmt|;
name|sshSession
operator|.
name|close
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|int
name|getTermWidth
parameter_list|()
block|{
name|Terminal
name|term
init|=
name|session
operator|.
name|getTerminal
argument_list|()
decl_stmt|;
return|return
name|term
operator|!=
literal|null
condition|?
name|term
operator|.
name|getWidth
argument_list|()
else|:
literal|80
return|;
block|}
specifier|private
name|void
name|setupAgent
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|keyFile
parameter_list|,
name|SshClient
name|client
parameter_list|)
block|{
name|SshAgent
name|agent
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karaf.key"
argument_list|)
decl_stmt|;
name|agent
operator|=
name|startAgent
argument_list|(
name|user
argument_list|,
name|url
argument_list|,
name|keyFile
argument_list|)
expr_stmt|;
name|client
operator|.
name|setAgentFactory
argument_list|(
operator|new
name|LocalAgentFactory
argument_list|(
name|agent
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|SshAgent
name|startAgent
parameter_list|(
name|String
name|user
parameter_list|,
name|URL
name|privateKeyUrl
parameter_list|,
name|String
name|keyFile
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SshAgent
name|agent
init|=
operator|new
name|AgentImpl
argument_list|()
decl_stmt|;
name|is
operator|=
name|privateKeyUrl
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|ObjectInputStream
name|r
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
operator|(
name|KeyPair
operator|)
name|r
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|agent
operator|.
name|addIdentity
argument_list|(
name|keyPair
argument_list|,
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyFile
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|keyFiles
init|=
operator|new
name|String
index|[]
block|{
name|keyFile
block|}
decl_stmt|;
name|FileKeyPairProvider
name|fileKeyPairProvider
init|=
operator|new
name|FileKeyPairProvider
argument_list|(
name|keyFiles
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyPair
name|key
range|:
name|fileKeyPairProvider
operator|.
name|loadKeys
argument_list|()
control|)
block|{
name|agent
operator|.
name|addIdentity
argument_list|(
name|key
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|agent
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|close
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error starting ssh agent for: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|ClientSession
name|connectWithRetries
parameter_list|(
name|SshClient
name|client
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|maxAttempts
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|ClientSession
name|session
init|=
literal|null
decl_stmt|;
name|int
name|retries
init|=
literal|0
decl_stmt|;
do|do
block|{
name|ConnectFuture
name|future
init|=
name|client
operator|.
name|connect
argument_list|(
name|username
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|future
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
block|{
name|session
operator|=
name|future
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|retries
operator|++
operator|<
name|maxAttempts
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"retrying (attempt "
operator|+
name|retries
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
do|while
condition|(
name|session
operator|==
literal|null
condition|)
do|;
return|return
name|session
return|;
block|}
specifier|private
name|void
name|close
parameter_list|(
name|Closeable
name|is
parameter_list|)
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
end_class

end_unit

