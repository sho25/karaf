begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|ssl
operator|.
name|PEMUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|ssl
operator|.
name|PKCS8Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|keyprovider
operator|.
name|AbstractGeneratorHostKeyProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * Read SSH keys without resorting to BouncyCastle  */
end_comment

begin_class
specifier|public
class|class
name|OpenSSHGeneratorFileKeyProvider
extends|extends
name|AbstractGeneratorHostKeyProvider
block|{
specifier|private
name|String
name|password
decl_stmt|;
specifier|public
name|OpenSSHGeneratorFileKeyProvider
parameter_list|()
block|{     }
specifier|public
name|OpenSSHGeneratorFileKeyProvider
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|setPath
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OpenSSHGeneratorFileKeyProvider
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|setAlgorithm
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OpenSSHGeneratorFileKeyProvider
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|int
name|keySize
parameter_list|)
block|{
name|this
argument_list|(
name|path
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
name|setKeySize
argument_list|(
name|keySize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|KeyPair
name|doReadKeyPair
parameter_list|(
name|String
name|resourceKey
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|PKCS8Key
name|pkcs8
init|=
operator|new
name|PKCS8Key
argument_list|(
name|is
argument_list|,
name|password
operator|==
literal|null
condition|?
literal|null
else|:
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|KeyPair
argument_list|(
name|pkcs8
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|pkcs8
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doWriteKeyPair
parameter_list|(
name|String
name|resourceKey
parameter_list|,
name|KeyPair
name|kp
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|GeneralSecurityException
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|items
operator|.
name|add
argument_list|(
name|kp
operator|.
name|getPrivate
argument_list|()
argument_list|)
expr_stmt|;
name|items
operator|.
name|add
argument_list|(
name|kp
operator|.
name|getPublic
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|PEMUtil
operator|.
name|encode
argument_list|(
name|items
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

