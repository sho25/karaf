begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|X509EncodedKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|KnownHostsManager
block|{
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KnownHostsManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|File
name|knownHosts
decl_stmt|;
specifier|public
name|KnownHostsManager
parameter_list|(
name|File
name|knownHosts
parameter_list|)
block|{
name|this
operator|.
name|knownHosts
operator|=
name|knownHosts
expr_stmt|;
name|this
operator|.
name|knownHosts
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|knownHosts
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|knownHosts
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating file for known hosts at: "
operator|+
name|knownHosts
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|PublicKey
name|getKnownKey
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
name|String
name|checkAlgorithm
parameter_list|)
throws|throws
name|InvalidKeySpecException
block|{
name|FileReader
name|fr
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fr
operator|=
operator|new
name|FileReader
argument_list|(
name|knownHosts
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fr
argument_list|)
expr_stmt|;
return|return
name|getKnownKeyInternal
argument_list|(
name|remoteAddress
argument_list|,
name|checkAlgorithm
argument_list|,
name|reader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error reading known_hosts "
operator|+
name|knownHosts
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PublicKey
name|getKnownKeyInternal
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
name|String
name|checkAlgorithm
parameter_list|,
name|BufferedReader
name|reader
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
name|String
name|checkServerAddress
init|=
name|getAddressString
argument_list|(
name|remoteAddress
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|lineParts
init|=
name|line
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|String
name|serverAddress
init|=
name|lineParts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|algorithm
init|=
name|lineParts
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|checkServerAddress
operator|.
name|equals
argument_list|(
name|serverAddress
argument_list|)
operator|&&
name|checkAlgorithm
operator|.
name|equals
argument_list|(
name|algorithm
argument_list|)
condition|)
block|{
name|byte
index|[]
name|key
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|lineParts
index|[
literal|2
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
name|X509EncodedKeySpec
name|keySpec
init|=
operator|new
name|X509EncodedKeySpec
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|keySpec
argument_list|)
return|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|storeKeyForHost
parameter_list|(
name|SocketAddress
name|remoteAddress
parameter_list|,
name|PublicKey
name|serverKey
parameter_list|)
block|{
name|FileWriter
name|ps
init|=
literal|null
decl_stmt|;
name|BufferedWriter
name|bw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ps
operator|=
operator|new
name|FileWriter
argument_list|(
name|knownHosts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bw
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|writeKey
argument_list|(
name|bw
argument_list|,
name|remoteAddress
argument_list|,
name|serverKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error storing key for host"
operator|+
name|remoteAddress
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|bw
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeKey
parameter_list|(
name|BufferedWriter
name|bw
parameter_list|,
name|SocketAddress
name|remoteAddress
parameter_list|,
name|PublicKey
name|serverKey
parameter_list|)
throws|throws
name|IOException
block|{
name|bw
operator|.
name|append
argument_list|(
name|getAddressString
argument_list|(
name|remoteAddress
argument_list|)
argument_list|)
expr_stmt|;
name|bw
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|bw
operator|.
name|append
argument_list|(
name|serverKey
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|bw
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|serverKey
operator|.
name|getEncoded
argument_list|()
expr_stmt|;
name|bw
operator|.
name|append
argument_list|(
operator|new
name|String
argument_list|(
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|serverKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|getAddressString
parameter_list|(
name|SocketAddress
name|address
parameter_list|)
block|{
if|if
condition|(
name|address
operator|instanceof
name|InetSocketAddress
condition|)
block|{
name|InetSocketAddress
name|inetAddress
init|=
operator|(
name|InetSocketAddress
operator|)
name|address
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s,%s:%s"
argument_list|,
name|inetAddress
operator|.
name|getHostName
argument_list|()
argument_list|,
name|inetAddress
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
argument_list|,
name|inetAddress
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|private
name|void
name|close
parameter_list|(
name|Closeable
name|closeable
parameter_list|)
block|{
if|if
condition|(
name|closeable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

