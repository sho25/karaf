begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
operator|.
name|keygenerator
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPairGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|cipher
operator|.
name|ECCurves
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|config
operator|.
name|keys
operator|.
name|KeyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|security
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|OpenSSHKeyPairGenerator
block|{
specifier|private
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|keySize
decl_stmt|;
specifier|private
name|String
name|algorithm
decl_stmt|;
specifier|public
name|OpenSSHKeyPairGenerator
parameter_list|(
name|String
name|algorithm
parameter_list|,
name|int
name|keySize
parameter_list|)
block|{
name|this
operator|.
name|algorithm
operator|=
name|algorithm
expr_stmt|;
name|this
operator|.
name|keySize
operator|=
name|keySize
expr_stmt|;
block|}
specifier|public
name|KeyPair
name|generate
parameter_list|()
throws|throws
name|GeneralSecurityException
block|{
name|KeyPairGenerator
name|generator
init|=
name|SecurityUtils
operator|.
name|getKeyPairGenerator
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
if|if
condition|(
name|keySize
operator|!=
literal|0
condition|)
block|{
name|generator
operator|.
name|initialize
argument_list|(
name|keySize
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"generateKeyPair("
operator|+
name|algorithm
operator|+
literal|") generating host key - size="
operator|+
name|keySize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|KeyUtils
operator|.
name|EC_ALGORITHM
operator|.
name|equals
argument_list|(
name|algorithm
argument_list|)
condition|)
block|{
comment|// If left to our own devices choose the biggest key size possible
name|int
name|numCurves
init|=
name|ECCurves
operator|.
name|SORTED_KEY_SIZE
operator|.
name|size
argument_list|()
decl_stmt|;
name|ECCurves
name|curve
init|=
name|ECCurves
operator|.
name|SORTED_KEY_SIZE
operator|.
name|get
argument_list|(
name|numCurves
operator|-
literal|1
argument_list|)
decl_stmt|;
name|generator
operator|.
name|initialize
argument_list|(
name|curve
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|generator
operator|.
name|generateKeyPair
argument_list|()
return|;
block|}
block|}
end_class

end_unit

