begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|SshAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|SshAgentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|SshAgentServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|common
operator|.
name|AgentDelegate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|AgentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|AgentServerProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|agent
operator|.
name|local
operator|.
name|LocalAgentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|FactoryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|NamedFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|session
operator|.
name|ConnectionService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|session
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|session
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|KarafAgentFactory
implements|implements
name|SshAgentFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KarafAgentFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|AgentServerProxy
argument_list|>
name|proxies
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SshAgent
argument_list|>
name|locals
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|NamedFactory
argument_list|<
name|Channel
argument_list|>
argument_list|>
name|getChannelForwardingFactories
parameter_list|(
name|FactoryManager
name|factoryManager
parameter_list|)
block|{
return|return
name|LocalAgentFactory
operator|.
name|DEFAULT_FORWARDING_CHANNELS
return|;
block|}
specifier|public
name|SshAgent
name|createClient
parameter_list|(
name|FactoryManager
name|manager
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|proxyId
init|=
operator|(
name|String
operator|)
name|manager
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No "
operator|+
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
operator|+
literal|" environment variable set"
argument_list|)
throw|;
block|}
name|AgentServerProxy
name|proxy
init|=
name|proxies
operator|.
name|get
argument_list|(
name|proxyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
return|return
name|proxy
operator|.
name|createClient
argument_list|()
return|;
block|}
name|SshAgent
name|agent
init|=
name|locals
operator|.
name|get
argument_list|(
name|proxyId
argument_list|)
decl_stmt|;
if|if
condition|(
name|agent
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AgentDelegate
argument_list|(
name|agent
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No ssh agent found"
argument_list|)
throw|;
block|}
specifier|public
name|SshAgentServer
name|createServer
parameter_list|(
name|ConnectionService
name|service
parameter_list|)
throws|throws
name|IOException
block|{
name|Session
name|session
init|=
name|service
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|session
operator|instanceof
name|ServerSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The session used to create an agent server proxy must be a server session"
argument_list|)
throw|;
block|}
specifier|final
name|AgentServerProxy
name|proxy
init|=
operator|new
name|AgentServerProxy
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|proxies
operator|.
name|put
argument_list|(
name|proxy
operator|.
name|getId
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
operator|new
name|SshAgentServer
argument_list|()
block|{
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|proxy
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|proxy
operator|.
name|isOpen
argument_list|()
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|proxies
operator|.
name|remove
argument_list|(
name|proxy
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|void
name|registerSession
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
name|session
parameter_list|)
block|{
try|try
block|{
name|String
name|user
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|get
argument_list|(
literal|"USER"
argument_list|)
decl_stmt|;
name|SshAgent
name|agent
init|=
operator|new
name|AgentImpl
argument_list|()
decl_stmt|;
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"karaf.key"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|ObjectInputStream
name|r
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|KeyPair
name|keyPair
init|=
operator|(
name|KeyPair
operator|)
name|r
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|agent
operator|.
name|addIdentity
argument_list|(
name|keyPair
argument_list|,
literal|"karaf"
argument_list|)
expr_stmt|;
name|String
name|agentId
init|=
literal|"local:"
operator|+
name|user
decl_stmt|;
name|session
operator|.
name|put
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|,
name|agentId
argument_list|)
expr_stmt|;
name|locals
operator|.
name|put
argument_list|(
name|agentId
argument_list|,
name|agent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error starting ssh agent for local console"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregisterSession
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
name|session
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|get
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|agentId
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|get
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|)
decl_stmt|;
name|session
operator|.
name|put
argument_list|(
name|SshAgent
operator|.
name|SSH_AUTHSOCKET_ENV_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|agentId
operator|!=
literal|null
condition|)
block|{
name|locals
operator|.
name|remove
argument_list|(
name|agentId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error stopping ssh agent for local console"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

