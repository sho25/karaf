begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
operator|.
name|keygenerator
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|ssl
operator|.
name|PKCS8Key
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|AbstractKeyPairProvider
import|;
end_import

begin_class
specifier|public
class|class
name|OpenSSHKeyPairProvider
extends|extends
name|AbstractKeyPairProvider
block|{
specifier|private
name|File
name|keyFile
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|KeyPair
name|cachedKey
decl_stmt|;
specifier|public
name|OpenSSHKeyPairProvider
parameter_list|(
name|File
name|keyFile
parameter_list|)
block|{
name|this
operator|.
name|keyFile
operator|=
name|keyFile
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|KeyPair
argument_list|>
name|loadKeys
parameter_list|()
block|{
if|if
condition|(
name|cachedKey
operator|!=
literal|null
condition|)
block|{
return|return
name|singleton
argument_list|(
name|cachedKey
argument_list|)
return|;
block|}
try|try
init|(
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|keyFile
argument_list|)
init|)
block|{
name|KeyPair
name|kp
init|=
name|getKeyPair
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|cachedKey
operator|=
name|kp
expr_stmt|;
return|return
name|singleton
argument_list|(
name|kp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|KeyPair
name|getKeyPair
parameter_list|(
name|FileInputStream
name|is
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|PKCS8Key
name|pkcs8
init|=
operator|new
name|PKCS8Key
argument_list|(
name|is
argument_list|,
name|password
operator|==
literal|null
condition|?
literal|null
else|:
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|KeyPair
name|kp
init|=
operator|new
name|KeyPair
argument_list|(
name|pkcs8
operator|.
name|getPublicKey
argument_list|()
argument_list|,
name|pkcs8
operator|.
name|getPrivateKey
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|kp
return|;
block|}
block|}
end_class

end_unit

