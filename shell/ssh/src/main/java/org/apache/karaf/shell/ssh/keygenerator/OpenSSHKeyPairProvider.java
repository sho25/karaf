begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
operator|.
name|keygenerator
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InvalidClassException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivateKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|PKCS8EncodedKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|X509EncodedKeySpec
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|AbstractKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|OpenSSHKeyPairProvider
extends|extends
name|AbstractKeyPairProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenSSHKeyPairProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Path
name|privateKeyPath
decl_stmt|;
specifier|private
name|Path
name|publicKeyPath
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|KeyPair
name|cachedKey
decl_stmt|;
specifier|private
name|String
name|algorithm
decl_stmt|;
specifier|private
name|int
name|keySize
decl_stmt|;
specifier|public
name|OpenSSHKeyPairProvider
parameter_list|(
name|Path
name|privateKeyPath
parameter_list|,
name|Path
name|publicKeyPath
parameter_list|,
name|String
name|algorithm
parameter_list|,
name|int
name|keySize
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|privateKeyPath
operator|=
name|privateKeyPath
expr_stmt|;
name|this
operator|.
name|publicKeyPath
operator|=
name|publicKeyPath
expr_stmt|;
name|this
operator|.
name|algorithm
operator|=
name|algorithm
expr_stmt|;
name|this
operator|.
name|keySize
operator|=
name|keySize
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Iterable
argument_list|<
name|KeyPair
argument_list|>
name|loadKeys
parameter_list|()
block|{
if|if
condition|(
name|cachedKey
operator|!=
literal|null
condition|)
block|{
return|return
name|singleton
argument_list|(
name|cachedKey
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
name|privateKeyPath
operator|.
name|toFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
name|createServerKey
argument_list|()
expr_stmt|;
block|}
comment|// 1. Try to read the PKCS8 private key. If it is RSA or DSA we can infer the public key directly from the
comment|// private key, so there is no need to load the public key.
try|try
init|(
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|privateKeyPath
argument_list|)
init|)
block|{
name|KeyPair
name|kp
init|=
name|KeyPairLoader
operator|.
name|getKeyPair
argument_list|(
name|is
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|cachedKey
operator|=
name|kp
expr_stmt|;
return|return
name|singleton
argument_list|(
name|kp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// 2. Failed to parse PKCS8 private key. Try to parse it directly and use the public key to create a KeyPair
comment|// This is what will happen if it is an elliptic curve key for example
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Failed to parse keypair in {}. Attempting to parse it 'directly'"
argument_list|,
name|privateKeyPath
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyPair
name|kp
init|=
name|getKeyPairUsingPublicKeyFile
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully loaded key pair"
argument_list|)
expr_stmt|;
name|cachedKey
operator|=
name|kp
expr_stmt|;
return|return
name|singleton
argument_list|(
name|cachedKey
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|NoSuchAlgorithmException
decl||
name|InvalidKeySpecException
decl||
name|IllegalArgumentException
name|e1
parameter_list|)
block|{
comment|// 3. On a failure, see if we are dealing with a "legacy" keypair.
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Failed to parse keypair in {}. Attempting to parse it as a legacy 'simple' key"
argument_list|,
name|privateKeyPath
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyPair
name|kp
init|=
name|convertLegacyKey
argument_list|(
name|privateKeyPath
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Successfully loaded legacy simple key. Converted to PEM format"
argument_list|)
expr_stmt|;
name|cachedKey
operator|=
name|kp
expr_stmt|;
return|return
name|singleton
argument_list|(
name|kp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|nested
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|privateKeyPath
operator|+
literal|" is not a 'simple' key either"
argument_list|,
name|nested
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|KeyPair
name|convertLegacyKey
parameter_list|(
name|Path
name|privateKeyPath
parameter_list|)
throws|throws
name|GeneralSecurityException
throws|,
name|IOException
block|{
name|KeyPair
name|keypair
init|=
literal|null
decl_stmt|;
try|try
init|(
name|ObjectInputStream
name|r
init|=
operator|new
name|KeyPairObjectInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|privateKeyPath
argument_list|)
argument_list|)
init|)
block|{
name|keypair
operator|=
operator|(
name|KeyPair
operator|)
name|r
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidKeySpecException
argument_list|(
literal|"Missing classes: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
operator|new
name|PemWriter
argument_list|(
name|privateKeyPath
argument_list|,
name|publicKeyPath
argument_list|)
operator|.
name|writeKeyPair
argument_list|(
name|algorithm
argument_list|,
name|keypair
argument_list|)
expr_stmt|;
return|return
name|keypair
return|;
block|}
specifier|private
name|KeyPair
name|getKeyPairUsingPublicKeyFile
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
block|{
name|KeyFactory
name|keyFactory
init|=
name|KeyFactory
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
comment|// Read private key
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|privateKeyPath
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|content
operator|=
name|content
operator|.
name|replace
argument_list|(
literal|"-----BEGIN PRIVATE KEY-----"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replace
argument_list|(
literal|"-----END PRIVATE KEY-----"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|PKCS8EncodedKeySpec
name|encodedKeySpec
init|=
operator|new
name|PKCS8EncodedKeySpec
argument_list|(
name|Base64
operator|.
name|getMimeDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|PrivateKey
name|privateKey
init|=
name|keyFactory
operator|.
name|generatePrivate
argument_list|(
name|encodedKeySpec
argument_list|)
decl_stmt|;
comment|// Read public key
name|content
operator|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|publicKeyPath
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replace
argument_list|(
literal|"-----BEGIN PUBLIC KEY-----"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|content
operator|=
name|content
operator|.
name|replace
argument_list|(
literal|"-----END PUBLIC KEY-----"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|X509EncodedKeySpec
name|encodedX509KeySpec
init|=
operator|new
name|X509EncodedKeySpec
argument_list|(
name|Base64
operator|.
name|getMimeDecoder
argument_list|()
operator|.
name|decode
argument_list|(
name|content
argument_list|)
argument_list|)
decl_stmt|;
name|PublicKey
name|publicKey
init|=
name|keyFactory
operator|.
name|generatePublic
argument_list|(
name|encodedX509KeySpec
argument_list|)
decl_stmt|;
return|return
operator|new
name|KeyPair
argument_list|(
name|publicKey
argument_list|,
name|privateKey
argument_list|)
return|;
block|}
specifier|private
name|KeyPair
name|createServerKey
parameter_list|()
block|{
try|try
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creating ssh server private key at "
operator|+
name|privateKeyPath
argument_list|)
expr_stmt|;
name|KeyPair
name|kp
init|=
operator|new
name|OpenSSHKeyPairGenerator
argument_list|(
name|algorithm
argument_list|,
name|keySize
argument_list|)
operator|.
name|generate
argument_list|()
decl_stmt|;
operator|new
name|PemWriter
argument_list|(
name|privateKeyPath
argument_list|,
name|publicKeyPath
argument_list|)
operator|.
name|writeKeyPair
argument_list|(
name|algorithm
argument_list|,
name|kp
argument_list|)
expr_stmt|;
return|return
name|kp
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Key file generation failed"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Check the first Object that is resolved is a KeyPair instance      */
specifier|private
specifier|static
class|class
name|KeyPairObjectInputStream
extends|extends
name|ObjectInputStream
block|{
specifier|private
name|boolean
name|valid
decl_stmt|;
specifier|public
name|KeyPairObjectInputStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|resolveClass
parameter_list|(
name|ObjectStreamClass
name|desc
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
if|if
condition|(
operator|!
name|valid
condition|)
block|{
if|if
condition|(
operator|!
name|desc
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|KeyPair
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidClassException
argument_list|(
literal|"Unauthorized deserialization attempt"
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|valid
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|super
operator|.
name|resolveClass
argument_list|(
name|desc
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

