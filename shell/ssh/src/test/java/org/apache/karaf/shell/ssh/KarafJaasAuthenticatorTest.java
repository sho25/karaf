begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|DummySession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|io
operator|.
name|mina
operator|.
name|MinaConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|io
operator|.
name|mina
operator|.
name|MinaSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|random
operator|.
name|SingletonRandomFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|security
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|SshServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|session
operator|.
name|ServerSessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|KarafJaasAuthenticatorTest
block|{
specifier|private
name|Configuration
name|configuration
decl_stmt|;
specifier|private
name|ServerSessionImpl
name|session
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|=
name|Configuration
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|setConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|SayYes
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|SshServer
name|server
init|=
operator|new
name|SshServer
argument_list|()
decl_stmt|;
name|server
operator|.
name|setRandomFactory
argument_list|(
operator|new
name|SingletonRandomFactory
argument_list|(
name|SecurityUtils
operator|.
name|getRandomFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|session
operator|=
operator|new
name|ServerSessionImpl
argument_list|(
name|server
argument_list|,
operator|new
name|MinaSession
argument_list|(
operator|new
name|MinaConnector
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|DummySession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|Configuration
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|authenticateOk
parameter_list|()
block|{
specifier|final
name|KarafJaasAuthenticator
name|authenticator
init|=
operator|new
name|KarafJaasAuthenticator
argument_list|(
literal|"karaf"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|RolePrincipal
operator|.
name|class
block|}
block|)
function|;
name|assertTrue
argument_list|(
name|authenticator
operator|.
name|authenticate
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
annotation|@
name|Test
specifier|public
name|void
name|authenticateKo
parameter_list|()
block|{
specifier|final
name|KarafJaasAuthenticator
name|authenticator
init|=
operator|new
name|KarafJaasAuthenticator
argument_list|(
literal|"karaf"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|RolePrincipal
operator|.
name|class
block|}
block|)
function|;
end_function

begin_expr_stmt
name|assertFalse
argument_list|(
name|authenticator
operator|.
name|authenticate
argument_list|(
literal|"testko"
argument_list|,
literal|"test"
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|invalidRole
parameter_list|()
block|{
specifier|final
name|KarafJaasAuthenticator
name|authenticator
init|=
operator|new
name|KarafJaasAuthenticator
argument_list|(
literal|"karaf"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|RolePrincipal
operator|.
name|class
block|}
block|)
function|;
end_function

begin_expr_stmt
name|assertFalse
argument_list|(
name|authenticator
operator|.
name|authenticate
argument_list|(
literal|"customRole"
argument_list|,
literal|"test"
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|noRole
parameter_list|()
block|{
specifier|final
name|KarafJaasAuthenticator
name|authenticator
init|=
operator|new
name|KarafJaasAuthenticator
argument_list|(
literal|"karaf"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|authenticator
operator|.
name|authenticate
argument_list|(
literal|"norole"
argument_list|,
literal|"test"
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|customRole
parameter_list|()
block|{
specifier|final
name|KarafJaasAuthenticator
name|authenticator
init|=
operator|new
name|KarafJaasAuthenticator
argument_list|(
literal|"karaf"
argument_list|,
literal|"test"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|UserPrincipal
operator|.
name|class
block|}
block|)
function|;
end_function

begin_expr_stmt
name|assertTrue
argument_list|(
name|authenticator
operator|.
name|authenticate
argument_list|(
literal|"customRole"
argument_list|,
literal|"test"
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_class
unit|}      public
specifier|static
class|class
name|SayYes
implements|implements
name|LoginModule
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Subject
name|subject
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|Subject
name|subject
parameter_list|,
specifier|final
name|CallbackHandler
name|callbackHandler
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
specifier|final
name|NameCallback
name|nameCallback
init|=
operator|new
name|NameCallback
argument_list|(
literal|"name?"
argument_list|)
decl_stmt|;
try|try
block|{
name|callbackHandler
operator|.
name|handle
argument_list|(
operator|new
name|Callback
index|[]
block|{
name|nameCallback
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|UnsupportedCallbackException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|nameCallback
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
block|{
return|return
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|"ko"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
block|{
switch|switch
condition|(
name|name
condition|)
block|{
case|case
literal|"norole"
case|:
break|break;
case|case
literal|"customRole"
case|:
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|UserPrincipal
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"test"
case|:
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipal
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|abort
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|logout
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

unit|}
end_unit

