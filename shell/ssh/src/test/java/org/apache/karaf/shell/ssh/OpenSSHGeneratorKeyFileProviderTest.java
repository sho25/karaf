begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyPair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPrivateCrtKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|interfaces
operator|.
name|RSAPublicKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OpenSSHGeneratorKeyFileProviderTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|readSshKey
parameter_list|()
throws|throws
name|Exception
block|{
name|OpenSSHGeneratorFileKeyProvider
name|prov
init|=
operator|new
name|OpenSSHGeneratorFileKeyProvider
argument_list|(
literal|"src/test/resources/org/apache/karaf/shell/ssh/test.pem"
argument_list|)
decl_stmt|;
name|prov
operator|.
name|setOverwriteAllowed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|KeyPair
name|keys
init|=
name|prov
operator|.
name|loadKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// how would we tell if they read 'correctly'? Well, the base class will throw if the key isn't reasonable.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Loaded key is not RSA Key"
argument_list|,
name|keys
operator|.
name|getPublic
argument_list|()
operator|instanceof
name|RSAPublicKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|65537
argument_list|,
operator|(
operator|(
name|RSAPublicKey
operator|)
name|keys
operator|.
name|getPublic
argument_list|()
operator|)
operator|.
name|getPublicExponent
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|writeSshKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a temporary file
name|File
name|temp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|".pem"
argument_list|)
decl_stmt|;
name|temp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|OpenSSHGeneratorFileKeyProvider
name|prov
init|=
operator|new
name|OpenSSHGeneratorFileKeyProvider
argument_list|(
name|temp
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"RSA"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|KeyPair
name|keys
init|=
name|prov
operator|.
name|loadKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|temp
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|temp
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|BigInteger
name|privateExponent
init|=
operator|(
operator|(
name|RSAPrivateCrtKey
operator|)
name|keys
operator|.
name|getPrivate
argument_list|()
operator|)
operator|.
name|getPrivateExponent
argument_list|()
decl_stmt|;
comment|// read and check if correctly read
name|prov
operator|=
operator|new
name|OpenSSHGeneratorFileKeyProvider
argument_list|(
name|temp
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|=
name|prov
operator|.
name|loadKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Loaded key is not RSA Key"
argument_list|,
name|keys
operator|.
name|getPrivate
argument_list|()
operator|instanceof
name|RSAPrivateCrtKey
argument_list|)
expr_stmt|;
name|BigInteger
name|privateExponent2
init|=
operator|(
operator|(
name|RSAPrivateCrtKey
operator|)
name|keys
operator|.
name|getPrivate
argument_list|()
operator|)
operator|.
name|getPrivateExponent
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|privateExponent
argument_list|,
name|privateExponent2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

