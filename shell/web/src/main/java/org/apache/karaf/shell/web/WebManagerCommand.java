begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|web
operator|.
name|service
operator|.
name|spi
operator|.
name|WarManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|web
operator|.
name|service
operator|.
name|spi
operator|.
name|WebEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|WebManagerCommand
extends|extends
name|OsgiCommandSupport
block|{
name|WebEventHandler
name|eventHandler
decl_stmt|;
specifier|private
name|WarManager
name|warManager
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"ids"
argument_list|,
name|description
operator|=
literal|"The list of bundle IDs separated by whitespaces"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|Long
argument_list|>
name|ids
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|ids
operator|!=
literal|null
operator|&&
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|long
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|eventHandler
operator|.
name|getBundleEvents
argument_list|()
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|WebEvent
name|webEvent
init|=
name|eventHandler
operator|.
name|getBundleEvents
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|Bundle
name|bundle
init|=
name|webEvent
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle ID"
operator|+
name|id
operator|+
literal|" is invalid"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ids
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|doExecute
argument_list|(
name|ids
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/** 	 * @param eventHandler the eventHandler to set 	 */
specifier|public
name|void
name|setEventHandler
parameter_list|(
name|WebEventHandler
name|eventHandler
parameter_list|)
block|{
name|this
operator|.
name|eventHandler
operator|=
name|eventHandler
expr_stmt|;
block|}
comment|/** 	 * @return the eventHandler 	 */
specifier|public
name|WebEventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|eventHandler
return|;
block|}
specifier|abstract
name|void
name|doExecute
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|bundles
parameter_list|)
throws|throws
name|Exception
function_decl|;
comment|/** 	 * @param warManager the warManager to set 	 */
specifier|public
name|void
name|setWarManager
parameter_list|(
name|WarManager
name|warManager
parameter_list|)
block|{
name|this
operator|.
name|warManager
operator|=
name|warManager
expr_stmt|;
block|}
comment|/** 	 * @return the warManager 	 */
specifier|public
name|WarManager
name|getWarManager
parameter_list|()
block|{
return|return
name|warManager
return|;
block|}
block|}
end_class

end_unit

