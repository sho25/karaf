begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|CommandWithAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|basic
operator|.
name|AbstractCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|CompletableFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Wraps an Action as a command using a template for the action injects  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|ActionCommand
extends|extends
name|AbstractCommand
implements|implements
name|CompletableFunction
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActionCommand
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Action
name|actionTemplate
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Completer
argument_list|>
name|completers
init|=
operator|new
name|ArrayList
argument_list|<
name|Completer
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ActionCommand
parameter_list|(
name|Action
name|actionTemplate
parameter_list|)
block|{
name|this
operator|.
name|actionTemplate
operator|=
name|actionTemplate
expr_stmt|;
name|addCompleters
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|registerService
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|actionClass
init|=
name|actionTemplate
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Command
name|cmd
init|=
name|actionClass
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Action class "
operator|+
name|actionClass
operator|+
literal|" is not annotated with @Command"
argument_list|)
throw|;
block|}
name|String
index|[]
name|interfaces
init|=
operator|new
name|String
index|[]
block|{
name|Function
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|CommandWithAction
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|AbstractCommand
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|,
name|cmd
operator|.
name|scope
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|,
name|cmd
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Registering command "
operator|+
name|cmd
operator|.
name|scope
argument_list|()
operator|+
literal|":"
operator|+
name|cmd
operator|.
name|name
argument_list|()
operator|+
literal|" in the name of bundle "
operator|+
name|context
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|context
operator|.
name|registerService
argument_list|(
name|interfaces
argument_list|,
name|this
argument_list|,
name|props
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Action
argument_list|>
name|getActionClass
parameter_list|()
block|{
return|return
name|actionTemplate
operator|.
name|getClass
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Action
name|createNewAction
parameter_list|()
block|{
try|try
block|{
name|Action
name|newAction
init|=
name|actionTemplate
operator|.
name|getClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|copyFields
argument_list|(
name|newAction
argument_list|)
expr_stmt|;
return|return
name|newAction
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Completer
argument_list|>
name|getCompleters
parameter_list|()
block|{
return|return
name|completers
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Completer
argument_list|>
name|getOptionalCompleters
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|copyFields
parameter_list|(
name|Action
name|newAction
parameter_list|)
block|{
name|Field
index|[]
name|fields
init|=
name|actionTemplate
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|isAccessible
argument_list|()
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Object
name|value
init|=
name|field
operator|.
name|get
argument_list|(
name|actionTemplate
argument_list|)
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|newAction
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|addCompleters
parameter_list|()
block|{
for|for
control|(
name|Field
name|field
range|:
name|actionTemplate
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|Completer
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|field
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|field
operator|.
name|isAccessible
argument_list|()
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|completers
operator|.
name|add
argument_list|(
operator|(
name|Completer
operator|)
name|field
operator|.
name|get
argument_list|(
name|actionTemplate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error setting completer from field "
operator|+
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

