begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|exporter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tracks services that implement {@link org.apache.felix.gogo.commands.Action},  * wraps each into an ActionCommand  * and exports the command as a service in the name of the bundle exporting the Action  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|final
class|class
name|ActionTracker
extends|extends
name|ServiceTracker
argument_list|<
name|Action
argument_list|,
name|Action
argument_list|>
block|{
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Map
argument_list|<
name|ServiceReference
argument_list|,
name|ServiceRegistration
argument_list|>
name|registrations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ServiceReference
argument_list|,
name|ServiceRegistration
argument_list|>
argument_list|()
decl_stmt|;
name|ActionTracker
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Class
argument_list|<
name|Action
argument_list|>
name|clazz
parameter_list|,
name|ServiceTrackerCustomizer
argument_list|<
name|Action
argument_list|,
name|Action
argument_list|>
name|customizer
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|clazz
argument_list|,
name|customizer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Action
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|Action
argument_list|>
name|reference
parameter_list|)
block|{
if|if
condition|(
operator|!
name|registrations
operator|.
name|containsKey
argument_list|(
name|reference
argument_list|)
condition|)
block|{
name|Bundle
name|userBundle
init|=
name|reference
operator|.
name|getBundle
argument_list|()
decl_stmt|;
try|try
block|{
name|BundleContext
name|context
init|=
name|userBundle
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|ActionCommand
name|command
init|=
operator|new
name|ActionCommand
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
argument_list|)
decl_stmt|;
name|registrations
operator|.
name|put
argument_list|(
name|reference
argument_list|,
name|command
operator|.
name|registerService
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error exporting action as command from service of bundle "
operator|+
name|userBundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"["
operator|+
name|userBundle
operator|.
name|getBundleId
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|addingService
argument_list|(
name|reference
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|Action
argument_list|>
name|reference
parameter_list|,
name|Action
name|service
parameter_list|)
block|{
if|if
condition|(
name|registrations
operator|.
name|containsKey
argument_list|(
name|reference
argument_list|)
condition|)
block|{
try|try
block|{
name|registrations
operator|.
name|remove
argument_list|(
name|reference
argument_list|)
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore .. might already be unregistered if exporting bundle stopped
block|}
block|}
name|super
operator|.
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|ServiceRegistration
argument_list|<
name|?
argument_list|>
name|reg
range|:
name|registrations
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore .. might already be unregistered if exporting bundle stopped
block|}
block|}
name|registrations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

