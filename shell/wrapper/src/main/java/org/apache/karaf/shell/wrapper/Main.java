begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|ShutdownCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tanukisoftware
operator|.
name|wrapper
operator|.
name|WrapperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tanukisoftware
operator|.
name|wrapper
operator|.
name|WrapperManager
import|;
end_import

begin_comment
comment|/**  * Java Service Wrapper Main class  */
end_comment

begin_class
specifier|public
class|class
name|Main
extends|extends
name|Thread
implements|implements
name|WrapperListener
implements|,
name|ShutdownCallback
block|{
specifier|private
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|Main
name|main
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|destroying
decl_stmt|;
comment|/*---------------------------------------------------------------      * Constructors      *-------------------------------------------------------------*/
specifier|private
name|Main
parameter_list|()
block|{     }
comment|/*---------------------------------------------------------------      * WrapperListener Methods      *-------------------------------------------------------------*/
comment|/**      * The start method is called when the WrapperManager is signaled by the      *    native Wrapper code that it can start its application.  This      *    method call is expected to return, so a new thread should be launched      *    if necessary.      *      * @param args List of arguments used to initialize the application.      *      * @return Any error code if the application should exit on completion      *         of the start method.  If there were no problems then this      *         method should return null.      */
specifier|public
name|Integer
name|start
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|main
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|Main
argument_list|(
name|args
argument_list|)
expr_stmt|;
try|try
block|{
name|main
operator|.
name|launch
argument_list|()
expr_stmt|;
name|main
operator|.
name|setShutdownCallback
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not create framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|main
operator|.
name|awaitShutdown
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|destroying
condition|)
block|{
name|WrapperManager
operator|.
name|stop
argument_list|(
name|main
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
comment|/**      * Called when the application is shutting down.  The Wrapper assumes that      *  this method will return fairly quickly.  If the shutdown code code      *  could potentially take a long time, then WrapperManager.signalStopping()      *  should be called to extend the timeout period.  If for some reason,      *  the stop method can not return, then it must call      *  WrapperManager.stopped() to avoid warning messages from the Wrapper.      *      * @param exitCode The suggested exit code that will be returned to the OS      *                 when the JVM exits.      *      * @return The exit code to actually return to the OS.  In most cases, this      *         should just be the value of exitCode, however the user code has      *         the option of changing the exit code if there are any problems      *         during shutdown.      */
specifier|public
name|int
name|stop
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
try|try
block|{
name|destroying
operator|=
literal|true
expr_stmt|;
name|main
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error occured shutting down framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
operator|-
literal|2
return|;
block|}
return|return
name|main
operator|.
name|getExitCode
argument_list|()
return|;
block|}
comment|/**      * Call-back method is called by the @{link org.apache.karaf.main.Main} for Signaling       * that the stopping process is in progress and the wrapper doesn't kill the JVM.        */
specifier|public
name|void
name|waitingForShutdown
parameter_list|(
name|int
name|delay
parameter_list|)
block|{
name|WrapperManager
operator|.
name|signalStopping
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called whenever the native Wrapper code traps a system control signal      *  against the Java process.  It is up to the callback to take any actions      *  necessary.  Possible values are: WrapperManager.WRAPPER_CTRL_C_EVENT,      *    WRAPPER_CTRL_CLOSE_EVENT, WRAPPER_CTRL_LOGOFF_EVENT, or      *    WRAPPER_CTRL_SHUTDOWN_EVENT      *      * @param event The system control signal.      */
specifier|public
name|void
name|controlEvent
parameter_list|(
name|int
name|event
parameter_list|)
block|{
if|if
condition|(
operator|(
name|event
operator|==
name|WrapperManager
operator|.
name|WRAPPER_CTRL_LOGOFF_EVENT
operator|)
operator|&&
operator|(
name|WrapperManager
operator|.
name|isLaunchedAsService
argument_list|()
operator|)
condition|)
block|{
comment|// Ignore
block|}
else|else
block|{
name|WrapperManager
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Will not get here.
block|}
block|}
comment|/*---------------------------------------------------------------      * Main Method      *-------------------------------------------------------------*/
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// Start the application.  If the JVM was launched from the native
comment|//  Wrapper then the application will wait for the native Wrapper to
comment|//  call the application's start method.  Otherwise the start method
comment|//  will be called immediately.
name|WrapperManager
operator|.
name|start
argument_list|(
operator|new
name|Main
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

