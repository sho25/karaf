begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|shell
operator|.
name|wrapper
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|//
end_comment

begin_comment
comment|// Based on Apache Ant 1.6.5
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/**  * Copies standard output and error of children streams to standard output and error of the parent.  *  * @version $Rev: 705608 $ $Date: 2008-10-17 15:28:45 +0200 (Fri, 17 Oct 2008) $  */
end_comment

begin_class
specifier|public
class|class
name|PumpStreamHandler
block|{
specifier|private
name|InputStream
name|in
decl_stmt|;
specifier|private
name|OutputStream
name|out
decl_stmt|;
specifier|private
name|OutputStream
name|err
decl_stmt|;
specifier|private
name|Thread
name|outputThread
decl_stmt|;
specifier|private
name|Thread
name|errorThread
decl_stmt|;
specifier|private
name|StreamPumper
name|inputPump
decl_stmt|;
comment|//
comment|// NOTE: May want to use a ThreadPool here, 3 threads per/pair seems kinda expensive :-(
comment|//
specifier|public
name|PumpStreamHandler
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|,
specifier|final
name|OutputStream
name|err
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
assert|assert
name|out
operator|!=
literal|null
assert|;
assert|assert
name|err
operator|!=
literal|null
assert|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|err
operator|=
name|err
expr_stmt|;
block|}
specifier|public
name|PumpStreamHandler
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|,
specifier|final
name|OutputStream
name|err
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PumpStreamHandler
parameter_list|(
specifier|final
name|OutputStream
name|outAndErr
parameter_list|)
block|{
name|this
argument_list|(
name|outAndErr
argument_list|,
name|outAndErr
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the input stream from which to read the standard output of the child.      */
specifier|public
name|void
name|setChildOutputStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
name|createChildOutputPump
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the input stream from which to read the standard error of the child.      */
specifier|public
name|void
name|setChildErrorStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|createChildErrorPump
argument_list|(
name|in
argument_list|,
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set the output stream by means of which input can be sent to the child.      */
specifier|public
name|void
name|setChildInputStream
parameter_list|(
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
assert|assert
name|out
operator|!=
literal|null
assert|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|inputPump
operator|=
name|createInputPump
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{ }
block|}
block|}
comment|/**      * Attach to a child streams from the given process.      *      * @param p     The process to attach to.      */
specifier|public
name|void
name|attach
parameter_list|(
specifier|final
name|Process
name|p
parameter_list|)
block|{
assert|assert
name|p
operator|!=
literal|null
assert|;
name|setChildInputStream
argument_list|(
name|p
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|setChildOutputStream
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|setChildErrorStream
argument_list|(
name|p
operator|.
name|getErrorStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Start pumping the streams.      */
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|outputThread
operator|!=
literal|null
condition|)
block|{
name|outputThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|errorThread
operator|!=
literal|null
condition|)
block|{
name|errorThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|inputPump
operator|!=
literal|null
condition|)
block|{
name|Thread
name|inputThread
init|=
operator|new
name|Thread
argument_list|(
name|inputPump
argument_list|)
decl_stmt|;
name|inputThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|inputThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Stop pumping the streams.      */
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|outputThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|outputThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|errorThread
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|errorThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|inputPump
operator|!=
literal|null
condition|)
block|{
name|inputPump
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{ }
try|try
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{ }
block|}
comment|/**      * Create the pump to handle child output.      */
specifier|protected
name|void
name|createChildOutputPump
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
assert|assert
name|out
operator|!=
literal|null
assert|;
name|outputThread
operator|=
name|createPump
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the pump to handle error output.      */
specifier|protected
name|void
name|createChildErrorPump
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
assert|assert
name|out
operator|!=
literal|null
assert|;
name|errorThread
operator|=
name|createPump
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a stream pumper to copy the given input stream to the given output stream.      */
specifier|protected
name|Thread
name|createPump
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
assert|assert
name|out
operator|!=
literal|null
assert|;
return|return
name|createPump
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Creates a stream pumper to copy the given input stream to the      * given output stream.      *      * @param in                    The input stream to copy from.      * @param out                   The output stream to copy to.      * @param closeWhenExhausted    If true close the inputstream.      * @return                      A thread object that does the pumping.      */
specifier|protected
name|Thread
name|createPump
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|,
specifier|final
name|boolean
name|closeWhenExhausted
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
assert|assert
name|out
operator|!=
literal|null
assert|;
specifier|final
name|Thread
name|result
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|StreamPumper
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|closeWhenExhausted
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Creates a stream pumper to copy the given input stream to the      * given output stream. Used for standard input.      */
specifier|protected
name|StreamPumper
name|createInputPump
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|OutputStream
name|out
parameter_list|,
specifier|final
name|boolean
name|closeWhenExhausted
parameter_list|)
block|{
assert|assert
name|in
operator|!=
literal|null
assert|;
assert|assert
name|out
operator|!=
literal|null
assert|;
name|StreamPumper
name|pumper
init|=
operator|new
name|StreamPumper
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|closeWhenExhausted
argument_list|)
decl_stmt|;
name|pumper
operator|.
name|setAutoflush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pumper
return|;
block|}
block|}
end_class

end_unit

