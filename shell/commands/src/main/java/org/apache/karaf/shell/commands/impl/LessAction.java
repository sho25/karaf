begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|console
operator|.
name|KeyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|SignalListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|AnsiSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jledit
operator|.
name|jline
operator|.
name|NonBlockingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"shell"
argument_list|,
name|name
operator|=
literal|"less"
argument_list|,
name|description
operator|=
literal|"File pager."
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|LessAction
implements|implements
name|Action
implements|,
name|SignalListener
block|{
specifier|private
specifier|static
specifier|final
name|int
name|ESCAPE
init|=
literal|27
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ESCAPE_TIMEOUT
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|READ_EXPIRED
init|=
operator|-
literal|2
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-e"
argument_list|,
name|aliases
operator|=
literal|"--quit-at-eof"
argument_list|)
name|boolean
name|quitAtSecondEof
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-E"
argument_list|,
name|aliases
operator|=
literal|"--QUIT-AT-EOF"
argument_list|)
name|boolean
name|quitAtFirstEof
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-N"
argument_list|,
name|aliases
operator|=
literal|"--LINE-NUMBERS"
argument_list|)
name|boolean
name|printLineNumbers
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-q"
argument_list|,
name|aliases
operator|=
block|{
literal|"--quiet"
block|,
literal|"--silent"
block|}
argument_list|)
name|boolean
name|quiet
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-Q"
argument_list|,
name|aliases
operator|=
block|{
literal|"--QUIET"
block|,
literal|"--SILENT"
block|}
argument_list|)
name|boolean
name|veryQuiet
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-S"
argument_list|,
name|aliases
operator|=
literal|"--chop-long-lines"
argument_list|)
name|boolean
name|chopLongLines
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-i"
argument_list|,
name|aliases
operator|=
literal|"--ignore-case"
argument_list|)
name|boolean
name|ignoreCaseCond
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-I"
argument_list|,
name|aliases
operator|=
literal|"--IGNORE-CASE"
argument_list|)
name|boolean
name|ignoreCaseAlways
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-x"
argument_list|,
name|aliases
operator|=
literal|"--tabs"
argument_list|)
name|int
name|tabs
init|=
literal|4
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|multiValued
operator|=
literal|true
argument_list|)
name|List
argument_list|<
name|File
argument_list|>
name|files
decl_stmt|;
annotation|@
name|Reference
name|Terminal
name|terminal
decl_stmt|;
annotation|@
name|Reference
name|Session
name|session
decl_stmt|;
name|BufferedReader
name|reader
decl_stmt|;
name|NonBlockingInputStream
name|consoleInput
decl_stmt|;
name|Reader
name|consoleReader
decl_stmt|;
name|KeyMap
name|keys
decl_stmt|;
name|int
name|firstLineInMemory
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|firstLineToDisplay
init|=
literal|0
decl_stmt|;
name|int
name|firstColumnToDisplay
init|=
literal|0
decl_stmt|;
name|int
name|offsetInLine
init|=
literal|0
decl_stmt|;
name|String
name|message
decl_stmt|;
specifier|final
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|opBuffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Stack
argument_list|<
name|Character
argument_list|>
name|pushBackChar
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
name|Thread
name|displayThread
decl_stmt|;
specifier|final
name|AtomicBoolean
name|redraw
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Operation
argument_list|>
name|options
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|window
decl_stmt|;
name|int
name|halfWindow
decl_stmt|;
name|int
name|nbEof
decl_stmt|;
name|String
name|pattern
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|in
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
name|System
operator|.
name|in
expr_stmt|;
block|}
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|InterruptibleInputStream
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|terminal
operator|==
literal|null
operator|||
operator|!
name|isTty
argument_list|(
name|System
operator|.
name|out
argument_list|)
condition|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|checkInterrupted
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|boolean
name|echo
init|=
name|terminal
operator|.
name|isEchoEnabled
argument_list|()
decl_stmt|;
name|terminal
operator|.
name|setEchoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|addSignalListener
argument_list|(
name|this
argument_list|,
name|Signal
operator|.
name|WINCH
argument_list|)
expr_stmt|;
try|try
block|{
name|window
operator|=
name|terminal
operator|.
name|getHeight
argument_list|()
operator|-
literal|1
expr_stmt|;
name|halfWindow
operator|=
name|window
operator|/
literal|2
expr_stmt|;
name|keys
operator|=
operator|new
name|KeyMap
argument_list|(
literal|"less"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|bindKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|consoleInput
operator|=
operator|new
name|NonBlockingInputStream
argument_list|(
name|session
operator|.
name|getKeyboard
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|consoleReader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|consoleInput
argument_list|)
expr_stmt|;
comment|// Use alternate buffer
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\u001B[?1049h"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|displayThread
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|redrawLoop
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|displayThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|redraw
argument_list|()
expr_stmt|;
name|checkInterrupted
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-e"
argument_list|,
name|Operation
operator|.
name|OPT_QUIT_AT_SECOND_EOF
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--quit-at-eof"
argument_list|,
name|Operation
operator|.
name|OPT_QUIT_AT_SECOND_EOF
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-E"
argument_list|,
name|Operation
operator|.
name|OPT_QUIT_AT_FIRST_EOF
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-QUIT-AT-EOF"
argument_list|,
name|Operation
operator|.
name|OPT_QUIT_AT_FIRST_EOF
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-N"
argument_list|,
name|Operation
operator|.
name|OPT_PRINT_LINES
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--LINE-NUMBERS"
argument_list|,
name|Operation
operator|.
name|OPT_PRINT_LINES
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-q"
argument_list|,
name|Operation
operator|.
name|OPT_QUIET
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--quiet"
argument_list|,
name|Operation
operator|.
name|OPT_QUIET
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--silent"
argument_list|,
name|Operation
operator|.
name|OPT_QUIET
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-Q"
argument_list|,
name|Operation
operator|.
name|OPT_VERY_QUIET
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--QUIET"
argument_list|,
name|Operation
operator|.
name|OPT_VERY_QUIET
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--SILENT"
argument_list|,
name|Operation
operator|.
name|OPT_VERY_QUIET
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-S"
argument_list|,
name|Operation
operator|.
name|OPT_CHOP_LONG_LINES
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--chop-long-lines"
argument_list|,
name|Operation
operator|.
name|OPT_CHOP_LONG_LINES
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-i"
argument_list|,
name|Operation
operator|.
name|OPT_IGNORE_CASE_COND
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--ignore-case"
argument_list|,
name|Operation
operator|.
name|OPT_IGNORE_CASE_COND
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"-I"
argument_list|,
name|Operation
operator|.
name|OPT_IGNORE_CASE_ALWAYS
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"--IGNORE-CASE"
argument_list|,
name|Operation
operator|.
name|OPT_IGNORE_CASE_ALWAYS
argument_list|)
expr_stmt|;
name|Operation
name|op
decl_stmt|;
do|do
block|{
name|checkInterrupted
argument_list|()
expr_stmt|;
name|op
operator|=
literal|null
expr_stmt|;
comment|//
comment|// Option edition
comment|//
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|buffer
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|int
name|c
init|=
name|consoleReader
operator|.
name|read
argument_list|()
decl_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'-'
condition|)
block|{
name|op
operator|=
name|options
operator|.
name|get
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"There is no "
operator|+
name|printable
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|" option"
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\r'
condition|)
block|{
name|op
operator|=
name|options
operator|.
name|get
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|"There is no "
operator|+
name|printable
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|" option"
expr_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Operation
argument_list|>
name|matching
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Operation
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|matching
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|matching
operator|.
name|size
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|matching
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|//
comment|// Pattern edition
comment|//
elseif|else
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|(
name|buffer
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
operator|||
name|buffer
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'?'
operator|)
condition|)
block|{
name|int
name|c
init|=
name|consoleReader
operator|.
name|read
argument_list|()
decl_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\r'
condition|)
block|{
name|pattern
operator|=
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|moveToNextMatch
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|moveToPreviousMatch
argument_list|()
expr_stmt|;
block|}
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Command reading
comment|//
else|else
block|{
name|Object
name|obj
init|=
name|readOperation
argument_list|()
decl_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Character
condition|)
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|obj
decl_stmt|;
comment|// Enter option mode or pattern edit mode
if|if
condition|(
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'/'
operator|||
name|c
operator|==
literal|'?'
condition|)
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Operation
condition|)
block|{
name|op
operator|=
operator|(
name|Operation
operator|)
name|obj
expr_stmt|;
block|}
block|}
if|if
condition|(
name|op
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|FORWARD_ONE_LINE
case|:
name|moveForward
argument_list|(
name|getStrictPositiveNumberInBuffer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BACKWARD_ONE_LINE
case|:
name|moveBackward
argument_list|(
name|getStrictPositiveNumberInBuffer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FORWARD_ONE_WINDOW_OR_LINES
case|:
name|moveForward
argument_list|(
name|getStrictPositiveNumberInBuffer
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FORWARD_ONE_WINDOW_AND_SET
case|:
name|window
operator|=
name|getStrictPositiveNumberInBuffer
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|moveForward
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
case|case
name|FORWARD_ONE_WINDOW_NO_STOP
case|:
name|moveForward
argument_list|(
name|window
argument_list|)
expr_stmt|;
comment|// TODO: handle no stop
break|break;
case|case
name|FORWARD_HALF_WINDOW_AND_SET
case|:
name|halfWindow
operator|=
name|getStrictPositiveNumberInBuffer
argument_list|(
name|halfWindow
argument_list|)
expr_stmt|;
name|moveForward
argument_list|(
name|halfWindow
argument_list|)
expr_stmt|;
break|break;
case|case
name|BACKWARD_ONE_WINDOW_AND_SET
case|:
name|window
operator|=
name|getStrictPositiveNumberInBuffer
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|moveBackward
argument_list|(
name|window
argument_list|)
expr_stmt|;
break|break;
case|case
name|BACKWARD_ONE_WINDOW_OR_LINES
case|:
name|moveBackward
argument_list|(
name|getStrictPositiveNumberInBuffer
argument_list|(
name|window
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|BACKWARD_HALF_WINDOW_AND_SET
case|:
name|halfWindow
operator|=
name|getStrictPositiveNumberInBuffer
argument_list|(
name|halfWindow
argument_list|)
expr_stmt|;
name|moveBackward
argument_list|(
name|halfWindow
argument_list|)
expr_stmt|;
break|break;
case|case
name|GO_TO_FIRST_LINE_OR_N
case|:
comment|// TODO: handle number
name|firstLineToDisplay
operator|=
name|firstLineInMemory
expr_stmt|;
name|offsetInLine
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|GO_TO_LAST_LINE_OR_N
case|:
comment|// TODO: handle number
name|moveForward
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT_ONE_HALF_SCREEN
case|:
name|firstColumnToDisplay
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|firstColumnToDisplay
operator|-
name|terminal
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT_ONE_HALF_SCREEN
case|:
name|firstColumnToDisplay
operator|+=
name|terminal
operator|.
name|getWidth
argument_list|()
operator|/
literal|2
expr_stmt|;
break|break;
case|case
name|REPEAT_SEARCH_BACKWARD
case|:
case|case
name|REPEAT_SEARCH_BACKWARD_SPAN_FILES
case|:
name|moveToPreviousMatch
argument_list|()
expr_stmt|;
break|break;
case|case
name|REPEAT_SEARCH_FORWARD
case|:
case|case
name|REPEAT_SEARCH_FORWARD_SPAN_FILES
case|:
name|moveToNextMatch
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNDO_SEARCH
case|:
name|pattern
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|OPT_PRINT_LINES
case|:
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|printLineNumbers
operator|=
operator|!
name|printLineNumbers
expr_stmt|;
name|message
operator|=
name|printLineNumbers
condition|?
literal|"Constantly display line numbers"
else|:
literal|"Don't use line numbers"
expr_stmt|;
break|break;
case|case
name|OPT_QUIET
case|:
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|quiet
operator|=
operator|!
name|quiet
expr_stmt|;
name|veryQuiet
operator|=
literal|false
expr_stmt|;
name|message
operator|=
name|quiet
condition|?
literal|"Ring the bell for errors but not at eof/bof"
else|:
literal|"Ring the bell for errors AND at eof/bof"
expr_stmt|;
break|break;
case|case
name|OPT_VERY_QUIET
case|:
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|veryQuiet
operator|=
operator|!
name|veryQuiet
expr_stmt|;
name|quiet
operator|=
literal|false
expr_stmt|;
name|message
operator|=
name|veryQuiet
condition|?
literal|"Never ring the bell"
else|:
literal|"Ring the bell for errors AND at eof/bof"
expr_stmt|;
break|break;
case|case
name|OPT_CHOP_LONG_LINES
case|:
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|offsetInLine
operator|=
literal|0
expr_stmt|;
name|chopLongLines
operator|=
operator|!
name|chopLongLines
expr_stmt|;
name|message
operator|=
name|chopLongLines
condition|?
literal|"Chop long lines"
else|:
literal|"Fold long lines"
expr_stmt|;
break|break;
case|case
name|OPT_IGNORE_CASE_COND
case|:
name|ignoreCaseCond
operator|=
operator|!
name|ignoreCaseCond
expr_stmt|;
name|ignoreCaseAlways
operator|=
literal|false
expr_stmt|;
name|message
operator|=
name|ignoreCaseCond
condition|?
literal|"Ignore case in searches"
else|:
literal|"Case is significant in searches"
expr_stmt|;
break|break;
case|case
name|OPT_IGNORE_CASE_ALWAYS
case|:
name|ignoreCaseAlways
operator|=
operator|!
name|ignoreCaseAlways
expr_stmt|;
name|ignoreCaseCond
operator|=
literal|false
expr_stmt|;
name|message
operator|=
name|ignoreCaseAlways
condition|?
literal|"Ignore case in searches and in patterns"
else|:
literal|"Case is significant in searches"
expr_stmt|;
break|break;
block|}
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|redraw
argument_list|()
expr_stmt|;
if|if
condition|(
name|quitAtFirstEof
operator|&&
name|nbEof
operator|>
literal|0
operator|||
name|quitAtSecondEof
operator|&&
name|nbEof
operator|>
literal|1
condition|)
block|{
name|op
operator|=
name|Operation
operator|.
name|EXIT
expr_stmt|;
block|}
block|}
do|while
condition|(
name|op
operator|!=
name|Operation
operator|.
name|EXIT
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Interrupted by user"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|terminal
operator|.
name|setEchoEnabled
argument_list|(
name|echo
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|removeSignalListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|consoleInput
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|displayThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|displayThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Use main buffer
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\u001B[?1049l"
argument_list|)
expr_stmt|;
comment|// Clear line
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|moveToNextMatch
parameter_list|()
throws|throws
name|IOException
block|{
name|Pattern
name|compiled
init|=
name|getPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|lineNumber
init|=
name|firstLineToDisplay
operator|+
literal|1
init|;
condition|;
name|lineNumber
operator|++
control|)
block|{
name|String
name|line
init|=
name|getLine
argument_list|(
name|lineNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|compiled
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|firstLineToDisplay
operator|=
name|lineNumber
expr_stmt|;
name|offsetInLine
operator|=
literal|0
expr_stmt|;
return|return;
block|}
block|}
block|}
name|message
operator|=
literal|"Pattern not found"
expr_stmt|;
block|}
specifier|private
name|void
name|moveToPreviousMatch
parameter_list|()
throws|throws
name|IOException
block|{
name|Pattern
name|compiled
init|=
name|getPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|lineNumber
init|=
name|firstLineToDisplay
operator|-
literal|1
init|;
name|lineNumber
operator|>=
name|firstLineInMemory
condition|;
name|lineNumber
operator|--
control|)
block|{
name|String
name|line
init|=
name|getLine
argument_list|(
name|lineNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|compiled
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|firstLineToDisplay
operator|=
name|lineNumber
expr_stmt|;
name|offsetInLine
operator|=
literal|0
expr_stmt|;
return|return;
block|}
block|}
block|}
name|message
operator|=
literal|"Pattern not found"
expr_stmt|;
block|}
specifier|private
name|String
name|printable
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
name|ESCAPE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"ESC"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|<
literal|32
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'^'
argument_list|)
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|c
operator|+
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|<
literal|128
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"03o"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|void
name|moveForward
parameter_list|(
name|int
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|width
init|=
name|terminal
operator|.
name|getWidth
argument_list|()
operator|-
operator|(
name|printLineNumbers
condition|?
literal|8
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|height
init|=
name|terminal
operator|.
name|getHeight
argument_list|()
decl_stmt|;
while|while
condition|(
operator|--
name|lines
operator|>=
literal|0
condition|)
block|{
name|int
name|lastLineToDisplay
init|=
name|firstLineToDisplay
decl_stmt|;
if|if
condition|(
name|firstColumnToDisplay
operator|>
literal|0
operator|||
name|chopLongLines
condition|)
block|{
name|lastLineToDisplay
operator|+=
name|height
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|int
name|off
init|=
name|offsetInLine
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|height
operator|-
literal|1
condition|;
name|l
operator|++
control|)
block|{
name|String
name|line
init|=
name|getLine
argument_list|(
name|lastLineToDisplay
argument_list|)
decl_stmt|;
if|if
condition|(
name|ansiLength
argument_list|(
name|line
argument_list|)
operator|>
name|off
operator|+
name|width
condition|)
block|{
name|off
operator|+=
name|width
expr_stmt|;
block|}
else|else
block|{
name|off
operator|=
literal|0
expr_stmt|;
name|lastLineToDisplay
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getLine
argument_list|(
name|lastLineToDisplay
argument_list|)
operator|==
literal|null
condition|)
block|{
name|eof
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|line
init|=
name|getLine
argument_list|(
name|firstLineToDisplay
argument_list|)
decl_stmt|;
if|if
condition|(
name|ansiLength
argument_list|(
name|line
argument_list|)
operator|>
name|width
operator|+
name|offsetInLine
condition|)
block|{
name|offsetInLine
operator|+=
name|width
expr_stmt|;
block|}
else|else
block|{
name|offsetInLine
operator|=
literal|0
expr_stmt|;
name|firstLineToDisplay
operator|++
expr_stmt|;
block|}
block|}
block|}
name|void
name|moveBackward
parameter_list|(
name|int
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|width
init|=
name|terminal
operator|.
name|getWidth
argument_list|()
operator|-
operator|(
name|printLineNumbers
condition|?
literal|8
else|:
literal|0
operator|)
decl_stmt|;
while|while
condition|(
operator|--
name|lines
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|offsetInLine
operator|>
literal|0
condition|)
block|{
name|offsetInLine
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|offsetInLine
operator|-
name|width
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|firstLineInMemory
operator|<
name|firstLineToDisplay
condition|)
block|{
name|firstLineToDisplay
operator|--
expr_stmt|;
name|String
name|line
init|=
name|getLine
argument_list|(
name|firstLineToDisplay
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|ansiLength
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|offsetInLine
operator|=
name|length
operator|-
name|length
operator|%
name|width
expr_stmt|;
block|}
else|else
block|{
name|bof
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|private
name|void
name|eof
parameter_list|()
block|{
name|nbEof
operator|++
expr_stmt|;
name|message
operator|=
literal|"(END)"
expr_stmt|;
if|if
condition|(
operator|!
name|quiet
operator|&&
operator|!
name|veryQuiet
operator|&&
operator|!
name|quitAtFirstEof
operator|&&
operator|!
name|quitAtSecondEof
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
operator|(
name|char
operator|)
literal|0x07
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|bof
parameter_list|()
block|{
if|if
condition|(
operator|!
name|quiet
operator|&&
operator|!
name|veryQuiet
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
operator|(
name|char
operator|)
literal|0x07
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|getStrictPositiveNumberInBuffer
parameter_list|(
name|int
name|def
parameter_list|)
block|{
try|try
block|{
name|int
name|n
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|n
operator|>
literal|0
operator|)
condition|?
name|n
else|:
name|def
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
name|def
return|;
block|}
finally|finally
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|redraw
parameter_list|()
block|{
synchronized|synchronized
init|(
name|redraw
init|)
block|{
name|redraw
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|redraw
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|redrawLoop
parameter_list|()
block|{
synchronized|synchronized
init|(
name|redraw
init|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
if|if
condition|(
name|redraw
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|display
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|redraw
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
name|void
name|display
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|int
name|width
init|=
name|terminal
operator|.
name|getWidth
argument_list|()
operator|-
operator|(
name|printLineNumbers
condition|?
literal|8
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|height
init|=
name|terminal
operator|.
name|getHeight
argument_list|()
decl_stmt|;
name|int
name|inputLine
init|=
name|firstLineToDisplay
decl_stmt|;
name|String
name|curLine
init|=
literal|null
decl_stmt|;
name|Pattern
name|compiled
init|=
name|getPattern
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|terminalLine
init|=
literal|0
init|;
name|terminalLine
operator|<
name|height
operator|-
literal|1
condition|;
name|terminalLine
operator|++
control|)
block|{
if|if
condition|(
name|curLine
operator|==
literal|null
condition|)
block|{
name|curLine
operator|=
name|getLine
argument_list|(
name|inputLine
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|curLine
operator|==
literal|null
condition|)
block|{
name|curLine
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
name|curLine
operator|=
name|compiled
operator|.
name|matcher
argument_list|(
name|curLine
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\033[7m$1\033[27m"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|toDisplay
decl_stmt|;
if|if
condition|(
name|firstColumnToDisplay
operator|>
literal|0
operator|||
name|chopLongLines
condition|)
block|{
name|int
name|off
init|=
name|firstColumnToDisplay
decl_stmt|;
if|if
condition|(
name|terminalLine
operator|==
literal|0
operator|&&
name|offsetInLine
operator|>
literal|0
condition|)
block|{
name|off
operator|=
name|Math
operator|.
name|max
argument_list|(
name|offsetInLine
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
name|toDisplay
operator|=
name|ansiSubstring
argument_list|(
name|curLine
argument_list|,
name|off
argument_list|,
name|off
operator|+
name|width
argument_list|)
expr_stmt|;
name|curLine
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|terminalLine
operator|==
literal|0
operator|&&
name|offsetInLine
operator|>
literal|0
condition|)
block|{
name|curLine
operator|=
name|ansiSubstring
argument_list|(
name|curLine
argument_list|,
name|offsetInLine
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|toDisplay
operator|=
name|ansiSubstring
argument_list|(
name|curLine
argument_list|,
literal|0
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|curLine
operator|=
name|ansiSubstring
argument_list|(
name|curLine
argument_list|,
name|width
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
if|if
condition|(
name|curLine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|curLine
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|printLineNumbers
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%7d "
argument_list|,
name|inputLine
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|toDisplay
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"\033[7m"
operator|+
name|message
operator|+
literal|" \033[0m"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|buffer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opBuffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|printable
argument_list|(
name|opBuffer
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Pattern
name|getPattern
parameter_list|()
block|{
name|Pattern
name|compiled
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|boolean
name|insensitive
init|=
name|ignoreCaseAlways
operator|||
name|ignoreCaseCond
operator|&&
name|pattern
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|compiled
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"("
operator|+
name|pattern
operator|+
literal|")"
argument_list|,
name|insensitive
condition|?
name|Pattern
operator|.
name|CASE_INSENSITIVE
operator||
name|Pattern
operator|.
name|UNICODE_CASE
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|compiled
return|;
block|}
specifier|private
name|int
name|ansiLength
parameter_list|(
name|String
name|curLine
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|AnsiSplitter
operator|.
name|length
argument_list|(
name|curLine
argument_list|,
name|tabs
argument_list|)
return|;
block|}
specifier|private
name|String
name|ansiSubstring
parameter_list|(
name|String
name|curLine
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|AnsiSplitter
operator|.
name|substring
argument_list|(
name|curLine
argument_list|,
name|begin
argument_list|,
name|end
argument_list|,
name|tabs
argument_list|)
return|;
block|}
name|String
name|getLine
parameter_list|(
name|int
name|line
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|line
operator|<=
name|lines
operator|.
name|size
argument_list|()
condition|)
block|{
name|String
name|str
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|line
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|lines
operator|.
name|get
argument_list|(
name|line
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|signal
parameter_list|(
name|Signal
name|signal
parameter_list|)
block|{
comment|// Ugly hack to force the jline unix terminal to retrieve the width/height of the terminal
comment|// because results are cached for 1 second.
try|try
block|{
name|Field
name|field
init|=
name|terminal
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"terminal"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|jlineTerminal
init|=
name|field
operator|.
name|get
argument_list|(
name|terminal
argument_list|)
decl_stmt|;
name|field
operator|=
name|jlineTerminal
operator|.
name|getClass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"settings"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|settings
init|=
name|field
operator|.
name|get
argument_list|(
name|jlineTerminal
argument_list|)
decl_stmt|;
name|field
operator|=
name|settings
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"configLastFetched"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|setLong
argument_list|(
name|settings
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore
block|}
name|redraw
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isTty
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
try|try
block|{
name|Method
name|mth
init|=
name|out
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getCurrent"
argument_list|)
decl_stmt|;
name|mth
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|current
init|=
name|mth
operator|.
name|invoke
argument_list|(
name|out
argument_list|)
decl_stmt|;
return|return
name|current
operator|==
name|session
operator|.
name|getConsole
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * This is for long running commands to be interrupted by ctrl-c      *      * @throws InterruptedException      */
specifier|public
specifier|static
name|void
name|checkInterrupted
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|()
throw|;
block|}
block|}
specifier|protected
name|Object
name|readOperation
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|c
init|=
name|pushBackChar
operator|.
name|isEmpty
argument_list|()
condition|?
name|consoleReader
operator|.
name|read
argument_list|()
else|:
name|pushBackChar
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|opBuffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|keys
operator|.
name|getBound
argument_list|(
name|opBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
name|jline
operator|.
name|console
operator|.
name|Operation
operator|.
name|DO_LOWERCASE_VERSION
condition|)
block|{
name|opBuffer
operator|.
name|setLength
argument_list|(
name|opBuffer
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|opBuffer
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|=
name|keys
operator|.
name|getBound
argument_list|(
name|opBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|KeyMap
condition|)
block|{
if|if
condition|(
name|c
operator|==
name|ESCAPE
operator|&&
name|pushBackChar
operator|.
name|isEmpty
argument_list|()
operator|&&
name|consoleInput
operator|.
name|isNonBlockingEnabled
argument_list|()
operator|&&
name|consoleInput
operator|.
name|peek
argument_list|(
name|ESCAPE_TIMEOUT
argument_list|)
operator|==
name|READ_EXPIRED
condition|)
block|{
name|o
operator|=
operator|(
operator|(
name|KeyMap
operator|)
name|o
operator|)
operator|.
name|getAnotherKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|instanceof
name|KeyMap
condition|)
block|{
return|return
literal|null
return|;
block|}
name|opBuffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
while|while
condition|(
name|o
operator|==
literal|null
operator|&&
name|opBuffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|c
operator|=
name|opBuffer
operator|.
name|charAt
argument_list|(
name|opBuffer
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|opBuffer
operator|.
name|setLength
argument_list|(
name|opBuffer
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Object
name|o2
init|=
name|keys
operator|.
name|getBound
argument_list|(
name|opBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|o2
operator|instanceof
name|KeyMap
condition|)
block|{
name|o
operator|=
operator|(
operator|(
name|KeyMap
operator|)
name|o2
operator|)
operator|.
name|getAnotherKey
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|pushBackChar
operator|.
name|push
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|opBuffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pushBackChar
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
specifier|private
name|void
name|bindKeys
parameter_list|(
name|KeyMap
name|map
parameter_list|)
block|{
comment|// Arrow keys bindings
name|map
operator|.
name|bind
argument_list|(
literal|"\033[0A"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[0B"
argument_list|,
name|Operation
operator|.
name|LEFT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[0C"
argument_list|,
name|Operation
operator|.
name|RIGHT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[0D"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\340\110"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\340\113"
argument_list|,
name|Operation
operator|.
name|LEFT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\340\115"
argument_list|,
name|Operation
operator|.
name|RIGHT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\340\120"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\000\110"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\000\113"
argument_list|,
name|Operation
operator|.
name|LEFT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\000\115"
argument_list|,
name|Operation
operator|.
name|RIGHT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\000\120"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[A"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[B"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[C"
argument_list|,
name|Operation
operator|.
name|RIGHT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[D"
argument_list|,
name|Operation
operator|.
name|LEFT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[OA"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[OB"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[OC"
argument_list|,
name|Operation
operator|.
name|RIGHT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033[OD"
argument_list|,
name|Operation
operator|.
name|LEFT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\0340H"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\0340P"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\0340M"
argument_list|,
name|Operation
operator|.
name|RIGHT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\0340K"
argument_list|,
name|Operation
operator|.
name|LEFT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"h"
argument_list|,
name|Operation
operator|.
name|HELP
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"H"
argument_list|,
name|Operation
operator|.
name|HELP
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"q"
argument_list|,
name|Operation
operator|.
name|EXIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|":q"
argument_list|,
name|Operation
operator|.
name|EXIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"Q"
argument_list|,
name|Operation
operator|.
name|EXIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|":Q"
argument_list|,
name|Operation
operator|.
name|EXIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"ZZ"
argument_list|,
name|Operation
operator|.
name|EXIT
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"e"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'E'
argument_list|)
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"j"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'N'
argument_list|)
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\r"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"y"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'Y'
argument_list|)
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"k"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'K'
argument_list|)
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'P'
argument_list|)
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_LINE
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"f"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_WINDOW_OR_LINES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'F'
argument_list|)
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_WINDOW_OR_LINES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'V'
argument_list|)
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_WINDOW_OR_LINES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|" "
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_WINDOW_OR_LINES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"b"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_WINDOW_OR_LINES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'B'
argument_list|)
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_WINDOW_OR_LINES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033v"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_WINDOW_OR_LINES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"z"
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_WINDOW_AND_SET
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"w"
argument_list|,
name|Operation
operator|.
name|BACKWARD_ONE_WINDOW_AND_SET
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033 "
argument_list|,
name|Operation
operator|.
name|FORWARD_ONE_WINDOW_NO_STOP
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"d"
argument_list|,
name|Operation
operator|.
name|FORWARD_HALF_WINDOW_AND_SET
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'D'
argument_list|)
argument_list|,
name|Operation
operator|.
name|FORWARD_HALF_WINDOW_AND_SET
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"u"
argument_list|,
name|Operation
operator|.
name|BACKWARD_HALF_WINDOW_AND_SET
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|ctrl
argument_list|(
literal|'U'
argument_list|)
argument_list|,
name|Operation
operator|.
name|BACKWARD_HALF_WINDOW_AND_SET
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033)"
argument_list|,
name|Operation
operator|.
name|RIGHT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033("
argument_list|,
name|Operation
operator|.
name|LEFT_ONE_HALF_SCREEN
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"F"
argument_list|,
name|Operation
operator|.
name|FORWARD_FOREVER
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"n"
argument_list|,
name|Operation
operator|.
name|REPEAT_SEARCH_FORWARD
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"N"
argument_list|,
name|Operation
operator|.
name|REPEAT_SEARCH_BACKWARD
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033n"
argument_list|,
name|Operation
operator|.
name|REPEAT_SEARCH_FORWARD_SPAN_FILES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033N"
argument_list|,
name|Operation
operator|.
name|REPEAT_SEARCH_BACKWARD_SPAN_FILES
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033u"
argument_list|,
name|Operation
operator|.
name|UNDO_SEARCH
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"g"
argument_list|,
name|Operation
operator|.
name|GO_TO_FIRST_LINE_OR_N
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"<"
argument_list|,
name|Operation
operator|.
name|GO_TO_FIRST_LINE_OR_N
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033<"
argument_list|,
name|Operation
operator|.
name|GO_TO_FIRST_LINE_OR_N
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"G"
argument_list|,
name|Operation
operator|.
name|GO_TO_LAST_LINE_OR_N
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|">"
argument_list|,
name|Operation
operator|.
name|GO_TO_LAST_LINE_OR_N
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
literal|"\033>"
argument_list|,
name|Operation
operator|.
name|GO_TO_LAST_LINE_OR_N
argument_list|)
expr_stmt|;
for|for
control|(
name|char
name|c
range|:
literal|"-/0123456789?"
operator|.
name|toCharArray
argument_list|()
control|)
block|{
name|map
operator|.
name|bind
argument_list|(
literal|""
operator|+
name|c
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|ctrl
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
literal|""
operator|+
operator|(
call|(
name|char
call|)
argument_list|(
name|c
operator|&
literal|0x1f
argument_list|)
operator|)
return|;
block|}
specifier|static
enum|enum
name|Operation
block|{
comment|// General
name|HELP
block|,
name|EXIT
block|,
comment|// Moving
name|FORWARD_ONE_LINE
block|,
name|BACKWARD_ONE_LINE
block|,
name|FORWARD_ONE_WINDOW_OR_LINES
block|,
name|BACKWARD_ONE_WINDOW_OR_LINES
block|,
name|FORWARD_ONE_WINDOW_AND_SET
block|,
name|BACKWARD_ONE_WINDOW_AND_SET
block|,
name|FORWARD_ONE_WINDOW_NO_STOP
block|,
name|FORWARD_HALF_WINDOW_AND_SET
block|,
name|BACKWARD_HALF_WINDOW_AND_SET
block|,
name|LEFT_ONE_HALF_SCREEN
block|,
name|RIGHT_ONE_HALF_SCREEN
block|,
name|FORWARD_FOREVER
block|,
name|REPAINT
block|,
name|REPAINT_AND_DISCARD
block|,
comment|// Searching
name|REPEAT_SEARCH_FORWARD
block|,
name|REPEAT_SEARCH_BACKWARD
block|,
name|REPEAT_SEARCH_FORWARD_SPAN_FILES
block|,
name|REPEAT_SEARCH_BACKWARD_SPAN_FILES
block|,
name|UNDO_SEARCH
block|,
comment|// Jumping
name|GO_TO_FIRST_LINE_OR_N
block|,
name|GO_TO_LAST_LINE_OR_N
block|,
name|GO_TO_PERCENT_OR_N
block|,
name|GO_TO_NEXT_TAG
block|,
name|GO_TO_PREVIOUS_TAG
block|,
name|FIND_CLOSE_BRACKET
block|,
name|FIND_OPEN_BRACKET
block|,
comment|// Options
name|OPT_PRINT_LINES
block|,
name|OPT_CHOP_LONG_LINES
block|,
name|OPT_QUIT_AT_FIRST_EOF
block|,
name|OPT_QUIT_AT_SECOND_EOF
block|,
name|OPT_QUIET
block|,
name|OPT_VERY_QUIET
block|,
name|OPT_IGNORE_CASE_COND
block|,
name|OPT_IGNORE_CASE_ALWAYS
block|,      }
specifier|static
class|class
name|InterruptibleInputStream
extends|extends
name|FilterInputStream
block|{
name|InterruptibleInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
return|return
name|super
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

