begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_comment
comment|/**  * Execute a Java standard application.  *  *<p>By default looks for static main(String[]) to execute, but  * you can specify a different static method that takes a String[]  * to execute instead.  *  * @version $Rev: 593392 $ $Date: 2007-11-09 03:14:15 +0100 (Fri, 09 Nov 2007) $  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"shell"
argument_list|,
name|name
operator|=
literal|"java"
argument_list|,
name|description
operator|=
literal|"Execute a Java standard application"
argument_list|)
specifier|public
class|class
name|JavaAction
extends|extends
name|AbstractAction
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-m"
argument_list|,
name|aliases
operator|=
block|{
literal|"--method"
block|}
argument_list|,
name|description
operator|=
literal|"Invoke a named method"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|methodName
init|=
literal|"main"
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"className"
argument_list|,
name|description
operator|=
literal|"The name of the class to invoke"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|className
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|1
argument_list|,
name|name
operator|=
literal|"arguments"
argument_list|,
name|description
operator|=
literal|"Arguments to pass to the method of the given class"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|args
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|info
init|=
name|log
operator|.
name|isInfoEnabled
argument_list|()
decl_stmt|;
name|Class
name|type
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using type: "
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|Method
name|method
init|=
name|type
operator|.
name|getMethod
argument_list|(
name|methodName
argument_list|,
name|String
index|[]
operator|.
expr|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using method: "
operator|+
name|method
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Invoking w/arguments: {}"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|Object
name|result
init|=
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Result: "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

