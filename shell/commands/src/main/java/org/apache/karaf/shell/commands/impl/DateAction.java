begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|inject
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"shell"
argument_list|,
name|name
operator|=
literal|"date"
argument_list|,
name|description
operator|=
literal|"Display the current time in the given FORMAT"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|DateAction
extends|extends
name|AbstractAction
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-d"
argument_list|,
name|aliases
operator|=
block|{
literal|"--date"
block|}
argument_list|,
name|description
operator|=
literal|"Display time described, not now"
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|,
name|required
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|date
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"format"
argument_list|,
name|description
operator|=
literal|"Output format"
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|,
name|required
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|format
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|Date
name|d
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
operator|||
name|date
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"now"
argument_list|)
condition|)
block|{
name|d
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|date
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|d
operator|=
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|date
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
operator|new
name|Date
argument_list|(
name|date
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// transform Unix format to Java SimpleDateFormat (if required)
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%a"
argument_list|,
literal|"EEE"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%A"
argument_list|,
literal|"EEEEEEE"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%b"
argument_list|,
literal|"MMM"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%B"
argument_list|,
literal|"MMMMMMM"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%c"
argument_list|,
literal|"MMM EEE d HH:mm:ss yyyy"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%C"
argument_list|,
literal|"yy"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%d"
argument_list|,
literal|"dd"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%D"
argument_list|,
literal|"MM/dd/yy"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%e"
argument_list|,
literal|"dd"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%F"
argument_list|,
literal|"yyyy-MM-dd"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%g"
argument_list|,
literal|"YY"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%G"
argument_list|,
literal|"YYYY"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%h"
argument_list|,
literal|"MMM"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%H"
argument_list|,
literal|"HH"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%I"
argument_list|,
literal|"hh"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%j"
argument_list|,
literal|"DDD"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%k"
argument_list|,
literal|"HH"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%l"
argument_list|,
literal|"hh"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%m"
argument_list|,
literal|"MM"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%M"
argument_list|,
literal|"mm"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%N"
argument_list|,
literal|"S"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%p"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%P"
argument_list|,
literal|"aa"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%r"
argument_list|,
literal|"hh:mm:ss aa"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%R"
argument_list|,
literal|"HH:mm"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%s"
argument_list|,
literal|"S"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%S"
argument_list|,
literal|"ss"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%t"
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%T"
argument_list|,
literal|"HH:mm:ss"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%u"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%U"
argument_list|,
literal|"w"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%V"
argument_list|,
literal|"W"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%w"
argument_list|,
literal|"u"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%W"
argument_list|,
literal|"w"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%x"
argument_list|,
literal|"MM/dd/yy"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%X"
argument_list|,
literal|"HH:mm:ss"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%y"
argument_list|,
literal|"yy"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%Y"
argument_list|,
literal|"yyyy"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%z"
argument_list|,
literal|"X"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%:z"
argument_list|,
literal|"XXX"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%::z"
argument_list|,
literal|"XXXX"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%:::z"
argument_list|,
literal|"XXXX"
argument_list|)
expr_stmt|;
name|format
operator|=
name|format
operator|.
name|replaceAll
argument_list|(
literal|"%Z"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

