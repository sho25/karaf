begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|OsgiCommandSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Execute a closure on a list of arguments.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"shell"
argument_list|,
name|name
operator|=
literal|"if"
argument_list|,
name|description
operator|=
literal|"If/Then/Else block."
argument_list|)
specifier|public
class|class
name|IfAction
extends|extends
name|AbstractAction
block|{
annotation|@
name|Argument
argument_list|(
name|name
operator|=
literal|"condition"
argument_list|,
name|index
operator|=
literal|0
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"The condition"
argument_list|)
name|Function
name|condition
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|name
operator|=
literal|"ifTrue"
argument_list|,
name|index
operator|=
literal|1
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|description
operator|=
literal|"The function to execute if the condition is true"
argument_list|)
name|Function
name|ifTrue
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|name
operator|=
literal|"ifFalse"
argument_list|,
name|index
operator|=
literal|2
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|description
operator|=
literal|"The function to execute if the condition is false"
argument_list|)
name|Function
name|ifFalse
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
name|result
init|=
name|condition
operator|.
name|execute
argument_list|(
name|session
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTrue
argument_list|(
name|result
argument_list|)
condition|)
block|{
return|return
name|ifTrue
operator|.
name|execute
argument_list|(
name|session
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|ifFalse
operator|!=
literal|null
condition|)
block|{
return|return
name|ifFalse
operator|.
name|execute
argument_list|(
name|session
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|isTrue
parameter_list|(
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|result
operator|instanceof
name|String
operator|&&
operator|(
operator|(
name|String
operator|)
name|result
operator|)
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|result
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|result
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

