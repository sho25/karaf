begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"shell"
argument_list|,
name|name
operator|=
literal|"wc"
argument_list|,
name|description
operator|=
literal|"Print newline, word, and byte counts for each file."
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|WcAction
implements|implements
name|Action
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-l"
argument_list|,
name|aliases
operator|=
block|{
literal|"--lines"
block|}
argument_list|,
name|description
operator|=
literal|"Print the newline counts."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|lines
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-w"
argument_list|,
name|aliases
operator|=
block|{
literal|"--words"
block|}
argument_list|,
name|description
operator|=
literal|"Print the word counts."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|words
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-m"
argument_list|,
name|aliases
operator|=
block|{
literal|"--chars"
block|}
argument_list|,
name|description
operator|=
literal|"Print the character counts."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|chars
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-c"
argument_list|,
name|aliases
operator|=
block|{
literal|"--bytes"
block|}
argument_list|,
name|description
operator|=
literal|"Print the byte counts."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|bytes
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"files"
argument_list|,
name|description
operator|=
literal|"The list of files where to perform the count"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|files
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|setDefaultOptions
argument_list|()
expr_stmt|;
name|String
name|outputString
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|WordCounts
name|wordCounts
init|=
name|getWordCounts
argument_list|(
name|System
operator|.
name|in
argument_list|)
decl_stmt|;
name|outputString
operator|=
name|formatWordCounts
argument_list|(
name|wordCounts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outputString
operator|=
name|getFilesWordCountReport
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|outputString
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Create a combined word count report of the required files.      * If there are more than one file supplied, a total row will be added.      *      * @param files the list of files.      * @return the word count report String.      * @throws IOException in case of a count failure.      */
specifier|protected
name|String
name|getFilesWordCountReport
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|WordCounts
name|totalWordCounts
init|=
operator|new
name|WordCounts
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|WordCounts
name|fileWordCount
init|=
name|getWordCounts
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fileFormattedString
init|=
name|formatWordCounts
argument_list|(
name|fileWordCount
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// add it to the running total which will be outputted at the end
name|totalWordCounts
operator|=
name|totalWordCounts
operator|.
name|add
argument_list|(
name|fileWordCount
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|fileFormattedString
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|// add additional total row
if|if
condition|(
name|files
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
name|formatWordCounts
argument_list|(
name|totalWordCounts
argument_list|,
literal|"total"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|report
init|=
name|stringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|report
return|;
block|}
comment|/**      * Set the default options for this action if none have been supplied.      */
specifier|protected
name|void
name|setDefaultOptions
parameter_list|()
block|{
name|boolean
name|noOptionsSupplied
init|=
operator|!
operator|(
name|bytes
operator|||
name|chars
operator|||
name|lines
operator|||
name|words
operator|)
decl_stmt|;
if|if
condition|(
name|noOptionsSupplied
condition|)
block|{
name|lines
operator|=
literal|true
expr_stmt|;
name|words
operator|=
literal|true
expr_stmt|;
name|bytes
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      *<p>Perform the main logic of counting the relevant data within a given input stream.</p>      *<p>Note, a line is considered to be terminated by linefeed '\n' or carriage return '\r'.</p>      *<p>A previous linefeed will be consumed.</p>      *<p>This method assumes UTF-8.</p>      *      * @param inputStream the input stream.      * @return the word count result.      * @throws IOException in case of word count failure.      */
specifier|protected
name|WordCounts
name|getWordCounts
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
name|WordCounts
name|wordCounts
init|=
operator|new
name|WordCounts
argument_list|()
decl_stmt|;
name|BufferedReader
name|bufferedReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bufferedReader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|current
decl_stmt|;
name|boolean
name|skipNextLineFeed
init|=
literal|false
decl_stmt|;
name|boolean
name|previouslyWhitespace
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|(
name|current
operator|=
name|bufferedReader
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|wordCounts
operator|.
name|byteCount
operator|++
expr_stmt|;
name|wordCounts
operator|.
name|charCount
operator|++
expr_stmt|;
comment|// line handling
comment|// if the previous read was a new line, skip the next newline feed
name|boolean
name|isSkipNewlineFeed
init|=
name|skipNextLineFeed
operator|&&
name|current
operator|==
literal|'\n'
decl_stmt|;
name|skipNextLineFeed
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSkipNewlineFeed
condition|)
block|{
continue|continue;
block|}
name|boolean
name|eol
init|=
operator|(
name|current
operator|==
literal|'\n'
operator|||
name|current
operator|==
literal|'\r'
operator|)
decl_stmt|;
if|if
condition|(
name|eol
condition|)
block|{
name|wordCounts
operator|.
name|lineCount
operator|++
expr_stmt|;
comment|// store the state to skip the next newline feed if required
if|if
condition|(
name|current
operator|==
literal|'\r'
condition|)
block|{
name|skipNextLineFeed
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// word handling
name|boolean
name|isCurrentWhitespace
init|=
name|Character
operator|.
name|isWhitespace
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCurrentWhitespace
operator|&&
name|previouslyWhitespace
condition|)
block|{
name|wordCounts
operator|.
name|wordCount
operator|++
expr_stmt|;
block|}
name|previouslyWhitespace
operator|=
name|isCurrentWhitespace
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|bufferedReader
operator|!=
literal|null
condition|)
block|{
name|bufferedReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|wordCounts
return|;
block|}
comment|/**      * Create a human readable format of the given count information.      *      * @param wordCounts the word count object containing the information.      * @param reportName the name associated with the word counts, ie a file name.      * @return a human readable String representing the word count information.      */
specifier|protected
name|String
name|formatWordCounts
parameter_list|(
name|WordCounts
name|wordCounts
parameter_list|,
name|String
name|reportName
parameter_list|)
block|{
comment|// line word chars
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|lines
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|wordCounts
operator|.
name|lineCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|words
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|wordCounts
operator|.
name|wordCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|chars
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|wordCounts
operator|.
name|charCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bytes
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|wordCounts
operator|.
name|byteCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reportName
operator|!=
literal|null
condition|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|reportName
argument_list|)
expr_stmt|;
block|}
name|String
name|formattedString
init|=
name|stringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|formattedString
return|;
block|}
comment|/**      * Represent a basic object to store the word count data.      */
specifier|protected
specifier|static
class|class
name|WordCounts
block|{
specifier|protected
name|int
name|lineCount
decl_stmt|;
specifier|protected
name|int
name|wordCount
decl_stmt|;
specifier|protected
name|int
name|byteCount
decl_stmt|;
specifier|protected
name|int
name|charCount
decl_stmt|;
specifier|public
name|WordCounts
name|add
parameter_list|(
name|WordCounts
name|append
parameter_list|)
block|{
name|WordCounts
name|wordCounts
init|=
operator|new
name|WordCounts
argument_list|()
decl_stmt|;
name|wordCounts
operator|.
name|charCount
operator|=
name|charCount
operator|+
name|append
operator|.
name|charCount
expr_stmt|;
name|wordCounts
operator|.
name|byteCount
operator|=
name|byteCount
operator|+
name|append
operator|.
name|byteCount
expr_stmt|;
name|wordCounts
operator|.
name|lineCount
operator|=
name|lineCount
operator|+
name|append
operator|.
name|lineCount
expr_stmt|;
name|wordCounts
operator|.
name|wordCount
operator|=
name|wordCount
operator|+
name|append
operator|.
name|wordCount
expr_stmt|;
return|return
name|wordCounts
return|;
block|}
block|}
block|}
end_class

end_unit

