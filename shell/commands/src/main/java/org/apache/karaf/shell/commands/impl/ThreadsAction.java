begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|console
operator|.
name|AbstractAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|table
operator|.
name|ShellTable
import|;
end_import

begin_comment
comment|/**  * Command for showing the full tree of bundles that have been used to resolve  * a given bundle.  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"shell"
argument_list|,
name|name
operator|=
literal|"threads"
argument_list|,
name|description
operator|=
literal|"Prints the current threads (optionally with stacktraces)"
argument_list|)
specifier|public
class|class
name|ThreadsAction
extends|extends
name|AbstractAction
block|{
annotation|@
name|Argument
argument_list|(
name|name
operator|=
literal|"id"
argument_list|,
name|description
operator|=
literal|"Show details for thread with this Id"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
name|Long
name|id
decl_stmt|;
specifier|protected
name|Object
name|doExecute
parameter_list|()
throws|throws
name|Exception
block|{
name|ThreadMXBean
name|threadsBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|printThread
argument_list|(
name|threadsBean
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printThreadList
argument_list|(
name|threadsBean
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|void
name|printThread
parameter_list|(
name|ThreadMXBean
name|threadsBean
parameter_list|,
name|Long
name|id
parameter_list|)
block|{
name|threadsBean
operator|.
name|setThreadCpuTimeEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ThreadInfo
name|ti
init|=
name|threadsBean
operator|.
name|getThreadInfo
argument_list|(
name|id
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Thread "
operator|+
name|ti
operator|.
name|getThreadId
argument_list|()
operator|+
literal|" "
operator|+
name|ti
operator|.
name|getThreadName
argument_list|()
operator|+
literal|" "
operator|+
name|ti
operator|.
name|getThreadState
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Stacktrace:"
argument_list|)
expr_stmt|;
name|StackTraceElement
index|[]
name|st
init|=
name|ti
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|ste
range|:
name|st
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|ste
operator|.
name|getClassName
argument_list|()
operator|+
literal|"."
operator|+
name|ste
operator|.
name|getMethodName
argument_list|()
operator|+
literal|" line: "
operator|+
name|ste
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|printThreadList
parameter_list|(
name|ThreadMXBean
name|threadsBean
parameter_list|)
block|{
name|ThreadInfo
index|[]
name|threadInfoAr
init|=
name|threadsBean
operator|.
name|dumpAllThreads
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ShellTable
name|table
init|=
operator|new
name|ShellTable
argument_list|()
decl_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Id"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"CPU time"
argument_list|)
expr_stmt|;
name|table
operator|.
name|column
argument_list|(
literal|"User time"
argument_list|)
expr_stmt|;
for|for
control|(
name|ThreadInfo
name|ti
range|:
name|threadInfoAr
control|)
block|{
name|long
name|id
init|=
name|ti
operator|.
name|getThreadId
argument_list|()
decl_stmt|;
name|table
operator|.
name|addRow
argument_list|()
operator|.
name|addContent
argument_list|(
name|id
argument_list|,
name|ti
operator|.
name|getThreadName
argument_list|()
argument_list|,
name|ti
operator|.
name|getThreadState
argument_list|()
argument_list|,
name|threadsBean
operator|.
name|getThreadCpuTime
argument_list|(
name|id
argument_list|)
operator|/
literal|1000000
argument_list|,
name|threadsBean
operator|.
name|getThreadUserTime
argument_list|(
name|id
argument_list|)
operator|/
literal|1000000
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|print
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

