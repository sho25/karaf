begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
operator|.
name|top
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|keymap
operator|.
name|BindingReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|keymap
operator|.
name|KeyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|utils
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
operator|.
name|top
operator|.
name|TTop
operator|.
name|Align
operator|.
name|Left
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
operator|.
name|top
operator|.
name|TTop
operator|.
name|Align
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * Thread Top implementation based on jline.  *  * TODO: option modification at runtime (such as implemented in less) is not currently supported  * TODO: one possible addition would be to detect deadlock threads and display them in a specific way  */
end_comment

begin_class
specifier|public
class|class
name|TTop
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STAT_UPTIME
init|=
literal|"uptime"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_TID
init|=
literal|"tid"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_NAME
init|=
literal|"name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_STATE
init|=
literal|"state"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_BLOCKED_TIME
init|=
literal|"blocked_time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_BLOCKED_COUNT
init|=
literal|"blocked_count"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_WAITED_TIME
init|=
literal|"waited_time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_WAITED_COUNT
init|=
literal|"waited_count"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_LOCK_NAME
init|=
literal|"lock_name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_LOCK_OWNER_ID
init|=
literal|"lock_owner_id"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_LOCK_OWNER_NAME
init|=
literal|"lock_owner_name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_USER_TIME
init|=
literal|"user_time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_USER_TIME_PERC
init|=
literal|"user_time_perc"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_CPU_TIME
init|=
literal|"cpu_time"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STAT_CPU_TIME_PERC
init|=
literal|"cpu_time_perc"
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|sort
decl_stmt|;
specifier|public
name|long
name|delay
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|stats
decl_stmt|;
specifier|public
name|int
name|nthreads
decl_stmt|;
specifier|public
enum|enum
name|Align
block|{
name|Left
block|,
name|Right
block|}
empty_stmt|;
specifier|public
enum|enum
name|Operation
block|{
name|INCREASE_DELAY
block|,
name|DECREASE_DELAY
block|,
name|HELP
block|,
name|EXIT
block|,
name|CLEAR
block|,
name|REVERSE
block|}
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Column
argument_list|>
name|columns
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Terminal
name|terminal
decl_stmt|;
specifier|private
specifier|final
name|Display
name|display
decl_stmt|;
specifier|private
specifier|final
name|BindingReader
name|bindingReader
decl_stmt|;
specifier|private
specifier|final
name|KeyMap
argument_list|<
name|Operation
argument_list|>
name|keys
decl_stmt|;
specifier|private
specifier|final
name|Size
name|size
init|=
operator|new
name|Size
argument_list|()
decl_stmt|;
specifier|private
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|comparator
decl_stmt|;
comment|// Internal cache data
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|previous
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|changes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|widths
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|TTop
parameter_list|(
name|Terminal
name|terminal
parameter_list|)
block|{
name|this
operator|.
name|terminal
operator|=
name|terminal
expr_stmt|;
name|this
operator|.
name|display
operator|=
operator|new
name|Display
argument_list|(
name|terminal
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|bindingReader
operator|=
operator|new
name|BindingReader
argument_list|(
name|terminal
operator|.
name|reader
argument_list|()
argument_list|)
expr_stmt|;
name|DecimalFormatSymbols
name|dfs
init|=
operator|new
name|DecimalFormatSymbols
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|setDecimalSeparator
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|DecimalFormat
name|perc
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.00%"
argument_list|,
name|dfs
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|STAT_TID
argument_list|,
name|Right
argument_list|,
literal|"TID"
argument_list|,
name|o
lambda|->
name|String
operator|.
name|format
argument_list|(
literal|"%3d"
argument_list|,
operator|(
name|Long
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_NAME
argument_list|,
name|Left
argument_list|,
literal|"NAME"
argument_list|,
name|padcut
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_STATE
argument_list|,
name|Left
argument_list|,
literal|"STATE"
argument_list|,
name|o
lambda|->
name|o
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_BLOCKED_TIME
argument_list|,
name|Right
argument_list|,
literal|"T-BLOCKED"
argument_list|,
name|o
lambda|->
name|millis
argument_list|(
operator|(
name|Long
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_BLOCKED_COUNT
argument_list|,
name|Right
argument_list|,
literal|"#-BLOCKED"
argument_list|,
name|Object
operator|::
name|toString
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_WAITED_TIME
argument_list|,
name|Right
argument_list|,
literal|"T-WAITED"
argument_list|,
name|o
lambda|->
name|millis
argument_list|(
operator|(
name|Long
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_WAITED_COUNT
argument_list|,
name|Right
argument_list|,
literal|"#-WAITED"
argument_list|,
name|Object
operator|::
name|toString
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_LOCK_NAME
argument_list|,
name|Left
argument_list|,
literal|"LOCK-NAME"
argument_list|,
name|Object
operator|::
name|toString
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_LOCK_OWNER_ID
argument_list|,
name|Right
argument_list|,
literal|"LOCK-OWNER-ID"
argument_list|,
name|id
lambda|->
operator|(
operator|(
name|Long
operator|)
name|id
operator|)
operator|>=
literal|0
condition|?
name|id
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_LOCK_OWNER_NAME
argument_list|,
name|Left
argument_list|,
literal|"LOCK-OWNER-NAME"
argument_list|,
name|name
lambda|->
name|name
operator|!=
literal|null
condition|?
name|name
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_USER_TIME
argument_list|,
name|Right
argument_list|,
literal|"T-USR"
argument_list|,
name|o
lambda|->
name|nanos
argument_list|(
operator|(
name|Long
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_CPU_TIME
argument_list|,
name|Right
argument_list|,
literal|"T-CPU"
argument_list|,
name|o
lambda|->
name|nanos
argument_list|(
operator|(
name|Long
operator|)
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_USER_TIME_PERC
argument_list|,
name|Right
argument_list|,
literal|"%-USR"
argument_list|,
name|perc
operator|::
name|format
argument_list|)
expr_stmt|;
name|register
argument_list|(
name|STAT_CPU_TIME_PERC
argument_list|,
name|Right
argument_list|,
literal|"%-CPU"
argument_list|,
name|perc
operator|::
name|format
argument_list|)
expr_stmt|;
name|keys
operator|=
operator|new
name|KeyMap
argument_list|<>
argument_list|()
expr_stmt|;
name|bindKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KeyMap
argument_list|<
name|Operation
argument_list|>
name|getKeys
parameter_list|()
block|{
return|return
name|keys
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|comparator
operator|=
name|buildComparator
argument_list|(
name|sort
argument_list|)
expr_stmt|;
name|delay
operator|=
name|delay
operator|>
literal|0
condition|?
name|Math
operator|.
name|max
argument_list|(
name|delay
argument_list|,
literal|100
argument_list|)
else|:
literal|1000
expr_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stats
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|STAT_TID
argument_list|,
name|STAT_NAME
argument_list|,
name|STAT_STATE
argument_list|,
name|STAT_CPU_TIME
argument_list|,
name|STAT_LOCK_OWNER_ID
argument_list|)
expr_stmt|;
block|}
name|Boolean
name|isThreadContentionMonitoringEnabled
init|=
literal|null
decl_stmt|;
name|ThreadMXBean
name|threadsBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|.
name|contains
argument_list|(
name|STAT_BLOCKED_TIME
argument_list|)
operator|||
name|stats
operator|.
name|contains
argument_list|(
name|STAT_BLOCKED_COUNT
argument_list|)
operator|||
name|stats
operator|.
name|contains
argument_list|(
name|STAT_WAITED_TIME
argument_list|)
operator|||
name|stats
operator|.
name|contains
argument_list|(
name|STAT_WAITED_COUNT
argument_list|)
condition|)
block|{
if|if
condition|(
name|threadsBean
operator|.
name|isThreadContentionMonitoringSupported
argument_list|()
condition|)
block|{
name|isThreadContentionMonitoringEnabled
operator|=
name|threadsBean
operator|.
name|isThreadContentionMonitoringEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isThreadContentionMonitoringEnabled
condition|)
block|{
name|threadsBean
operator|.
name|setThreadContentionMonitoringEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stats
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|STAT_BLOCKED_TIME
argument_list|,
name|STAT_BLOCKED_COUNT
argument_list|,
name|STAT_WAITED_TIME
argument_list|,
name|STAT_WAITED_COUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Boolean
name|isThreadCpuTimeEnabled
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stats
operator|.
name|contains
argument_list|(
name|STAT_USER_TIME
argument_list|)
operator|||
name|stats
operator|.
name|contains
argument_list|(
name|STAT_CPU_TIME
argument_list|)
condition|)
block|{
if|if
condition|(
name|threadsBean
operator|.
name|isThreadCpuTimeSupported
argument_list|()
condition|)
block|{
name|isThreadCpuTimeEnabled
operator|=
name|threadsBean
operator|.
name|isThreadCpuTimeEnabled
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isThreadCpuTimeEnabled
condition|)
block|{
name|threadsBean
operator|.
name|setThreadCpuTimeEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|stats
operator|.
name|removeAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|STAT_USER_TIME
argument_list|,
name|STAT_CPU_TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|.
name|copy
argument_list|(
name|terminal
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|Terminal
operator|.
name|SignalHandler
name|prevHandler
init|=
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|WINCH
argument_list|,
name|this
operator|::
name|handle
argument_list|)
decl_stmt|;
name|Attributes
name|attr
init|=
name|terminal
operator|.
name|enterRawMode
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Use alternate buffer
name|terminal
operator|.
name|puts
argument_list|(
name|InfoCmp
operator|.
name|Capability
operator|.
name|enter_ca_mode
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|puts
argument_list|(
name|InfoCmp
operator|.
name|Capability
operator|.
name|keypad_xmit
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|puts
argument_list|(
name|InfoCmp
operator|.
name|Capability
operator|.
name|cursor_invisible
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|writer
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Operation
name|op
decl_stmt|;
do|do
block|{
name|display
argument_list|()
expr_stmt|;
name|checkInterrupted
argument_list|()
expr_stmt|;
name|op
operator|=
literal|null
expr_stmt|;
name|long
name|delta
init|=
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
name|delay
operator|+
literal|1
operator|)
operator|*
name|delay
operator|+
name|t0
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|ch
init|=
name|bindingReader
operator|.
name|peekCharacter
argument_list|(
name|delta
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
operator|-
literal|1
condition|)
block|{
name|op
operator|=
name|Operation
operator|.
name|EXIT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|!=
name|NonBlockingReader
operator|.
name|READ_EXPIRED
condition|)
block|{
name|op
operator|=
name|bindingReader
operator|.
name|readBinding
argument_list|(
name|keys
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|INCREASE_DELAY
case|:
name|delay
operator|=
name|delay
operator|*
literal|2
expr_stmt|;
name|t0
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECREASE_DELAY
case|:
name|delay
operator|=
name|Math
operator|.
name|max
argument_list|(
name|delay
operator|/
literal|2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|t0
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLEAR
case|:
name|display
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
case|case
name|REVERSE
case|:
name|comparator
operator|=
name|comparator
operator|.
name|reversed
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
name|op
operator|!=
name|Operation
operator|.
name|EXIT
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Do nothing
block|}
finally|finally
block|{
name|terminal
operator|.
name|setAttributes
argument_list|(
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevHandler
operator|!=
literal|null
condition|)
block|{
name|terminal
operator|.
name|handle
argument_list|(
name|Terminal
operator|.
name|Signal
operator|.
name|WINCH
argument_list|,
name|prevHandler
argument_list|)
expr_stmt|;
block|}
comment|// Use main buffer
name|terminal
operator|.
name|puts
argument_list|(
name|InfoCmp
operator|.
name|Capability
operator|.
name|exit_ca_mode
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|puts
argument_list|(
name|InfoCmp
operator|.
name|Capability
operator|.
name|keypad_local
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|puts
argument_list|(
name|InfoCmp
operator|.
name|Capability
operator|.
name|cursor_visible
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|writer
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|isThreadContentionMonitoringEnabled
operator|!=
literal|null
condition|)
block|{
name|threadsBean
operator|.
name|setThreadContentionMonitoringEnabled
argument_list|(
name|isThreadContentionMonitoringEnabled
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isThreadCpuTimeEnabled
operator|!=
literal|null
condition|)
block|{
name|threadsBean
operator|.
name|setThreadCpuTimeEnabled
argument_list|(
name|isThreadCpuTimeEnabled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handle
parameter_list|(
name|Terminal
operator|.
name|Signal
name|signal
parameter_list|)
block|{
name|int
name|prevw
init|=
name|size
operator|.
name|getColumns
argument_list|()
decl_stmt|;
name|size
operator|.
name|copy
argument_list|(
name|terminal
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|size
operator|.
name|getColumns
argument_list|()
operator|<
name|prevw
condition|)
block|{
name|display
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|display
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|infos
parameter_list|()
block|{
name|long
name|ctime
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getUptime
argument_list|()
decl_stmt|;
name|Long
name|ptime
init|=
operator|(
name|Long
operator|)
name|previous
operator|.
name|computeIfAbsent
argument_list|(
operator|-
literal|1L
argument_list|,
name|id
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|STAT_UPTIME
argument_list|,
name|ctime
argument_list|)
decl_stmt|;
name|long
name|delta
init|=
name|ptime
operator|!=
literal|null
condition|?
name|ctime
operator|-
name|ptime
else|:
literal|0L
decl_stmt|;
name|ThreadMXBean
name|threadsBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|ThreadInfo
index|[]
name|infos
init|=
name|threadsBean
operator|.
name|dumpAllThreads
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ThreadInfo
name|ti
range|:
name|infos
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
name|t
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_TID
argument_list|,
name|ti
operator|.
name|getThreadId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_NAME
argument_list|,
name|ti
operator|.
name|getThreadName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_STATE
argument_list|,
name|ti
operator|.
name|getThreadState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadsBean
operator|.
name|isThreadContentionMonitoringEnabled
argument_list|()
condition|)
block|{
name|t
operator|.
name|put
argument_list|(
name|STAT_BLOCKED_TIME
argument_list|,
name|ti
operator|.
name|getBlockedTime
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_BLOCKED_COUNT
argument_list|,
name|ti
operator|.
name|getBlockedCount
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_WAITED_TIME
argument_list|,
name|ti
operator|.
name|getWaitedTime
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_WAITED_COUNT
argument_list|,
name|ti
operator|.
name|getWaitedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|put
argument_list|(
name|STAT_LOCK_NAME
argument_list|,
name|ti
operator|.
name|getLockName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_LOCK_OWNER_ID
argument_list|,
name|ti
operator|.
name|getLockOwnerId
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_LOCK_OWNER_NAME
argument_list|,
name|ti
operator|.
name|getLockOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|threadsBean
operator|.
name|isThreadCpuTimeSupported
argument_list|()
operator|&&
name|threadsBean
operator|.
name|isThreadCpuTimeEnabled
argument_list|()
condition|)
block|{
name|long
name|tid
init|=
name|ti
operator|.
name|getThreadId
argument_list|()
decl_stmt|,
name|t0
decl_stmt|,
name|t1
decl_stmt|;
comment|// Cpu
name|t1
operator|=
name|threadsBean
operator|.
name|getThreadCpuTime
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|t0
operator|=
operator|(
name|Long
operator|)
name|previous
operator|.
name|computeIfAbsent
argument_list|(
name|tid
argument_list|,
name|id
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|getOrDefault
argument_list|(
name|STAT_CPU_TIME
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_CPU_TIME
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_CPU_TIME_PERC
argument_list|,
operator|(
name|delta
operator|!=
literal|0
operator|)
condition|?
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|delta
operator|*
literal|1000000
operator|)
else|:
literal|0.0d
argument_list|)
expr_stmt|;
comment|// User
name|t1
operator|=
name|threadsBean
operator|.
name|getThreadUserTime
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|t0
operator|=
operator|(
name|Long
operator|)
name|previous
operator|.
name|computeIfAbsent
argument_list|(
name|tid
argument_list|,
name|id
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|getOrDefault
argument_list|(
name|STAT_USER_TIME
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_USER_TIME
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|STAT_USER_TIME_PERC
argument_list|,
operator|(
name|delta
operator|!=
literal|0
operator|)
condition|?
operator|(
name|t1
operator|-
name|t0
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|delta
operator|*
literal|1000000
operator|)
else|:
literal|0.0d
argument_list|)
expr_stmt|;
block|}
name|threads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|threads
return|;
block|}
specifier|private
name|void
name|align
parameter_list|(
name|AttributedStringBuilder
name|sb
parameter_list|,
name|String
name|val
parameter_list|,
name|int
name|width
parameter_list|,
name|Align
name|align
parameter_list|)
block|{
if|if
condition|(
name|align
operator|==
name|Align
operator|.
name|Left
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
operator|-
name|val
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
operator|-
name|val
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|display
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|display
operator|.
name|resize
argument_list|(
name|size
operator|.
name|getRows
argument_list|()
argument_list|,
name|size
operator|.
name|getColumns
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AttributedString
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AttributedStringBuilder
name|sb
init|=
operator|new
name|AttributedStringBuilder
argument_list|(
name|size
operator|.
name|getColumns
argument_list|()
argument_list|)
decl_stmt|;
comment|// Top headers
name|sb
operator|.
name|style
argument_list|(
name|sb
operator|.
name|style
argument_list|()
operator|.
name|bold
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ttop"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|sb
operator|.
name|style
argument_list|()
operator|.
name|boldOff
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" - "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%8tT"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|OperatingSystemMXBean
name|os
init|=
name|ManagementFactory
operator|.
name|getOperatingSystemMXBean
argument_list|()
decl_stmt|;
name|String
name|osinfo
init|=
literal|"OS: "
operator|+
name|os
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|os
operator|.
name|getVersion
argument_list|()
operator|+
literal|", "
operator|+
name|os
operator|.
name|getArch
argument_list|()
operator|+
literal|", "
operator|+
name|os
operator|.
name|getAvailableProcessors
argument_list|()
operator|+
literal|" cpus."
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|osinfo
operator|.
name|length
argument_list|()
operator|<
name|size
operator|.
name|getColumns
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|osinfo
argument_list|)
expr_stmt|;
name|ClassLoadingMXBean
name|cl
init|=
name|ManagementFactory
operator|.
name|getClassLoadingMXBean
argument_list|()
decl_stmt|;
name|String
name|clsinfo
init|=
literal|"Classes: "
operator|+
name|cl
operator|.
name|getLoadedClassCount
argument_list|()
operator|+
literal|" loaded, "
operator|+
name|cl
operator|.
name|getUnloadedClassCount
argument_list|()
operator|+
literal|" unloaded, "
operator|+
name|cl
operator|.
name|getTotalLoadedClassCount
argument_list|()
operator|+
literal|" loaded total."
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|clsinfo
operator|.
name|length
argument_list|()
operator|<
name|size
operator|.
name|getColumns
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|clsinfo
argument_list|)
expr_stmt|;
name|ThreadMXBean
name|th
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|String
name|thinfo
init|=
literal|"Threads: "
operator|+
name|th
operator|.
name|getThreadCount
argument_list|()
operator|+
literal|", peak: "
operator|+
name|th
operator|.
name|getPeakThreadCount
argument_list|()
operator|+
literal|", started: "
operator|+
name|th
operator|.
name|getTotalStartedThreadCount
argument_list|()
operator|+
literal|"."
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|thinfo
operator|.
name|length
argument_list|()
operator|<
name|size
operator|.
name|getColumns
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|thinfo
argument_list|)
expr_stmt|;
name|MemoryMXBean
name|me
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
name|String
name|meinfo
init|=
literal|"Memory: "
operator|+
literal|"heap: "
operator|+
name|memory
argument_list|(
name|me
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
argument_list|,
name|me
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
operator|+
literal|", non heap: "
operator|+
name|memory
argument_list|(
name|me
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
argument_list|,
name|me
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
operator|+
literal|"."
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|meinfo
operator|.
name|length
argument_list|()
operator|<
name|size
operator|.
name|getColumns
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|meinfo
argument_list|)
expr_stmt|;
name|StringBuilder
name|sbc
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sbc
operator|.
name|append
argument_list|(
literal|"GC: "
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|GarbageCollectorMXBean
name|gc
range|:
name|ManagementFactory
operator|.
name|getGarbageCollectorMXBeans
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|sbc
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|long
name|count
init|=
name|gc
operator|.
name|getCollectionCount
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|gc
operator|.
name|getCollectionTime
argument_list|()
decl_stmt|;
name|sbc
operator|.
name|append
argument_list|(
name|gc
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" col. / "
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|time
operator|/
literal|1000
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|time
operator|%
literal|1000
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" s"
argument_list|)
expr_stmt|;
block|}
name|sbc
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|+
name|sbc
operator|.
name|length
argument_list|()
operator|<
name|size
operator|.
name|getColumns
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|sbc
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Threads
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|threads
init|=
name|infos
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|threads
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|int
name|nb
init|=
name|Math
operator|.
name|min
argument_list|(
name|size
operator|.
name|getRows
argument_list|()
operator|-
name|lines
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|,
name|nthreads
operator|>
literal|0
condition|?
name|nthreads
else|:
name|threads
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// Compute values
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|values
init|=
name|threads
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|nb
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|thread
lambda|->
name|stats
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|key
lambda|->
name|columns
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|format
operator|.
name|apply
argument_list|(
name|thread
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|stats
control|)
block|{
name|int
name|width
init|=
name|values
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|map
lambda|->
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|orElse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|widths
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|header
operator|.
name|length
argument_list|()
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|widths
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|cstats
decl_stmt|;
if|if
condition|(
name|widths
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|Integer
operator|::
name|intValue
argument_list|)
operator|.
name|sum
argument_list|()
operator|+
name|stats
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<
name|size
operator|.
name|getColumns
argument_list|()
condition|)
block|{
name|cstats
operator|=
name|stats
expr_stmt|;
block|}
else|else
block|{
name|cstats
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|int
name|sz
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|stat
range|:
name|stats
control|)
block|{
name|int
name|nsz
init|=
name|sz
decl_stmt|;
if|if
condition|(
name|nsz
operator|>
literal|0
condition|)
block|{
name|nsz
operator|++
expr_stmt|;
block|}
name|nsz
operator|+=
name|widths
operator|.
name|get
argument_list|(
name|stat
argument_list|)
expr_stmt|;
if|if
condition|(
name|nsz
operator|<
name|size
operator|.
name|getColumns
argument_list|()
condition|)
block|{
name|sz
operator|=
name|nsz
expr_stmt|;
name|cstats
operator|.
name|add
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|// Headers
for|for
control|(
name|String
name|key
range|:
name|cstats
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|Column
name|col
init|=
name|columns
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|align
argument_list|(
name|sb
argument_list|,
name|col
operator|.
name|header
argument_list|,
name|widths
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|col
operator|.
name|align
argument_list|)
expr_stmt|;
block|}
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nb
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
name|thread
init|=
name|threads
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|tid
init|=
operator|(
name|Long
operator|)
name|thread
operator|.
name|get
argument_list|(
name|STAT_TID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|cstats
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|long
name|last
decl_stmt|;
name|Object
name|cur
init|=
name|thread
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Object
name|prv
init|=
name|previous
operator|.
name|computeIfAbsent
argument_list|(
name|tid
argument_list|,
name|id
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|cur
argument_list|)
decl_stmt|;
if|if
condition|(
name|prv
operator|!=
literal|null
operator|&&
operator|!
name|prv
operator|.
name|equals
argument_list|(
name|cur
argument_list|)
condition|)
block|{
name|changes
operator|.
name|computeIfAbsent
argument_list|(
name|tid
argument_list|,
name|id
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|now
argument_list|)
expr_stmt|;
name|last
operator|=
name|now
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|changes
operator|.
name|computeIfAbsent
argument_list|(
name|tid
argument_list|,
name|id
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|getOrDefault
argument_list|(
name|key
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|long
name|fade
init|=
name|delay
operator|*
literal|24
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|last
operator|<
name|fade
condition|)
block|{
name|int
name|r
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|now
operator|-
name|last
operator|)
operator|/
operator|(
name|fade
operator|/
literal|24
operator|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|sb
operator|.
name|style
argument_list|()
operator|.
name|foreground
argument_list|(
literal|255
operator|-
name|r
argument_list|)
operator|.
name|background
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|align
argument_list|(
name|sb
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|widths
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|align
argument_list|)
expr_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|sb
operator|.
name|style
argument_list|()
operator|.
name|backgroundOff
argument_list|()
operator|.
name|foregroundOff
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lines
operator|.
name|add
argument_list|(
name|sb
operator|.
name|toAttributedString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|display
operator|.
name|update
argument_list|(
name|lines
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|terminal
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|buildComparator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|==
literal|null
operator|||
name|sort
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sort
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|STAT_TID
argument_list|)
expr_stmt|;
block|}
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|comparator
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|sort
control|)
block|{
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|asc
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|columns
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported sort key: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|String
name|fkey
init|=
name|key
decl_stmt|;
name|Comparator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|>
name|comp
init|=
name|Comparator
operator|.
name|comparing
argument_list|(
operator|(
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Comparable
argument_list|>
argument_list|,
name|Comparable
argument_list|>
operator|)
name|m
lambda|->
name|m
operator|.
name|get
argument_list|(
name|fkey
argument_list|)
argument_list|,
name|asc
condition|?
name|Comparator
operator|.
name|reverseOrder
argument_list|()
else|:
name|Comparator
operator|.
name|naturalOrder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|comparator
operator|=
name|comparator
operator|.
name|thenComparing
argument_list|(
name|comp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|comparator
operator|=
name|comp
expr_stmt|;
block|}
block|}
return|return
name|comparator
return|;
block|}
specifier|private
name|void
name|register
parameter_list|(
name|String
name|name
parameter_list|,
name|Align
name|align
parameter_list|,
name|String
name|header
parameter_list|,
name|Function
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|format
parameter_list|)
block|{
name|columns
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Column
argument_list|(
name|name
argument_list|,
name|align
argument_list|,
name|header
argument_list|,
name|format
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|nanos
parameter_list|(
name|long
name|nanos
parameter_list|)
block|{
return|return
name|millis
argument_list|(
name|nanos
operator|/
literal|1_000_000L
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|millis
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
name|long
name|secs
init|=
name|millis
operator|/
literal|1_000
decl_stmt|;
name|millis
operator|=
name|millis
operator|%
literal|1000
expr_stmt|;
name|long
name|mins
init|=
name|secs
operator|/
literal|60
decl_stmt|;
name|secs
operator|=
name|secs
operator|%
literal|60
expr_stmt|;
name|long
name|hours
init|=
name|mins
operator|/
literal|60
decl_stmt|;
name|mins
operator|=
name|mins
operator|%
literal|60
expr_stmt|;
if|if
condition|(
name|hours
operator|>
literal|0
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d:%02d:%02d.%03d"
argument_list|,
name|hours
argument_list|,
name|mins
argument_list|,
name|secs
argument_list|,
name|millis
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mins
operator|>
literal|0
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d:%02d.%03d"
argument_list|,
name|mins
argument_list|,
name|secs
argument_list|,
name|millis
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%d.%03d"
argument_list|,
name|secs
argument_list|,
name|millis
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Function
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|padcut
parameter_list|(
name|int
name|nb
parameter_list|)
block|{
return|return
name|o
lambda|->
name|padcut
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|,
name|nb
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|padcut
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|nb
parameter_list|)
block|{
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|<=
name|nb
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|nb
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
while|while
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|<
name|nb
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|nb
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|str
argument_list|,
literal|0
argument_list|,
name|nb
operator|-
literal|3
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|memory
parameter_list|(
name|long
name|cur
parameter_list|,
name|long
name|max
parameter_list|)
block|{
if|if
condition|(
name|max
operator|>
literal|0
condition|)
block|{
name|String
name|smax
init|=
name|humanReadableByteCount
argument_list|(
name|max
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|cmax
init|=
name|humanReadableByteCount
argument_list|(
name|cur
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|smax
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|+
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|cmax
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|smax
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|cmax
argument_list|)
operator|.
name|append
argument_list|(
literal|" / "
argument_list|)
operator|.
name|append
argument_list|(
name|smax
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|humanReadableByteCount
argument_list|(
name|cur
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|humanReadableByteCount
parameter_list|(
name|long
name|bytes
parameter_list|,
name|boolean
name|si
parameter_list|)
block|{
name|int
name|unit
init|=
name|si
condition|?
literal|1000
else|:
literal|1024
decl_stmt|;
if|if
condition|(
name|bytes
operator|<
literal|1024
condition|)
return|return
name|bytes
operator|+
literal|" B"
return|;
name|int
name|exp
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|bytes
argument_list|)
operator|/
name|Math
operator|.
name|log
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|pre
init|=
operator|(
name|si
condition|?
literal|"kMGTPE"
else|:
literal|"KMGTPE"
operator|)
operator|.
name|charAt
argument_list|(
name|exp
operator|-
literal|1
argument_list|)
operator|+
operator|(
name|si
condition|?
literal|""
else|:
literal|"i"
operator|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.1f %sB"
argument_list|,
name|bytes
operator|/
name|Math
operator|.
name|pow
argument_list|(
name|unit
argument_list|,
name|exp
argument_list|)
argument_list|,
name|pre
argument_list|)
return|;
block|}
comment|/**      * This is for long running commands to be interrupted by ctrl-c      */
specifier|private
name|void
name|checkInterrupted
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InterruptedException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|bindKeys
parameter_list|(
name|KeyMap
argument_list|<
name|Operation
argument_list|>
name|map
parameter_list|)
block|{
name|map
operator|.
name|bind
argument_list|(
name|Operation
operator|.
name|HELP
argument_list|,
literal|"h"
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|Operation
operator|.
name|EXIT
argument_list|,
literal|"q"
argument_list|,
literal|":q"
argument_list|,
literal|"Q"
argument_list|,
literal|":Q"
argument_list|,
literal|"ZZ"
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|Operation
operator|.
name|INCREASE_DELAY
argument_list|,
literal|"+"
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|Operation
operator|.
name|DECREASE_DELAY
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|Operation
operator|.
name|CLEAR
argument_list|,
name|KeyMap
operator|.
name|ctrl
argument_list|(
literal|'L'
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|bind
argument_list|(
name|Operation
operator|.
name|REVERSE
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Column
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|Align
name|align
decl_stmt|;
specifier|final
name|String
name|header
decl_stmt|;
specifier|final
name|Function
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|format
decl_stmt|;
name|Column
parameter_list|(
name|String
name|name
parameter_list|,
name|Align
name|align
parameter_list|,
name|String
name|header
parameter_list|,
name|Function
argument_list|<
name|Object
argument_list|,
name|String
argument_list|>
name|format
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|align
operator|=
name|align
expr_stmt|;
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

