begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|info
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|BundleTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * @author splatch  *         Bundle tracker which check manifest headers for informations.  */
end_comment

begin_class
specifier|public
class|class
name|InfoBundleTrackerCustomizer
implements|implements
name|BundleTrackerCustomizer
block|{
comment|/**      * Logger.      */
specifier|private
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InfoBundleTrackerCustomizer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Bundle context.      */
specifier|private
specifier|final
name|BundleContext
name|context
decl_stmt|;
specifier|public
name|InfoBundleTrackerCustomizer
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Object
name|addingBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|)
block|{
name|Dictionary
name|headers
init|=
name|bundle
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|headerEntry
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
literal|"Karaf-Info"
argument_list|)
decl_stmt|;
name|InfoProvider
name|provider
init|=
name|createInfo
argument_list|(
name|headerEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Ignore incorrect info {} provided by bundle {}"
argument_list|,
name|headerEntry
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|bundle
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|InfoProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|provider
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|void
name|modifiedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|,
name|Object
name|object
parameter_list|)
block|{     }
specifier|public
name|void
name|removedBundle
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|BundleEvent
name|event
parameter_list|,
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|ServiceRegistration
condition|)
block|{
name|ServiceRegistration
name|service
init|=
operator|(
name|ServiceRegistration
operator|)
name|object
decl_stmt|;
name|service
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|InfoProvider
name|createInfo
parameter_list|(
name|String
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|entry
argument_list|,
literal|";="
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|countTokens
argument_list|()
operator|<
literal|3
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
do|do
block|{
name|String
name|property
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|property
argument_list|,
name|tokenizer
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Ignore property {} without value"
argument_list|,
name|property
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
do|;
return|return
operator|new
name|PojoInfoProvider
argument_list|(
name|name
argument_list|,
name|properties
argument_list|)
return|;
block|}
block|}
end_class

end_unit

