begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|commands
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|action
operator|.
name|command
operator|.
name|DefaultActionPreparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|GrepTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ANSI_COLOR
init|=
literal|"\u001b[1;31m"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ANSI_RESET
init|=
literal|"\u001b[0m"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGrep
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expectedColoredString
init|=
literal|"1\n"
operator|+
name|ANSI_COLOR
operator|+
literal|"2"
operator|+
name|ANSI_RESET
operator|+
literal|"\n"
operator|+
literal|"3\n4\n5\n6\n7\n8\n9"
decl_stmt|;
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-C"
argument_list|,
literal|"100"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"1\n2\n3\n4\n5\n6\n7\n8\n9\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedColoredString
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepInverted
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-v"
argument_list|,
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"mine"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"This is Hello World\nHello World!"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepMatching
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"mine"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"World is mine"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepMatchingWithColours
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|"mine"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"World is "
operator|+
name|ANSI_COLOR
operator|+
literal|"mine"
operator|+
name|ANSI_RESET
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepCount
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-c"
argument_list|,
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepCountInvert
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-c"
argument_list|,
literal|"-v"
argument_list|,
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepInvertedWithLineNumbers
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-n"
argument_list|,
literal|"-v"
argument_list|,
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"mine"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"     1  This is Hello World\n     3  Hello World!"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepMatchingWithLineNumbers
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-n"
argument_list|,
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"     1  This is Hello World\n     3  Hello World!"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepWordRegExp
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-w"
argument_list|,
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"This is Hello World\nWorld is mine"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepIs
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"This is Hello World\nWorld is mine"
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepRegExpWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"Th"
operator|+
name|ANSI_COLOR
operator|+
literal|"is"
operator|+
name|ANSI_RESET
operator|+
literal|" "
operator|+
name|ANSI_COLOR
operator|+
literal|"is"
operator|+
name|ANSI_RESET
operator|+
literal|" Hello World\nWorld "
operator|+
name|ANSI_COLOR
operator|+
literal|"is"
operator|+
name|ANSI_RESET
operator|+
literal|" mine"
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepWordRegExpWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"This "
operator|+
name|ANSI_COLOR
operator|+
literal|"is"
operator|+
name|ANSI_RESET
operator|+
literal|" Hello World\nWorld "
operator|+
name|ANSI_COLOR
operator|+
literal|"is"
operator|+
name|ANSI_RESET
operator|+
literal|" mine"
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-w"
argument_list|,
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|"is"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepLineRegExpWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
name|ANSI_COLOR
operator|+
literal|"This is Hello World"
operator|+
name|ANSI_RESET
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-x"
argument_list|,
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|".*Hello World"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepTwoLinesRegExpWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
name|ANSI_COLOR
operator|+
literal|"This is Hello World"
operator|+
name|ANSI_RESET
operator|+
literal|"\n"
operator|+
name|ANSI_COLOR
operator|+
literal|"Hello World!"
operator|+
name|ANSI_RESET
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-x"
argument_list|,
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|".*Hello World.*"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepIgnoreCaseWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"This is "
operator|+
name|ANSI_COLOR
operator|+
literal|"hello"
operator|+
name|ANSI_RESET
operator|+
literal|" World\n"
operator|+
name|ANSI_COLOR
operator|+
literal|"Hello"
operator|+
name|ANSI_RESET
operator|+
literal|" World!"
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-i"
argument_list|,
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|"HELLO"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepContextOneWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"This is "
operator|+
name|ANSI_COLOR
operator|+
literal|"Hello"
operator|+
name|ANSI_RESET
operator|+
literal|" World\n"
operator|+
literal|"World is mine\n"
operator|+
name|ANSI_COLOR
operator|+
literal|"Hello"
operator|+
name|ANSI_RESET
operator|+
literal|" World!"
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-C"
argument_list|,
literal|"1"
argument_list|,
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepBeforeContextOneWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"World is mine\n"
operator|+
name|ANSI_COLOR
operator|+
literal|"Hello World!"
operator|+
name|ANSI_RESET
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-B"
argument_list|,
literal|"1"
argument_list|,
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|"Hello World!"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepAfterContextOneWithColour
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"World is "
operator|+
name|ANSI_COLOR
operator|+
literal|"mine"
operator|+
name|ANSI_RESET
operator|+
literal|"\nHello World!"
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-A"
argument_list|,
literal|"1"
argument_list|,
literal|"--color"
argument_list|,
literal|"always"
argument_list|,
literal|"mine"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|returnedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|returnedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepOnlyMatching
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-o"
argument_list|,
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"He.*rld"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World\nHello World"
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrepOnlyMatchingGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"-o"
argument_list|,
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"(This).*(Hello)"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"This is Hello World\nWorld is mine\nHello World!\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"This is Hello"
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHonorColorNever
parameter_list|()
throws|throws
name|Exception
block|{
name|GrepAction
name|grep
init|=
operator|new
name|GrepAction
argument_list|()
decl_stmt|;
name|DefaultActionPreparator
name|preparator
init|=
operator|new
name|DefaultActionPreparator
argument_list|()
decl_stmt|;
name|preparator
operator|.
name|prepare
argument_list|(
name|grep
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"--color"
argument_list|,
literal|"never"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedString
init|=
name|systemInOutDecorator
argument_list|(
literal|"abc\n"
argument_list|,
name|grep
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|systemInOutDecorator
parameter_list|(
name|String
name|inputString
parameter_list|,
name|GrepAction
name|grepExecute
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|input
init|=
name|System
operator|.
name|in
decl_stmt|;
name|PrintStream
name|output
init|=
name|System
operator|.
name|out
decl_stmt|;
try|try
block|{
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|inputString
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|setIn
argument_list|(
name|bais
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|(
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|grepExecute
operator|.
name|execute
argument_list|()
operator|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Object
operator|::
name|toString
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|result
operator|.
name|charAt
argument_list|(
name|result
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\n'
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
name|System
operator|.
name|setIn
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

