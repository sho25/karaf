begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|COLOR_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|COLOR_RED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|INTENSITY_BOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|INTENSITY_NORMAL
import|;
end_import

begin_class
specifier|public
class|class
name|ShellUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShellUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|getBundleName
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_NAME
argument_list|)
decl_stmt|;
return|return
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|"Bundle "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
else|:
name|name
operator|+
literal|" ("
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
return|return
literal|"[STALE BUNDLE]"
return|;
block|}
specifier|public
specifier|static
name|String
name|getUnderlineString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getValueString
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|boolean
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|boolean
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|char
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|double
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|double
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|float
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|float
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|int
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|int
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|long
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|long
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|short
index|[]
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|short
index|[]
operator|)
name|obj
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Object
index|[]
name|array
init|=
operator|(
name|Object
index|[]
operator|)
name|obj
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|getValueString
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|obj
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Check if a bundle is a system bundle (start level< 50)      *      * @param bundleContext      * @param bundle      * @return true if the bundle has start level minor than 50      */
specifier|public
specifier|static
name|boolean
name|isASystemBundle
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|Bundle
name|bundle
parameter_list|)
block|{
name|int
name|level
init|=
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|getStartLevel
argument_list|()
decl_stmt|;
name|int
name|sbsl
init|=
literal|49
decl_stmt|;
specifier|final
name|String
name|sbslProp
init|=
name|bundleContext
operator|.
name|getProperty
argument_list|(
literal|"karaf.systemBundlesStartLevel"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sbslProp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sbsl
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|sbslProp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|level
operator|<=
name|sbsl
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getBoolean
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Object
name|s
init|=
name|session
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|s
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
name|Boolean
operator|)
name|s
return|;
block|}
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|logException
parameter_list|(
name|Session
name|session
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
comment|// Store last exception in session
name|session
operator|.
name|put
argument_list|(
name|Session
operator|.
name|LAST_EXCEPTION
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Log exception
name|String
name|name
init|=
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"CommandNotFoundException"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Unknown command entered"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"CommandException"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Command exception (Undefined option, ...)"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Exception caught while executing command"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Display exception
name|String
name|pst
init|=
name|getPrintStackTraces
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"always"
operator|.
name|equals
argument_list|(
name|pst
argument_list|)
condition|)
block|{
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|print
argument_list|(
name|COLOR_RED
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|session
operator|.
name|getConsole
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|print
argument_list|(
name|COLOR_DEFAULT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"CommandNotFoundException"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|str
init|=
name|COLOR_RED
operator|+
literal|"Command not found: "
operator|+
name|INTENSITY_BOLD
operator|+
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getCommand"
argument_list|)
operator|.
name|invoke
argument_list|(
name|t
argument_list|)
operator|+
name|INTENSITY_NORMAL
operator|+
name|COLOR_DEFAULT
decl_stmt|;
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|println
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"CommandException"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|str
decl_stmt|;
try|try
block|{
name|str
operator|=
operator|(
name|String
operator|)
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getNiceHelp"
argument_list|)
operator|.
name|invoke
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
name|str
operator|=
name|COLOR_RED
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
name|COLOR_DEFAULT
expr_stmt|;
block|}
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|println
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"execution"
operator|.
name|equals
argument_list|(
name|pst
argument_list|)
condition|)
block|{
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|print
argument_list|(
name|COLOR_RED
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|session
operator|.
name|getConsole
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|print
argument_list|(
name|COLOR_DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|str
init|=
name|COLOR_RED
operator|+
literal|"Error executing command: "
operator|+
operator|(
name|t
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|?
name|t
operator|.
name|getMessage
argument_list|()
else|:
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
operator|+
name|COLOR_DEFAULT
decl_stmt|;
name|session
operator|.
name|getConsole
argument_list|()
operator|.
name|println
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// ignore
block|}
block|}
specifier|private
specifier|static
name|String
name|getPrintStackTraces
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|Object
name|pst
init|=
name|session
operator|.
name|get
argument_list|(
name|Session
operator|.
name|PRINT_STACK_TRACES
argument_list|)
decl_stmt|;
if|if
condition|(
name|pst
operator|==
literal|null
condition|)
block|{
name|pst
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|Session
operator|.
name|PRINT_STACK_TRACES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pst
operator|==
literal|null
condition|)
block|{
return|return
literal|"never"
return|;
block|}
elseif|else
if|if
condition|(
name|pst
operator|instanceof
name|Boolean
condition|)
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|pst
operator|)
condition|?
literal|"always"
else|:
literal|"never"
return|;
block|}
else|else
block|{
return|return
name|pst
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getCurrentUserName
parameter_list|()
block|{
name|AccessControlContext
name|acc
init|=
name|AccessController
operator|.
name|getContext
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|Subject
operator|.
name|getSubject
argument_list|(
name|acc
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
name|subject
operator|.
name|getPrincipals
argument_list|(
name|UserPrincipal
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|subject
operator|.
name|getPrincipals
argument_list|(
name|UserPrincipal
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

