begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|History
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ShellUtil
import|;
end_import

begin_class
specifier|public
class|class
name|HeadlessSessionImpl
implements|implements
name|Session
block|{
specifier|final
name|SessionFactory
name|factory
decl_stmt|;
specifier|final
name|CommandSession
name|session
decl_stmt|;
specifier|final
name|Registry
name|registry
decl_stmt|;
specifier|public
name|HeadlessSessionImpl
parameter_list|(
name|SessionFactory
name|factory
parameter_list|,
name|CommandProcessor
name|processor
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
block|{
comment|// Factory
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
comment|// Registry
name|registry
operator|=
operator|new
name|RegistryImpl
argument_list|(
name|factory
operator|.
name|getRegistry
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|registry
argument_list|)
expr_stmt|;
comment|// Session
name|session
operator|=
name|processor
operator|.
name|createSession
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|Properties
name|sysProps
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|sysProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|session
operator|.
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|sysProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|put
argument_list|(
literal|".session"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|".commandSession"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
name|Session
operator|.
name|SCOPE
argument_list|,
literal|"shell:bundle:*"
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
name|Session
operator|.
name|SUBSHELL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|"USER"
argument_list|,
name|ShellUtil
operator|.
name|getCurrentUserName
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|put
argument_list|(
literal|"APPLICATION"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|,
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CommandSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|(
name|CharSequence
name|commandline
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|session
operator|.
name|execute
argument_list|(
name|commandline
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|session
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|session
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getKeyboard
parameter_list|()
block|{
return|return
name|session
operator|.
name|getKeyboard
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrintStream
name|getConsole
parameter_list|()
block|{
return|return
name|session
operator|.
name|getConsole
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|readLine
parameter_list|(
name|String
name|prompt
parameter_list|,
name|Character
name|mask
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Terminal
name|getTerminal
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|History
name|getHistory
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Registry
name|getRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
annotation|@
name|Override
specifier|public
name|SessionFactory
name|getFactory
parameter_list|()
block|{
return|return
name|factory
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|resolveCommand
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// TODO: optimize
if|if
condition|(
operator|!
name|name
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|String
index|[]
name|scopes
init|=
operator|(
operator|(
name|String
operator|)
name|get
argument_list|(
name|Session
operator|.
name|SCOPE
argument_list|)
operator|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
name|registry
operator|.
name|getCommands
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|scope
range|:
name|scopes
control|)
block|{
for|for
control|(
name|Command
name|command
range|:
name|commands
control|)
block|{
if|if
condition|(
operator|(
name|Session
operator|.
name|SCOPE_GLOBAL
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
operator|||
name|command
operator|.
name|getScope
argument_list|()
operator|.
name|equals
argument_list|(
name|scope
argument_list|)
operator|)
operator|&&
name|command
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|command
operator|.
name|getScope
argument_list|()
operator|+
literal|":"
operator|+
name|name
return|;
block|}
block|}
block|}
block|}
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

