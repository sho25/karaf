begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Signal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|terminal
operator|.
name|SignalSupport
import|;
end_import

begin_comment
comment|/**  * Created by gnodet on 27/02/14.  */
end_comment

begin_class
specifier|public
class|class
name|JLineTerminal
extends|extends
name|SignalSupport
implements|implements
name|Terminal
implements|,
name|Closeable
block|{
specifier|private
specifier|final
name|jline
operator|.
name|Terminal
name|terminal
decl_stmt|;
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
specifier|public
name|JLineTerminal
parameter_list|(
name|jline
operator|.
name|Terminal
name|terminal
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|terminal
operator|=
name|terminal
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|registerSignalHandler
argument_list|()
expr_stmt|;
block|}
specifier|public
name|jline
operator|.
name|Terminal
name|getTerminal
parameter_list|()
block|{
return|return
name|terminal
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
return|return
name|terminal
operator|.
name|getWidth
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHeight
parameter_list|()
block|{
return|return
name|terminal
operator|.
name|getHeight
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAnsiSupported
parameter_list|()
block|{
return|return
name|terminal
operator|.
name|isAnsiSupported
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEchoEnabled
parameter_list|()
block|{
return|return
name|terminal
operator|.
name|isEchoEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEchoEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|terminal
operator|.
name|setEchoEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|unregisterSignalHandler
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerSignalHandler
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|signalClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Signal"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|signalHandlerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.SignalHandler"
argument_list|)
decl_stmt|;
comment|// Implement signal handler
name|Object
name|signalHandler
init|=
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|signalHandlerClass
block|}
operator|,
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|JLineTerminal
operator|.
name|this
operator|.
name|signal
argument_list|(
name|Signal
operator|.
name|WINCH
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|)
empty_stmt|;
comment|// Register the signal handler, this code is equivalent to:
comment|// Signal.handle(new Signal("CONT"), signalHandler);
name|signalClass
operator|.
name|getMethod
argument_list|(
literal|"handle"
argument_list|,
name|signalClass
argument_list|,
name|signalHandlerClass
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|signalClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
literal|"WINCH"
argument_list|)
argument_list|,
name|signalHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore this exception, if the above failed, the signal API is incompatible with what we're expecting
block|}
block|}
end_class

begin_function
specifier|private
name|void
name|unregisterSignalHandler
parameter_list|()
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|signalClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.Signal"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|signalHandlerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.misc.SignalHandler"
argument_list|)
decl_stmt|;
name|Object
name|signalHandler
init|=
name|signalHandlerClass
operator|.
name|getField
argument_list|(
literal|"SIG_DFL"
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Register the signal handler, this code is equivalent to:
comment|// Signal.handle(new Signal("CONT"), signalHandler);
name|signalClass
operator|.
name|getMethod
argument_list|(
literal|"handle"
argument_list|,
name|signalClass
argument_list|,
name|signalHandlerClass
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|signalClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
literal|"WINCH"
argument_list|)
argument_list|,
name|signalHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore this exception, if the above failed, the signal API is incompatible with what we're expecting
block|}
block|}
end_function

unit|}
end_unit

