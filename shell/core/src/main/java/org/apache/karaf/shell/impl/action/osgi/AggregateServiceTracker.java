begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|action
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_comment
comment|/**  * Track multiple services by their type  */
end_comment

begin_class
specifier|public
class|class
name|AggregateServiceTracker
implements|implements
name|Satisfiable
block|{
specifier|private
specifier|final
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|private
specifier|final
name|Satisfiable
name|satisfiable
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Class
argument_list|,
name|SingleServiceTracker
argument_list|>
name|singleTrackers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|,
name|SingleServiceTracker
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Class
argument_list|,
name|MultiServiceTracker
argument_list|>
name|multiTrackers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|,
name|MultiServiceTracker
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|AggregateServiceTracker
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|,
name|Satisfiable
name|satisfiable
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
name|this
operator|.
name|satisfiable
operator|=
name|satisfiable
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|track
parameter_list|(
name|Class
name|service
parameter_list|,
name|boolean
name|multiple
parameter_list|)
block|{
if|if
condition|(
name|multiple
condition|)
block|{
if|if
condition|(
name|multiTrackers
operator|.
name|get
argument_list|(
name|service
argument_list|)
operator|==
literal|null
condition|)
block|{
name|MultiServiceTracker
name|tracker
init|=
operator|new
name|MultiServiceTracker
argument_list|(
name|bundleContext
argument_list|,
name|service
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|multiTrackers
operator|.
name|put
argument_list|(
name|service
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|singleTrackers
operator|.
name|get
argument_list|(
name|service
argument_list|)
operator|==
literal|null
condition|)
block|{
name|SingleServiceTracker
name|tracker
init|=
operator|new
name|SingleServiceTracker
argument_list|(
name|bundleContext
argument_list|,
name|service
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|singleTrackers
operator|.
name|putIfAbsent
argument_list|(
name|service
argument_list|,
name|tracker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|SingleServiceTracker
name|tracker
init|=
name|singleTrackers
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|tracker
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|cast
argument_list|(
name|tracker
operator|.
name|getService
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getServices
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|MultiServiceTracker
name|tracker
init|=
name|multiTrackers
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|tracker
operator|!=
literal|null
condition|?
name|tracker
operator|.
name|getServices
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|void
name|open
parameter_list|()
block|{
for|for
control|(
name|SingleServiceTracker
name|tracker
range|:
name|singleTrackers
operator|.
name|values
argument_list|()
control|)
block|{
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|MultiServiceTracker
name|tracker
range|:
name|multiTrackers
operator|.
name|values
argument_list|()
control|)
block|{
name|tracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
name|found
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|lost
argument_list|()
expr_stmt|;
for|for
control|(
name|MultiServiceTracker
name|tracker
range|:
name|multiTrackers
operator|.
name|values
argument_list|()
control|)
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SingleServiceTracker
name|tracker
range|:
name|singleTrackers
operator|.
name|values
argument_list|()
control|)
block|{
name|tracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
name|count
operator|.
name|get
argument_list|()
operator|==
name|singleTrackers
operator|.
name|size
argument_list|()
operator|+
name|multiTrackers
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMissingServices
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SingleServiceTracker
name|tracker
range|:
name|singleTrackers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tracker
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
name|tracker
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MultiServiceTracker
name|tracker
range|:
name|multiTrackers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tracker
operator|.
name|isSatisfied
argument_list|()
condition|)
block|{
name|missing
operator|.
name|add
argument_list|(
literal|"List<"
operator|+
name|tracker
operator|.
name|getClassName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|missing
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|found
parameter_list|()
block|{
if|if
condition|(
name|count
operator|.
name|incrementAndGet
argument_list|()
operator|==
name|singleTrackers
operator|.
name|size
argument_list|()
operator|+
name|multiTrackers
operator|.
name|size
argument_list|()
condition|)
block|{
name|satisfiable
operator|.
name|found
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updated
parameter_list|()
block|{
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|==
name|singleTrackers
operator|.
name|size
argument_list|()
operator|+
name|multiTrackers
operator|.
name|size
argument_list|()
condition|)
block|{
name|satisfiable
operator|.
name|updated
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lost
parameter_list|()
block|{
if|if
condition|(
name|count
operator|.
name|getAndDecrement
argument_list|()
operator|==
name|singleTrackers
operator|.
name|size
argument_list|()
operator|+
name|multiTrackers
operator|.
name|size
argument_list|()
condition|)
block|{
name|satisfiable
operator|.
name|lost
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

