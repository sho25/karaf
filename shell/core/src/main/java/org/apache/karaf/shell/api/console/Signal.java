begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_enum
specifier|public
enum|enum
name|Signal
block|{
name|HUP
argument_list|(
literal|1
argument_list|)
block|,
name|INT
argument_list|(
literal|2
argument_list|)
block|,
name|QUIT
argument_list|(
literal|3
argument_list|)
block|,
name|ILL
argument_list|(
literal|4
argument_list|)
block|,
name|TRAP
argument_list|(
literal|5
argument_list|)
block|,
name|IOT
argument_list|(
literal|6
argument_list|)
block|,
name|BUS
argument_list|(
literal|7
argument_list|)
block|,
name|FPE
argument_list|(
literal|8
argument_list|)
block|,
name|KILL
argument_list|(
literal|9
argument_list|)
block|,
name|USR1
argument_list|(
literal|10
argument_list|)
block|,
name|SEGV
argument_list|(
literal|11
argument_list|)
block|,
name|USR2
argument_list|(
literal|12
argument_list|)
block|,
name|PIPE
argument_list|(
literal|13
argument_list|)
block|,
name|ALRM
argument_list|(
literal|14
argument_list|)
block|,
name|TERM
argument_list|(
literal|15
argument_list|)
block|,
name|STKFLT
argument_list|(
literal|16
argument_list|)
block|,
name|CHLD
argument_list|(
literal|17
argument_list|)
block|,
name|CONT
argument_list|(
literal|18
argument_list|)
block|,
name|STOP
argument_list|(
literal|19
argument_list|)
block|,
name|TSTP
argument_list|(
literal|20
argument_list|)
block|,
name|TTIN
argument_list|(
literal|21
argument_list|)
block|,
name|TTOU
argument_list|(
literal|22
argument_list|)
block|,
name|URG
argument_list|(
literal|23
argument_list|)
block|,
name|XCPU
argument_list|(
literal|24
argument_list|)
block|,
name|XFSZ
argument_list|(
literal|25
argument_list|)
block|,
name|VTALRM
argument_list|(
literal|26
argument_list|)
block|,
name|PROF
argument_list|(
literal|27
argument_list|)
block|,
name|WINCH
argument_list|(
literal|28
argument_list|)
block|,
name|IO
argument_list|(
literal|29
argument_list|)
block|,
name|PWR
argument_list|(
literal|30
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Signal
argument_list|>
name|lookupTable
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|40
argument_list|)
decl_stmt|;
static|static
block|{
comment|// registering the signals in the lookup table to allow faster
comment|// string based signal lookups
for|for
control|(
name|Signal
name|s
range|:
name|Signal
operator|.
name|values
argument_list|()
control|)
block|{
name|lookupTable
operator|.
name|put
argument_list|(
name|s
operator|.
name|name
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Signal
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|lookupTable
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|numeric
decl_stmt|;
specifier|private
name|Signal
parameter_list|(
name|int
name|numeric
parameter_list|)
block|{
name|this
operator|.
name|numeric
operator|=
name|numeric
expr_stmt|;
block|}
specifier|public
name|int
name|getNumeric
parameter_list|()
block|{
return|return
name|numeric
return|;
block|}
block|}
end_enum

end_unit

