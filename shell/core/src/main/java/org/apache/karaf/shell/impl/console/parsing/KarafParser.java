begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|parsing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|jline
operator|.
name|ParsedLineImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|EOFError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|Parser
operator|.
name|Program
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|Parser
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|SyntaxError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|reader
operator|.
name|ParsedLine
import|;
end_import

begin_class
specifier|public
class|class
name|KarafParser
implements|implements
name|org
operator|.
name|jline
operator|.
name|reader
operator|.
name|Parser
block|{
specifier|private
specifier|final
name|Session
name|session
decl_stmt|;
specifier|public
name|KarafParser
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ParsedLine
name|parse
parameter_list|(
name|String
name|line
parameter_list|,
name|int
name|cursor
parameter_list|,
name|ParseContext
name|parseContext
parameter_list|)
throws|throws
name|SyntaxError
block|{
try|try
block|{
return|return
name|doParse
argument_list|(
name|line
argument_list|,
name|cursor
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EOFError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|jline
operator|.
name|reader
operator|.
name|EOFError
argument_list|(
name|e
operator|.
name|line
argument_list|()
argument_list|,
name|e
operator|.
name|column
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|missing
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|jline
operator|.
name|reader
operator|.
name|SyntaxError
argument_list|(
name|e
operator|.
name|line
argument_list|()
argument_list|,
name|e
operator|.
name|column
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ParsedLine
name|doParse
parameter_list|(
name|CharSequence
name|line
parameter_list|,
name|int
name|cursor
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|Parser
name|parser
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|Parser
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|Program
name|program
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
name|parser
operator|.
name|statements
argument_list|()
decl_stmt|;
comment|// Find corresponding statement
name|Statement
name|statement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|statements
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Statement
name|s
init|=
name|statements
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|start
argument_list|()
operator|<=
name|cursor
condition|)
block|{
name|boolean
name|isOk
init|=
literal|true
decl_stmt|;
comment|// check if there are only spaces after the previous statement
if|if
condition|(
name|s
operator|.
name|start
argument_list|()
operator|+
name|s
operator|.
name|length
argument_list|()
operator|<
name|cursor
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|s
operator|.
name|start
argument_list|()
operator|+
name|s
operator|.
name|length
argument_list|()
init|;
name|isOk
operator|&&
name|j
operator|<
name|cursor
condition|;
name|j
operator|++
control|)
block|{
name|isOk
operator|=
name|Character
operator|.
name|isWhitespace
argument_list|(
name|line
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|statement
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|statement
operator|!=
literal|null
operator|&&
name|statement
operator|.
name|tokens
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|statement
operator|.
name|tokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|cmdName
init|=
name|session
operator|.
name|resolveCommand
argument_list|(
name|statement
operator|.
name|tokens
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|cmdName
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Command
name|cmd
init|=
name|parts
operator|.
name|length
operator|==
literal|2
condition|?
name|session
operator|.
name|getRegistry
argument_list|()
operator|.
name|getCommand
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
else|:
literal|null
decl_stmt|;
name|Parser
name|cmdParser
init|=
name|cmd
operator|!=
literal|null
condition|?
name|cmd
operator|.
name|getParser
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|cmdParser
operator|!=
literal|null
condition|)
block|{
specifier|final
name|CommandLine
name|cmdLine
init|=
name|cmdParser
operator|.
name|parse
argument_list|(
name|session
argument_list|,
name|statement
operator|.
name|toString
argument_list|()
argument_list|,
name|cursor
operator|-
name|statement
operator|.
name|start
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|ParsedLine
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|word
parameter_list|()
block|{
return|return
name|cmdLine
operator|.
name|getCursorArgument
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|wordCursor
parameter_list|()
block|{
return|return
name|cmdLine
operator|.
name|getArgumentPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|wordIndex
parameter_list|()
block|{
return|return
name|cmdLine
operator|.
name|getCursorArgumentIndex
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|words
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|cmdLine
operator|.
name|getArguments
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|line
parameter_list|()
block|{
return|return
name|cmdLine
operator|.
name|getBuffer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|cursor
parameter_list|()
block|{
return|return
name|cmdLine
operator|.
name|getBufferPosition
argument_list|()
return|;
block|}
block|}
return|;
block|}
return|return
operator|new
name|ParsedLineImpl
argument_list|(
name|program
argument_list|,
name|statement
argument_list|,
name|cursor
argument_list|,
name|statement
operator|.
name|tokens
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO:
return|return
operator|new
name|ParsedLineImpl
argument_list|(
name|program
argument_list|,
name|program
argument_list|,
name|cursor
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|program
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

