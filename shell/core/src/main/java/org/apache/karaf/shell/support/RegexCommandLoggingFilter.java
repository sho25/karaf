begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLoggingFilter
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|RegexCommandLoggingFilter
implements|implements
name|CommandLoggingFilter
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_REPLACEMENT
init|=
literal|"*****"
decl_stmt|;
specifier|private
specifier|static
class|class
name|ReplaceRegEx
block|{
specifier|private
name|Pattern
name|pattern
decl_stmt|;
specifier|private
name|int
name|group
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|replacement
decl_stmt|;
specifier|public
name|ReplaceRegEx
parameter_list|(
name|String
name|pattern
parameter_list|,
name|int
name|group
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|";* *"
operator|+
name|pattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|replacement
operator|=
name|replacement
expr_stmt|;
block|}
specifier|public
name|CharSequence
name|filter
parameter_list|(
name|CharSequence
name|command
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|int
name|origLen
init|=
name|command
operator|.
name|length
argument_list|()
decl_stmt|;
name|command
operator|=
operator|new
name|StringBuilder
argument_list|(
name|command
argument_list|)
operator|.
name|replace
argument_list|(
name|m
operator|.
name|start
argument_list|(
name|group
argument_list|)
operator|+
name|offset
argument_list|,
name|m
operator|.
name|end
argument_list|(
name|group
argument_list|)
operator|+
name|offset
argument_list|,
name|replacement
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|offset
operator|+=
name|command
operator|.
name|length
argument_list|()
operator|-
name|origLen
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
block|}
specifier|private
name|String
name|pattern
decl_stmt|;
specifier|private
name|int
name|group
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|replacement
init|=
name|DEFAULT_REPLACEMENT
decl_stmt|;
name|ArrayList
argument_list|<
name|ReplaceRegEx
argument_list|>
name|regexs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|CharSequence
name|filter
parameter_list|(
name|CharSequence
name|command
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|command
operator|=
operator|new
name|ReplaceRegEx
argument_list|(
name|pattern
argument_list|,
name|group
argument_list|,
name|replacement
argument_list|)
operator|.
name|filter
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReplaceRegEx
name|regex
range|:
name|regexs
control|)
block|{
name|command
operator|=
name|regex
operator|.
name|filter
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
specifier|public
name|void
name|addRegEx
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|addRegEx
argument_list|(
name|pattern
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRegEx
parameter_list|(
name|String
name|pattern
parameter_list|,
name|int
name|group
parameter_list|)
block|{
name|addRegEx
argument_list|(
name|pattern
argument_list|,
name|group
argument_list|,
name|DEFAULT_REPLACEMENT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRegEx
parameter_list|(
name|String
name|pattern
parameter_list|,
name|int
name|group
parameter_list|,
name|String
name|replacement
parameter_list|)
block|{
name|regexs
operator|.
name|add
argument_list|(
operator|new
name|ReplaceRegEx
argument_list|(
name|pattern
argument_list|,
name|group
argument_list|,
name|replacement
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addCommandOption
parameter_list|(
name|String
name|option
parameter_list|,
name|String
modifier|...
name|commands
parameter_list|)
block|{
name|StringBuilder
name|pattern
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|command
range|:
name|commands
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|pattern
operator|.
name|append
argument_list|(
literal|"|"
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|.
name|append
argument_list|(
literal|") +.*?"
argument_list|)
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|option
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" +([^ ]+)"
argument_list|)
expr_stmt|;
name|regexs
operator|.
name|add
argument_list|(
operator|new
name|ReplaceRegEx
argument_list|(
name|pattern
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|DEFAULT_REPLACEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|String
name|getReplacement
parameter_list|()
block|{
return|return
name|replacement
return|;
block|}
specifier|public
name|void
name|setReplacement
parameter_list|(
name|String
name|replacement
parameter_list|)
block|{
name|this
operator|.
name|replacement
operator|=
name|replacement
expr_stmt|;
block|}
specifier|public
name|int
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
specifier|public
name|void
name|setGroup
parameter_list|(
name|int
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
block|}
end_class

end_unit

