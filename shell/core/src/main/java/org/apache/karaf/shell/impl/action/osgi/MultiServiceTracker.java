begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|action
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_comment
comment|/**  * Track multiple service by its type.  * When tracking multiple services, the dependency is always considered optional.  *  * @param<T> the service type (interface)..  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MultiServiceTracker
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|BundleContext
name|ctx
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ServiceReference
argument_list|<
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
name|refs
init|=
operator|new
name|HashMap
argument_list|<
name|ServiceReference
argument_list|<
name|T
argument_list|>
argument_list|,
name|T
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|open
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ServiceListener
name|listener
init|=
operator|new
name|ServiceListener
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|serviceChanged
parameter_list|(
name|ServiceEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|open
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|UNREGISTERING
condition|)
block|{
name|removeRef
argument_list|(
operator|(
name|ServiceReference
argument_list|<
name|T
argument_list|>
operator|)
name|event
operator|.
name|getServiceReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ServiceEvent
operator|.
name|REGISTERED
condition|)
block|{
name|addRef
argument_list|(
operator|(
name|ServiceReference
argument_list|<
name|T
argument_list|>
operator|)
name|event
operator|.
name|getServiceReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateState
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
name|MultiServiceTracker
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|ctx
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|updateState
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|services
parameter_list|)
function_decl|;
specifier|public
name|void
name|open
parameter_list|()
block|{
if|if
condition|(
name|open
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|filterString
init|=
literal|'('
operator|+
name|Constants
operator|.
name|OBJECTCLASS
operator|+
literal|'='
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|')'
decl_stmt|;
name|ctx
operator|.
name|addServiceListener
argument_list|(
name|listener
argument_list|,
name|filterString
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ServiceReference
argument_list|<
name|T
argument_list|>
argument_list|>
name|refs
init|=
name|ctx
operator|.
name|getServiceReferences
argument_list|(
name|clazz
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
argument_list|<
name|T
argument_list|>
name|ref
range|:
name|refs
control|)
block|{
name|addRef
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
comment|// this can never happen. (famous last words :)
block|}
name|updateState
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|open
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|ctx
operator|.
name|removeServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServiceReference
argument_list|>
name|oldRefs
decl_stmt|;
synchronized|synchronized
init|(
name|refs
init|)
block|{
name|oldRefs
operator|=
operator|new
name|ArrayList
argument_list|<
name|ServiceReference
argument_list|>
argument_list|(
name|refs
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|refs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ServiceReference
name|ref
range|:
name|oldRefs
control|)
block|{
name|ctx
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateState
parameter_list|()
block|{
name|List
argument_list|<
name|T
argument_list|>
name|svcs
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|refs
init|)
block|{
name|svcs
operator|.
name|addAll
argument_list|(
name|refs
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateState
argument_list|(
name|svcs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRef
parameter_list|(
name|ServiceReference
argument_list|<
name|T
argument_list|>
name|ref
parameter_list|)
block|{
name|T
name|service
init|=
name|ctx
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|refs
init|)
block|{
if|if
condition|(
operator|!
name|refs
operator|.
name|containsKey
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|refs
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|service
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|ctx
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeRef
parameter_list|(
name|ServiceReference
argument_list|<
name|T
argument_list|>
name|ref
parameter_list|)
block|{
synchronized|synchronized
init|(
name|refs
init|)
block|{
if|if
condition|(
name|refs
operator|.
name|remove
argument_list|(
name|ref
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|ctx
operator|.
name|ungetService
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

