begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Candidate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * Completer which contains multiple completers and aggregates them together.  */
end_comment

begin_class
specifier|public
class|class
name|AggregateCompleter
implements|implements
name|Completer
block|{
specifier|private
specifier|final
name|Collection
argument_list|<
name|Completer
argument_list|>
name|completers
decl_stmt|;
specifier|public
name|AggregateCompleter
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Completer
argument_list|>
name|completers
parameter_list|)
block|{
assert|assert
name|completers
operator|!=
literal|null
assert|;
name|this
operator|.
name|completers
operator|=
name|completers
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|public
name|int
name|complete
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
specifier|final
name|CommandLine
name|commandLine
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
name|List
argument_list|<
name|Candidate
argument_list|>
name|cands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|completeCandidates
argument_list|(
name|session
argument_list|,
name|commandLine
argument_list|,
name|cands
argument_list|)
expr_stmt|;
for|for
control|(
name|Candidate
name|cand
range|:
name|cands
control|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|cand
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|completeCandidates
parameter_list|(
name|Session
name|session
parameter_list|,
name|CommandLine
name|commandLine
parameter_list|,
name|List
argument_list|<
name|Candidate
argument_list|>
name|candidates
parameter_list|)
block|{
comment|// buffer could be null
assert|assert
name|candidates
operator|!=
literal|null
assert|;
for|for
control|(
name|Completer
name|completer
range|:
name|completers
control|)
block|{
name|completer
operator|.
name|completeCandidates
argument_list|(
name|session
argument_list|,
name|commandLine
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

