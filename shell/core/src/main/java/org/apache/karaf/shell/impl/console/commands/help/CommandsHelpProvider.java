begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|commands
operator|.
name|help
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
import|;
end_import

begin_class
specifier|public
class|class
name|CommandsHelpProvider
implements|implements
name|HelpProvider
block|{
specifier|public
name|String
name|getHelp
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"commands|"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"commands|"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|ps
operator|.
name|println
argument_list|(
name|SimpleAnsi
operator|.
name|INTENSITY_BOLD
operator|+
literal|"COMMANDS"
operator|+
name|SimpleAnsi
operator|.
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|ps
operator|.
name|println
argument_list|(
literal|"${command-list|"
operator|+
name|path
operator|+
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Command
argument_list|>
name|getCommands
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|path
parameter_list|)
block|{
comment|// TODO: this is not really clean
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
name|session
operator|.
name|getRegistry
argument_list|()
operator|.
name|getCommands
argument_list|()
decl_stmt|;
name|String
name|subshell
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|get
argument_list|(
name|Session
operator|.
name|SUBSHELL
argument_list|)
decl_stmt|;
name|String
name|completionMode
init|=
operator|(
name|String
operator|)
name|session
operator|.
name|get
argument_list|(
name|Session
operator|.
name|COMPLETION_MODE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Command
argument_list|>
name|matchingCommands
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Command
name|command
range|:
name|commands
control|)
block|{
name|String
name|name
init|=
name|command
operator|.
name|getScope
argument_list|()
operator|+
literal|":"
operator|+
name|command
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|completionMode
operator|!=
literal|null
operator|&&
name|completionMode
operator|.
name|equalsIgnoreCase
argument_list|(
name|Session
operator|.
name|COMPLETION_MODE_SUBSHELL
argument_list|)
condition|)
block|{
comment|// filter the help only for "global" commands
if|if
condition|(
name|subshell
operator|==
literal|null
operator|||
name|subshell
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|Session
operator|.
name|SCOPE_GLOBAL
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|completionMode
operator|!=
literal|null
operator|&&
operator|(
name|completionMode
operator|.
name|equalsIgnoreCase
argument_list|(
name|Session
operator|.
name|COMPLETION_MODE_SUBSHELL
argument_list|)
operator|||
name|completionMode
operator|.
name|equalsIgnoreCase
argument_list|(
name|Session
operator|.
name|COMPLETION_MODE_FIRST
argument_list|)
operator|)
condition|)
block|{
comment|// filter the help only for commands local to the subshell
if|if
condition|(
operator|!
name|name
operator|.
name|startsWith
argument_list|(
name|subshell
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|matchingCommands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|matchingCommands
return|;
block|}
block|}
end_class

end_unit

