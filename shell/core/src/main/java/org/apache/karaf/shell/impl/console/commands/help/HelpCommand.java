begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|commands
operator|.
name|help
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|CommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|ArgumentCommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|StringsCompleter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|COLOR_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|COLOR_RED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|INTENSITY_BOLD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
operator|.
name|SimpleAnsi
operator|.
name|INTENSITY_NORMAL
import|;
end_import

begin_class
specifier|public
class|class
name|HelpCommand
implements|implements
name|Command
block|{
specifier|public
name|HelpCommand
parameter_list|(
name|SessionFactory
name|factory
parameter_list|)
block|{
name|Registry
name|registry
init|=
name|factory
operator|.
name|getRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|SimpleHelpProvider
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|ShellHelpProvider
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|SingleCommandHelpProvider
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|CommandsHelpProvider
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|CommandListHelpProvider
argument_list|()
argument_list|)
expr_stmt|;
name|registry
operator|.
name|register
argument_list|(
operator|new
name|BundleHelpProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
name|Session
operator|.
name|SCOPE_GLOBAL
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"help"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Displays this help or help about a command"
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|(
name|Session
name|session
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|arguments
operator|.
name|contains
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|printHelp
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|arguments
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|msg
init|=
name|COLOR_RED
operator|+
literal|"Error executing command "
operator|+
name|INTENSITY_BOLD
operator|+
name|getName
argument_list|()
operator|+
name|INTENSITY_NORMAL
operator|+
name|COLOR_DEFAULT
operator|+
literal|": "
operator|+
literal|"too many arguments specified"
decl_stmt|;
throw|throw
operator|new
name|CommandException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|String
name|path
init|=
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|help
init|=
name|getHelp
argument_list|(
name|session
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|help
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|help
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Completer
name|getCompleter
parameter_list|(
specifier|final
name|boolean
name|scoped
parameter_list|)
block|{
return|return
operator|new
name|Completer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|complete
parameter_list|(
name|Session
name|session
parameter_list|,
name|CommandLine
name|commandLine
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
name|String
index|[]
name|args
init|=
name|commandLine
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|argIndex
init|=
name|commandLine
operator|.
name|getCursorArgumentIndex
argument_list|()
decl_stmt|;
name|StringsCompleter
name|completer
init|=
operator|new
name|StringsCompleter
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|argIndex
operator|==
literal|0
condition|)
block|{
return|return
name|completer
operator|.
name|complete
argument_list|(
name|session
argument_list|,
operator|new
name|ArgumentCommandLine
argument_list|(
name|args
index|[
name|argIndex
index|]
argument_list|,
name|commandLine
operator|.
name|getArgumentPosition
argument_list|()
argument_list|)
argument_list|,
name|candidates
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|verifyCompleter
argument_list|(
name|session
argument_list|,
name|completer
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// TODO: use CommandNamesCompleter and better completion wrt parsing etc...
name|completer
operator|=
operator|new
name|StringsCompleter
argument_list|()
expr_stmt|;
for|for
control|(
name|Command
name|command
range|:
name|session
operator|.
name|getRegistry
argument_list|()
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|Session
operator|.
name|SCOPE_GLOBAL
operator|.
name|equals
argument_list|(
name|command
operator|.
name|getScope
argument_list|()
argument_list|)
condition|)
block|{
name|completer
operator|.
name|getStrings
argument_list|()
operator|.
name|add
argument_list|(
name|command
operator|.
name|getScope
argument_list|()
operator|+
literal|":"
operator|+
name|command
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|completer
operator|.
name|getStrings
argument_list|()
operator|.
name|add
argument_list|(
name|command
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|completer
operator|.
name|getStrings
argument_list|()
operator|.
name|add
argument_list|(
literal|"--help"
argument_list|)
expr_stmt|;
if|if
condition|(
name|argIndex
operator|==
literal|1
condition|)
block|{
name|int
name|res
decl_stmt|;
if|if
condition|(
name|argIndex
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|res
operator|=
name|completer
operator|.
name|complete
argument_list|(
name|session
argument_list|,
operator|new
name|ArgumentCommandLine
argument_list|(
name|args
index|[
name|argIndex
index|]
argument_list|,
name|commandLine
operator|.
name|getArgumentPosition
argument_list|()
argument_list|)
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
name|completer
operator|.
name|complete
argument_list|(
name|session
argument_list|,
operator|new
name|ArgumentCommandLine
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
block|}
return|return
name|res
operator|+
operator|(
name|commandLine
operator|.
name|getBufferPosition
argument_list|()
operator|-
name|commandLine
operator|.
name|getArgumentPosition
argument_list|()
operator|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|verifyCompleter
argument_list|(
name|session
argument_list|,
name|completer
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|protected
name|boolean
name|verifyCompleter
parameter_list|(
name|Session
name|session
parameter_list|,
name|Completer
name|completer
parameter_list|,
name|String
name|argument
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|completer
operator|.
name|complete
argument_list|(
name|session
argument_list|,
operator|new
name|ArgumentCommandLine
argument_list|(
name|argument
argument_list|,
name|argument
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|candidates
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|candidates
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Parser
name|getParser
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|printHelp
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|INTENSITY_BOLD
operator|+
literal|"DESCRIPTION"
operator|+
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|INTENSITY_BOLD
operator|+
name|getName
argument_list|()
operator|+
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|INTENSITY_BOLD
operator|+
literal|"SYNTAX"
operator|+
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|" [options] [command]"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|INTENSITY_BOLD
operator|+
literal|"ARGUMENTS"
operator|+
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|INTENSITY_BOLD
operator|+
literal|"command"
operator|+
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"                "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Command to display help for"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|INTENSITY_BOLD
operator|+
literal|"OPTIONS"
operator|+
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|INTENSITY_BOLD
operator|+
literal|"--help"
operator|+
name|INTENSITY_NORMAL
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"                "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Display this help message"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getHelp
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"%root%"
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"data"
argument_list|,
literal|"${"
operator|+
name|path
operator|+
literal|"}"
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|HelpProvider
argument_list|>
name|providers
init|=
name|session
operator|.
name|getRegistry
argument_list|()
operator|.
name|getServices
argument_list|(
name|HelpProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterpolationHelper
operator|.
name|performSubstitution
argument_list|(
name|props
argument_list|,
operator|new
name|InterpolationHelper
operator|.
name|SubstitutionCallback
argument_list|()
block|{
specifier|public
name|String
name|getValue
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|HelpProvider
name|hp
range|:
name|providers
control|)
block|{
name|String
name|result
init|=
name|hp
operator|.
name|getHelp
argument_list|(
name|session
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|removeNewLine
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|props
operator|.
name|get
argument_list|(
literal|"data"
argument_list|)
return|;
block|}
specifier|private
name|String
name|removeNewLine
parameter_list|(
name|String
name|help
parameter_list|)
block|{
if|if
condition|(
name|help
operator|!=
literal|null
operator|&&
name|help
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|help
operator|=
name|help
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|help
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|help
return|;
block|}
block|}
end_class

end_unit

