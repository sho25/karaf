begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|parsing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_comment
comment|/**  *  The result of a delimited buffer.  */
end_comment

begin_class
specifier|public
class|class
name|CommandLineImpl
implements|implements
name|CommandLine
block|{
specifier|private
specifier|final
name|String
index|[]
name|arguments
decl_stmt|;
specifier|private
specifier|final
name|int
name|cursorArgumentIndex
decl_stmt|;
specifier|private
specifier|final
name|int
name|argumentPosition
decl_stmt|;
specifier|private
specifier|final
name|int
name|bufferPosition
decl_stmt|;
specifier|private
specifier|final
name|String
name|buffer
decl_stmt|;
specifier|public
specifier|static
name|CommandLine
name|build
parameter_list|(
name|String
name|buffer
parameter_list|,
name|int
name|cursor
parameter_list|)
block|{
name|Parser
name|parser
init|=
operator|new
name|Parser
argument_list|(
name|buffer
argument_list|,
name|cursor
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|program
init|=
name|parser
operator|.
name|program
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pipe
init|=
name|program
operator|.
name|get
argument_list|(
name|parser
operator|.
name|c0
argument_list|)
operator|.
name|get
argument_list|(
name|parser
operator|.
name|c1
argument_list|)
decl_stmt|;
return|return
operator|new
name|CommandLineImpl
argument_list|(
name|pipe
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|pipe
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|parser
operator|.
name|c2
argument_list|,
name|parser
operator|.
name|c3
argument_list|,
name|cursor
argument_list|,
name|buffer
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|new
name|CommandLineImpl
argument_list|(
operator|new
name|String
index|[]
block|{
name|buffer
block|}
argument_list|,
literal|0
argument_list|,
name|cursor
argument_list|,
name|cursor
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
comment|/**      *  @param  arguments           the array of tokens      *  @param  cursorArgumentIndex the token index of the cursor      *  @param  argumentPosition    the position of the cursor in the      *                              current token      *  @param  bufferPosition      the position of the cursor in the whole buffer      *  @param buffer               the whole buffer      */
specifier|public
name|CommandLineImpl
parameter_list|(
name|String
index|[]
name|arguments
parameter_list|,
name|int
name|cursorArgumentIndex
parameter_list|,
name|int
name|argumentPosition
parameter_list|,
name|int
name|bufferPosition
parameter_list|,
name|String
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
name|this
operator|.
name|cursorArgumentIndex
operator|=
name|cursorArgumentIndex
expr_stmt|;
name|this
operator|.
name|argumentPosition
operator|=
name|argumentPosition
expr_stmt|;
name|this
operator|.
name|bufferPosition
operator|=
name|bufferPosition
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
specifier|public
name|int
name|getCursorArgumentIndex
parameter_list|()
block|{
return|return
name|this
operator|.
name|cursorArgumentIndex
return|;
block|}
specifier|public
name|String
name|getCursorArgument
parameter_list|()
block|{
if|if
condition|(
operator|(
name|cursorArgumentIndex
operator|<
literal|0
operator|)
operator|||
operator|(
name|cursorArgumentIndex
operator|>=
name|arguments
operator|.
name|length
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|arguments
index|[
name|cursorArgumentIndex
index|]
return|;
block|}
specifier|public
name|int
name|getArgumentPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|argumentPosition
return|;
block|}
specifier|public
name|String
index|[]
name|getArguments
parameter_list|()
block|{
return|return
name|this
operator|.
name|arguments
return|;
block|}
specifier|public
name|int
name|getBufferPosition
parameter_list|()
block|{
return|return
name|this
operator|.
name|bufferPosition
return|;
block|}
specifier|public
name|String
name|getBuffer
parameter_list|()
block|{
return|return
name|this
operator|.
name|buffer
return|;
block|}
block|}
end_class

end_unit

