begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|api
operator|.
name|CommandSessionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLoggingFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LoggingCommandSessionListener
implements|implements
name|CommandSessionListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoggingCommandSessionListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|CommandLoggingFilter
argument_list|>
name|filters
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
specifier|public
name|Collection
argument_list|<
name|CommandLoggingFilter
argument_list|>
name|getFilters
parameter_list|()
block|{
return|return
name|filters
return|;
block|}
specifier|public
name|void
name|setFilters
parameter_list|(
name|Collection
argument_list|<
name|CommandLoggingFilter
argument_list|>
name|filters
parameter_list|)
block|{
name|this
operator|.
name|filters
operator|=
name|filters
expr_stmt|;
block|}
specifier|private
name|CharSequence
name|filter
parameter_list|(
name|CharSequence
name|command
parameter_list|)
block|{
for|for
control|(
name|CommandLoggingFilter
name|filter
range|:
name|filters
control|)
block|{
name|command
operator|=
name|filter
operator|.
name|filter
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|command
return|;
block|}
specifier|public
name|void
name|beforeExecute
parameter_list|(
name|CommandSession
name|session
parameter_list|,
name|CharSequence
name|command
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|command
operator|=
name|filter
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Executing command: '"
operator|+
name|command
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|afterExecute
parameter_list|(
name|CommandSession
name|session
parameter_list|,
name|CharSequence
name|command
parameter_list|,
name|Exception
name|exception
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|command
operator|=
name|filter
argument_list|(
name|command
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Command: '"
operator|+
name|command
operator|+
literal|"' failed"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Command: '"
operator|+
name|command
operator|+
literal|"' failed: "
operator|+
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|afterExecute
parameter_list|(
name|CommandSession
name|session
parameter_list|,
name|CharSequence
name|command
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|command
operator|=
name|filter
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Command: '"
operator|+
name|command
operator|+
literal|"' returned '"
operator|+
name|result
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

