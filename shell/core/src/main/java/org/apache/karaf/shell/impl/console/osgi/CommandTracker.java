begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|CommandProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|Reflective
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Descriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|CommandTracker
extends|extends
name|ServiceTracker
argument_list|<
name|Object
argument_list|,
name|List
argument_list|<
name|Command
argument_list|>
argument_list|>
block|{
specifier|final
name|SessionFactory
name|sessionFactory
decl_stmt|;
specifier|public
name|CommandTracker
parameter_list|(
name|SessionFactory
name|sessionFactory
parameter_list|,
name|BundleContext
name|context
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
name|super
argument_list|(
name|context
argument_list|,
name|createFilter
argument_list|(
name|context
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|sessionFactory
operator|=
name|sessionFactory
expr_stmt|;
block|}
specifier|static
specifier|private
name|Filter
name|createFilter
parameter_list|(
name|BundleContext
name|context
parameter_list|)
throws|throws
name|InvalidSyntaxException
block|{
return|return
name|context
operator|.
name|createFilter
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"(&(%s=*)(%s=*)(!(%s=%s))(!(%s=%s)))"
argument_list|,
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|,
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
literal|"org.apache.felix.gogo.commands.CommandWithAction"
argument_list|,
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
literal|"org.apache.karaf.shell.commands.CommandWithAction"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Command
argument_list|>
name|addingService
parameter_list|(
specifier|final
name|ServiceReference
argument_list|<
name|Object
argument_list|>
name|reference
parameter_list|)
block|{
specifier|final
name|String
name|scope
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_SCOPE
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|function
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|CommandProcessor
operator|.
name|COMMAND_FUNCTION
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|function
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Object
name|f
range|:
operator|(
operator|(
name|Object
index|[]
operator|)
name|function
operator|)
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|names
operator|.
name|add
argument_list|(
name|function
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Command
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|Function
name|target
init|=
operator|new
name|CommandProxy
argument_list|(
name|context
argument_list|,
name|reference
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|Command
name|command
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
for|for
control|(
name|Method
name|method
range|:
name|getMethods
argument_list|()
control|)
block|{
name|Descriptor
name|d
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|Descriptor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
return|return
name|d
operator|.
name|value
argument_list|()
return|;
block|}
block|}
name|Object
name|property
init|=
name|reference
operator|.
name|getProperty
argument_list|(
literal|"osgi.command.description"
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
return|return
name|property
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Completer
name|getCompleter
parameter_list|(
specifier|final
name|boolean
name|scoped
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Parser
name|getParser
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|(
name|Session
name|session
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: remove not really nice cast
name|CommandSession
name|commandSession
init|=
operator|(
name|CommandSession
operator|)
name|session
operator|.
name|get
argument_list|(
literal|".commandSession"
argument_list|)
decl_stmt|;
return|return
name|target
operator|.
name|execute
argument_list|(
name|commandSession
argument_list|,
name|arguments
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Method
argument_list|>
name|getMethods
parameter_list|()
block|{
name|Object
name|target
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|func
init|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|funcs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|funcs
operator|.
name|add
argument_list|(
literal|"is"
operator|+
name|func
argument_list|)
expr_stmt|;
name|funcs
operator|.
name|add
argument_list|(
literal|"get"
operator|+
name|func
argument_list|)
expr_stmt|;
name|funcs
operator|.
name|add
argument_list|(
literal|"set"
operator|+
name|func
argument_list|)
expr_stmt|;
if|if
condition|(
name|Reflective
operator|.
name|KEYWORDS
operator|.
name|contains
argument_list|(
name|func
argument_list|)
condition|)
block|{
name|funcs
operator|.
name|add
argument_list|(
literal|"_"
operator|+
name|func
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|funcs
operator|.
name|add
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Method
name|method
range|:
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|funcs
operator|.
name|contains
argument_list|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|methods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
return|return
name|methods
return|;
block|}
block|}
decl_stmt|;
name|sessionFactory
operator|.
name|getRegistry
argument_list|()
operator|.
name|register
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|commands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|commands
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|Object
argument_list|>
name|reference
parameter_list|,
name|List
argument_list|<
name|Command
argument_list|>
name|commands
parameter_list|)
block|{
for|for
control|(
name|Command
name|command
range|:
name|commands
control|)
block|{
name|sessionFactory
operator|.
name|getRegistry
argument_list|()
operator|.
name|unregister
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

