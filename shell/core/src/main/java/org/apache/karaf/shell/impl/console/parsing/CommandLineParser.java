begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|parsing
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|parsing
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|parsing
operator|.
name|GogoParser
import|;
end_import

begin_class
specifier|public
class|class
name|CommandLineParser
block|{
specifier|public
specifier|static
name|CommandLine
name|buildCommandLine
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|command
parameter_list|,
name|int
name|cursor
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|rem
init|=
name|command
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|GogoParser
name|cmdNameParser
init|=
operator|new
name|GogoParser
argument_list|(
name|rem
argument_list|,
name|rem
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|cmdNameParser
operator|.
name|value
argument_list|()
decl_stmt|;
name|name
operator|=
name|session
operator|.
name|resolveCommand
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Parser
name|cmdParser
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Command
name|cmd
range|:
name|session
operator|.
name|getRegistry
argument_list|()
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getScope
argument_list|()
operator|+
literal|":"
operator|+
name|cmd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|cmdParser
operator|=
name|cmd
operator|.
name|getParser
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cmdParser
operator|==
literal|null
condition|)
block|{
name|cmdParser
operator|=
operator|new
name|DefaultParser
argument_list|()
expr_stmt|;
block|}
name|CommandLine
name|cmdLine
init|=
name|cmdParser
operator|.
name|parse
argument_list|(
name|session
argument_list|,
name|rem
argument_list|,
name|cursor
operator|-
name|pos
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|cmdLine
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|rem
operator|.
name|length
argument_list|()
condition|)
block|{
name|char
name|ch
init|=
name|rem
operator|.
name|charAt
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|';'
operator|||
name|ch
operator|==
literal|'|'
condition|)
block|{
name|length
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized character: '"
operator|+
name|ch
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|pos
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|cursor
operator|<=
name|pos
condition|)
block|{
return|return
name|cmdLine
return|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|parse
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|command
parameter_list|)
block|{
name|StringBuilder
name|parsed
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|command
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|rem
init|=
name|command
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|GogoParser
name|cmdNameParser
init|=
operator|new
name|GogoParser
argument_list|(
name|rem
argument_list|,
name|rem
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|cmdNameParser
operator|.
name|value
argument_list|()
decl_stmt|;
name|name
operator|=
name|session
operator|.
name|resolveCommand
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Parser
name|cmdParser
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Command
name|cmd
range|:
name|session
operator|.
name|getRegistry
argument_list|()
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|getScope
argument_list|()
operator|+
literal|":"
operator|+
name|cmd
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|cmdParser
operator|=
name|cmd
operator|.
name|getParser
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cmdParser
operator|==
literal|null
condition|)
block|{
name|cmdParser
operator|=
operator|new
name|DefaultParser
argument_list|()
expr_stmt|;
block|}
name|CommandLine
name|cmdLine
init|=
name|cmdParser
operator|.
name|parse
argument_list|(
name|session
argument_list|,
name|rem
argument_list|,
name|rem
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmdLine
operator|.
name|getArguments
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|cmdLine
operator|.
name|getArguments
argument_list|()
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|parsed
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|parsed
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
name|int
name|length
init|=
name|cmdLine
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|rem
operator|.
name|length
argument_list|()
condition|)
block|{
name|char
name|ch
init|=
name|rem
operator|.
name|charAt
argument_list|(
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|';'
operator|||
name|ch
operator|==
literal|'|'
condition|)
block|{
name|parsed
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|parsed
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|parsed
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|length
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unrecognized character: '"
operator|+
name|ch
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|pos
operator|+=
name|length
expr_stmt|;
block|}
return|return
name|parsed
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

