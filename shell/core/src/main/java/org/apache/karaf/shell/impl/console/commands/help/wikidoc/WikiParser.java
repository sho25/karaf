begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|commands
operator|.
name|help
operator|.
name|wikidoc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|StringEscapeUtils
import|;
end_import

begin_comment
comment|/**  * Parses wiki syntax from a reader and calls a Wikivisitor with the   * tokens it finds  */
end_comment

begin_class
specifier|public
class|class
name|WikiParser
block|{
name|WikiVisitor
name|visitor
decl_stmt|;
specifier|public
name|WikiParser
parameter_list|(
name|WikiVisitor
name|visitor
parameter_list|)
block|{
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
name|parse
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|String
name|unescaped
init|=
name|StringEscapeUtils
operator|.
name|unescapeJava
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
operator|new
name|Tokenizer
argument_list|(
name|unescaped
argument_list|)
decl_stmt|;
name|String
name|token
decl_stmt|;
name|boolean
name|bold
init|=
literal|false
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"\u001B[h*"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|int
name|tabs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|token
operator|.
name|length
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'\t'
condition|;
name|i
operator|++
control|)
block|{
name|tabs
operator|++
expr_stmt|;
block|}
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tabs
condition|;
name|i
operator|++
control|)
block|{
name|token
operator|=
literal|"    "
operator|+
name|token
expr_stmt|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|token
operator|.
name|length
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|visitor
operator|.
name|startPara
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"\u001B"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|parseEsc
argument_list|(
name|tokenizer
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"["
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|parseLink
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"h"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|parseHeading
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|parseEnumeration
argument_list|(
name|tokenizer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"**"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|bold
operator|=
operator|!
name|bold
expr_stmt|;
name|visitor
operator|.
name|bold
argument_list|(
name|bold
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visitor
operator|.
name|text
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|first
condition|)
block|{
name|visitor
operator|.
name|startPara
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|endPara
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|parseEsc
parameter_list|(
name|Tokenizer
name|tokenizer
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|visitor
operator|.
name|text
argument_list|(
name|token
operator|+
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"\u001B[h*"
argument_list|)
operator|+
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"\u001B[]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseEnumeration
parameter_list|(
name|Tokenizer
name|tokenizer
parameter_list|)
block|{
name|String
name|text
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"-\n"
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|enumeration
argument_list|(
name|text
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseHeading
parameter_list|(
name|Tokenizer
name|tokenizer
parameter_list|)
block|{
name|String
name|level
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"123456789"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|level
operator|.
name|matches
argument_list|(
literal|"[123456789]"
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|text
argument_list|(
literal|"h"
operator|+
name|level
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|dot
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|".\n"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"."
operator|.
name|equals
argument_list|(
name|dot
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|text
argument_list|(
literal|"h"
operator|+
name|level
operator|+
name|dot
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|heading
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|heading
operator|==
literal|null
condition|)
block|{
name|heading
operator|=
literal|""
expr_stmt|;
block|}
name|visitor
operator|.
name|heading
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|level
argument_list|)
argument_list|,
name|heading
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|parseLink
parameter_list|(
name|Tokenizer
name|tokenizer
parameter_list|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"]"
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|link
argument_list|(
name|token
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Tokenizer
block|{
specifier|final
name|String
name|str
decl_stmt|;
name|int
name|pos
decl_stmt|;
specifier|public
name|Tokenizer
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|this
operator|.
name|str
operator|=
name|str
expr_stmt|;
block|}
specifier|public
name|String
name|nextToken
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|escape
init|=
literal|false
decl_stmt|;
name|boolean
name|del
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|pos
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|escape
condition|)
block|{
name|escape
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|del
condition|)
block|{
name|pos
operator|--
expr_stmt|;
break|break;
block|}
else|else
block|{
name|escape
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|delim
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|del
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|del
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|pos
operator|--
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
name|del
condition|)
block|{
name|pos
operator|--
expr_stmt|;
break|break;
block|}
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|toString
argument_list|()
else|:
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

