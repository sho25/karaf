begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *  http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|action
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Completion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Candidate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|ArgumentCommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|FileCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|NullCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|StringsCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
operator|.
name|UriCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|converter
operator|.
name|GenericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ArgumentCompleter
implements|implements
name|Completer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArgumentCompleter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ActionCommand
name|command
decl_stmt|;
specifier|final
name|CandidateCompleter
name|commandCompleter
decl_stmt|;
specifier|final
name|CandidateCompleter
name|optionsCompleter
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Completer
argument_list|>
name|argsCompleters
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Completer
argument_list|>
name|optionalCompleters
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Option
argument_list|,
name|Field
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Option
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Field
argument_list|>
name|arguments
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|ArgumentCompleter
parameter_list|(
name|ActionCommand
name|command
parameter_list|,
name|boolean
name|scoped
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|actionClass
init|=
name|command
operator|.
name|getActionClass
argument_list|()
decl_stmt|;
comment|// Command name completer
name|Command
name|cmd
init|=
name|actionClass
operator|.
name|getAnnotation
argument_list|(
name|Command
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
index|[]
name|names
init|=
name|scoped
operator|||
name|Session
operator|.
name|SCOPE_GLOBAL
operator|.
name|equals
argument_list|(
name|cmd
operator|.
name|scope
argument_list|()
argument_list|)
condition|?
operator|new
name|String
index|[]
block|{
name|cmd
operator|.
name|name
argument_list|()
block|}
else|:
operator|new
name|String
index|[]
block|{
name|cmd
operator|.
name|name
argument_list|()
block|,
name|cmd
operator|.
name|scope
argument_list|()
operator|+
literal|":"
operator|+
name|cmd
operator|.
name|name
argument_list|()
block|}
decl_stmt|;
name|commandCompleter
operator|=
operator|new
name|CandidateCompleter
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|commandCompleter
operator|.
name|addCandidate
argument_list|(
name|name
argument_list|,
name|cmd
operator|.
name|description
argument_list|()
argument_list|,
name|actionClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Build options completer
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|actionClass
init|;
name|type
operator|!=
literal|null
condition|;
name|type
operator|=
name|type
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
for|for
control|(
name|Field
name|field
range|:
name|type
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Option
name|option
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Option
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|option
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|String
index|[]
name|aliases
init|=
name|option
operator|.
name|aliases
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliases
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|alias
range|:
name|aliases
control|)
block|{
name|options
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|option
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Argument
name|argument
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Argument
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|argument
operator|!=
literal|null
condition|)
block|{
name|Integer
name|key
init|=
name|argument
operator|.
name|index
argument_list|()
decl_stmt|;
if|if
condition|(
name|arguments
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Duplicate @Argument annotations on class "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" for index: "
operator|+
name|key
operator|+
literal|" see: "
operator|+
name|field
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arguments
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|options
operator|.
name|put
argument_list|(
name|HelpOption
operator|.
name|HELP
operator|.
name|name
argument_list|()
argument_list|,
name|HelpOption
operator|.
name|HELP
argument_list|)
expr_stmt|;
name|optionsCompleter
operator|=
operator|new
name|CandidateCompleter
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Option
argument_list|>
name|entry
range|:
name|options
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|optionsCompleter
operator|.
name|addCandidate
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|description
argument_list|()
argument_list|,
name|actionClass
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|argsCompleters
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|boolean
name|multi
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|key
init|=
literal|0
init|;
name|key
operator|<
name|arguments
operator|.
name|size
argument_list|()
condition|;
name|key
operator|++
control|)
block|{
name|Completer
name|completer
init|=
literal|null
decl_stmt|;
name|Field
name|field
init|=
name|arguments
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|Argument
name|argument
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Argument
operator|.
name|class
argument_list|)
decl_stmt|;
name|multi
operator|=
operator|(
name|argument
operator|!=
literal|null
operator|&&
name|argument
operator|.
name|multiValued
argument_list|()
operator|)
expr_stmt|;
name|Completion
name|ann
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Completion
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|ann
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
index|[]
name|value
init|=
name|ann
operator|.
name|values
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|length
operator|>
literal|0
operator|&&
name|clazz
operator|==
name|StringsCompleter
operator|.
name|class
condition|)
block|{
name|completer
operator|=
operator|new
name|StringsCompleter
argument_list|(
name|value
argument_list|,
name|ann
operator|.
name|caseSensitive
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|completer
operator|=
name|command
operator|.
name|getCompleter
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|completer
operator|=
name|getDefaultCompleter
argument_list|(
name|field
argument_list|,
name|multi
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|completer
operator|==
literal|null
condition|)
block|{
name|completer
operator|=
name|NullCompleter
operator|.
name|INSTANCE
expr_stmt|;
block|}
name|argsCompleters
operator|.
name|add
argument_list|(
name|completer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|argsCompleters
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|multi
condition|)
block|{
name|argsCompleters
operator|.
name|add
argument_list|(
name|NullCompleter
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
name|optionalCompleters
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Option
name|option
range|:
name|fields
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Completer
name|completer
init|=
literal|null
decl_stmt|;
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|Completion
name|ann
init|=
name|field
operator|.
name|getAnnotation
argument_list|(
name|Completion
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ann
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|ann
operator|.
name|value
argument_list|()
decl_stmt|;
name|String
index|[]
name|value
init|=
name|ann
operator|.
name|values
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clazz
operator|==
name|StringsCompleter
operator|.
name|class
condition|)
block|{
name|completer
operator|=
operator|new
name|StringsCompleter
argument_list|(
name|value
argument_list|,
name|ann
operator|.
name|caseSensitive
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|completer
operator|=
name|command
operator|.
name|getCompleter
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore in case the completer class is not even available
block|}
block|}
else|else
block|{
name|completer
operator|=
name|getDefaultCompleter
argument_list|(
name|field
argument_list|,
name|option
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|completer
operator|==
literal|null
condition|)
block|{
name|completer
operator|=
name|NullCompleter
operator|.
name|INSTANCE
expr_stmt|;
block|}
name|optionalCompleters
operator|.
name|put
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|,
name|completer
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|aliases
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|alias
range|:
name|option
operator|.
name|aliases
argument_list|()
control|)
block|{
name|optionalCompleters
operator|.
name|put
argument_list|(
name|alias
argument_list|,
name|completer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|private
name|Completer
name|getDefaultCompleter
parameter_list|(
name|Field
name|field
parameter_list|,
name|boolean
name|multi
parameter_list|)
block|{
name|Completer
name|completer
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
name|GenericType
name|genericType
init|=
operator|new
name|GenericType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Collection
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|genericType
operator|.
name|getRawClass
argument_list|()
argument_list|)
operator|&&
name|multi
condition|)
block|{
name|type
operator|=
name|genericType
operator|.
name|getActualTypeArgument
argument_list|(
literal|0
argument_list|)
operator|.
name|getRawClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|URI
operator|.
name|class
argument_list|)
condition|)
block|{
name|completer
operator|=
operator|new
name|UriCompleter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|File
operator|.
name|class
argument_list|)
condition|)
block|{
name|completer
operator|=
operator|new
name|FileCompleter
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|||
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
name|completer
operator|=
operator|new
name|StringsCompleter
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"false"
block|,
literal|"true"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Enum
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
operator|(
name|Class
argument_list|<
name|Enum
argument_list|>
operator|)
name|type
argument_list|)
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|completer
operator|=
operator|new
name|StringsCompleter
argument_list|(
name|values
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|completer
return|;
block|}
specifier|public
name|int
name|complete
parameter_list|(
name|Session
name|session
parameter_list|,
specifier|final
name|CommandLine
name|commandLine
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
name|List
argument_list|<
name|Candidate
argument_list|>
name|cands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|completeCandidates
argument_list|(
name|session
argument_list|,
name|commandLine
argument_list|,
name|cands
argument_list|)
expr_stmt|;
for|for
control|(
name|Candidate
name|cand
range|:
name|cands
control|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|cand
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|completeCandidates
parameter_list|(
name|Session
name|session
parameter_list|,
specifier|final
name|CommandLine
name|list
parameter_list|,
name|List
argument_list|<
name|Candidate
argument_list|>
name|candidates
parameter_list|)
block|{
name|int
name|argIndex
init|=
name|list
operator|.
name|getCursorArgumentIndex
argument_list|()
decl_stmt|;
name|Completer
name|comp
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|args
init|=
name|list
operator|.
name|getArguments
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
comment|// First argument is command name
if|if
condition|(
name|index
operator|<
name|argIndex
condition|)
block|{
comment|// Verify scope
if|if
condition|(
operator|!
name|Session
operator|.
name|SCOPE_GLOBAL
operator|.
name|equals
argument_list|(
name|command
operator|.
name|getScope
argument_list|()
argument_list|)
operator|&&
operator|!
name|session
operator|.
name|resolveCommand
argument_list|(
name|args
index|[
name|index
index|]
argument_list|)
operator|.
name|equals
argument_list|(
name|command
operator|.
name|getScope
argument_list|()
operator|+
literal|":"
operator|+
name|command
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Verify command name
if|if
condition|(
operator|!
name|verifyCompleter
argument_list|(
name|session
argument_list|,
name|commandCompleter
argument_list|,
name|args
index|[
name|index
index|]
argument_list|)
condition|)
block|{
return|return;
block|}
name|index
operator|++
expr_stmt|;
block|}
else|else
block|{
name|comp
operator|=
name|commandCompleter
expr_stmt|;
block|}
comment|// Now, check options
if|if
condition|(
name|comp
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|index
operator|<
name|argIndex
operator|&&
name|args
index|[
name|index
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|verifyCompleter
argument_list|(
name|session
argument_list|,
name|optionsCompleter
argument_list|,
name|args
index|[
name|index
index|]
argument_list|)
condition|)
block|{
return|return;
block|}
name|Option
name|option
init|=
name|options
operator|.
name|get
argument_list|(
name|args
index|[
name|index
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Field
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
operator|&&
name|field
operator|.
name|getType
argument_list|()
operator|!=
name|boolean
operator|.
name|class
operator|&&
name|field
operator|.
name|getType
argument_list|()
operator|!=
name|Boolean
operator|.
name|class
condition|)
block|{
if|if
condition|(
operator|++
name|index
operator|==
name|argIndex
condition|)
block|{
name|comp
operator|=
name|NullCompleter
operator|.
name|INSTANCE
expr_stmt|;
block|}
block|}
name|index
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|comp
operator|==
literal|null
operator|&&
name|index
operator|>=
name|argIndex
operator|&&
name|index
operator|<
name|args
operator|.
name|length
operator|&&
name|args
index|[
name|index
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|comp
operator|=
name|optionsCompleter
expr_stmt|;
block|}
block|}
comment|// Now check for if last Option has a completer
name|int
name|lastAgurmentIndex
init|=
name|argIndex
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|lastAgurmentIndex
operator|>=
literal|1
condition|)
block|{
name|Option
name|lastOption
init|=
name|options
operator|.
name|get
argument_list|(
name|args
index|[
name|lastAgurmentIndex
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastOption
operator|!=
literal|null
condition|)
block|{
name|Field
name|lastField
init|=
name|fields
operator|.
name|get
argument_list|(
name|lastOption
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastField
operator|!=
literal|null
operator|&&
name|lastField
operator|.
name|getType
argument_list|()
operator|!=
name|boolean
operator|.
name|class
operator|&&
name|lastField
operator|.
name|getType
argument_list|()
operator|!=
name|Boolean
operator|.
name|class
condition|)
block|{
name|Option
name|option
init|=
name|lastField
operator|.
name|getAnnotation
argument_list|(
name|Option
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|null
condition|)
block|{
name|Completer
name|optionValueCompleter
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
name|option
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|optionValueCompleter
operator|=
name|optionalCompleters
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionValueCompleter
operator|==
literal|null
condition|)
block|{
name|String
index|[]
name|aliases
init|=
name|option
operator|.
name|aliases
argument_list|()
decl_stmt|;
if|if
condition|(
name|aliases
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aliases
operator|.
name|length
operator|&&
name|optionValueCompleter
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|optionValueCompleter
operator|=
name|optionalCompleters
operator|.
name|get
argument_list|(
name|option
operator|.
name|aliases
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|optionValueCompleter
operator|!=
literal|null
condition|)
block|{
name|comp
operator|=
name|optionValueCompleter
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Check arguments
if|if
condition|(
name|comp
operator|==
literal|null
condition|)
block|{
name|int
name|indexArg
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|argIndex
condition|)
block|{
name|Completer
name|sub
init|=
name|argsCompleters
operator|.
name|get
argument_list|(
name|indexArg
operator|>=
name|argsCompleters
operator|.
name|size
argument_list|()
condition|?
name|argsCompleters
operator|.
name|size
argument_list|()
operator|-
literal|1
else|:
name|indexArg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|verifyCompleter
argument_list|(
name|session
argument_list|,
name|sub
argument_list|,
name|args
index|[
name|index
index|]
argument_list|)
condition|)
block|{
return|return;
block|}
name|index
operator|++
expr_stmt|;
name|indexArg
operator|++
expr_stmt|;
block|}
name|comp
operator|=
name|argsCompleters
operator|.
name|get
argument_list|(
name|indexArg
operator|>=
name|argsCompleters
operator|.
name|size
argument_list|()
condition|?
name|argsCompleters
operator|.
name|size
argument_list|()
operator|-
literal|1
else|:
name|indexArg
argument_list|)
expr_stmt|;
block|}
name|comp
operator|.
name|completeCandidates
argument_list|(
name|session
argument_list|,
name|list
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
comment|/* TODO:JLINE         if (pos == -1) {             return -1;         }         */
comment|/**          *  Special case: when completing in the middle of a line, and the          *  area under the cursor is a delimiter, then trim any delimiters          *  from the candidates, since we do not need to have an extra          *  delimiter.          *          *  E.g., if we have a completion for "foo", and we          *  enter "f bar" into the buffer, and move to after the "f"          *  and hit TAB, we want "foo bar" instead of "foo  bar".          */
comment|/* TODO:JLINE         String buffer = list.getBuffer();         int cursor = list.getBufferPosition();         if ((buffer != null)&& (cursor != buffer.length())&& isDelimiter(buffer, cursor)) {             for (int i = 0; i< candidates.size(); i++) {                 String val = candidates.get(i);                  while ((val.length()> 0)&& isDelimiter(val, val.length() - 1)) {                     val = val.substring(0, val.length() - 1);                 }                  candidates.set(i, val);             }         }          return pos;         */
block|}
specifier|protected
name|boolean
name|verifyCompleter
parameter_list|(
name|Session
name|session
parameter_list|,
name|Completer
name|completer
parameter_list|,
name|String
name|argument
parameter_list|)
block|{
name|List
argument_list|<
name|Candidate
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|completer
operator|.
name|completeCandidates
argument_list|(
name|session
argument_list|,
operator|new
name|ArgumentCommandLine
argument_list|(
name|argument
argument_list|,
name|argument
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|candidates
argument_list|)
expr_stmt|;
return|return
operator|!
name|candidates
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Returns true if the specified character is a whitespace      * parameter. Check to ensure that the character is not      * escaped and returns true from      * {@link #isDelimiterChar}.      *      * @param buffer the complete command buffer.      * @param pos the index of the character in the buffer.      * @return true if the character should be a delimiter, false else.      */
specifier|public
name|boolean
name|isDelimiter
parameter_list|(
specifier|final
name|String
name|buffer
parameter_list|,
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
operator|!
name|isEscaped
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|)
operator|&&
name|isDelimiterChar
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEscaped
parameter_list|(
specifier|final
name|String
name|buffer
parameter_list|,
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>
literal|0
operator|&&
name|buffer
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
operator|==
literal|'\\'
operator|&&
operator|!
name|isEscaped
argument_list|(
name|buffer
argument_list|,
name|pos
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * The character is a delimiter if it is whitespace, and the      * preceding character is not an escape character.      *      * @param buffer the complete command buffer.      * @param pos the index of the character in the buffer.      * @return true if the character should be a delimiter, false else.      */
specifier|public
name|boolean
name|isDelimiterChar
parameter_list|(
name|String
name|buffer
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isWhitespace
argument_list|(
name|buffer
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
return|;
block|}
specifier|static
class|class
name|CandidateCompleter
implements|implements
name|Completer
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Candidate
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addCandidate
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
name|addCandidate
argument_list|(
name|value
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addCandidate
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|desc
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|desc
operator|=
name|desc
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|desc
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Candidate
argument_list|(
name|value
argument_list|,
name|value
argument_list|,
literal|null
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|complete
parameter_list|(
name|Session
name|session
parameter_list|,
name|CommandLine
name|commandLine
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
name|List
argument_list|<
name|Candidate
argument_list|>
name|cands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|completeCandidates
argument_list|(
name|session
argument_list|,
name|commandLine
argument_list|,
name|cands
argument_list|)
expr_stmt|;
for|for
control|(
name|Candidate
name|cand
range|:
name|cands
control|)
block|{
name|candidates
operator|.
name|add
argument_list|(
name|cand
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|completeCandidates
parameter_list|(
name|Session
name|session
parameter_list|,
name|CommandLine
name|commandLine
parameter_list|,
name|List
argument_list|<
name|Candidate
argument_list|>
name|candidates
parameter_list|)
block|{
name|candidates
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|candidates
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

