begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|utils
operator|.
name|AttributedString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|utils
operator|.
name|AttributedStringBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|AnsiSplitter
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitLines
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|int
name|tabs
parameter_list|)
throws|throws
name|IOException
block|{
name|AttributedStringBuilder
name|sb
init|=
operator|new
name|AttributedStringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|tabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|sb
operator|.
name|appendAnsi
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|columnSplitLength
argument_list|(
name|maxLength
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AttributedString
operator|::
name|toAnsi
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|tabs
parameter_list|)
throws|throws
name|IOException
block|{
name|AttributedStringBuilder
name|sb
init|=
operator|new
name|AttributedStringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|tabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|sb
operator|.
name|appendAnsi
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|columnSubSequence
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
operator|.
name|toAnsi
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|length
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|tabs
parameter_list|)
throws|throws
name|IOException
block|{
name|AttributedStringBuilder
name|sb
init|=
operator|new
name|AttributedStringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|tabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
name|sb
operator|.
name|appendAnsi
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|columnLength
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|cut
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|int
name|tabs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|splitLines
argument_list|(
name|text
argument_list|,
name|maxLength
argument_list|,
name|tabs
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AnsiBufferedReader
name|window
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|tabs
parameter_list|)
throws|throws
name|IOException
block|{
name|AnsiBufferedReader
name|reader
init|=
operator|new
name|AnsiBufferedReader
argument_list|(
name|is
argument_list|,
name|begin
argument_list|,
name|end
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
specifier|public
specifier|static
name|AnsiBufferedReader
name|splitter
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|maxLength
parameter_list|,
name|int
name|tabs
parameter_list|)
throws|throws
name|IOException
block|{
name|AnsiBufferedReader
name|reader
init|=
operator|new
name|AnsiBufferedReader
argument_list|(
name|is
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setTabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
return|return
name|reader
return|;
block|}
specifier|public
specifier|static
class|class
name|AnsiBufferedReader
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|BufferedReader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|int
name|begin
decl_stmt|;
specifier|private
specifier|final
name|int
name|end
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxLength
decl_stmt|;
specifier|private
specifier|final
name|AttributedStringBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
decl_stmt|;
specifier|public
name|AnsiBufferedReader
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|begin
operator|=
name|begin
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
name|this
operator|.
name|builder
operator|=
operator|new
name|AttributedStringBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|lines
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|appendAnsi
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|style
argument_list|(
name|builder
operator|.
name|styleAt
argument_list|(
name|builder
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AttributedString
name|str
init|=
name|builder
operator|.
name|columnSubSequence
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|str
operator|.
name|columnSplitLength
argument_list|(
name|maxLength
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|AttributedString
operator|::
name|toAnsi
argument_list|)
operator|.
name|forEach
argument_list|(
name|lines
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lines
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{         }
specifier|public
name|void
name|setTabs
parameter_list|(
name|int
name|tabs
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|.
name|tabs
argument_list|(
name|tabs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

