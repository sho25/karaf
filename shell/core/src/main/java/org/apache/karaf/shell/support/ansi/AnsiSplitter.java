begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|ansi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|AnsiOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|AnsiSplitter
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|splitLines
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
name|AnsiOutputStreamSplitter
name|splitter
init|=
operator|new
name|AnsiOutputStreamSplitter
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|splitter
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|splitter
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|splitter
operator|.
name|lines
return|;
block|}
specifier|public
specifier|static
name|String
name|substring
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|AnsiOutputStreamSplitter
name|splitter
init|=
operator|new
name|AnsiOutputStreamSplitter
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|splitter
operator|.
name|write
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|splitter
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|splitter
operator|.
name|lines
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|length
parameter_list|(
name|String
name|curLine
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|AnsiOutputStream
name|aos
init|=
operator|new
name|AnsiOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|aos
operator|.
name|write
argument_list|(
name|curLine
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|aos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|cut
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|splitLines
argument_list|(
name|text
argument_list|,
name|maxLength
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AnsiBufferedReader
name|window
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AnsiBufferedReader
argument_list|(
name|is
argument_list|,
name|begin
argument_list|,
name|end
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AnsiBufferedReader
name|splitter
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|AnsiBufferedReader
argument_list|(
name|is
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|maxLength
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|AnsiBufferedReader
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
specifier|private
specifier|final
name|AnsiOutputStreamSplitter
name|splitter
decl_stmt|;
specifier|public
name|AnsiBufferedReader
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|splitter
operator|=
operator|new
name|AnsiOutputStreamSplitter
argument_list|(
name|begin
argument_list|,
name|end
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|readLine
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|splitter
operator|.
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|c
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|splitter
operator|.
name|flushLine
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|splitter
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|splitter
operator|.
name|lines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|splitter
operator|.
name|lines
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{         }
block|}
specifier|static
class|class
name|AnsiOutputStreamSplitter
extends|extends
name|AnsiOutputStream
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|ATTRIBUTE_NEGATIVE_OFF
init|=
literal|27
decl_stmt|;
name|Ansi
operator|.
name|Attribute
name|intensity
decl_stmt|;
name|Ansi
operator|.
name|Attribute
name|underline
decl_stmt|;
name|Ansi
operator|.
name|Attribute
name|blink
decl_stmt|;
name|Ansi
operator|.
name|Attribute
name|negative
decl_stmt|;
name|Ansi
operator|.
name|Color
name|fg
decl_stmt|;
name|Ansi
operator|.
name|Color
name|bg
decl_stmt|;
specifier|private
name|int
name|begin
decl_stmt|;
specifier|private
name|int
name|length
decl_stmt|;
specifier|private
name|int
name|maxLength
decl_stmt|;
specifier|private
name|int
name|escapeLength
decl_stmt|;
specifier|private
name|int
name|windowState
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|AnsiOutputStreamSplitter
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AnsiOutputStreamSplitter
parameter_list|(
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|maxLength
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|begin
operator|=
name|begin
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|end
operator|-
name|begin
expr_stmt|;
name|this
operator|.
name|maxLength
operator|=
name|maxLength
operator|-
name|begin
expr_stmt|;
name|this
operator|.
name|windowState
operator|=
name|begin
operator|>
literal|0
condition|?
literal|0
else|:
literal|1
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|intensity
operator|=
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
expr_stmt|;
name|underline
operator|=
name|Ansi
operator|.
name|Attribute
operator|.
name|UNDERLINE_OFF
expr_stmt|;
name|blink
operator|=
name|Ansi
operator|.
name|Attribute
operator|.
name|BLINK_OFF
expr_stmt|;
name|negative
operator|=
name|Ansi
operator|.
name|Attribute
operator|.
name|NEGATIVE_OFF
expr_stmt|;
name|fg
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
expr_stmt|;
name|bg
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|==
literal|'\n'
condition|)
block|{
name|flushLine
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|windowState
operator|!=
literal|2
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|ByteArrayOutputStream
name|baos
init|=
operator|(
name|ByteArrayOutputStream
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|windowState
operator|==
literal|0
operator|&&
name|baos
operator|.
name|size
argument_list|()
operator|-
name|escapeLength
operator|>
name|begin
condition|)
block|{
name|windowState
operator|=
literal|1
expr_stmt|;
name|int
name|nbMissing
init|=
name|baos
operator|.
name|size
argument_list|()
operator|-
name|escapeLength
operator|-
name|begin
decl_stmt|;
name|byte
index|[]
name|old
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|beginAttributes
argument_list|()
expr_stmt|;
name|baos
operator|.
name|write
argument_list|(
name|old
argument_list|,
name|old
operator|.
name|length
operator|-
name|nbMissing
argument_list|,
name|nbMissing
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|windowState
operator|==
literal|1
operator|&&
name|baos
operator|.
name|size
argument_list|()
operator|-
name|escapeLength
operator|>=
name|length
condition|)
block|{
name|windowState
operator|=
literal|2
expr_stmt|;
name|endAttributes
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|baos
operator|.
name|size
argument_list|()
operator|-
name|escapeLength
operator|>=
name|maxLength
condition|)
block|{
name|flushLine
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|windowState
operator|==
literal|0
condition|)
block|{
name|beginAttributes
argument_list|()
expr_stmt|;
block|}
name|flushLine
argument_list|(
name|lines
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|flushLine
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|(
name|ByteArrayOutputStream
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|windowState
operator|==
literal|0
condition|)
block|{
name|beginAttributes
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|force
operator|||
name|baos
operator|.
name|size
argument_list|()
operator|>
name|escapeLength
condition|)
block|{
name|endAttributes
argument_list|()
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|beginAttributes
argument_list|()
expr_stmt|;
block|}
name|windowState
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|endAttributes
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|intensity
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|underline
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|UNDERLINE_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|UNDERLINE_OFF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blink
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|BLINK_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|BLINK_OFF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|negative
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|NEGATIVE_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|NEGATIVE_OFF
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fg
operator|!=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
condition|)
block|{
name|setAttributeFg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bg
operator|!=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
condition|)
block|{
name|setAttributeBg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|beginAttributes
parameter_list|()
throws|throws
name|IOException
block|{
operator|(
operator|(
name|ByteArrayOutputStream
operator|)
name|out
operator|)
operator|.
name|reset
argument_list|()
expr_stmt|;
name|escapeLength
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|intensity
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|intensity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|underline
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|UNDERLINE_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|underline
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blink
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|BLINK_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|blink
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|negative
operator|!=
name|Ansi
operator|.
name|Attribute
operator|.
name|NEGATIVE_OFF
condition|)
block|{
name|setAttribute
argument_list|(
name|negative
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fg
operator|!=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
condition|)
block|{
name|setAttributeFg
argument_list|(
name|fg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bg
operator|!=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
condition|)
block|{
name|setAttributeBg
argument_list|(
name|bg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processAttributeRest
parameter_list|()
throws|throws
name|IOException
block|{
name|setAttribute
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processSetAttribute
parameter_list|(
name|int
name|attribute
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|attribute
condition|)
block|{
case|case
name|ATTRIBUTE_INTENSITY_BOLD
case|:
name|setIntensity
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_INTENSITY_FAINT
case|:
name|setIntensity
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_FAINT
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_INTENSITY_NORMAL
case|:
name|setIntensity
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD_OFF
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_UNDERLINE
case|:
name|setUnderline
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|UNDERLINE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_UNDERLINE_DOUBLE
case|:
name|setUnderline
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|UNDERLINE_DOUBLE
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_UNDERLINE_OFF
case|:
name|setUnderline
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|UNDERLINE_OFF
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_BLINK_OFF
case|:
name|setBlink
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|BLINK_OFF
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_BLINK_SLOW
case|:
name|setBlink
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|BLINK_SLOW
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_BLINK_FAST
case|:
name|setBlink
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|BLINK_FAST
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_NEGATIVE_ON
case|:
name|setNegative
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|NEGATIVE_ON
argument_list|)
expr_stmt|;
break|break;
case|case
name|ATTRIBUTE_NEGATIVE_OFF
case|:
name|setNegative
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|NEGATIVE_OFF
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processSetForegroundColor
parameter_list|(
name|int
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|Ansi
operator|.
name|Color
name|c
decl_stmt|;
switch|switch
condition|(
name|color
condition|)
block|{
case|case
literal|0
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|BLACK
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|RED
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|GREEN
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|YELLOW
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|BLUE
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|MAGENTA
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|CYAN
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|WHITE
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
expr_stmt|;
break|break;
default|default:
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|fg
operator|!=
name|c
condition|)
block|{
name|this
operator|.
name|fg
operator|=
name|c
expr_stmt|;
name|setAttributeFg
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processSetBackgroundColor
parameter_list|(
name|int
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|Ansi
operator|.
name|Color
name|c
decl_stmt|;
switch|switch
condition|(
name|color
condition|)
block|{
case|case
literal|0
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|BLACK
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|RED
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|GREEN
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|YELLOW
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|BLUE
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|MAGENTA
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|CYAN
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|WHITE
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|c
operator|=
name|Ansi
operator|.
name|Color
operator|.
name|DEFAULT
expr_stmt|;
break|break;
default|default:
return|return;
block|}
if|if
condition|(
name|this
operator|.
name|bg
operator|!=
name|c
condition|)
block|{
name|this
operator|.
name|bg
operator|=
name|c
expr_stmt|;
name|setAttributeBg
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processDefaultTextColor
parameter_list|()
throws|throws
name|IOException
block|{
name|processSetForegroundColor
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processDefaultBackgroundColor
parameter_list|()
throws|throws
name|IOException
block|{
name|processSetBackgroundColor
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setIntensity
parameter_list|(
name|Ansi
operator|.
name|Attribute
name|intensity
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|intensity
operator|!=
name|intensity
condition|)
block|{
name|this
operator|.
name|intensity
operator|=
name|intensity
expr_stmt|;
name|setAttribute
argument_list|(
name|intensity
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setUnderline
parameter_list|(
name|Ansi
operator|.
name|Attribute
name|underline
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|underline
operator|!=
name|underline
condition|)
block|{
name|this
operator|.
name|underline
operator|=
name|underline
expr_stmt|;
name|setAttribute
argument_list|(
name|underline
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setBlink
parameter_list|(
name|Ansi
operator|.
name|Attribute
name|blink
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|blink
operator|!=
name|blink
condition|)
block|{
name|this
operator|.
name|blink
operator|=
name|blink
expr_stmt|;
name|setAttribute
argument_list|(
name|blink
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setNegative
parameter_list|(
name|Ansi
operator|.
name|Attribute
name|negative
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|negative
operator|!=
name|negative
condition|)
block|{
name|this
operator|.
name|negative
operator|=
name|negative
expr_stmt|;
name|setAttribute
argument_list|(
name|negative
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setAttributeFg
parameter_list|(
name|Ansi
operator|.
name|Color
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sequence
init|=
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|color
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|escapeLength
operator|+=
name|sequence
operator|.
name|length
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sequence
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setAttributeBg
parameter_list|(
name|Ansi
operator|.
name|Color
name|color
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sequence
init|=
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|bg
argument_list|(
name|color
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|escapeLength
operator|+=
name|sequence
operator|.
name|length
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sequence
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setAttribute
parameter_list|(
name|Ansi
operator|.
name|Attribute
name|attribute
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sequence
init|=
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
name|attribute
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|escapeLength
operator|+=
name|sequence
operator|.
name|length
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|sequence
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

