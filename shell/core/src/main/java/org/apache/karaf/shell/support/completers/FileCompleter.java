begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|completers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Candidate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Completer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|utils
operator|.
name|AttributedStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|utils
operator|.
name|AttributedStyle
import|;
end_import

begin_comment
comment|/**  *<p>A file name completer takes the buffer and issues a list of  * potential completions.</p>  *  *<p>This completer tries to behave as similar as possible to  *<i>bash</i>'s file name completion (using GNU readline)  * with the following exceptions:</p>  *  *<ul>  *<li>Candidates that are directories will end with "/"</li>  *<li>Wildcard regular expressions are not evaluated or replaced</li>  *<li>The "~" character can be used to represent the user's home,  * but it cannot complete to other users' homes, since java does  * not provide any way of determining that easily</li>  *</ul>  *  * @author<a href="mailto:mwp1@cornell.edu">Marc Prud'hommeaux</a>  * @author<a href="mailto:jason@planet57.com">Jason Dillon</a>  * @since 2.3  */
end_comment

begin_class
specifier|public
class|class
name|FileCompleter
implements|implements
name|Completer
block|{
specifier|private
specifier|static
name|String
name|OS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
comment|// TODO: Handle files with spaces in them
specifier|private
specifier|static
specifier|final
name|boolean
name|OS_IS_WINDOWS
init|=
name|isWindows
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isWindows
parameter_list|()
block|{
return|return
name|OS
operator|.
name|contains
argument_list|(
literal|"win"
argument_list|)
return|;
block|}
specifier|public
name|int
name|complete
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
name|CommandLine
name|commandLine
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|candidates
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|completeCandidates
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|,
name|CommandLine
name|commandLine
parameter_list|,
specifier|final
name|List
argument_list|<
name|Candidate
argument_list|>
name|candidates
parameter_list|)
block|{
comment|// buffer can be null
if|if
condition|(
name|candidates
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|buffer
init|=
name|commandLine
operator|.
name|getCursorArgument
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|commandLine
operator|.
name|getArgumentPosition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|OS_IS_WINDOWS
condition|)
block|{
name|buffer
operator|=
name|buffer
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
name|File
operator|.
name|separator
argument_list|)
expr_stmt|;
block|}
name|Terminal
name|terminal
init|=
operator|(
name|Terminal
operator|)
name|session
operator|.
name|get
argument_list|(
literal|".jline.terminal"
argument_list|)
decl_stmt|;
name|Path
name|current
decl_stmt|;
name|String
name|curBuf
decl_stmt|;
name|int
name|lastSep
init|=
name|buffer
operator|.
name|lastIndexOf
argument_list|(
name|separator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSep
operator|>=
literal|0
condition|)
block|{
name|curBuf
operator|=
name|buffer
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSep
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|curBuf
operator|.
name|startsWith
argument_list|(
literal|"~"
argument_list|)
condition|)
block|{
if|if
condition|(
name|curBuf
operator|.
name|startsWith
argument_list|(
literal|"~"
operator|+
name|separator
argument_list|()
argument_list|)
condition|)
block|{
name|current
operator|=
name|getUserHome
argument_list|()
operator|.
name|resolve
argument_list|(
name|curBuf
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|getUserHome
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|curBuf
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|current
operator|=
name|getUserDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|curBuf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|curBuf
operator|=
literal|""
expr_stmt|;
name|current
operator|=
name|getUserDir
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|current
argument_list|,
name|this
operator|::
name|accept
argument_list|)
operator|.
name|forEach
argument_list|(
name|p
lambda|->
block|{
name|String
name|value
init|=
name|curBuf
operator|+
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|OS_IS_WINDOWS
condition|?
literal|"\\\\"
else|:
literal|"/"
decl_stmt|;
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Candidate
argument_list|(
name|value
operator|+
name|s
argument_list|,
name|getDisplay
argument_list|(
name|terminal
argument_list|,
name|p
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|s
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Candidate
argument_list|(
name|value
argument_list|,
name|getDisplay
argument_list|(
name|terminal
argument_list|,
name|p
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
specifier|protected
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
return|return
operator|!
name|Files
operator|.
name|isHidden
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|String
name|separator
parameter_list|()
block|{
return|return
name|File
operator|.
name|separator
return|;
block|}
specifier|protected
name|Path
name|getUserDir
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Path
name|getUserHome
parameter_list|()
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getDisplay
parameter_list|(
name|Terminal
name|terminal
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
comment|// TODO: use $LS_COLORS for output
name|String
name|name
init|=
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|AttributedStringBuilder
name|sb
init|=
operator|new
name|AttributedStringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|AttributedStyle
operator|.
name|BOLD
operator|.
name|foreground
argument_list|(
name|AttributedStyle
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|AttributedStyle
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|OS_IS_WINDOWS
condition|?
literal|"\\\\"
else|:
literal|"/"
argument_list|)
expr_stmt|;
name|name
operator|=
name|sb
operator|.
name|toAnsi
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Files
operator|.
name|isSymbolicLink
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|AttributedStringBuilder
name|sb
init|=
operator|new
name|AttributedStringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|AttributedStyle
operator|.
name|BOLD
operator|.
name|foreground
argument_list|(
name|AttributedStyle
operator|.
name|RED
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|style
argument_list|(
name|AttributedStyle
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
name|name
operator|=
name|sb
operator|.
name|toAnsi
argument_list|(
name|terminal
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

