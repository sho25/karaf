begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|// DWB8: throw IllegatlStateException if session used after closed (as per rfc132)
end_comment

begin_comment
comment|// DWB9: there is no API to list all variables: https://www.osgi.org/bugzilla/show_bug.cgi?id=49
end_comment

begin_comment
comment|// DWB10: add SCOPE support: https://www.osgi.org/bugzilla/show_bug.cgi?id=51
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|CommandSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|command
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|service
operator|.
name|threadio
operator|.
name|ThreadIO
import|;
end_import

begin_class
specifier|public
class|class
name|CommandSessionImpl
implements|implements
name|CommandSession
implements|,
name|Converter
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SESSION_CLOSED
init|=
literal|"session is closed"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|VARIABLES
init|=
literal|".variables"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COMMANDS
init|=
literal|".commands"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN
init|=
literal|"%-20s %s\n"
decl_stmt|;
specifier|protected
name|InputStream
name|in
decl_stmt|;
specifier|protected
name|PrintStream
name|out
decl_stmt|;
name|PrintStream
name|err
decl_stmt|;
specifier|private
specifier|final
name|CommandProcessorImpl
name|processor
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variables
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|protected
name|CommandSessionImpl
parameter_list|(
name|CommandProcessorImpl
name|shell
parameter_list|,
name|InputStream
name|in
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
block|{
name|this
operator|.
name|processor
operator|=
name|shell
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|err
operator|=
name|err
expr_stmt|;
block|}
name|ThreadIO
name|threadIO
parameter_list|()
block|{
return|return
name|processor
operator|.
name|threadIO
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|this
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Object
name|execute
parameter_list|(
name|CharSequence
name|commandline
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|processor
operator|!=
literal|null
assert|;
assert|assert
name|processor
operator|.
name|threadIO
operator|!=
literal|null
assert|;
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|SESSION_CLOSED
argument_list|)
throw|;
block|}
name|processor
operator|.
name|beforeExecute
argument_list|(
name|this
argument_list|,
name|commandline
argument_list|)
expr_stmt|;
try|try
block|{
name|Closure
name|impl
init|=
operator|new
name|Closure
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|commandline
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|impl
operator|.
name|execute
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|processor
operator|.
name|afterExecute
argument_list|(
name|this
argument_list|,
name|commandline
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|processor
operator|.
name|afterExecute
argument_list|(
name|this
argument_list|,
name|commandline
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|InputStream
name|getKeyboard
parameter_list|()
block|{
return|return
name|in
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|// there is no API to list all variables, so overload name == null
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|VARIABLES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|variables
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|COMMANDS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|processor
operator|.
name|getCommands
argument_list|()
return|;
block|}
name|Object
name|val
init|=
name|processor
operator|.
name|constants
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
return|;
block|}
name|val
operator|=
name|variables
operator|.
name|get
argument_list|(
literal|"#"
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Function
condition|)
block|{
try|try
block|{
name|val
operator|=
operator|(
operator|(
name|Function
operator|)
name|val
operator|)
operator|.
name|execute
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
return|return
name|val
return|;
block|}
elseif|else
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
return|;
block|}
name|val
operator|=
name|variables
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
return|;
block|}
return|return
name|processor
operator|.
name|getCommand
argument_list|(
name|name
argument_list|,
name|variables
operator|.
name|get
argument_list|(
literal|"SCOPE"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|variables
init|)
block|{
name|variables
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PrintStream
name|getConsole
parameter_list|()
block|{
return|return
name|out
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|CharSequence
name|format
parameter_list|(
name|Object
name|target
parameter_list|,
name|int
name|level
parameter_list|,
name|Converter
name|escape
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
return|return
literal|"null"
return|;
block|}
if|if
condition|(
name|target
operator|instanceof
name|CharSequence
condition|)
block|{
return|return
operator|(
name|CharSequence
operator|)
name|target
return|;
block|}
for|for
control|(
name|Converter
name|c
range|:
name|processor
operator|.
name|converters
control|)
block|{
name|CharSequence
name|s
init|=
name|c
operator|.
name|format
argument_list|(
name|target
argument_list|,
name|level
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|boolean
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|byte
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|short
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|short
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|int
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|long
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|float
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|float
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|double
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|double
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|==
name|char
operator|.
name|class
condition|)
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
operator|(
name|char
index|[]
operator|)
name|target
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|target
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|target
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|instanceof
name|Collection
condition|)
block|{
if|if
condition|(
name|level
operator|==
name|Converter
operator|.
name|INSPECT
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|c
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|target
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|o
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
return|;
block|}
else|else
block|{
if|if
condition|(
name|level
operator|==
name|Converter
operator|.
name|LINE
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|c
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|target
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|o
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
block|}
block|}
if|if
condition|(
name|target
operator|instanceof
name|Dictionary
condition|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
operator|(
operator|(
name|Dictionary
operator|)
name|target
operator|)
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|(
operator|(
name|Dictionary
operator|)
name|target
operator|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|target
operator|=
name|result
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|instanceof
name|Map
condition|)
block|{
if|if
condition|(
name|level
operator|==
name|Converter
operator|.
name|INSPECT
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|c
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|target
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|c
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|CharSequence
name|key
init|=
name|format
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|key
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
return|;
block|}
else|else
block|{
if|if
condition|(
name|level
operator|==
name|Converter
operator|.
name|LINE
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|c
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|target
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|c
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|format
argument_list|(
name|entry
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
return|;
block|}
block|}
block|}
if|if
condition|(
name|level
operator|==
name|Converter
operator|.
name|INSPECT
condition|)
block|{
return|return
name|inspect
argument_list|(
name|target
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|target
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
name|CharSequence
name|inspect
parameter_list|(
name|Object
name|b
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Formatter
name|f
init|=
operator|new
name|Formatter
argument_list|()
decl_stmt|;
name|Method
name|methods
index|[]
init|=
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
try|try
block|{
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
operator|!
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getClass"
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|m
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|value
init|=
name|m
operator|.
name|invoke
argument_list|(
name|b
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|f
operator|.
name|format
argument_list|(
name|COLUMN
argument_list|,
name|name
argument_list|,
name|format
argument_list|(
name|value
argument_list|,
name|Converter
operator|.
name|LINE
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
return|return
operator|(
name|StringBuilder
operator|)
name|f
operator|.
name|out
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
name|Object
name|convert
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|desiredType
parameter_list|,
name|Object
name|in
parameter_list|)
block|{
return|return
name|processor
operator|.
name|convert
argument_list|(
name|desiredType
argument_list|,
name|in
argument_list|)
return|;
block|}
specifier|public
name|CharSequence
name|format
parameter_list|(
name|Object
name|result
parameter_list|,
name|int
name|inspect
parameter_list|)
block|{
try|try
block|{
return|return
name|format
argument_list|(
name|result
argument_list|,
name|inspect
argument_list|,
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|"<can not format "
operator|+
name|result
operator|+
literal|":"
operator|+
name|e
return|;
block|}
block|}
specifier|public
name|Object
name|expr
parameter_list|(
name|CharSequence
name|expr
parameter_list|)
block|{
return|return
name|processor
operator|.
name|expr
argument_list|(
name|this
argument_list|,
name|expr
argument_list|)
return|;
block|}
block|}
end_class

end_unit

