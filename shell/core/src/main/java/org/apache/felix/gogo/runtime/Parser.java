begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_comment
comment|// DWB14: parser loops if // comment at start of program
end_comment

begin_comment
comment|// DWB15: allow program to have trailing ';'
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|Tokenizer
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|Parser
block|{
specifier|private
specifier|final
name|Tokenizer
name|tz
decl_stmt|;
specifier|public
name|Parser
parameter_list|(
name|CharSequence
name|program
parameter_list|)
block|{
name|tz
operator|=
operator|new
name|Tokenizer
argument_list|(
name|program
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Parser
parameter_list|(
name|CharSequence
name|program
parameter_list|,
name|boolean
name|isExpansionEnabled
parameter_list|)
block|{
name|tz
operator|=
operator|new
name|Tokenizer
argument_list|(
name|program
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|isExpansionEnabled
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
argument_list|>
name|program
parameter_list|()
block|{
name|List
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
argument_list|>
name|program
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|tz
operator|.
name|next
argument_list|()
operator|!=
name|Type
operator|.
name|EOT
condition|)
block|{
name|program
operator|.
name|add
argument_list|(
name|pipeline
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tz
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|SEMICOLON
case|:
case|case
name|NEWLINE
case|:
continue|continue;
block|}
break|break;
block|}
if|if
condition|(
name|tz
operator|.
name|next
argument_list|()
operator|!=
name|Type
operator|.
name|EOT
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Program has trailing text: "
operator|+
name|tz
operator|.
name|value
argument_list|()
argument_list|)
throw|;
return|return
name|program
return|;
block|}
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
name|pipeline
parameter_list|()
block|{
name|List
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
name|pipeline
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Token
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|pipeline
operator|.
name|add
argument_list|(
name|command
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tz
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|PIPE
case|:
if|if
condition|(
name|tz
operator|.
name|next
argument_list|()
operator|==
name|Type
operator|.
name|EOT
condition|)
block|{
name|Token
name|t
init|=
name|tz
operator|.
name|token
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|EOFError
argument_list|(
name|t
operator|.
name|line
argument_list|,
name|t
operator|.
name|column
argument_list|,
literal|"unexpected EOT after pipe '|'"
argument_list|)
throw|;
block|}
break|break;
default|default:
return|return
name|pipeline
return|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|Token
argument_list|>
name|command
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|command
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Token
name|t
init|=
name|tz
operator|.
name|token
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|t
operator|.
name|type
condition|)
block|{
case|case
name|WORD
case|:
case|case
name|CLOSURE
case|:
case|case
name|EXECUTION
case|:
case|case
name|ARRAY
case|:
case|case
name|ASSIGN
case|:
case|case
name|EXPR
case|:
break|break;
default|default:
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|t
operator|.
name|line
argument_list|,
name|t
operator|.
name|column
argument_list|,
literal|"unexpected token: "
operator|+
name|t
operator|.
name|type
argument_list|)
throw|;
block|}
name|command
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tz
operator|.
name|next
argument_list|()
condition|)
block|{
case|case
name|PIPE
case|:
case|case
name|SEMICOLON
case|:
case|case
name|NEWLINE
case|:
case|case
name|EOT
case|:
return|return
name|command
return|;
block|}
block|}
block|}
specifier|public
name|void
name|array
parameter_list|(
name|List
argument_list|<
name|Token
argument_list|>
name|list
parameter_list|,
name|Map
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
name|map
parameter_list|)
throws|throws
name|Exception
block|{
name|Token
name|lt
init|=
literal|null
decl_stmt|;
name|boolean
name|isMap
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|tz
operator|.
name|next
argument_list|()
operator|!=
name|Type
operator|.
name|EOT
condition|)
block|{
if|if
condition|(
name|isMap
condition|)
block|{
name|Token
name|key
init|=
name|lt
decl_stmt|;
name|lt
operator|=
literal|null
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|key
condition|)
block|{
name|key
operator|=
name|tz
operator|.
name|token
argument_list|()
expr_stmt|;
if|if
condition|(
name|tz
operator|.
name|next
argument_list|()
operator|!=
name|Type
operator|.
name|ASSIGN
condition|)
block|{
name|Token
name|t
init|=
name|tz
operator|.
name|token
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|t
operator|.
name|line
argument_list|,
name|t
operator|.
name|column
argument_list|,
literal|"map expected '=', found: "
operator|+
name|t
argument_list|)
throw|;
block|}
name|tz
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Token
name|k
init|=
operator|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|?
name|key
else|:
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|Token
name|v
init|=
name|tz
operator|.
name|token
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|tz
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|WORD
case|:
case|case
name|CLOSURE
case|:
case|case
name|EXECUTION
case|:
case|case
name|ARRAY
case|:
name|lt
operator|=
name|tz
operator|.
name|token
argument_list|()
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|lt
argument_list|)
expr_stmt|;
break|break;
case|case
name|ASSIGN
case|:
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|isMap
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// fall through
default|default:
name|lt
operator|=
name|tz
operator|.
name|token
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|lt
operator|.
name|line
argument_list|,
name|lt
operator|.
name|column
argument_list|,
literal|"unexpected token in list: "
operator|+
name|lt
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

