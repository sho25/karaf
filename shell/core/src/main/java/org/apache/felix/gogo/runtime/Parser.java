begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|//
end_comment

begin_comment
comment|// NOTE: this file is included to fix FELIX-5805 but should be removed
end_comment

begin_comment
comment|// once the fix is released as part of gogo.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//
end_comment

begin_class
specifier|public
class|class
name|Parser
block|{
specifier|public
specifier|static
specifier|abstract
class|class
name|Executable
extends|extends
name|Token
block|{
specifier|public
name|Executable
parameter_list|(
name|Token
name|cs
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Operator
extends|extends
name|Executable
block|{
specifier|public
name|Operator
parameter_list|(
name|Token
name|cs
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Statement
extends|extends
name|Executable
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|redirections
decl_stmt|;
specifier|public
name|Statement
parameter_list|(
name|Token
name|cs
parameter_list|,
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
parameter_list|,
name|List
argument_list|<
name|Token
argument_list|>
name|redirections
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
name|tokens
expr_stmt|;
name|this
operator|.
name|redirections
operator|=
name|redirections
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
parameter_list|()
block|{
return|return
name|tokens
return|;
block|}
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|redirections
parameter_list|()
block|{
return|return
name|redirections
return|;
block|}
block|}
comment|/**      * pipe1 ; pipe2 ; ...      */
specifier|public
specifier|static
class|class
name|Program
extends|extends
name|Token
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Executable
argument_list|>
name|tokens
decl_stmt|;
specifier|public
name|Program
parameter_list|(
name|Token
name|cs
parameter_list|,
name|List
argument_list|<
name|Executable
argument_list|>
name|tokens
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
name|tokens
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Executable
argument_list|>
name|tokens
parameter_list|()
block|{
return|return
name|tokens
return|;
block|}
block|}
comment|/**      * token1 | token2 | ...      */
specifier|public
specifier|static
class|class
name|Pipeline
extends|extends
name|Executable
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Executable
argument_list|>
name|tokens
decl_stmt|;
specifier|public
name|Pipeline
parameter_list|(
name|Token
name|cs
parameter_list|,
name|List
argument_list|<
name|Executable
argument_list|>
name|tokens
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
name|tokens
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Executable
argument_list|>
name|tokens
parameter_list|()
block|{
return|return
name|tokens
return|;
block|}
block|}
comment|/**      * ( program )      */
specifier|public
specifier|static
class|class
name|Sequence
extends|extends
name|Executable
block|{
specifier|private
specifier|final
name|Program
name|program
decl_stmt|;
specifier|public
name|Sequence
parameter_list|(
name|Token
name|cs
parameter_list|,
name|Program
name|program
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
block|}
specifier|public
name|Program
name|program
parameter_list|()
block|{
return|return
name|program
return|;
block|}
block|}
comment|/**      * { program }      */
specifier|public
specifier|static
class|class
name|Closure
extends|extends
name|Token
block|{
specifier|private
specifier|final
name|Program
name|program
decl_stmt|;
specifier|public
name|Closure
parameter_list|(
name|Token
name|cs
parameter_list|,
name|Program
name|program
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|this
operator|.
name|program
operator|=
name|program
expr_stmt|;
block|}
specifier|public
name|Program
name|program
parameter_list|()
block|{
return|return
name|program
return|;
block|}
block|}
comment|/**      * [ a b ...]      * [ k1=v1 k2=v2 ...]      */
specifier|public
specifier|static
class|class
name|Array
extends|extends
name|Token
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|list
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
name|map
decl_stmt|;
specifier|public
name|Array
parameter_list|(
name|Token
name|cs
parameter_list|,
name|List
argument_list|<
name|Token
argument_list|>
name|list
parameter_list|,
name|Map
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
name|map
parameter_list|)
block|{
name|super
argument_list|(
name|cs
argument_list|)
expr_stmt|;
assert|assert
name|list
operator|!=
literal|null
operator|^
name|map
operator|!=
literal|null
assert|;
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|list
parameter_list|()
block|{
return|return
name|list
return|;
block|}
specifier|public
name|Map
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
name|map
parameter_list|()
block|{
return|return
name|map
return|;
block|}
block|}
specifier|protected
specifier|final
name|Tokenizer
name|tz
decl_stmt|;
specifier|protected
specifier|final
name|LinkedList
argument_list|<
name|String
argument_list|>
name|stack
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Statement
argument_list|>
name|statements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|Parser
parameter_list|(
name|CharSequence
name|line
parameter_list|)
block|{
name|this
operator|.
name|tz
operator|=
operator|new
name|Tokenizer
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|tokens
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Statement
argument_list|>
name|statements
parameter_list|()
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|statements
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Statement
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Statement
name|o1
parameter_list|,
name|Statement
name|o2
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|start
argument_list|,
name|o2
operator|.
name|start
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|statements
argument_list|)
return|;
block|}
specifier|public
name|Program
name|program
parameter_list|()
block|{
name|List
argument_list|<
name|Executable
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Executable
argument_list|>
name|pipes
init|=
literal|null
decl_stmt|;
name|int
name|start
init|=
name|tz
operator|.
name|index
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Statement
name|ex
decl_stmt|;
name|Token
name|t
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|pipes
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|tz
operator|.
name|line
argument_list|,
name|tz
operator|.
name|column
argument_list|,
literal|"unexpected EOT while looking for a statement after |"
argument_list|,
name|getMissing
argument_list|(
literal|"pipe"
argument_list|)
argument_list|,
literal|"0"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|new
name|Program
argument_list|(
name|whole
argument_list|(
name|tokens
argument_list|,
name|start
argument_list|)
argument_list|,
name|tokens
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"}"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|")"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"]"
argument_list|,
name|t
argument_list|)
condition|)
block|{
if|if
condition|(
name|pipes
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|t
operator|.
name|line
argument_list|,
name|t
operator|.
name|column
argument_list|,
literal|"unexpected token '"
operator|+
name|t
operator|+
literal|"' while looking for a statement after |"
argument_list|,
name|getMissing
argument_list|(
literal|"pipe"
argument_list|)
argument_list|,
literal|"0"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|t
operator|.
name|line
argument_list|,
name|t
operator|.
name|column
argument_list|,
literal|"unexpected token '"
operator|+
name|t
operator|+
literal|"'"
argument_list|)
throw|;
block|}
else|else
block|{
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
operator|new
name|Program
argument_list|(
name|whole
argument_list|(
name|tokens
argument_list|,
name|start
argument_list|)
argument_list|,
name|tokens
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|ex
operator|=
name|statement
argument_list|()
expr_stmt|;
block|}
name|t
operator|=
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|";"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"\n"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&&"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"||"
argument_list|,
name|t
argument_list|)
condition|)
block|{
if|if
condition|(
name|pipes
operator|!=
literal|null
condition|)
block|{
name|pipes
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|Pipeline
argument_list|(
name|whole
argument_list|(
name|pipes
argument_list|,
name|start
argument_list|)
argument_list|,
name|pipes
argument_list|)
argument_list|)
expr_stmt|;
name|pipes
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Program
argument_list|(
name|whole
argument_list|(
name|tokens
argument_list|,
name|start
argument_list|)
argument_list|,
name|tokens
argument_list|)
return|;
block|}
else|else
block|{
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|Operator
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"|"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"|&"
argument_list|,
name|t
argument_list|)
condition|)
block|{
if|if
condition|(
name|pipes
operator|==
literal|null
condition|)
block|{
name|pipes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|pipes
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|pipes
operator|.
name|add
argument_list|(
operator|new
name|Operator
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|pipes
operator|!=
literal|null
condition|)
block|{
name|pipes
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
operator|new
name|Pipeline
argument_list|(
name|whole
argument_list|(
name|pipes
argument_list|,
name|start
argument_list|)
argument_list|,
name|pipes
argument_list|)
argument_list|)
expr_stmt|;
name|pipes
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|push
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
name|tz
operator|.
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Token
name|next
parameter_list|()
block|{
name|boolean
name|pushed
init|=
name|tz
operator|.
name|pushed
operator|!=
literal|null
decl_stmt|;
name|Token
name|token
init|=
name|tz
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pushed
operator|&&
name|token
operator|!=
literal|null
condition|)
block|{
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
specifier|public
name|Sequence
name|sequence
parameter_list|()
block|{
name|Token
name|start
init|=
name|start
argument_list|(
literal|"("
argument_list|,
literal|"sequence"
argument_list|)
decl_stmt|;
name|expectNotNull
argument_list|()
expr_stmt|;
name|Program
name|program
init|=
name|program
argument_list|()
decl_stmt|;
name|Token
name|end
init|=
name|end
argument_list|(
literal|")"
argument_list|)
decl_stmt|;
return|return
operator|new
name|Sequence
argument_list|(
name|whole
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
name|program
argument_list|)
return|;
block|}
specifier|public
name|Closure
name|closure
parameter_list|()
block|{
name|Token
name|start
init|=
name|start
argument_list|(
literal|"{"
argument_list|,
literal|"closure"
argument_list|)
decl_stmt|;
name|expectNotNull
argument_list|()
expr_stmt|;
name|Program
name|program
init|=
name|program
argument_list|()
decl_stmt|;
name|Token
name|end
init|=
name|end
argument_list|(
literal|"}"
argument_list|)
decl_stmt|;
return|return
operator|new
name|Closure
argument_list|(
name|whole
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
name|program
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|redirNoArg
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[0-9]?>&[0-9-]|[0-9-]?<&[0-9-]"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|redirArg
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[0-9&]?>|[0-9]?>>|[0-9]?<|[0-9]?<>|<<<"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|redirHereDoc
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"<<-?"
argument_list|)
decl_stmt|;
specifier|public
name|Statement
name|statement
parameter_list|()
block|{
name|List
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|redirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|needRedirArg
init|=
literal|false
decl_stmt|;
name|int
name|start
init|=
name|tz
operator|.
name|index
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Token
name|t
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"\n"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|";"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&&"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"||"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"|"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"|&"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"}"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|")"
argument_list|,
name|t
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"]"
argument_list|,
name|t
argument_list|)
condition|)
block|{
if|if
condition|(
name|needRedirArg
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|tz
operator|.
name|line
argument_list|,
name|tz
operator|.
name|column
argument_list|,
literal|"Expected file name for redirection"
argument_list|,
literal|"redir"
argument_list|,
literal|"foo"
argument_list|)
throw|;
block|}
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"{"
argument_list|,
name|t
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|closure
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"["
argument_list|,
name|t
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"("
argument_list|,
name|t
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|sequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|needRedirArg
condition|)
block|{
name|redirs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|needRedirArg
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|redirNoArg
operator|.
name|matcher
argument_list|(
name|t
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|redirs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|redirArg
operator|.
name|matcher
argument_list|(
name|t
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|redirs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|needRedirArg
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|redirHereDoc
operator|.
name|matcher
argument_list|(
name|t
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|redirs
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|redirs
operator|.
name|add
argument_list|(
name|tz
operator|.
name|readHereDoc
argument_list|(
name|t
operator|.
name|charAt
argument_list|(
name|t
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|Statement
name|statement
init|=
operator|new
name|Statement
argument_list|(
name|whole
argument_list|(
name|tokens
argument_list|,
name|start
argument_list|)
argument_list|,
name|tokens
argument_list|,
name|redirs
argument_list|)
decl_stmt|;
name|statements
operator|.
name|add
argument_list|(
name|statement
argument_list|)
expr_stmt|;
return|return
name|statement
return|;
block|}
specifier|public
name|Array
name|array
parameter_list|()
block|{
name|Token
name|start
init|=
name|start
argument_list|(
literal|"["
argument_list|,
literal|"array"
argument_list|)
decl_stmt|;
name|Boolean
name|isMap
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Token
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Token
argument_list|,
name|Token
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Token
name|key
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|tz
operator|.
name|line
argument_list|,
name|tz
operator|.
name|column
argument_list|,
literal|"unexpected EOT"
argument_list|,
name|getMissing
argument_list|()
argument_list|,
literal|"]"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"]"
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|key
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"\n"
argument_list|,
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"{"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|";"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&&"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"||"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"|"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"|&"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|")"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"}"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"="
argument_list|,
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|key
operator|.
name|line
argument_list|()
argument_list|,
name|key
operator|.
name|column
argument_list|()
argument_list|,
literal|"unexpected token '"
operator|+
name|key
operator|+
literal|"' while looking for array key"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"("
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
name|sequence
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"["
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|key
operator|=
name|array
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isMap
operator|==
literal|null
condition|)
block|{
name|Token
name|n
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|tz
operator|.
name|line
argument_list|,
name|tz
operator|.
name|column
argument_list|,
literal|"unexpected EOF while looking for array token"
argument_list|,
name|getMissing
argument_list|()
argument_list|,
literal|"]"
argument_list|)
throw|;
block|}
name|isMap
operator|=
name|Token
operator|.
name|eq
argument_list|(
literal|"="
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|push
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isMap
condition|)
block|{
name|expect
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|Token
name|val
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|tz
operator|.
name|line
argument_list|,
name|tz
operator|.
name|column
argument_list|,
literal|"unexpected EOF while looking for array value"
argument_list|,
name|getMissing
argument_list|()
argument_list|,
literal|"0"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|";"
argument_list|,
name|val
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&"
argument_list|,
name|val
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"&&"
argument_list|,
name|val
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"||"
argument_list|,
name|val
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"|"
argument_list|,
name|val
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"|&"
argument_list|,
name|val
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|")"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"}"
argument_list|,
name|key
argument_list|)
operator|||
name|Token
operator|.
name|eq
argument_list|(
literal|"="
argument_list|,
name|key
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|key
operator|.
name|line
argument_list|()
argument_list|,
name|key
operator|.
name|column
argument_list|()
argument_list|,
literal|"unexpected token '"
operator|+
name|key
operator|+
literal|"' while looking for array value"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"["
argument_list|,
name|val
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|array
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"("
argument_list|,
name|val
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|sequence
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Token
operator|.
name|eq
argument_list|(
literal|"{"
argument_list|,
name|val
argument_list|)
condition|)
block|{
name|push
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
name|closure
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|Token
name|end
init|=
name|end
argument_list|(
literal|"]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMap
operator|==
literal|null
operator|||
operator|!
name|isMap
condition|)
block|{
return|return
operator|new
name|Array
argument_list|(
name|whole
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
name|list
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Array
argument_list|(
name|whole
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
argument_list|,
literal|null
argument_list|,
name|map
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|expectNotNull
parameter_list|()
block|{
name|Token
name|t
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|tz
operator|.
name|line
argument_list|,
name|tz
operator|.
name|column
argument_list|,
literal|"unexpected EOT"
argument_list|,
name|getMissing
argument_list|()
argument_list|,
literal|"0"
argument_list|)
throw|;
block|}
name|push
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getMissing
parameter_list|()
block|{
return|return
name|getMissing
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|private
name|String
name|getMissing
parameter_list|(
name|String
name|additional
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|LinkedList
argument_list|<
name|String
argument_list|>
name|stack
init|=
name|this
operator|.
name|stack
decl_stmt|;
if|if
condition|(
name|additional
operator|!=
literal|null
condition|)
block|{
name|stack
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|stack
argument_list|)
expr_stmt|;
name|stack
operator|.
name|addLast
argument_list|(
name|additional
argument_list|)
expr_stmt|;
block|}
name|String
name|last
init|=
literal|null
decl_stmt|;
name|int
name|nb
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|cur
range|:
name|stack
control|)
block|{
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|last
operator|=
name|cur
expr_stmt|;
name|nb
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|last
operator|.
name|equals
argument_list|(
name|cur
argument_list|)
condition|)
block|{
name|nb
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|nb
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|nb
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|cur
expr_stmt|;
name|nb
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|nb
operator|>
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
operator|.
name|append
argument_list|(
name|nb
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|Token
name|start
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|missing
parameter_list|)
block|{
name|stack
operator|.
name|addLast
argument_list|(
name|missing
argument_list|)
expr_stmt|;
return|return
name|expect
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|protected
name|Token
name|end
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|Token
name|t
init|=
name|expect
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|stack
operator|.
name|removeLast
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|protected
name|Token
name|expect
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|Token
name|start
init|=
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EOFError
argument_list|(
name|tz
operator|.
name|line
argument_list|,
name|tz
operator|.
name|column
argument_list|,
literal|"unexpected EOT looking for '"
operator|+
name|str
operator|+
literal|""
argument_list|,
name|getMissing
argument_list|()
argument_list|,
name|str
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|Token
operator|.
name|eq
argument_list|(
name|str
argument_list|,
name|start
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|start
operator|.
name|line
argument_list|,
name|start
operator|.
name|column
argument_list|,
literal|"expected '"
operator|+
name|str
operator|+
literal|"' but got '"
operator|+
name|start
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
return|return
name|start
return|;
block|}
specifier|protected
name|Token
name|whole
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Token
argument_list|>
name|tokens
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|index
operator|=
name|Math
operator|.
name|min
argument_list|(
name|index
argument_list|,
name|tz
operator|.
name|text
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tz
operator|.
name|text
argument_list|()
operator|.
name|subSequence
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
return|;
block|}
name|Token
name|b
init|=
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Token
name|e
init|=
name|tokens
operator|.
name|get
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|whole
argument_list|(
name|b
argument_list|,
name|e
argument_list|)
return|;
block|}
specifier|protected
name|Token
name|whole
parameter_list|(
name|Token
name|b
parameter_list|,
name|Token
name|e
parameter_list|)
block|{
return|return
name|tz
operator|.
name|text
operator|.
name|subSequence
argument_list|(
name|b
operator|.
name|start
operator|-
name|tz
operator|.
name|text
operator|.
name|start
argument_list|,
name|e
operator|.
name|start
operator|+
name|e
operator|.
name|length
argument_list|()
operator|-
name|tz
operator|.
name|text
operator|.
name|start
argument_list|)
return|;
block|}
block|}
end_class

end_unit

