begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|parsing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|gogo
operator|.
name|runtime
operator|.
name|threadio
operator|.
name|ThreadIOImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Parsing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|action
operator|.
name|command
operator|.
name|ActionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|action
operator|.
name|command
operator|.
name|ManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|HeadlessSessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|impl
operator|.
name|console
operator|.
name|SessionFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|parsing
operator|.
name|CommandLineImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|parsing
operator|.
name|DefaultParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
operator|.
name|parsing
operator|.
name|GogoParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|ParsingTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDefaultParser
parameter_list|()
block|{
name|String
name|command
init|=
literal|" foo  bar (a +  b) ; another command "
decl_stmt|;
name|String
name|subCmd
init|=
literal|" foo  bar (a +  b) "
decl_stmt|;
name|DefaultParser
name|parser
init|=
operator|new
name|DefaultParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
name|parser
operator|.
name|parse
argument_list|(
literal|null
argument_list|,
name|command
argument_list|,
name|command
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|line
operator|.
name|getArguments
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|line
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|line
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(a +  b)"
argument_list|,
name|line
operator|.
name|getArguments
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|subCmd
argument_list|,
name|line
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommandLineParser
parameter_list|()
block|{
name|SessionFactoryImpl
name|sessionFactory
init|=
operator|new
name|SessionFactoryImpl
argument_list|(
operator|new
name|ThreadIOImpl
argument_list|()
argument_list|)
decl_stmt|;
name|ManagerImpl
name|manager
init|=
operator|new
name|ManagerImpl
argument_list|(
name|sessionFactory
argument_list|,
name|sessionFactory
argument_list|)
decl_stmt|;
name|sessionFactory
operator|.
name|getRegistry
argument_list|()
operator|.
name|register
argument_list|(
operator|new
name|ActionCommand
argument_list|(
name|manager
argument_list|,
name|FooCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|sessionFactory
operator|.
name|getRegistry
argument_list|()
operator|.
name|register
argument_list|(
operator|new
name|ActionCommand
argument_list|(
name|manager
argument_list|,
name|AnotherCommand
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|sessionFactory
operator|.
name|getRegistry
argument_list|()
operator|.
name|register
argument_list|(
operator|new
name|CustomParser
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
operator|new
name|HeadlessSessionImpl
argument_list|(
name|sessionFactory
argument_list|,
name|sessionFactory
operator|.
name|getCommandProcessor
argument_list|()
argument_list|,
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
operator|new
name|PrintStream
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
argument_list|,
operator|new
name|PrintStream
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|parsed
init|=
name|CommandLineParser
operator|.
name|parse
argument_list|(
name|session
argument_list|,
literal|" foo bar (a + b); another   command with spaces "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo bar (a + b) ; another \"command with spaces\""
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"scope"
argument_list|,
name|name
operator|=
literal|"foo"
argument_list|)
specifier|static
class|class
name|FooCommand
implements|implements
name|Action
block|{
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Command
argument_list|(
name|scope
operator|=
literal|"scope"
argument_list|,
name|name
operator|=
literal|"another"
argument_list|)
annotation|@
name|Parsing
argument_list|(
name|CustomParser
operator|.
name|class
argument_list|)
specifier|static
class|class
name|AnotherCommand
implements|implements
name|Action
block|{
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|static
class|class
name|CustomParser
implements|implements
name|Parser
block|{
annotation|@
name|Override
specifier|public
name|CommandLine
name|parse
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|command
parameter_list|,
name|int
name|cursor
parameter_list|)
block|{
name|GogoParser
name|parser
init|=
operator|new
name|GogoParser
argument_list|(
name|command
argument_list|,
name|cursor
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|parser
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|ws
argument_list|()
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|ch
init|=
name|parser
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|0
operator|||
name|ch
operator|==
literal|';'
operator|||
name|ch
operator|==
literal|'|'
condition|)
block|{
break|break;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|arg
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|arg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"\""
operator|+
name|arg
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CommandLineImpl
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|args
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|args
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|,
name|parser
operator|.
name|position
argument_list|()
argument_list|,
name|command
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parser
operator|.
name|position
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

