begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|support
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|ShellUtilTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetValueString
parameter_list|()
block|{
name|Object
name|data
decl_stmt|;
name|data
operator|=
literal|"Hello World"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3, 5, 7, 9]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|short
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3, 5, 7, 9]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3, 5, 7, 9]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1, 2, 3, 5, 7, 9]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1.0, 2.0, 3.0, 5.0, 7.0, 9.0]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|double
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|7
block|,
literal|9
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[1.0, 2.0, 3.0, 5.0, 7.0, 9.0]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|boolean
index|[]
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[true, true, false]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|char
index|[]
block|{
literal|'a'
block|,
literal|'c'
block|,
literal|'e'
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a, c, e]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Object
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|5
block|,
literal|8
block|}
block|,
operator|new
name|char
index|[]
block|{
literal|'h'
block|,
literal|'e'
block|,
literal|'l'
block|,
literal|'l'
block|,
literal|'o'
block|}
block|,
literal|"World"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[1, 2, 3, 5, 8], [h, e, l, l, o], World]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[5, 10, 15, 25]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[5, 10, 15, 25]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
block|{
literal|5
block|,
literal|7
block|,
literal|9
block|}
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[[1, 2, 3], [5, 7, 9]]"
argument_list|,
name|ShellUtil
operator|.
name|getValueString
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

