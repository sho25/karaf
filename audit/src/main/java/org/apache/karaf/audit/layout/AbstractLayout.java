begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|layout
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|EventLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|util
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractLayout
implements|implements
name|EventLayout
block|{
specifier|protected
specifier|final
name|String
name|hostName
decl_stmt|;
specifier|protected
specifier|final
name|String
name|appName
decl_stmt|;
specifier|protected
specifier|final
name|String
name|procId
decl_stmt|;
specifier|protected
specifier|final
name|Buffer
name|buffer
decl_stmt|;
specifier|public
name|AbstractLayout
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|hostname
argument_list|()
expr_stmt|;
name|this
operator|.
name|appName
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|this
operator|.
name|procId
operator|=
name|procId
argument_list|()
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|format
parameter_list|(
name|Event
name|event
parameter_list|,
name|Appendable
name|to
parameter_list|)
throws|throws
name|IOException
block|{
name|doFormat
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeTo
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CharBuffer
name|format
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|doFormat
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
name|CharBuffer
operator|.
name|wrap
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|doFormat
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|header
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|message
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|footer
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|header
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|footer
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
name|void
name|message
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|append
argument_list|(
literal|"subject"
argument_list|,
name|event
operator|.
name|subject
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"type"
argument_list|,
name|event
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"subtype"
argument_list|,
name|event
operator|.
name|subtype
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|event
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|Event
operator|.
name|TYPE_SHELL
case|:
block|{
name|append
argument_list|(
name|event
argument_list|,
literal|"script"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"command"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"exception"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_LOGIN
case|:
block|{
name|append
argument_list|(
name|event
argument_list|,
literal|"username"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_JMX
case|:
block|{
name|append
argument_list|(
name|event
argument_list|,
literal|"method"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"params"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"exception"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_LOG
case|:
block|{
name|Bundle
name|bundle
init|=
operator|(
name|Bundle
operator|)
name|event
operator|.
name|getProperty
argument_list|(
literal|"bundle"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|append
argument_list|(
literal|"bundle.id"
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"bundle.symbolicname"
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"bundle.version"
argument_list|,
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|append
argument_list|(
name|event
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"exception"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_BUNDLE
case|:
block|{
name|Bundle
name|bundle
init|=
operator|(
name|Bundle
operator|)
name|event
operator|.
name|getProperty
argument_list|(
literal|"bundle"
argument_list|)
decl_stmt|;
name|append
argument_list|(
literal|"bundle.id"
argument_list|,
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"bundle.symbolicname"
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"bundle.version"
argument_list|,
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_SERVICE
case|:
block|{
name|ServiceEvent
name|se
init|=
operator|(
name|ServiceEvent
operator|)
name|event
operator|.
name|getProperty
argument_list|(
literal|"event"
argument_list|)
decl_stmt|;
name|append
argument_list|(
literal|"service.bundleid"
argument_list|,
name|se
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_BUNDLEID
argument_list|)
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"service.id"
argument_list|,
name|se
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"objectClass"
argument_list|,
name|se
operator|.
name|getServiceReference
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_WEB
case|:
block|{
name|append
argument_list|(
name|event
argument_list|,
literal|"servlet.servlet"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"servlet.alias"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_REPOSITORIES
case|:
block|{
name|append
argument_list|(
name|event
argument_list|,
literal|"uri"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_FEATURES
case|:
block|{
name|append
argument_list|(
name|event
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"version"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Event
operator|.
name|TYPE_BLUEPRINT
case|:
block|{
name|append
argument_list|(
name|event
argument_list|,
literal|"bundle.id"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"bundle.symbolicname"
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|event
argument_list|,
literal|"bundle.version"
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
for|for
control|(
name|String
name|key
range|:
name|event
operator|.
name|keys
argument_list|()
control|)
block|{
name|append
argument_list|(
name|event
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|append
parameter_list|(
name|Event
name|event
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|append
argument_list|(
name|key
argument_list|,
name|event
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|append
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|private
specifier|static
name|String
name|hostname
parameter_list|()
block|{
try|try
block|{
specifier|final
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
return|return
name|addr
operator|.
name|getHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnknownHostException
name|uhe
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|interfaces
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
while|while
condition|(
name|interfaces
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|NetworkInterface
name|nic
init|=
name|interfaces
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addresses
init|=
name|nic
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
while|while
condition|(
name|addresses
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|InetAddress
name|address
init|=
name|addresses
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|address
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
specifier|final
name|String
name|hostname
init|=
name|address
operator|.
name|getHostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|hostname
operator|!=
literal|null
condition|)
block|{
return|return
name|hostname
return|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SocketException
name|se
parameter_list|)
block|{
comment|// Ignore exception.
block|}
return|return
literal|"-"
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|procId
parameter_list|()
block|{
try|try
block|{
return|return
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
index|[
literal|0
index|]
return|;
comment|// likely works on most platforms
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ex
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|File
argument_list|(
literal|"/proc/self"
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getName
argument_list|()
return|;
comment|// try a Linux-specific way
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ignoredUseDefault
parameter_list|)
block|{
comment|// Ignore exception.
block|}
block|}
return|return
literal|"-"
return|;
block|}
block|}
end_class

end_unit

