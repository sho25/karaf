begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|FieldPosition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
specifier|public
class|class
name|FastDateFormat
block|{
specifier|public
specifier|static
specifier|final
name|String
name|YYYY_MM_DD
init|=
literal|"yyyy-MM-dd"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MMM_D2
init|=
literal|"MMM d2"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XXX
init|=
literal|"XXX"
decl_stmt|;
specifier|private
specifier|final
name|TimeZone
name|timeZone
decl_stmt|;
specifier|private
specifier|final
name|Locale
name|locale
decl_stmt|;
specifier|private
name|long
name|midnightTomorrow
decl_stmt|;
specifier|private
name|long
name|midnightToday
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|dstOffsets
init|=
operator|new
name|int
index|[
literal|25
index|]
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|FastDateFormat
parameter_list|()
block|{
name|this
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|,
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FastDateFormat
parameter_list|(
name|TimeZone
name|timeZone
parameter_list|,
name|Locale
name|locale
parameter_list|)
block|{
name|this
operator|.
name|timeZone
operator|=
name|timeZone
expr_stmt|;
name|this
operator|.
name|locale
operator|=
name|locale
expr_stmt|;
block|}
comment|/**      * Check whether the given instant if in the same day as the previous one.      */
specifier|public
name|boolean
name|sameDay
parameter_list|(
name|long
name|now
parameter_list|)
block|{
if|if
condition|(
name|now
operator|>=
name|midnightTomorrow
operator|||
name|now
operator|<
name|midnightToday
condition|)
block|{
name|updateMidnightMillis
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|updateDaylightSavingTime
argument_list|()
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Get the date formatted with the given pattern.      */
specifier|public
name|String
name|getDate
parameter_list|(
name|long
name|now
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|sameDay
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|String
name|date
init|=
name|cache
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|MMM_D2
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|FieldPosition
name|fp
init|=
operator|new
name|FieldPosition
argument_list|(
name|DateFormat
operator|.
name|Field
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM dd"
argument_list|,
name|locale
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|now
argument_list|)
argument_list|,
name|sb
argument_list|,
name|fp
argument_list|)
expr_stmt|;
if|if
condition|(
name|sb
operator|.
name|charAt
argument_list|(
name|fp
operator|.
name|getBeginIndex
argument_list|()
argument_list|)
operator|==
literal|'0'
condition|)
block|{
name|sb
operator|.
name|setCharAt
argument_list|(
name|fp
operator|.
name|getBeginIndex
argument_list|()
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
name|date
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SimpleDateFormat
name|sdf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|pattern
argument_list|,
name|locale
argument_list|)
decl_stmt|;
name|sdf
operator|.
name|setCalendar
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|(
name|timeZone
argument_list|,
name|locale
argument_list|)
argument_list|)
expr_stmt|;
name|date
operator|=
name|sdf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|put
argument_list|(
name|pattern
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
return|return
name|date
return|;
block|}
comment|/**      * Write the time in the HH:MM:SS[.sss] format to the given<code>Appendable</code>.      */
specifier|public
name|void
name|writeTime
parameter_list|(
name|long
name|now
parameter_list|,
name|boolean
name|writeMillis
parameter_list|,
name|Appendable
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ms
init|=
name|millisSinceMidnight
argument_list|(
name|now
argument_list|)
decl_stmt|;
specifier|final
name|int
name|hourOfDay
init|=
name|ms
operator|/
literal|3600000
decl_stmt|;
specifier|final
name|int
name|hours
init|=
name|hourOfDay
operator|+
name|daylightSavingTime
argument_list|(
name|hourOfDay
argument_list|)
operator|/
literal|3600000
decl_stmt|;
name|ms
operator|-=
literal|3600000
operator|*
name|hourOfDay
expr_stmt|;
specifier|final
name|int
name|minutes
init|=
name|ms
operator|/
literal|60000
decl_stmt|;
name|ms
operator|-=
literal|60000
operator|*
name|minutes
expr_stmt|;
specifier|final
name|int
name|seconds
init|=
name|ms
operator|/
literal|1000
decl_stmt|;
name|ms
operator|-=
literal|1000
operator|*
name|seconds
expr_stmt|;
comment|// Hour
name|int
name|temp
init|=
name|hours
operator|/
literal|10
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|hours
operator|-
literal|10
operator|*
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
comment|// Minute
name|temp
operator|=
name|minutes
operator|/
literal|10
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|minutes
operator|-
literal|10
operator|*
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
comment|// Second
name|temp
operator|=
name|seconds
operator|/
literal|10
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|seconds
operator|-
literal|10
operator|*
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
comment|// Millisecond
if|if
condition|(
name|writeMillis
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|temp
operator|=
name|ms
operator|/
literal|100
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|-=
literal|100
operator|*
name|temp
expr_stmt|;
name|temp
operator|=
name|ms
operator|/
literal|10
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|-=
literal|10
operator|*
name|temp
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|ms
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|millisSinceMidnight
parameter_list|(
specifier|final
name|long
name|now
parameter_list|)
block|{
name|sameDay
argument_list|(
name|now
argument_list|)
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
name|now
operator|-
name|midnightToday
argument_list|)
return|;
block|}
specifier|private
name|int
name|daylightSavingTime
parameter_list|(
specifier|final
name|int
name|hourOfDay
parameter_list|)
block|{
return|return
name|hourOfDay
operator|>
literal|23
condition|?
name|dstOffsets
index|[
literal|23
index|]
else|:
name|dstOffsets
index|[
name|hourOfDay
index|]
return|;
block|}
specifier|private
name|void
name|updateMidnightMillis
parameter_list|(
specifier|final
name|long
name|now
parameter_list|)
block|{
specifier|final
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|timeZone
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|midnightToday
operator|=
name|cal
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DATE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|midnightTomorrow
operator|=
name|cal
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|updateDaylightSavingTime
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|dstOffsets
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|ONE_HOUR
init|=
operator|(
name|int
operator|)
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeZone
operator|.
name|getOffset
argument_list|(
name|midnightToday
argument_list|)
operator|!=
name|timeZone
operator|.
name|getOffset
argument_list|(
name|midnightToday
operator|+
literal|23
operator|*
name|ONE_HOUR
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dstOffsets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|long
name|time
init|=
name|midnightToday
operator|+
name|i
operator|*
name|ONE_HOUR
decl_stmt|;
name|dstOffsets
index|[
name|i
index|]
operator|=
name|timeZone
operator|.
name|getOffset
argument_list|(
name|time
argument_list|)
operator|-
name|timeZone
operator|.
name|getRawOffset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dstOffsets
index|[
literal|0
index|]
operator|>
name|dstOffsets
index|[
literal|23
index|]
condition|)
block|{
comment|// clock is moved backwards.
comment|// we obtain midnightTonight with Calendar.getInstance(TimeZone), so it already includes raw offset
for|for
control|(
name|int
name|i
init|=
name|dstOffsets
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|dstOffsets
index|[
name|i
index|]
operator|-=
name|dstOffsets
index|[
literal|0
index|]
expr_stmt|;
comment|//
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

