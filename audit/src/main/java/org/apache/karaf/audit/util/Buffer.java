begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|ClientPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|UserPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Buffer
implements|implements
name|Appendable
implements|,
name|CharSequence
block|{
specifier|public
enum|enum
name|Format
block|{
name|Json
block|,
name|Syslog
block|}
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|HEX_DIGITS
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|}
decl_stmt|;
specifier|protected
specifier|final
name|Format
name|format
decl_stmt|;
specifier|protected
specifier|final
name|int
name|capacity
decl_stmt|;
specifier|protected
name|char
index|[]
name|buffer
decl_stmt|;
specifier|protected
name|int
name|position
init|=
literal|0
decl_stmt|;
specifier|public
name|Buffer
parameter_list|(
name|Format
name|format
parameter_list|)
block|{
name|this
argument_list|(
name|format
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Buffer
parameter_list|(
name|Format
name|format
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|capacity
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|char
index|[
name|size
index|]
expr_stmt|;
block|}
specifier|public
name|char
index|[]
name|buffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|position
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|position
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|buffer
operator|.
name|length
operator|>
name|capacity
condition|)
block|{
name|this
operator|.
name|buffer
operator|=
operator|new
name|char
index|[
name|capacity
index|]
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|position
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|Appendable
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|out
operator|instanceof
name|Writer
condition|)
block|{
operator|(
operator|(
name|Writer
operator|)
name|out
operator|)
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|out
operator|instanceof
name|StringBuilder
condition|)
block|{
operator|(
operator|(
name|StringBuilder
operator|)
name|out
operator|)
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|append
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|require
parameter_list|(
name|int
name|nb
parameter_list|)
block|{
if|if
condition|(
name|position
operator|+
name|nb
operator|>=
name|buffer
operator|.
name|length
condition|)
block|{
name|char
index|[]
name|b
init|=
operator|new
name|char
index|[
name|buffer
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|b
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Buffer
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|append
argument_list|(
name|csq
argument_list|,
literal|0
argument_list|,
name|csq
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Buffer
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|csq
operator|instanceof
name|String
condition|)
block|{
return|return
name|append
argument_list|(
operator|(
name|String
operator|)
name|csq
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
else|else
block|{
name|require
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
name|csq
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
specifier|public
name|Buffer
name|append
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|append
argument_list|(
name|str
argument_list|,
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Buffer
name|append
parameter_list|(
name|String
name|str
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nb
init|=
name|end
operator|-
name|start
decl_stmt|;
name|require
argument_list|(
name|nb
argument_list|)
expr_stmt|;
name|str
operator|.
name|getChars
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|position
operator|+=
name|nb
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Buffer
name|append
parameter_list|(
name|char
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|require
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
name|c
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|position
return|;
block|}
annotation|@
name|Override
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|buffer
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|CharSequence
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
specifier|public
name|Buffer
name|format
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
name|require
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'n'
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'u'
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'l'
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'l'
expr_stmt|;
return|return
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|format
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|object
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Subject
condition|)
block|{
return|return
name|format
argument_list|(
operator|(
name|Subject
operator|)
name|object
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|format
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|Buffer
name|format
parameter_list|(
name|Object
index|[]
name|array
parameter_list|)
throws|throws
name|IOException
block|{
name|require
argument_list|(
name|array
operator|.
name|length
operator|*
literal|10
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'['
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|','
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|' '
expr_stmt|;
block|}
name|format
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|format
operator|==
name|Format
operator|.
name|Syslog
condition|)
block|{
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
block|}
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|']'
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Buffer
name|format
parameter_list|(
name|Subject
name|subject
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|up
init|=
literal|null
decl_stmt|;
name|String
name|cp
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|UserPrincipal
condition|)
block|{
name|up
operator|=
name|p
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|instanceof
name|ClientPrincipal
condition|)
block|{
name|cp
operator|=
name|p
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|up
operator|!=
literal|null
condition|)
block|{
name|append
argument_list|(
name|up
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cp
operator|!=
literal|null
condition|)
block|{
name|append
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Buffer
name|format
parameter_list|(
name|String
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|Json
case|:
name|formatJson
argument_list|(
name|cs
argument_list|)
expr_stmt|;
break|break;
case|case
name|Syslog
case|:
name|formatSyslog
argument_list|(
name|cs
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Buffer
name|format
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|require
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|position
operator|=
name|NumberOutput
operator|.
name|outputInt
argument_list|(
name|i
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Buffer
name|format
parameter_list|(
name|long
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|require
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|position
operator|=
name|NumberOutput
operator|.
name|outputLong
argument_list|(
name|i
argument_list|,
name|buffer
argument_list|,
name|position
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|formatJson
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|value
operator|.
name|length
argument_list|()
decl_stmt|;
name|require
argument_list|(
name|len
operator|*
literal|4
argument_list|)
expr_stmt|;
name|position
operator|=
name|transferJson
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|formatSyslog
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|end
init|=
name|value
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|Math
operator|.
name|min
argument_list|(
name|end
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|require
argument_list|(
name|max
operator|*
literal|4
argument_list|)
expr_stmt|;
name|position
operator|=
name|transferSyslog
argument_list|(
name|position
argument_list|,
name|buffer
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|>
name|max
condition|)
block|{
name|require
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'.'
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'.'
expr_stmt|;
name|buffer
index|[
name|position
operator|++
index|]
operator|=
literal|'.'
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|transferJson
parameter_list|(
name|int
name|position
parameter_list|,
name|char
index|[]
name|d
parameter_list|,
name|String
name|s
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\"'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'"'
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
break|break;
case|case
literal|'\b'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'b'
expr_stmt|;
break|break;
case|case
literal|'\f'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'f'
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'n'
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'r'
expr_stmt|;
break|break;
case|case
literal|'\t'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'t'
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|c
operator|<
literal|' '
operator|||
operator|(
name|c
operator|>=
literal|'\u0080'
operator|&&
name|c
operator|<
literal|'\u00a0'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'\u2000'
operator|&&
name|c
operator|<
literal|'\u2100'
operator|)
condition|)
block|{
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'u'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
name|HEX_DIGITS
index|[
name|c
operator|>>
literal|12
index|]
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
name|HEX_DIGITS
index|[
operator|(
name|c
operator|>>
literal|8
operator|)
operator|&
literal|0x0F
index|]
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
name|HEX_DIGITS
index|[
operator|(
name|c
operator|>>
literal|4
operator|)
operator|&
literal|0x0F
index|]
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
name|HEX_DIGITS
index|[
name|c
operator|&
literal|0x0F
index|]
expr_stmt|;
block|}
else|else
block|{
name|d
index|[
name|position
operator|++
index|]
operator|=
name|c
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|position
return|;
block|}
specifier|private
name|int
name|transferSyslog
parameter_list|(
name|int
name|position
parameter_list|,
name|char
index|[]
name|d
parameter_list|,
name|String
name|s
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
case|case
literal|']'
case|:
name|d
index|[
name|position
operator|++
index|]
operator|=
literal|'\\'
expr_stmt|;
name|d
index|[
name|position
operator|++
index|]
operator|=
name|c
expr_stmt|;
break|break;
default|default:
name|d
index|[
name|position
operator|++
index|]
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
return|return
name|position
return|;
block|}
block|}
end_class

end_unit

