begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|layout
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|util
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
specifier|public
class|class
name|GelfLayout
extends|extends
name|AbstractLayout
block|{
specifier|public
name|GelfLayout
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|Buffer
argument_list|(
name|Buffer
operator|.
name|Format
operator|.
name|Json
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|header
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"version"
argument_list|,
literal|"1.1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"host"
argument_list|,
name|hostName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|datetime
argument_list|(
name|event
operator|.
name|timestamp
argument_list|()
argument_list|)
expr_stmt|;
name|append
argument_list|(
literal|"short_message"
argument_list|,
name|event
operator|.
name|type
argument_list|()
operator|+
literal|"."
operator|+
name|event
operator|.
name|subtype
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|datetime
parameter_list|(
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" timestamp="
argument_list|)
expr_stmt|;
name|long
name|secs
init|=
name|timestamp
operator|/
literal|1000
decl_stmt|;
name|int
name|ms
init|=
call|(
name|int
call|)
argument_list|(
name|timestamp
operator|-
name|secs
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|format
argument_list|(
name|secs
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|int
name|temp
init|=
name|ms
operator|/
literal|100
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|-=
literal|100
operator|*
name|temp
expr_stmt|;
name|temp
operator|=
name|ms
operator|/
literal|10
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|temp
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|-=
literal|10
operator|*
name|temp
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|ms
operator|+
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|footer
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|append
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|append
argument_list|(
name|key
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|append
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|,
name|boolean
name|custom
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|custom
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|Number
condition|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|Long
condition|)
block|{
name|buffer
operator|.
name|format
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|val
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|val
operator|instanceof
name|Integer
condition|)
block|{
name|buffer
operator|.
name|format
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|val
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|format
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

