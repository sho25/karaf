begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Code copied from org.codehaus.jackson.io.NumberOutput  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|NumberOutput
block|{
specifier|private
specifier|static
name|int
name|MILLION
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
name|int
name|BILLION
init|=
literal|1000000000
decl_stmt|;
specifier|private
specifier|static
name|long
name|BILLION_L
init|=
literal|1000000000L
decl_stmt|;
specifier|private
specifier|static
name|long
name|MIN_INT_AS_LONG
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|private
specifier|static
name|long
name|MAX_INT_AS_LONG
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|final
specifier|static
name|String
name|SMALLEST_INT
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|String
name|SMALLEST_LONG
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
comment|/**      * Encoded representations of 3-decimal-digit indexed values, where      * 3 LSB are ascii characters      *      * @since 2.8.2      */
specifier|private
specifier|final
specifier|static
name|int
index|[]
name|TRIPLET_TO_CHARS
init|=
operator|new
name|int
index|[
literal|1000
index|]
decl_stmt|;
static|static
block|{
comment|/* Let's fill it with NULLs for ignorable leading digits,          * and digit chars for others          */
name|int
name|fullIx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i1
init|=
literal|0
init|;
name|i1
operator|<
literal|10
condition|;
operator|++
name|i1
control|)
block|{
for|for
control|(
name|int
name|i2
init|=
literal|0
init|;
name|i2
operator|<
literal|10
condition|;
operator|++
name|i2
control|)
block|{
for|for
control|(
name|int
name|i3
init|=
literal|0
init|;
name|i3
operator|<
literal|10
condition|;
operator|++
name|i3
control|)
block|{
name|int
name|enc
init|=
operator|(
operator|(
name|i1
operator|+
literal|'0'
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|i2
operator|+
literal|'0'
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|i3
operator|+
literal|'0'
operator|)
decl_stmt|;
name|TRIPLET_TO_CHARS
index|[
name|fullIx
operator|++
index|]
operator|=
name|enc
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|sSmallIntStrs
init|=
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|,
literal|"10"
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|sSmallIntStrs2
init|=
operator|new
name|String
index|[]
block|{
literal|"-1"
block|,
literal|"-2"
block|,
literal|"-3"
block|,
literal|"-4"
block|,
literal|"-5"
block|,
literal|"-6"
block|,
literal|"-7"
block|,
literal|"-8"
block|,
literal|"-9"
block|,
literal|"-10"
block|}
decl_stmt|;
comment|/*     /**********************************************************     /* Efficient serialization methods using raw buffers     /**********************************************************      */
comment|/**      * @return Offset within buffer after outputting int      */
specifier|public
specifier|static
name|int
name|outputInt
parameter_list|(
name|int
name|v
parameter_list|,
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
if|if
condition|(
name|v
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|v
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
comment|// Special case: no matching positive value within range;
comment|// let's then "upgrade" to long and output as such.
return|return
name|_outputSmallestI
argument_list|(
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'-'
expr_stmt|;
name|v
operator|=
operator|-
name|v
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|<
name|MILLION
condition|)
block|{
comment|// at most 2 triplets...
if|if
condition|(
name|v
operator|<
literal|1000
condition|)
block|{
if|if
condition|(
name|v
operator|<
literal|10
condition|)
block|{
name|b
index|[
name|off
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|'0'
operator|+
name|v
argument_list|)
expr_stmt|;
return|return
name|off
operator|+
literal|1
return|;
block|}
return|return
name|_leading3
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|v
operator|-=
operator|(
name|thousands
operator|*
literal|1000
operator|)
expr_stmt|;
comment|// == value % 1000
name|off
operator|=
name|_leading3
argument_list|(
name|thousands
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|off
operator|=
name|_full3
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
return|return
name|off
return|;
block|}
comment|// ok, all 3 triplets included
comment|/* Let's first hand possible billions separately before          * handling 3 triplets. This is possible since we know we          * can have at most '2' as billion count.          */
if|if
condition|(
name|v
operator|>=
name|BILLION
condition|)
block|{
name|v
operator|-=
name|BILLION
expr_stmt|;
if|if
condition|(
name|v
operator|>=
name|BILLION
condition|)
block|{
name|v
operator|-=
name|BILLION
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
else|else
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'1'
expr_stmt|;
block|}
return|return
name|_outputFullBillion
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|int
name|newValue
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
operator|(
name|v
operator|-
operator|(
name|newValue
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
comment|// == value % 1000
name|v
operator|=
name|newValue
expr_stmt|;
name|newValue
operator|/=
literal|1000
expr_stmt|;
name|int
name|thousands
init|=
operator|(
name|v
operator|-
operator|(
name|newValue
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
name|off
operator|=
name|_leading3
argument_list|(
name|newValue
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|off
operator|=
name|_full3
argument_list|(
name|thousands
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
return|return
name|_full3
argument_list|(
name|ones
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|outputInt
parameter_list|(
name|int
name|v
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
if|if
condition|(
name|v
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|v
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|_outputSmallestI
argument_list|(
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'-'
expr_stmt|;
name|v
operator|=
operator|-
name|v
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|<
name|MILLION
condition|)
block|{
comment|// at most 2 triplets...
if|if
condition|(
name|v
operator|<
literal|1000
condition|)
block|{
if|if
condition|(
name|v
operator|<
literal|10
condition|)
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|'0'
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|off
operator|=
name|_leading3
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|v
operator|-=
operator|(
name|thousands
operator|*
literal|1000
operator|)
expr_stmt|;
comment|// == value % 1000
name|off
operator|=
name|_leading3
argument_list|(
name|thousands
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|off
operator|=
name|_full3
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
return|return
name|off
return|;
block|}
if|if
condition|(
name|v
operator|>=
name|BILLION
condition|)
block|{
name|v
operator|-=
name|BILLION
expr_stmt|;
if|if
condition|(
name|v
operator|>=
name|BILLION
condition|)
block|{
name|v
operator|-=
name|BILLION
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
else|else
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'1'
expr_stmt|;
block|}
return|return
name|_outputFullBillion
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|int
name|newValue
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
operator|(
name|v
operator|-
operator|(
name|newValue
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
comment|// == value % 1000
name|v
operator|=
name|newValue
expr_stmt|;
name|newValue
operator|/=
literal|1000
expr_stmt|;
name|int
name|thousands
init|=
operator|(
name|v
operator|-
operator|(
name|newValue
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
name|off
operator|=
name|_leading3
argument_list|(
name|newValue
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|off
operator|=
name|_full3
argument_list|(
name|thousands
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
return|return
name|_full3
argument_list|(
name|ones
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
comment|/**      * @return Offset within buffer after outputting int      */
specifier|public
specifier|static
name|int
name|outputLong
parameter_list|(
name|long
name|v
parameter_list|,
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
comment|// First: does it actually fit in an int?
if|if
condition|(
name|v
operator|<
literal|0L
condition|)
block|{
if|if
condition|(
name|v
operator|>
name|MIN_INT_AS_LONG
condition|)
block|{
return|return
name|outputInt
argument_list|(
operator|(
name|int
operator|)
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
if|if
condition|(
name|v
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|_outputSmallestL
argument_list|(
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'-'
expr_stmt|;
name|v
operator|=
operator|-
name|v
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|v
operator|<=
name|MAX_INT_AS_LONG
condition|)
block|{
return|return
name|outputInt
argument_list|(
operator|(
name|int
operator|)
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
block|}
comment|// Ok, let's separate last 9 digits (3 x full sets of 3)
name|long
name|upper
init|=
name|v
operator|/
name|BILLION_L
decl_stmt|;
name|v
operator|-=
operator|(
name|upper
operator|*
name|BILLION_L
operator|)
expr_stmt|;
comment|// two integers?
if|if
condition|(
name|upper
operator|<
name|BILLION_L
condition|)
block|{
name|off
operator|=
name|_outputUptoBillion
argument_list|(
operator|(
name|int
operator|)
name|upper
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no, two ints and bits; hi may be about 16 or so
name|long
name|hi
init|=
name|upper
operator|/
name|BILLION_L
decl_stmt|;
name|upper
operator|-=
operator|(
name|hi
operator|*
name|BILLION_L
operator|)
expr_stmt|;
name|off
operator|=
name|_leading3
argument_list|(
operator|(
name|int
operator|)
name|hi
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|off
operator|=
name|_outputFullBillion
argument_list|(
operator|(
name|int
operator|)
name|upper
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
return|return
name|_outputFullBillion
argument_list|(
operator|(
name|int
operator|)
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|outputLong
parameter_list|(
name|long
name|v
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
if|if
condition|(
name|v
operator|<
literal|0L
condition|)
block|{
if|if
condition|(
name|v
operator|>
name|MIN_INT_AS_LONG
condition|)
block|{
return|return
name|outputInt
argument_list|(
operator|(
name|int
operator|)
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
if|if
condition|(
name|v
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|_outputSmallestL
argument_list|(
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
literal|'-'
expr_stmt|;
name|v
operator|=
operator|-
name|v
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|v
operator|<=
name|MAX_INT_AS_LONG
condition|)
block|{
return|return
name|outputInt
argument_list|(
operator|(
name|int
operator|)
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
block|}
comment|// Ok, let's separate last 9 digits (3 x full sets of 3)
name|long
name|upper
init|=
name|v
operator|/
name|BILLION_L
decl_stmt|;
name|v
operator|-=
operator|(
name|upper
operator|*
name|BILLION_L
operator|)
expr_stmt|;
comment|// two integers?
if|if
condition|(
name|upper
operator|<
name|BILLION_L
condition|)
block|{
name|off
operator|=
name|_outputUptoBillion
argument_list|(
operator|(
name|int
operator|)
name|upper
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no, two ints and bits; hi may be about 16 or so
name|long
name|hi
init|=
name|upper
operator|/
name|BILLION_L
decl_stmt|;
name|upper
operator|-=
operator|(
name|hi
operator|*
name|BILLION_L
operator|)
expr_stmt|;
name|off
operator|=
name|_leading3
argument_list|(
operator|(
name|int
operator|)
name|hi
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|off
operator|=
name|_outputFullBillion
argument_list|(
operator|(
name|int
operator|)
name|upper
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
block|}
return|return
name|_outputFullBillion
argument_list|(
operator|(
name|int
operator|)
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
comment|/*     /**********************************************************     /* Convenience serialization methods     /**********************************************************      */
comment|/* !!! 05-Aug-2008, tatus: Any ways to further optimize      *   these? (or need: only called by diagnostics methods?)      */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|int
name|v
parameter_list|)
block|{
comment|// Lookup table for small values
if|if
condition|(
name|v
operator|<
name|sSmallIntStrs
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|v
operator|>=
literal|0
condition|)
block|{
return|return
name|sSmallIntStrs
index|[
name|v
index|]
return|;
block|}
name|int
name|v2
init|=
operator|-
name|v
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|v2
operator|<
name|sSmallIntStrs2
operator|.
name|length
condition|)
block|{
return|return
name|sSmallIntStrs2
index|[
name|v2
index|]
return|;
block|}
block|}
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|long
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|<=
name|Integer
operator|.
name|MAX_VALUE
operator|&&
name|v
operator|>=
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
return|return
name|toString
argument_list|(
operator|(
name|int
operator|)
name|v
argument_list|)
return|;
block|}
return|return
name|Long
operator|.
name|toString
argument_list|(
name|v
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|double
name|v
parameter_list|)
block|{
return|return
name|Double
operator|.
name|toString
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/**      * @since 2.6.0      */
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|float
name|v
parameter_list|)
block|{
return|return
name|Float
operator|.
name|toString
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/*     /**********************************************************     /* Internal helper methods     /**********************************************************      */
specifier|private
specifier|static
name|int
name|_outputUptoBillion
parameter_list|(
name|int
name|v
parameter_list|,
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
if|if
condition|(
name|v
operator|<
name|MILLION
condition|)
block|{
comment|// at most 2 triplets...
if|if
condition|(
name|v
operator|<
literal|1000
condition|)
block|{
return|return
name|_leading3
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
name|v
operator|-
operator|(
name|thousands
operator|*
literal|1000
operator|)
decl_stmt|;
comment|// == value % 1000
return|return
name|_outputUptoMillion
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|thousands
argument_list|,
name|ones
argument_list|)
return|;
block|}
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
operator|(
name|v
operator|-
operator|(
name|thousands
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
comment|// == value % 1000
name|int
name|millions
init|=
name|thousands
operator|/
literal|1000
decl_stmt|;
name|thousands
operator|-=
operator|(
name|millions
operator|*
literal|1000
operator|)
expr_stmt|;
name|off
operator|=
name|_leading3
argument_list|(
name|millions
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|thousands
index|]
decl_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|ones
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputFullBillion
parameter_list|(
name|int
name|v
parameter_list|,
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
operator|(
name|v
operator|-
operator|(
name|thousands
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
comment|// == value % 1000
name|int
name|millions
init|=
name|thousands
operator|/
literal|1000
decl_stmt|;
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|millions
index|]
decl_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|thousands
operator|-=
operator|(
name|millions
operator|*
literal|1000
operator|)
expr_stmt|;
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|thousands
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|ones
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputUptoBillion
parameter_list|(
name|int
name|v
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
if|if
condition|(
name|v
operator|<
name|MILLION
condition|)
block|{
comment|// at most 2 triplets...
if|if
condition|(
name|v
operator|<
literal|1000
condition|)
block|{
return|return
name|_leading3
argument_list|(
name|v
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
return|;
block|}
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
name|v
operator|-
operator|(
name|thousands
operator|*
literal|1000
operator|)
decl_stmt|;
comment|// == value % 1000
return|return
name|_outputUptoMillion
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|thousands
argument_list|,
name|ones
argument_list|)
return|;
block|}
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
operator|(
name|v
operator|-
operator|(
name|thousands
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
comment|// == value % 1000
name|int
name|millions
init|=
name|thousands
operator|/
literal|1000
decl_stmt|;
name|thousands
operator|-=
operator|(
name|millions
operator|*
literal|1000
operator|)
expr_stmt|;
name|off
operator|=
name|_leading3
argument_list|(
name|millions
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|thousands
index|]
decl_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|ones
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputFullBillion
parameter_list|(
name|int
name|v
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|thousands
init|=
name|v
operator|/
literal|1000
decl_stmt|;
name|int
name|ones
init|=
operator|(
name|v
operator|-
operator|(
name|thousands
operator|*
literal|1000
operator|)
operator|)
decl_stmt|;
comment|// == value % 1000
name|int
name|millions
init|=
name|thousands
operator|/
literal|1000
decl_stmt|;
name|thousands
operator|-=
operator|(
name|millions
operator|*
literal|1000
operator|)
expr_stmt|;
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|millions
index|]
decl_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|thousands
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|ones
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputUptoMillion
parameter_list|(
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|thousands
parameter_list|,
name|int
name|ones
parameter_list|)
block|{
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|thousands
index|]
decl_stmt|;
if|if
condition|(
name|thousands
operator|>
literal|9
condition|)
block|{
if|if
condition|(
name|thousands
operator|>
literal|99
condition|)
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
comment|// and then full
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|ones
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputUptoMillion
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|thousands
parameter_list|,
name|int
name|ones
parameter_list|)
block|{
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|thousands
index|]
decl_stmt|;
if|if
condition|(
name|thousands
operator|>
literal|9
condition|)
block|{
if|if
condition|(
name|thousands
operator|>
literal|99
condition|)
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
comment|// and then full
name|enc
operator|=
name|TRIPLET_TO_CHARS
index|[
name|ones
index|]
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_leading3
parameter_list|(
name|int
name|t
parameter_list|,
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|t
index|]
decl_stmt|;
if|if
condition|(
name|t
operator|>
literal|9
condition|)
block|{
if|if
condition|(
name|t
operator|>
literal|99
condition|)
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_leading3
parameter_list|(
name|int
name|t
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|t
index|]
decl_stmt|;
if|if
condition|(
name|t
operator|>
literal|9
condition|)
block|{
if|if
condition|(
name|t
operator|>
literal|99
condition|)
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
block|}
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_full3
parameter_list|(
name|int
name|t
parameter_list|,
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|t
index|]
decl_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
operator|(
name|enc
operator|>>
literal|8
operator|)
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|enc
operator|&
literal|0x7F
argument_list|)
expr_stmt|;
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_full3
parameter_list|(
name|int
name|t
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|enc
init|=
name|TRIPLET_TO_CHARS
index|[
name|t
index|]
decl_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|enc
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|enc
expr_stmt|;
return|return
name|off
return|;
block|}
comment|// // // Special cases for where we can not flip the sign bit
specifier|private
specifier|static
name|int
name|_outputSmallestL
parameter_list|(
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|len
init|=
name|SMALLEST_LONG
operator|.
name|length
argument_list|()
decl_stmt|;
name|SMALLEST_LONG
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|len
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
return|return
operator|(
name|off
operator|+
name|len
operator|)
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputSmallestL
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|len
init|=
name|SMALLEST_LONG
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|SMALLEST_LONG
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|off
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputSmallestI
parameter_list|(
name|char
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|len
init|=
name|SMALLEST_INT
operator|.
name|length
argument_list|()
decl_stmt|;
name|SMALLEST_INT
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|len
argument_list|,
name|b
argument_list|,
name|off
argument_list|)
expr_stmt|;
return|return
operator|(
name|off
operator|+
name|len
operator|)
return|;
block|}
specifier|private
specifier|static
name|int
name|_outputSmallestI
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|)
block|{
name|int
name|len
init|=
name|SMALLEST_INT
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|b
index|[
name|off
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|SMALLEST_INT
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|off
return|;
block|}
block|}
end_class

end_unit

