begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|logger
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|EventLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|audit
operator|.
name|EventLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetEncoder
import|;
end_import

begin_class
specifier|public
class|class
name|UdpEventLogger
implements|implements
name|EventLogger
block|{
specifier|private
specifier|final
name|InetAddress
name|host
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|CharsetEncoder
name|encoder
decl_stmt|;
specifier|private
specifier|final
name|EventLayout
name|layout
decl_stmt|;
specifier|private
specifier|final
name|DatagramSocket
name|dgram
decl_stmt|;
specifier|private
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
specifier|public
name|UdpEventLogger
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|encoding
parameter_list|,
name|EventLayout
name|layout
parameter_list|)
throws|throws
name|SocketException
throws|,
name|UnknownHostException
block|{
name|this
operator|.
name|layout
operator|=
name|layout
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|Charset
operator|.
name|forName
argument_list|(
name|encoding
argument_list|)
operator|.
name|newEncoder
argument_list|()
expr_stmt|;
name|this
operator|.
name|dgram
operator|=
operator|new
name|DatagramSocket
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|Event
name|event
parameter_list|)
throws|throws
name|IOException
block|{
name|CharBuffer
name|cb
init|=
name|layout
operator|.
name|format
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|int
name|cap
init|=
call|(
name|int
call|)
argument_list|(
name|cb
operator|.
name|remaining
argument_list|()
operator|*
name|encoder
operator|.
name|averageBytesPerChar
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|bb
operator|.
name|capacity
argument_list|()
operator|>
name|cap
condition|)
block|{
name|bb
operator|=
name|this
operator|.
name|bb
expr_stmt|;
block|}
else|else
block|{
name|bb
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|cap
argument_list|)
expr_stmt|;
block|}
name|encoder
operator|.
name|reset
argument_list|()
expr_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|cb
argument_list|,
name|bb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cb
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|bb
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bb
operator|.
name|capacity
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|cb
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|reset
argument_list|()
expr_stmt|;
name|encoder
operator|.
name|encode
argument_list|(
name|cb
argument_list|,
name|bb
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|dgram
operator|.
name|send
argument_list|(
operator|new
name|DatagramPacket
argument_list|(
name|bb
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bb
operator|.
name|position
argument_list|()
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|bb
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|dgram
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

