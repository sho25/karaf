begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|commons
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_class
specifier|public
class|class
name|VersionRange
block|{
specifier|private
specifier|final
name|Version
name|m_low
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|m_isLowInclusive
decl_stmt|;
specifier|private
specifier|final
name|Version
name|m_high
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|m_isHighInclusive
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|VersionRange
name|infiniteRange
init|=
operator|new
name|VersionRange
argument_list|(
name|Version
operator|.
name|emptyVersion
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|VersionRange
parameter_list|(
name|Version
name|low
parameter_list|,
name|boolean
name|isLowInclusive
parameter_list|,
name|Version
name|high
parameter_list|,
name|boolean
name|isHighInclusive
parameter_list|)
block|{
name|m_low
operator|=
name|low
expr_stmt|;
name|m_isLowInclusive
operator|=
name|isLowInclusive
expr_stmt|;
name|m_high
operator|=
name|high
expr_stmt|;
name|m_isHighInclusive
operator|=
name|isHighInclusive
expr_stmt|;
block|}
specifier|public
name|Version
name|getLow
parameter_list|()
block|{
return|return
name|m_low
return|;
block|}
specifier|public
name|boolean
name|isLowInclusive
parameter_list|()
block|{
return|return
name|m_isLowInclusive
return|;
block|}
specifier|public
name|Version
name|getHigh
parameter_list|()
block|{
return|return
name|m_high
return|;
block|}
specifier|public
name|boolean
name|isHighInclusive
parameter_list|()
block|{
return|return
name|m_isHighInclusive
return|;
block|}
specifier|public
name|boolean
name|isInRange
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
comment|// We might not have an upper end to the range.
if|if
condition|(
name|m_high
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_low
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|isLowInclusive
argument_list|()
operator|&&
name|isHighInclusive
argument_list|()
condition|)
block|{
return|return
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_low
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_high
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|isHighInclusive
argument_list|()
condition|)
block|{
return|return
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_low
argument_list|)
operator|>
literal|0
operator|)
operator|&&
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_high
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|isLowInclusive
argument_list|()
condition|)
block|{
return|return
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_low
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_high
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
return|return
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_low
argument_list|)
operator|>
literal|0
operator|)
operator|&&
operator|(
name|version
operator|.
name|compareTo
argument_list|(
name|m_high
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
specifier|public
specifier|static
name|VersionRange
name|parse
parameter_list|(
name|String
name|range
parameter_list|)
block|{
comment|// Check if the version is an interval.
if|if
condition|(
name|range
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|String
name|s
init|=
name|range
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|range
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|vlo
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|vhi
init|=
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
operator|+
literal|1
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
operator|new
name|VersionRange
argument_list|(
operator|new
name|Version
argument_list|(
name|vlo
argument_list|)
argument_list|,
operator|(
name|range
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'['
operator|)
argument_list|,
operator|new
name|Version
argument_list|(
name|vhi
argument_list|)
argument_list|,
operator|(
name|range
operator|.
name|charAt
argument_list|(
name|range
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|']'
operator|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|VersionRange
argument_list|(
operator|new
name|Version
argument_list|(
name|range
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|VersionRange
name|other
init|=
operator|(
name|VersionRange
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|m_low
operator|!=
name|other
operator|.
name|m_low
operator|&&
operator|(
name|m_low
operator|==
literal|null
operator|||
operator|!
name|m_low
operator|.
name|equals
argument_list|(
name|other
operator|.
name|m_low
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|m_isLowInclusive
operator|!=
name|other
operator|.
name|m_isLowInclusive
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|m_high
operator|!=
name|other
operator|.
name|m_high
operator|&&
operator|(
name|m_high
operator|==
literal|null
operator|||
operator|!
name|m_high
operator|.
name|equals
argument_list|(
name|other
operator|.
name|m_high
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|m_isHighInclusive
operator|!=
name|other
operator|.
name|m_isHighInclusive
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
literal|5
decl_stmt|;
name|hash
operator|=
literal|97
operator|*
name|hash
operator|+
operator|(
name|m_low
operator|!=
literal|null
condition|?
name|m_low
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hash
operator|=
literal|97
operator|*
name|hash
operator|+
operator|(
name|m_isLowInclusive
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
name|hash
operator|=
literal|97
operator|*
name|hash
operator|+
operator|(
name|m_high
operator|!=
literal|null
condition|?
name|m_high
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|hash
operator|=
literal|97
operator|*
name|hash
operator|+
operator|(
name|m_isHighInclusive
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|hash
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|m_high
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|m_isLowInclusive
condition|?
literal|'['
else|:
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|m_low
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|m_high
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|m_isHighInclusive
condition|?
literal|']'
else|:
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|m_low
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

