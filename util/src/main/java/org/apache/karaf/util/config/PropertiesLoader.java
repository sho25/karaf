begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|config
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
operator|.
name|substVars
import|;
end_import

begin_class
specifier|public
class|class
name|PropertiesLoader
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDES_PROPERTY
init|=
literal|"${includes}"
decl_stmt|;
comment|// mandatory includes
specifier|private
specifier|static
specifier|final
name|String
name|OPTIONALS_PROPERTY
init|=
literal|"${optionals}"
decl_stmt|;
comment|// optionals include
specifier|private
specifier|static
specifier|final
name|String
name|OVERRIDE_PREFIX
init|=
literal|"karaf.override."
decl_stmt|;
comment|// prefix that marks that system property should override defaults.
comment|/**      *<p>      * Loads the configuration properties in the configuration property file      * associated with the framework installation; these properties      * are accessible to the framework and to bundles and are intended      * for configuration purposes. By default, the configuration property      * file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>config.properties</tt>".      * The installation directory of Felix is assumed to be the parent      * directory of the<tt>felix.jar</tt> file as found on the system class      * path property. The precise file from which to load configuration      * properties can be set by initializing the "<code>felix.config.properties</code>"      * system property to an arbitrary URL.      *</p>      *      * @param file the config file where to load the properties.      * @return A<code>Properties</code> instance or<code>null</code> if there was an error.      * @throws Exception if something wrong occurs.      */
specifier|public
specifier|static
name|Properties
name|loadConfigProperties
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
comment|// See if the property URL was specified as a property.
name|URL
name|configPropURL
decl_stmt|;
try|try
block|{
name|configPropURL
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Properties
name|configProps
init|=
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|copySystemProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|substitute
argument_list|()
expr_stmt|;
comment|// Perform variable substitution for system properties.
comment|//        for (Enumeration<?> e = configProps.propertyNames(); e.hasMoreElements();) {
comment|//            String name = (String) e.nextElement();
comment|//            configProps.setProperty(name,
comment|//                    SubstHelper.substVars(configProps.getProperty(name), name, null, configProps));
comment|//        }
return|return
name|configProps
return|;
block|}
comment|/**      *<p>      * Loads the properties in the system property file associated with the      * framework installation into<tt>System.setProperty()</tt>. These properties      * are not directly used by the framework in anyway. By default, the system      * property file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>system.properties</tt>". The      * installation directory of Felix is assumed to be the parent directory of      * the<tt>felix.jar</tt> file as found on the system class path property.      * The precise file from which to load system properties can be set by      * initializing the "<tt>felix.system.properties</tt>" system property to an      * arbitrary URL.      *</p>      *      * @param file the Karaf base folder.      * @throws IOException if the system file can't be loaded.      */
specifier|public
specifier|static
name|void
name|loadSystemProperties
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|Properties
name|props
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|configPropURL
init|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|props
operator|=
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Ignore
return|return;
block|}
name|InterpolationHelper
operator|.
name|SubstitutionCallback
name|callback
init|=
operator|new
name|InterpolationHelper
operator|.
name|BundleContextSubstitutionCallback
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|OVERRIDE_PREFIX
argument_list|)
condition|)
block|{
name|String
name|overrideName
init|=
name|name
operator|.
name|substring
argument_list|(
name|OVERRIDE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|overrideName
argument_list|,
name|substVars
argument_list|(
name|value
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|props
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|value
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|props
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|copySystemProperties
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"felix."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"karaf."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"org.osgi.framework."
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Properties
name|loadPropertiesOrFail
parameter_list|(
name|File
name|configFile
parameter_list|)
block|{
try|try
block|{
name|URL
name|configPropURL
init|=
name|configFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
return|return
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading properties from "
operator|+
name|configFile
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Properties
name|loadPropertiesFile
parameter_list|(
name|URL
name|configPropURL
parameter_list|,
name|boolean
name|failIfNotFound
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|configProps
operator|.
name|load
argument_list|(
name|configPropURL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|failIfNotFound
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
name|loadIncludes
argument_list|(
name|INCLUDES_PROPERTY
argument_list|,
literal|true
argument_list|,
name|configPropURL
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
name|loadIncludes
argument_list|(
name|OPTIONALS_PROPERTY
argument_list|,
literal|false
argument_list|,
name|configPropURL
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
name|trimValues
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
specifier|private
specifier|static
name|void
name|loadIncludes
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|boolean
name|mandatory
parameter_list|,
name|URL
name|configPropURL
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|includes
init|=
name|configProps
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|includes
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|includes
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|configPropURL
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
name|loadPropertiesFile
argument_list|(
name|url
argument_list|,
name|mandatory
argument_list|)
decl_stmt|;
name|configProps
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
name|configProps
operator|.
name|remove
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|trimValues
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|configProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|configProps
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|configProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|nextLocation
parameter_list|(
name|StringTokenizer
name|st
parameter_list|)
block|{
name|String
name|retVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|tokenList
init|=
literal|"\" "
decl_stmt|;
name|StringBuffer
name|tokBuf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|tok
decl_stmt|;
name|boolean
name|inQuote
init|=
literal|false
decl_stmt|;
name|boolean
name|tokStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|exit
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|exit
operator|)
condition|)
block|{
name|tok
operator|=
name|st
operator|.
name|nextToken
argument_list|(
name|tokenList
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|tok
condition|)
block|{
case|case
literal|"\""
case|:
name|inQuote
operator|=
operator|!
name|inQuote
expr_stmt|;
if|if
condition|(
name|inQuote
condition|)
block|{
name|tokenList
operator|=
literal|"\""
expr_stmt|;
block|}
else|else
block|{
name|tokenList
operator|=
literal|"\" "
expr_stmt|;
block|}
break|break;
case|case
literal|" "
case|:
if|if
condition|(
name|tokStarted
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
name|tokStarted
operator|=
literal|false
expr_stmt|;
name|tokBuf
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|exit
operator|=
literal|true
expr_stmt|;
block|}
break|break;
default|default:
name|tokStarted
operator|=
literal|true
expr_stmt|;
name|tokBuf
operator|.
name|append
argument_list|(
name|tok
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Handle case where end of token stream and
comment|// still got data
if|if
condition|(
operator|(
operator|!
name|exit
operator|)
operator|&&
operator|(
name|tokStarted
operator|)
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
block|}
end_class

end_unit

