begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|filesstream
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|PathMatcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|FilesStream
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FilesStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FilesStream
parameter_list|()
block|{ 	}
comment|/**      * Returns a stream of Paths for the given fileNames.      * The given names can be delimited by ",". A name can also contain      * {@link java.nio.file.FileSystem#getPathMatcher} syntax to refer to matching files.        *       * @param fileNames list of names       * @return Paths to the scripts       */
specifier|public
specifier|static
name|Stream
argument_list|<
name|Path
argument_list|>
name|stream
parameter_list|(
name|String
name|fileNames
parameter_list|)
block|{
if|if
condition|(
name|fileNames
operator|==
literal|null
condition|)
block|{
return|return
name|Stream
operator|.
name|empty
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|generators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|fileNames
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|hasUnescapedReserved
init|=
literal|false
decl_stmt|;
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileNames
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|fileNames
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|escaped
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|escaped
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|escaped
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|','
condition|)
block|{
if|if
condition|(
name|hasUnescapedReserved
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hasUnescapedReserved
operator|=
literal|false
expr_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"*?{["
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|hasUnescapedReserved
operator|=
literal|true
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|hasUnescapedReserved
condition|)
block|{
name|generators
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Path
name|cur
init|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Stream
operator|.
name|concat
argument_list|(
name|files
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|cur
operator|::
name|resolve
argument_list|)
argument_list|,
name|generators
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|s
lambda|->
name|files
argument_list|(
name|cur
argument_list|,
name|s
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Stream
argument_list|<
name|Path
argument_list|>
name|files
parameter_list|(
name|Path
name|cur
parameter_list|,
name|String
name|glob
parameter_list|)
block|{
name|String
name|prefix
decl_stmt|;
name|String
name|rem
decl_stmt|;
name|int
name|idx
init|=
name|glob
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|prefix
operator|=
name|glob
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rem
operator|=
name|glob
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
name|rem
operator|=
name|glob
expr_stmt|;
block|}
name|Path
name|dir
init|=
name|cur
operator|.
name|resolve
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
specifier|final
name|PathMatcher
name|matcher
init|=
name|dir
operator|.
name|getFileSystem
argument_list|()
operator|.
name|getPathMatcher
argument_list|(
literal|"glob:"
operator|+
name|rem
argument_list|)
decl_stmt|;
name|Stream
operator|.
name|Builder
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Stream
operator|.
name|builder
argument_list|()
decl_stmt|;
try|try
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|dir
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|FileVisitOption
operator|.
name|FOLLOW_LINKS
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
operator|new
name|FileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|equals
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
if|if
condition|(
name|Files
operator|.
name|isHidden
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
name|FileVisitResult
operator|.
name|SKIP_SUBTREE
return|;
block|}
name|Path
name|r
init|=
name|dir
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|stream
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isHidden
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|Path
name|r
init|=
name|dir
operator|.
name|relativize
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|stream
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFileFailed
parameter_list|(
name|Path
name|file
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|postVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error generating filenames"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|stream
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

