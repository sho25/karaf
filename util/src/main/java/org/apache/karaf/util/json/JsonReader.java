begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JsonReader
block|{
comment|//
comment|// Implementation
comment|//
specifier|private
specifier|final
name|Reader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|StringBuilder
name|recorder
decl_stmt|;
specifier|private
name|int
name|current
decl_stmt|;
specifier|private
name|int
name|line
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|column
decl_stmt|;
specifier|private
name|JsonReader
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|recorder
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
name|read
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JsonReader
argument_list|(
name|reader
argument_list|)
operator|.
name|parse
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Object
name|read
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|JsonReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|()
return|;
block|}
specifier|private
name|Object
name|parse
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
name|readValue
argument_list|()
decl_stmt|;
name|skipWhiteSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|endOfText
argument_list|()
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Unexpected character"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Object
name|readValue
parameter_list|()
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|current
condition|)
block|{
case|case
literal|'n'
case|:
return|return
name|readNull
argument_list|()
return|;
case|case
literal|'t'
case|:
return|return
name|readTrue
argument_list|()
return|;
case|case
literal|'f'
case|:
return|return
name|readFalse
argument_list|()
return|;
case|case
literal|'"'
case|:
return|return
name|readString
argument_list|()
return|;
case|case
literal|'['
case|:
return|return
name|readArray
argument_list|()
return|;
case|case
literal|'{'
case|:
return|return
name|readObject
argument_list|()
return|;
case|case
literal|'-'
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
return|return
name|readNumber
argument_list|()
return|;
default|default:
throw|throw
name|expected
argument_list|(
literal|"value"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|?
argument_list|>
name|readArray
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|Object
argument_list|>
name|array
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|skipWhiteSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|readChar
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
return|return
name|array
return|;
block|}
do|do
block|{
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|array
operator|.
name|add
argument_list|(
name|readValue
argument_list|()
argument_list|)
expr_stmt|;
name|skipWhiteSpace
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|readChar
argument_list|(
literal|','
argument_list|)
condition|)
do|;
if|if
condition|(
operator|!
name|readChar
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"',' or ']'"
argument_list|)
throw|;
block|}
return|return
name|array
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|readObject
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|object
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|skipWhiteSpace
argument_list|()
expr_stmt|;
if|if
condition|(
name|readChar
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
return|return
name|object
return|;
block|}
do|do
block|{
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|readName
argument_list|()
decl_stmt|;
name|skipWhiteSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|readChar
argument_list|(
literal|':'
argument_list|)
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"':'"
argument_list|)
throw|;
block|}
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|object
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|readValue
argument_list|()
argument_list|)
expr_stmt|;
name|skipWhiteSpace
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|readChar
argument_list|(
literal|','
argument_list|)
condition|)
do|;
if|if
condition|(
operator|!
name|readChar
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"',' or '}'"
argument_list|)
throw|;
block|}
return|return
name|object
return|;
block|}
specifier|private
name|Object
name|readNull
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'l'
argument_list|)
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'l'
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|Boolean
name|readTrue
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
specifier|private
name|Boolean
name|readFalse
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'l'
argument_list|)
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'s'
argument_list|)
expr_stmt|;
name|readRequiredChar
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|private
name|void
name|readRequiredChar
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|readChar
argument_list|(
name|ch
argument_list|)
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"'"
operator|+
name|ch
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|readString
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
name|recorder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|current
operator|!=
literal|'"'
condition|)
block|{
if|if
condition|(
name|current
operator|==
literal|'\\'
condition|)
block|{
name|readEscape
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|current
operator|<
literal|0x20
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"valid string character"
argument_list|)
throw|;
block|}
else|else
block|{
name|recorder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|current
argument_list|)
expr_stmt|;
name|read
argument_list|()
expr_stmt|;
block|}
block|}
name|read
argument_list|()
expr_stmt|;
return|return
name|recorder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|readEscape
parameter_list|()
throws|throws
name|IOException
block|{
name|read
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|current
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'/'
case|:
case|case
literal|'\\'
case|:
name|recorder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|current
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|recorder
operator|.
name|append
argument_list|(
literal|'\b'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|recorder
operator|.
name|append
argument_list|(
literal|'\f'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|recorder
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|recorder
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|recorder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'u'
case|:
name|char
index|[]
name|hexChars
init|=
operator|new
name|char
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isHexDigit
argument_list|(
name|current
argument_list|)
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"hexadecimal digit"
argument_list|)
throw|;
block|}
name|hexChars
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
name|current
expr_stmt|;
block|}
name|recorder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|hexChars
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|expected
argument_list|(
literal|"valid escape sequence"
argument_list|)
throw|;
block|}
name|read
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Number
name|readNumber
parameter_list|()
throws|throws
name|IOException
block|{
name|recorder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|readAndAppendChar
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|int
name|firstDigit
init|=
name|current
decl_stmt|;
if|if
condition|(
operator|!
name|readAndAppendDigit
argument_list|()
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"digit"
argument_list|)
throw|;
block|}
if|if
condition|(
name|firstDigit
operator|!=
literal|'0'
condition|)
block|{
while|while
condition|(
name|readAndAppendDigit
argument_list|()
condition|)
block|{
comment|// Do nothing
block|}
block|}
name|readFraction
argument_list|()
expr_stmt|;
name|readExponent
argument_list|()
expr_stmt|;
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|recorder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|readFraction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|readAndAppendChar
argument_list|(
literal|'.'
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|readAndAppendDigit
argument_list|()
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"digit"
argument_list|)
throw|;
block|}
while|while
condition|(
name|readAndAppendDigit
argument_list|()
condition|)
block|{
comment|// Do nothing
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|readExponent
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|readAndAppendChar
argument_list|(
literal|'e'
argument_list|)
operator|&&
operator|!
name|readAndAppendChar
argument_list|(
literal|'E'
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|readAndAppendChar
argument_list|(
literal|'+'
argument_list|)
condition|)
block|{
name|readAndAppendChar
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|readAndAppendDigit
argument_list|()
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"digit"
argument_list|)
throw|;
block|}
while|while
condition|(
name|readAndAppendDigit
argument_list|()
condition|)
block|{
comment|// Do nothing
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|readName
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|!=
literal|'"'
condition|)
block|{
throw|throw
name|expected
argument_list|(
literal|"name"
argument_list|)
throw|;
block|}
name|readString
argument_list|()
expr_stmt|;
return|return
name|recorder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|readAndAppendChar
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|!=
name|ch
condition|)
block|{
return|return
literal|false
return|;
block|}
name|recorder
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|read
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|readChar
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|current
operator|!=
name|ch
condition|)
block|{
return|return
literal|false
return|;
block|}
name|read
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|readAndAppendDigit
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isDigit
argument_list|(
name|current
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|recorder
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|current
argument_list|)
expr_stmt|;
name|read
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|skipWhiteSpace
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
name|isWhiteSpace
argument_list|(
name|current
argument_list|)
operator|&&
operator|!
name|endOfText
argument_list|()
condition|)
block|{
name|read
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|endOfText
argument_list|()
condition|)
block|{
throw|throw
name|error
argument_list|(
literal|"Unexpected end of input"
argument_list|)
throw|;
block|}
name|column
operator|++
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|'\n'
condition|)
block|{
name|line
operator|++
expr_stmt|;
name|column
operator|=
literal|0
expr_stmt|;
block|}
name|current
operator|=
name|reader
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|endOfText
parameter_list|()
block|{
return|return
name|current
operator|==
operator|-
literal|1
return|;
block|}
specifier|private
name|IOException
name|expected
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
if|if
condition|(
name|endOfText
argument_list|()
condition|)
block|{
return|return
name|error
argument_list|(
literal|"Unexpected end of input"
argument_list|)
return|;
block|}
return|return
name|error
argument_list|(
literal|"Expected "
operator|+
name|expected
argument_list|)
return|;
block|}
specifier|private
name|IOException
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|IOException
argument_list|(
name|message
operator|+
literal|" at "
operator|+
name|line
operator|+
literal|":"
operator|+
name|column
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isWhiteSpace
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
return|return
name|ch
operator|==
literal|' '
operator|||
name|ch
operator|==
literal|'\t'
operator|||
name|ch
operator|==
literal|'\n'
operator|||
name|ch
operator|==
literal|'\r'
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isDigit
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
return|return
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isHexDigit
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
return|return
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
operator|||
name|ch
operator|>=
literal|'a'
operator|&&
name|ch
operator|<=
literal|'f'
operator|||
name|ch
operator|>=
literal|'A'
operator|&&
name|ch
operator|<=
literal|'F'
return|;
block|}
block|}
end_class

end_unit

