begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * Utils class to manipulate XML document in a thread safe way.  */
end_comment

begin_class
specifier|public
class|class
name|XmlUtils
block|{
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DocumentBuilderFactory
argument_list|>
name|DOCUMENT_BUILDER_FACTORY
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|TransformerFactory
argument_list|>
name|TRANSFORMER_FACTORY
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SAXParserFactory
argument_list|>
name|SAX_PARSER_FACTORY
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Document
name|parse
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|db
init|=
name|documentBuilder
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|db
operator|.
name|parse
argument_list|(
name|uri
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Document
name|parse
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|db
init|=
name|documentBuilder
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|db
operator|.
name|parse
argument_list|(
name|stream
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Document
name|parse
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|db
init|=
name|documentBuilder
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|db
operator|.
name|parse
argument_list|(
name|f
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Document
name|parse
parameter_list|(
name|File
name|f
parameter_list|,
name|ErrorHandler
name|errorHandler
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilder
name|db
init|=
name|documentBuilder
argument_list|()
decl_stmt|;
name|db
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|db
operator|.
name|parse
argument_list|(
name|f
argument_list|)
return|;
block|}
finally|finally
block|{
name|db
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|transform
parameter_list|(
name|Source
name|xmlSource
parameter_list|,
name|Result
name|outputTarget
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Transformer
name|t
init|=
name|transformer
argument_list|()
decl_stmt|;
try|try
block|{
name|t
operator|.
name|transform
argument_list|(
name|xmlSource
argument_list|,
name|outputTarget
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|transform
parameter_list|(
name|Source
name|xsltSource
parameter_list|,
name|Source
name|xmlSource
parameter_list|,
name|Result
name|outputTarget
parameter_list|)
throws|throws
name|TransformerException
block|{
name|Transformer
name|t
init|=
name|transformer
argument_list|(
name|xsltSource
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|transform
argument_list|(
name|xmlSource
argument_list|,
name|outputTarget
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|XMLReader
name|xmlReader
parameter_list|()
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|SAXParserFactory
name|spf
init|=
name|SAX_PARSER_FACTORY
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|spf
operator|==
literal|null
condition|)
block|{
name|spf
operator|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|spf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SAX_PARSER_FACTORY
operator|.
name|set
argument_list|(
name|spf
argument_list|)
expr_stmt|;
block|}
return|return
name|spf
operator|.
name|newSAXParser
argument_list|()
operator|.
name|getXMLReader
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|DocumentBuilder
name|documentBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DOCUMENT_BUILDER_FACTORY
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbf
operator|==
literal|null
condition|)
block|{
name|dbf
operator|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DOCUMENT_BUILDER_FACTORY
operator|.
name|set
argument_list|(
name|dbf
argument_list|)
expr_stmt|;
block|}
return|return
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Transformer
name|transformer
parameter_list|()
throws|throws
name|TransformerConfigurationException
block|{
name|TransformerFactory
name|tf
init|=
name|TRANSFORMER_FACTORY
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tf
operator|==
literal|null
condition|)
block|{
name|tf
operator|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|TRANSFORMER_FACTORY
operator|.
name|set
argument_list|(
name|tf
argument_list|)
expr_stmt|;
block|}
return|return
name|tf
operator|.
name|newTransformer
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Transformer
name|transformer
parameter_list|(
name|Source
name|xsltSource
parameter_list|)
throws|throws
name|TransformerConfigurationException
block|{
name|TransformerFactory
name|tf
init|=
name|TRANSFORMER_FACTORY
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tf
operator|==
literal|null
condition|)
block|{
name|tf
operator|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|TRANSFORMER_FACTORY
operator|.
name|set
argument_list|(
name|tf
argument_list|)
expr_stmt|;
block|}
return|return
name|tf
operator|.
name|newTransformer
argument_list|(
name|xsltSource
argument_list|)
return|;
block|}
block|}
end_class

end_unit

