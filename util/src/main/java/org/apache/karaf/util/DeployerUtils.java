begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Contain various methods that are useful for deploying artifacts.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DeployerUtils
block|{
comment|/** Private constructors to avoid instantiation */
specifier|private
name|DeployerUtils
parameter_list|()
block|{ }
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_VERSION
init|=
literal|"0.0.0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|ARTIFACT_MATCHER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.+)(?:-(\\d+)(?:\\.(\\d+)(?:\\.(\\d+))?)?(?:[^a-zA-Z0-9](.*))?)(?:\\.([^\\.]+))"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|FUZZY_MODIFIDER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?:\\d+[.-])*(.*)"
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
decl_stmt|;
comment|/**      * Heuristic to compute the name and version of a file given it's name on disk      *      * @param url the name of the file      * @return the name and version of that file      */
specifier|public
specifier|static
name|String
index|[]
name|extractNameVersionType
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|ARTIFACT_MATCHER
operator|.
name|matcher
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|url
block|,
name|DEFAULT_VERSION
block|}
return|;
block|}
else|else
block|{
name|StringBuilder
name|v
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|d1
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|d2
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|d3
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|d4
init|=
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|d5
init|=
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|d6
init|=
name|m
operator|.
name|group
argument_list|(
literal|6
argument_list|)
decl_stmt|;
if|if
condition|(
name|d2
operator|!=
literal|null
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
name|d2
argument_list|)
expr_stmt|;
if|if
condition|(
name|d3
operator|!=
literal|null
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
name|d3
argument_list|)
expr_stmt|;
if|if
condition|(
name|d4
operator|!=
literal|null
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
name|d4
argument_list|)
expr_stmt|;
if|if
condition|(
name|d5
operator|!=
literal|null
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|cleanupModifier
argument_list|(
name|v
argument_list|,
name|d5
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d5
operator|!=
literal|null
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
literal|".0."
argument_list|)
expr_stmt|;
name|cleanupModifier
argument_list|(
name|v
argument_list|,
name|d5
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|d5
operator|!=
literal|null
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
literal|".0.0."
argument_list|)
expr_stmt|;
name|cleanupModifier
argument_list|(
name|v
argument_list|,
name|d5
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
index|[]
block|{
name|d1
block|,
name|v
operator|.
name|toString
argument_list|()
block|,
name|d6
block|}
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|cleanupModifier
parameter_list|(
name|StringBuilder
name|result
parameter_list|,
name|String
name|modifier
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|FUZZY_MODIFIDER
operator|.
name|matcher
argument_list|(
name|modifier
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|modifier
operator|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifier
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|modifier
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
operator|||
name|c
operator|==
literal|'_'
operator|||
name|c
operator|==
literal|'-'
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

