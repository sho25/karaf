begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|providers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|LockInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MonitorInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ThreadMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|common
operator|.
name|TextDumpProvider
import|;
end_import

begin_comment
comment|/**  * Provider which dumps thread info to file named threads.txt.  */
end_comment

begin_class
specifier|public
class|class
name|ThreadDumpProvider
extends|extends
name|TextDumpProvider
block|{
comment|/**      * Creates new dump entry which contains information about threads.      */
specifier|public
name|ThreadDumpProvider
parameter_list|()
block|{
name|super
argument_list|(
literal|"threads.txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|writeDump
parameter_list|(
name|OutputStreamWriter
name|outputStream
parameter_list|)
throws|throws
name|Exception
block|{
name|ThreadMXBean
name|threadMXBean
init|=
name|ManagementFactory
operator|.
name|getThreadMXBean
argument_list|()
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|"Number of threads: "
operator|+
name|threadMXBean
operator|.
name|getThreadCount
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|ThreadInfo
name|threadInfo
range|:
name|threadMXBean
operator|.
name|getThreadInfo
argument_list|(
name|threadMXBean
operator|.
name|getAllThreadIds
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
control|)
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|getDumpThreadString
argument_list|(
name|threadInfo
argument_list|)
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getDumpThreadString
parameter_list|(
name|ThreadInfo
name|threadInfo
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\""
operator|+
name|threadInfo
operator|.
name|getThreadName
argument_list|()
operator|+
literal|"\""
operator|+
literal|" Id="
operator|+
name|threadInfo
operator|.
name|getThreadId
argument_list|()
operator|+
literal|" "
operator|+
name|threadInfo
operator|.
name|getThreadState
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadInfo
operator|.
name|getLockName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" on "
operator|+
name|threadInfo
operator|.
name|getLockName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|threadInfo
operator|.
name|getLockOwnerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" owned by \""
operator|+
name|threadInfo
operator|.
name|getLockOwnerName
argument_list|()
operator|+
literal|"\" Id="
operator|+
name|threadInfo
operator|.
name|getLockOwnerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|threadInfo
operator|.
name|isSuspended
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (suspended)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|threadInfo
operator|.
name|isInNative
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (in native)"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|threadInfo
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|stackTrace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StackTraceElement
name|ste
init|=
name|stackTrace
index|[
name|i
index|]
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\tat "
operator|+
name|ste
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|threadInfo
operator|.
name|getLockInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|State
name|ts
init|=
name|threadInfo
operator|.
name|getThreadState
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|ts
condition|)
block|{
case|case
name|BLOCKED
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\t-  blocked on "
operator|+
name|threadInfo
operator|.
name|getLockInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
case|case
name|WAITING
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\t-  waiting on "
operator|+
name|threadInfo
operator|.
name|getLockInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMED_WAITING
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"\t-  waiting on "
operator|+
name|threadInfo
operator|.
name|getLockInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
block|}
for|for
control|(
name|MonitorInfo
name|mi
range|:
name|threadInfo
operator|.
name|getLockedMonitors
argument_list|()
control|)
block|{
if|if
condition|(
name|mi
operator|.
name|getLockedStackDepth
argument_list|()
operator|==
name|i
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t-  locked "
operator|+
name|mi
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|i
operator|<
name|stackTrace
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t..."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|LockInfo
index|[]
name|locks
init|=
name|threadInfo
operator|.
name|getLockedSynchronizers
argument_list|()
decl_stmt|;
if|if
condition|(
name|locks
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\tNumber of locked synchronizers = "
operator|+
name|locks
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
for|for
control|(
name|LockInfo
name|li
range|:
name|locks
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\t- "
operator|+
name|li
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

