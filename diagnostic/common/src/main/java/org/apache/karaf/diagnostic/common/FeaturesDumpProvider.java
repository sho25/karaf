begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|common
operator|.
name|TextDumpProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Repository
import|;
end_import

begin_comment
comment|/**  * Dump provider which add file named features.txt with informations  * about installed features and repositories.  */
end_comment

begin_class
specifier|public
class|class
name|FeaturesDumpProvider
extends|extends
name|TextDumpProvider
block|{
comment|/**      * Feature service.      */
specifier|private
specifier|final
name|FeaturesService
name|features
decl_stmt|;
comment|/**      * Creates new dump entry witch contains information about      * karaf features.      *       * @param features Feature service.      */
specifier|public
name|FeaturesDumpProvider
parameter_list|(
name|FeaturesService
name|features
parameter_list|)
block|{
name|super
argument_list|(
literal|"features.txt"
argument_list|)
expr_stmt|;
name|this
operator|.
name|features
operator|=
name|features
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|protected
name|void
name|writeDump
parameter_list|(
name|OutputStreamWriter
name|outputStreamWriter
parameter_list|)
throws|throws
name|Exception
block|{
comment|// creates header
name|outputStreamWriter
operator|.
name|write
argument_list|(
literal|"Repositories:\n"
argument_list|)
expr_stmt|;
comment|// list repositories
for|for
control|(
name|Repository
name|repo
range|:
name|features
operator|.
name|listRepositories
argument_list|()
control|)
block|{
name|outputStreamWriter
operator|.
name|write
argument_list|(
name|repo
operator|.
name|getURI
argument_list|()
operator|+
literal|" ("
operator|+
name|repo
operator|.
name|getName
argument_list|()
operator|+
literal|")\n"
argument_list|)
expr_stmt|;
block|}
comment|// list features
name|outputStreamWriter
operator|.
name|write
argument_list|(
literal|"\nfeatures:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|features
operator|.
name|listFeatures
argument_list|()
control|)
block|{
name|outputStreamWriter
operator|.
name|write
argument_list|(
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|outputStreamWriter
operator|.
name|write
argument_list|(
literal|" installed: "
operator|+
name|features
operator|.
name|isInstalled
argument_list|(
name|feature
argument_list|)
argument_list|)
expr_stmt|;
name|outputStreamWriter
operator|.
name|write
argument_list|(
literal|"\nBundles:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|BundleInfo
name|bundle
range|:
name|feature
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|outputStreamWriter
operator|.
name|write
argument_list|(
literal|"\t"
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundle
operator|.
name|getStartLevel
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|outputStreamWriter
operator|.
name|write
argument_list|(
literal|" start level "
operator|+
name|bundle
operator|.
name|getStartLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|outputStreamWriter
operator|.
name|write
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// flush& close stream
name|outputStreamWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

