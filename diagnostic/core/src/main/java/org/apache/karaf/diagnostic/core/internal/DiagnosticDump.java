begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License. You may obtain a copy of  * the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotCompliantMBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|DiagnosticDumpMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|DumpDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|DumpProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|common
operator|.
name|DirectoryDumpDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|diagnostic
operator|.
name|core
operator|.
name|common
operator|.
name|ZipDumpDestination
import|;
end_import

begin_comment
comment|/**  * Implementation of diagnostic MBean.  */
end_comment

begin_class
specifier|public
class|class
name|DiagnosticDump
extends|extends
name|StandardMBean
implements|implements
name|DiagnosticDumpMBean
block|{
comment|/**      * Dump providers.      */
specifier|private
name|List
argument_list|<
name|DumpProvider
argument_list|>
name|providers
decl_stmt|;
comment|/**      * Creates new diagnostic mbean.      *      * @throws NotCompliantMBeanException      */
specifier|public
name|DiagnosticDump
parameter_list|()
throws|throws
name|NotCompliantMBeanException
block|{
name|super
argument_list|(
name|DiagnosticDumpMBean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates dump witch given name      *      * @param name Name of the dump.      */
specifier|public
name|void
name|createDump
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MBeanException
block|{
name|createDump
argument_list|(
literal|false
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|void
name|createDump
parameter_list|(
name|boolean
name|directory
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MBeanException
block|{
try|try
block|{
name|File
name|target
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|DumpDestination
name|destination
decl_stmt|;
if|if
condition|(
name|directory
condition|)
block|{
name|destination
operator|=
operator|new
name|DirectoryDumpDestination
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
operator|new
name|ZipDumpDestination
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DumpProvider
name|provider
range|:
name|providers
control|)
block|{
name|provider
operator|.
name|createDump
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|destination
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MBeanException
argument_list|(
literal|null
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sets dump providers.      *      * @param providers Dump providers.      */
specifier|public
name|void
name|setProviders
parameter_list|(
name|List
argument_list|<
name|DumpProvider
argument_list|>
name|providers
parameter_list|)
block|{
name|this
operator|.
name|providers
operator|=
name|providers
expr_stmt|;
block|}
block|}
end_class

end_unit

