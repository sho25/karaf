begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|webconsole
operator|.
name|internal
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AccountException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|FailedLoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|webconsole
operator|.
name|WebConsoleSecurityProvider2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|webconsole
operator|.
name|internal
operator|.
name|servlet
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JaasSecurityProvider
implements|implements
name|WebConsoleSecurityProvider2
implements|,
name|ManagedService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JaasSecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_WWW_AUTHENTICATE
init|=
literal|"WWW-Authenticate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_AUTHORIZATION
init|=
literal|"Authorization"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AUTHENTICATION_SCHEME_BASIC
init|=
literal|"Basic"
decl_stmt|;
specifier|private
name|String
name|realm
decl_stmt|;
specifier|private
name|String
name|role
decl_stmt|;
specifier|public
name|JaasSecurityProvider
parameter_list|()
block|{
name|updated
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getRealm
parameter_list|()
block|{
return|return
name|realm
return|;
block|}
specifier|public
name|void
name|setRealm
parameter_list|(
name|String
name|realm
parameter_list|)
block|{
name|this
operator|.
name|realm
operator|=
name|realm
expr_stmt|;
block|}
specifier|public
name|String
name|getRole
parameter_list|()
block|{
return|return
name|role
return|;
block|}
specifier|public
name|void
name|setRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|authenticate
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
return|return
name|doAuthenticate
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updated
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|realm
operator|=
name|getString
argument_list|(
name|properties
argument_list|,
literal|"realm"
argument_list|,
literal|"karaf"
argument_list|)
expr_stmt|;
name|role
operator|=
name|getString
argument_list|(
name|properties
argument_list|,
literal|"role"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.admin.role"
argument_list|,
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getString
parameter_list|(
name|Dictionary
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|properties
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|def
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|Object
name|val
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
name|def
return|;
block|}
specifier|public
name|Subject
name|doAuthenticate
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
try|try
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|LoginContext
name|loginContext
init|=
operator|new
name|LoginContext
argument_list|(
name|realm
argument_list|,
name|subject
argument_list|,
operator|new
name|CallbackHandler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
operator|(
operator|(
name|NameCallback
operator|)
name|callback
operator|)
operator|.
name|setName
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
operator|(
operator|(
name|PasswordCallback
operator|)
name|callback
operator|)
operator|.
name|setPassword
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
operator|&&
name|role
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|clazz
init|=
literal|"org.apache.karaf.jaas.boot.principal.RolePrincipal"
decl_stmt|;
name|String
name|name
init|=
name|role
decl_stmt|;
name|int
name|idx
init|=
name|role
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|clazz
operator|=
name|role
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|name
operator|=
name|role
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|&&
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|FailedLoginException
argument_list|(
literal|"User does not have the required role "
operator|+
name|role
argument_list|)
throw|;
block|}
block|}
return|return
name|subject
return|;
block|}
catch|catch
parameter_list|(
name|FailedLoginException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Login failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|AccountException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Account failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"General Security Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|authorize
parameter_list|(
name|Object
name|o
parameter_list|,
name|String
name|s
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
block|{
comment|// Return immediately if the header is missing
name|String
name|authHeader
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HEADER_AUTHORIZATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|authHeader
operator|!=
literal|null
operator|&&
name|authHeader
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Get the authType (Basic, Digest) and authInfo (user/password)
comment|// from the header
name|authHeader
operator|=
name|authHeader
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|blank
init|=
name|authHeader
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|blank
operator|>
literal|0
condition|)
block|{
name|String
name|authType
init|=
name|authHeader
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blank
argument_list|)
decl_stmt|;
name|String
name|authInfo
init|=
name|authHeader
operator|.
name|substring
argument_list|(
name|blank
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Check whether authorization type matches
if|if
condition|(
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AUTHENTICATION_SCHEME_BASIC
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|srcString
init|=
name|base64Decode
argument_list|(
name|authInfo
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|srcString
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|srcString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|srcString
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// authenticate
name|Subject
name|subject
init|=
name|doAuthenticate
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
comment|// as per the spec, set attributes
name|request
operator|.
name|setAttribute
argument_list|(
name|HttpContext
operator|.
name|AUTHENTICATION_TYPE
argument_list|,
name|HttpServletRequest
operator|.
name|BASIC_AUTH
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HttpContext
operator|.
name|REMOTE_USER
argument_list|,
name|username
argument_list|)
expr_stmt|;
comment|// set web console user attribute
name|request
operator|.
name|setAttribute
argument_list|(
name|WebConsoleSecurityProvider2
operator|.
name|USER_ATTRIBUTE
argument_list|,
name|username
argument_list|)
expr_stmt|;
comment|// set the JAAS subject
name|request
operator|.
name|setAttribute
argument_list|(
name|KarafOsgiManager
operator|.
name|SUBJECT_RUN_AS
argument_list|,
name|subject
argument_list|)
expr_stmt|;
comment|// succeed
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error during authentication"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|requireAuthentication
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// inform HttpService that authentication failed
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|requireAuthentication
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|HEADER_WWW_AUTHENTICATE
argument_list|,
name|AUTHENTICATION_SCHEME_BASIC
operator|+
literal|" realm=\""
operator|+
name|this
operator|.
name|realm
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error flushing after sending auth required"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|base64Decode
parameter_list|(
name|String
name|srcString
parameter_list|)
block|{
name|byte
index|[]
name|transformed
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|srcString
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|transformed
argument_list|,
literal|"ISO-8859-1"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|transformed
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

