begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * Based on http://antony.lesuisse.org/software/ajaxterm/  *  Public Domain License  */
end_comment

begin_comment
comment|/**  * See http://www.ecma-international.org/publications/standards/Ecma-048.htm  *       and http://vt100.net/docs/vt510-rm/  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|webconsole
operator|.
name|gogo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
specifier|public
class|class
name|Terminal
block|{
enum|enum
name|State
block|{
name|None
block|,
name|Esc
block|,
name|Str
block|,
name|Csi
block|,     }
specifier|private
name|int
name|width
decl_stmt|;
specifier|private
name|int
name|height
decl_stmt|;
specifier|private
name|int
name|attr
decl_stmt|;
specifier|private
name|boolean
name|eol
decl_stmt|;
specifier|private
name|int
name|cx
decl_stmt|;
specifier|private
name|int
name|cy
decl_stmt|;
specifier|private
name|int
index|[]
name|screen
decl_stmt|;
specifier|private
name|int
index|[]
name|screen2
decl_stmt|;
specifier|private
name|State
name|vt100_parse_state
init|=
name|State
operator|.
name|None
decl_stmt|;
specifier|private
name|int
name|vt100_parse_len
decl_stmt|;
specifier|private
name|int
name|vt100_lastchar
decl_stmt|;
specifier|private
name|int
name|vt100_parse_func
decl_stmt|;
specifier|private
name|String
name|vt100_parse_param
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_autowrap
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_insert
decl_stmt|;
specifier|private
name|boolean
name|vt100_charset_is_single_shift
decl_stmt|;
specifier|private
name|boolean
name|vt100_charset_is_graphical
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_lfnewline
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_origin
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_inverse
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_cursorkey
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_cursor
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_alt_screen
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_backspace
decl_stmt|;
specifier|private
name|boolean
name|vt100_mode_column_switch
decl_stmt|;
specifier|private
name|boolean
name|vt100_keyfilter_escape
decl_stmt|;
specifier|private
name|int
index|[]
name|vt100_charset_graph
init|=
operator|new
name|int
index|[]
block|{
literal|0x25ca
block|,
literal|0x2026
block|,
literal|0x2022
block|,
literal|0x3f
block|,
literal|0xb6
block|,
literal|0x3f
block|,
literal|0xb0
block|,
literal|0xb1
block|,
literal|0x3f
block|,
literal|0x3f
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0xaf
block|,
literal|0x2014
block|,
literal|0x2014
block|,
literal|0x2014
block|,
literal|0x5f
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x7c
block|,
literal|0x2264
block|,
literal|0x2265
block|,
literal|0xb6
block|,
literal|0x2260
block|,
literal|0xa3
block|,
literal|0xb7
block|,
literal|0x7f
block|}
decl_stmt|;
specifier|private
name|int
name|vt100_charset_g_sel
decl_stmt|;
specifier|private
name|int
index|[]
name|vt100_charset_g
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vt100_saved
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vt100_saved2
decl_stmt|;
specifier|private
name|int
name|vt100_saved_cx
decl_stmt|;
specifier|private
name|int
name|vt100_saved_cy
decl_stmt|;
specifier|private
name|String
name|vt100_out
decl_stmt|;
specifier|private
name|int
name|scroll_area_y0
decl_stmt|;
specifier|private
name|int
name|scroll_area_y1
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|tab_stops
decl_stmt|;
specifier|private
name|int
name|utf8_char
decl_stmt|;
specifier|private
name|int
name|utf8_units_count
decl_stmt|;
specifier|private
name|int
name|utf8_units_received
decl_stmt|;
specifier|private
name|AtomicBoolean
name|dirty
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|Terminal
parameter_list|()
block|{
name|this
argument_list|(
literal|80
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Terminal
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|this
operator|.
name|width
operator|=
name|width
expr_stmt|;
name|this
operator|.
name|height
operator|=
name|height
expr_stmt|;
name|reset_hard
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|reset_hard
parameter_list|()
block|{
comment|// Attribute mask: 0x0XFB0000
comment|//	X:	Bit 0 - Underlined
comment|//		Bit 1 - Negative
comment|//		Bit 2 - Concealed
comment|//	F:	Foreground
comment|//	B:	Background
name|attr
operator|=
literal|0x00fe0000
expr_stmt|;
comment|// UTF-8 decoder
name|utf8_units_count
operator|=
literal|0
expr_stmt|;
name|utf8_units_received
operator|=
literal|0
expr_stmt|;
name|utf8_char
operator|=
literal|0
expr_stmt|;
comment|// Key filter
name|vt100_keyfilter_escape
operator|=
literal|false
expr_stmt|;
comment|// Last char
name|vt100_lastchar
operator|=
literal|0
expr_stmt|;
comment|// Control sequences
name|vt100_parse_len
operator|=
literal|0
expr_stmt|;
name|vt100_parse_state
operator|=
name|State
operator|.
name|None
expr_stmt|;
name|vt100_parse_func
operator|=
literal|0
expr_stmt|;
name|vt100_parse_param
operator|=
literal|""
expr_stmt|;
comment|// Buffers
name|vt100_out
operator|=
literal|""
expr_stmt|;
comment|// Invoke other resets
name|reset_screen
argument_list|()
expr_stmt|;
name|reset_soft
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|reset_soft
parameter_list|()
block|{
comment|// Attribute mask: 0x0XFB0000
comment|//	X:	Bit 0 - Underlined
comment|//		Bit 1 - Negative
comment|//		Bit 2 - Concealed
comment|//	F:	Foreground
comment|//	B:	Background
name|attr
operator|=
literal|0x00fe0000
expr_stmt|;
comment|// Scroll parameters
name|scroll_area_y0
operator|=
literal|0
expr_stmt|;
name|scroll_area_y1
operator|=
name|height
expr_stmt|;
comment|// Character sets
name|vt100_charset_is_single_shift
operator|=
literal|false
expr_stmt|;
name|vt100_charset_is_graphical
operator|=
literal|false
expr_stmt|;
name|vt100_charset_g_sel
operator|=
literal|0
expr_stmt|;
name|vt100_charset_g
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
expr_stmt|;
comment|// Modes
name|vt100_mode_insert
operator|=
literal|false
expr_stmt|;
name|vt100_mode_lfnewline
operator|=
literal|false
expr_stmt|;
name|vt100_mode_cursorkey
operator|=
literal|false
expr_stmt|;
name|vt100_mode_column_switch
operator|=
literal|false
expr_stmt|;
name|vt100_mode_inverse
operator|=
literal|false
expr_stmt|;
name|vt100_mode_origin
operator|=
literal|false
expr_stmt|;
name|vt100_mode_autowrap
operator|=
literal|true
expr_stmt|;
name|vt100_mode_cursor
operator|=
literal|true
expr_stmt|;
name|vt100_mode_alt_screen
operator|=
literal|false
expr_stmt|;
name|vt100_mode_backspace
operator|=
literal|false
expr_stmt|;
comment|// Init DECSC state
name|esc_DECSC
argument_list|()
expr_stmt|;
name|vt100_saved2
operator|=
name|vt100_saved
expr_stmt|;
name|esc_DECSC
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|reset_screen
parameter_list|()
block|{
comment|// Screen
name|screen
operator|=
operator|new
name|int
index|[
name|width
operator|*
name|height
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|screen
argument_list|,
name|attr
operator||
literal|0x0020
argument_list|)
expr_stmt|;
name|screen2
operator|=
operator|new
name|int
index|[
name|width
operator|*
name|height
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|screen2
argument_list|,
name|attr
operator||
literal|0x0020
argument_list|)
expr_stmt|;
comment|// Scroll parameters
name|scroll_area_y0
operator|=
literal|0
expr_stmt|;
name|scroll_area_y1
operator|=
name|height
expr_stmt|;
comment|// Cursor position
name|cx
operator|=
literal|0
expr_stmt|;
name|cy
operator|=
literal|0
expr_stmt|;
comment|// Tab stops
name|tab_stops
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|7
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|tab_stops
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// UTF-8 functions
comment|//
specifier|private
name|String
name|utf8_decode
parameter_list|(
name|String
name|d
parameter_list|)
block|{
name|StringBuilder
name|o
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|d
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|utf8_units_count
operator|!=
name|utf8_units_received
condition|)
block|{
name|utf8_units_received
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|c
operator|&
literal|0xc0
operator|)
operator|==
literal|0x80
condition|)
block|{
name|utf8_char
operator|=
operator|(
name|utf8_char
operator|<<
literal|6
operator|)
operator||
operator|(
name|c
operator|&
literal|0x3f
operator|)
expr_stmt|;
if|if
condition|(
name|utf8_units_count
operator|==
name|utf8_units_received
condition|)
block|{
if|if
condition|(
name|utf8_char
operator|<
literal|0x10000
condition|)
block|{
name|o
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|utf8_char
argument_list|)
expr_stmt|;
block|}
name|utf8_units_count
operator|=
name|utf8_units_received
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|o
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
while|while
condition|(
name|utf8_units_received
operator|--
operator|>
literal|0
condition|)
block|{
name|o
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
name|utf8_units_count
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|c
operator|&
literal|0x80
operator|)
operator|==
literal|0x00
condition|)
block|{
name|o
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|c
operator|&
literal|0xe0
operator|)
operator|==
literal|0xc0
condition|)
block|{
name|utf8_units_count
operator|=
literal|1
expr_stmt|;
name|utf8_char
operator|=
name|c
operator|&
literal|0x1f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|c
operator|&
literal|0xf0
operator|)
operator|==
literal|0xe0
condition|)
block|{
name|utf8_units_count
operator|=
literal|2
expr_stmt|;
name|utf8_char
operator|=
name|c
operator|&
literal|0x0f
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|c
operator|&
literal|0xf8
operator|)
operator|==
literal|0xf0
condition|)
block|{
name|utf8_units_count
operator|=
literal|3
expr_stmt|;
name|utf8_char
operator|=
name|c
operator|&
literal|0x07
expr_stmt|;
block|}
else|else
block|{
name|o
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|o
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|int
name|utf8_charwidth
parameter_list|(
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|>=
literal|0x2e80
condition|)
block|{
return|return
literal|2
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
comment|//
comment|// Low-level terminal functions
comment|//
specifier|private
name|int
index|[]
name|peek
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|x0
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|x1
parameter_list|)
block|{
name|int
name|from
init|=
name|width
operator|*
name|y0
operator|+
name|x0
decl_stmt|;
name|int
name|to
init|=
name|width
operator|*
operator|(
name|y1
operator|-
literal|1
operator|)
operator|+
name|x1
decl_stmt|;
name|int
name|newLength
init|=
name|to
operator|-
name|from
decl_stmt|;
if|if
condition|(
name|newLength
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|from
operator|+
literal|"> "
operator|+
name|to
argument_list|)
throw|;
name|int
index|[]
name|copy
init|=
operator|new
name|int
index|[
name|newLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|screen
argument_list|,
name|from
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|screen
operator|.
name|length
operator|-
name|from
argument_list|,
name|newLength
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|private
name|void
name|poke
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
index|[]
name|s
parameter_list|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|screen
argument_list|,
name|width
operator|*
name|y
operator|+
name|x
argument_list|,
name|s
operator|.
name|length
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fill
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|x0
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|x1
parameter_list|,
name|int
name|c
parameter_list|)
block|{
name|int
name|d0
init|=
name|width
operator|*
name|y0
operator|+
name|x0
decl_stmt|;
name|int
name|d1
init|=
name|width
operator|*
operator|(
name|y1
operator|-
literal|1
operator|)
operator|+
name|x1
decl_stmt|;
if|if
condition|(
name|d0
operator|<=
name|d1
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|screen
argument_list|,
name|width
operator|*
name|y0
operator|+
name|x0
argument_list|,
name|width
operator|*
operator|(
name|y1
operator|-
literal|1
operator|)
operator|+
name|x1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clear
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|x0
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|x1
parameter_list|)
block|{
name|fill
argument_list|(
name|y0
argument_list|,
name|x0
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|,
name|attr
operator||
literal|0x20
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Scrolling functions
comment|//
specifier|private
name|void
name|scroll_area_up
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|y1
parameter_list|)
block|{
name|scroll_area_up
argument_list|(
name|y0
argument_list|,
name|y1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scroll_area_up
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|y1
operator|-
name|y0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|poke
argument_list|(
name|y0
argument_list|,
literal|0
argument_list|,
name|peek
argument_list|(
name|y0
operator|+
name|n
argument_list|,
literal|0
argument_list|,
name|y1
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|clear
argument_list|(
name|y1
operator|-
name|n
argument_list|,
literal|0
argument_list|,
name|y1
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scroll_area_down
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|y1
parameter_list|)
block|{
name|scroll_area_down
argument_list|(
name|y0
argument_list|,
name|y1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scroll_area_down
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|y1
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|y1
operator|-
name|y0
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|poke
argument_list|(
name|y0
operator|+
name|n
argument_list|,
literal|0
argument_list|,
name|peek
argument_list|(
name|y0
argument_list|,
literal|0
argument_list|,
name|y1
operator|-
name|n
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|clear
argument_list|(
name|y0
argument_list|,
literal|0
argument_list|,
name|y0
operator|+
name|n
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scroll_area_set
parameter_list|(
name|int
name|y0
parameter_list|,
name|int
name|y1
parameter_list|)
block|{
name|y0
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|height
operator|-
literal|1
argument_list|,
name|y0
argument_list|)
argument_list|)
expr_stmt|;
name|y1
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|height
argument_list|,
name|y1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|y1
operator|>
name|y0
condition|)
block|{
name|scroll_area_y0
operator|=
name|y0
expr_stmt|;
name|scroll_area_y1
operator|=
name|y1
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|scroll_line_right
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|scroll_line_right
argument_list|(
name|y
argument_list|,
name|x
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scroll_line_right
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|x
operator|<
name|width
condition|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|width
operator|-
name|cx
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|poke
argument_list|(
name|y
argument_list|,
name|x
operator|+
name|n
argument_list|,
name|peek
argument_list|(
name|y
argument_list|,
name|x
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|width
operator|-
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|clear
argument_list|(
name|y
argument_list|,
name|x
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|x
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|scroll_line_left
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|scroll_line_left
argument_list|(
name|y
argument_list|,
name|x
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scroll_line_left
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|x
operator|<
name|width
condition|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|width
operator|-
name|cx
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|poke
argument_list|(
name|y
argument_list|,
name|x
argument_list|,
name|peek
argument_list|(
name|y
argument_list|,
name|x
operator|+
name|n
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|width
argument_list|)
argument_list|)
expr_stmt|;
name|clear
argument_list|(
name|y
argument_list|,
name|width
operator|-
name|n
argument_list|,
name|y
operator|+
literal|1
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Cursor functions
comment|//
specifier|private
name|int
index|[]
name|cursor_line_width
parameter_list|(
name|int
name|next_char
parameter_list|)
block|{
name|int
name|wx
init|=
name|utf8_charwidth
argument_list|(
name|next_char
argument_list|)
decl_stmt|;
name|int
name|lx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|Math
operator|.
name|min
argument_list|(
name|cx
argument_list|,
name|width
argument_list|)
condition|;
name|x
operator|++
control|)
block|{
name|int
name|c
init|=
name|peek
argument_list|(
name|cy
argument_list|,
name|x
argument_list|,
name|cy
operator|+
literal|1
argument_list|,
name|x
operator|+
literal|1
argument_list|)
index|[
literal|0
index|]
operator|&
literal|0xffff
decl_stmt|;
name|wx
operator|+=
name|utf8_charwidth
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|lx
operator|+=
literal|1
expr_stmt|;
block|}
return|return
operator|new
name|int
index|[]
block|{
name|wx
block|,
name|lx
block|}
return|;
block|}
specifier|private
name|void
name|cursor_up
parameter_list|()
block|{
name|cursor_up
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_up
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|cy
operator|=
name|Math
operator|.
name|max
argument_list|(
name|scroll_area_y0
argument_list|,
name|cy
operator|-
name|n
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_down
parameter_list|()
block|{
name|cursor_down
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_down
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|cy
operator|=
name|Math
operator|.
name|min
argument_list|(
name|scroll_area_y1
operator|-
literal|1
argument_list|,
name|cy
operator|+
name|n
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_left
parameter_list|()
block|{
name|cursor_left
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_left
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|eol
operator|=
literal|false
expr_stmt|;
name|cx
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|cx
operator|-
name|n
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_right
parameter_list|()
block|{
name|cursor_right
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_right
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|eol
operator|=
name|cx
operator|+
name|n
operator|>=
name|width
expr_stmt|;
name|cx
operator|=
name|Math
operator|.
name|min
argument_list|(
name|width
operator|-
literal|1
argument_list|,
name|cx
operator|+
name|n
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_set_x
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|eol
operator|=
literal|false
expr_stmt|;
name|cx
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_set_y
parameter_list|(
name|int
name|y
parameter_list|)
block|{
name|cy
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|height
operator|-
literal|1
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
name|setDirty
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cursor_set
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|cursor_set_x
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|cursor_set_y
argument_list|(
name|y
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Dumb terminal
comment|//
specifier|private
name|void
name|ctrl_BS
parameter_list|()
block|{
name|int
name|dy
init|=
operator|(
name|cx
operator|-
literal|1
operator|)
operator|/
name|width
decl_stmt|;
name|cursor_set
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|scroll_area_y0
argument_list|,
name|cy
operator|+
name|dy
argument_list|)
argument_list|,
operator|(
name|cx
operator|-
literal|1
operator|)
operator|%
name|width
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|ctrl_HT
parameter_list|()
block|{
name|ctrl_HT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|ctrl_HT
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|0
operator|&&
name|cx
operator|>=
name|width
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|n
operator|<=
literal|0
operator|&&
name|cx
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|int
name|ts
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tab_stops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cx
operator|>=
name|tab_stops
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|ts
operator|=
name|i
expr_stmt|;
block|}
block|}
name|ts
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|ts
operator|<
name|tab_stops
operator|.
name|size
argument_list|()
operator|&&
name|ts
operator|>=
literal|0
condition|)
block|{
name|cursor_set_x
argument_list|(
name|tab_stops
operator|.
name|get
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor_set_x
argument_list|(
name|width
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|ctrl_LF
parameter_list|()
block|{
if|if
condition|(
name|vt100_mode_lfnewline
condition|)
block|{
name|ctrl_CR
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cy
operator|==
name|scroll_area_y1
operator|-
literal|1
condition|)
block|{
name|scroll_area_up
argument_list|(
name|scroll_area_y0
argument_list|,
name|scroll_area_y1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor_down
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|ctrl_CR
parameter_list|()
block|{
name|cursor_set_x
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|dumb_write
parameter_list|(
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|<
literal|32
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|8
condition|)
block|{
name|ctrl_BS
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|9
condition|)
block|{
name|ctrl_HT
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>=
literal|10
operator|&&
name|c
operator|<=
literal|12
condition|)
block|{
name|ctrl_LF
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|13
condition|)
block|{
name|ctrl_CR
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|dumb_echo
parameter_list|(
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
name|eol
condition|)
block|{
if|if
condition|(
name|vt100_mode_autowrap
condition|)
block|{
name|ctrl_CR
argument_list|()
expr_stmt|;
name|ctrl_LF
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cx
operator|=
name|cursor_line_width
argument_list|(
name|c
argument_list|)
index|[
literal|1
index|]
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|vt100_mode_insert
condition|)
block|{
name|scroll_line_right
argument_list|(
name|cy
argument_list|,
name|cx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|vt100_charset_is_single_shift
condition|)
block|{
name|vt100_charset_is_single_shift
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|vt100_charset_is_graphical
operator|&&
operator|(
operator|(
name|c
operator|&
literal|0xffe0
operator|)
operator|==
literal|0x0060
operator|)
condition|)
block|{
name|c
operator|=
name|vt100_charset_graph
index|[
name|c
operator|-
literal|0x60
index|]
expr_stmt|;
block|}
name|poke
argument_list|(
name|cy
argument_list|,
name|cx
argument_list|,
operator|new
name|int
index|[]
block|{
name|attr
operator||
name|c
block|}
argument_list|)
expr_stmt|;
name|cursor_right
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// VT100
comment|//
specifier|private
name|void
name|vt100_charset_update
parameter_list|()
block|{
name|vt100_charset_is_graphical
operator|=
operator|(
name|vt100_charset_g
index|[
name|vt100_charset_g_sel
index|]
operator|==
literal|2
operator|)
expr_stmt|;
block|}
specifier|private
name|void
name|vt100_charset_set
parameter_list|(
name|int
name|g
parameter_list|)
block|{
comment|// Invoke active character set
name|vt100_charset_g_sel
operator|=
name|g
expr_stmt|;
name|vt100_charset_update
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|vt100_charset_select
parameter_list|(
name|int
name|g
parameter_list|,
name|int
name|charset
parameter_list|)
block|{
comment|// Select charset
name|vt100_charset_g
index|[
name|g
index|]
operator|=
name|charset
expr_stmt|;
name|vt100_charset_update
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|vt100_setmode
parameter_list|(
name|String
name|p
parameter_list|,
name|boolean
name|state
parameter_list|)
block|{
comment|// Set VT100 mode
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|ps
control|)
block|{
comment|// 1 : GATM: Guarded area transfer
comment|// 2 : KAM: Keyboard action
comment|// 3 : CRM: Control representation
if|if
condition|(
literal|"4"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// Insertion replacement mode
name|vt100_mode_insert
operator|=
name|state
expr_stmt|;
comment|// 5 : SRTM: Status reporting transfer
comment|// 7 : VEM: Vertical editing
comment|// 10 : HEM: Horizontal editing
comment|// 11 : PUM: Positioning nit
comment|// 12 : SRM: Send/receive
comment|// 13 : FEAM: Format effector action
comment|// 14 : FETM: Format effector transfer
comment|// 15 : MATM: Multiple area transfer
comment|// 16 : TTM: Transfer termination
comment|// 17 : SATM: Selected area transfer
comment|// 18 : TSM: Tabulation stop
comment|// 19 : EBM: Editing boundary
block|}
elseif|else
if|if
condition|(
literal|"20"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// LNM: Line feed/new line
name|vt100_mode_lfnewline
operator|=
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"?1"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// DECCKM: Cursor keys
name|vt100_mode_cursorkey
operator|=
name|state
expr_stmt|;
comment|// ?2 : DECANM: ANSI
block|}
elseif|else
if|if
condition|(
literal|"?3"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// DECCOLM: Column
if|if
condition|(
name|vt100_mode_column_switch
condition|)
block|{
if|if
condition|(
name|state
condition|)
block|{
name|width
operator|=
literal|132
expr_stmt|;
block|}
else|else
block|{
name|width
operator|=
literal|80
expr_stmt|;
block|}
name|reset_screen
argument_list|()
expr_stmt|;
block|}
comment|// ?4 : DECSCLM: Scrolling
block|}
elseif|else
if|if
condition|(
literal|"?5"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// DECSCNM: Screen
name|vt100_mode_inverse
operator|=
name|state
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"?6"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// DECOM: Origin
name|vt100_mode_origin
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|state
condition|)
block|{
name|cursor_set
argument_list|(
name|scroll_area_y0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor_set
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"?7"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// DECAWM: Autowrap
name|vt100_mode_autowrap
operator|=
name|state
expr_stmt|;
comment|// ?8 : DECARM: Autorepeat
comment|// ?9 : Interlacing
comment|// ?18 : DECPFF: Print form feed
comment|// ?19 : DECPEX: Printer extent
block|}
elseif|else
if|if
condition|(
literal|"?25"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// DECTCEM: Text cursor enable
name|vt100_mode_cursor
operator|=
name|state
expr_stmt|;
comment|// ?34 : DECRLM: Cursor direction, right to left
comment|// ?35 : DECHEBM: Hebrew keyboard mapping
comment|// ?36 : DECHEM: Hebrew encoding mode
block|}
elseif|else
if|if
condition|(
literal|"?40"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// Column switch control
name|vt100_mode_column_switch
operator|=
name|state
expr_stmt|;
comment|// ?42 : DECNRCM: National replacement character set
block|}
elseif|else
if|if
condition|(
literal|"?47"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// Alternate screen mode
if|if
condition|(
operator|(
name|state
operator|&&
operator|!
name|vt100_mode_alt_screen
operator|)
operator|||
operator|(
operator|!
name|state
operator|&&
name|vt100_mode_alt_screen
operator|)
condition|)
block|{
name|int
index|[]
name|s
init|=
name|screen
decl_stmt|;
name|screen
operator|=
name|screen2
expr_stmt|;
name|screen2
operator|=
name|s
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|vt100_saved
decl_stmt|;
name|vt100_saved
operator|=
name|vt100_saved2
expr_stmt|;
name|vt100_saved2
operator|=
name|map
expr_stmt|;
block|}
name|vt100_mode_alt_screen
operator|=
name|state
expr_stmt|;
comment|// ?57 : DECNAKB: Greek keyboard mapping
block|}
elseif|else
if|if
condition|(
literal|"?67"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
comment|// DECBKM: Backarrow key
name|vt100_mode_backspace
operator|=
name|state
expr_stmt|;
block|}
comment|// ?98 : DECARSM: auto-resize
comment|// ?101 : DECCANSM: Conceal answerback message
comment|// ?109 : DECCAPSLK: caps lock
block|}
block|}
specifier|private
name|void
name|ctrl_SO
parameter_list|()
block|{
name|vt100_charset_set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|ctrl_SI
parameter_list|()
block|{
name|vt100_charset_set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_CSI
parameter_list|()
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Csi
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_DECALN
parameter_list|()
block|{
name|fill
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|height
argument_list|,
name|width
argument_list|,
literal|0x00fe0045
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G0_0
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G0_1
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G0_2
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G0_3
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G0_4
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G1_0
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G1_1
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G1_2
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G1_3
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_G1_4
parameter_list|()
block|{
name|vt100_charset_select
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_DECSC
parameter_list|()
block|{
name|vt100_saved
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|vt100_saved
operator|.
name|put
argument_list|(
literal|"cx"
argument_list|,
name|cx
argument_list|)
expr_stmt|;
name|vt100_saved
operator|.
name|put
argument_list|(
literal|"cy"
argument_list|,
name|cy
argument_list|)
expr_stmt|;
name|vt100_saved
operator|.
name|put
argument_list|(
literal|"attr"
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|vt100_saved
operator|.
name|put
argument_list|(
literal|"vt100_charset_g_sel"
argument_list|,
name|vt100_charset_g_sel
argument_list|)
expr_stmt|;
name|vt100_saved
operator|.
name|put
argument_list|(
literal|"vt100_charset_g"
argument_list|,
name|vt100_charset_g
argument_list|)
expr_stmt|;
name|vt100_saved
operator|.
name|put
argument_list|(
literal|"vt100_mode_autowrap"
argument_list|,
name|vt100_mode_autowrap
argument_list|)
expr_stmt|;
name|vt100_saved
operator|.
name|put
argument_list|(
literal|"vt100_mode_origin"
argument_list|,
name|vt100_mode_origin
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_DECRC
parameter_list|()
block|{
name|cx
operator|=
operator|(
name|Integer
operator|)
name|vt100_saved
operator|.
name|get
argument_list|(
literal|"cx"
argument_list|)
expr_stmt|;
name|cy
operator|=
operator|(
name|Integer
operator|)
name|vt100_saved
operator|.
name|get
argument_list|(
literal|"cy"
argument_list|)
expr_stmt|;
name|attr
operator|=
operator|(
name|Integer
operator|)
name|vt100_saved
operator|.
name|get
argument_list|(
literal|"attr"
argument_list|)
expr_stmt|;
name|vt100_charset_g_sel
operator|=
operator|(
name|Integer
operator|)
name|vt100_saved
operator|.
name|get
argument_list|(
literal|"vt100_charset_g_sel"
argument_list|)
expr_stmt|;
name|vt100_charset_g
operator|=
operator|(
name|int
index|[]
operator|)
name|vt100_saved
operator|.
name|get
argument_list|(
literal|"vt100_charset_g"
argument_list|)
expr_stmt|;
name|vt100_charset_update
argument_list|()
expr_stmt|;
name|vt100_mode_autowrap
operator|=
operator|(
name|Boolean
operator|)
name|vt100_saved
operator|.
name|get
argument_list|(
literal|"vt100_mode_autowrap"
argument_list|)
expr_stmt|;
name|vt100_mode_origin
operator|=
operator|(
name|Boolean
operator|)
name|vt100_saved
operator|.
name|get
argument_list|(
literal|"vt100_mode_origin"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_IND
parameter_list|()
block|{
name|ctrl_LF
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|esc_NEL
parameter_list|()
block|{
name|ctrl_CR
argument_list|()
expr_stmt|;
name|ctrl_LF
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|esc_HTS
parameter_list|()
block|{
name|csi_CTC
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_RI
parameter_list|()
block|{
if|if
condition|(
name|cy
operator|==
name|scroll_area_y0
condition|)
block|{
name|scroll_area_down
argument_list|(
name|scroll_area_y0
argument_list|,
name|scroll_area_y1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor_up
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|esc_SS2
parameter_list|()
block|{
name|vt100_charset_is_single_shift
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|esc_SS3
parameter_list|()
block|{
name|vt100_charset_is_single_shift
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|esc_DCS
parameter_list|()
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Str
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_SOS
parameter_list|()
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Str
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_DECID
parameter_list|()
block|{
name|csi_DA
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_ST
parameter_list|()
block|{     }
specifier|private
name|void
name|esc_OSC
parameter_list|()
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Str
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_PM
parameter_list|()
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Str
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_APC
parameter_list|()
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Str
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|esc_RIS
parameter_list|()
block|{
name|reset_hard
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|csi_ICH
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|scroll_line_right
argument_list|(
name|cy
argument_list|,
name|cx
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CUU
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|cursor_up
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CUD
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|cursor_down
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CUF
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|cursor_right
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CUB
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|cursor_left
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CNL
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|csi_CUD
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ctrl_CR
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CPL
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|csi_CUU
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|ctrl_CR
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CHA
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|cursor_set_x
argument_list|(
name|ps
index|[
literal|0
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CUP
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|vt100_mode_origin
condition|)
block|{
name|cursor_set
argument_list|(
name|scroll_area_y0
operator|+
name|ps
index|[
literal|0
index|]
operator|-
literal|1
argument_list|,
name|ps
index|[
literal|1
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor_set
argument_list|(
name|ps
index|[
literal|0
index|]
operator|-
literal|1
argument_list|,
name|ps
index|[
literal|1
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_CHT
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|ctrl_HT
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_ED
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|clear
argument_list|(
name|cy
argument_list|,
name|cx
argument_list|,
name|height
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|clear
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|cy
operator|+
literal|1
argument_list|,
name|cx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"2"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|clear
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|height
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_EL
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|clear
argument_list|(
name|cy
argument_list|,
name|cx
argument_list|,
name|cy
operator|+
literal|1
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|clear
argument_list|(
name|cy
argument_list|,
literal|0
argument_list|,
name|cy
operator|+
literal|1
argument_list|,
name|cx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"2"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|clear
argument_list|(
name|cy
argument_list|,
literal|0
argument_list|,
name|cy
operator|+
literal|1
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_IL
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|cy
operator|>=
name|scroll_area_y0
operator|&&
name|cy
operator|<
name|scroll_area_y1
condition|)
block|{
name|scroll_area_down
argument_list|(
name|cy
argument_list|,
name|scroll_area_y1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_DL
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|cy
operator|>=
name|scroll_area_y0
operator|&&
name|cy
operator|<
name|scroll_area_y1
condition|)
block|{
name|scroll_area_up
argument_list|(
name|cy
argument_list|,
name|scroll_area_y1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_DCH
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|scroll_line_left
argument_list|(
name|cy
argument_list|,
name|cx
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_SU
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|scroll_area_up
argument_list|(
name|scroll_area_y0
argument_list|,
name|scroll_area_y1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_SD
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|scroll_area_down
argument_list|(
name|scroll_area_y0
argument_list|,
name|scroll_area_y1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CTC
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|ps
control|)
block|{
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
name|tab_stops
operator|.
name|indexOf
argument_list|(
name|cx
argument_list|)
operator|<
literal|0
condition|)
block|{
name|tab_stops
operator|.
name|add
argument_list|(
name|cx
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tab_stops
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"2"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|tab_stops
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|cx
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"5"
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|tab_stops
operator|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|csi_ECH
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|width
operator|-
name|cx
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|clear
argument_list|(
name|cy
argument_list|,
name|cx
argument_list|,
name|cy
operator|+
literal|1
argument_list|,
name|cx
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_CBT
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|ctrl_HT
argument_list|(
literal|1
operator|-
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_HPA
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|cursor_set_x
argument_list|(
name|ps
index|[
literal|0
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_HPR
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|csi_CUF
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_REP
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|vt100_lastchar
operator|<
literal|32
condition|)
block|{
return|return;
block|}
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
literal|2000
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|ps
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|n
operator|--
operator|>
literal|0
condition|)
block|{
name|dumb_echo
argument_list|(
name|vt100_lastchar
argument_list|)
expr_stmt|;
block|}
name|vt100_lastchar
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|csi_DA
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[?1;2c"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|">0"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
operator|||
literal|">"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[>0;184;0c"
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_VPA
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|cursor_set_y
argument_list|(
name|ps
index|[
literal|0
index|]
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_VPR
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|csi_CUD
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_HVP
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|csi_CUP
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_TBC
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|csi_CTC
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"3"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|csi_CTC
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_SM
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|vt100_setmode
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_RM
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|vt100_setmode
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|csi_SGR
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
range|:
name|ps
control|)
block|{
if|if
condition|(
name|m
operator|==
literal|0
condition|)
block|{
name|attr
operator|=
literal|0x00fe0000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|1
condition|)
block|{
name|attr
operator||=
literal|0x08000000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|4
condition|)
block|{
name|attr
operator||=
literal|0x01000000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|7
condition|)
block|{
name|attr
operator||=
literal|0x02000000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|8
condition|)
block|{
name|attr
operator||=
literal|0x04000000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|24
condition|)
block|{
name|attr
operator|&=
literal|0x7eff0000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|27
condition|)
block|{
name|attr
operator|&=
literal|0x7dff0000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|28
condition|)
block|{
name|attr
operator|&=
literal|0x7bff0000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|>=
literal|30
operator|&&
name|m
operator|<=
literal|37
condition|)
block|{
name|attr
operator|=
operator|(
name|attr
operator|&
literal|0x7f0f0000
operator|)
operator||
operator|(
operator|(
name|m
operator|-
literal|30
operator|)
operator|<<
literal|20
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|39
condition|)
block|{
name|attr
operator|=
operator|(
name|attr
operator|&
literal|0x7f0f0000
operator|)
operator||
literal|0x00f00000
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|>=
literal|40
operator|&&
name|m
operator|<=
literal|47
condition|)
block|{
name|attr
operator|=
operator|(
name|attr
operator|&
literal|0x7ff00000
operator|)
operator||
operator|(
operator|(
name|m
operator|-
literal|40
operator|)
operator|<<
literal|16
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m
operator|==
literal|49
condition|)
block|{
name|attr
operator|=
operator|(
name|attr
operator|&
literal|0x7ff00000
operator|)
operator||
literal|0x000e0000
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|csi_DSR
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"5"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[0n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"6"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b["
operator|+
operator|(
name|cy
operator|+
literal|1
operator|)
operator|+
literal|";"
operator|+
operator|(
name|cx
operator|+
literal|1
operator|)
operator|+
literal|"R"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"7"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"gogo-term"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"8"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"1.0-SNAPSHOT"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"?6"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b["
operator|+
operator|(
name|cy
operator|+
literal|1
operator|)
operator|+
literal|";"
operator|+
operator|(
name|cx
operator|+
literal|1
operator|)
operator|+
literal|";0R"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"?15"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[?13n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"?25"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[?20n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"?26"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[?27;1n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"?53"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[?53n"
expr_stmt|;
block|}
comment|// ?75 : Data Integrity report
comment|// ?62 : Macro Space report
comment|// ?63 : Memory Checksum report
block|}
specifier|private
name|void
name|csi_DECSTBM
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|int
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
name|height
block|}
argument_list|)
decl_stmt|;
name|scroll_area_set
argument_list|(
name|ps
index|[
literal|0
index|]
operator|-
literal|1
argument_list|,
name|ps
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|vt100_mode_origin
condition|)
block|{
name|cursor_set
argument_list|(
name|scroll_area_y0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cursor_set
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_SCP
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|vt100_saved_cx
operator|=
name|cx
expr_stmt|;
name|vt100_saved_cy
operator|=
name|cy
expr_stmt|;
block|}
specifier|private
name|void
name|csi_RCP
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|cx
operator|=
name|vt100_saved_cx
expr_stmt|;
name|cy
operator|=
name|vt100_saved_cy
expr_stmt|;
block|}
specifier|private
name|void
name|csi_DECREQTPARM
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|ps
init|=
name|vt100_parse_params
argument_list|(
name|p
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[2;1;1;112;112;1;0x"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|ps
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|vt100_out
operator|=
literal|"\u001b[3;1;1;112;112;1;0x"
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|csi_DECSTR
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|reset_soft
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// VT100 parser
comment|//
specifier|private
name|String
index|[]
name|vt100_parse_params
parameter_list|(
name|String
name|p
parameter_list|,
name|String
index|[]
name|defaults
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'<'
operator|&&
name|p
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'?'
condition|)
block|{
name|prefix
operator|=
literal|""
operator|+
name|p
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|ps
init|=
name|p
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|Math
operator|.
name|max
argument_list|(
name|ps
operator|.
name|length
argument_list|,
name|defaults
operator|.
name|length
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|ps
operator|.
name|length
operator|&&
name|ps
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|value
operator|=
name|prefix
operator|+
name|ps
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|i
operator|<
name|defaults
operator|.
name|length
condition|)
block|{
name|value
operator|=
name|defaults
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|""
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
specifier|private
name|int
index|[]
name|vt100_parse_params
parameter_list|(
name|String
name|p
parameter_list|,
name|int
index|[]
name|defaults
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|""
decl_stmt|;
name|p
operator|=
name|p
operator|==
literal|null
condition|?
literal|""
else|:
name|p
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'<'
operator|&&
name|p
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'?'
condition|)
block|{
name|prefix
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|ps
init|=
name|p
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|Math
operator|.
name|max
argument_list|(
name|ps
operator|.
name|length
argument_list|,
name|defaults
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|ps
operator|.
name|length
condition|)
block|{
name|String
name|v
init|=
name|prefix
operator|+
name|ps
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|value
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{                 }
block|}
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|i
operator|<
name|defaults
operator|.
name|length
condition|)
block|{
name|value
operator|=
name|defaults
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
literal|0
expr_stmt|;
block|}
name|values
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
specifier|private
name|void
name|vt100_parse_reset
parameter_list|()
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|None
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|vt100_parse_reset
parameter_list|(
name|State
name|state
parameter_list|)
block|{
name|vt100_parse_state
operator|=
name|state
expr_stmt|;
name|vt100_parse_len
operator|=
literal|0
expr_stmt|;
name|vt100_parse_func
operator|=
literal|0
expr_stmt|;
name|vt100_parse_param
operator|=
literal|""
expr_stmt|;
block|}
specifier|private
name|void
name|vt100_parse_process
parameter_list|()
block|{
if|if
condition|(
name|vt100_parse_state
operator|==
name|State
operator|.
name|Esc
condition|)
block|{
switch|switch
condition|(
name|vt100_parse_func
condition|)
block|{
case|case
literal|0x0036
case|:
comment|/* DECBI */
break|break;
case|case
literal|0x0037
case|:
name|esc_DECSC
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0038
case|:
name|esc_DECRC
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0042
case|:
comment|/* BPH */
break|break;
case|case
literal|0x0043
case|:
comment|/* NBH */
break|break;
case|case
literal|0x0044
case|:
name|esc_IND
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0045
case|:
name|esc_NEL
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0046
case|:
comment|/* SSA */
name|esc_NEL
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0048
case|:
name|esc_HTS
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0049
case|:
comment|/* HTJ */
break|break;
case|case
literal|0x004A
case|:
comment|/* VTS */
break|break;
case|case
literal|0x004B
case|:
comment|/* PLD */
break|break;
case|case
literal|0x004C
case|:
comment|/* PLU */
break|break;
case|case
literal|0x004D
case|:
name|esc_RI
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x004E
case|:
name|esc_SS2
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x004F
case|:
name|esc_SS3
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0050
case|:
name|esc_DCS
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0051
case|:
comment|/* PU1 */
break|break;
case|case
literal|0x0052
case|:
comment|/* PU2 */
break|break;
case|case
literal|0x0053
case|:
comment|/* STS */
break|break;
case|case
literal|0x0054
case|:
comment|/* CCH */
break|break;
case|case
literal|0x0055
case|:
comment|/* MW */
break|break;
case|case
literal|0x0056
case|:
comment|/* SPA */
break|break;
case|case
literal|0x0057
case|:
comment|/* ESA */
break|break;
case|case
literal|0x0058
case|:
name|esc_SOS
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x005A
case|:
comment|/* SCI */
break|break;
case|case
literal|0x005B
case|:
name|esc_CSI
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x005C
case|:
name|esc_ST
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x005D
case|:
name|esc_OSC
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x005E
case|:
name|esc_PM
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x005F
case|:
name|esc_APC
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0060
case|:
comment|/* DMI */
break|break;
case|case
literal|0x0061
case|:
comment|/* INT */
break|break;
case|case
literal|0x0062
case|:
comment|/* EMI */
break|break;
case|case
literal|0x0063
case|:
name|esc_RIS
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x0064
case|:
comment|/* CMD */
break|break;
case|case
literal|0x006C
case|:
comment|/* RM */
break|break;
case|case
literal|0x006E
case|:
comment|/* LS2 */
break|break;
case|case
literal|0x006F
case|:
comment|/* LS3 */
break|break;
case|case
literal|0x007C
case|:
comment|/* LS3R */
break|break;
case|case
literal|0x007D
case|:
comment|/* LS2R */
break|break;
case|case
literal|0x007E
case|:
comment|/* LS1R */
break|break;
case|case
literal|0x2338
case|:
name|esc_DECALN
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2841
case|:
name|esc_G0_0
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2842
case|:
name|esc_G0_1
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2830
case|:
name|esc_G0_2
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2831
case|:
name|esc_G0_3
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2832
case|:
name|esc_G0_4
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2930
case|:
name|esc_G1_2
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2931
case|:
name|esc_G1_3
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2932
case|:
name|esc_G1_4
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2941
case|:
name|esc_G1_0
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x2942
case|:
name|esc_G1_1
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|vt100_parse_state
operator|==
name|State
operator|.
name|Esc
condition|)
block|{
name|vt100_parse_reset
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|vt100_parse_func
condition|)
block|{
case|case
literal|0x0040
case|:
name|csi_ICH
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0041
case|:
name|csi_CUU
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0042
case|:
name|csi_CUD
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0043
case|:
name|csi_CUF
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0044
case|:
name|csi_CUB
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0045
case|:
name|csi_CNL
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0046
case|:
name|csi_CPL
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0047
case|:
name|csi_CHA
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0048
case|:
name|csi_CUP
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0049
case|:
name|csi_CHT
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x004A
case|:
name|csi_ED
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x004B
case|:
name|csi_EL
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x004C
case|:
name|csi_IL
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x004D
case|:
name|csi_DL
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x004E
case|:
comment|/* EF */
break|break;
case|case
literal|0x004F
case|:
comment|/* EA */
break|break;
case|case
literal|0x0050
case|:
name|csi_DCH
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0051
case|:
comment|/* SEE */
break|break;
case|case
literal|0x0052
case|:
comment|/* CPR */
break|break;
case|case
literal|0x0053
case|:
name|csi_SU
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0054
case|:
name|csi_SD
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0055
case|:
comment|/* NP */
break|break;
case|case
literal|0x0056
case|:
comment|/* PP */
break|break;
case|case
literal|0x0057
case|:
name|csi_CTC
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0058
case|:
name|csi_ECH
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0059
case|:
comment|/* CVT */
break|break;
case|case
literal|0x005A
case|:
name|csi_CBT
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x005B
case|:
comment|/* SRS */
break|break;
case|case
literal|0x005C
case|:
comment|/* PTX */
break|break;
case|case
literal|0x005D
case|:
comment|/* SDS */
break|break;
case|case
literal|0x005E
case|:
comment|/* SIMD */
break|break;
case|case
literal|0x0060
case|:
name|csi_HPA
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0061
case|:
name|csi_HPR
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0062
case|:
name|csi_REP
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0063
case|:
name|csi_DA
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0064
case|:
name|csi_VPA
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0065
case|:
name|csi_VPR
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0066
case|:
name|csi_HVP
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0067
case|:
name|csi_TBC
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0068
case|:
name|csi_SM
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0069
case|:
comment|/* MC */
break|break;
case|case
literal|0x006A
case|:
comment|/* HPB */
break|break;
case|case
literal|0x006B
case|:
comment|/* VPB */
break|break;
case|case
literal|0x006C
case|:
name|csi_RM
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x006D
case|:
name|csi_SGR
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x006E
case|:
name|csi_DSR
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x006F
case|:
comment|/* DAQ */
break|break;
case|case
literal|0x0072
case|:
name|csi_DECSTBM
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0073
case|:
name|csi_SCP
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0075
case|:
name|csi_RCP
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0078
case|:
name|csi_DECREQTPARM
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x2040
case|:
comment|/* SL */
break|break;
case|case
literal|0x2041
case|:
comment|/* SR */
break|break;
case|case
literal|0x2042
case|:
comment|/* GSM */
break|break;
case|case
literal|0x2043
case|:
comment|/* GSS */
break|break;
case|case
literal|0x2044
case|:
comment|/* FNT */
break|break;
case|case
literal|0x2045
case|:
comment|/* TSS */
break|break;
case|case
literal|0x2046
case|:
comment|/* JFY */
break|break;
case|case
literal|0x2047
case|:
comment|/* SPI */
break|break;
case|case
literal|0x2048
case|:
comment|/* QUAD */
break|break;
case|case
literal|0x2049
case|:
comment|/* SSU */
break|break;
case|case
literal|0x204A
case|:
comment|/* PFS */
break|break;
case|case
literal|0x204B
case|:
comment|/* SHS */
break|break;
case|case
literal|0x204C
case|:
comment|/* SVS */
break|break;
case|case
literal|0x204D
case|:
comment|/* IGS */
break|break;
case|case
literal|0x204E
case|:
comment|/* deprecated: HTSA */
break|break;
case|case
literal|0x204F
case|:
comment|/* IDCS */
break|break;
case|case
literal|0x2050
case|:
comment|/* PPA */
break|break;
case|case
literal|0x2051
case|:
comment|/* PPR */
break|break;
case|case
literal|0x2052
case|:
comment|/* PPB */
break|break;
case|case
literal|0x2053
case|:
comment|/* SPD */
break|break;
case|case
literal|0x2054
case|:
comment|/* DTA */
break|break;
case|case
literal|0x2055
case|:
comment|/* SLH */
break|break;
case|case
literal|0x2056
case|:
comment|/* SLL */
break|break;
case|case
literal|0x2057
case|:
comment|/* FNK */
break|break;
case|case
literal|0x2058
case|:
comment|/* SPQR */
break|break;
case|case
literal|0x2059
case|:
comment|/* SEF */
break|break;
case|case
literal|0x205A
case|:
comment|/* PEC */
break|break;
case|case
literal|0x205B
case|:
comment|/* SSW */
break|break;
case|case
literal|0x205C
case|:
comment|/* SACS */
break|break;
case|case
literal|0x205D
case|:
comment|/* SAPV */
break|break;
case|case
literal|0x205E
case|:
comment|/* STAB */
break|break;
case|case
literal|0x205F
case|:
comment|/* GCC */
break|break;
case|case
literal|0x2060
case|:
comment|/* TAPE */
break|break;
case|case
literal|0x2061
case|:
comment|/* TALE */
break|break;
case|case
literal|0x2062
case|:
comment|/* TAC */
break|break;
case|case
literal|0x2063
case|:
comment|/* TCC */
break|break;
case|case
literal|0x2064
case|:
comment|/* TSR */
break|break;
case|case
literal|0x2065
case|:
comment|/* SCO */
break|break;
case|case
literal|0x2066
case|:
comment|/* SRCS */
break|break;
case|case
literal|0x2067
case|:
comment|/* SCS */
break|break;
case|case
literal|0x2068
case|:
comment|/* SLS */
break|break;
case|case
literal|0x2069
case|:
comment|/* SPH */
break|break;
case|case
literal|0x206A
case|:
comment|/* SPL */
break|break;
case|case
literal|0x206B
case|:
comment|/* SCP */
break|break;
case|case
literal|0x2170
case|:
name|csi_DECSTR
argument_list|(
name|vt100_parse_param
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x2472
case|:
comment|/* DECCARA */
break|break;
case|case
literal|0x2477
case|:
comment|/* DECRQPSR */
break|break;
block|}
if|if
condition|(
name|vt100_parse_state
operator|==
name|State
operator|.
name|Csi
condition|)
block|{
name|vt100_parse_reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|vt100_write
parameter_list|(
name|int
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|<
literal|32
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|27
condition|)
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Esc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|14
condition|)
block|{
name|ctrl_SO
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|15
condition|)
block|{
name|ctrl_SI
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|c
operator|&
literal|0xffe0
operator|)
operator|==
literal|0x0080
condition|)
block|{
name|vt100_parse_reset
argument_list|(
name|State
operator|.
name|Esc
argument_list|)
expr_stmt|;
name|vt100_parse_func
operator|=
call|(
name|char
call|)
argument_list|(
name|c
operator|-
literal|0x0040
argument_list|)
expr_stmt|;
name|vt100_parse_process
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|vt100_parse_state
operator|!=
name|State
operator|.
name|None
condition|)
block|{
if|if
condition|(
name|vt100_parse_state
operator|==
name|State
operator|.
name|Str
condition|)
block|{
if|if
condition|(
name|c
operator|>=
literal|32
condition|)
block|{
return|return
literal|true
return|;
block|}
name|vt100_parse_reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|c
operator|<
literal|32
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|24
operator|||
name|c
operator|==
literal|26
condition|)
block|{
name|vt100_parse_reset
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|vt100_parse_len
operator|+=
literal|1
expr_stmt|;
if|if
condition|(
name|vt100_parse_len
operator|>
literal|32
condition|)
block|{
name|vt100_parse_reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|int
name|msb
init|=
name|c
operator|&
literal|0xf0
decl_stmt|;
if|if
condition|(
name|msb
operator|==
literal|0x20
condition|)
block|{
name|vt100_parse_func
operator|<<=
literal|8
expr_stmt|;
name|vt100_parse_func
operator|+=
operator|(
name|char
operator|)
name|c
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|msb
operator|==
literal|0x30
operator|&&
name|vt100_parse_state
operator|==
name|State
operator|.
name|Csi
condition|)
block|{
name|vt100_parse_param
operator|+=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
operator|(
name|char
operator|)
name|c
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vt100_parse_func
operator|<<=
literal|8
expr_stmt|;
name|vt100_parse_func
operator|+=
operator|(
name|char
operator|)
name|c
expr_stmt|;
name|vt100_parse_process
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
name|vt100_lastchar
operator|=
name|c
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//
comment|// Dirty
comment|//
specifier|private
specifier|synchronized
name|void
name|setDirty
parameter_list|()
block|{
name|dirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// External interface
comment|//
specifier|public
specifier|synchronized
name|boolean
name|setSize
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
if|if
condition|(
name|w
argument_list|<
literal|2
operator|||
name|w
argument_list|>
literal|256
operator|||
name|h
argument_list|<
literal|2
operator|||
name|h
argument_list|>
literal|256
condition|)
block|{
return|return
literal|false
return|;
block|}
name|this
operator|.
name|width
operator|=
name|w
expr_stmt|;
name|this
operator|.
name|height
operator|=
name|h
expr_stmt|;
name|reset_screen
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|read
parameter_list|()
block|{
name|String
name|d
init|=
name|vt100_out
decl_stmt|;
name|vt100_out
operator|=
literal|""
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|pipe
parameter_list|(
name|String
name|d
parameter_list|)
block|{
name|String
name|o
init|=
literal|""
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|d
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|vt100_keyfilter_escape
condition|)
block|{
name|vt100_keyfilter_escape
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|vt100_mode_cursorkey
condition|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'~'
case|:
name|o
operator|+=
literal|"~"
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|o
operator|+=
literal|"\u001bOA"
expr_stmt|;
break|break;
case|case
literal|'B'
case|:
name|o
operator|+=
literal|"\u001bOB"
expr_stmt|;
break|break;
case|case
literal|'C'
case|:
name|o
operator|+=
literal|"\u001bOC"
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
name|o
operator|+=
literal|"\u001bOD"
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|o
operator|+=
literal|"\u001bOF"
expr_stmt|;
break|break;
case|case
literal|'H'
case|:
name|o
operator|+=
literal|"\u001bOH"
expr_stmt|;
break|break;
case|case
literal|'1'
case|:
name|o
operator|+=
literal|"\u001b[5~"
expr_stmt|;
break|break;
case|case
literal|'2'
case|:
name|o
operator|+=
literal|"\u001b[6~"
expr_stmt|;
break|break;
case|case
literal|'3'
case|:
name|o
operator|+=
literal|"\u001b[2~"
expr_stmt|;
break|break;
case|case
literal|'4'
case|:
name|o
operator|+=
literal|"\u001b[3~"
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|o
operator|+=
literal|"\u001bOP"
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|o
operator|+=
literal|"\u001bOQ"
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|o
operator|+=
literal|"\u001bOR"
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|o
operator|+=
literal|"\u001bOS"
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
name|o
operator|+=
literal|"\u001b[15~"
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|o
operator|+=
literal|"\u001b[17~"
expr_stmt|;
break|break;
case|case
literal|'g'
case|:
name|o
operator|+=
literal|"\u001b[18~"
expr_stmt|;
break|break;
case|case
literal|'h'
case|:
name|o
operator|+=
literal|"\u001b[19~"
expr_stmt|;
break|break;
case|case
literal|'i'
case|:
name|o
operator|+=
literal|"\u001b[20~"
expr_stmt|;
break|break;
case|case
literal|'j'
case|:
name|o
operator|+=
literal|"\u001b[21~"
expr_stmt|;
break|break;
case|case
literal|'k'
case|:
name|o
operator|+=
literal|"\u001b[23~"
expr_stmt|;
break|break;
case|case
literal|'l'
case|:
name|o
operator|+=
literal|"\u001b[24~"
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'~'
case|:
name|o
operator|+=
literal|"~"
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|o
operator|+=
literal|"\u001b[A"
expr_stmt|;
break|break;
case|case
literal|'B'
case|:
name|o
operator|+=
literal|"\u001b[B"
expr_stmt|;
break|break;
case|case
literal|'C'
case|:
name|o
operator|+=
literal|"\u001b[C"
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
name|o
operator|+=
literal|"\u001b[D"
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|o
operator|+=
literal|"\u001b[F"
expr_stmt|;
break|break;
case|case
literal|'H'
case|:
name|o
operator|+=
literal|"\u001b[H"
expr_stmt|;
break|break;
case|case
literal|'1'
case|:
name|o
operator|+=
literal|"\u001b[5~"
expr_stmt|;
break|break;
case|case
literal|'2'
case|:
name|o
operator|+=
literal|"\u001b[6~"
expr_stmt|;
break|break;
case|case
literal|'3'
case|:
name|o
operator|+=
literal|"\u001b[2~"
expr_stmt|;
break|break;
case|case
literal|'4'
case|:
name|o
operator|+=
literal|"\u001b[3~"
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|o
operator|+=
literal|"\u001bOP"
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|o
operator|+=
literal|"\u001bOQ"
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|o
operator|+=
literal|"\u001bOR"
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|o
operator|+=
literal|"\u001bOS"
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
name|o
operator|+=
literal|"\u001b[15~"
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|o
operator|+=
literal|"\u001b[17~"
expr_stmt|;
break|break;
case|case
literal|'g'
case|:
name|o
operator|+=
literal|"\u001b[18~"
expr_stmt|;
break|break;
case|case
literal|'h'
case|:
name|o
operator|+=
literal|"\u001b[19~"
expr_stmt|;
break|break;
case|case
literal|'i'
case|:
name|o
operator|+=
literal|"\u001b[20~"
expr_stmt|;
break|break;
case|case
literal|'j'
case|:
name|o
operator|+=
literal|"\u001b[21~"
expr_stmt|;
break|break;
case|case
literal|'k'
case|:
name|o
operator|+=
literal|"\u001b[23~"
expr_stmt|;
break|break;
case|case
literal|'l'
case|:
name|o
operator|+=
literal|"\u001b[24~"
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'~'
condition|)
block|{
name|vt100_keyfilter_escape
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|127
condition|)
block|{
if|if
condition|(
name|vt100_mode_backspace
condition|)
block|{
name|o
operator|+=
operator|(
name|char
operator|)
literal|8
expr_stmt|;
block|}
else|else
block|{
name|o
operator|+=
operator|(
name|char
operator|)
literal|127
expr_stmt|;
block|}
block|}
else|else
block|{
name|o
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|vt100_mode_lfnewline
operator|&&
name|c
operator|==
literal|13
condition|)
block|{
name|o
operator|+=
operator|(
name|char
operator|)
literal|10
expr_stmt|;
block|}
block|}
block|}
return|return
name|o
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|write
parameter_list|(
name|String
name|d
parameter_list|)
block|{
name|d
operator|=
name|utf8_decode
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
range|:
name|d
operator|.
name|toCharArray
argument_list|()
control|)
block|{
if|if
condition|(
name|vt100_write
argument_list|(
name|c
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|dumb_write
argument_list|(
name|c
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|c
operator|<=
literal|0xffff
condition|)
block|{
name|dumb_echo
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|dump
parameter_list|(
name|long
name|timeout
parameter_list|,
name|boolean
name|forceDump
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
operator|!
name|dirty
operator|.
name|get
argument_list|()
operator|&&
name|timeout
operator|>
literal|0
condition|)
block|{
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dirty
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
operator|||
name|forceDump
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|prev_attr
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|cx
init|=
name|Math
operator|.
name|min
argument_list|(
name|this
operator|.
name|cx
argument_list|,
name|width
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|cy
init|=
name|this
operator|.
name|cy
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<div><pre class='term'>"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
name|int
name|wx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|int
name|d
init|=
name|screen
index|[
name|y
operator|*
name|width
operator|+
name|x
index|]
decl_stmt|;
name|int
name|c
init|=
name|d
operator|&
literal|0xffff
decl_stmt|;
name|int
name|a
init|=
name|d
operator|>>
literal|16
decl_stmt|;
if|if
condition|(
name|cy
operator|==
name|y
operator|&&
name|cx
operator|==
name|x
operator|&&
name|vt100_mode_cursor
condition|)
block|{
name|a
operator|=
name|a
operator|&
literal|0xfff0
operator||
literal|0x000c
expr_stmt|;
block|}
if|if
condition|(
name|a
operator|!=
name|prev_attr
condition|)
block|{
if|if
condition|(
name|prev_attr
operator|!=
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"</span>"
argument_list|)
expr_stmt|;
block|}
name|int
name|bg
init|=
name|a
operator|&
literal|0x000f
decl_stmt|;
name|int
name|fg
init|=
operator|(
name|a
operator|&
literal|0x00f0
operator|)
operator|>>
literal|4
decl_stmt|;
name|boolean
name|inv
init|=
operator|(
name|a
operator|&
literal|0x0200
operator|)
operator|!=
literal|0
decl_stmt|;
name|boolean
name|inv2
init|=
name|vt100_mode_inverse
decl_stmt|;
if|if
condition|(
name|inv
operator|&&
operator|!
name|inv2
operator|||
name|inv2
operator|&&
operator|!
name|inv
condition|)
block|{
name|int
name|i
init|=
name|fg
decl_stmt|;
name|fg
operator|=
name|bg
expr_stmt|;
name|bg
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|a
operator|&
literal|0x0400
operator|)
operator|!=
literal|0
condition|)
block|{
name|fg
operator|=
literal|0x0c
expr_stmt|;
block|}
name|String
name|ul
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|&
literal|0x0100
operator|)
operator|!=
literal|0
condition|)
block|{
name|ul
operator|=
literal|" ul"
expr_stmt|;
block|}
else|else
block|{
name|ul
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|b
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|&
literal|0x0800
operator|)
operator|!=
literal|0
condition|)
block|{
name|b
operator|=
literal|" b"
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
literal|""
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"<span class='f"
argument_list|)
operator|.
name|append
argument_list|(
name|fg
argument_list|)
operator|.
name|append
argument_list|(
literal|" b"
argument_list|)
operator|.
name|append
argument_list|(
name|bg
argument_list|)
operator|.
name|append
argument_list|(
name|ul
argument_list|)
operator|.
name|append
argument_list|(
name|b
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|prev_attr
operator|=
name|a
expr_stmt|;
block|}
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'&'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"&amp;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|wx
operator|+=
name|utf8_charwidth
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|wx
operator|<=
name|width
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"</span></pre></div>"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
condition|;
name|x
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|screen
index|[
name|y
operator|*
name|width
operator|+
name|x
index|]
operator|&
literal|0xffff
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

