begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|LockFactory
block|{
comment|/**      * If a lock should be used before starting the runtime      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_USE_LOCK
init|=
literal|"karaf.lock"
decl_stmt|;
comment|/**      * The lock implementation      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_CLASS
init|=
literal|"karaf.lock.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_CLASS_DEFAULT
init|=
name|SimpleFileLock
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Lock
name|createLock
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_USE_LOCK
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
name|String
name|clz
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_CLASS
argument_list|,
name|PROPERTY_LOCK_CLASS_DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
return|return
operator|(
name|Lock
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clz
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|Properties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|props
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception instantiating lock class "
operator|+
name|clz
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

