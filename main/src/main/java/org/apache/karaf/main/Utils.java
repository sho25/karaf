begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|Main
import|;
end_import

begin_class
specifier|public
class|class
name|Utils
block|{
specifier|public
specifier|static
name|File
name|getKarafHome
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|rc
init|=
literal|null
decl_stmt|;
comment|// Use the system property if specified.
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|Main
operator|.
name|PROP_KARAF_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|Main
operator|.
name|PROP_KARAF_HOME
operator|+
literal|" system property"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|Main
operator|.
name|ENV_KARAF_HOME
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|Main
operator|.
name|ENV_KARAF_HOME
operator|+
literal|" environment variable"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Try to figure it out using the jar file this class was loaded from.
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// guess the home from the location of the jar
name|URL
name|url
init|=
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|Main
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JarURLConnection
name|jarConnection
init|=
operator|(
name|JarURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|url
operator|=
name|jarConnection
operator|.
name|getJarFileURL
argument_list|()
expr_stmt|;
name|rc
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// Dig into the classpath to guess the location of the jar
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|classpath
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"karaf.jar"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|classpath
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|,
name|index
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|start
condition|)
block|{
name|String
name|jarLocation
init|=
name|classpath
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|rc
operator|=
operator|new
name|File
argument_list|(
name|jarLocation
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The Karaf install directory could not be determined.  Please set the "
operator|+
name|Main
operator|.
name|PROP_KARAF_HOME
operator|+
literal|" system property or the "
operator|+
name|Main
operator|.
name|ENV_KARAF_HOME
operator|+
literal|" environment variable."
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
specifier|static
name|File
name|validateDirectoryExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|errPrefix
parameter_list|,
name|boolean
name|createDirectory
parameter_list|)
block|{
name|File
name|rc
decl_stmt|;
try|try
block|{
name|rc
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rc
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|createDirectory
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rc
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|rc
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|rc
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : is not a directory"
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
specifier|static
name|File
name|getKarafDirectory
parameter_list|(
name|String
name|directoryProperty
parameter_list|,
name|String
name|directoryEnvironmentVariable
parameter_list|,
name|File
name|defaultValue
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|File
name|rc
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|directoryProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|directoryProperty
operator|+
literal|" system property"
argument_list|,
name|create
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|directoryEnvironmentVariable
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|directoryEnvironmentVariable
operator|+
literal|" environment variable"
argument_list|,
name|create
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
end_class

end_unit

