begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|GenericDataSource
implements|implements
name|DataSource
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER_MANAGER_USER_PROPERTY
init|=
literal|"user"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DRIVER_MANAGER_PASSWORD_PROPERTY
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|final
name|String
name|driverClass
decl_stmt|;
specifier|private
specifier|final
name|String
name|url
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|properties
decl_stmt|;
specifier|private
specifier|final
name|int
name|validTimeoutMs
decl_stmt|;
specifier|private
specifier|final
name|Queue
argument_list|<
name|Connection
argument_list|>
name|cache
decl_stmt|;
specifier|private
specifier|volatile
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|driverClassLoaded
decl_stmt|;
specifier|public
name|GenericDataSource
parameter_list|(
name|String
name|driverClass
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|,
name|boolean
name|cache
parameter_list|,
name|int
name|validTimeoutMs
parameter_list|)
block|{
name|this
operator|.
name|driverClass
operator|=
name|driverClass
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|properties
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|DRIVER_MANAGER_USER_PROPERTY
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|DRIVER_MANAGER_PASSWORD_PROPERTY
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|validTimeoutMs
operator|=
name|validTimeoutMs
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
condition|?
operator|new
name|ConcurrentLinkedQueue
argument_list|<>
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|ensureDriverLoaded
parameter_list|()
throws|throws
name|SQLException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|driverClassLoaded
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|driverClassLoaded
condition|)
block|{
if|if
condition|(
name|driverClass
operator|!=
literal|null
condition|)
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driverClass
argument_list|)
expr_stmt|;
block|}
name|driverClassLoaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Unable to load driver class "
operator|+
name|driverClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Driver
name|driver
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|driver
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|driver
operator|==
literal|null
condition|)
block|{
name|driver
operator|=
name|DriverManager
operator|.
name|getDriver
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|driver
return|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|ensureDriverLoaded
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Connection
name|con
init|=
name|cache
operator|!=
literal|null
condition|?
name|cache
operator|.
name|poll
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|con
operator|==
literal|null
condition|)
block|{
name|con
operator|=
name|driver
argument_list|()
operator|.
name|connect
argument_list|(
name|url
argument_list|,
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|con
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Invalid jdbc URL '"
operator|+
name|url
operator|+
literal|"' for driver "
operator|+
name|driver
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|con
operator|.
name|isValid
argument_list|(
name|validTimeoutMs
argument_list|)
condition|)
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|con
operator|!=
literal|null
condition|)
block|{
return|return
name|wrap
argument_list|(
name|con
argument_list|)
return|;
block|}
block|}
block|}
specifier|private
name|Connection
name|wrap
parameter_list|(
name|Connection
name|con
parameter_list|)
block|{
return|return
operator|(
name|Connection
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|con
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Connection
operator|.
name|class
block|}
argument_list|,
operator|new
name|InvocationHandler
argument_list|()
block|{
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"close"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|cache
operator|.
name|offer
argument_list|(
name|con
argument_list|)
condition|)
block|{
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"isClosed"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|closed
return|;
block|}
else|else
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"Connection closed"
argument_list|)
throw|;
block|}
return|return
name|method
operator|.
name|invoke
argument_list|(
name|con
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|SQLException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|PrintWriter
name|getLogWriter
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setLogWriter
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|SQLException
block|{     }
specifier|public
name|int
name|getLoginTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|setLoginTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|SQLException
block|{     }
annotation|@
name|Override
specifier|public
name|Logger
name|getParentLogger
parameter_list|()
throws|throws
name|SQLFeatureNotSupportedException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

