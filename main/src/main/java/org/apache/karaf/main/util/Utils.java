begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|Utils
block|{
specifier|public
specifier|static
specifier|final
name|Pattern
name|mvnPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"mvn:([^/ ]+)/([^/ ]+)/([^/ ]*)(/([^/ ]+)(/([^/ ]+))?)?"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|File
name|getKarafHome
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mainClass
parameter_list|,
name|String
name|karafHomeProperty
parameter_list|,
name|String
name|karafHomeEnv
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|rc
init|=
literal|null
decl_stmt|;
comment|// Use the system property if specified.
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|karafHomeProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|karafHomeProperty
operator|+
literal|" system property"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|karafHomeEnv
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|karafHomeEnv
operator|+
literal|" environment variable"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Try to figure it out using the jar file this class was loaded from.
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// guess the home from the location of the jar
name|URL
name|url
init|=
name|mainClass
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|mainClass
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JarURLConnection
name|jarConnection
init|=
operator|(
name|JarURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|url
operator|=
name|jarConnection
operator|.
name|getJarFileURL
argument_list|()
expr_stmt|;
name|rc
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// Dig into the classpath to guess the location of the jar
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|classpath
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"karaf.jar"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|classpath
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|,
name|index
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|start
condition|)
block|{
name|String
name|jarLocation
init|=
name|classpath
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|rc
operator|=
operator|new
name|File
argument_list|(
name|jarLocation
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The Karaf install directory could not be determined.  Please set the "
operator|+
name|karafHomeProperty
operator|+
literal|" system property or the "
operator|+
name|karafHomeEnv
operator|+
literal|" environment variable."
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
specifier|static
name|File
name|validateDirectoryExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|errPrefix
parameter_list|,
name|boolean
name|createDirectory
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|File
name|rc
decl_stmt|;
try|try
block|{
name|rc
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rc
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|createDirectory
operator|&&
name|validate
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rc
operator|.
name|exists
argument_list|()
operator|&&
name|createDirectory
condition|)
block|{
try|try
block|{
name|rc
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|rc
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|rc
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : is not a directory"
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
specifier|static
name|File
name|getKarafDirectory
parameter_list|(
name|String
name|directoryProperty
parameter_list|,
name|String
name|directoryEnvironmentVariable
parameter_list|,
name|File
name|defaultValue
parameter_list|,
name|boolean
name|create
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|File
name|rc
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|directoryProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|directoryProperty
operator|+
literal|" system property"
argument_list|,
name|create
argument_list|,
name|validate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|directoryEnvironmentVariable
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|validate
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|directoryEnvironmentVariable
operator|+
literal|" environment variable"
argument_list|,
name|create
argument_list|,
name|validate
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|//-----------------------------------------------------------------------
comment|/**      * Recursively delete a directory.      * @param directory directory to delete      * @throws IOException in case deletion is unsuccessful      */
specifier|public
specifier|static
name|void
name|deleteDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
name|cleanDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|delete
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Unable to delete directory "
operator|+
name|directory
operator|+
literal|"."
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
comment|/**      * Clean a directory without deleting it.      * @param directory directory to clean      * @throws IOException in case cleaning is unsuccessful      */
specifier|public
specifier|static
name|void
name|cleanDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|directory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|directory
operator|+
literal|" does not exist"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
name|message
init|=
name|directory
operator|+
literal|" is not a directory"
decl_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
comment|// null if security restricted
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to list contents of "
operator|+
name|directory
argument_list|)
throw|;
block|}
name|IOException
name|exception
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|forceDelete
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|exception
operator|=
name|ioe
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|exception
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
block|}
comment|/**      *<p>      * Delete a file. If file is a directory, delete it and all sub-directories.      *</p>      *<p>      * The difference between File.delete() and this method are:      *</p>      *<ul>      *<li>A directory to be deleted does not have to be empty.</li>      *<li>You get exceptions when a file or directory cannot be deleted.      *      (java.io.File methods returns a boolean)</li>      *</ul>      * @param file file or directory to delete.      * @throws IOException in case deletion is unsuccessful      */
specifier|public
specifier|static
name|void
name|forceDelete
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|deleteDirectory
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File does not exist: "
operator|+
name|file
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
block|{
name|String
name|message
init|=
literal|"Unable to delete file: "
operator|+
name|file
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** 	 * Returns a path for an srtifact. Input: path (no ':') returns path Input: 	 * mvn:<groupId>/<artifactId>/<version>/<type>/<classifier> converts to 	 * default repo location path // * Input: 	 *<groupId>:<artifactId>:<version>:<type>:<classifier> converts to default 	 * repo location path type and classifier are optional. 	 *  	 *  	 * @param name 	 *            input artifact info 	 * @return path as supplied or a default maven repo path 	 */
specifier|private
specifier|static
name|String
name|fromMaven
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|mvnPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|name
return|;
block|}
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|b
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// groupId
name|String
name|artifactId
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|extension
init|=
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// artifactId
name|b
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// version
name|b
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|present
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|present
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|".jar"
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|present
parameter_list|(
name|String
name|part
parameter_list|)
block|{
return|return
name|part
operator|!=
literal|null
operator|&&
operator|!
name|part
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|File
name|findFile
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|File
name|bundleDir
range|:
name|bundleDirs
control|)
block|{
name|File
name|file
init|=
name|Utils
operator|.
name|findFile
argument_list|(
name|bundleDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|File
name|findFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|fromMaven
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|File
name|theFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|theFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|theFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|theFile
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|findJars
parameter_list|(
name|File
name|dir
parameter_list|,
name|ArrayList
argument_list|<
name|File
argument_list|>
name|jars
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findJars
argument_list|(
name|file
argument_list|,
name|jars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|file
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|jars
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|String
index|[]
name|convertToMavenUrlsIfNeeded
parameter_list|(
name|String
name|location
parameter_list|,
name|boolean
name|convertToMavenUrls
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|location
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertToMavenUrls
condition|)
block|{
name|String
index|[]
name|p
init|=
name|parts
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|length
operator|>=
literal|4
operator|&&
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|startsWith
argument_list|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|3
index|]
operator|+
literal|"-"
operator|+
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
condition|)
block|{
name|String
name|artifactId
init|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|3
index|]
decl_stmt|;
name|String
name|version
init|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|String
name|classifier
decl_stmt|;
name|String
name|type
decl_stmt|;
name|String
name|artifactIdVersion
init|=
name|artifactId
operator|+
literal|"-"
operator|+
name|version
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|charAt
argument_list|(
name|artifactIdVersion
operator|.
name|length
argument_list|()
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|classifier
operator|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
name|artifactIdVersion
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classifier
operator|=
literal|null
expr_stmt|;
block|}
name|type
operator|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mvn:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|p
operator|.
name|length
operator|-
literal|3
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|p
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|classifier
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
block|}
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|parts
index|[
literal|0
index|]
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
block|}
end_class

end_unit

