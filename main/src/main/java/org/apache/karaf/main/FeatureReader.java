begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_class
class|class
name|FeatureReader
block|{
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|readBundles
parameter_list|(
name|URI
name|featureUri
parameter_list|,
name|String
name|featureName
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|featureUri
operator|.
name|toURL
argument_list|()
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|NodeList
name|features
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"feature"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|features
operator|.
name|getLength
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|Element
name|feature
init|=
operator|(
name|Element
operator|)
name|features
operator|.
name|item
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|feature
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|featureName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|NodeList
name|bundleNodes
init|=
name|feature
operator|.
name|getElementsByTagName
argument_list|(
literal|"bundle"
argument_list|)
decl_stmt|;
return|return
name|getBundles
argument_list|(
name|bundleNodes
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|BundleInfo
argument_list|>
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|getBundles
parameter_list|(
name|NodeList
name|bundleNodes
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|ArrayList
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|bundleNodes
operator|.
name|getLength
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|Element
name|bundleNode
init|=
operator|(
name|Element
operator|)
name|bundleNodes
operator|.
name|item
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|String
name|startLevel
init|=
name|bundleNode
operator|.
name|getAttribute
argument_list|(
literal|"start-level"
argument_list|)
decl_stmt|;
name|String
name|uri
init|=
name|bundleNode
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|BundleInfo
name|bi
init|=
operator|new
name|BundleInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|startLevel
operator|!=
literal|null
condition|)
block|{
name|bi
operator|.
name|startLevel
operator|=
operator|new
name|Integer
argument_list|(
name|startLevel
argument_list|)
expr_stmt|;
block|}
name|bi
operator|.
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
return|return
name|bundles
return|;
block|}
block|}
end_class

end_unit

