begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Resolves local maven artifacts and raw file paths  */
end_comment

begin_class
specifier|public
class|class
name|SimpleMavenResolver
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|mvnPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"mvn:([^/ ]+)/([^/ ]+)/([^/ ]*)(/([^/ ]+)(/([^/ ]+))?)?"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|mavenRepos
decl_stmt|;
comment|/**      *       * @param mavenRepos list of base dirs of maven repos that should be used when resolving maven artifacts      */
specifier|public
name|SimpleMavenResolver
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|mavenRepos
parameter_list|)
block|{
name|this
operator|.
name|mavenRepos
operator|=
name|mavenRepos
expr_stmt|;
block|}
comment|/**      * Resolve from pax-url format for maven URIs to the file that is referenced by the URI      * The URI format is:      * mvn:<groupId>/<artifactId>/<version>/<type>/<classifier>      *       * If artifactUri does not match the Syntax the local file that corresponds to the path is returned      *       * @param artifactUri Maven artifact URI      * @return file referenced by the URI      */
specifier|public
name|File
name|resolve
parameter_list|(
name|String
name|artifactUri
parameter_list|)
block|{
for|for
control|(
name|File
name|bundleDir
range|:
name|mavenRepos
control|)
block|{
name|File
name|file
init|=
name|findFile
argument_list|(
name|bundleDir
argument_list|,
name|artifactUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|fromMaven
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|File
name|theFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|theFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|theFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|theFile
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Returns a path for an srtifact.      * Input: path (no ':') returns path      * Input:  converts to default repo location path      * type and classifier are optional.      *      *      * @param name input artifact info      * @return path as supplied or a default maven repo path      */
specifier|private
specifier|static
name|String
name|fromMaven
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|mvnPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|name
return|;
block|}
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|b
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|//groupId
name|String
name|artifactId
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|extension
init|=
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|//artifactId
name|b
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|//version
name|b
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|present
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|present
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|".jar"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|present
parameter_list|(
name|String
name|part
parameter_list|)
block|{
return|return
name|part
operator|!=
literal|null
operator|&&
operator|!
name|part
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

