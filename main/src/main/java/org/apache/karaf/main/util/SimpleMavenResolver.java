begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|maven
operator|.
name|Parser
import|;
end_import

begin_comment
comment|/**  * Resolves local maven artifacts and raw file paths  */
end_comment

begin_class
specifier|public
class|class
name|SimpleMavenResolver
implements|implements
name|ArtifactResolver
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|File
argument_list|>
name|mavenRepos
decl_stmt|;
comment|/**      *       * @param mavenRepos list of base dirs of maven repos that should be used when resolving maven artifacts      */
specifier|public
name|SimpleMavenResolver
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|mavenRepos
parameter_list|)
block|{
name|this
operator|.
name|mavenRepos
operator|=
name|mavenRepos
expr_stmt|;
block|}
comment|/**      * Resolve from pax-url format for maven URIs to the file that is referenced by the URI      * The URI format is:      * mvn:&lt;groupId&gt;/&lt;artifactId&gt;/&lt;version&gt;/&lt;type&gt;/&lt;classifier&gt;      *       * If artifactUri does not match the Syntax the local file that corresponds to the path is returned      *       * @param artifactUri Maven artifact URI      * @return resolved URI      */
specifier|public
name|URI
name|resolve
parameter_list|(
name|URI
name|artifactUri
parameter_list|)
block|{
for|for
control|(
name|File
name|bundleDir
range|:
name|mavenRepos
control|)
block|{
name|File
name|file
init|=
name|findFile
argument_list|(
name|bundleDir
argument_list|,
name|artifactUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|file
operator|.
name|toURI
argument_list|()
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not resolve "
operator|+
name|artifactUri
argument_list|)
throw|;
block|}
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|URI
name|mvnUri
parameter_list|)
block|{
try|try
block|{
name|String
name|path
init|=
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|mvnUri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|File
name|theFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|theFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|theFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|theFile
return|;
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

