begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|BootstrapLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|Framework
import|;
end_import

begin_class
specifier|public
class|class
name|KarafActivatorManager
block|{
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_ACTIVATOR
init|=
literal|"Karaf-Activator"
decl_stmt|;
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BundleActivator
argument_list|>
name|karafActivators
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleActivator
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|private
specifier|final
name|Framework
name|framework
decl_stmt|;
specifier|public
name|KarafActivatorManager
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|Framework
name|framework
parameter_list|)
block|{
name|this
operator|.
name|classLoader
operator|=
name|classLoader
expr_stmt|;
name|this
operator|.
name|framework
operator|=
name|framework
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|addHandler
argument_list|(
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|startKarafActivators
parameter_list|()
throws|throws
name|IOException
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|urls
init|=
name|classLoader
operator|.
name|getResources
argument_list|(
literal|"META-INF/MANIFEST.MF"
argument_list|)
decl_stmt|;
while|while
condition|(
name|urls
operator|!=
literal|null
operator|&&
name|urls
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|url
init|=
name|urls
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|className
init|=
literal|null
decl_stmt|;
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
decl_stmt|;
try|try
block|{
name|Manifest
name|mf
init|=
operator|new
name|Manifest
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|className
operator|=
name|mf
operator|.
name|getMainAttributes
argument_list|()
operator|.
name|getValue
argument_list|(
name|KARAF_ACTIVATOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|BundleActivator
name|activator
init|=
operator|(
name|BundleActivator
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|activator
operator|.
name|start
argument_list|(
name|framework
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|karafActivators
operator|.
name|add
argument_list|(
name|activator
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error starting karaf activator "
operator|+
name|className
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Error starting karaf activator "
operator|+
name|className
operator|+
literal|" from url "
operator|+
name|url
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
block|}
name|void
name|stopKarafActivators
parameter_list|()
block|{
for|for
control|(
name|BundleActivator
name|activator
range|:
name|karafActivators
control|)
block|{
try|try
block|{
name|activator
operator|.
name|stop
argument_list|(
name|framework
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Error stopping karaf activator "
operator|+
name|activator
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

