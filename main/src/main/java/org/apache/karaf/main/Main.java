begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|BootstrapLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|PropertiesHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|Framework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|FrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
import|;
end_import

begin_comment
comment|/**  *<p>  * This class is the default way to instantiate and execute the framework. It is  * not intended to be the only way to instantiate and execute the framework;  * rather, it is one example of how to do so. When embedding the framework in a  * host application, this class can serve as a simple guide of how to do so. It  * may even be worthwhile to reuse some of its property handling capabilities.  * This class is completely static and is only intended to start a single  * instance of the framework.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
comment|/** 	 * The default name used for the system properties file. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM_PROPERTIES_FILE_NAME
init|=
literal|"system.properties"
decl_stmt|;
comment|/** 	 * The default name used for the configuration properties file. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
comment|/** 	 * The default name used for the startup properties file. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|STARTUP_PROPERTIES_FILE_NAME
init|=
literal|"startup.properties"
decl_stmt|;
comment|/** 	 * The property name prefix for the launcher's auto-install property. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_AUTO_INSTALL
init|=
literal|"karaf.auto.install"
decl_stmt|;
comment|/** 	 * The property for auto-discovering the bundles 	 */
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_AUTO_START
init|=
literal|"karaf.auto.start"
decl_stmt|;
comment|/** 	 * The system property for specifying the Karaf home directory. The home 	 * directory hold the binary install of Karaf. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|PROP_KARAF_HOME
init|=
literal|"karaf.home"
decl_stmt|;
comment|/** 	 * The environment variable for specifying the Karaf home directory. The 	 * home directory hold the binary install of Karaf. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|ENV_KARAF_HOME
init|=
literal|"KARAF_HOME"
decl_stmt|;
comment|/** 	 * The system property for specifying the Karaf base directory. The base 	 * directory holds the configuration and data for a Karaf instance. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|PROP_KARAF_BASE
init|=
literal|"karaf.base"
decl_stmt|;
comment|/** 	 * The environment variable for specifying the Karaf base directory. The 	 * base directory holds the configuration and data for a Karaf instance. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|ENV_KARAF_BASE
init|=
literal|"KARAF_BASE"
decl_stmt|;
comment|/** 	 * The system property for specifying the Karaf data directory. The data 	 * directory holds the bundles data and cache for a Karaf instance. 	 */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_KARAF_DATA
init|=
literal|"karaf.data"
decl_stmt|;
comment|/** 	 * The system property for hosting the current Karaf version. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|PROP_KARAF_VERSION
init|=
literal|"karaf.version"
decl_stmt|;
comment|/** 	 * The environment variable for specifying the Karaf data directory. The 	 * data directory holds the bundles data and cache for a Karaf instance. 	 */
specifier|public
specifier|static
specifier|final
name|String
name|ENV_KARAF_DATA
init|=
literal|"KARAF_DATA"
decl_stmt|;
comment|/** 	 * The system property for specifying the Karaf data directory. The data 	 * directory holds the bundles data and cache for a Karaf instance. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|PROP_KARAF_INSTANCES
init|=
literal|"karaf.instances"
decl_stmt|;
comment|/** 	 * The system property for specifying the Karaf data directory. The data 	 * directory holds the bundles data and cache for a Karaf instance. 	 */
specifier|private
specifier|static
specifier|final
name|String
name|ENV_KARAF_INSTANCES
init|=
literal|"KARAF_INSTANCES"
decl_stmt|;
comment|/** 	 * Config property which identifies directories which contain bundles to be 	 * loaded by SMX 	 */
specifier|private
specifier|static
specifier|final
name|String
name|BUNDLE_LOCATIONS
init|=
literal|"bundle.locations"
decl_stmt|;
comment|/** 	 * Config property that indicates we want to convert bundles locations to 	 * maven style urls 	 */
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_CONVERT_TO_MAVEN_URL
init|=
literal|"karaf.maven.convert"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_REPO
init|=
literal|"karaf.default.repository"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_FRAMEWORK
init|=
literal|"karaf.framework"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_FRAMEWORK_FACTORY
init|=
literal|"karaf.framework.factory"
decl_stmt|;
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|File
name|karafHome
decl_stmt|;
specifier|private
name|File
name|karafBase
decl_stmt|;
specifier|private
name|File
name|karafData
decl_stmt|;
specifier|private
name|File
name|karafInstances
decl_stmt|;
specifier|private
name|Properties
name|configProps
init|=
literal|null
decl_stmt|;
name|Framework
name|framework
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|args
decl_stmt|;
specifier|private
name|LifecycleManager
name|lifecycleManager
decl_stmt|;
specifier|public
name|Main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|LifecycleManager
name|launch
parameter_list|()
throws|throws
name|Exception
block|{
name|karafHome
operator|=
name|Utils
operator|.
name|getKarafHome
argument_list|(
name|Main
operator|.
name|class
argument_list|,
name|Main
operator|.
name|PROP_KARAF_HOME
argument_list|,
name|Main
operator|.
name|ENV_KARAF_HOME
argument_list|)
expr_stmt|;
name|karafBase
operator|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_BASE
argument_list|,
name|Main
operator|.
name|ENV_KARAF_BASE
argument_list|,
name|karafHome
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|karafData
operator|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_DATA
argument_list|,
name|Main
operator|.
name|ENV_KARAF_DATA
argument_list|,
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"karaf.restart.clean"
argument_list|)
condition|)
block|{
name|Utils
operator|.
name|deleteDirectory
argument_list|(
name|karafData
argument_list|)
expr_stmt|;
block|}
name|karafInstances
operator|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_INSTANCES
argument_list|,
name|Main
operator|.
name|ENV_KARAF_INSTANCES
argument_list|,
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
literal|"instances"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Package
name|p
init|=
name|Package
operator|.
name|getPackage
argument_list|(
literal|"org.apache.karaf.main"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getImplementationVersion
argument_list|()
operator|!=
literal|null
condition|)
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_VERSION
argument_list|,
name|p
operator|.
name|getImplementationVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_HOME
argument_list|,
name|karafHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_BASE
argument_list|,
name|karafBase
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_DATA
argument_list|,
name|karafData
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_INSTANCES
argument_list|,
name|karafInstances
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|etcFolder
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|etcFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"etc folder not found: "
operator|+
name|etcFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|Properties
name|sysProps
init|=
name|PropertiesHelper
operator|.
name|loadPropertiesFile
argument_list|(
name|etcFolder
argument_list|,
name|SYSTEM_PROPERTIES_FILE_NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PropertiesHelper
operator|.
name|updateSystemProperties
argument_list|(
name|sysProps
argument_list|)
expr_stmt|;
name|updateInstancePid
argument_list|()
expr_stmt|;
name|configProps
operator|=
name|PropertiesHelper
operator|.
name|loadPropertiesFile
argument_list|(
name|etcFolder
argument_list|,
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PropertiesHelper
operator|.
name|substituteVariables
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
name|BootstrapLogManager
operator|.
name|setProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|addHandler
argument_list|(
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
name|PropertiesHelper
operator|.
name|copySystemProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
name|createClassLoader
argument_list|(
name|configProps
argument_list|)
decl_stmt|;
name|processSecurityProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
if|if
condition|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_STORAGE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|File
name|storage
init|=
operator|new
name|File
argument_list|(
name|karafData
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"cache"
argument_list|)
decl_stmt|;
try|try
block|{
name|storage
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|configProps
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_STORAGE
argument_list|,
name|storage
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Start up the OSGI framework
name|String
name|factoryClass
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|KARAF_FRAMEWORK_FACTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|factoryClass
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/services/"
operator|+
name|FrameworkFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|factoryClass
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FrameworkFactory
name|factory
init|=
operator|(
name|FrameworkFactory
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|factoryClass
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|framework
operator|=
name|factory
operator|.
name|newFramework
argument_list|(
operator|new
name|StringMap
argument_list|(
name|configProps
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|framework
operator|.
name|init
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
init|=
name|getBundleDirs
argument_list|(
name|configProps
argument_list|)
decl_stmt|;
name|Properties
name|startupProps
init|=
name|PropertiesHelper
operator|.
name|loadPropertiesFile
argument_list|(
name|etcFolder
argument_list|,
name|STARTUP_PROPERTIES_FILE_NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Main
operator|.
name|processConfigurationProperties
argument_list|(
name|configProps
argument_list|,
name|startupProps
argument_list|,
name|bundleDirs
argument_list|)
expr_stmt|;
name|processAutoProperties
argument_list|(
name|framework
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|framework
operator|.
name|start
argument_list|()
expr_stmt|;
name|lifecycleManager
operator|=
operator|new
name|LifecycleManager
argument_list|(
name|configProps
argument_list|,
name|framework
argument_list|)
expr_stmt|;
name|lifecycleManager
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|lifecycleManager
return|;
block|}
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|getBundleDirs
parameter_list|(
name|Properties
name|configProps
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|defaultRepo
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|DEFAULT_REPO
argument_list|,
literal|"system"
argument_list|)
decl_stmt|;
if|if
condition|(
name|karafBase
operator|.
name|equals
argument_list|(
name|karafHome
argument_list|)
condition|)
block|{
name|File
name|systemRepo
init|=
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
name|defaultRepo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|systemRepo
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"system repo not found: "
operator|+
name|systemRepo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|bundleDirs
operator|.
name|add
argument_list|(
name|systemRepo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|baseSystemRepo
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|defaultRepo
argument_list|)
decl_stmt|;
name|File
name|homeSystemRepo
init|=
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
name|defaultRepo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseSystemRepo
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|homeSystemRepo
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"system repos not found: "
operator|+
name|baseSystemRepo
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" "
operator|+
name|homeSystemRepo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|bundleDirs
operator|.
name|add
argument_list|(
name|baseSystemRepo
argument_list|)
expr_stmt|;
name|bundleDirs
operator|.
name|add
argument_list|(
name|homeSystemRepo
argument_list|)
expr_stmt|;
block|}
name|String
name|locations
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|BUNDLE_LOCATIONS
argument_list|)
decl_stmt|;
name|addLocationsToBundleDirs
argument_list|(
name|bundleDirs
argument_list|,
name|locations
argument_list|)
expr_stmt|;
return|return
name|bundleDirs
return|;
block|}
specifier|private
name|void
name|addLocationsToBundleDirs
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|,
name|String
name|locations
parameter_list|)
block|{
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|locations
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|PropertiesHelper
operator|.
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|bundleDirs
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle location "
operator|+
name|location
operator|+
literal|" does not exist or is not a directory."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
block|}
comment|/** 	 * Process properties to customize default felix behavior 	 *  	 * @param configProps 	 *            properties loaded from etc/config.properties 	 * @param startupProps 	 *            properties loaded from etc/startup.properties 	 * @param bundleDirs 	 *            location to load bundles from (usually system/) 	 */
specifier|private
specifier|static
name|void
name|processConfigurationProperties
parameter_list|(
name|Properties
name|configProps
parameter_list|,
name|Properties
name|startupProps
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|bundleDirs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|hasErrors
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|remove
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|jars
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// We should start all the bundles in the system dir.
for|for
control|(
name|File
name|bundleDir
range|:
name|bundleDirs
control|)
block|{
name|findJars
argument_list|(
name|bundleDir
argument_list|,
name|jars
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|jar
range|:
name|jars
control|)
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|jar
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|jar
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|configProps
operator|.
name|setProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|STARTUP_PROPERTIES_FILE_NAME
operator|.
name|equals
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|remove
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
expr_stmt|;
comment|// We should start the bundles in the startup.properties file.
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
name|levels
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|startupProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|File
name|file
init|=
name|findFile
argument_list|(
name|bundleDirs
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|Integer
name|level
decl_stmt|;
try|try
block|{
name|level
operator|=
operator|new
name|Integer
argument_list|(
name|startupProps
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" (run level must be an integer)"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StringBuffer
name|sb
init|=
name|levels
operator|.
name|get
argument_list|(
name|level
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|levels
operator|.
name|put
argument_list|(
name|level
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"|"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle listed in "
operator|+
name|STARTUP_PROPERTIES_FILE_NAME
operator|+
literal|" configuration not found: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|hasErrors
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
name|entry
range|:
name|levels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|PROPERTY_AUTO_START
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasErrors
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Aborting due to missing startup bundles"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 *<p> 	 * This method performs the main task of constructing an framework instance 	 * and starting its execution. The following functions are performed when 	 * invoked: 	 *</p> 	 *<ol> 	 *<li><i><b>Read the system properties file.<b></i> This is a file 	 * containing properties to be pushed into<tt>System.setProperty()</tt> 	 * before starting the framework. This mechanism is mainly shorthand for 	 * people starting the framework from the command line to avoid having to 	 * specify a bunch of<tt>-D</tt> system property definitions. The only 	 * properties defined in this file that will impact the framework's behavior 	 * are the those concerning setting HTTP proxies, such as 	 *<tt>http.proxyHost</tt>,<tt>http.proxyPort</tt>, and 	 *<tt>http.proxyAuth</tt>.</li> 	 *<li><i><b>Perform system property variable substitution on system 	 * properties.</b></i> Any system properties in the system property file 	 * whose value adheres to<tt>${&lt;system-prop-name&gt;}</tt> syntax will 	 * have their value substituted with the appropriate system property value.</li> 	 *<li><i><b>Read the framework's configuration property file.</b></i> This 	 * is a file containing properties used to configure the framework instance 	 * and to pass configuration information into bundles installed into the 	 * framework instance. The configuration property file is called 	 *<tt>config.properties</tt> by default and is located in the 	 *<tt>conf/</tt> directory of the Felix installation directory, which is 	 * the parent directory of the directory containing the<tt>felix.jar</tt> 	 * file. It is possible to use a different location for the property file by 	 * specifying the desired URL using the<tt>felix.config.properties</tt> 	 * system property; this should be set using the<tt>-D</tt> syntax when 	 * executing the JVM. Refer to the<a 	 * href="Felix.html#Felix(java.util.Map, java.util.List)"><tt>Felix</tt> 	 *</a> constructor documentation for more information on the framework 	 * configuration options.</li> 	 *<li><i><b>Perform system property variable substitution on configuration 	 * properties.</b></i> Any configuration properties whose value adheres to 	 *<tt>${&lt;system-prop-name&gt;}</tt> syntax will have their value 	 * substituted with the appropriate system property value.</li> 	 *<li><i><b>Ensure the default bundle cache has sufficient information to 	 * initialize.</b></i> The default implementation of the bundle cache 	 * requires either a profile name or a profile directory in order to start. 	 * The configuration properties are checked for at least one of the 	 *<tt>felix.cache.profile</tt> or<tt>felix.cache.profiledir</tt> 	 * properties. If neither is found, the user is asked to supply a profile 	 * name that is added to the configuration property set. See the<a 	 * href="cache/DefaultBundleCache.html"><tt>DefaultBundleCache</tt></a> 	 * documentation for more details its configuration options.</li> 	 *<li><i><b>Creates and starts a framework instance.</b></i> A case 	 * insensitive<a href="util/StringMap.html"><tt>StringMap</tt></a> is 	 * created for the configuration property file and is passed into the 	 * framework.</li> 	 *</ol> 	 *<p> 	 * It should be noted that simply starting an instance of the framework is 	 * not enough to create an interactive session with it. It is necessary to 	 * install and start bundles that provide an interactive impl; this is 	 * generally done by specifying an "auto-start" property in the framework 	 * configuration property file. If no interactive impl bundles are installed 	 * or if the configuration property file cannot be found, the framework will 	 * appear to be hung or deadlocked. This is not the case, it is executing 	 * correctly, there is just no way to interact with it. Refer to the<a 	 * href="Felix.html#Felix(java.util.Map, java.util.List)"><tt>Felix</tt> 	 *</a> constructor documentation for more information on framework 	 * configuration options. 	 *</p> 	 *  	 * @param args 	 *            An array of arguments, all of which are ignored. 	 * @throws Exception 	 *             If an error occurs. 	 **/
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|restart
init|=
literal|false
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
specifier|final
name|Main
name|main
init|=
operator|new
name|Main
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|LifecycleManager
name|manager
init|=
literal|null
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
try|try
block|{
name|manager
operator|=
name|main
operator|.
name|launch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|main
operator|.
name|lifecycleManager
operator|.
name|destroyKaraf
argument_list|()
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not create framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
name|manager
operator|.
name|awaitShutdown
argument_list|()
expr_stmt|;
name|boolean
name|stopped
init|=
name|main
operator|.
name|lifecycleManager
operator|.
name|destroyKaraf
argument_list|()
decl_stmt|;
name|restart
operator|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"karaf.restart"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stopped
condition|)
block|{
if|if
condition|(
name|restart
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Timeout waiting for framework to stop.  Restarting now."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Timeout waiting for framework to stop.  Exiting VM."
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|3
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|2
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error occured shutting down framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|restart
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|processSecurityProperties
parameter_list|(
name|Properties
name|m_configProps
parameter_list|)
block|{
name|String
name|prop
init|=
name|m_configProps
operator|.
name|getProperty
argument_list|(
literal|"org.apache.karaf.security.providers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|providers
init|=
name|prop
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|provider
range|:
name|providers
control|)
block|{
name|addProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addProvider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
try|try
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|(
name|Provider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|provider
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to register security provider: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateInstancePid
parameter_list|()
block|{
try|try
block|{
name|String
name|instanceName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
decl_stmt|;
name|String
name|pid
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|pid
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|pid
operator|=
name|pid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pid
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isRoot
init|=
name|karafHome
operator|.
name|equals
argument_list|(
name|karafBase
argument_list|)
decl_stmt|;
if|if
condition|(
name|instanceName
operator|!=
literal|null
condition|)
block|{
name|String
name|storage
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.instances"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"System property 'karaf.instances' is not set. \n"
operator|+
literal|"This property needs to be set to the full path of the instance.properties file."
argument_list|)
throw|;
block|}
name|File
name|storageFile
init|=
operator|new
name|File
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|File
name|propertiesFile
init|=
operator|new
name|File
argument_list|(
name|storageFile
argument_list|,
literal|"instance.properties"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertiesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|propertiesFile
argument_list|)
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"count"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|instanceName
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
name|pid
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|propertiesFile
argument_list|)
decl_stmt|;
name|props
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isRoot
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Instance "
operator|+
name|instanceName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|isRoot
condition|)
block|{
if|if
condition|(
operator|!
name|propertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|propertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|props
operator|.
name|setProperty
argument_list|(
literal|"count"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.name"
argument_list|,
name|instanceName
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.loc"
argument_list|,
name|karafHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.pid"
argument_list|,
name|pid
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.root"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|propertiesFile
argument_list|)
decl_stmt|;
name|props
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to update instance pid: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 *<p/> 	 * Processes the auto-install and auto-start properties from the specified 	 * configuration properties. 	 *  	 * @param context 	 *            the system bundle context 	 */
specifier|private
name|void
name|processAutoProperties
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
comment|// Check if we want to convert URLs to maven style
name|boolean
name|convertToMavenUrls
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_CONVERT_TO_MAVEN_URL
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Retrieve the Start Level service, since it will be needed
comment|// to set the start level of the installed bundles.
name|StartLevel
name|sl
init|=
operator|(
name|StartLevel
operator|)
name|context
operator|.
name|getService
argument_list|(
name|context
operator|.
name|getServiceReference
argument_list|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set the default bundle start level
name|int
name|ibsl
init|=
literal|60
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
literal|"karaf.startlevel.bundle"
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|ibsl
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{ 		}
name|sl
operator|.
name|setInitialBundleStartLevel
argument_list|(
name|ibsl
argument_list|)
expr_stmt|;
comment|// If we have a clean state, install everything
if|if
condition|(
name|framework
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundles
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// The auto-install property specifies a space-delimited list of
comment|// bundle URLs to be automatically installed into each new profile;
comment|// the start level to which the bundles are assigned is specified by
comment|// appending a ".n" to the auto-install property name, where "n" is
comment|// the desired start level for the list of bundles.
name|autoInstall
argument_list|(
name|PROPERTY_AUTO_INSTALL
argument_list|,
name|context
argument_list|,
name|sl
argument_list|,
name|convertToMavenUrls
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// The auto-start property specifies a space-delimited list of
comment|// bundle URLs to be automatically installed and started into each
comment|// new profile; the start level to which the bundles are assigned
comment|// is specified by appending a ".n" to the auto-start property name,
comment|// where "n" is the desired start level for the list of bundles.
comment|// The following code starts bundles in one pass, installing bundles
comment|// for a given level, then starting them, then moving to the next
comment|// level.
name|autoInstall
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
name|context
argument_list|,
name|sl
argument_list|,
name|convertToMavenUrls
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Bundle
argument_list|>
name|autoInstall
parameter_list|(
name|String
name|propertyPrefix
parameter_list|,
name|BundleContext
name|context
parameter_list|,
name|StartLevel
name|sl
parameter_list|,
name|boolean
name|convertToMavenUrls
parameter_list|,
name|boolean
name|start
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|autoStart
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|configProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
comment|// Ignore all keys that are not the auto-start property.
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|propertyPrefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// If the auto-start property does not have a start level,
comment|// then assume it is the default bundle start level, otherwise
comment|// parse the specified start level.
name|int
name|startLevel
init|=
name|sl
operator|.
name|getInitialBundleStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|propertyPrefix
argument_list|)
condition|)
block|{
try|try
block|{
name|startLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|key
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid property: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|autoStart
operator|.
name|put
argument_list|(
name|startLevel
argument_list|,
name|configProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|startLevel
range|:
name|autoStart
operator|.
name|keySet
argument_list|()
control|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|autoStart
operator|.
name|get
argument_list|(
name|startLevel
argument_list|)
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|PropertiesHelper
operator|.
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
index|[]
name|parts
init|=
name|convertToMavenUrlsIfNeeded
argument_list|(
name|location
argument_list|,
name|convertToMavenUrls
argument_list|)
decl_stmt|;
name|Bundle
name|b
init|=
name|context
operator|.
name|installBundle
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
operator|new
name|URL
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|sl
operator|.
name|setBundleStartLevel
argument_list|(
name|b
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error installing bundle  "
operator|+
name|location
operator|+
literal|": "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
comment|// Now loop through and start the installed bundles.
if|if
condition|(
name|start
condition|)
block|{
name|startBundles
argument_list|(
name|bundles
argument_list|)
expr_stmt|;
block|}
return|return
name|bundles
return|;
block|}
specifier|private
name|void
name|startBundles
parameter_list|(
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
parameter_list|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|bundles
control|)
block|{
try|try
block|{
name|String
name|fragmentHostHeader
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragmentHostHeader
operator|==
literal|null
operator|||
name|fragmentHostHeader
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error starting bundle "
operator|+
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|": "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
index|[]
name|convertToMavenUrlsIfNeeded
parameter_list|(
name|String
name|location
parameter_list|,
name|boolean
name|convertToMavenUrls
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|location
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertToMavenUrls
condition|)
block|{
name|String
index|[]
name|p
init|=
name|parts
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|length
operator|>=
literal|4
operator|&&
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|startsWith
argument_list|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|3
index|]
operator|+
literal|"-"
operator|+
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
condition|)
block|{
name|String
name|artifactId
init|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|3
index|]
decl_stmt|;
name|String
name|version
init|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|String
name|classifier
decl_stmt|;
name|String
name|type
decl_stmt|;
name|String
name|artifactIdVersion
init|=
name|artifactId
operator|+
literal|"-"
operator|+
name|version
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|charAt
argument_list|(
name|artifactIdVersion
operator|.
name|length
argument_list|()
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|classifier
operator|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
name|artifactIdVersion
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classifier
operator|=
literal|null
expr_stmt|;
block|}
name|type
operator|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mvn:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|p
operator|.
name|length
operator|-
literal|3
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|p
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|classifier
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
block|}
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|parts
index|[
literal|0
index|]
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
specifier|private
name|ClassLoader
name|createClassLoader
parameter_list|(
name|Properties
name|configProps
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|framework
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|KARAF_FRAMEWORK
argument_list|)
decl_stmt|;
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|KARAF_FRAMEWORK
operator|+
literal|" must be set in the etc/"
operator|+
name|CONFIG_PROPERTIES_FILE_NAME
operator|+
literal|" configuration file"
argument_list|)
throw|;
block|}
name|String
name|bundle
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|KARAF_FRAMEWORK
operator|+
literal|"."
operator|+
name|framework
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|KARAF_FRAMEWORK
operator|+
literal|"."
operator|+
name|framework
operator|+
literal|" must be set in the etc/"
operator|+
name|CONFIG_PROPERTIES_FILE_NAME
operator|+
literal|" configuration file"
argument_list|)
throw|;
block|}
name|File
name|bundleFile
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundleFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|bundleFile
operator|=
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bundleFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|bundleFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
name|bundleFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|File
index|[]
name|libs
init|=
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
literal|"lib"
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|libs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|libs
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|f
operator|.
name|canRead
argument_list|()
operator|&&
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|f
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|File
name|bundleDir
range|:
name|bundleDirs
control|)
block|{
name|File
name|file
init|=
name|findFile
argument_list|(
name|bundleDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
name|fromMaven
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|File
name|theFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|theFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|theFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|theFile
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
specifier|final
name|Pattern
name|mvnPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"mvn:([^/ ]+)/([^/ ]+)/([^/ ]*)(/([^/ ]+)(/([^/ ]+))?)?"
argument_list|)
decl_stmt|;
comment|/** 	 * Returns a path for an srtifact. Input: path (no ':') returns path Input: 	 * mvn:<groupId>/<artifactId>/<version>/<type>/<classifier> converts to 	 * default repo location path // * Input: 	 *<groupId>:<artifactId>:<version>:<type>:<classifier> converts to default 	 * repo location path type and classifier are optional. 	 *  	 *  	 * @param name 	 *            input artifact info 	 * @return path as supplied or a default maven repo path 	 */
specifier|static
name|String
name|fromMaven
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|mvnPattern
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|name
return|;
block|}
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'.'
condition|)
block|{
name|b
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// groupId
name|String
name|artifactId
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|extension
init|=
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|String
name|classifier
init|=
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// artifactId
name|b
operator|.
name|append
argument_list|(
name|version
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
comment|// version
name|b
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|present
argument_list|(
name|classifier
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|present
argument_list|(
name|extension
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|extension
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|b
operator|.
name|append
argument_list|(
literal|".jar"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|present
parameter_list|(
name|String
name|part
parameter_list|)
block|{
return|return
name|part
operator|!=
literal|null
operator|&&
operator|!
name|part
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|findJars
parameter_list|(
name|File
name|dir
parameter_list|,
name|ArrayList
argument_list|<
name|File
argument_list|>
name|jars
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findJars
argument_list|(
name|file
argument_list|,
name|jars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|file
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|jars
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * Retrieve the arguments used when launching Karaf 	 *  	 * @return the arguments of the main karaf process 	 */
specifier|public
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
specifier|public
name|Framework
name|getFramework
parameter_list|()
block|{
return|return
name|framework
return|;
block|}
specifier|public
specifier|static
name|void
name|shutdown
parameter_list|()
throws|throws
name|IOException
throws|,
name|FileNotFoundException
throws|,
name|Exception
throws|,
name|UnknownHostException
block|{
name|File
name|karafHome
init|=
name|Utils
operator|.
name|getKarafHome
argument_list|(
name|Main
operator|.
name|class
argument_list|,
name|Main
operator|.
name|PROP_KARAF_HOME
argument_list|,
name|Main
operator|.
name|ENV_KARAF_HOME
argument_list|)
decl_stmt|;
name|File
name|karafBase
init|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|PROP_KARAF_BASE
argument_list|,
name|ENV_KARAF_BASE
argument_list|,
name|karafHome
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|karafData
init|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|PROP_KARAF_DATA
argument_list|,
name|ENV_KARAF_DATA
argument_list|,
operator|new
name|File
argument_list|(
name|karafBase
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|Main
operator|.
name|PROP_KARAF_HOME
argument_list|,
name|karafHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|Main
operator|.
name|PROP_KARAF_BASE
argument_list|,
name|karafBase
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|Main
operator|.
name|PROP_KARAF_DATA
argument_list|,
name|karafData
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|etcFolder
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|etcFolder
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"etc folder not found: "
operator|+
name|etcFolder
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
comment|// Load system properties.
name|Properties
name|sysProps
init|=
name|PropertiesHelper
operator|.
name|loadPropertiesFile
argument_list|(
name|etcFolder
argument_list|,
name|Main
operator|.
name|SYSTEM_PROPERTIES_FILE_NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PropertiesHelper
operator|.
name|updateSystemProperties
argument_list|(
name|sysProps
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
name|PropertiesHelper
operator|.
name|loadPropertiesFile
argument_list|(
name|etcFolder
argument_list|,
name|Main
operator|.
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PropertiesHelper
operator|.
name|copySystemProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|PropertiesHelper
operator|.
name|substituteVariables
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|LifecycleManager
operator|.
name|shutDown
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

