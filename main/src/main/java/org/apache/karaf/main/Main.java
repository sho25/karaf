begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|RuntimeMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|Framework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|FrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
import|;
end_import

begin_comment
comment|/**  *<p>  * This class is the default way to instantiate and execute the framework. It is not  * intended to be the only way to instantiate and execute the framework; rather, it is  * one example of how to do so. When embedding the framework in a host application,  * this class can serve as a simple guide of how to do so. It may even be  * worthwhile to reuse some of its property handling capabilities. This class  * is completely static and is only intended to start a single instance of  * the framework.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
comment|/**      * The default name used for the system properties file.      */
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_PROPERTIES_FILE_NAME
init|=
literal|"system.properties"
decl_stmt|;
comment|/**      * The default name used for the configuration properties file.      */
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
comment|/**      * The default name used for the startup properties file.      */
specifier|public
specifier|static
specifier|final
name|String
name|STARTUP_PROPERTIES_FILE_NAME
init|=
literal|"startup.properties"
decl_stmt|;
comment|/**      * The property name prefix for the launcher's auto-install property.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_AUTO_INSTALL
init|=
literal|"karaf.auto.install"
decl_stmt|;
comment|/**      * The property for auto-discovering the bundles      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_AUTO_START
init|=
literal|"karaf.auto.start"
decl_stmt|;
comment|/**      * The system property for specifying the Karaf home directory.  The home directory      * hold the binary install of Karaf.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_KARAF_HOME
init|=
literal|"karaf.home"
decl_stmt|;
comment|/**      * The environment variable for specifying the Karaf home directory.  The home directory      * hold the binary install of Karaf.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENV_KARAF_HOME
init|=
literal|"KARAF_HOME"
decl_stmt|;
comment|/**      * The system property for specifying the Karaf base directory.  The base directory      * holds the configuration and data for a Karaf instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_KARAF_BASE
init|=
literal|"karaf.base"
decl_stmt|;
comment|/**      * The environment variable for specifying the Karaf base directory.  The base directory      * holds the configuration and data for a Karaf instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENV_KARAF_BASE
init|=
literal|"KARAF_BASE"
decl_stmt|;
comment|/**      * The system property for specifying the Karaf data directory. The data directory      * holds the bundles data and cache for a Karaf instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_KARAF_DATA
init|=
literal|"karaf.data"
decl_stmt|;
comment|/**      * The environment variable for specifying the Karaf data directory. The data directory      * holds the bundles data and cache for a Karaf instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENV_KARAF_DATA
init|=
literal|"KARAF_DATA"
decl_stmt|;
comment|/**      * The system property for specifying the Karaf data directory. The data directory      * holds the bundles data and cache for a Karaf instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_KARAF_INSTANCES
init|=
literal|"karaf.instances"
decl_stmt|;
comment|/**      * The system property for specifying the Karaf data directory. The data directory      * holds the bundles data and cache for a Karaf instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENV_KARAF_INSTANCES
init|=
literal|"KARAF_INSTANCES"
decl_stmt|;
comment|/**      * Config property which identifies directories which contain bundles to be loaded by SMX      */
specifier|public
specifier|static
specifier|final
name|String
name|BUNDLE_LOCATIONS
init|=
literal|"bundle.locations"
decl_stmt|;
comment|/**      * Config property that indicates we want to convert bundles locations to maven style urls      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_CONVERT_TO_MAVEN_URL
init|=
literal|"karaf.maven.convert"
decl_stmt|;
comment|/**      * If a lock should be used before starting the runtime      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_USE_LOCK
init|=
literal|"karaf.lock"
decl_stmt|;
comment|/**      * The lock implementation      */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_CLASS
init|=
literal|"karaf.lock.class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_DELAY
init|=
literal|"karaf.lock.delay"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_LEVEL
init|=
literal|"karaf.lock.level"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_REPO
init|=
literal|"karaf.default.repository"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_FRAMEWORK
init|=
literal|"karaf.framework"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT
init|=
literal|"karaf.shutdown.port"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_HOST
init|=
literal|"karaf.shutdown.host"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT_FILE
init|=
literal|"karaf.shutdown.port.file"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_COMMAND
init|=
literal|"karaf.shutdown.command"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PID_FILE
init|=
literal|"karaf.shutdown.pid.file"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SHUTDOWN_COMMAND
init|=
literal|"SHUTDOWN"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_CLASS_DEFAULT
init|=
name|SimpleFileLock
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INCLUDES_PROPERTY
init|=
literal|"${includes}"
decl_stmt|;
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|File
name|karafHome
decl_stmt|;
specifier|private
name|File
name|karafBase
decl_stmt|;
specifier|private
name|File
name|karafData
decl_stmt|;
specifier|private
name|File
name|karafInstances
decl_stmt|;
specifier|private
name|Properties
name|configProps
init|=
literal|null
decl_stmt|;
specifier|private
name|Framework
name|framework
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|args
decl_stmt|;
specifier|private
name|int
name|exitCode
decl_stmt|;
specifier|private
name|Lock
name|lock
decl_stmt|;
specifier|private
name|int
name|defaultStartLevel
init|=
literal|100
decl_stmt|;
specifier|private
name|int
name|lockStartLevel
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|lockDelay
init|=
literal|1000
decl_stmt|;
specifier|private
name|boolean
name|exiting
init|=
literal|false
decl_stmt|;
specifier|public
name|Main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|void
name|launch
parameter_list|()
throws|throws
name|Exception
block|{
name|karafHome
operator|=
name|Utils
operator|.
name|getKarafHome
argument_list|()
expr_stmt|;
name|karafBase
operator|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_BASE
argument_list|,
name|Main
operator|.
name|ENV_KARAF_BASE
argument_list|,
name|karafHome
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|karafData
operator|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_DATA
argument_list|,
name|Main
operator|.
name|ENV_KARAF_DATA
argument_list|,
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|karafInstances
operator|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_INSTANCES
argument_list|,
name|Main
operator|.
name|ENV_KARAF_INSTANCES
argument_list|,
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
literal|"instances"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//System.out.println("Karaf Home: "+main.karafHome.getPath());
comment|//System.out.println("Karaf Base: "+main.karafBase.getPath());
comment|//System.out.println("Karaf Data: "+main.karafData.getPath());
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_HOME
argument_list|,
name|karafHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_BASE
argument_list|,
name|karafBase
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_DATA
argument_list|,
name|karafData
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_KARAF_INSTANCES
argument_list|,
name|karafInstances
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Load system properties.
name|loadSystemProperties
argument_list|(
name|karafBase
argument_list|)
expr_stmt|;
name|updateInstancePid
argument_list|()
expr_stmt|;
comment|// Read configuration properties.
name|configProps
operator|=
name|loadConfigProperties
argument_list|()
expr_stmt|;
name|BootstrapLogManager
operator|.
name|setProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|addHandler
argument_list|(
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
comment|// Copy framework properties from the system properties.
name|Main
operator|.
name|copySystemProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
name|ClassLoader
name|classLoader
init|=
name|createClassLoader
argument_list|(
name|configProps
argument_list|)
decl_stmt|;
name|processSecurityProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
if|if
condition|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_STORAGE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|File
name|storage
init|=
operator|new
name|File
argument_list|(
name|karafData
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"cache"
argument_list|)
decl_stmt|;
try|try
block|{
name|storage
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|configProps
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_STORAGE
argument_list|,
name|storage
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|defaultStartLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_BEGINNING_STARTLEVEL
argument_list|)
argument_list|)
expr_stmt|;
name|lockStartLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_LEVEL
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lockStartLevel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lockDelay
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_DELAY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lockDelay
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_BEGINNING_STARTLEVEL
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|lockStartLevel
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start up the OSGI framework
name|InputStream
name|is
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/services/"
operator|+
name|FrameworkFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|factoryClass
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|FrameworkFactory
name|factory
init|=
operator|(
name|FrameworkFactory
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|factoryClass
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|framework
operator|=
name|factory
operator|.
name|newFramework
argument_list|(
operator|new
name|StringMap
argument_list|(
name|configProps
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|framework
operator|.
name|start
argument_list|()
expr_stmt|;
name|processAutoProperties
argument_list|(
name|framework
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start lock monitor
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|lock
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|(
name|boolean
name|await
parameter_list|)
throws|throws
name|Exception
block|{
name|destroy
argument_list|(
name|await
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|destroy
parameter_list|(
name|boolean
name|await
parameter_list|,
name|int
name|timeout
parameter_list|,
name|ShutdownCallback
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|await
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|FrameworkEvent
name|event
decl_stmt|;
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|waitingForShutdown
argument_list|()
expr_stmt|;
name|framework
operator|.
name|stop
argument_list|()
expr_stmt|;
do|do
block|{
name|callback
operator|.
name|waitingForShutdown
argument_list|()
expr_stmt|;
name|event
operator|=
name|framework
operator|.
name|waitForStop
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|FrameworkEvent
operator|.
name|WAIT_TIMEDOUT
condition|)
do|;
break|break;
block|}
else|else
block|{
name|event
operator|=
name|framework
operator|.
name|waitForStop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|!=
name|FrameworkEvent
operator|.
name|STOPPED_UPDATE
condition|)
block|{
break|break;
block|}
block|}
block|}
name|exiting
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|framework
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
name|framework
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * This method performs the main task of constructing an framework instance      * and starting its execution. The following functions are performed      * when invoked:      *</p>      *<ol>      *<li><i><b>Read the system properties file.<b></i> This is a file      *       containing properties to be pushed into<tt>System.setProperty()</tt>      *       before starting the framework. This mechanism is mainly shorthand      *       for people starting the framework from the command line to avoid having      *       to specify a bunch of<tt>-D</tt> system property definitions.      *       The only properties defined in this file that will impact the framework's      *       behavior are the those concerning setting HTTP proxies, such as      *<tt>http.proxyHost</tt>,<tt>http.proxyPort</tt>, and      *<tt>http.proxyAuth</tt>.      *</li>      *<li><i><b>Perform system property variable substitution on system      *       properties.</b></i> Any system properties in the system property      *       file whose value adheres to<tt>${&lt;system-prop-name&gt;}</tt>      *       syntax will have their value substituted with the appropriate      *       system property value.      *</li>      *<li><i><b>Read the framework's configuration property file.</b></i> This is      *       a file containing properties used to configure the framework      *       instance and to pass configuration information into      *       bundles installed into the framework instance. The configuration      *       property file is called<tt>config.properties</tt> by default      *       and is located in the<tt>conf/</tt> directory of the Felix      *       installation directory, which is the parent directory of the      *       directory containing the<tt>felix.jar</tt> file. It is possible      *       to use a different location for the property file by specifying      *       the desired URL using the<tt>felix.config.properties</tt>      *       system property; this should be set using the<tt>-D</tt> syntax      *       when executing the JVM. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more      *       information on the framework configuration options.      *</li>      *<li><i><b>Perform system property variable substitution on configuration      *       properties.</b></i> Any configuration properties whose value adheres to      *<tt>${&lt;system-prop-name&gt;}</tt> syntax will have their value      *       substituted with the appropriate system property value.      *</li>      *<li><i><b>Ensure the default bundle cache has sufficient information to      *       initialize.</b></i> The default implementation of the bundle cache      *       requires either a profile name or a profile directory in order to      *       start. The configuration properties are checked for at least one      *       of the<tt>felix.cache.profile</tt> or<tt>felix.cache.profiledir</tt>      *       properties. If neither is found, the user is asked to supply a profile      *       name that is added to the configuration property set. See the      *<a href="cache/DefaultBundleCache.html"><tt>DefaultBundleCache</tt></a>      *       documentation for more details its configuration options.      *</li>      *<li><i><b>Creates and starts a framework instance.</b></i> A      *       case insensitive      *<a href="util/StringMap.html"><tt>StringMap</tt></a>      *       is created for the configuration property file and is passed      *       into the framework.      *</li>      *</ol>      *<p>      * It should be noted that simply starting an instance of the framework is not enough      * to create an interactive session with it. It is necessary to install      * and start bundles that provide an interactive impl; this is generally      * done by specifying an "auto-start" property in the framework configuration      * property file. If no interactive impl bundles are installed or if      * the configuration property file cannot be found, the framework will appear to      * be hung or deadlocked. This is not the case, it is executing correctly,      * there is just no way to interact with it. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more information on      * framework configuration options.      *</p>      * @param args An array of arguments, all of which are ignored.      * @throws Exception If an error occurs.      **/
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|restart
init|=
literal|false
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"karaf.restart.clean"
argument_list|)
condition|)
block|{
name|File
name|karafHome
init|=
name|Utils
operator|.
name|getKarafHome
argument_list|()
decl_stmt|;
name|File
name|karafBase
init|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_BASE
argument_list|,
name|Main
operator|.
name|ENV_KARAF_BASE
argument_list|,
name|karafHome
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|karafData
init|=
name|Utils
operator|.
name|getKarafDirectory
argument_list|(
name|Main
operator|.
name|PROP_KARAF_DATA
argument_list|,
name|Main
operator|.
name|ENV_KARAF_DATA
argument_list|,
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"data"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|deleteDirectory
argument_list|(
name|karafData
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Main
name|main
init|=
operator|new
name|Main
argument_list|(
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|main
operator|.
name|launch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|main
operator|.
name|setExitCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not create framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|main
operator|.
name|destroy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|restart
operator|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"karaf.restart"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|main
operator|.
name|setExitCode
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error occured shutting down framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|restart
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|main
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|processSecurityProperties
parameter_list|(
name|Properties
name|m_configProps
parameter_list|)
block|{
name|String
name|prop
init|=
name|m_configProps
operator|.
name|getProperty
argument_list|(
literal|"org.apache.karaf.security.providers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|providers
init|=
name|prop
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|provider
range|:
name|providers
control|)
block|{
name|addProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addProvider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
try|try
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|(
name|Provider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|provider
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to register security provider: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateInstancePid
parameter_list|()
block|{
try|try
block|{
name|String
name|instanceName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.name"
argument_list|)
decl_stmt|;
name|String
name|pid
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|pid
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|pid
operator|=
name|pid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pid
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isRoot
init|=
name|karafHome
operator|.
name|equals
argument_list|(
name|karafBase
argument_list|)
decl_stmt|;
if|if
condition|(
name|instanceName
operator|!=
literal|null
condition|)
block|{
name|String
name|storage
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.instances"
argument_list|)
decl_stmt|;
if|if
condition|(
name|storage
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"System property 'karaf.instances' is not set. \n"
operator|+
literal|"This property needs to be set to the full path of the instance.properties file."
argument_list|)
throw|;
block|}
name|File
name|storageFile
init|=
operator|new
name|File
argument_list|(
name|storage
argument_list|)
decl_stmt|;
name|File
name|propertiesFile
init|=
operator|new
name|File
argument_list|(
name|storageFile
argument_list|,
literal|"instance.properties"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertiesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|propertiesFile
argument_list|)
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
literal|"count"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|instanceName
argument_list|)
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
literal|"item."
operator|+
name|i
operator|+
literal|".pid"
argument_list|,
name|pid
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|propertiesFile
argument_list|)
decl_stmt|;
name|props
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isRoot
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Instance "
operator|+
name|instanceName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|isRoot
condition|)
block|{
if|if
condition|(
operator|!
name|propertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|propertiesFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|props
operator|.
name|setProperty
argument_list|(
literal|"count"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.name"
argument_list|,
name|instanceName
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.loc"
argument_list|,
name|karafHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.pid"
argument_list|,
name|pid
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"item.0.root"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|propertiesFile
argument_list|)
decl_stmt|;
name|props
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to update instance pid: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p/>      * Processes the auto-install and auto-start properties from the      * specified configuration properties.      *      * @param context the system bundle context      */
specifier|private
name|void
name|processAutoProperties
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
comment|// Check if we want to convert URLs to maven style
name|boolean
name|convertToMavenUrls
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_CONVERT_TO_MAVEN_URL
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Retrieve the Start Level service, since it will be needed
comment|// to set the start level of the installed bundles.
name|StartLevel
name|sl
init|=
operator|(
name|StartLevel
operator|)
name|context
operator|.
name|getService
argument_list|(
name|context
operator|.
name|getServiceReference
argument_list|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Set the default bundle start level
name|int
name|ibsl
init|=
literal|60
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
literal|"karaf.startlevel.bundle"
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|ibsl
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{         }
name|sl
operator|.
name|setInitialBundleStartLevel
argument_list|(
name|ibsl
argument_list|)
expr_stmt|;
comment|// The auto-install property specifies a space-delimited list of
comment|// bundle URLs to be automatically installed into each new profile;
comment|// the start level to which the bundles are assigned is specified by
comment|// appending a ".n" to the auto-install property name, where "n" is
comment|// the desired start level for the list of bundles.
name|autoInstall
argument_list|(
name|PROPERTY_AUTO_INSTALL
argument_list|,
name|context
argument_list|,
name|sl
argument_list|,
name|convertToMavenUrls
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// The auto-start property specifies a space-delimited list of
comment|// bundle URLs to be automatically installed and started into each
comment|// new profile; the start level to which the bundles are assigned
comment|// is specified by appending a ".n" to the auto-start property name,
comment|// where "n" is the desired start level for the list of bundles.
comment|// The following code starts bundles in one pass, installing bundles
comment|// for a given level, then starting them, then moving to the next level.
name|autoInstall
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
name|context
argument_list|,
name|sl
argument_list|,
name|convertToMavenUrls
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Bundle
argument_list|>
name|autoInstall
parameter_list|(
name|String
name|propertyPrefix
parameter_list|,
name|BundleContext
name|context
parameter_list|,
name|StartLevel
name|sl
parameter_list|,
name|boolean
name|convertToMavenUrls
parameter_list|,
name|boolean
name|start
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|autoStart
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundles
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|configProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
comment|// Ignore all keys that are not the auto-start property.
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|propertyPrefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// If the auto-start property does not have a start level,
comment|// then assume it is the default bundle start level, otherwise
comment|// parse the specified start level.
name|int
name|startLevel
init|=
name|sl
operator|.
name|getInitialBundleStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|propertyPrefix
argument_list|)
condition|)
block|{
try|try
block|{
name|startLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|key
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid property: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|autoStart
operator|.
name|put
argument_list|(
name|startLevel
argument_list|,
name|configProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Integer
name|startLevel
range|:
name|autoStart
operator|.
name|keySet
argument_list|()
control|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|autoStart
operator|.
name|get
argument_list|(
name|startLevel
argument_list|)
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Bundle
argument_list|>
name|bundlesLevel
init|=
operator|new
name|ArrayList
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
index|[]
name|parts
init|=
name|convertToMavenUrlsIfNeeded
argument_list|(
name|location
argument_list|,
name|convertToMavenUrls
argument_list|)
decl_stmt|;
name|Bundle
name|b
init|=
name|context
operator|.
name|installBundle
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
operator|new
name|URL
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
decl_stmt|;
name|sl
operator|.
name|setBundleStartLevel
argument_list|(
name|b
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
name|bundles
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|bundlesLevel
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error installing bundle  "
operator|+
name|location
operator|+
literal|": "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
comment|// Now loop through and start the installed bundles.
if|if
condition|(
name|start
condition|)
block|{
for|for
control|(
name|Bundle
name|b
range|:
name|bundlesLevel
control|)
block|{
try|try
block|{
name|String
name|fragmentHostHeader
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|fragmentHostHeader
operator|==
literal|null
operator|||
name|fragmentHostHeader
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error starting bundle "
operator|+
name|b
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|": "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|bundles
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|convertToMavenUrlsIfNeeded
parameter_list|(
name|String
name|location
parameter_list|,
name|boolean
name|convertToMavenUrls
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|location
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|convertToMavenUrls
condition|)
block|{
name|String
index|[]
name|p
init|=
name|parts
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|length
operator|>=
literal|4
operator|&&
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|startsWith
argument_list|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|3
index|]
operator|+
literal|"-"
operator|+
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|2
index|]
argument_list|)
condition|)
block|{
name|String
name|artifactId
init|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|3
index|]
decl_stmt|;
name|String
name|version
init|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|String
name|classifier
decl_stmt|;
name|String
name|type
decl_stmt|;
name|String
name|artifactIdVersion
init|=
name|artifactId
operator|+
literal|"-"
operator|+
name|version
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|charAt
argument_list|(
name|artifactIdVersion
operator|.
name|length
argument_list|()
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|classifier
operator|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
name|artifactIdVersion
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|,
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classifier
operator|=
literal|null
expr_stmt|;
block|}
name|type
operator|=
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
name|p
index|[
name|p
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"mvn:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|p
operator|.
name|length
operator|-
literal|3
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|p
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|classifier
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"jar"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classifier
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
expr_stmt|;
block|}
block|}
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
name|parts
index|[
literal|0
index|]
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|parts
index|[
literal|1
index|]
operator|=
name|parts
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
specifier|private
specifier|static
name|String
name|nextLocation
parameter_list|(
name|StringTokenizer
name|st
parameter_list|)
block|{
name|String
name|retVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|tokenList
init|=
literal|"\" "
decl_stmt|;
name|StringBuffer
name|tokBuf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|tok
decl_stmt|;
name|boolean
name|inQuote
init|=
literal|false
decl_stmt|;
name|boolean
name|tokStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|exit
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|exit
operator|)
condition|)
block|{
name|tok
operator|=
name|st
operator|.
name|nextToken
argument_list|(
name|tokenList
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|.
name|equals
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|inQuote
operator|=
operator|!
name|inQuote
expr_stmt|;
if|if
condition|(
name|inQuote
condition|)
block|{
name|tokenList
operator|=
literal|"\""
expr_stmt|;
block|}
else|else
block|{
name|tokenList
operator|=
literal|"\" "
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|equals
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
if|if
condition|(
name|tokStarted
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
name|tokStarted
operator|=
literal|false
expr_stmt|;
name|tokBuf
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|exit
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|tokStarted
operator|=
literal|true
expr_stmt|;
name|tokBuf
operator|.
name|append
argument_list|(
name|tok
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Handle case where end of token stream and
comment|// still got data
if|if
condition|(
operator|(
operator|!
name|exit
operator|)
operator|&&
operator|(
name|tokStarted
operator|)
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
comment|/**      *<p>      * Loads the properties in the system property file associated with the      * framework installation into<tt>System.setProperty()</tt>. These properties      * are not directly used by the framework in anyway. By default, the system      * property file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>system.properties</tt>". The      * installation directory of Felix is assumed to be the parent directory of      * the<tt>felix.jar</tt> file as found on the system class path property.      * The precise file from which to load system properties can be set by      * initializing the "<tt>felix.system.properties</tt>" system property to an      * arbitrary URL.      *</p>      *      * @param karafBase the karaf base folder      */
specifier|protected
specifier|static
name|void
name|loadSystemProperties
parameter_list|(
name|File
name|karafBase
parameter_list|)
block|{
comment|// The system properties file is either specified by a system
comment|// property or it is in the same directory as the Felix JAR file.
comment|// Try to load it from one of these places.
comment|// See if the property URL was specified as a property.
name|URL
name|propURL
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|SYSTEM_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|propURL
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Read the properties file.
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|propURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
comment|// Ignore file not found.
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: Error loading system properties from "
operator|+
name|propURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return;
block|}
comment|// Perform variable substitution on specified properties.
for|for
control|(
name|Enumeration
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|value
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Loads the configuration properties in the configuration property file      * associated with the framework installation; these properties      * are accessible to the framework and to bundles and are intended      * for configuration purposes. By default, the configuration property      * file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>config.properties</tt>".      * The installation directory of Felix is assumed to be the parent      * directory of the<tt>felix.jar</tt> file as found on the system class      * path property. The precise file from which to load configuration      * properties can be set by initializing the "<tt>felix.config.properties</tt>"      * system property to an arbitrary URL.      *</p>      *      * @return A<tt>Properties</tt> instance or<tt>null</tt> if there was an error.      * @throws Exception if something wrong occurs      */
specifier|private
name|Properties
name|loadConfigProperties
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The config properties file is either specified by a system
comment|// property or it is in the conf/ directory of the Felix
comment|// installation directory.  Try to load it from one of these
comment|// places.
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// See if the property URL was specified as a property.
name|URL
name|configPropURL
decl_stmt|;
name|URL
name|startupPropURL
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|configPropURL
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|STARTUP_PROPERTIES_FILE_NAME
argument_list|)
expr_stmt|;
name|startupPropURL
operator|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Properties
name|configProps
init|=
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Properties
name|startupProps
init|=
name|loadPropertiesFile
argument_list|(
name|startupPropURL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|defaultRepo
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|DEFAULT_REPO
argument_list|,
literal|"system"
argument_list|)
decl_stmt|;
if|if
condition|(
name|karafBase
operator|.
name|equals
argument_list|(
name|karafHome
argument_list|)
condition|)
block|{
name|bundleDirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
name|defaultRepo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundleDirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|defaultRepo
argument_list|)
argument_list|)
expr_stmt|;
name|bundleDirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
name|defaultRepo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|locations
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|BUNDLE_LOCATIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|locations
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|File
name|f
decl_stmt|;
if|if
condition|(
name|karafBase
operator|.
name|equals
argument_list|(
name|karafHome
argument_list|)
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|bundleDirs
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle location "
operator|+
name|location
operator|+
literal|" does not exist or is not a directory."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
comment|// Perform variable substitution for system properties.
for|for
control|(
name|Enumeration
name|e
init|=
name|configProps
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|configProps
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|configProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Mutate properties
name|Main
operator|.
name|processConfigurationProperties
argument_list|(
name|configProps
argument_list|,
name|startupProps
argument_list|,
name|bundleDirs
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
specifier|protected
specifier|static
name|Properties
name|loadPropertiesFile
parameter_list|(
name|URL
name|configPropURL
parameter_list|,
name|boolean
name|failIfNotFound
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read the properties file.
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|configPropURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|configProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|failIfNotFound
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
block|}
name|String
name|includes
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|INCLUDES_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|includes
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|includes
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|configPropURL
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
name|loadPropertiesFile
argument_list|(
name|url
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|configProps
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
name|configProps
operator|.
name|remove
argument_list|(
name|INCLUDES_PROPERTY
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|configProps
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|String
condition|)
block|{
name|String
name|v
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|)
decl_stmt|;
name|configProps
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|v
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configProps
return|;
block|}
specifier|protected
specifier|static
name|void
name|copySystemProperties
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"felix."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"karaf."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"org.osgi.framework."
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ClassLoader
name|createClassLoader
parameter_list|(
name|Properties
name|configProps
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|framework
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|KARAF_FRAMEWORK
argument_list|)
decl_stmt|;
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|KARAF_FRAMEWORK
operator|+
literal|" must be set in the etc/"
operator|+
name|CONFIG_PROPERTIES_FILE_NAME
operator|+
literal|" configuration file"
argument_list|)
throw|;
block|}
name|String
name|bundle
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|KARAF_FRAMEWORK
operator|+
literal|"."
operator|+
name|framework
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|KARAF_FRAMEWORK
operator|+
literal|"."
operator|+
name|framework
operator|+
literal|" must be set in the etc/"
operator|+
name|CONFIG_PROPERTIES_FILE_NAME
operator|+
literal|" configuration file"
argument_list|)
throw|;
block|}
name|File
name|bundleFile
init|=
operator|new
name|File
argument_list|(
name|karafBase
argument_list|,
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundleFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|bundleFile
operator|=
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
name|bundle
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bundleFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|bundleFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
name|bundleFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|File
index|[]
name|libs
init|=
operator|new
name|File
argument_list|(
name|karafHome
argument_list|,
literal|"lib"
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|libs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|libs
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|f
operator|.
name|canRead
argument_list|()
operator|&&
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|f
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Process properties to customize default felix behavior      *      * @param configProps properties loaded from etc/config.properties      * @param startupProps properties loaded from etc/startup.properties      * @param bundleDirs location to load bundles from (usually system/)      */
specifier|private
specifier|static
name|void
name|processConfigurationProperties
parameter_list|(
name|Properties
name|configProps
parameter_list|,
name|Properties
name|startupProps
parameter_list|,
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|)
block|{
if|if
condition|(
name|bundleDirs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|remove
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|File
argument_list|>
name|jars
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// We should start all the bundles in the system dir.
for|for
control|(
name|File
name|bundleDir
range|:
name|bundleDirs
control|)
block|{
name|findJars
argument_list|(
name|bundleDir
argument_list|,
name|jars
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|jar
range|:
name|jars
control|)
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|jar
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|jar
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|configProps
operator|.
name|setProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|STARTUP_PROPERTIES_FILE_NAME
operator|.
name|equals
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|remove
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
expr_stmt|;
comment|// We should start the bundles in the startup.properties file.
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
name|levels
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|startupProps
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|o
decl_stmt|;
name|File
name|file
init|=
name|findFile
argument_list|(
name|bundleDirs
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|Integer
name|level
decl_stmt|;
try|try
block|{
name|level
operator|=
operator|new
name|Integer
argument_list|(
name|startupProps
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" (run level must be an integer)"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StringBuffer
name|sb
init|=
name|levels
operator|.
name|get
argument_list|(
name|level
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|levels
operator|.
name|put
argument_list|(
name|level
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"|"
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle listed in "
operator|+
name|STARTUP_PROPERTIES_FILE_NAME
operator|+
literal|" configuration not found: "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
name|entry
range|:
name|levels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|PROPERTY_AUTO_START
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|File
name|bundleDir
range|:
name|bundleDirs
control|)
block|{
name|File
name|file
init|=
name|findFile
argument_list|(
name|bundleDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|File
name|theFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|theFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|theFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|theFile
return|;
block|}
for|for
control|(
name|File
name|file
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|findFile
argument_list|(
name|file
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|void
name|findJars
parameter_list|(
name|File
name|dir
parameter_list|,
name|ArrayList
argument_list|<
name|File
argument_list|>
name|jars
parameter_list|)
block|{
for|for
control|(
name|File
name|file
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|findJars
argument_list|(
name|file
argument_list|,
name|jars
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|file
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|jars
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_START
init|=
literal|"${"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_STOP
init|=
literal|"}"
decl_stmt|;
comment|/**      *<p>      * This method performs property variable substitution on the      * specified value. If the specified value contains the syntax      *<tt>${&lt;prop-name&gt;}</tt>, where<tt>&lt;prop-name&gt;</tt>      * refers to either a configuration property or a system property,      * then the corresponding property value is substituted for the variable      * placeholder. Multiple variable placeholders may exist in the      * specified value as well as nested variable placeholders, which      * are substituted from inner most to outer most. Configuration      * properties override system properties.      *</p>      *      * @param val         The string on which to perform property substitution.      * @param currentKey  The key of the property being evaluated used to      *                    detect cycles.      * @param cycleMap    Map of variable references used to detect nested cycles.      * @param configProps Set of configuration properties.      * @return The value of the specified string after system property substitution.      * @throws IllegalArgumentException If there was a syntax error in the      *                                  property placeholder syntax or a recursive variable reference.      */
specifier|public
specifier|static
name|String
name|substVars
parameter_list|(
name|String
name|val
parameter_list|,
name|String
name|currentKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cycleMap
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// If there is currently no cycle map, then create
comment|// one for detecting cycles for this invocation.
if|if
condition|(
name|cycleMap
operator|==
literal|null
condition|)
block|{
name|cycleMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Put the current key in the cycle map.
name|cycleMap
operator|.
name|put
argument_list|(
name|currentKey
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
comment|// Assume we have a value that is something like:
comment|// "leading ${foo.${bar}} middle ${baz} trailing"
comment|// Find the first ending '}' variable delimiter, which
comment|// will correspond to the first deepest nested variable
comment|// placeholder.
name|int
name|stopDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_STOP
argument_list|)
decl_stmt|;
comment|// Find the matching starting "${" variable delimiter
comment|// by looping until we find a start delimiter that is
comment|// greater than the stop delimiter we have found.
name|int
name|startDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|)
decl_stmt|;
while|while
condition|(
name|stopDelim
operator|>=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|,
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>
name|stopDelim
operator|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|idx
operator|<
name|stopDelim
condition|)
block|{
name|startDelim
operator|=
name|idx
expr_stmt|;
block|}
block|}
comment|// If we do not have a start or stop delimiter, then just
comment|// return the existing value.
if|if
condition|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|&&
operator|(
name|stopDelim
operator|<
literal|0
operator|)
condition|)
block|{
return|return
name|val
return|;
block|}
comment|// At this point, we found a stop delimiter without a start,
comment|// so throw an exception.
elseif|else
if|if
condition|(
operator|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|||
operator|(
name|startDelim
operator|>
name|stopDelim
operator|)
operator|)
operator|&&
operator|(
name|stopDelim
operator|>=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stop delimiter with no start delimiter: "
operator|+
name|val
argument_list|)
throw|;
block|}
comment|// At this point, we have found a variable placeholder so
comment|// we must perform a variable substitution on it.
comment|// Using the start and stop delimiter indices, extract
comment|// the first, deepest nested variable placeholder.
name|String
name|variable
init|=
name|val
operator|.
name|substring
argument_list|(
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|,
name|stopDelim
argument_list|)
decl_stmt|;
comment|// Verify that this is not a recursive variable reference.
if|if
condition|(
name|cycleMap
operator|.
name|get
argument_list|(
name|variable
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"recursive variable reference: "
operator|+
name|variable
argument_list|)
throw|;
block|}
comment|// Get the value of the deepest nested variable placeholder.
comment|// Try to configuration properties first.
name|String
name|substValue
init|=
operator|(
name|configProps
operator|!=
literal|null
operator|)
condition|?
name|configProps
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|null
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|substValue
operator|==
literal|null
condition|)
block|{
comment|// Ignore unknown property values.
name|substValue
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Remove the found variable from the cycle map, since
comment|// it may appear more than once in the value and we don't
comment|// want such situations to appear as a recursive reference.
name|cycleMap
operator|.
name|remove
argument_list|(
name|variable
argument_list|)
expr_stmt|;
comment|// Append the leading characters, the substituted value of
comment|// the variable, and the trailing characters to get the new
comment|// value.
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startDelim
argument_list|)
operator|+
name|substValue
operator|+
name|val
operator|.
name|substring
argument_list|(
name|stopDelim
operator|+
name|DELIM_STOP
operator|.
name|length
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now perform substitution again, since there could still
comment|// be substitutions to make.
name|val
operator|=
name|substVars
argument_list|(
name|val
argument_list|,
name|currentKey
argument_list|,
name|cycleMap
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
comment|// Return the value.
return|return
name|val
return|;
block|}
comment|/**      * Retrieve the arguments used when launching Karaf      *      * @return the arguments of the main karaf process      */
specifier|public
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
specifier|public
name|void
name|setExitCode
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
specifier|public
name|Framework
name|getFramework
parameter_list|()
block|{
return|return
name|framework
return|;
block|}
specifier|public
name|void
name|lock
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_USE_LOCK
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|doLock
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setStartLevel
argument_list|(
name|defaultStartLevel
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doLock
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|clz
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_CLASS
argument_list|,
name|PROPERTY_LOCK_CLASS_DEFAULT
argument_list|)
decl_stmt|;
name|lock
operator|=
operator|(
name|Lock
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|clz
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|Properties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|boolean
name|lockLogged
init|=
literal|false
decl_stmt|;
name|setStartLevel
argument_list|(
name|lockStartLevel
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|exiting
condition|)
block|{
if|if
condition|(
name|lock
operator|.
name|lock
argument_list|()
condition|)
block|{
if|if
condition|(
name|lockLogged
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Lock acquired."
argument_list|)
expr_stmt|;
block|}
name|setupShutdown
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|setStartLevel
argument_list|(
name|defaultStartLevel
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|lock
operator|.
name|isAlive
argument_list|()
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|lockDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|framework
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
operator|&&
operator|!
name|exiting
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Lost the lock, stopping this instance ..."
argument_list|)
expr_stmt|;
name|setStartLevel
argument_list|(
name|lockStartLevel
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|lockLogged
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for the lock ..."
argument_list|)
expr_stmt|;
name|lockLogged
operator|=
literal|true
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|lockDelay
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unlock
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setStartLevel
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|Exception
block|{
name|BundleContext
name|ctx
init|=
name|framework
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
name|ServiceReference
index|[]
name|refs
init|=
name|ctx
operator|.
name|getServiceReferences
argument_list|(
name|StartLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StartLevel
name|sl
init|=
operator|(
name|StartLevel
operator|)
name|ctx
operator|.
name|getService
argument_list|(
name|refs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|sl
operator|.
name|setStartLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Random
name|random
init|=
literal|null
decl_stmt|;
specifier|private
name|ServerSocket
name|shutdownSocket
decl_stmt|;
specifier|protected
name|void
name|setupShutdown
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|writePid
argument_list|(
name|props
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_HOST
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|String
name|portFile
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT_FILE
argument_list|)
decl_stmt|;
specifier|final
name|String
name|shutdown
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_COMMAND
argument_list|,
name|DEFAULT_SHUTDOWN_COMMAND
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|>=
literal|0
condition|)
block|{
name|shutdownSocket
operator|=
operator|new
name|ServerSocket
argument_list|(
name|port
argument_list|,
literal|1
argument_list|,
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
condition|)
block|{
name|port
operator|=
name|shutdownSocket
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|portFile
operator|!=
literal|null
condition|)
block|{
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|portFile
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Thread
name|thread
init|=
operator|new
name|ShutdownSocketThread
argument_list|(
name|shutdown
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writePid
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
try|try
block|{
name|String
name|pidFile
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PID_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidFile
operator|!=
literal|null
condition|)
block|{
name|RuntimeMXBean
name|rtb
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
decl_stmt|;
name|String
name|processName
init|=
name|rtb
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9]+)@.+$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|processName
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|pid
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|pidFile
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ShutdownSocketThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|String
name|shutdown
decl_stmt|;
specifier|public
name|ShutdownSocketThread
parameter_list|(
name|String
name|shutdown
parameter_list|)
block|{
name|this
operator|.
name|shutdown
operator|=
name|shutdown
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
comment|// Wait for the next connection
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|socket
operator|=
name|shutdownSocket
operator|.
name|accept
argument_list|()
expr_stmt|;
name|socket
operator|.
name|setSoTimeout
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Ten seconds
name|stream
operator|=
name|socket
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|ace
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Karaf shutdown socket: security exception: "
operator|+
name|ace
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ace
argument_list|)
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Karaf shutdown socket: accept: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Read a set of characters from the socket
name|StringBuilder
name|command
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|expected
init|=
literal|1024
decl_stmt|;
comment|// Cut off to avoid DoS attack
while|while
condition|(
name|expected
operator|<
name|shutdown
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
operator|==
literal|null
condition|)
block|{
name|random
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
name|expected
operator|+=
operator|(
name|random
operator|.
name|nextInt
argument_list|()
operator|%
literal|1024
operator|)
expr_stmt|;
block|}
while|while
condition|(
name|expected
operator|>
literal|0
condition|)
block|{
name|int
name|ch
decl_stmt|;
try|try
block|{
name|ch
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Karaf shutdown socket:  read: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ch
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|ch
operator|<
literal|32
condition|)
block|{
comment|// Control character or EOF terminates loop
break|break;
block|}
name|command
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
name|expected
operator|--
expr_stmt|;
block|}
comment|// Close the socket now that we are done with it
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
comment|// Match against our command string
name|boolean
name|match
init|=
name|command
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|shutdown
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Karaf shutdown socket: received shutdown command. Stopping framework..."
argument_list|)
expr_stmt|;
name|framework
operator|.
name|stop
argument_list|()
expr_stmt|;
break|break;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Karaf shutdown socket:  Invalid command '"
operator|+
name|command
operator|.
name|toString
argument_list|()
operator|+
literal|"' received"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|shutdownSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

