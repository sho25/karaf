begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Security
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|info
operator|.
name|ServerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
operator|.
name|LockCallBack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
operator|.
name|NoLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|ArtifactResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|BootstrapLogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|SimpleMavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|config
operator|.
name|PropertiesLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|Framework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|launch
operator|.
name|FrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|FrameworkStartLevel
import|;
end_import

begin_comment
comment|/**  *<p>  * This class is the default way to instantiate and execute the framework. It is not  * intended to be the only way to instantiate and execute the framework; rather, it is  * one example of how to do so. When embedding the framework in a host application,  * this class can serve as a simple guide of how to do so. It may even be  * worthwhile to reuse some of its property handling capabilities. This class  * is completely static and is only intended to start a single instance of  * the framework.  *</p>  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
comment|/**      * The default name used for the startup properties file.      */
specifier|public
specifier|static
specifier|final
name|String
name|STARTUP_PROPERTIES_FILE_NAME
init|=
literal|"startup.properties"
decl_stmt|;
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ConfigProperties
name|config
decl_stmt|;
specifier|private
name|Framework
name|framework
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|args
decl_stmt|;
specifier|private
name|int
name|exitCode
decl_stmt|;
specifier|private
name|ShutdownCallback
name|shutdownCallback
decl_stmt|;
specifier|private
name|KarafActivatorManager
name|activatorManager
decl_stmt|;
specifier|private
name|Lock
name|lock
decl_stmt|;
specifier|private
name|KarafLockCallback
name|lockCallback
decl_stmt|;
specifier|private
name|boolean
name|exiting
decl_stmt|;
comment|/**      *<p>      * This method performs the main task of constructing an framework instance      * and starting its execution. The following functions are performed      * when invoked:      *</p>      *<ol>      *<li><i><b>Read the system properties file.<b></i> This is a file      *       containing properties to be pushed into<tt>System.setProperty()</tt>      *       before starting the framework. This mechanism is mainly shorthand      *       for people starting the framework from the command line to avoid having      *       to specify a bunch of<tt>-D</tt> system property definitions.      *       The only properties defined in this file that will impact the framework's      *       behavior are the those concerning setting HTTP proxies, such as      *<tt>http.proxyHost</tt>,<tt>http.proxyPort</tt>, and      *<tt>http.proxyAuth</tt>.      *</li>      *<li><i><b>Perform system property variable substitution on system      *       properties.</b></i> Any system properties in the system property      *       file whose value adheres to<tt>${&lt;system-prop-name&gt;}</tt>      *       syntax will have their value substituted with the appropriate      *       system property value.      *</li>      *<li><i><b>Read the framework's configuration property file.</b></i> This is      *       a file containing properties used to configure the framework      *       instance and to pass configuration information into      *       bundles installed into the framework instance. The configuration      *       property file is called<tt>config.properties</tt> by default      *       and is located in the<tt>conf/</tt> directory of the Felix      *       installation directory, which is the parent directory of the      *       directory containing the<tt>felix.jar</tt> file. It is possible      *       to use a different location for the property file by specifying      *       the desired URL using the<tt>felix.config.properties</tt>      *       system property; this should be set using the<tt>-D</tt> syntax      *       when executing the JVM. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more      *       information on the framework configuration options.      *</li>      *<li><i><b>Perform system property variable substitution on configuration      *       properties.</b></i> Any configuration properties whose value adheres to      *<tt>${&lt;system-prop-name&gt;}</tt> syntax will have their value      *       substituted with the appropriate system property value.      *</li>      *<li><i><b>Ensure the default bundle cache has sufficient information to      *       initialize.</b></i> The default implementation of the bundle cache      *       requires either a profile name or a profile directory in order to      *       start. The configuration properties are checked for at least one      *       of the<tt>felix.cache.profile</tt> or<tt>felix.cache.profiledir</tt>      *       properties. If neither is found, the user is asked to supply a profile      *       name that is added to the configuration property set. See the      *<a href="cache/DefaultBundleCache.html"><tt>DefaultBundleCache</tt></a>      *       documentation for more details its configuration options.      *</li>      *<li><i><b>Creates and starts a framework instance.</b></i> A      *       case insensitive      *<a href="util/StringMap.html"><tt>StringMap</tt></a>      *       is created for the configuration property file and is passed      *       into the framework.      *</li>      *</ol>      *<p>      * It should be noted that simply starting an instance of the framework is not enough      * to create an interactive session with it. It is necessary to install      * and start bundles that provide an interactive impl; this is generally      * done by specifying an "auto-start" property in the framework configuration      * property file. If no interactive impl bundles are installed or if      * the configuration property file cannot be found, the framework will appear to      * be hung or deadlocked. This is not the case, it is executing correctly,      * there is just no way to interact with it. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more information on      * framework configuration options.      *</p>      * @param args An array of arguments, all of which are ignored.      * @throws Exception If an error occurs.      **/
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|restart
init|=
literal|false
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
specifier|final
name|Main
name|main
init|=
operator|new
name|Main
argument_list|(
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|main
operator|.
name|launch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Also log to sytem.err in case logging is not yet initialized
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|main
operator|.
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Could not launch framework"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|main
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|main
operator|.
name|setExitCode
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|main
operator|.
name|awaitShutdown
argument_list|()
expr_stmt|;
name|boolean
name|stopped
init|=
name|main
operator|.
name|destroy
argument_list|()
decl_stmt|;
name|restart
operator|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"karaf.restart"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|stopped
condition|)
block|{
if|if
condition|(
name|restart
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Timeout waiting for framework to stop.  Restarting now."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Timeout waiting for framework to stop.  Exiting VM."
argument_list|)
expr_stmt|;
name|main
operator|.
name|setExitCode
argument_list|(
operator|-
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|main
operator|.
name|setExitCode
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error occurred shutting down framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|restart
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|main
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|Main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|void
name|setShutdownCallback
parameter_list|(
name|ShutdownCallback
name|shutdownCallback
parameter_list|)
block|{
name|this
operator|.
name|shutdownCallback
operator|=
name|shutdownCallback
expr_stmt|;
block|}
specifier|public
name|void
name|launch
parameter_list|()
throws|throws
name|Exception
block|{
name|config
operator|=
operator|new
name|ConfigProperties
argument_list|()
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|delayConsoleStart
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|config
operator|.
name|startupMessage
argument_list|)
expr_stmt|;
block|}
name|String
name|log4jConfigPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
operator|+
literal|"/org.ops4j.pax.logging.cfg"
decl_stmt|;
name|BootstrapLogManager
operator|.
name|setProperties
argument_list|(
name|config
operator|.
name|props
argument_list|,
name|log4jConfigPath
argument_list|)
expr_stmt|;
name|lockCallback
operator|=
operator|new
name|KarafLockCallback
argument_list|()
expr_stmt|;
name|InstanceHelper
operator|.
name|updateInstancePid
argument_list|(
name|config
operator|.
name|karafHome
argument_list|,
name|config
operator|.
name|karafBase
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|addHandler
argument_list|(
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|provider
range|:
name|config
operator|.
name|securityProviders
control|)
block|{
name|addSecurityProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
init|=
name|getBundleRepos
argument_list|()
decl_stmt|;
name|ArtifactResolver
name|resolver
init|=
operator|new
name|SimpleMavenResolver
argument_list|(
name|bundleDirs
argument_list|)
decl_stmt|;
comment|// Start up the OSGI framework
name|ClassLoader
name|classLoader
init|=
name|createClassLoader
argument_list|(
name|resolver
argument_list|)
decl_stmt|;
name|FrameworkFactory
name|factory
init|=
name|loadFrameworkFactory
argument_list|(
name|classLoader
argument_list|)
decl_stmt|;
name|framework
operator|=
name|factory
operator|.
name|newFramework
argument_list|(
name|config
operator|.
name|props
argument_list|)
expr_stmt|;
comment|// Hack to set felix logger
try|try
block|{
if|if
condition|(
name|framework
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"org.apache.felix."
argument_list|)
condition|)
block|{
name|Field
name|field
init|=
name|framework
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"m_logger"
argument_list|)
decl_stmt|;
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Object
name|logger
init|=
name|field
operator|.
name|get
argument_list|(
name|framework
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|logger
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setLogger"
argument_list|,
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|logger
argument_list|,
operator|new
name|Object
argument_list|()
block|{
specifier|public
name|void
name|log
parameter_list|(
name|ServiceReference
name|sr
parameter_list|,
name|int
name|level
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|exception
parameter_list|)
block|{
name|Level
name|lvl
decl_stmt|;
switch|switch
condition|(
name|level
condition|)
block|{
case|case
literal|1
case|:
name|lvl
operator|=
name|Level
operator|.
name|SEVERE
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|lvl
operator|=
name|Level
operator|.
name|WARNING
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|lvl
operator|=
name|Level
operator|.
name|INFO
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|lvl
operator|=
name|Level
operator|.
name|FINE
expr_stmt|;
break|break;
default|default:
name|lvl
operator|=
name|Level
operator|.
name|FINEST
expr_stmt|;
break|break;
block|}
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"Felix"
argument_list|)
operator|.
name|log
argument_list|(
name|lvl
argument_list|,
name|message
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|framework
operator|.
name|init
argument_list|()
expr_stmt|;
name|framework
operator|.
name|getBundleContext
argument_list|()
operator|.
name|addFrameworkListener
argument_list|(
name|lockCallback
argument_list|)
expr_stmt|;
name|framework
operator|.
name|start
argument_list|()
expr_stmt|;
name|FrameworkStartLevel
name|sl
init|=
name|framework
operator|.
name|adapt
argument_list|(
name|FrameworkStartLevel
operator|.
name|class
argument_list|)
decl_stmt|;
name|sl
operator|.
name|setInitialBundleStartLevel
argument_list|(
name|config
operator|.
name|defaultBundleStartlevel
argument_list|)
expr_stmt|;
comment|// If we have a clean state, install everything
if|if
condition|(
name|framework
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getBundles
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Installing and starting initial bundles"
argument_list|)
expr_stmt|;
name|File
name|startupPropsFile
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|karafEtc
argument_list|,
name|STARTUP_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
init|=
name|readBundlesFromStartupProperties
argument_list|(
name|startupPropsFile
argument_list|)
decl_stmt|;
name|installAndStartBundles
argument_list|(
name|resolver
argument_list|,
name|framework
operator|.
name|getBundleContext
argument_list|()
argument_list|,
name|bundles
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"All initial bundles installed and set to start"
argument_list|)
expr_stmt|;
block|}
name|ServerInfo
name|serverInfo
init|=
operator|new
name|ServerInfoImpl
argument_list|(
name|args
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|framework
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|ServerInfo
operator|.
name|class
argument_list|,
name|serverInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|activatorManager
operator|=
operator|new
name|KarafActivatorManager
argument_list|(
name|classLoader
argument_list|,
name|framework
argument_list|)
expr_stmt|;
name|activatorManager
operator|.
name|startKarafActivators
argument_list|()
expr_stmt|;
name|setStartLevel
argument_list|(
name|config
operator|.
name|lockStartLevel
argument_list|)
expr_stmt|;
comment|// Progress bar
if|if
condition|(
name|config
operator|.
name|delayConsoleStart
condition|)
block|{
operator|new
name|StartupListener
argument_list|(
name|LOG
argument_list|,
name|framework
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|monitor
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|monitor
parameter_list|()
block|{
operator|new
name|Thread
argument_list|(
literal|"Karaf Lock Monitor Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doMonitor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|lock
operator|=
name|createLock
argument_list|()
expr_stmt|;
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|ConfigProperties
operator|.
name|PROP_KARAF_DATA
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|exiting
condition|)
block|{
if|if
condition|(
name|lock
operator|.
name|lock
argument_list|()
condition|)
block|{
name|lockCallback
operator|.
name|lockAquired
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|dataDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Data directory does not exist anymore, halting"
argument_list|)
expr_stmt|;
name|framework
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|lock
operator|.
name|isAlive
argument_list|()
operator|||
name|exiting
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|config
operator|.
name|lockDelay
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exiting
condition|)
block|{
name|lockCallback
operator|.
name|lockLost
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|lockCallback
operator|.
name|waitingForLock
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|config
operator|.
name|lockDelay
argument_list|)
expr_stmt|;
block|}
block|}
name|Lock
name|getLock
parameter_list|()
block|{
return|return
name|lock
return|;
block|}
specifier|private
name|ClassLoader
name|createClassLoader
parameter_list|(
name|ArtifactResolver
name|resolver
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|URL
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<
name|URL
argument_list|>
argument_list|()
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
name|resolver
operator|.
name|resolve
argument_list|(
name|config
operator|.
name|frameworkBundle
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|File
index|[]
name|libs
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|karafHome
argument_list|,
literal|"lib"
argument_list|)
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|libs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|libs
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|f
operator|.
name|canRead
argument_list|()
operator|&&
name|f
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|f
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|URLClassLoader
argument_list|(
name|urls
operator|.
name|toArray
argument_list|(
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|FrameworkFactory
name|loadFrameworkFactory
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|factoryClass
init|=
name|config
operator|.
name|frameworkFactoryClass
decl_stmt|;
if|if
condition|(
name|factoryClass
operator|==
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
literal|"META-INF/services/"
operator|+
name|FrameworkFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|factoryClass
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FrameworkFactory
name|factory
init|=
operator|(
name|FrameworkFactory
operator|)
name|classLoader
operator|.
name|loadClass
argument_list|(
name|factoryClass
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|factory
return|;
block|}
specifier|private
name|Lock
name|createLock
parameter_list|()
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|useLock
condition|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
try|try
block|{
return|return
operator|(
name|Lock
operator|)
name|Lock
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|config
operator|.
name|lockClass
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|Properties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|config
operator|.
name|props
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InvocationTargetException
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception instantiating lock class "
operator|+
name|config
operator|.
name|lockClass
operator|+
literal|"\n"
operator|+
operator|(
operator|(
name|InvocationTargetException
operator|)
name|e
operator|)
operator|.
name|getTargetException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception instantiating lock class "
operator|+
name|config
operator|.
name|lockClass
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addSecurityProvider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
try|try
block|{
name|Security
operator|.
name|addProvider
argument_list|(
operator|(
name|Provider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|provider
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to register security provider: "
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|readBundlesFromStartupProperties
parameter_list|(
name|File
name|startupPropsFile
parameter_list|)
block|{
name|Properties
name|startupProps
init|=
name|PropertiesLoader
operator|.
name|loadPropertiesOrFail
argument_list|(
name|startupPropsFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundeList
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|startupProps
operator|.
name|keySet
argument_list|()
control|)
block|{
try|try
block|{
name|BundleInfo
name|bi
init|=
operator|new
name|BundleInfo
argument_list|()
decl_stmt|;
name|bi
operator|.
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|String
name|startlevelSt
init|=
name|startupProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|bi
operator|.
name|startLevel
operator|=
operator|new
name|Integer
argument_list|(
name|startlevelSt
argument_list|)
expr_stmt|;
name|bundeList
operator|.
name|add
argument_list|(
name|bi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error loading startup bundle list from "
operator|+
name|startupPropsFile
operator|+
literal|" at "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|bundeList
return|;
block|}
specifier|private
name|void
name|installAndStartBundles
parameter_list|(
name|ArtifactResolver
name|resolver
parameter_list|,
name|BundleContext
name|context
parameter_list|,
name|List
argument_list|<
name|BundleInfo
argument_list|>
name|bundles
parameter_list|)
block|{
for|for
control|(
name|BundleInfo
name|bundleInfo
range|:
name|bundles
control|)
block|{
try|try
block|{
name|Bundle
name|b
decl_stmt|;
if|if
condition|(
name|bundleInfo
operator|.
name|uri
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"reference:file:"
argument_list|)
condition|)
block|{
name|URI
name|temp
init|=
name|URI
operator|.
name|create
argument_list|(
name|bundleInfo
operator|.
name|uri
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|"reference:file:"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|resolvedURI
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|temp
argument_list|)
decl_stmt|;
name|URI
name|finalUri
init|=
name|URI
operator|.
name|create
argument_list|(
literal|"reference:file:"
operator|+
name|config
operator|.
name|karafBase
operator|.
name|toURI
argument_list|()
operator|.
name|relativize
argument_list|(
name|resolvedURI
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|=
name|context
operator|.
name|installBundle
argument_list|(
name|finalUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URI
name|resolvedURI
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|bundleInfo
operator|.
name|uri
argument_list|)
decl_stmt|;
name|b
operator|=
name|context
operator|.
name|installBundle
argument_list|(
name|bundleInfo
operator|.
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|resolvedURI
operator|.
name|toURL
argument_list|()
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|adapt
argument_list|(
name|BundleStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|bundleInfo
operator|.
name|startLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNotFragment
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error installing bundle listed in "
operator|+
name|STARTUP_PROPERTIES_FILE_NAME
operator|+
literal|" with url: "
operator|+
name|bundleInfo
operator|.
name|uri
operator|+
literal|" and startlevel: "
operator|+
name|bundleInfo
operator|.
name|startLevel
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isNotFragment
parameter_list|(
name|Bundle
name|b
parameter_list|)
block|{
name|String
name|fragmentHostHeader
init|=
operator|(
name|String
operator|)
name|b
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|FRAGMENT_HOST
argument_list|)
decl_stmt|;
return|return
name|fragmentHostHeader
operator|==
literal|null
operator|||
name|fragmentHostHeader
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|getBundleRepos
parameter_list|()
block|{
name|List
argument_list|<
name|File
argument_list|>
name|bundleDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|baseSystemRepo
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|karafHome
argument_list|,
name|config
operator|.
name|defaultRepo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseSystemRepo
operator|.
name|exists
argument_list|()
operator|&&
name|baseSystemRepo
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"system repo folder not found: "
operator|+
name|baseSystemRepo
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|bundleDirs
operator|.
name|add
argument_list|(
name|baseSystemRepo
argument_list|)
expr_stmt|;
name|File
name|homeSystemRepo
init|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|karafHome
argument_list|,
name|config
operator|.
name|defaultRepo
argument_list|)
decl_stmt|;
name|bundleDirs
operator|.
name|add
argument_list|(
name|homeSystemRepo
argument_list|)
expr_stmt|;
name|String
name|locations
init|=
name|config
operator|.
name|bundleLocations
decl_stmt|;
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|locations
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|Utils
operator|.
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|File
name|f
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|karafBase
operator|.
name|equals
argument_list|(
name|config
operator|.
name|karafHome
argument_list|)
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|karafHome
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|config
operator|.
name|karafBase
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|bundleDirs
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle location "
operator|+
name|location
operator|+
literal|" does not exist or is not a directory."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
return|return
name|bundleDirs
return|;
block|}
comment|/**      * Retrieve the arguments used when launching Karaf      *      * @return the arguments of the main karaf process      */
specifier|public
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
specifier|public
name|void
name|setExitCode
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
specifier|public
name|Framework
name|getFramework
parameter_list|()
block|{
return|return
name|framework
return|;
block|}
specifier|protected
name|void
name|setStartLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|framework
operator|.
name|adapt
argument_list|(
name|FrameworkStartLevel
operator|.
name|class
argument_list|)
operator|.
name|setStartLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|awaitShutdown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
return|return;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|FrameworkEvent
name|event
init|=
name|framework
operator|.
name|waitForStop
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|FrameworkEvent
operator|.
name|STOPPED_UPDATE
condition|)
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|framework
operator|.
name|getState
argument_list|()
operator|!=
name|Bundle
operator|.
name|STARTING
operator|&&
name|framework
operator|.
name|getState
argument_list|()
operator|!=
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|monitor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
specifier|public
name|boolean
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|int
name|step
init|=
literal|5000
decl_stmt|;
comment|// Notify the callback asap
if|if
condition|(
name|shutdownCallback
operator|!=
literal|null
condition|)
block|{
name|shutdownCallback
operator|.
name|waitingForShutdown
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
name|exiting
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|framework
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
operator|||
name|framework
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|STARTING
condition|)
block|{
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|framework
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error stopping karaf: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|int
name|timeout
init|=
name|config
operator|.
name|shutdownTimeout
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|shutdownTimeout
operator|<=
literal|0
condition|)
block|{
name|timeout
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
while|while
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|timeout
operator|-=
name|step
expr_stmt|;
if|if
condition|(
name|shutdownCallback
operator|!=
literal|null
condition|)
block|{
name|shutdownCallback
operator|.
name|waitingForShutdown
argument_list|(
name|step
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|FrameworkEvent
name|event
init|=
name|framework
operator|.
name|waitForStop
argument_list|(
name|step
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|!=
name|FrameworkEvent
operator|.
name|WAIT_TIMEDOUT
condition|)
block|{
name|activatorManager
operator|.
name|stopKarafActivators
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|exiting
operator|=
literal|true
expr_stmt|;
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
class|class
name|KarafLockCallback
implements|implements
name|LockCallBack
implements|,
name|FrameworkListener
block|{
specifier|private
name|Object
name|startLevelLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|lockLost
parameter_list|()
block|{
if|if
condition|(
name|framework
operator|.
name|getState
argument_list|()
operator|==
name|Bundle
operator|.
name|ACTIVE
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Lock lost. Setting startlevel to "
operator|+
name|config
operator|.
name|lockStartLevel
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|startLevelLock
init|)
block|{
name|setStartLevel
argument_list|(
name|config
operator|.
name|lockStartLevel
argument_list|)
expr_stmt|;
comment|// we have to wait for the start level to be reduced here because
comment|// if the lock is regained before the start level is fully changed
comment|// things may not come up as expected
name|LOG
operator|.
name|fine
argument_list|(
literal|"Waiting for start level change to complete..."
argument_list|)
expr_stmt|;
try|try
block|{
name|startLevelLock
operator|.
name|wait
argument_list|(
name|config
operator|.
name|shutdownTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|lockAquired
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Lock acquired. Setting startlevel to "
operator|+
name|config
operator|.
name|defaultStartLevel
argument_list|)
expr_stmt|;
name|InstanceHelper
operator|.
name|setupShutdown
argument_list|(
name|config
argument_list|,
name|framework
argument_list|)
expr_stmt|;
name|setStartLevel
argument_list|(
name|config
operator|.
name|defaultStartLevel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|waitingForLock
parameter_list|()
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Waiting for the lock ..."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|frameworkEvent
parameter_list|(
name|FrameworkEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|FrameworkEvent
operator|.
name|STARTLEVEL_CHANGED
condition|)
block|{
synchronized|synchronized
init|(
name|startLevelLock
init|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Start level change complete."
argument_list|)
expr_stmt|;
name|startLevelLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

