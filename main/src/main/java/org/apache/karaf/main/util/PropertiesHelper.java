begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
specifier|public
class|class
name|PropertiesHelper
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDES_PROPERTY
init|=
literal|"${includes}"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_START
init|=
literal|"${"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_STOP
init|=
literal|"}"
decl_stmt|;
comment|/**       *<p>       * Loads the properties into into<tt>System.setProperty()</tt>. These properties       * are not directly used by the framework in anyway. By default, the system       * property file is located in the<tt>etc/</tt> directory of the karaf       * installation directory and is called "<tt>system.properties</tt>".       * The precise file from which to load system properties can be set by       * initializing the "<tt>system.properties</tt>" system property to an       * arbitrary URL.       *</p>       */
specifier|public
specifier|static
name|void
name|updateSystemProperties
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|,
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|value
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Perform variable substitution for the given properties 	 * @param configProps 	 */
specifier|public
specifier|static
name|void
name|substituteVariables
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|configProps
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|configProps
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|configProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|nextLocation
parameter_list|(
name|StringTokenizer
name|st
parameter_list|)
block|{
name|String
name|retVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|tokenList
init|=
literal|"\" "
decl_stmt|;
name|StringBuffer
name|tokBuf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|tok
decl_stmt|;
name|boolean
name|inQuote
init|=
literal|false
decl_stmt|;
name|boolean
name|tokStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|exit
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|exit
operator|)
condition|)
block|{
name|tok
operator|=
name|st
operator|.
name|nextToken
argument_list|(
name|tokenList
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|.
name|equals
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|inQuote
operator|=
operator|!
name|inQuote
expr_stmt|;
if|if
condition|(
name|inQuote
condition|)
block|{
name|tokenList
operator|=
literal|"\""
expr_stmt|;
block|}
else|else
block|{
name|tokenList
operator|=
literal|"\" "
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|equals
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
if|if
condition|(
name|tokStarted
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
name|tokStarted
operator|=
literal|false
expr_stmt|;
name|tokBuf
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|exit
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|tokStarted
operator|=
literal|true
expr_stmt|;
name|tokBuf
operator|.
name|append
argument_list|(
name|tok
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Handle case where end of token stream and
comment|// still got data
if|if
condition|(
operator|(
operator|!
name|exit
operator|)
operator|&&
operator|(
name|tokStarted
operator|)
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
specifier|public
specifier|static
name|Properties
name|loadPropertiesFile
parameter_list|(
name|File
name|baseFolder
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|failIfNotFound
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|baseFolder
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|URL
name|configPropURL
init|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
return|return
name|loadPropertiesUrl
argument_list|(
name|configPropURL
argument_list|,
name|failIfNotFound
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Properties
name|loadPropertiesUrl
parameter_list|(
name|URL
name|configPropURL
parameter_list|,
name|boolean
name|failIfNotFound
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read the properties file.
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|configPropURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|configProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|failIfNotFound
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
block|}
name|addIncludes
argument_list|(
name|configPropURL
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
name|trimValues
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
specifier|private
specifier|static
name|void
name|trimValues
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|configProps
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|String
condition|)
block|{
name|String
name|v
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
operator|(
name|String
operator|)
name|key
argument_list|)
decl_stmt|;
name|configProps
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|v
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|addIncludes
parameter_list|(
name|URL
name|configPropURL
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|Exception
block|{
name|String
name|includes
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|INCLUDES_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|includes
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|includes
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|configPropURL
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
name|loadPropertiesUrl
argument_list|(
name|url
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|configProps
operator|.
name|putAll
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
name|configProps
operator|.
name|remove
argument_list|(
name|INCLUDES_PROPERTY
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|copySystemProperties
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"felix."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"karaf."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"org.bundles.framework."
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *<p>      * This method performs property variable substitution on the      * specified value. If the specified value contains the syntax      *<tt>${&lt;prop-name&gt;}</tt>, where<tt>&lt;prop-name&gt;</tt>      * refers to either a configuration property or a system property,      * then the corresponding property value is substituted for the variable      * placeholder. Multiple variable placeholders may exist in the      * specified value as well as nested variable placeholders, which      * are substituted from inner most to outer most. Configuration      * properties override system properties.      *</p>      *      * @param val         The string on which to perform property substitution.      * @param currentKey  The key of the property being evaluated used to      *                    detect cycles.      * @param cycleMap    Map of variable references used to detect nested cycles.      * @param configProps Set of configuration properties.      * @return The value of the specified string after system property substitution.      * @throws IllegalArgumentException If there was a syntax error in the      *                                  property placeholder syntax or a recursive variable reference.      */
specifier|public
specifier|static
name|String
name|substVars
parameter_list|(
name|String
name|val
parameter_list|,
name|String
name|currentKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cycleMap
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// If there is currently no cycle map, then create
comment|// one for detecting cycles for this invocation.
if|if
condition|(
name|cycleMap
operator|==
literal|null
condition|)
block|{
name|cycleMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Put the current key in the cycle map.
name|cycleMap
operator|.
name|put
argument_list|(
name|currentKey
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
comment|// Assume we have a value that is something like:
comment|// "leading ${foo.${bar}} middle ${baz} trailing"
comment|// Find the first ending '}' variable delimiter, which
comment|// will correspond to the first deepest nested variable
comment|// placeholder.
name|int
name|stopDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_STOP
argument_list|)
decl_stmt|;
comment|// Find the matching starting "${" variable delimiter
comment|// by looping until we find a start delimiter that is
comment|// greater than the stop delimiter we have found.
name|int
name|startDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|)
decl_stmt|;
while|while
condition|(
name|stopDelim
operator|>=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|,
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>
name|stopDelim
operator|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|idx
operator|<
name|stopDelim
condition|)
block|{
name|startDelim
operator|=
name|idx
expr_stmt|;
block|}
block|}
comment|// If we do not have a start or stop delimiter, then just
comment|// return the existing value.
if|if
condition|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|&&
operator|(
name|stopDelim
operator|<
literal|0
operator|)
condition|)
block|{
return|return
name|val
return|;
block|}
comment|// At this point, we found a stop delimiter without a start,
comment|// so throw an exception.
elseif|else
if|if
condition|(
operator|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|||
operator|(
name|startDelim
operator|>
name|stopDelim
operator|)
operator|)
operator|&&
operator|(
name|stopDelim
operator|>=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stop delimiter with no start delimiter: "
operator|+
name|val
argument_list|)
throw|;
block|}
comment|// At this point, we have found a variable placeholder so
comment|// we must perform a variable substitution on it.
comment|// Using the start and stop delimiter indices, extract
comment|// the first, deepest nested variable placeholder.
name|String
name|variable
init|=
name|val
operator|.
name|substring
argument_list|(
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|,
name|stopDelim
argument_list|)
decl_stmt|;
comment|// Verify that this is not a recursive variable reference.
if|if
condition|(
name|cycleMap
operator|.
name|get
argument_list|(
name|variable
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"recursive variable reference: "
operator|+
name|variable
argument_list|)
throw|;
block|}
comment|// Get the value of the deepest nested variable placeholder.
comment|// Try to configuration properties first.
name|String
name|substValue
init|=
operator|(
name|configProps
operator|!=
literal|null
operator|)
condition|?
name|configProps
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|null
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|substValue
operator|==
literal|null
condition|)
block|{
comment|// Ignore unknown property values.
name|substValue
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Remove the found variable from the cycle map, since
comment|// it may appear more than once in the value and we don't
comment|// want such situations to appear as a recursive reference.
name|cycleMap
operator|.
name|remove
argument_list|(
name|variable
argument_list|)
expr_stmt|;
comment|// Append the leading characters, the substituted value of
comment|// the variable, and the trailing characters to get the new
comment|// value.
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startDelim
argument_list|)
operator|+
name|substValue
operator|+
name|val
operator|.
name|substring
argument_list|(
name|stopDelim
operator|+
name|DELIM_STOP
operator|.
name|length
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now perform substitution again, since there could still
comment|// be substitutions to make.
name|val
operator|=
name|substVars
argument_list|(
name|val
argument_list|,
name|currentKey
argument_list|,
name|cycleMap
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
comment|// Return the value.
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

