begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|Felix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|cache
operator|.
name|BundleCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|util
operator|.
name|StringMap
import|;
end_import

begin_comment
comment|/**  *<p>  * This class is the default way to instantiate and execute the framework. It is not  * intended to be the only way to instantiate and execute the framework; rather, it is  * one example of how to do so. When embedding the framework in a host application,  * this class can serve as a simple guide of how to do so. It may even be  * worthwhile to reuse some of its property handling capabilities. This class  * is completely static and is only intended to start a single instance of  * the framework.  *</p> **/
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
comment|/**      * The system property name used to specify an URL to the system      * property file.     **/
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_PROPERTIES_PROP
init|=
literal|"felix.system.properties"
decl_stmt|;
comment|/**      * The default name used for the system properties file.     **/
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_PROPERTIES_FILE_VALUE
init|=
literal|"system.properties"
decl_stmt|;
comment|/**      * The system property name used to specify an URL to the configuration      * property file to be used for the created the framework instance.     **/
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_PROP
init|=
literal|"felix.config.properties"
decl_stmt|;
comment|/**      * The default name used for the configuration properties file.     **/
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_VALUE
init|=
literal|"config.properties"
decl_stmt|;
comment|/*      * The property for auto-discovering the bundles       */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_AUTO_START
init|=
literal|"felix.auto.start"
decl_stmt|;
specifier|private
specifier|static
name|Felix
name|m_felix
init|=
literal|null
decl_stmt|;
comment|/**      *<p>      * This method performs the main task of constructing an framework instance      * and starting its execution. The following functions are performed      * when invoked:      *</p>      *<ol>      *<li><i><b>Read the system properties file.<b></i> This is a file      *       containing properties to be pushed into<tt>System.setProperty()</tt>      *       before starting the framework. This mechanism is mainly shorthand      *       for people starting the framework from the command line to avoid having      *       to specify a bunch of<tt>-D</tt> system property definitions.      *       The only properties defined in this file that will impact the framework's      *       behavior are the those concerning setting HTTP proxies, such as      *<tt>http.proxyHost</tt>,<tt>http.proxyPort</tt>, and      *<tt>http.proxyAuth</tt>.      *</li>      *<li><i><b>Perform system property variable substitution on system      *       properties.</b></i> Any system properties in the system property      *       file whose value adheres to<tt>${&lt;system-prop-name&gt;}</tt>      *       syntax will have their value substituted with the appropriate      *       system property value.      *</li>      *<li><i><b>Read the framework's configuration property file.</b></i> This is      *       a file containing properties used to configure the framework      *       instance and to pass configuration information into      *       bundles installed into the framework instance. The configuration      *       property file is called<tt>config.properties</tt> by default      *       and is located in the<tt>conf/</tt> directory of the Felix      *       installation directory, which is the parent directory of the      *       directory containing the<tt>felix.jar</tt> file. It is possible      *       to use a different location for the property file by specifying      *       the desired URL using the<tt>felix.config.properties</tt>      *       system property; this should be set using the<tt>-D</tt> syntax      *       when executing the JVM. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more      *       information on the framework configuration options.      *</li>      *<li><i><b>Perform system property variable substitution on configuration      *       properties.</b></i> Any configuration properties whose value adheres to      *<tt>${&lt;system-prop-name&gt;}</tt> syntax will have their value      *       substituted with the appropriate system property value.      *</li>      *<li><i><b>Ensure the default bundle cache has sufficient information to      *       initialize.</b></i> The default implementation of the bundle cache      *       requires either a profile name or a profile directory in order to      *       start. The configuration properties are checked for at least one      *       of the<tt>felix.cache.profile</tt> or<tt>felix.cache.profiledir</tt>      *       properties. If neither is found, the user is asked to supply a profile      *       name that is added to the configuration property set. See the      *<a href="cache/DefaultBundleCache.html"><tt>DefaultBundleCache</tt></a>      *       documentation for more details its configuration options.      *</li>      *<li><i><b>Creates and starts a framework instance.</b></i> A       *       case insensitive      *<a href="util/StringMap.html"><tt>StringMap</tt></a>      *       is created for the configuration property file and is passed      *       into the framework.      *</li>      *</ol>      *<p>      * It should be noted that simply starting an instance of the framework is not enough      * to create an interactive session with it. It is necessary to install      * and start bundles that provide an interactive impl; this is generally      * done by specifying an "auto-start" property in the framework configuration      * property file. If no interactive impl bundles are installed or if      * the configuration property file cannot be found, the framework will appear to      * be hung or deadlocked. This is not the case, it is executing correctly,      * there is just no way to interact with it. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more information on      * framework configuration options.      *</p>      * @param argv An array of arguments, all of which are ignored.      * @throws Exception If an error occurs.     **/
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Load system properties.
name|Main
operator|.
name|loadSystemProperties
argument_list|()
expr_stmt|;
comment|// Read configuration properties.
name|Properties
name|configProps
init|=
name|Main
operator|.
name|loadConfigProperties
argument_list|()
decl_stmt|;
comment|// Copy framework properties from the system properties.
name|Main
operator|.
name|copySystemProperties
argument_list|(
name|configProps
argument_list|)
expr_stmt|;
comment|// See if the profile name property was specified.
name|String
name|profileName
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|BundleCache
operator|.
name|CACHE_PROFILE_PROP
argument_list|)
decl_stmt|;
comment|// See if the profile directory property was specified.
name|String
name|profileDirName
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|BundleCache
operator|.
name|CACHE_PROFILE_DIR_PROP
argument_list|)
decl_stmt|;
comment|// Print welcome banner.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nWelcome to ServiceMix."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=====================\n"
argument_list|)
expr_stmt|;
comment|// If no profile or profile directory is specified in the
comment|// properties, then ask for a profile name.
if|if
condition|(
operator|(
name|profileName
operator|==
literal|null
operator|)
operator|&&
operator|(
name|profileDirName
operator|==
literal|null
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Enter profile name: "
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|profileName
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not read input."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|profileName
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|BundleCache
operator|.
name|CACHE_PROFILE_PROP
argument_list|,
name|profileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// A profile directory or name must be specified.
if|if
condition|(
operator|(
name|profileDirName
operator|==
literal|null
operator|)
operator|&&
operator|(
name|profileName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"You must specify a profile name or directory."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Now create an instance of the framework.
name|m_felix
operator|=
operator|new
name|Felix
argument_list|(
operator|new
name|StringMap
argument_list|(
name|configProps
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|m_felix
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not create framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Loads the properties in the system property file associated with the      * framework installation into<tt>System.setProperty()</tt>. These properties      * are not directly used by the framework in anyway. By default, the system      * property file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>system.properties</tt>". The      * installation directory of Felix is assumed to be the parent directory of      * the<tt>felix.jar</tt> file as found on the system class path property.      * The precise file from which to load system properties can be set by      * initializing the "<tt>felix.system.properties</tt>" system property to an      * arbitrary URL.      *</p>     **/
specifier|public
specifier|static
name|void
name|loadSystemProperties
parameter_list|()
block|{
comment|// The system properties file is either specified by a system
comment|// property or it is in the same directory as the Felix JAR file.
comment|// Try to load it from one of these places.
comment|// See if the property URL was specified as a property.
name|URL
name|propURL
init|=
literal|null
decl_stmt|;
name|String
name|custom
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SYSTEM_PROPERTIES_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|custom
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|propURL
operator|=
operator|new
name|URL
argument_list|(
name|custom
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// Determine where the configuration directory is by figuring
comment|// out where felix.jar is located on the system class path.
name|File
name|confDir
init|=
literal|null
decl_stmt|;
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|classpath
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"servicemix.jar"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|classpath
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|,
name|index
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|start
condition|)
block|{
comment|// Get the path of the felix.jar file.
name|String
name|jarLocation
init|=
name|classpath
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|index
argument_list|)
decl_stmt|;
comment|// Calculate the conf directory based on the parent
comment|// directory of the felix.jar directory.
name|confDir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|jarLocation
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Can't figure it out so use the current directory as default.
name|confDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|propURL
operator|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|SYSTEM_PROPERTIES_FILE_VALUE
argument_list|)
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Read the properties file.
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|propURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
comment|// Ignore file not found.
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: Error loading system properties from "
operator|+
name|propURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return;
block|}
comment|// Perform variable substitution on specified properties.
for|for
control|(
name|Enumeration
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Loads the configuration properties in the configuration property file      * associated with the framework installation; these properties      * are accessible to the framework and to bundles and are intended      * for configuration purposes. By default, the configuration property      * file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>config.properties</tt>".      * The installation directory of Felix is assumed to be the parent      * directory of the<tt>felix.jar</tt> file as found on the system class      * path property. The precise file from which to load configuration      * properties can be set by initializing the "<tt>felix.config.properties</tt>"      * system property to an arbitrary URL.      *</p>      * @return A<tt>Properties</tt> instance or<tt>null</tt> if there was an error.     **/
specifier|public
specifier|static
name|Properties
name|loadConfigProperties
parameter_list|()
block|{
comment|// The config properties file is either specified by a system
comment|// property or it is in the conf/ directory of the Felix
comment|// installation directory.  Try to load it from one of these
comment|// places.
name|File
name|bundleDir
init|=
literal|null
decl_stmt|;
comment|// See if the property URL was specified as a property.
name|URL
name|propURL
init|=
literal|null
decl_stmt|;
name|String
name|custom
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONFIG_PROPERTIES_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|custom
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|propURL
operator|=
operator|new
name|URL
argument_list|(
name|custom
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
comment|// Determine where the configuration directory is by figuring
comment|// out where felix.jar is located on the system class path.
name|File
name|confDir
init|=
literal|null
decl_stmt|;
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|classpath
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"servicemix.jar"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|classpath
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|,
name|index
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|start
condition|)
block|{
comment|// Get the path of the felix.jar file.
name|String
name|jarLocation
init|=
name|classpath
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|index
argument_list|)
decl_stmt|;
comment|// Calculate the conf directory based on the parent
comment|// directory of the servicemix.jar directory.
name|confDir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|jarLocation
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
name|bundleDir
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|jarLocation
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"system"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Can't figure it out so use the current directory as default.
name|confDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
name|bundleDir
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|propURL
operator|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
name|CONFIG_PROPERTIES_FILE_VALUE
argument_list|)
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|// Read the properties file.
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|propURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
comment|// Ignore file not found.
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|propURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return
literal|null
return|;
block|}
comment|// Perform variable substitution for system properties.
for|for
control|(
name|Enumeration
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Mutate properties
name|Main
operator|.
name|processConfigurationProperties
argument_list|(
name|props
argument_list|,
name|bundleDir
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
specifier|static
name|void
name|copySystemProperties
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"felix."
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"org.osgi.framework.system.packages"
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"org.osgi.framework.bootdelegation"
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Process properties to customize default felix behavior      */
specifier|protected
specifier|static
name|void
name|processConfigurationProperties
parameter_list|(
name|Properties
name|props
parameter_list|,
name|File
name|bundleDir
parameter_list|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
argument_list|)
operator|&&
name|bundleDir
operator|!=
literal|null
condition|)
block|{
name|File
index|[]
name|bundles
init|=
name|bundleDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|bundles
index|[
name|i
index|]
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|bundles
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|props
operator|.
name|setProperty
argument_list|(
literal|"felix.auto.start.1"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|remove
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_START
init|=
literal|"${"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_STOP
init|=
literal|"}"
decl_stmt|;
comment|/**      *<p>      * This method performs property variable substitution on the      * specified value. If the specified value contains the syntax      *<tt>${&lt;prop-name&gt;}</tt>, where<tt>&lt;prop-name&gt;</tt>      * refers to either a configuration property or a system property,      * then the corresponding property value is substituted for the variable      * placeholder. Multiple variable placeholders may exist in the      * specified value as well as nested variable placeholders, which      * are substituted from inner most to outer most. Configuration      * properties override system properties.      *</p>      * @param val The string on which to perform property substitution.      * @param currentKey The key of the property being evaluated used to      *        detect cycles.      * @param cycleMap Map of variable references used to detect nested cycles.      * @param configProps Set of configuration properties.      * @return The value of the specified string after system property substitution.      * @throws IllegalArgumentException If there was a syntax error in the      *         property placeholder syntax or a recursive variable reference.     **/
specifier|public
specifier|static
name|String
name|substVars
parameter_list|(
name|String
name|val
parameter_list|,
name|String
name|currentKey
parameter_list|,
name|Map
name|cycleMap
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// If there is currently no cycle map, then create
comment|// one for detecting cycles for this invocation.
if|if
condition|(
name|cycleMap
operator|==
literal|null
condition|)
block|{
name|cycleMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
comment|// Put the current key in the cycle map.
name|cycleMap
operator|.
name|put
argument_list|(
name|currentKey
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
comment|// Assume we have a value that is something like:
comment|// "leading ${foo.${bar}} middle ${baz} trailing"
comment|// Find the first ending '}' variable delimiter, which
comment|// will correspond to the first deepest nested variable
comment|// placeholder.
name|int
name|stopDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_STOP
argument_list|)
decl_stmt|;
comment|// Find the matching starting "${" variable delimiter
comment|// by looping until we find a start delimiter that is
comment|// greater than the stop delimiter we have found.
name|int
name|startDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|)
decl_stmt|;
while|while
condition|(
name|stopDelim
operator|>=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|,
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>
name|stopDelim
operator|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|idx
operator|<
name|stopDelim
condition|)
block|{
name|startDelim
operator|=
name|idx
expr_stmt|;
block|}
block|}
comment|// If we do not have a start or stop delimiter, then just
comment|// return the existing value.
if|if
condition|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|&&
operator|(
name|stopDelim
operator|<
literal|0
operator|)
condition|)
block|{
return|return
name|val
return|;
block|}
comment|// At this point, we found a stop delimiter without a start,
comment|// so throw an exception.
elseif|else
if|if
condition|(
operator|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|||
operator|(
name|startDelim
operator|>
name|stopDelim
operator|)
operator|)
operator|&&
operator|(
name|stopDelim
operator|>=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stop delimiter with no start delimiter: "
operator|+
name|val
argument_list|)
throw|;
block|}
comment|// At this point, we have found a variable placeholder so
comment|// we must perform a variable substitution on it.
comment|// Using the start and stop delimiter indices, extract
comment|// the first, deepest nested variable placeholder.
name|String
name|variable
init|=
name|val
operator|.
name|substring
argument_list|(
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|,
name|stopDelim
argument_list|)
decl_stmt|;
comment|// Verify that this is not a recursive variable reference.
if|if
condition|(
name|cycleMap
operator|.
name|get
argument_list|(
name|variable
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"recursive variable reference: "
operator|+
name|variable
argument_list|)
throw|;
block|}
comment|// Get the value of the deepest nested variable placeholder.
comment|// Try to configuration properties first.
name|String
name|substValue
init|=
operator|(
name|configProps
operator|!=
literal|null
operator|)
condition|?
name|configProps
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|null
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|substValue
operator|==
literal|null
condition|)
block|{
comment|// Ignore unknown property values.
name|substValue
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Remove the found variable from the cycle map, since
comment|// it may appear more than once in the value and we don't
comment|// want such situations to appear as a recursive reference.
name|cycleMap
operator|.
name|remove
argument_list|(
name|variable
argument_list|)
expr_stmt|;
comment|// Append the leading characters, the substituted value of
comment|// the variable, and the trailing characters to get the new
comment|// value.
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startDelim
argument_list|)
operator|+
name|substValue
operator|+
name|val
operator|.
name|substring
argument_list|(
name|stopDelim
operator|+
name|DELIM_STOP
operator|.
name|length
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now perform substitution again, since there could still
comment|// be substitutions to make.
name|val
operator|=
name|substVars
argument_list|(
name|val
argument_list|,
name|currentKey
argument_list|,
name|cycleMap
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
comment|// Return the value.
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

