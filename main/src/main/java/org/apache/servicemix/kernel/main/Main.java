begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|Felix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|cache
operator|.
name|BundleCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|framework
operator|.
name|util
operator|.
name|StringMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|main
operator|.
name|spi
operator|.
name|MainService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
import|;
end_import

begin_comment
comment|/**  *<p>  * This class is the default way to instantiate and execute the framework. It is not  * intended to be the only way to instantiate and execute the framework; rather, it is  * one example of how to do so. When embedding the framework in a host application,  * this class can serve as a simple guide of how to do so. It may even be  * worthwhile to reuse some of its property handling capabilities. This class  * is completely static and is only intended to start a single instance of  * the framework.  *</p> **/
end_comment

begin_class
specifier|public
class|class
name|Main
implements|implements
name|MainService
implements|,
name|BundleActivator
block|{
comment|/**      * The default name used for the system properties file.      **/
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_PROPERTIES_FILE_NAME
init|=
literal|"system.properties"
decl_stmt|;
comment|/**      * The default name used for the configuration properties file.      **/
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
comment|/**      * The default name used for the startup properties file.      **/
specifier|public
specifier|static
specifier|final
name|String
name|STARTUP_PROPERTIES_FILE_NAME
init|=
literal|"startup.properties"
decl_stmt|;
comment|/**      * The property name prefix for the launcher's auto-install property.      **/
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_AUTO_INSTALL
init|=
literal|"felix.auto.install"
decl_stmt|;
comment|/**      * The property for auto-discovering the bundles       */
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_AUTO_START
init|=
literal|"felix.auto.start"
decl_stmt|;
comment|/**      * The system property for specifying the ServiceMix home directory.  The home directory      * hold the binary install of ServiceMix.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_SERVICEMIX_HOME
init|=
literal|"servicemix.home"
decl_stmt|;
comment|/**      * The environment variable for specifying the ServiceMix home directory.  The home directory      * hold the binary install of ServiceMix.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENV_SERVICEMIX_HOME
init|=
literal|"SERVICEMIX_HOME"
decl_stmt|;
comment|/**      * The system property for specifying the ServiceMix base directory.  The base directory      * holds the configuration and data for a ServiceMix instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|PROP_SERVICEMIX_BASE
init|=
literal|"servicemix.base"
decl_stmt|;
comment|/**      * The environment variable for specifying the ServiceMix base directory.  The base directory      * holds the configuration and data for a ServiceMix instance.      */
specifier|public
specifier|static
specifier|final
name|String
name|ENV_SERVICEMIX_BASE
init|=
literal|"SERVICEMIX_BASE"
decl_stmt|;
specifier|private
name|File
name|servicemixHome
decl_stmt|;
specifier|private
name|File
name|servicemixBase
decl_stmt|;
specifier|private
specifier|static
name|Properties
name|m_configProps
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Felix
name|m_felix
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|args
decl_stmt|;
specifier|private
name|int
name|exitCode
decl_stmt|;
specifier|public
name|Main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
comment|/**      * Used to instigate auto-install and auto-start configuration      * property processing via a custom framework activator during      * framework startup.      * @param context The system bundle context.      **/
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|Main
operator|.
name|processAutoProperties
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Currently does nothing as part of framework shutdown.      * @param context The system bundle context.      **/
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
comment|// Do nothing.
block|}
comment|/**      *<p>      * This method performs the main task of constructing an framework instance      * and starting its execution. The following functions are performed      * when invoked:      *</p>      *<ol>      *<li><i><b>Read the system properties file.<b></i> This is a file      *       containing properties to be pushed into<tt>System.setProperty()</tt>      *       before starting the framework. This mechanism is mainly shorthand      *       for people starting the framework from the command line to avoid having      *       to specify a bunch of<tt>-D</tt> system property definitions.      *       The only properties defined in this file that will impact the framework's      *       behavior are the those concerning setting HTTP proxies, such as      *<tt>http.proxyHost</tt>,<tt>http.proxyPort</tt>, and      *<tt>http.proxyAuth</tt>.      *</li>      *<li><i><b>Perform system property variable substitution on system      *       properties.</b></i> Any system properties in the system property      *       file whose value adheres to<tt>${&lt;system-prop-name&gt;}</tt>      *       syntax will have their value substituted with the appropriate      *       system property value.      *</li>      *<li><i><b>Read the framework's configuration property file.</b></i> This is      *       a file containing properties used to configure the framework      *       instance and to pass configuration information into      *       bundles installed into the framework instance. The configuration      *       property file is called<tt>config.properties</tt> by default      *       and is located in the<tt>conf/</tt> directory of the Felix      *       installation directory, which is the parent directory of the      *       directory containing the<tt>felix.jar</tt> file. It is possible      *       to use a different location for the property file by specifying      *       the desired URL using the<tt>felix.config.properties</tt>      *       system property; this should be set using the<tt>-D</tt> syntax      *       when executing the JVM. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more      *       information on the framework configuration options.      *</li>      *<li><i><b>Perform system property variable substitution on configuration      *       properties.</b></i> Any configuration properties whose value adheres to      *<tt>${&lt;system-prop-name&gt;}</tt> syntax will have their value      *       substituted with the appropriate system property value.      *</li>      *<li><i><b>Ensure the default bundle cache has sufficient information to      *       initialize.</b></i> The default implementation of the bundle cache      *       requires either a profile name or a profile directory in order to      *       start. The configuration properties are checked for at least one      *       of the<tt>felix.cache.profile</tt> or<tt>felix.cache.profiledir</tt>      *       properties. If neither is found, the user is asked to supply a profile      *       name that is added to the configuration property set. See the      *<a href="cache/DefaultBundleCache.html"><tt>DefaultBundleCache</tt></a>      *       documentation for more details its configuration options.      *</li>      *<li><i><b>Creates and starts a framework instance.</b></i> A       *       case insensitive      *<a href="util/StringMap.html"><tt>StringMap</tt></a>      *       is created for the configuration property file and is passed      *       into the framework.      *</li>      *</ol>      *<p>      * It should be noted that simply starting an instance of the framework is not enough      * to create an interactive session with it. It is necessary to install      * and start bundles that provide an interactive impl; this is generally      * done by specifying an "auto-start" property in the framework configuration      * property file. If no interactive impl bundles are installed or if      * the configuration property file cannot be found, the framework will appear to      * be hung or deadlocked. This is not the case, it is executing correctly,      * there is just no way to interact with it. Refer to the      *<a href="Felix.html#Felix(java.util.Map, java.util.List)">      *<tt>Felix</tt></a> constructor documentation for more information on      * framework configuration options.      *</p>      * @param args An array of arguments, all of which are ignored.      * @throws Exception If an error occurs.     **/
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Main
name|main
init|=
operator|new
name|Main
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|main
operator|.
name|servicemixHome
operator|=
name|getServiceMixHome
argument_list|()
expr_stmt|;
name|main
operator|.
name|servicemixBase
operator|=
name|getServiceMixBase
argument_list|(
name|main
operator|.
name|servicemixHome
argument_list|)
expr_stmt|;
comment|//System.out.println("ServiceMix Home: "+main.servicemixHome.getPath());
comment|//System.out.println("ServiceMix Base: "+main.servicemixBase.getPath());
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_SERVICEMIX_HOME
argument_list|,
name|main
operator|.
name|servicemixHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|PROP_SERVICEMIX_BASE
argument_list|,
name|main
operator|.
name|servicemixBase
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Load system properties.
name|main
operator|.
name|loadSystemProperties
argument_list|()
expr_stmt|;
comment|// Read configuration properties.
name|m_configProps
operator|=
name|main
operator|.
name|loadConfigProperties
argument_list|()
expr_stmt|;
comment|// Copy framework properties from the system properties.
name|Main
operator|.
name|copySystemProperties
argument_list|(
name|m_configProps
argument_list|)
expr_stmt|;
name|String
name|profileName
init|=
name|m_configProps
operator|.
name|getProperty
argument_list|(
name|BundleCache
operator|.
name|CACHE_PROFILE_PROP
argument_list|)
decl_stmt|;
name|String
name|profileDirName
init|=
name|m_configProps
operator|.
name|getProperty
argument_list|(
name|BundleCache
operator|.
name|CACHE_PROFILE_DIR_PROP
argument_list|)
decl_stmt|;
comment|// A profile directory or name must be specified.
if|if
condition|(
operator|(
name|profileDirName
operator|==
literal|null
operator|)
operator|&&
operator|(
name|profileName
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid "
operator|+
name|CONFIG_PROPERTIES_FILE_NAME
operator|+
literal|" configuration.  The profile directory was not specified."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Register the Main class so that other bundles can inspect the command line args.
specifier|final
name|CountDownLatch
name|shutdown
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BundleActivator
name|activator
init|=
operator|new
name|BundleActivator
argument_list|()
block|{
specifier|private
name|ServiceRegistration
name|registration
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|registration
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|MainService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|main
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|registration
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|shutdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|BundleActivator
argument_list|>
name|activations
init|=
operator|new
name|ArrayList
argument_list|<
name|BundleActivator
argument_list|>
argument_list|()
decl_stmt|;
name|activations
operator|.
name|add
argument_list|(
name|activator
argument_list|)
expr_stmt|;
name|activations
operator|.
name|add
argument_list|(
name|main
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Start up the OSGI framework
name|m_felix
operator|=
operator|new
name|Felix
argument_list|(
operator|new
name|StringMap
argument_list|(
name|m_configProps
argument_list|,
literal|false
argument_list|)
argument_list|,
name|activations
argument_list|)
expr_stmt|;
name|m_felix
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not create framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Wait for the system to get shutdown.
try|try
block|{
name|shutdown
operator|.
name|await
argument_list|()
expr_stmt|;
name|m_felix
operator|.
name|stopAndWait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error occured shutting down framework: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|exit
argument_list|(
name|main
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|File
name|getServiceMixHome
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|rc
init|=
literal|null
decl_stmt|;
comment|// Use the system property if specified.
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|PROP_SERVICEMIX_HOME
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|PROP_SERVICEMIX_HOME
operator|+
literal|" system property"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|ENV_SERVICEMIX_HOME
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|ENV_SERVICEMIX_HOME
operator|+
literal|" environment variable"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Try to figure it out using the jar file this class was loaded from.
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// guess the home from the location of the jar
name|URL
name|url
init|=
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|Main
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
operator|+
literal|".class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JarURLConnection
name|jarConnection
init|=
operator|(
name|JarURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|url
operator|=
name|jarConnection
operator|.
name|getJarFileURL
argument_list|()
expr_stmt|;
name|rc
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// Dig into the classpath to guess the location of the jar
name|String
name|classpath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|classpath
operator|.
name|toLowerCase
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"servicemix.jar"
argument_list|)
decl_stmt|;
name|int
name|start
init|=
name|classpath
operator|.
name|lastIndexOf
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|,
name|index
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|start
condition|)
block|{
name|String
name|jarLocation
init|=
name|classpath
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|rc
operator|=
operator|new
name|File
argument_list|(
name|jarLocation
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The ServiceMix install directory could not be determined.  Please set the "
operator|+
name|PROP_SERVICEMIX_HOME
operator|+
literal|" system property or the "
operator|+
name|ENV_SERVICEMIX_HOME
operator|+
literal|" environment variable."
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
specifier|private
specifier|static
name|File
name|validateDirectoryExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|errPrefix
parameter_list|)
block|{
name|File
name|rc
decl_stmt|;
try|try
block|{
name|rc
operator|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rc
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rc
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errPrefix
operator|+
literal|" '"
operator|+
name|path
operator|+
literal|"' : is not a directory"
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
specifier|private
specifier|static
name|File
name|getServiceMixBase
parameter_list|(
name|File
name|defaultValue
parameter_list|)
block|{
name|File
name|rc
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|PROP_SERVICEMIX_BASE
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|PROP_SERVICEMIX_BASE
operator|+
literal|" system property"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|ENV_SERVICEMIX_BASE
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|validateDirectoryExists
argument_list|(
name|path
argument_list|,
literal|"Invalid "
operator|+
name|ENV_SERVICEMIX_BASE
operator|+
literal|" environment variable"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      *<p>      * Processes the auto-install and auto-start properties from the      * specified configuration properties.      */
specifier|private
specifier|static
name|void
name|processAutoProperties
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
comment|// Retrieve the Start Level service, since it will be needed
comment|// to set the start level of the installed bundles.
name|StartLevel
name|sl
init|=
operator|(
name|StartLevel
operator|)
name|context
operator|.
name|getService
argument_list|(
name|context
operator|.
name|getServiceReference
argument_list|(
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|startlevel
operator|.
name|StartLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// The auto-install property specifies a space-delimited list of
comment|// bundle URLs to be automatically installed into each new profile;
comment|// the start level to which the bundles are assigned is specified by
comment|// appending a ".n" to the auto-install property name, where "n" is
comment|// the desired start level for the list of bundles.
for|for
control|(
name|Iterator
name|i
init|=
name|m_configProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Ignore all keys that are not the auto-install property.
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|PROPERTY_AUTO_INSTALL
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// If the auto-install property does not have a start level,
comment|// then assume it is the default bundle start level, otherwise
comment|// parse the specified start level.
name|int
name|startLevel
init|=
name|sl
operator|.
name|getInitialBundleStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|PROPERTY_AUTO_INSTALL
argument_list|)
condition|)
block|{
try|try
block|{
name|startLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|key
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid property: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|m_configProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
init|=
literal|null
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Bundle
name|b
init|=
name|context
operator|.
name|installBundle
argument_list|(
name|location
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sl
operator|.
name|setBundleStartLevel
argument_list|(
name|b
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Auto-properties install: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
comment|// The auto-start property specifies a space-delimited list of
comment|// bundle URLs to be automatically installed and started into each
comment|// new profile; the start level to which the bundles are assigned
comment|// is specified by appending a ".n" to the auto-start property name,
comment|// where "n" is the desired start level for the list of bundles.
comment|// The following code starts bundles in two passes, first it installs
comment|// them, then it starts them.
for|for
control|(
name|Iterator
name|i
init|=
name|m_configProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Ignore all keys that are not the auto-start property.
if|if
condition|(
operator|!
name|key
operator|.
name|startsWith
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// If the auto-start property does not have a start level,
comment|// then assume it is the default bundle start level, otherwise
comment|// parse the specified start level.
name|int
name|startLevel
init|=
name|sl
operator|.
name|getInitialBundleStartLevel
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
condition|)
block|{
try|try
block|{
name|startLevel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|key
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid property: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|m_configProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
init|=
literal|null
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Bundle
name|b
init|=
name|context
operator|.
name|installBundle
argument_list|(
name|location
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sl
operator|.
name|setBundleStartLevel
argument_list|(
name|b
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Auto-properties install:"
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
comment|// Now loop through and start the installed bundles.
for|for
control|(
name|Iterator
name|i
init|=
name|m_configProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|m_configProps
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|,
literal|"\" "
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|location
init|=
literal|null
decl_stmt|;
do|do
block|{
name|location
operator|=
name|nextLocation
argument_list|(
name|st
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
comment|// Installing twice just returns the same bundle.
try|try
block|{
name|Bundle
name|b
init|=
name|context
operator|.
name|installBundle
argument_list|(
name|location
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Auto-properties start: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|location
operator|!=
literal|null
condition|)
do|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|nextLocation
parameter_list|(
name|StringTokenizer
name|st
parameter_list|)
block|{
name|String
name|retVal
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|tokenList
init|=
literal|"\" "
decl_stmt|;
name|StringBuffer
name|tokBuf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|String
name|tok
init|=
literal|null
decl_stmt|;
name|boolean
name|inQuote
init|=
literal|false
decl_stmt|;
name|boolean
name|tokStarted
init|=
literal|false
decl_stmt|;
name|boolean
name|exit
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|exit
operator|)
condition|)
block|{
name|tok
operator|=
name|st
operator|.
name|nextToken
argument_list|(
name|tokenList
argument_list|)
expr_stmt|;
if|if
condition|(
name|tok
operator|.
name|equals
argument_list|(
literal|"\""
argument_list|)
condition|)
block|{
name|inQuote
operator|=
operator|!
name|inQuote
expr_stmt|;
if|if
condition|(
name|inQuote
condition|)
block|{
name|tokenList
operator|=
literal|"\""
expr_stmt|;
block|}
else|else
block|{
name|tokenList
operator|=
literal|"\" "
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|tok
operator|.
name|equals
argument_list|(
literal|" "
argument_list|)
condition|)
block|{
if|if
condition|(
name|tokStarted
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
name|tokStarted
operator|=
literal|false
expr_stmt|;
name|tokBuf
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|exit
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|tokStarted
operator|=
literal|true
expr_stmt|;
name|tokBuf
operator|.
name|append
argument_list|(
name|tok
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Handle case where end of token stream and
comment|// still got data
if|if
condition|(
operator|(
operator|!
name|exit
operator|)
operator|&&
operator|(
name|tokStarted
operator|)
condition|)
block|{
name|retVal
operator|=
name|tokBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retVal
return|;
block|}
comment|/**      *<p>      * Loads the properties in the system property file associated with the      * framework installation into<tt>System.setProperty()</tt>. These properties      * are not directly used by the framework in anyway. By default, the system      * property file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>system.properties</tt>". The      * installation directory of Felix is assumed to be the parent directory of      * the<tt>felix.jar</tt> file as found on the system class path property.      * The precise file from which to load system properties can be set by      * initializing the "<tt>felix.system.properties</tt>" system property to an      * arbitrary URL.      *</p>     **/
specifier|private
name|void
name|loadSystemProperties
parameter_list|()
block|{
comment|// The system properties file is either specified by a system
comment|// property or it is in the same directory as the Felix JAR file.
comment|// Try to load it from one of these places.
comment|// See if the property URL was specified as a property.
name|URL
name|propURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|servicemixBase
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|SYSTEM_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|propURL
operator|=
name|file
operator|.
name|toURL
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Read the properties file.
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|propURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
comment|// Ignore file not found.
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: Error loading system properties from "
operator|+
name|propURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return;
block|}
comment|// Perform variable substitution on specified properties.
for|for
control|(
name|Enumeration
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Loads the configuration properties in the configuration property file      * associated with the framework installation; these properties      * are accessible to the framework and to bundles and are intended      * for configuration purposes. By default, the configuration property      * file is located in the<tt>conf/</tt> directory of the Felix      * installation directory and is called "<tt>config.properties</tt>".      * The installation directory of Felix is assumed to be the parent      * directory of the<tt>felix.jar</tt> file as found on the system class      * path property. The precise file from which to load configuration      * properties can be set by initializing the "<tt>felix.config.properties</tt>"      * system property to an arbitrary URL.      *</p>      * @return A<tt>Properties</tt> instance or<tt>null</tt> if there was an error.     **/
specifier|private
name|Properties
name|loadConfigProperties
parameter_list|()
block|{
comment|// The config properties file is either specified by a system
comment|// property or it is in the conf/ directory of the Felix
comment|// installation directory.  Try to load it from one of these
comment|// places.
name|ArrayList
argument_list|<
name|File
argument_list|>
name|bundleDirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// See if the property URL was specified as a property.
name|URL
name|configPropURL
init|=
literal|null
decl_stmt|;
name|URL
name|startupPropURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|servicemixBase
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|configPropURL
operator|=
name|file
operator|.
name|toURL
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|servicemixBase
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|STARTUP_PROPERTIES_FILE_NAME
argument_list|)
expr_stmt|;
name|startupPropURL
operator|=
name|file
operator|.
name|toURL
argument_list|()
expr_stmt|;
if|if
condition|(
name|servicemixBase
operator|.
name|equals
argument_list|(
name|servicemixHome
argument_list|)
condition|)
block|{
name|bundleDirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|servicemixHome
argument_list|,
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bundleDirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|servicemixBase
argument_list|,
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
name|bundleDirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|servicemixHome
argument_list|,
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Properties
name|configProps
init|=
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|)
decl_stmt|;
name|Properties
name|startupProps
init|=
name|loadPropertiesFile
argument_list|(
name|startupPropURL
argument_list|)
decl_stmt|;
comment|// Perform variable substitution for system properties.
for|for
control|(
name|Enumeration
name|e
init|=
name|configProps
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|configProps
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|configProps
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|configProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Mutate properties
name|Main
operator|.
name|processConfigurationProperties
argument_list|(
name|configProps
argument_list|,
name|startupProps
argument_list|,
name|bundleDirs
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
specifier|private
specifier|static
name|Properties
name|loadPropertiesFile
parameter_list|(
name|URL
name|configPropURL
parameter_list|)
block|{
comment|// Read the properties file.
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|configPropURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|configProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
comment|// Ignore file not found.
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return
literal|null
return|;
block|}
return|return
name|configProps
return|;
block|}
specifier|private
specifier|static
name|void
name|copySystemProperties
parameter_list|(
name|Properties
name|configProps
parameter_list|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"felix."
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"org.osgi.framework.system.packages"
argument_list|)
operator|||
name|key
operator|.
name|equals
argument_list|(
literal|"org.osgi.framework.bootdelegation"
argument_list|)
condition|)
block|{
name|configProps
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Process properties to customize default felix behavior      * @param startupProps       */
specifier|private
specifier|static
name|void
name|processConfigurationProperties
parameter_list|(
name|Properties
name|props
parameter_list|,
name|Properties
name|startupProps
parameter_list|,
name|ArrayList
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|)
block|{
if|if
condition|(
name|bundleDirs
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|bundleDir
range|:
name|bundleDirs
control|)
block|{
comment|// We should start all the bundles in the system dir.
name|File
index|[]
name|bundles
init|=
name|bundleDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|bundles
operator|!=
literal|null
operator|&&
name|i
operator|<
name|bundles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|bundles
index|[
name|i
index|]
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|bundles
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|props
operator|.
name|setProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|STARTUP_PROPERTIES_FILE_NAME
operator|.
name|equals
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_AUTO_START
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|props
operator|.
name|remove
argument_list|(
name|PROPERTY_AUTO_START
argument_list|)
expr_stmt|;
comment|// We should start the bundles in the startup.properties file.
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
name|levels
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|startupProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|file
init|=
name|findFile
argument_list|(
name|bundleDirs
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|Integer
name|level
decl_stmt|;
try|try
block|{
name|level
operator|=
operator|new
name|Integer
argument_list|(
name|startupProps
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e1
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" (run level must be an integer)"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StringBuffer
name|sb
init|=
name|levels
operator|.
name|get
argument_list|(
name|level
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|==
literal|null
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|levels
operator|.
name|put
argument_list|(
name|level
argument_list|,
name|sb
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Ignoring "
operator|+
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" ("
operator|+
name|e
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bundle listed in "
operator|+
name|STARTUP_PROPERTIES_FILE_NAME
operator|+
literal|" configuration not found: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|StringBuffer
argument_list|>
name|entry
range|:
name|levels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|PROPERTY_AUTO_START
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|ArrayList
argument_list|<
name|File
argument_list|>
name|bundleDirs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|File
name|bundleDir
range|:
name|bundleDirs
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bundleDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|file
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_START
init|=
literal|"${"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_STOP
init|=
literal|"}"
decl_stmt|;
comment|/**      *<p>      * This method performs property variable substitution on the      * specified value. If the specified value contains the syntax      *<tt>${&lt;prop-name&gt;}</tt>, where<tt>&lt;prop-name&gt;</tt>      * refers to either a configuration property or a system property,      * then the corresponding property value is substituted for the variable      * placeholder. Multiple variable placeholders may exist in the      * specified value as well as nested variable placeholders, which      * are substituted from inner most to outer most. Configuration      * properties override system properties.      *</p>      * @param val The string on which to perform property substitution.      * @param currentKey The key of the property being evaluated used to      *        detect cycles.      * @param cycleMap Map of variable references used to detect nested cycles.      * @param configProps Set of configuration properties.      * @return The value of the specified string after system property substitution.      * @throws IllegalArgumentException If there was a syntax error in the      *         property placeholder syntax or a recursive variable reference.     **/
specifier|private
specifier|static
name|String
name|substVars
parameter_list|(
name|String
name|val
parameter_list|,
name|String
name|currentKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cycleMap
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// If there is currently no cycle map, then create
comment|// one for detecting cycles for this invocation.
if|if
condition|(
name|cycleMap
operator|==
literal|null
condition|)
block|{
name|cycleMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Put the current key in the cycle map.
name|cycleMap
operator|.
name|put
argument_list|(
name|currentKey
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
comment|// Assume we have a value that is something like:
comment|// "leading ${foo.${bar}} middle ${baz} trailing"
comment|// Find the first ending '}' variable delimiter, which
comment|// will correspond to the first deepest nested variable
comment|// placeholder.
name|int
name|stopDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_STOP
argument_list|)
decl_stmt|;
comment|// Find the matching starting "${" variable delimiter
comment|// by looping until we find a start delimiter that is
comment|// greater than the stop delimiter we have found.
name|int
name|startDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|)
decl_stmt|;
while|while
condition|(
name|stopDelim
operator|>=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|,
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>
name|stopDelim
operator|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|idx
operator|<
name|stopDelim
condition|)
block|{
name|startDelim
operator|=
name|idx
expr_stmt|;
block|}
block|}
comment|// If we do not have a start or stop delimiter, then just
comment|// return the existing value.
if|if
condition|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|&&
operator|(
name|stopDelim
operator|<
literal|0
operator|)
condition|)
block|{
return|return
name|val
return|;
block|}
comment|// At this point, we found a stop delimiter without a start,
comment|// so throw an exception.
elseif|else
if|if
condition|(
operator|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|||
operator|(
name|startDelim
operator|>
name|stopDelim
operator|)
operator|)
operator|&&
operator|(
name|stopDelim
operator|>=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stop delimiter with no start delimiter: "
operator|+
name|val
argument_list|)
throw|;
block|}
comment|// At this point, we have found a variable placeholder so
comment|// we must perform a variable substitution on it.
comment|// Using the start and stop delimiter indices, extract
comment|// the first, deepest nested variable placeholder.
name|String
name|variable
init|=
name|val
operator|.
name|substring
argument_list|(
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|,
name|stopDelim
argument_list|)
decl_stmt|;
comment|// Verify that this is not a recursive variable reference.
if|if
condition|(
name|cycleMap
operator|.
name|get
argument_list|(
name|variable
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"recursive variable reference: "
operator|+
name|variable
argument_list|)
throw|;
block|}
comment|// Get the value of the deepest nested variable placeholder.
comment|// Try to configuration properties first.
name|String
name|substValue
init|=
operator|(
name|configProps
operator|!=
literal|null
operator|)
condition|?
name|configProps
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|null
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|substValue
operator|==
literal|null
condition|)
block|{
comment|// Ignore unknown property values.
name|substValue
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Remove the found variable from the cycle map, since
comment|// it may appear more than once in the value and we don't
comment|// want such situations to appear as a recursive reference.
name|cycleMap
operator|.
name|remove
argument_list|(
name|variable
argument_list|)
expr_stmt|;
comment|// Append the leading characters, the substituted value of
comment|// the variable, and the trailing characters to get the new
comment|// value.
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startDelim
argument_list|)
operator|+
name|substValue
operator|+
name|val
operator|.
name|substring
argument_list|(
name|stopDelim
operator|+
name|DELIM_STOP
operator|.
name|length
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now perform substitution again, since there could still
comment|// be substitutions to make.
name|val
operator|=
name|substVars
argument_list|(
name|val
argument_list|,
name|currentKey
argument_list|,
name|cycleMap
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
comment|// Return the value.
return|return
name|val
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.servicemix.main.MainService#getArgs() 	 */
specifier|public
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
specifier|public
name|int
name|getExitCode
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
specifier|public
name|void
name|setExitCode
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|.
name|exitCode
operator|=
name|exitCode
expr_stmt|;
block|}
specifier|public
name|File
name|getServicemixHome
parameter_list|()
block|{
return|return
name|servicemixHome
return|;
block|}
specifier|public
name|File
name|getServicemixBase
parameter_list|()
block|{
return|return
name|servicemixBase
return|;
block|}
block|}
end_class

end_unit

