begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Simple utility class that creates a map for string-based keys by  * extending<tt>TreeMap</tt>. This map can be set to use case-sensitive  * or case-insensitive comparison when searching for the key.  * Any keys put into this map will be converted to  * a<tt>String</tt> using the<tt>toString()</tt> method,  * since it is only intended to compare strings. **/
end_comment

begin_class
specifier|public
class|class
name|StringMap
extends|extends
name|TreeMap
block|{
specifier|public
name|StringMap
parameter_list|()
block|{
name|this
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StringMap
parameter_list|(
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|StringComparator
argument_list|(
name|caseSensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StringMap
parameter_list|(
name|Map
name|map
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|this
argument_list|(
name|caseSensitive
argument_list|)
expr_stmt|;
name|putAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|super
operator|.
name|put
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
operator|(
operator|(
name|StringComparator
operator|)
name|comparator
argument_list|()
operator|)
operator|.
name|isCaseSensitive
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCaseSensitive
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
operator|(
operator|(
name|StringComparator
operator|)
name|comparator
argument_list|()
operator|)
operator|.
name|setCaseSensitive
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|StringComparator
implements|implements
name|Comparator
block|{
specifier|private
name|boolean
name|m_isCaseSensitive
init|=
literal|true
decl_stmt|;
specifier|public
name|StringComparator
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|m_isCaseSensitive
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|m_isCaseSensitive
condition|)
block|{
return|return
name|o1
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|o1
operator|.
name|toString
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|isCaseSensitive
parameter_list|()
block|{
return|return
name|m_isCaseSensitive
return|;
block|}
specifier|public
name|void
name|setCaseSensitive
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|m_isCaseSensitive
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

