begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Represents an exclusive lock on a database,  * used to avoid multiple Karaf instances attempting  * to become master.  *   * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|MySQLJDBCLock
extends|extends
name|DefaultJDBCLock
block|{
specifier|public
name|MySQLJDBCLock
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|super
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
name|Statements
name|createStatements
parameter_list|()
block|{
name|Statements
name|statements
init|=
operator|new
name|Statements
argument_list|()
decl_stmt|;
name|statements
operator|.
name|setTableName
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setNodeName
argument_list|(
name|clusterName
argument_list|)
expr_stmt|;
name|String
index|[]
name|lockCreateSchemaStatements
init|=
name|statements
operator|.
name|getLockCreateSchemaStatements
argument_list|(
name|getCurrentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|lockCreateSchemaStatements
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
if|if
condition|(
name|lockCreateSchemaStatements
index|[
name|index
index|]
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"CREATE TABLE"
argument_list|)
condition|)
block|{
name|lockCreateSchemaStatements
index|[
name|index
index|]
operator|=
name|lockCreateSchemaStatements
index|[
name|index
index|]
operator|+
literal|" ENGINE=INNODB"
expr_stmt|;
block|}
block|}
return|return
name|statements
return|;
block|}
annotation|@
name|Override
name|Connection
name|createConnection
parameter_list|(
name|String
name|driver
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|url
operator|=
operator|(
name|url
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"createDatabaseIfNotExist=true"
argument_list|)
operator|)
condition|?
name|url
else|:
operator|(
operator|(
name|url
operator|.
name|contains
argument_list|(
literal|"?"
argument_list|)
operator|)
condition|?
name|url
operator|+
literal|"&createDatabaseIfNotExist=true"
else|:
name|url
operator|+
literal|"?createDatabaseIfNotExist=true"
operator|)
expr_stmt|;
return|return
name|super
operator|.
name|createConnection
argument_list|(
name|driver
argument_list|,
name|url
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
return|;
block|}
block|}
end_class

end_unit

