begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DriverManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * Represents an exclusive lock on a database,  * used to avoid multiple Karaf instances attempting  * to become master.  *   * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|OracleJDBCLock
implements|implements
name|Lock
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|OracleJDBCLock
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_URL
init|=
literal|"karaf.lock.jdbc.url"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_JDBC_DRIVER
init|=
literal|"karaf.lock.jdbc.driver"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_JDBC_USER
init|=
literal|"karaf.lock.jdbc.user"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_JDBC_PASSWORD
init|=
literal|"karaf.lock.jdbc.password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_JDBC_TABLE
init|=
literal|"karaf.lock.jdbc.table"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_JDBC_CLUSTERNAME
init|=
literal|"karaf.lock.jdbc.clustername"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_LOCK_JDBC_TIMEOUT
init|=
literal|"karaf.lock.jdbc.timeout"
decl_stmt|;
specifier|private
specifier|final
name|Statements
name|statements
decl_stmt|;
specifier|private
name|Connection
name|lockConnection
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
specifier|private
name|String
name|database
decl_stmt|;
specifier|private
name|String
name|driver
decl_stmt|;
specifier|private
name|String
name|user
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|table
decl_stmt|;
specifier|private
name|String
name|clusterName
decl_stmt|;
specifier|private
name|int
name|timeout
decl_stmt|;
specifier|public
name|OracleJDBCLock
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|LOG
operator|.
name|addHandler
argument_list|(
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_URL
argument_list|)
expr_stmt|;
name|this
operator|.
name|driver
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_JDBC_DRIVER
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_JDBC_USER
argument_list|)
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_JDBC_PASSWORD
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_JDBC_TABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_JDBC_CLUSTERNAME
argument_list|)
expr_stmt|;
name|String
name|time
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_JDBC_TIMEOUT
argument_list|)
decl_stmt|;
name|this
operator|.
name|lockConnection
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|table
operator|=
literal|"KARAF_LOCK"
expr_stmt|;
block|}
if|if
condition|(
name|clusterName
operator|==
literal|null
condition|)
block|{
name|clusterName
operator|=
literal|"karaf"
expr_stmt|;
block|}
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|timeout
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|time
argument_list|)
operator|*
literal|1000
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|timeout
operator|=
literal|10000
expr_stmt|;
comment|// 10 seconds
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|""
expr_stmt|;
block|}
name|int
name|db
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_URL
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|this
operator|.
name|url
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_URL
argument_list|)
expr_stmt|;
name|this
operator|.
name|database
operator|=
name|props
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOCK_URL
argument_list|)
operator|.
name|substring
argument_list|(
name|db
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|statements
operator|=
operator|new
name|Statements
argument_list|(
name|database
argument_list|,
name|table
argument_list|,
name|clusterName
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setDBCreateStatement
argument_list|(
literal|"create database "
operator|+
name|database
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setCreateStatement
argument_list|(
literal|"create table "
operator|+
name|table
operator|+
literal|" (MOMENT number(20), NODE varchar2(20))"
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setPopulateStatement
argument_list|(
literal|"insert into "
operator|+
name|table
operator|+
literal|" (MOMENT, NODE) values ('1', '"
operator|+
name|clusterName
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setColumnNames
argument_list|(
literal|"MOMENT"
argument_list|,
literal|"NODE"
argument_list|)
expr_stmt|;
name|testDB
argument_list|()
expr_stmt|;
block|}
comment|/**      * testDB - ensure specified database exists.      *      */
specifier|private
name|void
name|testDB
parameter_list|()
block|{
try|try
block|{
name|lockConnection
operator|=
name|getConnection
argument_list|(
name|driver
argument_list|,
name|url
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|lockConnection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|statements
operator|.
name|init
argument_list|(
name|lockConnection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Error occured while attempting to obtain connection: "
operator|+
name|e
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|lockConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|lockConnection
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|f
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Error occured while cleaning up connection: "
operator|+
name|f
operator|+
literal|" "
operator|+
name|f
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * setUpdateCursor - Send Update directive to data base server.      *      * @throws Exception      */
specifier|private
name|boolean
name|setUpdateCursor
parameter_list|()
throws|throws
name|Exception
block|{
name|PreparedStatement
name|statement
init|=
literal|null
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|(
name|lockConnection
operator|==
literal|null
operator|)
operator|||
operator|(
name|lockConnection
operator|.
name|isClosed
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"OracleJDBCLock#setUpdateCursor:: connection: "
operator|+
name|url
argument_list|)
expr_stmt|;
name|lockConnection
operator|=
name|getConnection
argument_list|(
name|driver
argument_list|,
name|url
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|lockConnection
operator|.
name|setAutoCommit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|statements
operator|.
name|init
argument_list|(
name|lockConnection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"OracleJDBCLock#setUpdateCursor:: connection already established."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|sql
init|=
literal|"SELECT * FROM "
operator|+
name|table
operator|+
literal|" FOR UPDATE"
decl_stmt|;
name|statement
operator|=
name|lockConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
expr_stmt|;
name|result
operator|=
name|statement
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Could not obtain connection: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|lockConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|lockConnection
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|statement
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Cleaning up DB connection."
argument_list|)
expr_stmt|;
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Caught while closing statement: "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|statement
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"Connected to data source: "
operator|+
name|url
operator|+
literal|" With RS: "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * lock - a KeepAlive function to maintain lock.       *      * @return true if connection lock retained, false otherwise.      */
specifier|public
name|boolean
name|lock
parameter_list|()
block|{
name|PreparedStatement
name|statement
init|=
literal|null
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|setUpdateCursor
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Could not set DB update cursor"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
literal|"OracleJDBCLock#lock:: have set Update Cursor, now perform query"
argument_list|)
expr_stmt|;
name|String
name|up
init|=
literal|"SELECT * FROM "
operator|+
name|table
decl_stmt|;
name|statement
operator|=
name|lockConnection
operator|.
name|prepareStatement
argument_list|(
name|up
argument_list|)
expr_stmt|;
return|return
name|statement
operator|.
name|execute
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Failed to acquire database lock: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|statement
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Failed to close statement"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * release - terminate the lock connection safely.      */
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|lockConnection
operator|!=
literal|null
operator|&&
operator|!
name|lockConnection
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|lockConnection
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|lockConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|lockConnection
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * isAlive - test if lock still exists.      */
specifier|public
name|boolean
name|isAlive
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|(
name|lockConnection
operator|==
literal|null
operator|)
operator|||
operator|(
name|lockConnection
operator|.
name|isClosed
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Lost lock!"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * getConnection - Obtain connection to database via jdbc driver.      *      * @throws Exception      * @param driver, the JDBC driver class.      * @param url, url to data source.      * @param username, user to access data source.      * @param password, password for specified user.      * @return connection, null returned if conenction fails.      */
specifier|private
name|Connection
name|getConnection
parameter_list|(
name|String
name|driver
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|conn
operator|=
name|DriverManager
operator|.
name|getConnection
argument_list|(
name|url
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Error occured while setting up JDBC connection: "
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|conn
return|;
block|}
block|}
end_class

end_unit

