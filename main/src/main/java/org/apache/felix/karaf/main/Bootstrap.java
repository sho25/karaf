begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_class
specifier|public
class|class
name|Bootstrap
block|{
specifier|public
specifier|static
specifier|final
name|String
name|FRAMEWORK_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KARAF_FRAMEWORK
init|=
literal|"karaf.framework"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|File
name|home
init|=
name|Utils
operator|.
name|getKarafHome
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|FRAMEWORK_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|framework
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_FRAMEWORK
argument_list|)
decl_stmt|;
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|KARAF_FRAMEWORK
operator|+
literal|" must be set in the etc/"
operator|+
name|FRAMEWORK_PROPERTIES_FILE_NAME
operator|+
literal|" configuration file"
argument_list|)
throw|;
block|}
name|String
name|bundle
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_FRAMEWORK
operator|+
literal|"."
operator|+
name|framework
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property "
operator|+
name|KARAF_FRAMEWORK
operator|+
literal|"."
operator|+
name|framework
operator|+
literal|" must be set in the etc/"
operator|+
name|FRAMEWORK_PROPERTIES_FILE_NAME
operator|+
literal|" configuration file"
argument_list|)
throw|;
block|}
name|File
name|bundleFile
init|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundleFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|bundleFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
name|URLClassLoader
name|classLoader
init|=
operator|(
name|URLClassLoader
operator|)
name|Bootstrap
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|Method
name|mth
init|=
name|URLClassLoader
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"addURL"
argument_list|,
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
name|mth
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mth
operator|.
name|invoke
argument_list|(
name|classLoader
argument_list|,
name|bundleFile
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|Main
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

