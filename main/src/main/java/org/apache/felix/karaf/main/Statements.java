begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_class
specifier|public
class|class
name|Statements
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Statements
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|String
name|lockTableName
init|=
literal|"KARAF_LOCK"
decl_stmt|;
specifier|private
name|String
name|clusterName
init|=
literal|"karaf"
decl_stmt|;
specifier|private
name|String
name|dbName
init|=
literal|"sample"
decl_stmt|;
specifier|private
name|String
name|lockCreateStatement
decl_stmt|;
specifier|private
name|String
name|lockDBCreateStatement
decl_stmt|;
specifier|private
name|String
name|lockPopulateStatement
decl_stmt|;
specifier|public
name|Statements
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|LOG
operator|.
name|addHandler
argument_list|(
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockTableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|lockCreateStatement
operator|=
literal|"create table "
operator|+
name|lockTableName
operator|+
literal|" (TIME bigint, CLUSTER varchar(20))"
expr_stmt|;
name|this
operator|.
name|lockPopulateStatement
operator|=
literal|"insert into "
operator|+
name|lockTableName
operator|+
literal|" (TIME, CLUSTER) values (1, '"
operator|+
name|clusterName
operator|+
literal|"')"
expr_stmt|;
block|}
specifier|public
name|Statements
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|clusterName
parameter_list|)
block|{
name|LOG
operator|.
name|addHandler
argument_list|(
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|lockTableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|clusterName
operator|=
name|clusterName
expr_stmt|;
name|this
operator|.
name|lockDBCreateStatement
operator|=
literal|"create database if not exists "
operator|+
name|dbName
expr_stmt|;
name|this
operator|.
name|lockCreateStatement
operator|=
literal|"create table "
operator|+
name|lockTableName
operator|+
literal|" (TIME bigint, CLUSTER varchar(20)) ENGINE = INNODB"
expr_stmt|;
name|this
operator|.
name|lockPopulateStatement
operator|=
literal|"insert into "
operator|+
name|lockTableName
operator|+
literal|" (TIME, CLUSTER) values (1, '"
operator|+
name|clusterName
operator|+
literal|"')"
expr_stmt|;
block|}
specifier|public
name|String
name|setUpdateCursor
parameter_list|()
block|{
name|String
name|test
init|=
literal|"SELECT * FROM "
operator|+
name|lockTableName
operator|+
literal|" FOR UPDATE"
decl_stmt|;
return|return
name|test
return|;
block|}
specifier|public
name|String
name|getLockUpdateStatement
parameter_list|(
name|long
name|timeStamp
parameter_list|)
block|{
name|String
name|lockUpdateStatement
init|=
literal|""
decl_stmt|;
name|lockUpdateStatement
operator|=
literal|"UPDATE "
operator|+
name|lockTableName
operator|+
literal|" SET TIME="
operator|+
name|timeStamp
operator|+
literal|" WHERE CLUSTER = '"
operator|+
name|clusterName
operator|+
literal|"'"
expr_stmt|;
return|return
name|lockUpdateStatement
return|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Connection
name|lockConnection
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|Statement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|lockConnection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|s
operator|.
name|execute
argument_list|(
name|lockDBCreateStatement
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"SQL Exception: "
operator|+
name|e
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Could not create database: "
operator|+
name|ignore
operator|+
literal|" "
operator|+
name|ignore
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
comment|/**      * init - initialize db      */
specifier|public
name|void
name|init
parameter_list|(
name|Connection
name|lockConnection
parameter_list|)
block|{
name|Statement
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Check to see if the table already exists. If it does, then don't
comment|// log warnings during startup.
comment|// Need to run the scripts anyways since they may contain ALTER
comment|// statements that upgrade a previous version
comment|// of the table
name|boolean
name|alreadyExists
init|=
literal|false
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rs
operator|=
name|lockConnection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|lockTableName
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TABLE"
block|}
argument_list|)
expr_stmt|;
name|alreadyExists
operator|=
name|rs
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Error testing for db table: "
operator|+
name|ignore
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|alreadyExists
condition|)
block|{
return|return;
block|}
name|s
operator|=
name|lockConnection
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|String
index|[]
name|createStatments
init|=
block|{
name|lockCreateStatement
block|,
name|lockPopulateStatement
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|createStatments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// This will fail usually since the tables will be
comment|// created already.
try|try
block|{
name|s
operator|.
name|execute
argument_list|(
name|createStatments
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Could not create JDBC tables; they could already exist."
operator|+
literal|" Failure was: "
operator|+
name|createStatments
index|[
name|i
index|]
operator|+
literal|" Message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" SQLState: "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" Vendor code: "
operator|+
name|e
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|lockConnection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Error occured during initialization: "
operator|+
name|ignore
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Error occured while closing connection: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|ResultSet
name|rs
parameter_list|)
block|{
try|try
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Error occured while releasing ResultSet: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

