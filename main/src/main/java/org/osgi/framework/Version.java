begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2004, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|framework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_comment
comment|/**  * Version identifier for bundles and packages.  *   *<p>  * Version identifiers have four components.  *<ol>  *<li>Major version. A non-negative integer.</li>  *<li>Minor version. A non-negative integer.</li>  *<li>Micro version. A non-negative integer.</li>  *<li>Qualifier. A text string. See {@code Version(String)} for the  * format of the qualifier string.</li>  *</ol>  *   *<p>  * {@code Version} objects are immutable.  *   * @since 1.3  * @Immutable  * @version $Id: a71e2e2d7685e65b5bbe375efdf97fda16eff0a5 $  */
end_comment

begin_class
specifier|public
class|class
name|Version
implements|implements
name|Comparable
argument_list|<
name|Version
argument_list|>
block|{
specifier|private
specifier|final
name|int
name|major
decl_stmt|;
specifier|private
specifier|final
name|int
name|minor
decl_stmt|;
specifier|private
specifier|final
name|int
name|micro
decl_stmt|;
specifier|private
specifier|final
name|String
name|qualifier
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEPARATOR
init|=
literal|"."
decl_stmt|;
specifier|private
specifier|transient
name|String
name|versionString
decl_stmt|;
comment|/** 	 * The empty version "0.0.0". 	 */
specifier|public
specifier|static
specifier|final
name|Version
name|emptyVersion
init|=
operator|new
name|Version
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/** 	 * Creates a version identifier from the specified numerical components. 	 *  	 *<p> 	 * The qualifier is set to the empty string. 	 *  	 * @param major Major component of the version identifier. 	 * @param minor Minor component of the version identifier. 	 * @param micro Micro component of the version identifier. 	 * @throws IllegalArgumentException If the numerical components are 	 *         negative. 	 */
specifier|public
name|Version
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|,
name|int
name|micro
parameter_list|)
block|{
name|this
argument_list|(
name|major
argument_list|,
name|minor
argument_list|,
name|micro
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a version identifier from the specified components. 	 *  	 * @param major Major component of the version identifier. 	 * @param minor Minor component of the version identifier. 	 * @param micro Micro component of the version identifier. 	 * @param qualifier Qualifier component of the version identifier. If 	 *        {@code null} is specified, then the qualifier will be set to 	 *        the empty string. 	 * @throws IllegalArgumentException If the numerical components are negative 	 *         or the qualifier string is invalid. 	 */
specifier|public
name|Version
parameter_list|(
name|int
name|major
parameter_list|,
name|int
name|minor
parameter_list|,
name|int
name|micro
parameter_list|,
name|String
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
name|qualifier
operator|=
literal|""
expr_stmt|;
block|}
name|this
operator|.
name|major
operator|=
name|major
expr_stmt|;
name|this
operator|.
name|minor
operator|=
name|minor
expr_stmt|;
name|this
operator|.
name|micro
operator|=
name|micro
expr_stmt|;
name|this
operator|.
name|qualifier
operator|=
name|qualifier
expr_stmt|;
name|versionString
operator|=
literal|null
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Created a version identifier from the specified string. 	 *  	 *<p> 	 * Here is the grammar for version strings. 	 *  	 *<pre> 	 * version ::= major('.'minor('.'micro('.'qualifier)?)?)? 	 * major ::= digit+ 	 * minor ::= digit+ 	 * micro ::= digit+ 	 * qualifier ::= (alpha|digit|'_'|'-')+ 	 * digit ::= [0..9] 	 * alpha ::= [a..zA..Z] 	 *</pre> 	 *  	 * There must be no whitespace in version. 	 *  	 * @param version String representation of the version identifier. 	 * @throws IllegalArgumentException If {@code version} is improperly 	 *         formatted. 	 */
specifier|public
name|Version
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|int
name|maj
init|=
literal|0
decl_stmt|;
name|int
name|min
init|=
literal|0
decl_stmt|;
name|int
name|mic
init|=
literal|0
decl_stmt|;
name|String
name|qual
init|=
literal|""
decl_stmt|;
try|try
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|version
argument_list|,
name|SEPARATOR
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|maj
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
comment|// minor
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// consume delimiter
name|min
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
comment|// micro
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// consume delimiter
name|mic
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
comment|// qualifier
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
comment|// consume delimiter
name|qual
operator|=
name|st
operator|.
name|nextToken
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// remaining string
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
comment|// fail safe
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid format: "
operator|+
name|version
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid format: "
operator|+
name|version
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
name|major
operator|=
name|maj
expr_stmt|;
name|minor
operator|=
name|min
expr_stmt|;
name|micro
operator|=
name|mic
expr_stmt|;
name|qualifier
operator|=
name|qual
expr_stmt|;
name|versionString
operator|=
literal|null
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Called by the Version constructors to validate the version components. 	 *  	 * @throws IllegalArgumentException If the numerical components are negative 	 *         or the qualifier string is invalid. 	 */
specifier|private
name|void
name|validate
parameter_list|()
block|{
if|if
condition|(
name|major
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"negative major"
argument_list|)
throw|;
block|}
if|if
condition|(
name|minor
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"negative minor"
argument_list|)
throw|;
block|}
if|if
condition|(
name|micro
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"negative micro"
argument_list|)
throw|;
block|}
name|char
index|[]
name|chars
init|=
name|qualifier
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|length
init|=
name|chars
operator|.
name|length
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|chars
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
literal|'A'
operator|<=
name|ch
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|'Z'
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
literal|'a'
operator|<=
name|ch
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|'z'
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
literal|'0'
operator|<=
name|ch
operator|)
operator|&&
operator|(
name|ch
operator|<=
literal|'9'
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|ch
operator|==
literal|'_'
operator|)
operator|||
operator|(
name|ch
operator|==
literal|'-'
operator|)
condition|)
block|{
continue|continue;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid qualifier: "
operator|+
name|qualifier
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Parses a version identifier from the specified string. 	 *  	 *<p> 	 * See {@code Version(String)} for the format of the version string. 	 *  	 * @param version String representation of the version identifier. Leading 	 *        and trailing whitespace will be ignored. 	 * @return A {@code Version} object representing the version 	 *         identifier. If {@code version} is {@code null} or 	 *         the empty string then {@code emptyVersion} will be 	 *         returned. 	 * @throws IllegalArgumentException If {@code version} is improperly 	 *         formatted. 	 */
specifier|public
specifier|static
name|Version
name|parseVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
if|if
condition|(
name|version
operator|==
literal|null
condition|)
block|{
return|return
name|emptyVersion
return|;
block|}
name|version
operator|=
name|version
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|emptyVersion
return|;
block|}
return|return
operator|new
name|Version
argument_list|(
name|version
argument_list|)
return|;
block|}
comment|/** 	 * Returns the major component of this version identifier. 	 *  	 * @return The major component. 	 */
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|major
return|;
block|}
comment|/** 	 * Returns the minor component of this version identifier. 	 *  	 * @return The minor component. 	 */
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|minor
return|;
block|}
comment|/** 	 * Returns the micro component of this version identifier. 	 *  	 * @return The micro component. 	 */
specifier|public
name|int
name|getMicro
parameter_list|()
block|{
return|return
name|micro
return|;
block|}
comment|/** 	 * Returns the qualifier component of this version identifier. 	 *  	 * @return The qualifier component. 	 */
specifier|public
name|String
name|getQualifier
parameter_list|()
block|{
return|return
name|qualifier
return|;
block|}
comment|/** 	 * Returns the string representation of this version identifier. 	 *  	 *<p> 	 * The format of the version string will be {@code major.minor.micro} 	 * if qualifier is the empty string or 	 * {@code major.minor.micro.qualifier} otherwise. 	 *  	 * @return The string representation of this version identifier. 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|versionString
operator|!=
literal|null
condition|)
block|{
return|return
name|versionString
return|;
block|}
name|int
name|q
init|=
name|qualifier
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|(
literal|20
operator|+
name|q
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|micro
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|SEPARATOR
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
block|}
return|return
name|versionString
operator|=
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Returns a hash code value for the object. 	 *  	 * @return An integer which is a hash code value for this object. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|major
operator|<<
literal|24
operator|)
operator|+
operator|(
name|minor
operator|<<
literal|16
operator|)
operator|+
operator|(
name|micro
operator|<<
literal|8
operator|)
operator|+
name|qualifier
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/** 	 * Compares this {@code Version} object to another object. 	 *  	 *<p> 	 * A version is considered to be<b>equal to</b> another version if the 	 * major, minor and micro components are equal and the qualifier component 	 * is equal (using {@code String.equals}). 	 *  	 * @param object The {@code Version} object to be compared. 	 * @return {@code true} if {@code object} is a 	 *         {@code Version} and is equal to this object; 	 *         {@code false} otherwise. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
name|this
condition|)
block|{
comment|// quicktest
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|object
operator|instanceof
name|Version
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Version
name|other
init|=
operator|(
name|Version
operator|)
name|object
decl_stmt|;
return|return
operator|(
name|major
operator|==
name|other
operator|.
name|major
operator|)
operator|&&
operator|(
name|minor
operator|==
name|other
operator|.
name|minor
operator|)
operator|&&
operator|(
name|micro
operator|==
name|other
operator|.
name|micro
operator|)
operator|&&
name|qualifier
operator|.
name|equals
argument_list|(
name|other
operator|.
name|qualifier
argument_list|)
return|;
block|}
comment|/** 	 * Compares this {@code Version} object to another {@code Version}. 	 *  	 *<p> 	 * A version is considered to be<b>less than</b> another version if its 	 * major component is less than the other version's major component, or the 	 * major components are equal and its minor component is less than the other 	 * version's minor component, or the major and minor components are equal 	 * and its micro component is less than the other version's micro component, 	 * or the major, minor and micro components are equal and it's qualifier 	 * component is less than the other version's qualifier component (using 	 * {@code String.compareTo}). 	 *  	 *<p> 	 * A version is considered to be<b>equal to</b> another version if the 	 * major, minor and micro components are equal and the qualifier component 	 * is equal (using {@code String.compareTo}). 	 *  	 * @param other The {@code Version} object to be compared. 	 * @return A negative integer, zero, or a positive integer if this version 	 *         is less than, equal to, or greater than the specified 	 *         {@code Version} object. 	 * @throws ClassCastException If the specified object is not a 	 *         {@code Version} object. 	 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Version
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
name|this
condition|)
block|{
comment|// quicktest
return|return
literal|0
return|;
block|}
name|int
name|result
init|=
name|major
operator|-
name|other
operator|.
name|major
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|result
operator|=
name|minor
operator|-
name|other
operator|.
name|minor
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|result
operator|=
name|micro
operator|-
name|other
operator|.
name|micro
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
return|return
name|qualifier
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qualifier
argument_list|)
return|;
block|}
block|}
end_class

end_unit

