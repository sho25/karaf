begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2000, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|framework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|NotSerializableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|BasicPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A bundle's authority to register or get a service.  *<ul>  *<li>The {@code register} action allows a bundle to register a service on  * the specified names.  *<li>The {@code get} action allows a bundle to detect a service and get  * it.  *</ul>  * Permission to get a service is required in order to detect events regarding  * the service. Untrusted bundles should not be able to detect the presence of  * certain services unless they have the appropriate  * {@code ServicePermission} to get the specific service.  *   * @ThreadSafe  * @version $Id: 1b6ee9543f4cbc16add8dc8c40dfa9a6dfee7aa2 $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ServicePermission
extends|extends
name|BasicPermission
block|{
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7662148639076511574L
decl_stmt|;
comment|/** 	 * The action string {@code get}. 	 */
specifier|public
specifier|final
specifier|static
name|String
name|GET
init|=
literal|"get"
decl_stmt|;
comment|/** 	 * The action string {@code register}. 	 */
specifier|public
specifier|final
specifier|static
name|String
name|REGISTER
init|=
literal|"register"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_GET
init|=
literal|0x00000001
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_REGISTER
init|=
literal|0x00000002
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_ALL
init|=
name|ACTION_GET
operator||
name|ACTION_REGISTER
decl_stmt|;
specifier|final
specifier|static
name|int
name|ACTION_NONE
init|=
literal|0
decl_stmt|;
comment|/** 	 * The actions mask. 	 */
specifier|transient
name|int
name|action_mask
decl_stmt|;
comment|/** 	 * The actions in canonical form. 	 *  	 * @serial 	 */
specifier|private
specifier|volatile
name|String
name|actions
init|=
literal|null
decl_stmt|;
comment|/** 	 * The service used by this ServicePermission. Must be null if not 	 * constructed with a service. 	 */
specifier|transient
specifier|final
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|service
decl_stmt|;
comment|/** 	 * The object classes for this ServicePermission. Must be null if not 	 * constructed with a service. 	 */
specifier|transient
specifier|final
name|String
index|[]
name|objectClass
decl_stmt|;
comment|/** 	 * If this ServicePermission was constructed with a filter, this holds a 	 * Filter matching object used to evaluate the filter in implies. 	 */
specifier|transient
name|Filter
name|filter
decl_stmt|;
comment|/** 	 * This map holds the properties of the permission, used to match a filter 	 * in implies. This is not initialized until necessary, and then cached in 	 * this object. 	 */
specifier|private
specifier|transient
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
comment|/** 	 * True if constructed with a name and the name is "*" or ends with ".*". 	 */
specifier|private
specifier|transient
name|boolean
name|wildcard
decl_stmt|;
comment|/** 	 * If constructed with a name and the name ends with ".*", this contains the 	 * name without the final "*". 	 */
specifier|private
specifier|transient
name|String
name|prefix
decl_stmt|;
comment|/** 	 * Create a new ServicePermission. 	 *  	 *<p> 	 * The name of the service is specified as a fully qualified class name. 	 * Wildcards may be used. 	 *  	 *<pre> 	 * name ::=&lt;class name&gt; |&lt;class name ending in&quot;.*&quot;&gt; | * 	 *</pre> 	 *  	 * Examples: 	 *  	 *<pre> 	 * org.osgi.service.http.HttpService 	 * org.osgi.service.http.* 	 * * 	 *</pre> 	 *  	 * For the {@code get} action, the name can also be a filter 	 * expression. The filter gives access to the service properties as well as 	 * the following attributes: 	 *<ul> 	 *<li>signer - A Distinguished Name chain used to sign the bundle 	 * publishing the service. Wildcards in a DN are not matched according to 	 * the filter string rules, but according to the rules defined for a DN 	 * chain.</li> 	 *<li>location - The location of the bundle publishing the service.</li> 	 *<li>id - The bundle ID of the bundle publishing the service.</li> 	 *<li>name - The symbolic name of the bundle publishing the service.</li> 	 *</ul> 	 * Since the above attribute names may conflict with service property names 	 * used by a service, you can prefix an attribute name with '@' in the 	 * filter expression to match against the service property and not one of 	 * the above attributes. Filter attribute names are processed in a case 	 * sensitive manner unless the attribute references a service property. 	 * Service properties names are case insensitive. 	 *  	 *<p> 	 * There are two possible actions: {@code get} and 	 * {@code register}. The {@code get} permission allows the owner 	 * of this permission to obtain a service with this name. The 	 * {@code register} permission allows the bundle to register a service 	 * under that name. 	 *  	 * @param name The service class name 	 * @param actions {@code get},{@code register} (canonical order) 	 * @throws IllegalArgumentException If the specified name is a filter 	 *         expression and either the specified action is not 	 *         {@code get} or the filter has an invalid syntax. 	 */
specifier|public
name|ServicePermission
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|filter
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|action_mask
operator|&
name|ACTION_ALL
operator|)
operator|!=
name|ACTION_GET
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid action string for filter expression"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Creates a new requested {@code ServicePermission} object to be used 	 * by code that must perform {@code checkPermission} for the 	 * {@code get} action. {@code ServicePermission} objects created 	 * with this constructor cannot be added to a {@code ServicePermission} 	 * permission collection. 	 *  	 * @param reference The requested service. 	 * @param actions The action {@code get}. 	 * @throws IllegalArgumentException If the specified action is not 	 *         {@code get} or reference is {@code null}. 	 * @since 1.5 	 */
specifier|public
name|ServicePermission
parameter_list|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|reference
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|super
argument_list|(
name|createName
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
name|setTransients
argument_list|(
literal|null
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|reference
expr_stmt|;
name|this
operator|.
name|objectClass
operator|=
operator|(
name|String
index|[]
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|action_mask
operator|&
name|ACTION_ALL
operator|)
operator|!=
name|ACTION_GET
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid action string"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Create a permission name from a ServiceReference 	 *  	 * @param reference ServiceReference to use to create permission name. 	 * @return permission name. 	 */
specifier|private
specifier|static
name|String
name|createName
parameter_list|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|reference
parameter_list|)
block|{
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"reference must not be null"
argument_list|)
throw|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"(service.id="
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_ID
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Package private constructor used by ServicePermissionCollection. 	 *  	 * @param name class name 	 * @param mask action mask 	 */
name|ServicePermission
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setTransients
argument_list|(
name|parseFilter
argument_list|(
name|name
argument_list|)
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|objectClass
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * Called by constructors and when deserialized. 	 *  	 * @param mask action mask 	 */
specifier|private
name|void
name|setTransients
parameter_list|(
name|Filter
name|f
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
if|if
condition|(
operator|(
name|mask
operator|==
name|ACTION_NONE
operator|)
operator|||
operator|(
operator|(
name|mask
operator|&
name|ACTION_ALL
operator|)
operator|!=
name|mask
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid action string"
argument_list|)
throw|;
block|}
name|action_mask
operator|=
name|mask
expr_stmt|;
name|filter
operator|=
name|f
expr_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|getName
argument_list|()
decl_stmt|;
name|int
name|l
init|=
name|name
operator|.
name|length
argument_list|()
decl_stmt|;
comment|/* if "*" or endsWith ".*" */
name|wildcard
operator|=
operator|(
operator|(
name|name
operator|.
name|charAt
argument_list|(
name|l
operator|-
literal|1
argument_list|)
operator|==
literal|'*'
operator|)
operator|&&
operator|(
operator|(
name|l
operator|==
literal|1
operator|)
operator|||
operator|(
name|name
operator|.
name|charAt
argument_list|(
name|l
operator|-
literal|2
argument_list|)
operator|==
literal|'.'
operator|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|wildcard
operator|&&
operator|(
name|l
operator|>
literal|1
operator|)
condition|)
block|{
name|prefix
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|l
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Parse action string into action mask. 	 *  	 * @param actions Action string. 	 * @return action mask. 	 */
specifier|private
specifier|static
name|int
name|parseActions
parameter_list|(
name|String
name|actions
parameter_list|)
block|{
name|boolean
name|seencomma
init|=
literal|false
decl_stmt|;
name|int
name|mask
init|=
name|ACTION_NONE
decl_stmt|;
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
block|{
return|return
name|mask
return|;
block|}
name|char
index|[]
name|a
init|=
name|actions
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|a
operator|.
name|length
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
return|return
name|mask
return|;
while|while
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|c
decl_stmt|;
comment|// skip whitespace
while|while
condition|(
operator|(
name|i
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
operator|(
name|c
operator|=
name|a
index|[
name|i
index|]
operator|)
operator|==
literal|' '
operator|||
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
operator|||
name|c
operator|==
literal|'\f'
operator|||
name|c
operator|==
literal|'\t'
operator|)
condition|)
name|i
operator|--
expr_stmt|;
comment|// check for the known strings
name|int
name|matchlen
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|2
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'g'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'G'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'T'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|3
expr_stmt|;
name|mask
operator||=
name|ACTION_GET
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|7
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'g'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'G'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'i'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'I'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'R'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|8
expr_stmt|;
name|mask
operator||=
name|ACTION_REGISTER
expr_stmt|;
block|}
else|else
block|{
comment|// parse error
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
comment|// make sure we didn't just match the tail of a word
comment|// like "ackbarfregister". Also, skip to the comma.
name|seencomma
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|i
operator|>=
name|matchlen
operator|&&
operator|!
name|seencomma
condition|)
block|{
switch|switch
condition|(
name|a
index|[
name|i
operator|-
name|matchlen
index|]
condition|)
block|{
case|case
literal|','
case|:
name|seencomma
operator|=
literal|true
expr_stmt|;
comment|/* FALLTHROUGH */
case|case
literal|' '
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\f'
case|:
case|case
literal|'\t'
case|:
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
name|i
operator|--
expr_stmt|;
block|}
comment|// point i at the location of the comma minus one (or -1).
name|i
operator|-=
name|matchlen
expr_stmt|;
block|}
if|if
condition|(
name|seencomma
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
return|return
name|mask
return|;
block|}
comment|/** 	 * Parse filter string into a Filter object. 	 *  	 * @param filterString The filter string to parse. 	 * @return a Filter for this bundle. If the specified filterString is not a 	 *         filter expression, then {@code null} is returned. 	 * @throws IllegalArgumentException If the filter syntax is invalid. 	 */
specifier|private
specifier|static
name|Filter
name|parseFilter
parameter_list|(
name|String
name|filterString
parameter_list|)
block|{
name|filterString
operator|=
name|filterString
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|filterString
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'('
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|filterString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid filter"
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
block|}
comment|/** 	 * Determines if a {@code ServicePermission} object "implies" the 	 * specified permission. 	 *  	 * @param p The target permission to check. 	 * @return {@code true} if the specified permission is implied by this 	 *         object; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|ServicePermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ServicePermission
name|requested
init|=
operator|(
name|ServicePermission
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if requested permission has a filter, then it is an invalid argument
if|if
condition|(
name|requested
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|implies0
argument_list|(
name|requested
argument_list|,
name|ACTION_NONE
argument_list|)
return|;
block|}
comment|/** 	 * Internal implies method. Used by the implies and the permission 	 * collection implies methods. 	 *  	 * @param requested The requested ServicePermission which has already be 	 *        validated as a proper argument. The requested ServicePermission 	 *        must not have a filter expression. 	 * @param effective The effective actions with which to start. 	 * @return {@code true} if the specified permission is implied by this 	 *         object; {@code false} otherwise. 	 */
name|boolean
name|implies0
parameter_list|(
name|ServicePermission
name|requested
parameter_list|,
name|int
name|effective
parameter_list|)
block|{
comment|/* check actions first - much faster */
name|effective
operator||=
name|action_mask
expr_stmt|;
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|!=
name|desired
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/* we have name of "*" */
if|if
condition|(
name|wildcard
operator|&&
operator|(
name|prefix
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|/* if we have a filter */
name|Filter
name|f
init|=
name|filter
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
return|return
name|f
operator|.
name|matches
argument_list|(
name|requested
operator|.
name|getProperties
argument_list|()
argument_list|)
return|;
block|}
comment|/* if requested permission not created with ServiceReference */
name|String
index|[]
name|requestedNames
init|=
name|requested
operator|.
name|objectClass
decl_stmt|;
if|if
condition|(
name|requestedNames
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|implies
argument_list|(
name|requested
argument_list|)
return|;
block|}
comment|/* requested permission created with ServiceReference */
if|if
condition|(
name|wildcard
condition|)
block|{
name|int
name|pl
init|=
name|prefix
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|l
init|=
name|requestedNames
operator|.
name|length
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
name|String
name|requestedName
init|=
name|requestedNames
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|requestedName
operator|.
name|length
argument_list|()
operator|>
name|pl
operator|)
operator|&&
name|requestedName
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
name|String
name|name
init|=
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|l
init|=
name|requestedNames
operator|.
name|length
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|requestedNames
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Returns the canonical string representation of the actions. Always 	 * returns present actions in the following order: {@code get}, 	 * {@code register}. 	 *  	 * @return The canonical string representation of the actions. 	 */
specifier|public
name|String
name|getActions
parameter_list|()
block|{
name|String
name|result
init|=
name|actions
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
name|int
name|mask
init|=
name|action_mask
decl_stmt|;
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_GET
operator|)
operator|==
name|ACTION_GET
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|GET
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_REGISTER
operator|)
operator|==
name|ACTION_REGISTER
condition|)
block|{
if|if
condition|(
name|comma
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|REGISTER
argument_list|)
expr_stmt|;
block|}
name|actions
operator|=
name|result
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Returns a new {@code PermissionCollection} object for storing 	 * {@code ServicePermission} objects. 	 *  	 * @return A new {@code PermissionCollection} object suitable for storing 	 *         {@code ServicePermission} objects. 	 */
specifier|public
name|PermissionCollection
name|newPermissionCollection
parameter_list|()
block|{
return|return
operator|new
name|ServicePermissionCollection
argument_list|()
return|;
block|}
comment|/** 	 * Determines the equality of two ServicePermission objects. 	 *  	 * Checks that specified object has the same class name and action as this 	 * {@code ServicePermission}. 	 *  	 * @param obj The object to test for equality. 	 * @return true if obj is a {@code ServicePermission}, and has the same 	 *         class name and actions as this {@code ServicePermission} 	 *         object; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ServicePermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ServicePermission
name|sp
init|=
operator|(
name|ServicePermission
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|action_mask
operator|==
name|sp
operator|.
name|action_mask
operator|)
operator|&&
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|sp
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|service
operator|==
name|sp
operator|.
name|service
operator|)
operator|||
operator|(
operator|(
name|service
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|service
operator|.
name|compareTo
argument_list|(
name|sp
operator|.
name|service
argument_list|)
operator|==
literal|0
operator|)
operator|)
operator|)
return|;
block|}
comment|/** 	 * Returns the hash code value for this object. 	 *  	 * @return Hash code value for this object. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|31
operator|*
literal|17
operator|+
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|getActions
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|service
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
comment|/** 	 * WriteObject is called to save the state of this permission to a stream. 	 * The actions are serialized, and the superclass takes care of the name. 	 */
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotSerializableException
argument_list|(
literal|"cannot serialize"
argument_list|)
throw|;
block|}
comment|// Write out the actions. The superclass takes care of the name
comment|// call getActions to make sure actions field is initialized
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
name|getActions
argument_list|()
expr_stmt|;
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * readObject is called to restore the state of this permission from a 	 * stream. 	 */
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// Read in the action, then initialize the rest
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|setTransients
argument_list|(
name|parseFilter
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Called by {@code<@link ServicePermission#implies(Permission)>}. This 	 * method is only called on a requested permission which cannot have a 	 * filter set. 	 *  	 * @return a map of properties for this permission. 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|properties
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|OBJECTCLASS
argument_list|,
operator|new
name|String
index|[]
block|{
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
return|return
name|properties
operator|=
name|result
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|Bundle
name|bundle
init|=
name|service
operator|.
name|getBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|props
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Long
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|bundle
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|SignerProperty
name|signer
init|=
operator|new
name|SignerProperty
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|signer
operator|.
name|isBundleSigned
argument_list|()
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
literal|"signer"
argument_list|,
name|signer
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
operator|=
operator|new
name|Properties
argument_list|(
name|props
argument_list|,
name|service
argument_list|)
return|;
block|}
specifier|static
specifier|private
specifier|final
class|class
name|Properties
extends|extends
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
specifier|private
specifier|final
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|service
decl_stmt|;
specifier|private
specifier|transient
specifier|volatile
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
decl_stmt|;
name|Properties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|,
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|service
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|entries
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|k
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|k
operator|instanceof
name|String
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|key
init|=
operator|(
name|String
operator|)
name|k
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'@'
condition|)
block|{
return|return
name|service
operator|.
name|getProperty
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|Object
name|value
init|=
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
comment|// fall back to service properties
return|return
name|value
return|;
block|}
return|return
name|service
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
return|return
name|entries
return|;
block|}
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|all
init|=
operator|new
name|HashSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
name|properties
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|add
label|:
for|for
control|(
name|String
name|key
range|:
name|service
operator|.
name|getPropertyKeys
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|k
range|:
name|properties
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
name|k
argument_list|)
condition|)
block|{
continue|continue
name|add
continue|;
block|}
block|}
name|all
operator|.
name|add
argument_list|(
operator|new
name|Entry
argument_list|(
name|key
argument_list|,
name|service
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|entries
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|all
argument_list|)
return|;
block|}
specifier|static
specifier|private
specifier|final
class|class
name|Entry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|k
decl_stmt|;
specifier|private
specifier|final
name|Object
name|v
decl_stmt|;
name|Entry
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|k
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|v
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|k
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|v
return|;
block|}
specifier|public
name|Object
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|k
operator|+
literal|"="
operator|+
name|v
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
operator|(
name|k
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|k
operator|.
name|hashCode
argument_list|()
operator|)
operator|^
operator|(
operator|(
name|v
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|v
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Map
operator|.
name|Entry
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|k
operator|==
name|key
operator|)
operator|||
operator|(
operator|(
name|k
operator|!=
literal|null
operator|)
operator|&&
name|k
operator|.
name|equals
argument_list|(
name|key
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|Object
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|v
operator|==
name|value
operator|)
operator|||
operator|(
operator|(
name|v
operator|!=
literal|null
operator|)
operator|&&
name|v
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * Stores a set of ServicePermission permissions.  *   * @see java.security.Permission  * @see java.security.Permissions  * @see java.security.PermissionCollection  */
end_comment

begin_class
specifier|final
class|class
name|ServicePermissionCollection
extends|extends
name|PermissionCollection
block|{
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|662615640374640621L
decl_stmt|;
comment|/** 	 * Table of permissions. 	 *  	 * @GuardedBy this 	 */
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|permissions
decl_stmt|;
comment|/** 	 * Boolean saying if "*" is in the collection. 	 *  	 * @serial 	 * @GuardedBy this 	 */
specifier|private
name|boolean
name|all_allowed
decl_stmt|;
comment|/** 	 * Table of permissions with filter expressions. 	 *  	 * @serial 	 * @GuardedBy this 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|filterPermissions
decl_stmt|;
comment|/** 	 * Creates an empty ServicePermissions object. 	 */
specifier|public
name|ServicePermissionCollection
parameter_list|()
block|{
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
argument_list|()
expr_stmt|;
name|all_allowed
operator|=
literal|false
expr_stmt|;
block|}
comment|/** 	 * Adds a permission to this permission collection. 	 *  	 * @param permission The Permission object to add. 	 * @throws IllegalArgumentException If the specified permission is not a 	 *         ServicePermission object. 	 * @throws SecurityException If this 	 *         {@code ServicePermissionCollection} object has been marked 	 *         read-only. 	 */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|ServicePermission
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|permission
argument_list|)
throw|;
block|}
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"attempt to add a Permission to a "
operator|+
literal|"readonly PermissionCollection"
argument_list|)
throw|;
block|}
specifier|final
name|ServicePermission
name|sp
init|=
operator|(
name|ServicePermission
operator|)
name|permission
decl_stmt|;
if|if
condition|(
name|sp
operator|.
name|service
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot add to collection: "
operator|+
name|sp
argument_list|)
throw|;
block|}
specifier|final
name|String
name|name
init|=
name|sp
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|Filter
name|f
init|=
name|sp
operator|.
name|filter
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|/* select the bucket for the permission */
name|Map
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|pc
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|pc
operator|=
name|filterPermissions
expr_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
block|{
name|filterPermissions
operator|=
name|pc
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|pc
operator|=
name|permissions
expr_stmt|;
block|}
specifier|final
name|ServicePermission
name|existing
init|=
name|pc
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|oldMask
init|=
name|existing
operator|.
name|action_mask
decl_stmt|;
specifier|final
name|int
name|newMask
init|=
name|sp
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
name|oldMask
operator|!=
name|newMask
condition|)
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ServicePermission
argument_list|(
name|name
argument_list|,
name|oldMask
operator||
name|newMask
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|all_allowed
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|all_allowed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * Determines if a set of permissions implies the permissions expressed in 	 * {@code permission}. 	 *  	 * @param permission The Permission object to compare. 	 * @return {@code true} if {@code permission} is a proper 	 *         subset of a permission in the set; {@code false} 	 *         otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|ServicePermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ServicePermission
name|requested
init|=
operator|(
name|ServicePermission
operator|)
name|permission
decl_stmt|;
comment|/* if requested permission has a filter, then it is an invalid argument */
if|if
condition|(
name|requested
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|effective
init|=
name|ServicePermission
operator|.
name|ACTION_NONE
decl_stmt|;
name|Collection
argument_list|<
name|ServicePermission
argument_list|>
name|perms
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|action_mask
decl_stmt|;
comment|/* short circuit if the "*" Permission was added */
if|if
condition|(
name|all_allowed
condition|)
block|{
name|ServicePermission
name|sp
init|=
name|permissions
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|!=
literal|null
condition|)
block|{
name|effective
operator||=
name|sp
operator|.
name|action_mask
expr_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|String
index|[]
name|requestedNames
init|=
name|requested
operator|.
name|objectClass
decl_stmt|;
comment|/* if requested permission not created with ServiceReference */
if|if
condition|(
name|requestedNames
operator|==
literal|null
condition|)
block|{
name|effective
operator||=
name|effective
argument_list|(
name|requested
operator|.
name|getName
argument_list|()
argument_list|,
name|desired
argument_list|,
name|effective
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/* requested permission created with ServiceReference */
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|l
init|=
name|requestedNames
operator|.
name|length
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|effective
argument_list|(
name|requestedNames
index|[
name|i
index|]
argument_list|,
name|desired
argument_list|,
name|effective
argument_list|)
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|pc
init|=
name|filterPermissions
decl_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|perms
operator|=
name|pc
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
comment|/* iterate one by one over filteredPermissions */
for|for
control|(
name|ServicePermission
name|perm
range|:
name|perms
control|)
block|{
if|if
condition|(
name|perm
operator|.
name|implies0
argument_list|(
name|requested
argument_list|,
name|effective
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Consult permissions map to compute the effective permission for the 	 * requested permission name. 	 *  	 * @param requestedName The requested service name. 	 * @param desired The desired actions. 	 * @param effective The effective actions. 	 * @return The new effective actions. 	 */
specifier|private
name|int
name|effective
parameter_list|(
name|String
name|requestedName
parameter_list|,
specifier|final
name|int
name|desired
parameter_list|,
name|int
name|effective
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|pc
init|=
name|permissions
decl_stmt|;
name|ServicePermission
name|sp
init|=
name|pc
operator|.
name|get
argument_list|(
name|requestedName
argument_list|)
decl_stmt|;
comment|// strategy:
comment|// Check for full match first. Then work our way up the
comment|// name looking for matches on a.b.*
if|if
condition|(
name|sp
operator|!=
literal|null
condition|)
block|{
comment|// we have a direct hit!
name|effective
operator||=
name|sp
operator|.
name|action_mask
expr_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
name|effective
return|;
block|}
block|}
comment|// work our way up the tree...
name|int
name|last
decl_stmt|;
name|int
name|offset
init|=
name|requestedName
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|last
operator|=
name|requestedName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|,
name|offset
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|requestedName
operator|=
name|requestedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|last
operator|+
literal|1
argument_list|)
operator|+
literal|"*"
expr_stmt|;
name|sp
operator|=
name|pc
operator|.
name|get
argument_list|(
name|requestedName
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|!=
literal|null
condition|)
block|{
name|effective
operator||=
name|sp
operator|.
name|action_mask
expr_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
name|effective
return|;
block|}
block|}
name|offset
operator|=
name|last
operator|-
literal|1
expr_stmt|;
block|}
comment|/* 		 * we don't have to check for "*" as it was already checked before we 		 * were called. 		 */
return|return
name|effective
return|;
block|}
comment|/** 	 * Returns an enumeration of all the {@code ServicePermission} 	 * objects in the container. 	 *  	 * @return Enumeration of all the ServicePermission objects. 	 */
specifier|public
specifier|synchronized
name|Enumeration
argument_list|<
name|Permission
argument_list|>
name|elements
parameter_list|()
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|Permission
argument_list|>
argument_list|(
name|permissions
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|pc
init|=
name|filterPermissions
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|all
operator|.
name|addAll
argument_list|(
name|pc
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|all
argument_list|)
return|;
block|}
comment|/* serialization logic */
specifier|private
specifier|static
specifier|final
name|ObjectStreamField
index|[]
name|serialPersistentFields
init|=
block|{
operator|new
name|ObjectStreamField
argument_list|(
literal|"permissions"
argument_list|,
name|Hashtable
operator|.
name|class
argument_list|)
block|,
operator|new
name|ObjectStreamField
argument_list|(
literal|"all_allowed"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
block|,
operator|new
name|ObjectStreamField
argument_list|(
literal|"filterPermissions"
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|hashtable
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
argument_list|(
name|permissions
argument_list|)
decl_stmt|;
name|ObjectOutputStream
operator|.
name|PutField
name|pfields
init|=
name|out
operator|.
name|putFields
argument_list|()
decl_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|hashtable
argument_list|)
expr_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"all_allowed"
argument_list|,
name|all_allowed
argument_list|)
expr_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"filterPermissions"
argument_list|,
name|filterPermissions
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFields
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ObjectInputStream
operator|.
name|GetField
name|gfields
init|=
name|in
operator|.
name|readFields
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|hashtable
init|=
operator|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
operator|)
name|gfields
operator|.
name|get
argument_list|(
literal|"permissions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
argument_list|(
name|hashtable
argument_list|)
expr_stmt|;
name|all_allowed
operator|=
name|gfields
operator|.
name|get
argument_list|(
literal|"all_allowed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
name|fp
init|=
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServicePermission
argument_list|>
operator|)
name|gfields
operator|.
name|get
argument_list|(
literal|"filterPermissions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|filterPermissions
operator|=
name|fp
expr_stmt|;
block|}
block|}
end_class

end_unit

