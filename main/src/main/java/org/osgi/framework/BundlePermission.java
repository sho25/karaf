begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2004, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|framework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|BasicPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A bundle's authority to require or provide a bundle or to receive or attach  * fragments.  *   *<p>  * A bundle symbolic name defines a unique fully qualified name. Wildcards may  * be used.  *   *<pre>  * name ::=&lt;symbolic name&gt; |&lt;symbolic name ending in&quot;.*&quot;&gt; | *  *</pre>  *   * Examples:  *   *<pre>  * org.osgi.example.bundle  * org.osgi.example.*  * *  *</pre>  *   *<p>  * {@code BundlePermission} has four actions: {@code provide},  * {@code require},{@code host}, and {@code fragment}. The  * {@code provide} action implies the {@code require} action.  *   * @since 1.3  * @ThreadSafe  * @version $Id: d30c9c987cc13007ed19d3a9fdd11b00739591c0 $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BundlePermission
extends|extends
name|BasicPermission
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3257846601685873716L
decl_stmt|;
comment|/** 	 * The action string {@code provide}. The {@code provide} action 	 * implies the {@code require} action. 	 */
specifier|public
specifier|final
specifier|static
name|String
name|PROVIDE
init|=
literal|"provide"
decl_stmt|;
comment|/** 	 * The action string {@code require}. The {@code require} action 	 * is implied by the {@code provide} action. 	 */
specifier|public
specifier|final
specifier|static
name|String
name|REQUIRE
init|=
literal|"require"
decl_stmt|;
comment|/** 	 * The action string {@code host}. 	 */
specifier|public
specifier|final
specifier|static
name|String
name|HOST
init|=
literal|"host"
decl_stmt|;
comment|/** 	 * The action string {@code fragment}. 	 */
specifier|public
specifier|final
specifier|static
name|String
name|FRAGMENT
init|=
literal|"fragment"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_PROVIDE
init|=
literal|0x00000001
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_REQUIRE
init|=
literal|0x00000002
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_HOST
init|=
literal|0x00000004
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_FRAGMENT
init|=
literal|0x00000008
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_ALL
init|=
name|ACTION_PROVIDE
operator||
name|ACTION_REQUIRE
operator||
name|ACTION_HOST
operator||
name|ACTION_FRAGMENT
decl_stmt|;
specifier|final
specifier|static
name|int
name|ACTION_NONE
init|=
literal|0
decl_stmt|;
comment|/** 	 * The actions mask. 	 */
specifier|private
specifier|transient
name|int
name|action_mask
decl_stmt|;
comment|/** 	 * The actions in canonical form. 	 *  	 * @serial 	 */
specifier|private
specifier|volatile
name|String
name|actions
init|=
literal|null
decl_stmt|;
comment|/** 	 * Defines the authority to provide and/or require and or specify a host 	 * fragment symbolic name within the OSGi environment. 	 *<p> 	 * Bundle Permissions are granted over all possible versions of a bundle. 	 *  	 * A bundle that needs to provide a bundle must have the appropriate 	 * {@code BundlePermission} for the symbolic name; a bundle that 	 * requires a bundle must have the appropriate {@code BundlePermssion} 	 * for that symbolic name; a bundle that specifies a fragment host must have 	 * the appropriate {@code BundlePermission} for that symbolic name. 	 *  	 * @param symbolicName The bundle symbolic name. 	 * @param actions {@code provide},{@code require}, 	 *        {@code host},{@code fragment} (canonical order). 	 */
specifier|public
name|BundlePermission
parameter_list|(
name|String
name|symbolicName
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|this
argument_list|(
name|symbolicName
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Package private constructor used by BundlePermissionCollection. 	 *  	 * @param symbolicName the bundle symbolic name 	 * @param mask the action mask 	 */
name|BundlePermission
parameter_list|(
name|String
name|symbolicName
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|super
argument_list|(
name|symbolicName
argument_list|)
expr_stmt|;
name|setTransients
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Called by constructors and when deserialized. 	 *  	 * @param mask 	 */
specifier|private
specifier|synchronized
name|void
name|setTransients
parameter_list|(
name|int
name|mask
parameter_list|)
block|{
if|if
condition|(
operator|(
name|mask
operator|==
name|ACTION_NONE
operator|)
operator|||
operator|(
operator|(
name|mask
operator|&
name|ACTION_ALL
operator|)
operator|!=
name|mask
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid action string"
argument_list|)
throw|;
block|}
name|action_mask
operator|=
name|mask
expr_stmt|;
block|}
comment|/** 	 * Returns the current action mask. 	 *<p> 	 * Used by the BundlePermissionCollection class. 	 *  	 * @return Current action mask. 	 */
specifier|synchronized
name|int
name|getActionsMask
parameter_list|()
block|{
return|return
name|action_mask
return|;
block|}
comment|/** 	 * Parse action string into action mask. 	 *  	 * @param actions Action string. 	 * @return action mask. 	 */
specifier|private
specifier|static
name|int
name|parseActions
parameter_list|(
name|String
name|actions
parameter_list|)
block|{
name|boolean
name|seencomma
init|=
literal|false
decl_stmt|;
name|int
name|mask
init|=
name|ACTION_NONE
decl_stmt|;
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
block|{
return|return
name|mask
return|;
block|}
name|char
index|[]
name|a
init|=
name|actions
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|a
operator|.
name|length
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
return|return
name|mask
return|;
while|while
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|c
decl_stmt|;
comment|// skip whitespace
while|while
condition|(
operator|(
name|i
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
operator|(
name|c
operator|=
name|a
index|[
name|i
index|]
operator|)
operator|==
literal|' '
operator|||
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
operator|||
name|c
operator|==
literal|'\f'
operator|||
name|c
operator|==
literal|'\t'
operator|)
condition|)
name|i
operator|--
expr_stmt|;
comment|// check for the known strings
name|int
name|matchlen
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|6
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'p'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'P'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'o'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'O'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'v'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'V'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'i'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'I'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'d'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'D'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|7
expr_stmt|;
name|mask
operator||=
name|ACTION_PROVIDE
operator||
name|ACTION_REQUIRE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|6
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'q'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'Q'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'u'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'U'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'i'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'I'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|7
expr_stmt|;
name|mask
operator||=
name|ACTION_REQUIRE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|3
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'h'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'H'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'o'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'O'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'T'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|4
expr_stmt|;
name|mask
operator||=
name|ACTION_HOST
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|7
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'f'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'F'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'g'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'G'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'m'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'M'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'n'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'N'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'T'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|8
expr_stmt|;
name|mask
operator||=
name|ACTION_FRAGMENT
expr_stmt|;
block|}
else|else
block|{
comment|// parse error
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
comment|// make sure we didn't just match the tail of a word
comment|// like "ackbarfrequire". Also, skip to the comma.
name|seencomma
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|i
operator|>=
name|matchlen
operator|&&
operator|!
name|seencomma
condition|)
block|{
switch|switch
condition|(
name|a
index|[
name|i
operator|-
name|matchlen
index|]
condition|)
block|{
case|case
literal|','
case|:
name|seencomma
operator|=
literal|true
expr_stmt|;
comment|/* FALLTHROUGH */
case|case
literal|' '
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\f'
case|:
case|case
literal|'\t'
case|:
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
name|i
operator|--
expr_stmt|;
block|}
comment|// point i at the location of the comma minus one (or -1).
name|i
operator|-=
name|matchlen
expr_stmt|;
block|}
if|if
condition|(
name|seencomma
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
return|return
name|mask
return|;
block|}
comment|/** 	 * Determines if the specified permission is implied by this object. 	 *  	 *<p> 	 * This method checks that the symbolic name of the target is implied by the 	 * symbolic name of this object. The list of {@code BundlePermission} 	 * actions must either match or allow for the list of the target object to 	 * imply the target {@code BundlePermission} action. 	 *<p> 	 * The permission to provide a bundle implies the permission to require the 	 * named symbolic name. 	 *  	 *<pre> 	 *       x.y.*,&quot;provide&quot; -&gt; x.y.z,&quot;provide&quot; is true 	 *       *,&quot;require&quot; -&gt; x.y,&quot;require&quot;      is true 	 *       *,&quot;provide&quot; -&gt; x.y,&quot;require&quot;      is true 	 *       x.y,&quot;provide&quot; -&gt; x.y.z,&quot;provide&quot;  is false 	 *</pre> 	 *  	 * @param p The requested permission. 	 * @return {@code true} if the specified {@code BundlePermission} 	 *         action is implied by this object; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|BundlePermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BundlePermission
name|requested
init|=
operator|(
name|BundlePermission
operator|)
name|p
decl_stmt|;
specifier|final
name|int
name|effective
init|=
name|getActionsMask
argument_list|()
decl_stmt|;
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|getActionsMask
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
operator|)
operator|&&
name|super
operator|.
name|implies
argument_list|(
name|requested
argument_list|)
return|;
block|}
comment|/** 	 * Returns the canonical string representation of the 	 * {@code BundlePermission} actions. 	 *  	 *<p> 	 * Always returns present {@code BundlePermission} actions in the 	 * following order: {@code provide}, {@code require}, 	 * {@code host}, {@code fragment}. 	 *  	 * @return Canonical string representation of the {@code BundlePermission 	 *         } actions. 	 */
specifier|public
name|String
name|getActions
parameter_list|()
block|{
name|String
name|result
init|=
name|actions
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|action_mask
operator|&
name|ACTION_PROVIDE
operator|)
operator|==
name|ACTION_PROVIDE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|PROVIDE
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|action_mask
operator|&
name|ACTION_REQUIRE
operator|)
operator|==
name|ACTION_REQUIRE
condition|)
block|{
if|if
condition|(
name|comma
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|REQUIRE
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|action_mask
operator|&
name|ACTION_HOST
operator|)
operator|==
name|ACTION_HOST
condition|)
block|{
if|if
condition|(
name|comma
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|HOST
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|action_mask
operator|&
name|ACTION_FRAGMENT
operator|)
operator|==
name|ACTION_FRAGMENT
condition|)
block|{
if|if
condition|(
name|comma
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FRAGMENT
argument_list|)
expr_stmt|;
block|}
name|actions
operator|=
name|result
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Returns a new {@code PermissionCollection} object suitable for 	 * storing {@code BundlePermission} objects. 	 *  	 * @return A new {@code PermissionCollection} object. 	 */
specifier|public
name|PermissionCollection
name|newPermissionCollection
parameter_list|()
block|{
return|return
operator|new
name|BundlePermissionCollection
argument_list|()
return|;
block|}
comment|/** 	 * Determines the equality of two {@code BundlePermission} objects. 	 *  	 * This method checks that specified bundle has the same bundle symbolic 	 * name and {@code BundlePermission} actions as this 	 * {@code BundlePermission} object. 	 *  	 * @param obj The object to test for equality with this 	 *        {@code BundlePermission} object. 	 * @return {@code true} if {@code obj} is a 	 *         {@code BundlePermission}, and has the same bundle symbolic 	 *         name and actions as this {@code BundlePermission} object; 	 *         {@code false} otherwise. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|BundlePermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BundlePermission
name|bp
init|=
operator|(
name|BundlePermission
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|getActionsMask
argument_list|()
operator|==
name|bp
operator|.
name|getActionsMask
argument_list|()
operator|)
operator|&&
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|bp
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Returns the hash code value for this object. 	 *  	 * @return A hash code value for this object. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|31
operator|*
literal|17
operator|+
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|getActions
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
comment|/** 	 * WriteObject is called to save the state of the 	 * {@code BundlePermission} object to a stream. The actions are 	 * serialized, and the superclass takes care of the name. 	 */
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write out the actions. The superclass takes care of the name
comment|// call getActions to make sure actions field is initialized
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
name|getActions
argument_list|()
expr_stmt|;
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * readObject is called to restore the state of the BundlePermission from a 	 * stream. 	 */
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// Read in the action, then initialize the rest
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|setTransients
argument_list|(
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**  * Stores a set of {@code BundlePermission} permissions.  *   * @see java.security.Permission  * @see java.security.Permissions  * @see java.security.PermissionCollection  */
end_comment

begin_class
specifier|final
class|class
name|BundlePermissionCollection
extends|extends
name|PermissionCollection
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3258407326846433079L
decl_stmt|;
comment|/** 	 * Table of permissions. 	 *  	 * @GuardedBy this 	 */
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
name|permissions
decl_stmt|;
comment|/** 	 * Boolean saying if "*" is in the collection. 	 *  	 * @serial 	 * @GuardedBy this 	 */
specifier|private
name|boolean
name|all_allowed
decl_stmt|;
comment|/** 	 * Create an empty BundlePermissions object. 	 *  	 */
specifier|public
name|BundlePermissionCollection
parameter_list|()
block|{
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
argument_list|()
expr_stmt|;
name|all_allowed
operator|=
literal|false
expr_stmt|;
block|}
comment|/** 	 * Add a permission to this permission collection. 	 *  	 * @param permission The {@code BundlePermission} object to add. 	 * @throws IllegalArgumentException If the permission is not a 	 *         {@code BundlePermission} instance. 	 * @throws SecurityException If this {@code BundlePermissionCollection} 	 *         object has been marked read-only. 	 */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|BundlePermission
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|permission
argument_list|)
throw|;
block|}
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"attempt to add a Permission to a "
operator|+
literal|"readonly PermissionCollection"
argument_list|)
throw|;
block|}
specifier|final
name|BundlePermission
name|bp
init|=
operator|(
name|BundlePermission
operator|)
name|permission
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|bp
operator|.
name|getName
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
name|pc
init|=
name|permissions
decl_stmt|;
name|BundlePermission
name|existing
init|=
name|pc
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|oldMask
init|=
name|existing
operator|.
name|getActionsMask
argument_list|()
decl_stmt|;
specifier|final
name|int
name|newMask
init|=
name|bp
operator|.
name|getActionsMask
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldMask
operator|!=
name|newMask
condition|)
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|BundlePermission
argument_list|(
name|name
argument_list|,
name|oldMask
operator||
name|newMask
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|bp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|all_allowed
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
name|all_allowed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Determines if the specified permissions implies the permissions expressed 	 * in {@code permission}. 	 *  	 * @param permission The Permission object to compare with this 	 *        {@code BundlePermission} object. 	 * @return {@code true} if {@code permission} is a proper subset 	 *         of a permission in the set; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|BundlePermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|BundlePermission
name|requested
init|=
operator|(
name|BundlePermission
operator|)
name|permission
decl_stmt|;
name|String
name|requestedName
init|=
name|requested
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|getActionsMask
argument_list|()
decl_stmt|;
name|int
name|effective
init|=
name|BundlePermission
operator|.
name|ACTION_NONE
decl_stmt|;
name|BundlePermission
name|bp
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
name|pc
init|=
name|permissions
decl_stmt|;
comment|/* short circuit if the "*" Permission was added */
if|if
condition|(
name|all_allowed
condition|)
block|{
name|bp
operator|=
name|pc
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|effective
operator||=
name|bp
operator|.
name|getActionsMask
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|bp
operator|=
name|pc
operator|.
name|get
argument_list|(
name|requestedName
argument_list|)
expr_stmt|;
comment|// strategy:
comment|// Check for full match first. Then work our way up the
comment|// name looking for matches on a.b.*
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
comment|// we have a direct hit!
name|effective
operator||=
name|bp
operator|.
name|getActionsMask
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|// work our way up the tree...
name|int
name|last
decl_stmt|;
name|int
name|offset
init|=
name|requestedName
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|last
operator|=
name|requestedName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|,
name|offset
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|requestedName
operator|=
name|requestedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|last
operator|+
literal|1
argument_list|)
operator|+
literal|"*"
expr_stmt|;
name|bp
operator|=
name|pc
operator|.
name|get
argument_list|(
name|requestedName
argument_list|)
expr_stmt|;
if|if
condition|(
name|bp
operator|!=
literal|null
condition|)
block|{
name|effective
operator||=
name|bp
operator|.
name|getActionsMask
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|offset
operator|=
name|last
operator|-
literal|1
expr_stmt|;
block|}
comment|// we don't have to check for "*" as it was already checked
comment|// at the top (all_allowed), so we just return false
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * Returns an enumeration of all {@code BundlePermission} objects in 	 * the container. 	 *  	 * @return Enumeration of all {@code BundlePermission} objects. 	 */
specifier|public
specifier|synchronized
name|Enumeration
argument_list|<
name|Permission
argument_list|>
name|elements
parameter_list|()
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|Permission
argument_list|>
argument_list|(
name|permissions
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|all
argument_list|)
return|;
block|}
comment|/* serialization logic */
specifier|private
specifier|static
specifier|final
name|ObjectStreamField
index|[]
name|serialPersistentFields
init|=
block|{
operator|new
name|ObjectStreamField
argument_list|(
literal|"permissions"
argument_list|,
name|Hashtable
operator|.
name|class
argument_list|)
block|,
operator|new
name|ObjectStreamField
argument_list|(
literal|"all_allowed"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
name|hashtable
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
argument_list|(
name|permissions
argument_list|)
decl_stmt|;
name|ObjectOutputStream
operator|.
name|PutField
name|pfields
init|=
name|out
operator|.
name|putFields
argument_list|()
decl_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|hashtable
argument_list|)
expr_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"all_allowed"
argument_list|,
name|all_allowed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFields
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ObjectInputStream
operator|.
name|GetField
name|gfields
init|=
name|in
operator|.
name|readFields
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
name|hashtable
init|=
operator|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
operator|)
name|gfields
operator|.
name|get
argument_list|(
literal|"permissions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BundlePermission
argument_list|>
argument_list|(
name|hashtable
argument_list|)
expr_stmt|;
name|all_allowed
operator|=
name|gfields
operator|.
name|get
argument_list|(
literal|"all_allowed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

