begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|framework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Package private class used by permissions for filter matching on signer key  * during filter expression evaluation in the permission implies method.  *   * @Immutable  * @version $Id: 3589831a7594cf36e645a51ab9b9ae5ebfd80beb $  */
end_comment

begin_class
specifier|final
class|class
name|SignerProperty
block|{
specifier|private
specifier|final
name|Bundle
name|bundle
decl_stmt|;
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
comment|/** 	 * String constructor used by the filter matching algorithm to construct a 	 * SignerProperty from the attribute value in a filter expression. 	 *  	 * @param pattern Attribute value in the filter expression. 	 */
specifier|public
name|SignerProperty
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * Used by the permission implies method to build the properties for a 	 * filter match. 	 *  	 * @param bundle The bundle whose signers are to be matched. 	 */
name|SignerProperty
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * Used by the filter matching algorithm. This methods does NOT satisfy the 	 * normal equals contract. Since the class is only used in filter expression 	 * evaluations, it only needs to support comparing an instance created with 	 * a Bundle to an instance created with a pattern string from the filter 	 * expression. 	 *  	 * @param o SignerProperty to compare against. 	 * @return true if the DN name chain matches the pattern. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SignerProperty
operator|)
condition|)
return|return
literal|false
return|;
name|SignerProperty
name|other
init|=
operator|(
name|SignerProperty
operator|)
name|o
decl_stmt|;
name|Bundle
name|matchBundle
init|=
name|bundle
operator|!=
literal|null
condition|?
name|bundle
else|:
name|other
operator|.
name|bundle
decl_stmt|;
name|String
name|matchPattern
init|=
name|bundle
operator|!=
literal|null
condition|?
name|other
operator|.
name|pattern
else|:
name|pattern
decl_stmt|;
name|Map
argument_list|<
name|X509Certificate
argument_list|,
name|List
argument_list|<
name|X509Certificate
argument_list|>
argument_list|>
name|signers
init|=
name|matchBundle
operator|.
name|getSignerCertificates
argument_list|(
name|Bundle
operator|.
name|SIGNERS_TRUSTED
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|X509Certificate
argument_list|>
name|signerCerts
range|:
name|signers
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dnChain
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|signerCerts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|X509Certificate
name|signerCert
range|:
name|signerCerts
control|)
block|{
name|dnChain
operator|.
name|add
argument_list|(
name|signerCert
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|FrameworkUtil
operator|.
name|matchDistinguishedNameChain
argument_list|(
name|matchPattern
argument_list|,
name|dnChain
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
continue|continue;
comment|// bad pattern
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Since the equals method does not obey the general equals contract, this 	 * method cannot generate hash codes which obey the equals contract. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
return|;
block|}
comment|/** 	 * Check if the bundle is signed. 	 *  	 * @return true if constructed with a bundle that is signed. 	 */
name|boolean
name|isBundleSigned
parameter_list|()
block|{
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|X509Certificate
argument_list|,
name|List
argument_list|<
name|X509Certificate
argument_list|>
argument_list|>
name|signers
init|=
name|bundle
operator|.
name|getSignerCertificates
argument_list|(
name|Bundle
operator|.
name|SIGNERS_TRUSTED
argument_list|)
decl_stmt|;
return|return
operator|!
name|signers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

