begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2010, 2011). All Rights Reserved.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|framework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|NotSerializableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|BasicPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A bundle's authority to adapt an object to a type.  *   *<p>  * {@code AdaptPermission} has one action: {@code adapt}.  *   * @ThreadSafe  * @version $Id: bc4c5d392d2534a7744f6fc00f4665502f82033c $  */
end_comment

begin_class
specifier|public
class|class
name|AdaptPermission
extends|extends
name|BasicPermission
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/** 	 * The action string {@code initiate}. 	 */
specifier|public
specifier|final
specifier|static
name|String
name|ADAPT
init|=
literal|"adapt"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_ADAPT
init|=
literal|0x00000001
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_ALL
init|=
name|ACTION_ADAPT
decl_stmt|;
specifier|final
specifier|static
name|int
name|ACTION_NONE
init|=
literal|0
decl_stmt|;
comment|/** 	 * The actions mask. 	 */
specifier|transient
name|int
name|action_mask
decl_stmt|;
comment|/** 	 * The actions in canonical form. 	 *  	 * @serial 	 */
specifier|private
specifier|volatile
name|String
name|actions
init|=
literal|null
decl_stmt|;
comment|/** 	 * The bundle used by this AdaptPermission. 	 */
specifier|transient
specifier|final
name|Bundle
name|bundle
decl_stmt|;
comment|/** 	 * This holds a Filter matching object used to evaluate the filter in 	 * implies. 	 */
specifier|transient
name|Filter
name|filter
decl_stmt|;
comment|/** 	 * This map holds the properties of the permission, used to match a filter 	 * in implies. This is not initialized until necessary, and then cached in 	 * this object. 	 */
specifier|private
specifier|transient
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
comment|/** 	 * Creates a new granted {@code AdaptPermission} object. 	 *  	 * This constructor must only be used to create a permission that is going 	 * to be checked. 	 *<p> 	 * Examples: 	 *  	 *<pre> 	 * (adaptClass=com.acme.*) 	 * (&amp;(signer=\*,o=ACME,c=US)(adaptClass=com.acme.*)) 	 * (signer=\*,o=ACME,c=US) 	 *</pre> 	 *  	 *<p> 	 * When a signer key is used within the filter expression the signer value 	 * must escape the special filter chars ('*', '(', ')'). 	 *<p> 	 * The name is specified as a filter expression. The filter gives access to 	 * the following attributes: 	 *<ul> 	 *<li>signer - A Distinguished Name chain used to sign the exporting 	 * bundle. Wildcards in a DN are not matched according to the filter string 	 * rules, but according to the rules defined for a DN chain.</li> 	 *<li>location - The location of the exporting bundle.</li> 	 *<li>id - The bundle ID of the exporting bundle.</li> 	 *<li>name - The symbolic name of the exporting bundle.</li> 	 *<li>adaptClass - The name of the type to which an object can be adapted.</li> 	 *</ul> 	 * Filter attribute names are processed in a case sensitive manner. 	 *  	 * @param filter A filter expression. Filter attribute names are processed 	 *        in a case sensitive manner. A special value of {@code "*"} can be 	 *        used to match all adaptations. 	 * @param actions {@code adapt}. 	 * @throws IllegalArgumentException If the filter has an invalid syntax. 	 */
specifier|public
name|AdaptPermission
parameter_list|(
name|String
name|filter
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|this
argument_list|(
name|parseFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a new requested {@code AdaptPermission} object to be used by the 	 * code that must perform {@code checkPermission}. {@code AdaptPermission} 	 * objects created with this constructor cannot be added to an 	 * {@code AdaptPermission} permission collection. 	 *  	 * @param adaptClass The name of the type to which an object can be adapted. 	 * @param adaptableBundle The bundle associated with the object being 	 *        adapted. 	 * @param actions {@code adapt}. 	 */
specifier|public
name|AdaptPermission
parameter_list|(
name|String
name|adaptClass
parameter_list|,
name|Bundle
name|adaptableBundle
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|super
argument_list|(
name|adaptClass
argument_list|)
expr_stmt|;
name|setTransients
argument_list|(
literal|null
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
name|adaptableBundle
expr_stmt|;
if|if
condition|(
name|adaptClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"adaptClass must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|adaptableBundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"adaptableBundle must not be null"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Package private constructor used by AdaptPermissionCollection. 	 *  	 * @param filter name filter 	 * @param mask action mask 	 */
name|AdaptPermission
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|filter
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setTransients
argument_list|(
name|filter
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * Called by constructors and when deserialized. 	 *  	 * @param filter Permission's filter or {@code null} for wildcard. 	 * @param mask action mask 	 */
specifier|private
name|void
name|setTransients
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
if|if
condition|(
operator|(
name|mask
operator|==
name|ACTION_NONE
operator|)
operator|||
operator|(
operator|(
name|mask
operator|&
name|ACTION_ALL
operator|)
operator|!=
name|mask
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid action string"
argument_list|)
throw|;
block|}
name|this
operator|.
name|action_mask
operator|=
name|mask
expr_stmt|;
block|}
comment|/** 	 * Parse action string into action mask. 	 *  	 * @param actions Action string. 	 * @return action mask. 	 */
specifier|private
specifier|static
name|int
name|parseActions
parameter_list|(
name|String
name|actions
parameter_list|)
block|{
name|boolean
name|seencomma
init|=
literal|false
decl_stmt|;
name|int
name|mask
init|=
name|ACTION_NONE
decl_stmt|;
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
block|{
return|return
name|mask
return|;
block|}
name|char
index|[]
name|a
init|=
name|actions
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|a
operator|.
name|length
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
return|return
name|mask
return|;
while|while
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|c
decl_stmt|;
comment|// skip whitespace
while|while
condition|(
operator|(
name|i
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
operator|(
name|c
operator|=
name|a
index|[
name|i
index|]
operator|)
operator|==
literal|' '
operator|||
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
operator|||
name|c
operator|==
literal|'\f'
operator|||
name|c
operator|==
literal|'\t'
operator|)
condition|)
name|i
operator|--
expr_stmt|;
comment|// check for the known strings
name|int
name|matchlen
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|4
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'d'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'D'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'p'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'P'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'T'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|5
expr_stmt|;
name|mask
operator||=
name|ACTION_ADAPT
expr_stmt|;
block|}
else|else
block|{
comment|// parse error
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid actions: "
operator|+
name|actions
argument_list|)
throw|;
block|}
comment|// make sure we didn't just match the tail of a word
comment|// like "ackbarfadapt". Also, skip to the comma.
name|seencomma
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|i
operator|>=
name|matchlen
operator|&&
operator|!
name|seencomma
condition|)
block|{
switch|switch
condition|(
name|a
index|[
name|i
operator|-
name|matchlen
index|]
condition|)
block|{
case|case
literal|','
case|:
name|seencomma
operator|=
literal|true
expr_stmt|;
comment|/* FALLTHROUGH */
case|case
literal|' '
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\f'
case|:
case|case
literal|'\t'
case|:
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
name|i
operator|--
expr_stmt|;
block|}
comment|// point i at the location of the comma minus one (or -1).
name|i
operator|-=
name|matchlen
expr_stmt|;
block|}
if|if
condition|(
name|seencomma
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid actions: "
operator|+
name|actions
argument_list|)
throw|;
block|}
return|return
name|mask
return|;
block|}
comment|/** 	 * Parse filter string into a Filter object. 	 *  	 * @param filterString The filter string to parse. 	 * @return a Filter for this bundle. 	 * @throws IllegalArgumentException If the filter syntax is invalid. 	 */
specifier|private
specifier|static
name|Filter
name|parseFilter
parameter_list|(
name|String
name|filterString
parameter_list|)
block|{
name|filterString
operator|=
name|filterString
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|filterString
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|filterString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid filter"
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
block|}
comment|/** 	 * Determines if the specified permission is implied by this object. 	 *  	 *<p> 	 * This method checks that the filter of the target is implied by the adapt 	 * class name of this object. The list of {@code AdaptPermission} actions 	 * must either match or allow for the list of the target object to imply the 	 * target {@code AdaptPermission} action. 	 *<p> 	 *  	 * @param p The requested permission. 	 * @return {@code true} if the specified permission is implied by this 	 *         object; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|AdaptPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AdaptPermission
name|requested
init|=
operator|(
name|AdaptPermission
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if requested permission has a filter, then it is an invalid argument
if|if
condition|(
name|requested
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|implies0
argument_list|(
name|requested
argument_list|,
name|ACTION_NONE
argument_list|)
return|;
block|}
comment|/** 	 * Internal implies method. Used by the implies and the permission 	 * collection implies methods. 	 *  	 * @param requested The requested AdaptPermission which has already be 	 *        validated as a proper argument. The requested AdaptPermission must 	 *        not have a filter expression. 	 * @param effective The effective actions with which to start. 	 * @return {@code true} if the specified permission is implied by this 	 *         object; {@code false} otherwise. 	 */
name|boolean
name|implies0
parameter_list|(
name|AdaptPermission
name|requested
parameter_list|,
name|int
name|effective
parameter_list|)
block|{
comment|/* check actions first - much faster */
name|effective
operator||=
name|action_mask
expr_stmt|;
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|!=
name|desired
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/* Get filter */
name|Filter
name|f
init|=
name|filter
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
comment|// it's "*"
return|return
literal|true
return|;
block|}
return|return
name|f
operator|.
name|matches
argument_list|(
name|requested
operator|.
name|getProperties
argument_list|()
argument_list|)
return|;
block|}
comment|/** 	 * Returns the canonical string representation of the 	 * {@code AdaptPermission} actions. 	 *  	 *<p> 	 * Always returns present {@code AdaptPermission} actions in the following 	 * order: {@code adapt}. 	 *  	 * @return Canonical string representation of the {@code AdaptPermission} 	 *         actions. 	 */
specifier|public
name|String
name|getActions
parameter_list|()
block|{
name|String
name|result
init|=
name|actions
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|actions
operator|=
name|result
operator|=
name|ADAPT
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Returns a new {@code PermissionCollection} object suitable for storing 	 * {@code AdaptPermission} objects. 	 *  	 * @return A new {@code PermissionCollection} object. 	 */
specifier|public
name|PermissionCollection
name|newPermissionCollection
parameter_list|()
block|{
return|return
operator|new
name|AdaptPermissionCollection
argument_list|()
return|;
block|}
comment|/** 	 * Determines the equality of two {@code AdaptPermission} objects. 	 *  	 * This method checks that specified permission has the same name and 	 * {@code AdaptPermission} actions as this {@code AdaptPermission} object. 	 *  	 * @param obj The object to test for equality with this 	 *        {@code AdaptPermission} object. 	 * @return {@code true} if {@code obj} is a {@code AdaptPermission}, and has 	 *         the same name and actions as this {@code AdaptPermission} object; 	 *         {@code false} otherwise. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|AdaptPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AdaptPermission
name|cp
init|=
operator|(
name|AdaptPermission
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|action_mask
operator|==
name|cp
operator|.
name|action_mask
operator|)
operator|&&
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|cp
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|(
name|bundle
operator|==
name|cp
operator|.
name|bundle
operator|)
operator|||
operator|(
operator|(
name|bundle
operator|!=
literal|null
operator|)
operator|&&
name|bundle
operator|.
name|equals
argument_list|(
name|cp
operator|.
name|bundle
argument_list|)
operator|)
operator|)
return|;
block|}
comment|/** 	 * Returns the hash code value for this object. 	 *  	 * @return A hash code value for this object. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|31
operator|*
literal|17
operator|+
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|getActions
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|bundle
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
comment|/** 	 * WriteObject is called to save the state of this permission object to a 	 * stream. The actions are serialized, and the superclass takes care of the 	 * name. 	 */
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotSerializableException
argument_list|(
literal|"cannot serialize"
argument_list|)
throw|;
block|}
comment|// Write out the actions. The superclass takes care of the name
comment|// call getActions to make sure actions field is initialized
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
name|getActions
argument_list|()
expr_stmt|;
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * readObject is called to restore the state of this permission from a 	 * stream. 	 */
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// Read in the action, then initialize the rest
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|setTransients
argument_list|(
name|parseFilter
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Called by {@code<@link AdaptPermission#implies(Permission)>}. This 	 * method is only called on a requested permission which cannot have a 	 * filter set. 	 *  	 * @return a map of properties for this permission. 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|properties
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"adaptClass"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Long
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|bundle
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|SignerProperty
name|signer
init|=
operator|new
name|SignerProperty
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|signer
operator|.
name|isBundleSigned
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"signer"
argument_list|,
name|signer
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
operator|=
name|map
return|;
block|}
block|}
end_class

begin_comment
comment|/**  * Stores a set of {@code AdaptPermission} permissions.  *   * @see java.security.Permission  * @see java.security.Permissions  * @see java.security.PermissionCollection  */
end_comment

begin_class
specifier|final
class|class
name|AdaptPermissionCollection
extends|extends
name|PermissionCollection
block|{
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3350758995234427603L
decl_stmt|;
comment|/** 	 * Collection of permissions. 	 *  	 * @serial 	 * @GuardedBy this 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AdaptPermission
argument_list|>
name|permissions
decl_stmt|;
comment|/** 	 * Boolean saying if "*" is in the collection. 	 *  	 * @serial 	 * @GuardedBy this 	 */
specifier|private
name|boolean
name|all_allowed
decl_stmt|;
comment|/** 	 * Create an empty AdaptPermissions object. 	 */
specifier|public
name|AdaptPermissionCollection
parameter_list|()
block|{
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AdaptPermission
argument_list|>
argument_list|()
expr_stmt|;
name|all_allowed
operator|=
literal|false
expr_stmt|;
block|}
comment|/** 	 * Adds a permission to this permission collection. 	 *  	 * @param permission The {@code AdaptPermission} object to add. 	 * @throws IllegalArgumentException If the specified permission is not a 	 *         {@code AdaptPermission} instance or was constructed with a Bundle 	 *         object. 	 * @throws SecurityException If this {@code AdaptPermissionCollection} 	 *         object has been marked read-only. 	 */
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|AdaptPermission
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|permission
argument_list|)
throw|;
block|}
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"attempt to add a Permission to a "
operator|+
literal|"readonly PermissionCollection"
argument_list|)
throw|;
block|}
specifier|final
name|AdaptPermission
name|ap
init|=
operator|(
name|AdaptPermission
operator|)
name|permission
decl_stmt|;
if|if
condition|(
name|ap
operator|.
name|bundle
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot add to collection: "
operator|+
name|ap
argument_list|)
throw|;
block|}
specifier|final
name|String
name|name
init|=
name|ap
operator|.
name|getName
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AdaptPermission
argument_list|>
name|pc
init|=
name|permissions
decl_stmt|;
specifier|final
name|AdaptPermission
name|existing
init|=
name|pc
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|oldMask
init|=
name|existing
operator|.
name|action_mask
decl_stmt|;
specifier|final
name|int
name|newMask
init|=
name|ap
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
name|oldMask
operator|!=
name|newMask
condition|)
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|AdaptPermission
argument_list|(
name|existing
operator|.
name|filter
argument_list|,
name|oldMask
operator||
name|newMask
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|all_allowed
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|all_allowed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * Determines if the specified permissions implies the permissions expressed 	 * in {@code permission}. 	 *  	 * @param permission The Permission object to compare with this 	 *        {@code AdaptPermission} object. 	 * @return {@code true} if {@code permission} is a proper subset of a 	 *         permission in the set; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|AdaptPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|AdaptPermission
name|requested
init|=
operator|(
name|AdaptPermission
operator|)
name|permission
decl_stmt|;
comment|/* if requested permission has a filter, then it is an invalid argument */
if|if
condition|(
name|requested
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|effective
init|=
name|AdaptPermission
operator|.
name|ACTION_NONE
decl_stmt|;
name|Collection
argument_list|<
name|AdaptPermission
argument_list|>
name|perms
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AdaptPermission
argument_list|>
name|pc
init|=
name|permissions
decl_stmt|;
comment|/* short circuit if the "*" Permission was added */
if|if
condition|(
name|all_allowed
condition|)
block|{
name|AdaptPermission
name|ap
init|=
name|pc
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ap
operator|!=
literal|null
condition|)
block|{
name|effective
operator||=
name|ap
operator|.
name|action_mask
expr_stmt|;
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|perms
operator|=
name|pc
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
comment|/* iterate one by one over filteredPermissions */
for|for
control|(
name|AdaptPermission
name|perm
range|:
name|perms
control|)
block|{
if|if
condition|(
name|perm
operator|.
name|implies0
argument_list|(
name|requested
argument_list|,
name|effective
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Returns an enumeration of all {@code AdaptPermission} objects in the 	 * container. 	 *  	 * @return Enumeration of all {@code AdaptPermission} objects. 	 */
specifier|public
specifier|synchronized
name|Enumeration
argument_list|<
name|Permission
argument_list|>
name|elements
parameter_list|()
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|Permission
argument_list|>
argument_list|(
name|permissions
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|all
argument_list|)
return|;
block|}
comment|/* serialization logic */
specifier|private
specifier|static
specifier|final
name|ObjectStreamField
index|[]
name|serialPersistentFields
init|=
block|{
operator|new
name|ObjectStreamField
argument_list|(
literal|"permissions"
argument_list|,
name|HashMap
operator|.
name|class
argument_list|)
block|,
operator|new
name|ObjectStreamField
argument_list|(
literal|"all_allowed"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectOutputStream
operator|.
name|PutField
name|pfields
init|=
name|out
operator|.
name|putFields
argument_list|()
decl_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"all_allowed"
argument_list|,
name|all_allowed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFields
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ObjectInputStream
operator|.
name|GetField
name|gfields
init|=
name|in
operator|.
name|readFields
argument_list|()
decl_stmt|;
name|permissions
operator|=
operator|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|AdaptPermission
argument_list|>
operator|)
name|gfields
operator|.
name|get
argument_list|(
literal|"permissions"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|all_allowed
operator|=
name|gfields
operator|.
name|get
argument_list|(
literal|"all_allowed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

