begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2000, 2011). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|framework
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|NotSerializableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectStreamField
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|BasicPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A bundle's authority to perform specific privileged administrative operations  * on or to get sensitive information about a bundle. The actions for this  * permission are:  *   *<pre>  *  Action               Methods  *  class                Bundle.loadClass  *  execute              Bundle.start  *                       Bundle.stop  *                       BundleStartLevel.setStartLevel  *  extensionLifecycle   BundleContext.installBundle for extension bundles  *                       Bundle.update for extension bundles  *                       Bundle.uninstall for extension bundles  *  lifecycle            BundleContext.installBundle  *                       Bundle.update  *                       Bundle.uninstall  *  listener             BundleContext.addBundleListener for SynchronousBundleListener  *                       BundleContext.removeBundleListener for SynchronousBundleListener  *  metadata             Bundle.getHeaders  *                       Bundle.getLocation  *  resolve              FrameworkWiring.refreshBundles  *                       FrameworkWiring.resolveBundles  *  resource             Bundle.getResource  *                       Bundle.getResources  *                       Bundle.getEntry  *                       Bundle.getEntryPaths  *                       Bundle.findEntries  *                       Bundle resource/entry URL creation  *  startlevel           FrameworkStartLevel.setStartLevel  *                       FrameworkStartLevel.setInitialBundleStartLevel   *  context              Bundle.getBundleContext  *  weave                WovenClass.setBytes  *                       WovenClass.getDynamicImports for modification  *</pre>  *   *<p>  * The special action&quot;*&quot; will represent all actions. The  * {@code resolve} action is implied by the {@code class}, {@code execute} and  * {@code resource} actions.  *<p>  * The name of this permission is a filter expression. The filter gives access  * to the following attributes:  *<ul>  *<li>signer - A Distinguished Name chain used to sign a bundle. Wildcards in a  * DN are not matched according to the filter string rules, but according to the  * rules defined for a DN chain.</li>  *<li>location - The location of a bundle.</li>  *<li>id - The bundle ID of the designated bundle.</li>  *<li>name - The symbolic name of a bundle.</li>  *</ul>  * Filter attribute names are processed in a case sensitive manner.  *   * @ThreadSafe  * @version $Id: 43baf9a6d7ce5e6108507834e841e340fd91c513 $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|AdminPermission
extends|extends
name|BasicPermission
block|{
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|307051004521261705L
decl_stmt|;
comment|/** 	 * The action string {@code class}. The {@code class} action 	 * implies the {@code resolve} action. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|CLASS
init|=
literal|"class"
decl_stmt|;
comment|/** 	 * The action string {@code execute}. The {@code execute} action 	 * implies the {@code resolve} action. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|EXECUTE
init|=
literal|"execute"
decl_stmt|;
comment|/** 	 * The action string {@code extensionLifecycle}. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|EXTENSIONLIFECYCLE
init|=
literal|"extensionLifecycle"
decl_stmt|;
comment|/** 	 * The action string {@code lifecycle}. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|LIFECYCLE
init|=
literal|"lifecycle"
decl_stmt|;
comment|/** 	 * The action string {@code listener}. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|LISTENER
init|=
literal|"listener"
decl_stmt|;
comment|/** 	 * The action string {@code metadata}. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|METADATA
init|=
literal|"metadata"
decl_stmt|;
comment|/** 	 * The action string {@code resolve}. The {@code resolve} action 	 * is implied by the {@code class}, {@code execute} and 	 * {@code resource} actions. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|RESOLVE
init|=
literal|"resolve"
decl_stmt|;
comment|/** 	 * The action string {@code resource}. The {@code resource} action 	 * implies the {@code resolve} action. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|RESOURCE
init|=
literal|"resource"
decl_stmt|;
comment|/** 	 * The action string {@code startlevel}. 	 *  	 * @since 1.3 	 */
specifier|public
specifier|final
specifier|static
name|String
name|STARTLEVEL
init|=
literal|"startlevel"
decl_stmt|;
comment|/** 	 * The action string {@code context}. 	 *  	 * @since 1.4 	 */
specifier|public
specifier|final
specifier|static
name|String
name|CONTEXT
init|=
literal|"context"
decl_stmt|;
comment|/** 	 * The action string {@code weave}. 	 *  	 * @since 1.6 	 */
specifier|public
specifier|final
specifier|static
name|String
name|WEAVE
init|=
literal|"weave"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_CLASS
init|=
literal|0x00000001
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_EXECUTE
init|=
literal|0x00000002
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_LIFECYCLE
init|=
literal|0x00000004
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_LISTENER
init|=
literal|0x00000008
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_METADATA
init|=
literal|0x00000010
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_RESOLVE
init|=
literal|0x00000040
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_RESOURCE
init|=
literal|0x00000080
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_STARTLEVEL
init|=
literal|0x00000100
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_EXTENSIONLIFECYCLE
init|=
literal|0x00000200
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_CONTEXT
init|=
literal|0x00000400
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_WEAVE
init|=
literal|0x00000800
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ACTION_ALL
init|=
name|ACTION_CLASS
operator||
name|ACTION_EXECUTE
operator||
name|ACTION_LIFECYCLE
operator||
name|ACTION_LISTENER
operator||
name|ACTION_METADATA
operator||
name|ACTION_RESOLVE
operator||
name|ACTION_RESOURCE
operator||
name|ACTION_STARTLEVEL
operator||
name|ACTION_EXTENSIONLIFECYCLE
operator||
name|ACTION_CONTEXT
operator||
name|ACTION_WEAVE
decl_stmt|;
specifier|final
specifier|static
name|int
name|ACTION_NONE
init|=
literal|0
decl_stmt|;
comment|/** 	 * The actions in canonical form. 	 *  	 * @serial 	 */
specifier|private
specifier|volatile
name|String
name|actions
init|=
literal|null
decl_stmt|;
comment|/** 	 * The actions mask. 	 */
specifier|transient
name|int
name|action_mask
decl_stmt|;
comment|/** 	 * If this AdminPermission was constructed with a filter, this holds a 	 * Filter matching object used to evaluate the filter in implies. 	 */
specifier|transient
name|Filter
name|filter
decl_stmt|;
comment|/** 	 * The bundle governed by this AdminPermission - only used if filter == null 	 */
specifier|transient
specifier|final
name|Bundle
name|bundle
decl_stmt|;
comment|/** 	 * This map holds the properties of the permission, used to match a filter 	 * in implies. This is not initialized until necessary, and then cached in 	 * this object. 	 */
specifier|private
specifier|transient
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
comment|/** 	 * ThreadLocal used to determine if we have recursively called 	 * getProperties. 	 */
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Bundle
argument_list|>
name|recurse
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 * Creates a new {@code AdminPermission} object that matches all 	 * bundles and has all actions. Equivalent to AdminPermission("*","*"); 	 */
specifier|public
name|AdminPermission
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|ACTION_ALL
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Create a new AdminPermission. 	 *  	 * This constructor must only be used to create a permission that is going 	 * to be checked. 	 *<p> 	 * Examples: 	 *  	 *<pre> 	 * (signer=\*,o=ACME,c=US)    	 * (&amp;(signer=\*,o=ACME,c=US)(name=com.acme.*)(location=http://www.acme.com/bundles/*)) 	 * (id&gt;=1) 	 *</pre> 	 *  	 *<p> 	 * When a signer key is used within the filter expression the signer value 	 * must escape the special filter chars ('*', '(', ')'). 	 *<p> 	 * Null arguments are equivalent to "*". 	 *  	 * @param filter A filter expression that can use signer, location, id, and 	 *        name keys. A value of&quot;*&quot; or {@code null} matches all 	 *        bundle. Filter attribute names are processed in a case sensitive 	 *        manner. 	 * @param actions {@code class}, {@code execute}, {@code extensionLifecycle} 	 *        , {@code lifecycle}, {@code listener}, {@code metadata}, 	 *        {@code resolve} , {@code resource}, {@code startlevel}, 	 *        {@code context} or {@code weave}. A value of "*" or {@code null} 	 *        indicates all actions. 	 * @throws IllegalArgumentException If the filter has an invalid syntax. 	 */
specifier|public
name|AdminPermission
parameter_list|(
name|String
name|filter
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
comment|// arguments will be null if called from a PermissionInfo defined with
comment|// no args
name|this
argument_list|(
name|parseFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a new requested {@code AdminPermission} object to be used by the 	 * code that must perform {@code checkPermission}. {@code AdminPermission} 	 * objects created with this constructor cannot be added to an 	 * {@code AdminPermission} permission collection. 	 *  	 * @param bundle A bundle. 	 * @param actions {@code class}, {@code execute}, {@code extensionLifecycle} 	 *        , {@code lifecycle}, {@code listener}, {@code metadata}, 	 *        {@code resolve} , {@code resource}, {@code startlevel}, 	 *        {@code context}, {@code weave}. A value of "*" or {@code null} 	 *        indicates all actions. 	 * @since 1.3 	 */
specifier|public
name|AdminPermission
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|super
argument_list|(
name|createName
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
name|setTransients
argument_list|(
literal|null
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
block|}
comment|/** 	 * Create a permission name from a Bundle 	 *  	 * @param bundle Bundle to use to create permission name. 	 * @return permission name. 	 */
specifier|private
specifier|static
name|String
name|createName
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
if|if
condition|(
name|bundle
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bundle must not be null"
argument_list|)
throw|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"(id="
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Package private constructor used by AdminPermissionCollection. 	 *  	 * @param filter name filter or {@code null} for wildcard. 	 * @param mask action mask 	 */
name|AdminPermission
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|filter
operator|==
literal|null
operator|)
condition|?
literal|"*"
else|:
name|filter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setTransients
argument_list|(
name|filter
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
literal|null
expr_stmt|;
block|}
comment|/** 	 * Called by constructors and when deserialized. 	 *  	 * @param filter Permission's filter or {@code null} for wildcard. 	 * @param mask action mask 	 */
specifier|private
name|void
name|setTransients
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|int
name|mask
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
if|if
condition|(
operator|(
name|mask
operator|==
name|ACTION_NONE
operator|)
operator|||
operator|(
operator|(
name|mask
operator|&
name|ACTION_ALL
operator|)
operator|!=
name|mask
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid action string"
argument_list|)
throw|;
block|}
name|this
operator|.
name|action_mask
operator|=
name|mask
expr_stmt|;
block|}
comment|/** 	 * Parse action string into action mask. 	 *  	 * @param actions Action string. 	 * @return action mask. 	 */
specifier|private
specifier|static
name|int
name|parseActions
parameter_list|(
name|String
name|actions
parameter_list|)
block|{
if|if
condition|(
operator|(
name|actions
operator|==
literal|null
operator|)
operator|||
name|actions
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
name|ACTION_ALL
return|;
block|}
name|boolean
name|seencomma
init|=
literal|false
decl_stmt|;
name|int
name|mask
init|=
name|ACTION_NONE
decl_stmt|;
name|char
index|[]
name|a
init|=
name|actions
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|a
operator|.
name|length
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
return|return
name|mask
return|;
while|while
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
name|c
decl_stmt|;
comment|// skip whitespace
while|while
condition|(
operator|(
name|i
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
operator|(
name|c
operator|=
name|a
index|[
name|i
index|]
operator|)
operator|==
literal|' '
operator|||
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
operator|||
name|c
operator|==
literal|'\f'
operator|||
name|c
operator|==
literal|'\t'
operator|)
condition|)
name|i
operator|--
expr_stmt|;
comment|// check for the known strings
name|int
name|matchlen
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|4
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'S'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|5
expr_stmt|;
name|mask
operator||=
name|ACTION_CLASS
operator||
name|ACTION_RESOLVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|6
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'x'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'X'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'u'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'U'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|7
expr_stmt|;
name|mask
operator||=
name|ACTION_EXECUTE
operator||
name|ACTION_RESOLVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|17
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|17
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|17
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|16
index|]
operator|==
literal|'x'
operator|||
name|a
index|[
name|i
operator|-
literal|16
index|]
operator|==
literal|'X'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|15
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|15
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|14
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|14
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|13
index|]
operator|==
literal|'n'
operator|||
name|a
index|[
name|i
operator|-
literal|13
index|]
operator|==
literal|'N'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|12
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|12
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|11
index|]
operator|==
literal|'i'
operator|||
name|a
index|[
name|i
operator|-
literal|11
index|]
operator|==
literal|'I'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|10
index|]
operator|==
literal|'o'
operator|||
name|a
index|[
name|i
operator|-
literal|10
index|]
operator|==
literal|'O'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|9
index|]
operator|==
literal|'n'
operator|||
name|a
index|[
name|i
operator|-
literal|9
index|]
operator|==
literal|'N'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|8
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|8
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'i'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'I'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'f'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'F'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'y'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'Y'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|18
expr_stmt|;
name|mask
operator||=
name|ACTION_EXTENSIONLIFECYCLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|8
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|8
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|8
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'i'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'I'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'f'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'F'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'y'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'Y'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|9
expr_stmt|;
name|mask
operator||=
name|ACTION_LIFECYCLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|7
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'i'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'I'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'n'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'N'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'R'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|8
expr_stmt|;
name|mask
operator||=
name|ACTION_LISTENER
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|7
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'m'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'M'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'d'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'D'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'A'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|8
expr_stmt|;
name|mask
operator||=
name|ACTION_METADATA
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|6
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'o'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'O'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'v'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'V'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|7
expr_stmt|;
name|mask
operator||=
name|ACTION_RESOLVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|7
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'o'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'O'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'u'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'U'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|8
expr_stmt|;
name|mask
operator||=
name|ACTION_RESOURCE
operator||
name|ACTION_RESOLVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|9
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|9
index|]
operator|==
literal|'s'
operator|||
name|a
index|[
name|i
operator|-
literal|9
index|]
operator|==
literal|'S'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|8
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|8
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|7
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'r'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'R'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'v'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'V'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'l'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'L'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|10
expr_stmt|;
name|mask
operator||=
name|ACTION_STARTLEVEL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|6
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'c'
operator|||
name|a
index|[
name|i
operator|-
literal|6
index|]
operator|==
literal|'C'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'o'
operator|||
name|a
index|[
name|i
operator|-
literal|5
index|]
operator|==
literal|'O'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'n'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'N'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'T'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'x'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'X'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'t'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'T'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|7
expr_stmt|;
name|mask
operator||=
name|ACTION_CONTEXT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|4
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'w'
operator|||
name|a
index|[
name|i
operator|-
literal|4
index|]
operator|==
literal|'W'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
operator|-
literal|3
index|]
operator|==
literal|'E'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'a'
operator|||
name|a
index|[
name|i
operator|-
literal|2
index|]
operator|==
literal|'A'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'v'
operator|||
name|a
index|[
name|i
operator|-
literal|1
index|]
operator|==
literal|'V'
operator|)
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'e'
operator|||
name|a
index|[
name|i
index|]
operator|==
literal|'E'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|5
expr_stmt|;
name|mask
operator||=
name|ACTION_WEAVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
operator|(
name|a
index|[
name|i
index|]
operator|==
literal|'*'
operator|)
condition|)
block|{
name|matchlen
operator|=
literal|1
expr_stmt|;
name|mask
operator||=
name|ACTION_ALL
expr_stmt|;
block|}
else|else
block|{
comment|// parse error
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
comment|// make sure we didn't just match the tail of a word
comment|// like "ackbarfstartlevel". Also, skip to the comma.
name|seencomma
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|i
operator|>=
name|matchlen
operator|&&
operator|!
name|seencomma
condition|)
block|{
switch|switch
condition|(
name|a
index|[
name|i
operator|-
name|matchlen
index|]
condition|)
block|{
case|case
literal|','
case|:
name|seencomma
operator|=
literal|true
expr_stmt|;
comment|/* FALLTHROUGH */
case|case
literal|' '
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\f'
case|:
case|case
literal|'\t'
case|:
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
name|i
operator|--
expr_stmt|;
block|}
comment|// point i at the location of the comma minus one (or -1).
name|i
operator|-=
name|matchlen
expr_stmt|;
block|}
if|if
condition|(
name|seencomma
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|actions
argument_list|)
throw|;
block|}
return|return
name|mask
return|;
block|}
comment|/** 	 * Parse filter string into a Filter object. 	 *  	 * @param filterString The filter string to parse. 	 * @return a Filter for this bundle. If the specified filterString is 	 *         {@code null} or equals "*", then {@code null} is 	 *         returned to indicate a wildcard. 	 * @throws IllegalArgumentException If the filter syntax is invalid. 	 */
specifier|private
specifier|static
name|Filter
name|parseFilter
parameter_list|(
name|String
name|filterString
parameter_list|)
block|{
if|if
condition|(
name|filterString
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|filterString
operator|=
name|filterString
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|filterString
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
name|filterString
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
name|IllegalArgumentException
name|iae
init|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid filter"
argument_list|)
decl_stmt|;
name|iae
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
block|}
comment|/** 	 * Determines if the specified permission is implied by this object. This 	 * method throws an exception if the specified permission was not 	 * constructed with a bundle. 	 *  	 *<p> 	 * This method returns {@code true} if the specified permission is an 	 * AdminPermission AND 	 *<ul> 	 *<li>this object's filter matches the specified permission's bundle ID, 	 * bundle symbolic name, bundle location and bundle signer distinguished 	 * name chain OR</li> 	 *<li>this object's filter is "*"</li> 	 *</ul> 	 * AND this object's actions include all of the specified permission's 	 * actions. 	 *<p> 	 * Special case: if the specified permission was constructed with "*" 	 * filter, then this method returns {@code true} if this object's 	 * filter is "*" and this object's actions include all of the specified 	 * permission's actions 	 *  	 * @param p The requested permission. 	 * @return {@code true} if the specified permission is implied by this 	 *         object; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|AdminPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AdminPermission
name|requested
init|=
operator|(
name|AdminPermission
operator|)
name|p
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// if requested permission has a filter, then it is an invalid argument
if|if
condition|(
name|requested
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|implies0
argument_list|(
name|requested
argument_list|,
name|ACTION_NONE
argument_list|)
return|;
block|}
comment|/** 	 * Internal implies method. Used by the implies and the permission 	 * collection implies methods. 	 *  	 * @param requested The requested AdminPermision which has already be 	 *        validated as a proper argument. The requested AdminPermission must 	 *        not have a filter expression. 	 * @param effective The effective actions with which to start. 	 * @return {@code true} if the specified permission is implied by this 	 *         object; {@code false} otherwise. 	 */
name|boolean
name|implies0
parameter_list|(
name|AdminPermission
name|requested
parameter_list|,
name|int
name|effective
parameter_list|)
block|{
comment|/* check actions first - much faster */
name|effective
operator||=
name|action_mask
expr_stmt|;
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|!=
name|desired
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|/* Get our filter */
name|Filter
name|f
init|=
name|filter
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
comment|// it's "*"
return|return
literal|true
return|;
block|}
comment|/* is requested a wildcard filter? */
if|if
condition|(
name|requested
operator|.
name|bundle
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|requestedProperties
init|=
name|requested
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestedProperties
operator|==
literal|null
condition|)
block|{
comment|/* 			 * If the requested properties are null, then we have detected a 			 * recursion getting the bundle location. So we return true to 			 * permit the bundle location request in the AdminPermission check 			 * up the stack to succeed. 			 */
return|return
literal|true
return|;
block|}
return|return
name|f
operator|.
name|matches
argument_list|(
name|requestedProperties
argument_list|)
return|;
block|}
comment|/** 	 * Returns the canonical string representation of the 	 * {@code AdminPermission} actions. 	 *  	 *<p> 	 * Always returns present {@code AdminPermission} actions in the following 	 * order: {@code class}, {@code execute}, {@code extensionLifecycle}, 	 * {@code lifecycle}, {@code listener}, {@code metadata}, {@code resolve}, 	 * {@code resource}, {@code startlevel}, {@code context}, {@code weave}. 	 *  	 * @return Canonical string representation of the {@code AdminPermission} 	 *         actions. 	 */
specifier|public
name|String
name|getActions
parameter_list|()
block|{
name|String
name|result
init|=
name|actions
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|mask
init|=
name|action_mask
decl_stmt|;
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_CLASS
operator|)
operator|==
name|ACTION_CLASS
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|CLASS
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_EXECUTE
operator|)
operator|==
name|ACTION_EXECUTE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|EXECUTE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_EXTENSIONLIFECYCLE
operator|)
operator|==
name|ACTION_EXTENSIONLIFECYCLE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|EXTENSIONLIFECYCLE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_LIFECYCLE
operator|)
operator|==
name|ACTION_LIFECYCLE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|LIFECYCLE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_LISTENER
operator|)
operator|==
name|ACTION_LISTENER
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|LISTENER
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_METADATA
operator|)
operator|==
name|ACTION_METADATA
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|METADATA
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_RESOLVE
operator|)
operator|==
name|ACTION_RESOLVE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|RESOLVE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_RESOURCE
operator|)
operator|==
name|ACTION_RESOURCE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|RESOURCE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_STARTLEVEL
operator|)
operator|==
name|ACTION_STARTLEVEL
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|STARTLEVEL
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_CONTEXT
operator|)
operator|==
name|ACTION_CONTEXT
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mask
operator|&
name|ACTION_WEAVE
operator|)
operator|==
name|ACTION_WEAVE
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|WEAVE
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
comment|// remove trailing comma
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|setLength
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|actions
operator|=
name|result
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Returns a new {@code PermissionCollection} object suitable for 	 * storing {@code AdminPermission}s. 	 *  	 * @return A new {@code PermissionCollection} object. 	 */
specifier|public
name|PermissionCollection
name|newPermissionCollection
parameter_list|()
block|{
return|return
operator|new
name|AdminPermissionCollection
argument_list|()
return|;
block|}
comment|/** 	 * Determines the equality of two {@code AdminPermission} objects. 	 *  	 * @param obj The object being compared for equality with this object. 	 * @return {@code true} if {@code obj} is equivalent to this 	 *         {@code AdminPermission}; {@code false} otherwise. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|AdminPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AdminPermission
name|ap
init|=
operator|(
name|AdminPermission
operator|)
name|obj
decl_stmt|;
return|return
operator|(
name|action_mask
operator|==
name|ap
operator|.
name|action_mask
operator|)
operator|&&
operator|(
operator|(
name|bundle
operator|==
name|ap
operator|.
name|bundle
operator|)
operator|||
operator|(
operator|(
name|bundle
operator|!=
literal|null
operator|)
operator|&&
name|bundle
operator|.
name|equals
argument_list|(
name|ap
operator|.
name|bundle
argument_list|)
operator|)
operator|)
operator|&&
operator|(
name|filter
operator|==
literal|null
condition|?
name|ap
operator|.
name|filter
operator|==
literal|null
else|:
name|filter
operator|.
name|equals
argument_list|(
name|ap
operator|.
name|filter
argument_list|)
operator|)
return|;
block|}
comment|/** 	 * Returns the hash code value for this object. 	 *  	 * @return Hash code value for this object. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|31
operator|*
literal|17
operator|+
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|getActions
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|bundle
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
comment|/** 	 * WriteObject is called to save the state of this permission object to a 	 * stream. The actions are serialized, and the superclass takes care of the 	 * name. 	 */
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotSerializableException
argument_list|(
literal|"cannot serialize"
argument_list|)
throw|;
block|}
comment|// Write out the actions. The superclass takes care of the name
comment|// call getActions to make sure actions field is initialized
if|if
condition|(
name|actions
operator|==
literal|null
condition|)
name|getActions
argument_list|()
expr_stmt|;
name|s
operator|.
name|defaultWriteObject
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * readObject is called to restore the state of this permission from a 	 * stream. 	 */
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|s
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// Read in the data, then initialize the transients
name|s
operator|.
name|defaultReadObject
argument_list|()
expr_stmt|;
name|setTransients
argument_list|(
name|parseFilter
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|,
name|parseActions
argument_list|(
name|actions
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Called by {@code implies0} on an AdminPermission which was constructed 	 * with a Bundle. This method loads a map with the filter-matchable 	 * properties of this bundle. The map is cached so this lookup only happens 	 * once. 	 *  	 * This method should only be called on an AdminPermission which was 	 * constructed with a bundle 	 *  	 * @return a map of properties for this bundle 	 */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
name|properties
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
comment|/* 		 * We may have recursed here due to the Bundle.getLocation call in the 		 * doPrivileged below. If this is the case, return null to allow implies 		 * to return true. 		 */
specifier|final
name|Object
name|mark
init|=
name|recurse
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|mark
operator|==
name|bundle
condition|)
block|{
return|return
literal|null
return|;
block|}
name|recurse
operator|.
name|set
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Long
argument_list|(
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|bundle
operator|.
name|getSymbolicName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|SignerProperty
name|signer
init|=
operator|new
name|SignerProperty
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
if|if
condition|(
name|signer
operator|.
name|isBundleSigned
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"signer"
argument_list|,
name|signer
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|properties
operator|=
name|map
return|;
block|}
finally|finally
block|{
name|recurse
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**  * Stores a collection of {@code AdminPermission}s.  */
end_comment

begin_class
specifier|final
class|class
name|AdminPermissionCollection
extends|extends
name|PermissionCollection
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3906372644575328048L
decl_stmt|;
comment|/** 	 * Collection of permissions. 	 *  	 * @GuardedBy this 	 */
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
name|permissions
decl_stmt|;
comment|/** 	 * Boolean saying if "*" is in the collection. 	 *  	 * @serial 	 * @GuardedBy this 	 */
specifier|private
name|boolean
name|all_allowed
decl_stmt|;
comment|/** 	 * Create an empty AdminPermissions object. 	 *  	 */
specifier|public
name|AdminPermissionCollection
parameter_list|()
block|{
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Adds a permission to this permission collection. 	 *  	 * @param permission The {@code AdminPermission} object to add. 	 * @throws IllegalArgumentException If the specified permission is not an 	 *         {@code AdminPermission} instance or was constructed with a 	 *         Bundle object. 	 * @throws SecurityException If this {@code AdminPermissionCollection} 	 *         object has been marked read-only. 	 */
specifier|public
name|void
name|add
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|AdminPermission
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid permission: "
operator|+
name|permission
argument_list|)
throw|;
block|}
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"attempt to add a Permission to a "
operator|+
literal|"readonly PermissionCollection"
argument_list|)
throw|;
block|}
specifier|final
name|AdminPermission
name|ap
init|=
operator|(
name|AdminPermission
operator|)
name|permission
decl_stmt|;
if|if
condition|(
name|ap
operator|.
name|bundle
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot add to collection: "
operator|+
name|ap
argument_list|)
throw|;
block|}
specifier|final
name|String
name|name
init|=
name|ap
operator|.
name|getName
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
name|pc
init|=
name|permissions
decl_stmt|;
name|AdminPermission
name|existing
init|=
name|pc
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|int
name|oldMask
init|=
name|existing
operator|.
name|action_mask
decl_stmt|;
name|int
name|newMask
init|=
name|ap
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
name|oldMask
operator|!=
name|newMask
condition|)
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|AdminPermission
argument_list|(
name|existing
operator|.
name|filter
argument_list|,
name|oldMask
operator||
name|newMask
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|pc
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|all_allowed
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|all_allowed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** 	 * Determines if the specified permissions implies the permissions expressed 	 * in {@code permission}. 	 *  	 * @param permission The Permission object to compare with the 	 *        {@code AdminPermission} objects in this collection. 	 * @return {@code true} if {@code permission} is implied by an 	 *         {@code AdminPermission} in this collection, 	 *         {@code false} otherwise. 	 */
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|AdminPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|AdminPermission
name|requested
init|=
operator|(
name|AdminPermission
operator|)
name|permission
decl_stmt|;
comment|// if requested permission has a filter, then it is an invalid argument
if|if
condition|(
name|requested
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|effective
init|=
name|AdminPermission
operator|.
name|ACTION_NONE
decl_stmt|;
name|Collection
argument_list|<
name|AdminPermission
argument_list|>
name|perms
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
name|pc
init|=
name|permissions
decl_stmt|;
comment|// short circuit if the "*" Permission was added
if|if
condition|(
name|all_allowed
condition|)
block|{
name|AdminPermission
name|ap
init|=
name|pc
operator|.
name|get
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ap
operator|!=
literal|null
condition|)
block|{
name|effective
operator||=
name|ap
operator|.
name|action_mask
expr_stmt|;
specifier|final
name|int
name|desired
init|=
name|requested
operator|.
name|action_mask
decl_stmt|;
if|if
condition|(
operator|(
name|effective
operator|&
name|desired
operator|)
operator|==
name|desired
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
name|perms
operator|=
name|pc
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
comment|// just iterate one by one
for|for
control|(
name|AdminPermission
name|perm
range|:
name|perms
control|)
block|{
if|if
condition|(
name|perm
operator|.
name|implies0
argument_list|(
name|requested
argument_list|,
name|effective
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** 	 * Returns an enumeration of all {@code AdminPermission} objects in the 	 * container. 	 *  	 * @return Enumeration of all {@code AdminPermission} objects. 	 */
specifier|public
specifier|synchronized
name|Enumeration
argument_list|<
name|Permission
argument_list|>
name|elements
parameter_list|()
block|{
name|List
argument_list|<
name|Permission
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|Permission
argument_list|>
argument_list|(
name|permissions
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|enumeration
argument_list|(
name|all
argument_list|)
return|;
block|}
comment|/* serialization logic */
specifier|private
specifier|static
specifier|final
name|ObjectStreamField
index|[]
name|serialPersistentFields
init|=
block|{
operator|new
name|ObjectStreamField
argument_list|(
literal|"permissions"
argument_list|,
name|Hashtable
operator|.
name|class
argument_list|)
block|,
operator|new
name|ObjectStreamField
argument_list|(
literal|"all_allowed"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|synchronized
name|void
name|writeObject
parameter_list|(
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
name|hashtable
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
argument_list|(
name|permissions
argument_list|)
decl_stmt|;
name|ObjectOutputStream
operator|.
name|PutField
name|pfields
init|=
name|out
operator|.
name|putFields
argument_list|()
decl_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"permissions"
argument_list|,
name|hashtable
argument_list|)
expr_stmt|;
name|pfields
operator|.
name|put
argument_list|(
literal|"all_allowed"
argument_list|,
name|all_allowed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeFields
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|ObjectInputStream
operator|.
name|GetField
name|gfields
init|=
name|in
operator|.
name|readFields
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
name|hashtable
init|=
operator|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
operator|)
name|gfields
operator|.
name|get
argument_list|(
literal|"permissions"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|permissions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AdminPermission
argument_list|>
argument_list|(
name|hashtable
argument_list|)
expr_stmt|;
name|all_allowed
operator|=
name|gfields
operator|.
name|get
argument_list|(
literal|"all_allowed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

