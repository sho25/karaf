begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2000, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|framework
package|;
end_package

begin_comment
comment|/**  * A Framework exception used to indicate that a bundle lifecycle problem  * occurred.  *   *<p>  * A {@code BundleException} object is created by the Framework to denote  * an exception condition in the lifecycle of a bundle.  * {@code BundleException}s should not be created by bundle developers.  * A type code is used to identify the exception type for future extendability.  *   *<p>  * OSGi Alliance reserves the right to extend the set of types.  *   *<p>  * This exception conforms to the general purpose exception chaining mechanism.  *   * @version $Id: 9e117ec9667b040f7752e342aa07d6c7d5bf0275 $  */
end_comment

begin_class
specifier|public
class|class
name|BundleException
extends|extends
name|Exception
block|{
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3571095144220455665L
decl_stmt|;
comment|/** 	 * Type of bundle exception. 	 *  	 * @since 1.5 	 */
specifier|private
specifier|final
name|int
name|type
decl_stmt|;
comment|/** 	 * No exception type is specified. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|UNSPECIFIED
init|=
literal|0
decl_stmt|;
comment|/** 	 * The operation was unsupported. This type can be used anywhere a  	 * BundleException can be thrown. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|UNSUPPORTED_OPERATION
init|=
literal|1
decl_stmt|;
comment|/** 	 * The operation was invalid. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|INVALID_OPERATION
init|=
literal|2
decl_stmt|;
comment|/** 	 * The bundle manifest was in error. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|MANIFEST_ERROR
init|=
literal|3
decl_stmt|;
comment|/** 	 * The bundle was not resolved. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|RESOLVE_ERROR
init|=
literal|4
decl_stmt|;
comment|/** 	 * The bundle activator was in error. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|ACTIVATOR_ERROR
init|=
literal|5
decl_stmt|;
comment|/** 	 * The operation failed due to insufficient permissions. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|SECURITY_ERROR
init|=
literal|6
decl_stmt|;
comment|/** 	 * The operation failed to complete the requested lifecycle state change. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|STATECHANGE_ERROR
init|=
literal|7
decl_stmt|;
comment|/** 	 * The bundle could not be resolved due to an error with the 	 * Bundle-NativeCode header. 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|NATIVECODE_ERROR
init|=
literal|8
decl_stmt|;
comment|/** 	 * The install or update operation failed because another already installed 	 * bundle has the same symbolic name and version. This exception type will 	 * only occur if the framework is configured to only allow a single bundle 	 * to be installed for a given symbolic name and version. 	 *  	 * @see Constants#FRAMEWORK_BSNVERSION 	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|DUPLICATE_BUNDLE_ERROR
init|=
literal|9
decl_stmt|;
comment|/** 	 * The start transient operation failed because the start level of the 	 * bundle is greater than the current framework start level 	 *  	 * @since 1.5 	 */
specifier|public
specifier|static
specifier|final
name|int
name|START_TRANSIENT_ERROR
init|=
literal|10
decl_stmt|;
comment|/** 	 * The framework received an error while reading the input stream for a 	 * bundle. 	 *  	 * @since 1.6 	 */
specifier|public
specifier|static
specifier|final
name|int
name|READ_ERROR
init|=
literal|11
decl_stmt|;
comment|/** 	 * A framework hook rejected the operation. 	 *  	 * @since 1.6 	 */
specifier|public
specifier|static
specifier|final
name|int
name|REJECTED_BY_HOOK
init|=
literal|12
decl_stmt|;
comment|/** 	 * Creates a {@code BundleException} with the specified message and 	 * exception cause. 	 *  	 * @param msg The associated message. 	 * @param cause The cause of this exception. 	 */
specifier|public
name|BundleException
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|this
argument_list|(
name|msg
argument_list|,
name|UNSPECIFIED
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a {@code BundleException} with the specified message. 	 *  	 * @param msg The message. 	 */
specifier|public
name|BundleException
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|this
argument_list|(
name|msg
argument_list|,
name|UNSPECIFIED
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a {@code BundleException} with the specified message, type 	 * and exception cause. 	 *  	 * @param msg The associated message. 	 * @param type The type for this exception. 	 * @param cause The cause of this exception. 	 * @since 1.5 	 */
specifier|public
name|BundleException
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|type
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/** 	 * Creates a {@code BundleException} with the specified message and 	 * type. 	 *  	 * @param msg The message. 	 * @param type The type for this exception. 	 * @since 1.5 	 */
specifier|public
name|BundleException
parameter_list|(
name|String
name|msg
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/** 	 * Returns the cause of this exception or {@code null} if no cause was 	 * specified when this exception was created. 	 *  	 *<p> 	 * This method predates the general purpose exception chaining mechanism. 	 * The {@code getCause()} method is now the preferred means of 	 * obtaining this information. 	 *  	 * @return The result of calling {@code getCause()}. 	 */
specifier|public
name|Throwable
name|getNestedException
parameter_list|()
block|{
return|return
name|getCause
argument_list|()
return|;
block|}
comment|/** 	 * Returns the cause of this exception or {@code null} if no cause was 	 * set. 	 *  	 * @return The cause of this exception or {@code null} if no cause was 	 *         set. 	 * @since 1.3 	 */
specifier|public
name|Throwable
name|getCause
parameter_list|()
block|{
return|return
name|super
operator|.
name|getCause
argument_list|()
return|;
block|}
comment|/** 	 * Initializes the cause of this exception to the specified value. 	 *  	 * @param cause The cause of this exception. 	 * @return This exception. 	 * @throws IllegalArgumentException If the specified cause is this 	 *         exception. 	 * @throws IllegalStateException If the cause of this exception has already 	 *         been set. 	 * @since 1.3 	 */
specifier|public
name|Throwable
name|initCause
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
return|return
name|super
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
return|;
block|}
comment|/** 	 * Returns the type for this exception or {@code UNSPECIFIED} if the 	 * type was unspecified or unknown. 	 *  	 * @return The type of this exception. 	 * @since 1.5 	 */
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

