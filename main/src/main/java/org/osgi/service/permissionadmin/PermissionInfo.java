begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2001, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|permissionadmin
package|;
end_package

begin_comment
comment|/**  * Permission representation used by the Permission Admin service.  *   *<p>  * This class encapsulates three pieces of information: a Permission<i>type  *</i> (class name), which must be a subclass of  * {@code java.security.Permission}, and the<i>name</i> and<i>actions</i>  * arguments passed to its constructor.  *   *<p>  * In order for a permission represented by a {@code PermissionInfo} to be  * instantiated and considered during a permission check, its Permission class  * must be available from the system classpath or an exported package. This  * means that the instantiation of a permission represented by a  * {@code PermissionInfo} may be delayed until the package containing its  * Permission class has been exported by a bundle.  *   * @Immutable  * @version $Id: b9516d07ada162fb8fc750f09e1e3a686189c46b $  */
end_comment

begin_class
specifier|public
class|class
name|PermissionInfo
block|{
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|actions
decl_stmt|;
comment|/** 	 * Constructs a {@code PermissionInfo} from the specified type, name, 	 * and actions. 	 *  	 * @param type The fully qualified class name of the permission represented 	 *        by this {@code PermissionInfo}. The class must be a subclass 	 *        of {@code java.security.Permission} and must define a 	 *        2-argument constructor that takes a<i>name</i> string and an 	 *<i>actions</i> string. 	 *  	 * @param name The permission name that will be passed as the first argument 	 *        to the constructor of the {@code Permission} class identified 	 *        by {@code type}. 	 *  	 * @param actions The permission actions that will be passed as the second 	 *        argument to the constructor of the {@code Permission} class 	 *        identified by {@code type}. 	 *  	 * @throws NullPointerException If {@code type} is {@code null}. 	 * @throws IllegalArgumentException If {@code action} is not 	 *         {@code null} and {@code name} is {@code null}. 	 */
specifier|public
name|PermissionInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|actions
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|actions
operator|=
name|actions
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"type is null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|name
operator|==
literal|null
operator|)
operator|&&
operator|(
name|actions
operator|!=
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"name missing"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Constructs a {@code PermissionInfo} object from the specified 	 * encoded {@code PermissionInfo} string. White space in the encoded 	 * {@code PermissionInfo} string is ignored. 	 *  	 *  	 * @param encodedPermission The encoded {@code PermissionInfo}. 	 * @see #getEncoded 	 * @throws IllegalArgumentException If the specified 	 *         {@code encodedPermission} is not properly formatted. 	 */
specifier|public
name|PermissionInfo
parameter_list|(
name|String
name|encodedPermission
parameter_list|)
block|{
if|if
condition|(
name|encodedPermission
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"missing encoded permission"
argument_list|)
throw|;
block|}
if|if
condition|(
name|encodedPermission
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"empty encoded permission"
argument_list|)
throw|;
block|}
name|String
name|parsedType
init|=
literal|null
decl_stmt|;
name|String
name|parsedName
init|=
literal|null
decl_stmt|;
name|String
name|parsedActions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|char
index|[]
name|encoded
init|=
name|encodedPermission
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|encoded
operator|.
name|length
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
comment|/* the first character must be '(' */
if|if
condition|(
name|encoded
index|[
name|pos
index|]
operator|!=
literal|'('
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expecting open parenthesis"
argument_list|)
throw|;
block|}
name|pos
operator|++
expr_stmt|;
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
comment|/* type is not quoted or encoded */
name|int
name|begin
init|=
name|pos
decl_stmt|;
while|while
condition|(
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
operator|&&
operator|(
name|encoded
index|[
name|pos
index|]
operator|!=
literal|')'
operator|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
name|begin
operator|||
name|encoded
index|[
name|begin
index|]
operator|==
literal|'"'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expecting type"
argument_list|)
throw|;
block|}
name|parsedType
operator|=
operator|new
name|String
argument_list|(
name|encoded
argument_list|,
name|begin
argument_list|,
name|pos
operator|-
name|begin
argument_list|)
expr_stmt|;
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
comment|/* type may be followed by name which is quoted and encoded */
if|if
condition|(
name|encoded
index|[
name|pos
index|]
operator|==
literal|'"'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|begin
operator|=
name|pos
expr_stmt|;
while|while
condition|(
name|encoded
index|[
name|pos
index|]
operator|!=
literal|'"'
condition|)
block|{
if|if
condition|(
name|encoded
index|[
name|pos
index|]
operator|==
literal|'\\'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
name|parsedName
operator|=
name|unescapeString
argument_list|(
name|encoded
argument_list|,
name|begin
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
comment|/* 					 * name may be followed by actions which is quoted and 					 * encoded 					 */
if|if
condition|(
name|encoded
index|[
name|pos
index|]
operator|==
literal|'"'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|begin
operator|=
name|pos
expr_stmt|;
while|while
condition|(
name|encoded
index|[
name|pos
index|]
operator|!=
literal|'"'
condition|)
block|{
if|if
condition|(
name|encoded
index|[
name|pos
index|]
operator|==
literal|'\\'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
name|parsedActions
operator|=
name|unescapeString
argument_list|(
name|encoded
argument_list|,
name|begin
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/* the final character must be ')' */
name|char
name|c
init|=
name|encoded
index|[
name|pos
index|]
decl_stmt|;
name|pos
operator|++
expr_stmt|;
while|while
condition|(
operator|(
name|pos
operator|<
name|length
operator|)
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|c
operator|!=
literal|')'
operator|)
operator|||
operator|(
name|pos
operator|!=
name|length
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expecting close parenthesis"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsing terminated abruptly"
argument_list|)
throw|;
block|}
name|type
operator|=
name|parsedType
expr_stmt|;
name|name
operator|=
name|parsedName
expr_stmt|;
name|actions
operator|=
name|parsedActions
expr_stmt|;
block|}
comment|/** 	 * Returns the string encoding of this {@code PermissionInfo} in a form 	 * suitable for restoring this {@code PermissionInfo}. 	 *  	 *<p> 	 * The encoded format is: 	 *  	 *<pre> 	 * (type) 	 *</pre> 	 *  	 * or 	 *  	 *<pre> 	 * (type&quot;name&quot;) 	 *</pre> 	 *  	 * or 	 *  	 *<pre> 	 * (type&quot;name&quot;&quot;actions&quot;) 	 *</pre> 	 *  	 * where<i>name</i> and<i>actions</i> are strings that must be encoded for 	 * proper parsing. Specifically, the {@code&quot;},{@code \}, 	 * carriage return, and line feed characters must be escaped using 	 * {@code \&quot;}, {@code \\},{@code \r}, and 	 * {@code \n}, respectively. 	 *  	 *<p> 	 * The encoded string contains no leading or trailing whitespace characters. 	 * A single space character is used between<i>type</i> and 	 *&quot;<i>name</i>&quot; and between&quot;<i>name</i>&quot; and 	 *&quot;<i>actions</i>&quot;. 	 *  	 * @return The string encoding of this {@code PermissionInfo}. 	 */
specifier|public
specifier|final
name|String
name|getEncoded
parameter_list|()
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|(
literal|8
operator|+
name|type
operator|.
name|length
argument_list|()
operator|+
operator|(
operator|(
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|name
operator|.
name|length
argument_list|()
operator|)
operator|+
operator|(
operator|(
name|actions
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|actions
operator|.
name|length
argument_list|()
operator|)
operator|)
operator|<<
literal|1
operator|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|" \""
argument_list|)
expr_stmt|;
name|escapeString
argument_list|(
name|name
argument_list|,
name|output
argument_list|)
expr_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|"\" \""
argument_list|)
expr_stmt|;
name|escapeString
argument_list|(
name|actions
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Returns the string representation of this {@code PermissionInfo}. 	 * The string is created by calling the {@code getEncoded} method on 	 * this {@code PermissionInfo}. 	 *  	 * @return The string representation of this {@code PermissionInfo}. 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getEncoded
argument_list|()
return|;
block|}
comment|/** 	 * Returns the fully qualified class name of the permission represented by 	 * this {@code PermissionInfo}. 	 *  	 * @return The fully qualified class name of the permission represented by 	 *         this {@code PermissionInfo}. 	 */
specifier|public
specifier|final
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/** 	 * Returns the name of the permission represented by this 	 * {@code PermissionInfo}. 	 *  	 * @return The name of the permission represented by this 	 *         {@code PermissionInfo}, or {@code null} if the 	 *         permission does not have a name. 	 */
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/** 	 * Returns the actions of the permission represented by this 	 * {@code PermissionInfo}. 	 *  	 * @return The actions of the permission represented by this 	 *         {@code PermissionInfo}, or {@code null} if the 	 *         permission does not have any actions associated with it. 	 */
specifier|public
specifier|final
name|String
name|getActions
parameter_list|()
block|{
return|return
name|actions
return|;
block|}
comment|/** 	 * Determines the equality of two {@code PermissionInfo} objects. 	 *  	 * This method checks that specified object has the same type, name and 	 * actions as this {@code PermissionInfo} object. 	 *  	 * @param obj The object to test for equality with this 	 *        {@code PermissionInfo} object. 	 * @return {@code true} if {@code obj} is a 	 *         {@code PermissionInfo}, and has the same type, name and 	 *         actions as this {@code PermissionInfo} object; 	 *         {@code false} otherwise. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|PermissionInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|PermissionInfo
name|other
init|=
operator|(
name|PermissionInfo
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|other
operator|.
name|type
argument_list|)
operator|||
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
operator|^
operator|(
name|other
operator|.
name|name
operator|==
literal|null
operator|)
operator|)
operator|||
operator|(
operator|(
name|actions
operator|==
literal|null
operator|)
operator|^
operator|(
name|other
operator|.
name|actions
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
operator|&&
name|actions
operator|.
name|equals
argument_list|(
name|other
operator|.
name|actions
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** 	 * Returns the hash code value for this object. 	 *  	 * @return A hash code value for this object. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|31
operator|*
literal|17
operator|+
name|type
operator|.
name|hashCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|name
operator|.
name|hashCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|actions
operator|!=
literal|null
condition|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|actions
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|h
return|;
block|}
comment|/** 	 * This escapes the quotes, backslashes, \n, and \r in the string using a 	 * backslash and appends the newly escaped string to a StringBuffer. 	 */
specifier|private
specifier|static
name|void
name|escapeString
parameter_list|(
name|String
name|str
parameter_list|,
name|StringBuffer
name|output
parameter_list|)
block|{
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
name|output
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|output
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|output
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
break|break;
default|default :
name|output
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/** 	 * Takes an encoded character array and decodes it into a new String. 	 */
specifier|private
specifier|static
name|String
name|unescapeString
parameter_list|(
name|char
index|[]
name|str
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|(
name|end
operator|-
name|begin
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|begin
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|str
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|end
condition|)
block|{
name|c
operator|=
name|str
index|[
name|i
index|]
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
break|break;
case|case
literal|'r'
case|:
name|c
operator|=
literal|'\r'
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|c
operator|=
literal|'\n'
expr_stmt|;
break|break;
default|default :
name|c
operator|=
literal|'\\'
expr_stmt|;
name|i
operator|--
expr_stmt|;
break|break;
block|}
block|}
block|}
name|output
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

