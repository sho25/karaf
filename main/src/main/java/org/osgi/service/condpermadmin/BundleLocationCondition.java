begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2005, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|condpermadmin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_comment
comment|/**  * Condition to test if the location of a bundle matches or does not match a  * pattern. Since the bundle's location cannot be changed, this condition is  * immutable.  *   *<p>  * Pattern matching is done according to the filter string matching rules.  *   * @ThreadSafe  * @version $Id: 7b466c7103a708833c6ff1fa2a4c5cf21f757179 $  */
end_comment

begin_class
specifier|public
class|class
name|BundleLocationCondition
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CONDITION_TYPE
init|=
literal|"org.osgi.service.condpermadmin.BundleLocationCondition"
decl_stmt|;
comment|/** 	 * Constructs a condition that tries to match the passed Bundle's location 	 * to the location pattern. 	 *  	 * @param bundle The Bundle being evaluated. 	 * @param info The ConditionInfo from which to construct the condition. The 	 *        ConditionInfo must specify one or two arguments. The first 	 *        argument of the ConditionInfo specifies the location pattern 	 *        against which to match the bundle location. Matching is done 	 *        according to the filter string matching rules. Any '*' characters 	 *        in the first argument are used as wildcards when matching bundle 	 *        locations unless they are escaped with a '\' character. The 	 *        Condition is satisfied if the bundle location matches the pattern. 	 *        The second argument of the ConditionInfo is optional. If a second 	 *        argument is present and equal to "!", then the satisfaction of the 	 *        Condition is negated. That is, the Condition is satisfied if the 	 *        bundle location does NOT match the pattern. If the second argument 	 *        is present but does not equal "!", then the second argument is 	 *        ignored. 	 * @return Condition object for the requested condition. 	 */
specifier|static
specifier|public
name|Condition
name|getCondition
parameter_list|(
specifier|final
name|Bundle
name|bundle
parameter_list|,
specifier|final
name|ConditionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CONDITION_TYPE
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ConditionInfo must be of type \""
operator|+
name|CONDITION_TYPE
operator|+
literal|"\""
argument_list|)
throw|;
name|String
index|[]
name|args
init|=
name|info
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
operator|&&
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal number of args: "
operator|+
name|args
operator|.
name|length
argument_list|)
throw|;
name|String
name|bundleLocation
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|run
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getLocation
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Filter
name|filter
init|=
literal|null
decl_stmt|;
try|try
block|{
name|filter
operator|=
name|FrameworkUtil
operator|.
name|createFilter
argument_list|(
literal|"(location="
operator|+
name|escapeLocation
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
comment|// this should never happen, but just in case
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid filter: "
operator|+
name|e
operator|.
name|getFilter
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|matchProps
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|matchProps
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|bundleLocation
argument_list|)
expr_stmt|;
name|boolean
name|negate
init|=
operator|(
name|args
operator|.
name|length
operator|==
literal|2
operator|)
condition|?
literal|"!"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
else|:
literal|false
decl_stmt|;
return|return
operator|(
name|negate
operator|^
name|filter
operator|.
name|match
argument_list|(
name|matchProps
argument_list|)
operator|)
condition|?
name|Condition
operator|.
name|TRUE
else|:
name|Condition
operator|.
name|FALSE
return|;
block|}
specifier|private
name|BundleLocationCondition
parameter_list|()
block|{
comment|// private constructor to prevent objects of this type
block|}
comment|/** 	 * Escape the value string such that '(', ')' and '\' are escaped. The '\' 	 * char is only escaped if it is not followed by a '*'. 	 *  	 * @param value unescaped value string. 	 * @return escaped value string. 	 */
specifier|private
specifier|static
name|String
name|escapeLocation
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
name|boolean
name|escaped
init|=
literal|false
decl_stmt|;
name|int
name|inlen
init|=
name|value
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|outlen
init|=
name|inlen
operator|<<
literal|1
decl_stmt|;
comment|/* inlen * 2 */
name|char
index|[]
name|output
init|=
operator|new
name|char
index|[
name|outlen
index|]
decl_stmt|;
name|value
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|inlen
argument_list|,
name|output
argument_list|,
name|inlen
argument_list|)
expr_stmt|;
name|int
name|cursor
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|inlen
init|;
name|i
operator|<
name|outlen
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|output
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\\'
case|:
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|outlen
operator|&&
name|output
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'*'
condition|)
break|break;
case|case
literal|'('
case|:
case|case
literal|')'
case|:
name|output
index|[
name|cursor
index|]
operator|=
literal|'\\'
expr_stmt|;
name|cursor
operator|++
expr_stmt|;
name|escaped
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|output
index|[
name|cursor
index|]
operator|=
name|c
expr_stmt|;
name|cursor
operator|++
expr_stmt|;
block|}
return|return
name|escaped
condition|?
operator|new
name|String
argument_list|(
name|output
argument_list|,
literal|0
argument_list|,
name|cursor
argument_list|)
else|:
name|value
return|;
block|}
block|}
end_class

end_unit

