begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2004, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|condpermadmin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Condition representation used by the Conditional Permission Admin service.  *   *<p>  * This class encapsulates two pieces of information: a Condition<i>type</i>  * (class name), which must implement {@code Condition}, and the  * arguments passed to its constructor.  *   *<p>  * In order for a Condition represented by a {@code ConditionInfo} to be  * instantiated and considered during a permission check, its Condition class  * must be available from the system classpath.  *   *<p>  * The Condition class must either:  *<ul>  *<li>Declare a public static {@code getCondition} method that takes a  * {@code Bundle} object and a {@code ConditionInfo} object as  * arguments. That method must return an object that implements the  * {@code Condition} interface.</li>  *<li>Implement the {@code Condition} interface and define a public  * constructor that takes a {@code Bundle} object and a  * {@code ConditionInfo} object as arguments.  *</ul>  *   * @Immutable  * @version $Id: dd1d84aa3175b2a2dfec879d04c93887f05161be $  */
end_comment

begin_class
specifier|public
class|class
name|ConditionInfo
block|{
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
index|[]
name|args
decl_stmt|;
comment|/** 	 * Constructs a {@code ConditionInfo} from the specified type and args. 	 *  	 * @param type The fully qualified class name of the Condition represented 	 *        by this {@code ConditionInfo}. 	 * @param args The arguments for the Condition. These arguments are 	 *        available to the newly created Condition by calling the 	 *        {@link #getArgs()} method. 	 * @throws NullPointerException If {@code type} is {@code null}. 	 */
specifier|public
name|ConditionInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|args
operator|=
operator|(
name|args
operator|!=
literal|null
operator|)
condition|?
name|args
operator|.
name|clone
argument_list|()
else|:
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"type is null"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Constructs a {@code ConditionInfo} object from the specified encoded 	 * {@code ConditionInfo} string. White space in the encoded 	 * {@code ConditionInfo} string is ignored. 	 *  	 * @param encodedCondition The encoded {@code ConditionInfo}. 	 * @see #getEncoded 	 * @throws IllegalArgumentException If the specified 	 *         {@code encodedCondition} is not properly formatted. 	 */
specifier|public
name|ConditionInfo
parameter_list|(
name|String
name|encodedCondition
parameter_list|)
block|{
if|if
condition|(
name|encodedCondition
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"missing encoded condition"
argument_list|)
throw|;
block|}
if|if
condition|(
name|encodedCondition
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"empty encoded condition"
argument_list|)
throw|;
block|}
try|try
block|{
name|char
index|[]
name|encoded
init|=
name|encodedCondition
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|encoded
operator|.
name|length
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
comment|/* the first character must be '[' */
if|if
condition|(
name|encoded
index|[
name|pos
index|]
operator|!=
literal|'['
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expecting open bracket"
argument_list|)
throw|;
block|}
name|pos
operator|++
expr_stmt|;
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
comment|/* type is not quoted or encoded */
name|int
name|begin
init|=
name|pos
decl_stmt|;
while|while
condition|(
operator|!
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
operator|&&
operator|(
name|encoded
index|[
name|pos
index|]
operator|!=
literal|']'
operator|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
name|begin
operator|||
name|encoded
index|[
name|begin
index|]
operator|==
literal|'"'
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expecting type"
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
operator|new
name|String
argument_list|(
name|encoded
argument_list|,
name|begin
argument_list|,
name|pos
operator|-
name|begin
argument_list|)
expr_stmt|;
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
comment|/* type may be followed by args which are quoted and encoded */
name|List
argument_list|<
name|String
argument_list|>
name|argsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|encoded
index|[
name|pos
index|]
operator|==
literal|'"'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
name|begin
operator|=
name|pos
expr_stmt|;
while|while
condition|(
name|encoded
index|[
name|pos
index|]
operator|!=
literal|'"'
condition|)
block|{
if|if
condition|(
name|encoded
index|[
name|pos
index|]
operator|==
literal|'\\'
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
name|pos
operator|++
expr_stmt|;
block|}
name|argsList
operator|.
name|add
argument_list|(
name|unescapeString
argument_list|(
name|encoded
argument_list|,
name|begin
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|++
expr_stmt|;
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
comment|/* skip whitespace */
while|while
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|args
operator|=
name|argsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|argsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|/* the final character must be ']' */
name|char
name|c
init|=
name|encoded
index|[
name|pos
index|]
decl_stmt|;
name|pos
operator|++
expr_stmt|;
while|while
condition|(
operator|(
name|pos
operator|<
name|length
operator|)
operator|&&
name|Character
operator|.
name|isWhitespace
argument_list|(
name|encoded
index|[
name|pos
index|]
argument_list|)
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|c
operator|!=
literal|']'
operator|)
operator|||
operator|(
name|pos
operator|!=
name|length
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"expecting close bracket"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"parsing terminated abruptly"
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Returns the string encoding of this {@code ConditionInfo} in a form 	 * suitable for restoring this {@code ConditionInfo}. 	 *  	 *<p> 	 * The encoded format is: 	 *  	 *<pre> 	 *   [type&quot;arg0&quot;&quot;arg1&quot; ...] 	 *</pre> 	 *  	 * where<i>argN</i> are strings that must be encoded for proper parsing. 	 * Specifically, the {@code&quot;}, {@code \}, carriage return, 	 * and line feed characters must be escaped using {@code \&quot;}, 	 * {@code \\}, {@code \r}, and {@code \n}, respectively. 	 *  	 *<p> 	 * The encoded string contains no leading or trailing whitespace characters. 	 * A single space character is used between type and&quot;<i>arg0</i>&quot; 	 * and between the arguments. 	 *  	 * @return The string encoding of this {@code ConditionInfo}. 	 */
specifier|public
specifier|final
name|String
name|getEncoded
parameter_list|()
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|output
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|output
operator|.
name|append
argument_list|(
literal|" \""
argument_list|)
expr_stmt|;
name|escapeString
argument_list|(
name|args
index|[
name|i
index|]
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Returns the string representation of this {@code ConditionInfo}. 	 * The string is created by calling the {@code getEncoded} method on 	 * this {@code ConditionInfo}. 	 *  	 * @return The string representation of this {@code ConditionInfo}. 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getEncoded
argument_list|()
return|;
block|}
comment|/** 	 * Returns the fully qualified class name of the condition represented by 	 * this {@code ConditionInfo}. 	 *  	 * @return The fully qualified class name of the condition represented by 	 *         this {@code ConditionInfo}. 	 */
specifier|public
specifier|final
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/** 	 * Returns arguments of this {@code ConditionInfo}. 	 *  	 * @return The arguments of this {@code ConditionInfo}. An empty 	 *         array is returned if the {@code ConditionInfo} has no 	 *         arguments. 	 */
specifier|public
specifier|final
name|String
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
operator|.
name|clone
argument_list|()
return|;
block|}
comment|/** 	 * Determines the equality of two {@code ConditionInfo} objects. 	 *  	 * This method checks that specified object has the same type and args as 	 * this {@code ConditionInfo} object. 	 *  	 * @param obj The object to test for equality with this 	 *        {@code ConditionInfo} object. 	 * @return {@code true} if {@code obj} is a 	 *         {@code ConditionInfo}, and has the same type and args as 	 *         this {@code ConditionInfo} object; {@code false} 	 *         otherwise. 	 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ConditionInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ConditionInfo
name|other
init|=
operator|(
name|ConditionInfo
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|other
operator|.
name|type
argument_list|)
operator|||
name|args
operator|.
name|length
operator|!=
name|other
operator|.
name|args
operator|.
name|length
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|other
operator|.
name|args
index|[
name|i
index|]
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Returns the hash code value for this object. 	 *  	 * @return A hash code value for this object. 	 */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
literal|31
operator|*
literal|17
operator|+
name|type
operator|.
name|hashCode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|=
literal|31
operator|*
name|h
operator|+
name|args
index|[
name|i
index|]
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
comment|/** 	 * This escapes the quotes, backslashes, \n, and \r in the string using a 	 * backslash and appends the newly escaped string to a StringBuffer. 	 */
specifier|private
specifier|static
name|void
name|escapeString
parameter_list|(
name|String
name|str
parameter_list|,
name|StringBuffer
name|output
parameter_list|)
block|{
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
name|output
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|output
operator|.
name|append
argument_list|(
literal|"\\r"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|output
operator|.
name|append
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
break|break;
default|default :
name|output
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/** 	 * Takes an encoded character array and decodes it into a new String. 	 */
specifier|private
specifier|static
name|String
name|unescapeString
parameter_list|(
name|char
index|[]
name|str
parameter_list|,
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|(
name|end
operator|-
name|begin
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|begin
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|str
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|end
condition|)
block|{
name|c
operator|=
name|str
index|[
name|i
index|]
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'"'
case|:
case|case
literal|'\\'
case|:
break|break;
case|case
literal|'r'
case|:
name|c
operator|=
literal|'\r'
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|c
operator|=
literal|'\n'
expr_stmt|;
break|break;
default|default :
name|c
operator|=
literal|'\\'
expr_stmt|;
name|i
operator|--
expr_stmt|;
break|break;
block|}
block|}
block|}
name|output
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

