begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) OSGi Alliance (2004, 2010). All Rights Reserved.  *   * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|condpermadmin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_comment
comment|/**  * The interface implemented by a Condition. Conditions are bound to Permissions  * using Conditional Permission Info. The Permissions of a ConditionalPermission  * Info can only be used if the associated Conditions are satisfied.  *   * @ThreadSafe  * @version $Id: 7e80cf578718db713c347568e7d3232010beac0a $  */
end_comment

begin_interface
specifier|public
interface|interface
name|Condition
block|{
comment|/** 	 * A Condition object that will always evaluate to true and that is never 	 * postponed. 	 */
specifier|public
specifier|final
specifier|static
name|Condition
name|TRUE
init|=
operator|new
name|BooleanCondition
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/** 	 * A Condition object that will always evaluate to false and that is never 	 * postponed. 	 */
specifier|public
specifier|final
specifier|static
name|Condition
name|FALSE
init|=
operator|new
name|BooleanCondition
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/** 	 * Returns whether the evaluation must be postponed until the end of the 	 * permission check. If this method returns {@code false} (or this 	 * Condition is immutable), then this Condition must be able to directly 	 * answer the {@link #isSatisfied()} method. In other words, isSatisfied() 	 * will return very quickly since no external sources, such as for example 	 * users or networks, need to be consulted.<br/> 	 * This method must always return the same value whenever it is called so 	 * that the Conditional Permission Admin can cache its result. 	 *  	 * @return {@code true} to indicate the evaluation must be postponed. 	 *         Otherwise, {@code false} if the evaluation can be performed 	 *         immediately. 	 */
name|boolean
name|isPostponed
parameter_list|()
function_decl|;
comment|/** 	 * Returns whether the Condition is satisfied. This method is only called 	 * for immediate Condition objects or immutable postponed conditions, and 	 * must always be called inside a permission check. Mutable postponed 	 * Condition objects will be called with the grouped version 	 * {@link #isSatisfied(Condition[],Dictionary)} at the end of the permission 	 * check. 	 *  	 * @return {@code true} to indicate the Conditions is satisfied. 	 *         Otherwise, {@code false} if the Condition is not satisfied. 	 */
name|boolean
name|isSatisfied
parameter_list|()
function_decl|;
comment|/** 	 * Returns whether the Condition is mutable. A Condition can go from mutable 	 * ({@code true}) to immutable ({@code false}) over time but never 	 * from immutable ({@code false}) to mutable ({@code true}). 	 *  	 * @return {@code true} {@link #isSatisfied()} can change. Otherwise, 	 *         {@code false} if the value returned by 	 *         {@link #isSatisfied()} will not change for this condition. 	 */
name|boolean
name|isMutable
parameter_list|()
function_decl|;
comment|/** 	 * Returns whether the specified set of Condition objects are satisfied. 	 * Although this method is not static, it must be implemented as if it 	 * were static. All of the passed Condition objects will be of the same 	 * type and will correspond to the class type of the object on which this 	 * method is invoked. This method must be called inside a permission check 	 * only. 	 *  	 * @param conditions The array of Condition objects, which must all be of 	 *        the same class and mutable. The receiver must be one of those 	 *        Condition objects. 	 * @param context A Dictionary object that implementors can use to track 	 *        state. If this method is invoked multiple times in the same 	 *        permission check, the same Dictionary will be passed multiple 	 *        times. The SecurityManager treats this Dictionary as an opaque 	 *        object and simply creates an empty dictionary and passes it to 	 *        subsequent invocations if multiple invocations are needed. 	 * @return {@code true} if all the Condition objects are satisfied. 	 *         Otherwise, {@code false} if one of the Condition objects is 	 *         not satisfied. 	 */
name|boolean
name|isSatisfied
parameter_list|(
name|Condition
name|conditions
index|[]
parameter_list|,
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
function_decl|;
block|}
end_interface

begin_comment
comment|/**  * Package private class used to define the {@link Condition#FALSE} and  * {@link Condition#TRUE} constants.  *   * @Immutable  */
end_comment

begin_class
specifier|final
class|class
name|BooleanCondition
implements|implements
name|Condition
block|{
specifier|private
specifier|final
name|boolean
name|satisfied
decl_stmt|;
name|BooleanCondition
parameter_list|(
name|boolean
name|satisfied
parameter_list|)
block|{
name|this
operator|.
name|satisfied
operator|=
name|satisfied
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPostponed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
name|satisfied
return|;
block|}
specifier|public
name|boolean
name|isMutable
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|(
name|Condition
index|[]
name|conds
parameter_list|,
name|Dictionary
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|context
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|length
init|=
name|conds
operator|.
name|length
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|conds
index|[
name|i
index|]
operator|.
name|isSatisfied
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

