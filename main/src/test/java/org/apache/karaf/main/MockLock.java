begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_class
specifier|public
class|class
name|MockLock
implements|implements
name|Lock
block|{
specifier|private
name|boolean
name|lock
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|isAlive
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MockLock
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Object
name|lockLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
name|MockLock
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{     }
specifier|public
name|boolean
name|lock
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|lockLock
init|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"lock = "
operator|+
name|lock
argument_list|)
expr_stmt|;
name|lockLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"release"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAlive
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"isAlive = "
operator|+
name|isAlive
argument_list|)
expr_stmt|;
return|return
name|isAlive
return|;
block|}
specifier|public
name|void
name|setLock
parameter_list|(
name|boolean
name|lock
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|=
name|lock
expr_stmt|;
block|}
specifier|public
name|void
name|setIsAlive
parameter_list|(
name|boolean
name|isAlive
parameter_list|)
block|{
name|this
operator|.
name|isAlive
operator|=
name|isAlive
expr_stmt|;
block|}
specifier|public
name|void
name|waitForLock
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|lockLock
init|)
block|{
name|lockLock
operator|.
name|wait
argument_list|(
literal|1000
operator|*
literal|60
operator|*
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

