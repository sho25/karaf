begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|BootstrapLogManagerTest
block|{
specifier|private
name|Properties
name|getConfigProperties
parameter_list|()
block|{
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|configProps
operator|.
name|put
argument_list|(
literal|"karaf.log"
argument_list|,
literal|"target/log"
argument_list|)
expr_stmt|;
return|return
name|configProps
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLogManagerNoProperties
parameter_list|()
block|{
name|BootstrapLogManager
operator|.
name|setProperties
argument_list|(
name|getConfigProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Properties must be set before calling getDefaultHandler"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLogManager
parameter_list|()
block|{
operator|new
name|File
argument_list|(
literal|"target/log/karaf.log"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|BootstrapLogManager
operator|.
name|setProperties
argument_list|(
name|getConfigProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Handler
name|handler
init|=
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
literal|"target/log/karaf.log"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLogManagerFromPaxLoggingConfig
parameter_list|()
block|{
operator|new
name|File
argument_list|(
literal|"target/test.log"
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Properties
name|configProps
init|=
name|getConfigProperties
argument_list|()
decl_stmt|;
name|BootstrapLogManager
operator|.
name|setProperties
argument_list|(
name|configProps
argument_list|,
literal|"src/test/resources/org.ops4j.pax.logging.cfg"
argument_list|)
expr_stmt|;
name|Handler
name|handler
init|=
name|BootstrapLogManager
operator|.
name|getDefaultHandler
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|assertExists
argument_list|(
literal|"target/test.log"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertExists
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"File should exist at "
operator|+
name|path
argument_list|,
operator|new
name|File
argument_list|(
name|path
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

