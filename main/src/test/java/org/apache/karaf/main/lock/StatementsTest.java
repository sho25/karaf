begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|lock
operator|.
name|Statements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|StatementsTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_CREATE_TABLE_STMT
init|=
literal|"CREATE TABLE KARAF_LOCK (MOMENT BIGINT, NODE VARCHAR(20))"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_POPULATE_TABLE_STMT
init|=
literal|"INSERT INTO KARAF_LOCK (MOMENT, NODE) VALUES (1, 'karaf')"
decl_stmt|;
specifier|private
name|Statements
name|statements
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|statements
operator|=
operator|new
name|Statements
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDefaultLockCreateSchemaStatements
parameter_list|()
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|DEFAULT_CREATE_TABLE_STMT
block|,
name|DEFAULT_POPULATE_TABLE_STMT
block|}
argument_list|,
name|statements
operator|.
name|getLockCreateSchemaStatements
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getCustomLockCreateSchemaStatements
parameter_list|()
block|{
name|customizeStatements
argument_list|()
expr_stmt|;
name|String
index|[]
name|expectedCreateSchemaStmts
init|=
operator|new
name|String
index|[]
block|{
literal|"CREATE TABLE test.LOCK_TABLE (MOMENT NUMBER(20), NODE VARCHAR2(30))"
block|,
literal|"INSERT INTO test.LOCK_TABLE (MOMENT, NODE) VALUES (2, 'node_1')"
block|}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedCreateSchemaStmts
argument_list|,
name|statements
operator|.
name|getLockCreateSchemaStatements
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDefaultLockCreateStatement
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"SELECT * FROM KARAF_LOCK FOR UPDATE"
argument_list|,
name|statements
operator|.
name|getLockCreateStatement
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getCustomLockCreateStatement
parameter_list|()
block|{
name|customizeStatements
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"SELECT * FROM test.LOCK_TABLE FOR UPDATE"
argument_list|,
name|statements
operator|.
name|getLockCreateStatement
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDefaultLockUpdateStatement
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"UPDATE KARAF_LOCK SET MOMENT = 1"
argument_list|,
name|statements
operator|.
name|getLockUpdateStatement
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getCustomLockUpdateStatement
parameter_list|()
block|{
name|customizeStatements
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"UPDATE test.LOCK_TABLE SET MOMENT = 2"
argument_list|,
name|statements
operator|.
name|getLockUpdateStatement
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|customizeStatements
parameter_list|()
block|{
name|statements
operator|.
name|setTablePrefix
argument_list|(
literal|"test."
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setTableName
argument_list|(
literal|"LOCK_TABLE"
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setNodeName
argument_list|(
literal|"node_1"
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setMomentColumnDataType
argument_list|(
literal|"NUMBER(20)"
argument_list|)
expr_stmt|;
name|statements
operator|.
name|setNodeColumnDataType
argument_list|(
literal|"VARCHAR2(30)"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

