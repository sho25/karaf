begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|main
operator|.
name|util
operator|.
name|StringMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Test cased for {@link org.apache.karaf.main.util.StringMap}  */
end_comment

begin_class
specifier|public
class|class
name|StringMapTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCaseInsensitiveStringMap
parameter_list|()
throws|throws
name|Exception
block|{
name|StringMap
name|sm
init|=
operator|new
name|StringMap
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|new
name|String
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|sm
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|sm
operator|.
name|get
argument_list|(
literal|"Key"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|equals
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

