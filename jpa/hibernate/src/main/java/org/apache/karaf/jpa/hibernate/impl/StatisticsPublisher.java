begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpa
operator|.
name|hibernate
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jpa
operator|.
name|hibernate
operator|.
name|StatisticsMXBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|stat
operator|.
name|Statistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTrackerCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Track EntityManagerFactory services for the persistence units.   * Manage on StatisticsMXBean for each persistence unit named like:  * org.hibernate.statistics:unitName=&lt;name of persistence unit&gt;  */
end_comment

begin_class
specifier|public
class|class
name|StatisticsPublisher
implements|implements
name|ServiceTrackerCustomizer
argument_list|<
name|EntityManagerFactory
argument_list|,
name|EntityManagerFactory
argument_list|>
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StatisticsPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|MBeanServer
name|mbeanServer
decl_stmt|;
specifier|private
name|ServiceTracker
argument_list|<
name|EntityManagerFactory
argument_list|,
name|EntityManagerFactory
argument_list|>
name|emfTracker
decl_stmt|;
specifier|public
name|StatisticsPublisher
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|MBeanServer
name|mbeanServer
parameter_list|)
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|mbeanServer
operator|=
name|mbeanServer
expr_stmt|;
name|this
operator|.
name|emfTracker
operator|=
operator|new
name|ServiceTracker
argument_list|<>
argument_list|(
name|context
argument_list|,
name|EntityManagerFactory
operator|.
name|class
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
name|this
operator|.
name|emfTracker
operator|.
name|open
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|ServiceReference
argument_list|<
name|EntityManagerFactory
argument_list|>
index|[]
name|emfRefs
init|=
name|this
operator|.
name|emfTracker
operator|.
name|getServiceReferences
argument_list|()
decl_stmt|;
for|for
control|(
name|ServiceReference
argument_list|<
name|EntityManagerFactory
argument_list|>
name|emfRef
range|:
name|emfRefs
control|)
block|{
try|try
block|{
name|this
operator|.
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|getOName
argument_list|(
name|emfRef
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
name|this
operator|.
name|emfTracker
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ObjectName
name|getOName
parameter_list|(
name|ServiceReference
argument_list|<
name|EntityManagerFactory
argument_list|>
name|reference
parameter_list|)
block|{
try|try
block|{
name|String
name|unitName
init|=
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
literal|"osgi.unit.name"
argument_list|)
decl_stmt|;
return|return
operator|new
name|ObjectName
argument_list|(
literal|"org.hibernate.statistics"
argument_list|,
literal|"unitName"
argument_list|,
name|unitName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|publishStatistics
parameter_list|(
name|ServiceReference
argument_list|<
name|EntityManagerFactory
argument_list|>
name|reference
parameter_list|,
name|EntityManagerFactory
name|emf
parameter_list|)
block|{
name|String
name|persitenceProvider
init|=
operator|(
name|String
operator|)
name|reference
operator|.
name|getProperty
argument_list|(
literal|"osgi.unit.provider"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"org.hibernate.ejb.HibernatePersistence"
operator|.
name|equals
argument_list|(
name|persitenceProvider
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|reference
operator|.
name|getProperty
argument_list|(
literal|"org.apache.aries.jpa.proxy.factory"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|EntityManager
name|em
init|=
name|emf
operator|.
name|createEntityManager
argument_list|()
decl_stmt|;
name|SessionFactory
name|sessionFactory
init|=
name|em
operator|.
name|unwrap
argument_list|(
name|Session
operator|.
name|class
argument_list|)
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
specifier|final
name|Statistics
name|statistics
init|=
name|sessionFactory
operator|.
name|getStatistics
argument_list|()
decl_stmt|;
name|statistics
operator|.
name|setStatisticsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|getStatisticsMBean
argument_list|(
name|statistics
argument_list|)
argument_list|,
name|getOName
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error publishing StatisticsMXBean"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EntityManagerFactory
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|EntityManagerFactory
argument_list|>
name|reference
parameter_list|)
block|{
name|EntityManagerFactory
name|emf
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|publishStatistics
argument_list|(
name|reference
argument_list|,
name|emf
argument_list|)
expr_stmt|;
return|return
name|emf
return|;
block|}
specifier|private
name|Object
name|getStatisticsMBean
parameter_list|(
specifier|final
name|Statistics
name|statistics
parameter_list|)
block|{
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|StatisticsMXBean
operator|.
name|class
block|}
operator|,
parameter_list|(
name|proxy
parameter_list|,
name|method
parameter_list|,
name|args
parameter_list|)
lambda|->
name|method
operator|.
name|invoke
argument_list|(
name|statistics
argument_list|,
name|args
argument_list|)
block|)
function|;
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|void
name|modifiedService
parameter_list|(
name|ServiceReference
argument_list|<
name|EntityManagerFactory
argument_list|>
name|reference
parameter_list|,
name|EntityManagerFactory
name|service
parameter_list|)
block|{     }
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|EntityManagerFactory
argument_list|>
name|reference
parameter_list|,
name|EntityManagerFactory
name|service
parameter_list|)
block|{
try|try
block|{
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|getOName
argument_list|(
name|reference
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
end_function

unit|}
end_unit

