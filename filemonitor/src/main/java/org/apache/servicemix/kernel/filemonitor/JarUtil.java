begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|filemonitor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_class
specifier|public
class|class
name|JarUtil
block|{
comment|/**      * Zip up a directory      *      * @param directory      * @param zipName      * @throws IOException      */
specifier|public
specifier|static
name|void
name|zipDir
parameter_list|(
name|String
name|directory
parameter_list|,
name|String
name|zipName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a ZipOutputStream to zip the data to
name|ZipOutputStream
name|zos
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|zipName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
name|zipDir
argument_list|(
name|directory
argument_list|,
name|zos
argument_list|,
name|path
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the stream
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Jar up a directory      *      * @param directory      * @param zipName      * @throws IOException      */
specifier|public
specifier|static
name|void
name|jarDir
parameter_list|(
name|String
name|directory
parameter_list|,
name|String
name|zipName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create a ZipOutputStream to zip the data to
name|JarOutputStream
name|zos
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|zipName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
name|File
name|manFile
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|JarFile
operator|.
name|MANIFEST_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|manFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|manFile
argument_list|)
decl_stmt|;
try|try
block|{
name|ZipEntry
name|anEntry
init|=
operator|new
name|ZipEntry
argument_list|(
name|JarFile
operator|.
name|MANIFEST_NAME
argument_list|)
decl_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|anEntry
argument_list|)
expr_stmt|;
name|int
name|bytesIn
init|=
name|fis
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|bytesIn
operator|!=
operator|-
literal|1
condition|)
block|{
name|zos
operator|.
name|write
argument_list|(
name|readBuffer
argument_list|,
literal|0
argument_list|,
name|bytesIn
argument_list|)
expr_stmt|;
name|bytesIn
operator|=
name|fis
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|zipDir
argument_list|(
name|directory
argument_list|,
name|zos
argument_list|,
name|path
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|JarFile
operator|.
name|MANIFEST_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// close the stream
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Zip up a directory path      * @param directory      * @param zos      * @param path      * @throws IOException      */
specifier|public
specifier|static
name|void
name|zipDir
parameter_list|(
name|String
name|directory
parameter_list|,
name|ZipOutputStream
name|zos
parameter_list|,
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|exclusions
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|zipDir
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|)
decl_stmt|;
comment|// get a listing of the directory content
name|String
index|[]
name|dirList
init|=
name|zipDir
operator|.
name|list
argument_list|()
decl_stmt|;
name|byte
index|[]
name|readBuffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|bytesIn
init|=
literal|0
decl_stmt|;
comment|// loop through dirList, and zip the files
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|zipDir
argument_list|,
name|dirList
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|String
name|filePath
init|=
name|f
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|zipDir
argument_list|(
name|filePath
argument_list|,
name|zos
argument_list|,
name|path
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|,
name|exclusions
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|entry
init|=
name|path
operator|+
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exclusions
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|ZipEntry
name|anEntry
init|=
operator|new
name|ZipEntry
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|anEntry
argument_list|)
expr_stmt|;
name|bytesIn
operator|=
name|fis
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
while|while
condition|(
name|bytesIn
operator|!=
operator|-
literal|1
condition|)
block|{
name|zos
operator|.
name|write
argument_list|(
name|readBuffer
argument_list|,
literal|0
argument_list|,
name|bytesIn
argument_list|)
expr_stmt|;
name|bytesIn
operator|=
name|fis
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

