begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|//========================================================================
end_comment

begin_comment
comment|//$Id: Scanner.java 2180 2007-10-31 04:01:26Z janb $
end_comment

begin_comment
comment|//Copyright 2006 Mort Bay Consulting Pty. Ltd.
end_comment

begin_comment
comment|//------------------------------------------------------------------------
end_comment

begin_comment
comment|//Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|//you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|//You may obtain a copy of the License at
end_comment

begin_comment
comment|//http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|//distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|//See the License for the specific language governing permissions and
end_comment

begin_comment
comment|//limitations under the License.
end_comment

begin_comment
comment|//========================================================================
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|runtime
operator|.
name|filemonitor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Scanner  *<p/>  * Utility for scanning a directory for added, removed and changed  * files and reporting these events via registered Listeners.  *<p/>  * From the<a href="http://jetty.codehaus.org/">Jetty Util project</a>  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|Scanner
block|{
specifier|private
name|long
name|_scanInterval
decl_stmt|;
specifier|private
name|List
name|_listeners
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
name|_prevScan
init|=
name|Collections
operator|.
name|EMPTY_MAP
decl_stmt|;
specifier|private
name|FilenameFilter
name|_filter
decl_stmt|;
specifier|private
name|List
name|_scanDirs
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|_running
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|_reportExisting
init|=
literal|true
decl_stmt|;
specifier|private
name|Timer
name|_timer
decl_stmt|;
specifier|private
name|TimerTask
name|_task
decl_stmt|;
comment|/**      * Listener      *<p/>      * Marker for notifications re file changes.      */
specifier|public
interface|interface
name|Listener
block|{     }
specifier|public
interface|interface
name|DiscreteListener
extends|extends
name|Listener
block|{
specifier|public
name|void
name|fileChanged
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
name|void
name|fileAdded
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
name|void
name|fileRemoved
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
specifier|public
interface|interface
name|BulkListener
extends|extends
name|Listener
block|{
specifier|public
name|void
name|filesChanged
parameter_list|(
name|List
name|filenames
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
comment|/**      *      */
specifier|public
name|Scanner
parameter_list|()
block|{     }
comment|/**      * Get the scan interval      *      * @return interval between scans in millis      */
specifier|public
name|long
name|getScanInterval
parameter_list|()
block|{
return|return
name|_scanInterval
return|;
block|}
comment|/**      * Set the scan interval      *      * @param scanInterval pause between scans in millis      */
specifier|public
specifier|synchronized
name|void
name|setScanInterval
parameter_list|(
name|long
name|scanInterval
parameter_list|)
block|{
name|this
operator|.
name|_scanInterval
operator|=
name|scanInterval
expr_stmt|;
if|if
condition|(
name|_running
condition|)
block|{
name|stop
argument_list|()
expr_stmt|;
name|_timer
operator|=
name|newTimer
argument_list|()
expr_stmt|;
name|_task
operator|=
name|newTimerTask
argument_list|()
expr_stmt|;
name|schedule
argument_list|(
name|_timer
argument_list|,
name|_task
argument_list|)
expr_stmt|;
name|_running
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * Set the location of the directory to scan.      *      * @param dir      * @deprecated use setScanDirs(List dirs) instead      */
specifier|public
name|void
name|setScanDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|_scanDirs
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|_scanDirs
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the location of the directory to scan      *      * @return      * @deprecated use getScanDirs() instead      */
specifier|public
name|File
name|getScanDir
parameter_list|()
block|{
return|return
operator|(
name|_scanDirs
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|File
operator|)
name|_scanDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
specifier|public
name|void
name|setScanDirs
parameter_list|(
name|List
name|dirs
parameter_list|)
block|{
name|_scanDirs
operator|=
name|dirs
expr_stmt|;
block|}
specifier|public
name|List
name|getScanDirs
parameter_list|()
block|{
return|return
name|_scanDirs
return|;
block|}
comment|/**      * Apply a filter to files found in the scan directory.      * Only files matching the filter will be reported as added/changed/removed.      *      * @param filter      */
specifier|public
name|void
name|setFilenameFilter
parameter_list|(
name|FilenameFilter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|_filter
operator|=
name|filter
expr_stmt|;
block|}
comment|/**      * Get any filter applied to files in the scan dir.      *      * @return      */
specifier|public
name|FilenameFilter
name|getFilenameFilter
parameter_list|()
block|{
return|return
name|_filter
return|;
block|}
comment|/**      * Whether or not an initial scan will report all files as being      * added.      *      * @param reportExisting if true, all files found on initial scan will be      *                       reported as being added, otherwise not      */
specifier|public
name|void
name|setReportExistingFilesOnStartup
parameter_list|(
name|boolean
name|reportExisting
parameter_list|)
block|{
name|this
operator|.
name|_reportExisting
operator|=
name|reportExisting
expr_stmt|;
block|}
comment|/**      * Add an added/removed/changed listener      *      * @param listener      */
specifier|public
specifier|synchronized
name|void
name|addListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|_listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a registered listener      *      * @param listener the Listener to be removed      */
specifier|public
specifier|synchronized
name|void
name|removeListener
parameter_list|(
name|Listener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|_listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Start the scanning action.      */
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|_running
condition|)
block|{
return|return;
block|}
name|_running
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|_reportExisting
condition|)
block|{
comment|// if files exist at startup, report them
name|scan
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//just register the list of existing files and only report changes
name|_prevScan
operator|=
name|scanFiles
argument_list|()
expr_stmt|;
block|}
name|_timer
operator|=
name|newTimer
argument_list|()
expr_stmt|;
name|_task
operator|=
name|newTimerTask
argument_list|()
expr_stmt|;
name|schedule
argument_list|(
name|_timer
argument_list|,
name|_task
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimerTask
name|newTimerTask
parameter_list|()
block|{
return|return
operator|new
name|TimerTask
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|scan
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|Timer
name|newTimer
parameter_list|()
block|{
return|return
operator|new
name|Timer
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|void
name|schedule
parameter_list|(
name|Timer
name|timer
parameter_list|,
name|TimerTask
name|task
parameter_list|)
block|{
if|if
condition|(
name|timer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Timer is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"TimerTask is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|getScanInterval
argument_list|()
operator|>
literal|0
condition|)
block|{
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|task
argument_list|,
name|getScanInterval
argument_list|()
argument_list|,
name|getScanInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Stop the scanning.      */
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|_running
condition|)
block|{
name|_running
operator|=
literal|false
expr_stmt|;
name|_timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|_task
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|_task
operator|=
literal|null
expr_stmt|;
name|_timer
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Perform a pass of the scanner and report changes      */
specifier|public
name|void
name|scan
parameter_list|()
block|{
name|Map
name|currentScan
init|=
name|scanFiles
argument_list|()
decl_stmt|;
name|reportDifferences
argument_list|(
name|currentScan
argument_list|,
name|_prevScan
argument_list|)
expr_stmt|;
name|_prevScan
operator|=
name|currentScan
expr_stmt|;
block|}
comment|/**      * Recursively scan all files in the designated directories.      *      * @return Map of name of file to last modified time      */
specifier|public
name|Map
name|scanFiles
parameter_list|()
block|{
if|if
condition|(
name|_scanDirs
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
name|HashMap
name|scanInfo
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Iterator
name|itor
init|=
name|_scanDirs
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|File
name|dir
init|=
operator|(
name|File
operator|)
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dir
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dir
operator|.
name|exists
argument_list|()
operator|)
condition|)
block|{
name|scanFile
argument_list|(
name|dir
argument_list|,
name|scanInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|scanInfo
return|;
block|}
comment|/**      * Report the adds/changes/removes to the registered listeners      *      * @param currentScan the info from the most recent pass      * @param oldScan     info from the previous pass      */
specifier|public
name|void
name|reportDifferences
parameter_list|(
name|Map
name|currentScan
parameter_list|,
name|Map
name|oldScan
parameter_list|)
block|{
name|List
name|bulkChanges
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|oldScanKeys
init|=
operator|new
name|HashSet
argument_list|(
name|oldScan
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
name|itor
init|=
name|currentScan
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldScanKeys
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|debug
argument_list|(
literal|"File added: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|reportAddition
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|bulkChanges
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|oldScan
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|debug
argument_list|(
literal|"File changed: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|reportChange
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oldScanKeys
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|bulkChanges
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|oldScanKeys
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|oldScanKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
name|keyItor
init|=
name|oldScanKeys
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyItor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|filename
init|=
operator|(
name|String
operator|)
name|keyItor
operator|.
name|next
argument_list|()
decl_stmt|;
name|debug
argument_list|(
literal|"File removed: "
operator|+
name|filename
argument_list|)
expr_stmt|;
name|reportRemoval
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|bulkChanges
operator|.
name|add
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bulkChanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reportBulkChanges
argument_list|(
name|bulkChanges
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get last modified time on a single file or recurse if      * the file is a directory.      *      * @param f           file or directory      * @param scanInfoMap map of filenames to last modified times      */
specifier|private
name|void
name|scanFile
parameter_list|(
name|File
name|f
parameter_list|,
name|Map
name|scanInfoMap
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|_filter
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
name|_filter
operator|!=
literal|null
operator|)
operator|&&
name|_filter
operator|.
name|accept
argument_list|(
name|f
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|String
name|name
init|=
name|f
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|long
name|lastModified
init|=
name|f
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|scanInfoMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|Long
argument_list|(
name|lastModified
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|scanFile
argument_list|(
name|files
index|[
name|i
index|]
argument_list|,
name|scanInfoMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Error scanning watched files"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Report a file addition to the registered FileAddedListeners      *      * @param filename      */
specifier|private
name|void
name|reportAddition
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|Iterator
name|itor
init|=
name|_listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|l
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|DiscreteListener
condition|)
block|{
operator|(
operator|(
name|DiscreteListener
operator|)
name|l
operator|)
operator|.
name|fileAdded
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Report a file removal to the FileRemovedListeners      *      * @param filename      */
specifier|private
name|void
name|reportRemoval
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|Iterator
name|itor
init|=
name|_listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|l
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|DiscreteListener
condition|)
block|{
operator|(
operator|(
name|DiscreteListener
operator|)
name|l
operator|)
operator|.
name|fileRemoved
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Report a file change to the FileChangedListeners      *      * @param filename      */
specifier|private
name|void
name|reportChange
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|Iterator
name|itor
init|=
name|_listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|l
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|DiscreteListener
condition|)
block|{
operator|(
operator|(
name|DiscreteListener
operator|)
name|l
operator|)
operator|.
name|fileChanged
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|reportBulkChanges
parameter_list|(
name|List
name|filenames
parameter_list|)
block|{
name|Iterator
name|itor
init|=
name|_listeners
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itor
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Object
name|l
init|=
name|itor
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|BulkListener
condition|)
block|{
operator|(
operator|(
name|BulkListener
operator|)
name|l
operator|)
operator|.
name|filesChanged
argument_list|(
name|filenames
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
comment|// TODO replace with clogging or OSGi Log
block|}
specifier|protected
name|void
name|warn
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// TODO replace with clogging or OSGi Log
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
comment|// TODO replace with clogging or OSGi Log
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"WARN: "
operator|+
name|message
operator|+
literal|" "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

