begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|ProfilesTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testProfilePlaceholderResolver
parameter_list|()
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"foo"
argument_list|,
literal|"b${profile:pid2/bar}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"bar"
argument_list|,
literal|"a${rep}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"rep"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|effective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bah"
argument_list|,
name|effective
operator|.
name|getConfiguration
argument_list|(
literal|"pid1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testProfilePlaceholderResolverWitCycle
parameter_list|()
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"foo"
argument_list|,
literal|"b${profile:pid2/bar}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"bar"
argument_list|,
literal|"a${rep}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"rep"
argument_list|,
literal|"h${profile:pid1/foo}"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|effective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|effective
operator|.
name|getConfiguration
argument_list|(
literal|"pid1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|// Should throw an exception
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonSubstitution
parameter_list|()
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"key"
argument_list|,
literal|"${foo}/${bar}"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|effective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"${foo}/${bar}"
argument_list|,
name|effective
operator|.
name|getConfiguration
argument_list|(
literal|"pid1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProfilesOverlayComments
parameter_list|()
block|{
name|String
name|pid1
init|=
literal|"# My comment\nfoo = bar\n"
decl_stmt|;
name|Profile
name|parent
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|addFileConfiguration
argument_list|(
literal|"pid1.cfg"
argument_list|,
name|pid1
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar2"
argument_list|)
operator|.
name|addParent
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|profiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|profiles
operator|.
name|put
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|profiles
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|Profile
name|overlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|profile
argument_list|,
name|profiles
argument_list|)
decl_stmt|;
name|String
name|outPid1
init|=
operator|new
name|String
argument_list|(
name|overlay
operator|.
name|getFileConfiguration
argument_list|(
literal|"pid1.cfg"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%1$s%n%2$s%n"
argument_list|,
literal|"# My comment"
argument_list|,
literal|"foo = bar2"
argument_list|)
argument_list|,
name|outPid1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

