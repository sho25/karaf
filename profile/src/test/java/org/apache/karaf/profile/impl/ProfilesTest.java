begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ProfilesTest
block|{
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProfilesTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testProfilesApi
parameter_list|()
throws|throws
name|IOException
block|{
name|ProfileBuilder
name|builder
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"my-simple-profile"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addParents
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
literal|"attr1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addBundle
argument_list|(
literal|"mvn:commons-everything/commons-everything/42"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addBlacklistedBundle
argument_list|(
literal|"mvn:commons-banned/commons-banned/[42,52)"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
literal|"my.pid"
argument_list|,
literal|"a1"
argument_list|,
literal|"v1${profile:my.pid2/a2}"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
literal|"my.pid"
argument_list|,
literal|"a2"
argument_list|,
literal|"v1${profile:my.pid2/a3}"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addFeature
argument_list|(
literal|"feature1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addBlacklistedFeature
argument_list|(
literal|"f34tu4e"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addFileConfiguration
argument_list|(
literal|"my.pid2.txt"
argument_list|,
literal|"hello!"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addFileConfiguration
argument_list|(
literal|"my.pid2.cfg"
argument_list|,
literal|"a2=v2"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addRepository
argument_list|(
literal|"mvn:my/repository/1/xml/features"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addBlacklistedRepository
argument_list|(
literal|"mvn:my/repository/[0,1)/xml/features"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setOptionals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"mvn:g/a/1"
argument_list|,
literal|"mvn:g/a/2"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setOverrides
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"mvn:g/a/4"
argument_list|,
literal|"mvn:g/a/3"
argument_list|)
argument_list|)
expr_stmt|;
name|Profile
name|profile
init|=
name|builder
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Profile: {}"
argument_list|,
name|profile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Config: {}"
argument_list|,
name|profile
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Libraries: {}"
argument_list|,
name|profile
operator|.
name|getLibraries
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"System: {}"
argument_list|,
name|profile
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Configurations: {}"
argument_list|,
name|profile
operator|.
name|getConfigurations
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ConfigurationFileNames: {}"
argument_list|,
name|profile
operator|.
name|getConfigurationFileNames
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"FileConfigurations: {}"
argument_list|,
name|profile
operator|.
name|getFileConfigurations
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Profile
name|effectiveProfile1
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Profile
name|effectiveProfile2
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|profiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|profiles
operator|.
name|put
argument_list|(
literal|"x"
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|Profile
name|overlayProfile
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|profile
argument_list|,
name|profiles
argument_list|)
decl_stmt|;
name|Profiles
operator|.
name|writeProfile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target/p-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|Profiles
operator|.
name|writeProfile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target/ep1-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|effectiveProfile1
argument_list|)
expr_stmt|;
name|Profiles
operator|.
name|writeProfile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target/ep2-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|effectiveProfile2
argument_list|)
expr_stmt|;
name|Profiles
operator|.
name|writeProfile
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"target/op-"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|overlayProfile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProfilePlaceholderResolver
parameter_list|()
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"foo"
argument_list|,
literal|"b${profile:pid2/bar}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"bar"
argument_list|,
literal|"a${rep}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"rep"
argument_list|,
literal|"h"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|effective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bah"
argument_list|,
name|effective
operator|.
name|getConfiguration
argument_list|(
literal|"pid1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testProfilePlaceholderResolverWithCycle
parameter_list|()
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"foo"
argument_list|,
literal|"b${profile:pid2/bar}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"bar"
argument_list|,
literal|"a${rep}"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid2"
argument_list|,
literal|"rep"
argument_list|,
literal|"h${profile:pid1/foo}"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|effective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|effective
operator|.
name|getConfiguration
argument_list|(
literal|"pid1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
comment|// Should throw an exception
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonSubstitution
parameter_list|()
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"key"
argument_list|,
literal|"${foo}/${bar}"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|effective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"${foo}/${bar}"
argument_list|,
name|effective
operator|.
name|getConfiguration
argument_list|(
literal|"pid1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProfilesOverlayComments
parameter_list|()
block|{
name|String
name|pid1
init|=
literal|"# My comment\nfoo = bar\n"
decl_stmt|;
name|Profile
name|parent
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|addFileConfiguration
argument_list|(
literal|"pid1.cfg"
argument_list|,
name|pid1
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pid1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar2"
argument_list|)
operator|.
name|addParent
argument_list|(
literal|"parent"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|profiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|profiles
operator|.
name|put
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|profiles
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|Profile
name|overlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|profile
argument_list|,
name|profiles
argument_list|)
decl_stmt|;
name|String
name|outPid1
init|=
operator|new
name|String
argument_list|(
name|overlay
operator|.
name|getFileConfiguration
argument_list|(
literal|"pid1.cfg"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%1$s%n%2$s%n"
argument_list|,
literal|"# My comment"
argument_list|,
literal|"foo = bar2"
argument_list|)
argument_list|,
name|outPid1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overlayProfiles
parameter_list|()
block|{
name|Profile
name|p1
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"p1a1"
argument_list|,
literal|"p1v1"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p1p1"
argument_list|,
literal|"p1p1p1"
argument_list|,
literal|"p1p1v1"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pp1"
argument_list|,
literal|"pp1p1"
argument_list|,
literal|"p1p1v1"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|p2
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"p2a1"
argument_list|,
literal|"p2v1"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p2p1"
argument_list|,
literal|"p2p1p1"
argument_list|,
literal|"p2p1v1"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"pp1"
argument_list|,
literal|"pp1p1"
argument_list|,
literal|"p2p1v1"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|c1
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"c2"
argument_list|)
operator|.
name|addParents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"p1a1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"p2a1"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|c1
operator|.
name|getConfigurations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|getConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"profile"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|parents
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parents
operator|.
name|put
argument_list|(
literal|"p1"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
literal|"p2"
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|Profile
name|oc1
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|c1
argument_list|,
name|parents
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|oc1
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"p1a1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"p1v1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oc1
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"p2a1"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"p2v1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|oc1
operator|.
name|getConfigurations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|oc1
operator|.
name|getConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"p1p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|oc1
operator|.
name|getConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"p2p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|oc1
operator|.
name|getConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"pp1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|oc1
operator|.
name|getConfigurations
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"profile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|inheritanceOrder
parameter_list|()
block|{
name|Profile
name|gp1
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"gp1"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"a"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|addFileConfiguration
argument_list|(
literal|"f"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x01
block|}
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"b"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"c"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p"
argument_list|,
literal|"p"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p"
argument_list|,
literal|"px"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|gp2
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"gp2"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"a"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"c"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|addFileConfiguration
argument_list|(
literal|"f"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x02
block|}
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p"
argument_list|,
literal|"p"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|p1
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|addParents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"gp1"
argument_list|,
literal|"gp2"
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"a"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|addFileConfiguration
argument_list|(
literal|"f"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x03
block|}
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p"
argument_list|,
literal|"p"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|p2
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"a"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"b"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|addFileConfiguration
argument_list|(
literal|"f"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x04
block|}
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p"
argument_list|,
literal|"p"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|c
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"p2"
argument_list|)
operator|.
name|addParents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"a"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|addFileConfiguration
argument_list|(
literal|"f"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x05
block|}
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"p"
argument_list|,
literal|"p"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|parents
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parents
operator|.
name|put
argument_list|(
literal|"gp1"
argument_list|,
name|gp1
argument_list|)
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
literal|"gp2"
argument_list|,
name|gp2
argument_list|)
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
literal|"p1"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
literal|"p2"
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|Profile
name|overlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|c
argument_list|,
name|parents
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|overlay
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|overlay
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|overlay
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|overlay
operator|.
name|getConfiguration
argument_list|(
literal|"p"
argument_list|)
operator|.
name|get
argument_list|(
literal|"p"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|overlay
operator|.
name|getConfiguration
argument_list|(
literal|"p"
argument_list|)
operator|.
name|get
argument_list|(
literal|"px"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|overlay
operator|.
name|getFileConfiguration
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x05
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overrides
parameter_list|()
block|{
name|Profile
name|p
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"p"
argument_list|)
operator|.
name|setOverrides
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|p
operator|.
name|getConfiguration
argument_list|(
literal|"profile"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

