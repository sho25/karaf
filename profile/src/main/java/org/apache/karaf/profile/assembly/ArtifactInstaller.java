begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Blacklist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|maven
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|impl
operator|.
name|DownloadManagerHelper
operator|.
name|stripUrl
import|;
end_import

begin_comment
comment|/**  * Downloads a maven artifact and installs it into the given system directory.  * The layout follows the conventions of a maven local repository.  */
end_comment

begin_class
specifier|public
class|class
name|ArtifactInstaller
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ArtifactInstaller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Path
name|systemDirectory
decl_stmt|;
specifier|private
name|Downloader
name|downloader
decl_stmt|;
specifier|private
name|Blacklist
name|blacklist
decl_stmt|;
specifier|public
name|ArtifactInstaller
parameter_list|(
name|Path
name|systemDirectory
parameter_list|,
name|Downloader
name|downloader
parameter_list|,
name|Blacklist
name|blacklist
parameter_list|)
block|{
name|this
operator|.
name|systemDirectory
operator|=
name|systemDirectory
expr_stmt|;
name|this
operator|.
name|downloader
operator|=
name|downloader
expr_stmt|;
name|this
operator|.
name|blacklist
operator|=
name|blacklist
expr_stmt|;
block|}
comment|/**      * Installs a {@link BundleInfo} into<code>system/</code> directory taking into account<em>blacklisted</em>      * and<em>overriden</em> flags.      * @param bundle      * @throws Exception      */
specifier|public
name|void
name|installArtifact
parameter_list|(
name|BundleInfo
name|bundle
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|bundle
operator|.
name|isBlacklisted
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      skipping blacklisted maven artifact: "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|bundle
operator|.
name|isOverriden
argument_list|()
operator|!=
name|BundleInfo
operator|.
name|BundleOverrideMode
operator|.
name|NONE
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      adding overriden maven artifact: "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
operator|+
literal|" (original location: "
operator|+
name|bundle
operator|.
name|getOriginalLocation
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      adding maven artifact: "
operator|+
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|location
init|=
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|location
operator|=
name|removeTrailingSlash
argument_list|(
name|stripUrl
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|location
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Ignoring non maven artifact "
operator|+
name|location
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|finalLocation
init|=
name|location
decl_stmt|;
name|downloader
operator|.
name|download
argument_list|(
name|location
argument_list|,
name|provider
lambda|->
block|{
name|String
name|uri
init|=
name|provider
operator|.
name|getUrl
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|pathFromProviderUrl
argument_list|(
name|systemDirectory
argument_list|,
name|finalLocation
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|provider
init|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|path
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Installs generic artifact to<code>system/</code> directory. For bundles, dedicated {@link #installArtifact(BundleInfo)}      * should be used.      * @param location      * @throws Exception      */
specifier|public
name|void
name|installArtifact
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      adding maven artifact: "
operator|+
name|location
argument_list|)
expr_stmt|;
name|location
operator|=
name|removeTrailingSlash
argument_list|(
name|stripUrl
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|location
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Ignoring non maven artifact "
operator|+
name|location
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|finalLocation
init|=
name|location
decl_stmt|;
name|downloader
operator|.
name|download
argument_list|(
name|location
argument_list|,
name|provider
lambda|->
block|{
name|String
name|uri
init|=
name|provider
operator|.
name|getUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|blacklist
operator|.
name|isBundleBlacklisted
argument_list|(
name|finalLocation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bundle "
operator|+
name|finalLocation
operator|+
literal|" is blacklisted"
argument_list|)
throw|;
block|}
name|Path
name|path
init|=
name|pathFromProviderUrl
argument_list|(
name|systemDirectory
argument_list|,
name|finalLocation
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|provider
init|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|path
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * for bad formed URL (like in Camel for mustache-compiler), we remove the trailing /      */
specifier|private
name|String
name|removeTrailingSlash
parameter_list|(
name|String
name|location
parameter_list|)
block|{
return|return
name|location
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|location
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|location
return|;
block|}
specifier|public
specifier|static
name|Path
name|pathFromProviderUrl
parameter_list|(
name|Path
name|systemDirectory
parameter_list|,
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|String
name|pathString
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|url
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|pathString
operator|=
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathString
operator|=
name|url
expr_stmt|;
block|}
return|return
name|systemDirectory
operator|.
name|resolve
argument_list|(
name|pathString
argument_list|)
return|;
block|}
block|}
end_class

end_unit

