begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|blueprint
operator|.
name|BlueprintTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|deployer
operator|.
name|spring
operator|.
name|SpringTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|impl
operator|.
name|AbstractRetryableDownloadTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_class
specifier|public
class|class
name|CustomSimpleDownloadTask
extends|extends
name|AbstractRetryableDownloadTask
block|{
specifier|private
specifier|static
specifier|final
name|String
name|WRAP_URI_PREFIX
init|=
literal|"wrap"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPRING_URI_PREFIX
init|=
literal|"spring"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BLUEPRINT_URI_PREFIX
init|=
literal|"blueprint"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WAR_URI_PREFIX
init|=
literal|"war"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROFILE_URI_PREFIX
init|=
literal|"profile"
decl_stmt|;
specifier|private
specifier|final
name|Profile
name|profile
decl_stmt|;
specifier|public
name|CustomSimpleDownloadTask
parameter_list|(
name|ScheduledExecutorService
name|executorService
parameter_list|,
name|Profile
name|profile
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|executorService
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|this
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|File
name|download
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|createUrl
argument_list|(
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"download-"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
name|url
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|path
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
return|return
name|path
operator|.
name|toFile
argument_list|()
return|;
block|}
specifier|private
name|URL
name|createUrl
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|URISyntaxException
block|{
name|URLStreamHandler
name|handler
init|=
name|getUrlStreamHandler
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|URL
argument_list|(
literal|null
argument_list|,
name|url
argument_list|,
name|handler
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|URL
argument_list|(
name|url
argument_list|)
return|;
block|}
block|}
specifier|private
name|URLStreamHandler
name|getUrlStreamHandler
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|URISyntaxException
block|{
if|if
condition|(
name|url
operator|.
name|contains
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
name|String
name|scheme
init|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|url
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|scheme
condition|)
block|{
case|case
name|WRAP_URI_PREFIX
case|:
return|return
operator|new
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|wrap
operator|.
name|Handler
argument_list|()
return|;
case|case
name|WAR_URI_PREFIX
case|:
return|return
operator|new
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|war
operator|.
name|Handler
argument_list|()
return|;
case|case
name|SPRING_URI_PREFIX
case|:
return|return
operator|new
name|SpringURLHandler
argument_list|()
return|;
case|case
name|BLUEPRINT_URI_PREFIX
case|:
return|return
operator|new
name|BlueprintURLHandler
argument_list|()
return|;
case|case
name|PROFILE_URI_PREFIX
case|:
if|if
condition|(
name|profile
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ProfileURLHandler
argument_list|()
return|;
block|}
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
class|class
name|SpringURLHandler
extends|extends
name|URLStreamHandler
block|{
annotation|@
name|Override
specifier|protected
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|u
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|URLConnection
argument_list|(
name|u
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{                 }
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|SpringTransformer
operator|.
name|transform
argument_list|(
name|createUrl
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error opening spring xml url"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
specifier|public
class|class
name|BlueprintURLHandler
extends|extends
name|URLStreamHandler
block|{
annotation|@
name|Override
specifier|protected
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|u
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|URLConnection
argument_list|(
name|u
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{                 }
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|BlueprintTransformer
operator|.
name|transform
argument_list|(
name|createUrl
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error opening blueprint xml url"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
specifier|public
class|class
name|ProfileURLHandler
extends|extends
name|URLStreamHandler
block|{
annotation|@
name|Override
specifier|protected
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|u
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|URLConnection
argument_list|(
name|u
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{                 }
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|path
init|=
name|url
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|profile
operator|.
name|getFileConfiguration
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|url
operator|.
name|toExternalForm
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

