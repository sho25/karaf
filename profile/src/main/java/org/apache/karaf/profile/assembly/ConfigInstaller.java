begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Installs PID configuration to<code>${karaf.etc}</code> and<code>system/</code> directory.  */
end_comment

begin_class
specifier|public
class|class
name|ConfigInstaller
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConfigInstaller
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Path
name|etcDirectory
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|pidsToExtract
decl_stmt|;
specifier|public
name|ConfigInstaller
parameter_list|(
name|Path
name|etcDirectory
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pidsToExtract
parameter_list|)
block|{
name|this
operator|.
name|etcDirectory
operator|=
name|etcDirectory
expr_stmt|;
name|this
operator|.
name|pidsToExtract
operator|=
name|pidsToExtract
expr_stmt|;
block|}
specifier|public
name|void
name|installConfigs
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|Downloader
name|downloader
parameter_list|,
name|ArtifactInstaller
name|installer
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Content
argument_list|>
name|contents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|contents
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|contents
operator|.
name|addAll
argument_list|(
name|feature
operator|.
name|getConditional
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Content
name|content
range|:
name|contents
control|)
block|{
comment|// Install config files
for|for
control|(
name|Config
name|config
range|:
name|content
operator|.
name|getConfig
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|isExternal
argument_list|()
condition|)
block|{
name|installer
operator|.
name|installArtifact
argument_list|(
name|config
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|content
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
name|installer
operator|.
name|installArtifact
argument_list|(
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Extract configs
name|Path
name|homeDirectory
init|=
name|etcDirectory
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|content
operator|.
name|getConfig
argument_list|()
control|)
block|{
if|if
condition|(
name|pidMatching
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Path
name|configFile
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
name|config
operator|.
name|getName
argument_list|()
operator|+
literal|".cfg"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|isAppend
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|configFile
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      not changing existing config file: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|config
operator|.
name|isExternal
argument_list|()
condition|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|config
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|provider
lambda|->
block|{
synchronized|synchronized
init|(
name|provider
init|)
block|{
if|if
condition|(
name|config
operator|.
name|isAppend
argument_list|()
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      appending to config file: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|data
argument_list|,
name|StandardOpenOption
operator|.
name|APPEND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      adding config file: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|configFile
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|config
operator|.
name|isAppend
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      appending to config file: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|StandardOpenOption
operator|.
name|APPEND
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      adding config file: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|pidMatching
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|pidsToExtract
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|String
name|p
range|:
name|pidsToExtract
control|)
block|{
name|boolean
name|negated
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
condition|)
block|{
name|negated
operator|=
literal|true
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|r
init|=
name|globToRegex
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|Pattern
operator|.
name|matches
argument_list|(
name|r
argument_list|,
name|name
argument_list|)
condition|)
block|{
return|return
operator|!
name|negated
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|globToRegex
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|pattern
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|inGroup
init|=
literal|0
decl_stmt|;
name|int
name|inClass
init|=
literal|0
decl_stmt|;
name|int
name|firstIndexInClass
init|=
operator|-
literal|1
decl_stmt|;
name|char
index|[]
name|arr
init|=
name|pattern
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'\\'
case|:
if|if
condition|(
operator|++
name|i
operator|>=
name|arr
operator|.
name|length
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|char
name|next
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|next
condition|)
block|{
case|case
literal|','
case|:
comment|// escape not needed
break|break;
case|case
literal|'Q'
case|:
case|case
literal|'E'
case|:
comment|// extra escape needed
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
default|default:
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'*'
case|:
if|if
condition|(
name|inClass
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'?'
case|:
if|if
condition|(
name|inClass
operator|==
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'['
case|:
name|inClass
operator|++
expr_stmt|;
name|firstIndexInClass
operator|=
name|i
operator|+
literal|1
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
break|break;
case|case
literal|']'
case|:
name|inClass
operator|--
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'+'
case|:
case|case
literal|'|'
case|:
case|case
literal|'^'
case|:
case|case
literal|'$'
case|:
case|case
literal|'@'
case|:
case|case
literal|'%'
case|:
if|if
condition|(
name|inClass
operator|==
literal|0
operator|||
operator|(
name|firstIndexInClass
operator|==
name|i
operator|&&
name|ch
operator|==
literal|'^'
operator|)
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'!'
case|:
if|if
condition|(
name|firstIndexInClass
operator|==
name|i
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|'!'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'{'
case|:
name|inGroup
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
name|inGroup
operator|--
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
break|break;
case|case
literal|','
case|:
if|if
condition|(
name|inGroup
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
else|else
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

