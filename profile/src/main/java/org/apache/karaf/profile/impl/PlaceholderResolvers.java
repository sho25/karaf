begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|PlaceholderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PlaceholderResolvers
block|{
specifier|private
name|PlaceholderResolvers
parameter_list|()
block|{ }
specifier|public
specifier|static
class|class
name|ProfilePlaceholderResolver
implements|implements
name|PlaceholderResolver
block|{
specifier|public
specifier|final
name|String
name|SCHEME
init|=
literal|"profile"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|SCHEME
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|resolve
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|profile
parameter_list|,
name|String
name|pid
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|int
name|index
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
name|String
name|propertyPid
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|propertyKey
init|=
name|value
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|profile
operator|.
name|get
argument_list|(
name|propertyPid
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
operator|&&
name|props
operator|.
name|containsKey
argument_list|(
name|propertyKey
argument_list|)
condition|)
block|{
name|Object
name|v
init|=
name|props
operator|.
name|get
argument_list|(
name|propertyKey
argument_list|)
decl_stmt|;
return|return
name|v
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Substitute a placeholder with profile:[property file]/[key], with the target value.      *      * @param key The key in the configuration.      * @param configs A {@link Map} of configurations where to perform the substitution.      * @return The target value or the key as is.      */
specifier|public
specifier|static
name|String
name|substituteProfileProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|configs
parameter_list|)
block|{
name|String
name|pid
init|=
name|key
operator|.
name|substring
argument_list|(
literal|"profile:"
operator|.
name|length
argument_list|()
argument_list|,
name|key
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|propertyKey
init|=
name|key
operator|.
name|substring
argument_list|(
name|key
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|targetProps
init|=
name|configs
operator|.
name|get
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetProps
operator|!=
literal|null
operator|&&
name|targetProps
operator|.
name|containsKey
argument_list|(
name|propertyKey
argument_list|)
condition|)
block|{
return|return
name|targetProps
operator|.
name|get
argument_list|(
name|propertyKey
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
comment|/**      * Substitutes bundle property.      *      * @param key The key in the configuration.      * @param bundleContext The bundle context to use.      * @return The target value or an empty String.      */
specifier|public
specifier|static
name|String
name|substituteBundleProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|String
name|value
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bundleContext
operator|!=
literal|null
condition|)
block|{
name|value
operator|=
name|bundleContext
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|value
operator|!=
literal|null
condition|?
name|value
else|:
literal|""
return|;
block|}
block|}
end_class

end_unit

