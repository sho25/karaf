begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|jline
operator|.
name|TerminalSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|action
operator|.
name|lifecycle
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|shell
operator|.
name|api
operator|.
name|console
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jledit
operator|.
name|ConsoleEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jledit
operator|.
name|ContentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jledit
operator|.
name|EditorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jledit
operator|.
name|simple
operator|.
name|SimpleConsoleEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
annotation|@
name|Command
argument_list|(
name|name
operator|=
literal|"edit"
argument_list|,
name|scope
operator|=
literal|"profile"
argument_list|,
name|description
operator|=
literal|"Edits the specified profile"
argument_list|,
name|detailedDescription
operator|=
literal|"classpath:profileEdit.txt"
argument_list|)
annotation|@
name|Service
specifier|public
class|class
name|ProfileEdit
implements|implements
name|Action
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProfileEdit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|FEATURE_PREFIX
init|=
literal|"feature."
decl_stmt|;
specifier|static
specifier|final
name|String
name|REPOSITORY_PREFIX
init|=
literal|"repository."
decl_stmt|;
specifier|static
specifier|final
name|String
name|BUNDLE_PREFIX
init|=
literal|"bundle."
decl_stmt|;
specifier|static
specifier|final
name|String
name|OVERRIDE_PREFIX
init|=
literal|"override."
decl_stmt|;
specifier|static
specifier|final
name|String
name|CONFIG_PREFIX
init|=
literal|"config."
decl_stmt|;
specifier|static
specifier|final
name|String
name|SYSTEM_PREFIX
init|=
literal|"system."
decl_stmt|;
specifier|static
specifier|final
name|String
name|LIB_PREFIX
init|=
literal|"lib."
decl_stmt|;
specifier|static
specifier|final
name|String
name|ENDORSED_PREFIX
init|=
literal|"endorsed."
decl_stmt|;
specifier|static
specifier|final
name|String
name|EXT_PREFIX
init|=
literal|"ext."
decl_stmt|;
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|","
decl_stmt|;
specifier|static
specifier|final
name|String
name|PID_KEY_SEPARATOR
init|=
literal|"/"
decl_stmt|;
specifier|static
specifier|final
name|String
name|FILE_INSTALL_FILENAME_PROPERTY
init|=
literal|"felix.fileinstall.filename"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-r"
argument_list|,
name|aliases
operator|=
block|{
literal|"--repositories"
block|}
argument_list|,
name|description
operator|=
literal|"Edit the features repositories. To specify multiple repositories, specify this flag multiple times."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|repositories
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-f"
argument_list|,
name|aliases
operator|=
block|{
literal|"--features"
block|}
argument_list|,
name|description
operator|=
literal|"Edit features. To specify multiple features, specify this flag multiple times. For example, --features foo --features bar."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|features
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-l"
argument_list|,
name|aliases
operator|=
block|{
literal|"--libs"
block|}
argument_list|,
name|description
operator|=
literal|"Edit libraries. To specify multiple libraries, specify this flag multiple times."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|libs
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-n"
argument_list|,
name|aliases
operator|=
block|{
literal|"--endorsed"
block|}
argument_list|,
name|description
operator|=
literal|"Edit endorsed libraries. To specify multiple libraries, specify this flag multiple times."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|endorsed
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-x"
argument_list|,
name|aliases
operator|=
block|{
literal|"--extension"
block|}
argument_list|,
name|description
operator|=
literal|"Edit extension libraries. To specify multiple libraries, specify this flag multiple times."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|extension
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-b"
argument_list|,
name|aliases
operator|=
block|{
literal|"--bundles"
block|}
argument_list|,
name|description
operator|=
literal|"Edit bundles. To specify multiple bundles, specify this flag multiple times."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|bundles
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-o"
argument_list|,
name|aliases
operator|=
block|{
literal|"--overrides"
block|}
argument_list|,
name|description
operator|=
literal|"Edit overrides. To specify multiple libraries, specify this flag multiple times."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|overrides
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-p"
argument_list|,
name|aliases
operator|=
block|{
literal|"--pid"
block|}
argument_list|,
name|description
operator|=
literal|"Edit an OSGi configuration property, specified in the format<PID>/<Property>. To specify multiple properties, specify this flag multiple times."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|pidProperties
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-s"
argument_list|,
name|aliases
operator|=
block|{
literal|"--system"
block|}
argument_list|,
name|description
operator|=
literal|"Edit the Java system properties that affect installed bundles (analogous to editing etc/system.properties in a root container)."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|systemProperties
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-c"
argument_list|,
name|aliases
operator|=
block|{
literal|"--config"
block|}
argument_list|,
name|description
operator|=
literal|"Edit the Java system properties that affect the karaf container (analogous to editing etc/config.properties in a root container)."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|true
argument_list|)
specifier|private
name|String
index|[]
name|configProperties
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-i"
argument_list|,
name|aliases
operator|=
block|{
literal|"--import-pid"
block|}
argument_list|,
name|description
operator|=
literal|"Imports the pids that are edited, from local OSGi config admin"
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|boolean
name|importPid
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--resource"
argument_list|,
name|description
operator|=
literal|"Selects a resource under the profile to edit. This option should only be used alone."
argument_list|,
name|required
operator|=
literal|false
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|resource
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--set"
argument_list|,
name|description
operator|=
literal|"Set or create values (selected by default)."
argument_list|)
specifier|private
name|boolean
name|set
init|=
literal|true
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--delete"
argument_list|,
name|description
operator|=
literal|"Delete values. This option can be used to delete a feature, a bundle or a pid from the profile."
argument_list|)
specifier|private
name|boolean
name|delete
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--append"
argument_list|,
name|description
operator|=
literal|"Append value to a delimited list. It is only usable with the system, config& pid options"
argument_list|)
specifier|private
name|boolean
name|append
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--remove"
argument_list|,
name|description
operator|=
literal|"Removes value from a delimited list. It is only usable with the system, config& pid options"
argument_list|)
specifier|private
name|boolean
name|remove
init|=
literal|false
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--delimiter"
argument_list|,
name|description
operator|=
literal|"Specifies the delimiter to use for appends and removals."
argument_list|)
specifier|private
name|String
name|delimiter
init|=
literal|","
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|index
operator|=
literal|0
argument_list|,
name|name
operator|=
literal|"profile"
argument_list|,
name|description
operator|=
literal|"The target profile to edit"
argument_list|,
name|required
operator|=
literal|true
argument_list|,
name|multiValued
operator|=
literal|false
argument_list|)
specifier|private
name|String
name|profileName
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ProfileService
name|profileService
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|ConfigurationAdmin
name|configurationAdmin
decl_stmt|;
annotation|@
name|Reference
specifier|private
name|EditorFactory
name|editorFactory
decl_stmt|;
annotation|@
name|Reference
name|Terminal
name|terminal
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
block|{
comment|// TODO: Karaf 2.4 has a bug to lookup this class, so we bind it manually - Karaf 2.4.1 should have this fixed
name|this
operator|.
name|editorFactory
operator|.
name|bind
argument_list|(
literal|"simple"
argument_list|,
name|SimpleConsoleEditor
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|delete
condition|)
block|{
name|set
operator|=
literal|false
expr_stmt|;
block|}
name|Profile
name|profile
init|=
name|profileService
operator|.
name|getRequiredProfile
argument_list|(
name|profileName
argument_list|)
decl_stmt|;
name|editProfile
argument_list|(
name|profile
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|editProfile
parameter_list|(
name|Profile
name|profile
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|editInLine
init|=
literal|false
decl_stmt|;
name|ProfileBuilder
name|builder
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|createFrom
argument_list|(
name|profile
argument_list|)
decl_stmt|;
if|if
condition|(
name|delete
operator|||
name|remove
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|!=
literal|null
operator|&&
name|features
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleFeatures
argument_list|(
name|builder
argument_list|,
name|features
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repositories
operator|!=
literal|null
operator|&&
name|repositories
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleFeatureRepositories
argument_list|(
name|builder
argument_list|,
name|repositories
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|libs
operator|!=
literal|null
operator|&&
name|libs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleLibraries
argument_list|(
name|builder
argument_list|,
name|libs
argument_list|,
name|profile
argument_list|,
literal|"lib"
argument_list|,
name|LIB_PREFIX
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endorsed
operator|!=
literal|null
operator|&&
name|endorsed
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleLibraries
argument_list|(
name|builder
argument_list|,
name|endorsed
argument_list|,
name|profile
argument_list|,
literal|"endorsed lib"
argument_list|,
name|ENDORSED_PREFIX
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|extension
operator|!=
literal|null
operator|&&
name|extension
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleLibraries
argument_list|(
name|builder
argument_list|,
name|extension
argument_list|,
name|profile
argument_list|,
literal|"extension lib"
argument_list|,
name|EXT_PREFIX
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bundles
operator|!=
literal|null
operator|&&
name|bundles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleBundles
argument_list|(
name|builder
argument_list|,
name|bundles
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|overrides
operator|!=
literal|null
operator|&&
name|overrides
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleOverrides
argument_list|(
name|builder
argument_list|,
name|overrides
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pidProperties
operator|!=
literal|null
operator|&&
name|pidProperties
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
name|handlePid
argument_list|(
name|builder
argument_list|,
name|pidProperties
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|systemProperties
operator|!=
literal|null
operator|&&
name|systemProperties
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleSystemProperties
argument_list|(
name|builder
argument_list|,
name|systemProperties
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configProperties
operator|!=
literal|null
operator|&&
name|configProperties
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|editInLine
operator|=
literal|true
expr_stmt|;
name|handleConfigProperties
argument_list|(
name|builder
argument_list|,
name|configProperties
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|editInLine
condition|)
block|{
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|Profile
operator|.
name|INTERNAL_PID
operator|+
name|Profile
operator|.
name|PROPERTIES_SUFFIX
expr_stmt|;
block|}
comment|//If a single pid has been selected, but not a key value has been specified or import has been selected,
comment|//then open the resource in the editor.
if|if
condition|(
name|pidProperties
operator|!=
literal|null
operator|&&
name|pidProperties
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|resource
operator|=
name|pidProperties
index|[
literal|0
index|]
operator|+
name|Profile
operator|.
name|PROPERTIES_SUFFIX
expr_stmt|;
block|}
name|openInEditor
argument_list|(
name|profile
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
name|profileService
operator|.
name|updateProfile
argument_list|(
name|builder
operator|.
name|getProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds or remove the specified features to the specified profile.      */
specifier|private
name|void
name|handleFeatures
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|features
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting feature:"
operator|+
name|feature
operator|+
literal|" from profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding feature:"
operator|+
name|feature
operator|+
literal|" to profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateConfig
argument_list|(
name|conf
argument_list|,
name|FEATURE_PREFIX
operator|+
name|feature
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|feature
argument_list|,
name|set
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Adds or remove the specified feature repositories to the specified profile.      */
specifier|private
name|void
name|handleFeatureRepositories
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|repositories
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repositoryURI
range|:
name|repositories
control|)
block|{
if|if
condition|(
name|set
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding feature repository:"
operator|+
name|repositoryURI
operator|+
literal|" to profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting feature repository:"
operator|+
name|repositoryURI
operator|+
literal|" from profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateConfig
argument_list|(
name|conf
argument_list|,
name|REPOSITORY_PREFIX
operator|+
name|repositoryURI
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|repositoryURI
argument_list|,
name|set
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds or remove the specified libraries to the specified profile.      * @param libs      The array of libs.      * @param profile   The target profile.      * @param libType   The type of lib. Used just for the command output.      * @param libPrefix The prefix of the lib.      */
specifier|private
name|void
name|handleLibraries
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|libs
parameter_list|,
name|Profile
name|profile
parameter_list|,
name|String
name|libType
parameter_list|,
name|String
name|libPrefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|lib
range|:
name|libs
control|)
block|{
if|if
condition|(
name|set
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding "
operator|+
name|libType
operator|+
literal|":"
operator|+
name|lib
operator|+
literal|" to profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting "
operator|+
name|libType
operator|+
literal|":"
operator|+
name|lib
operator|+
literal|" from profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateConfig
argument_list|(
name|conf
argument_list|,
name|libPrefix
operator|+
name|lib
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|lib
argument_list|,
name|set
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds or remove the specified bundles to the specified profile.      * @param bundles   The array of bundles.      * @param profile   The target profile.      */
specifier|private
name|void
name|handleBundles
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|bundles
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
if|if
condition|(
name|set
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding bundle:"
operator|+
name|bundle
operator|+
literal|" to profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting bundle:"
operator|+
name|bundle
operator|+
literal|" from profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateConfig
argument_list|(
name|conf
argument_list|,
name|BUNDLE_PREFIX
operator|+
name|bundle
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|bundle
argument_list|,
name|set
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds or remove the specified overrides to the specified profile.      * @param overrides     The array of overrides.      * @param profile       The target profile.      */
specifier|private
name|void
name|handleOverrides
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|overrides
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|override
range|:
name|overrides
control|)
block|{
if|if
condition|(
name|set
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding override:"
operator|+
name|override
operator|+
literal|" to profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting override:"
operator|+
name|override
operator|+
literal|" from profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateConfig
argument_list|(
name|conf
argument_list|,
name|OVERRIDE_PREFIX
operator|+
name|override
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
argument_list|,
name|override
argument_list|,
name|set
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds or remove the specified system properties to the specified profile.      * @param pidProperties         The array of system properties.      * @param profile               The target profile.      * @return                      True if the edit can take place in line.      */
specifier|private
name|boolean
name|handlePid
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|pidProperties
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
name|boolean
name|editInline
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|pidProperty
range|:
name|pidProperties
control|)
block|{
name|String
name|currentPid
decl_stmt|;
name|String
name|keyValuePair
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|pidProperty
operator|.
name|contains
argument_list|(
name|PID_KEY_SEPARATOR
argument_list|)
condition|)
block|{
name|currentPid
operator|=
name|pidProperty
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pidProperty
operator|.
name|indexOf
argument_list|(
name|PID_KEY_SEPARATOR
argument_list|)
argument_list|)
expr_stmt|;
name|keyValuePair
operator|=
name|pidProperty
operator|.
name|substring
argument_list|(
name|pidProperty
operator|.
name|indexOf
argument_list|(
name|PID_KEY_SEPARATOR
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentPid
operator|=
name|pidProperty
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|currentPid
argument_list|)
decl_stmt|;
comment|// We only support import when a single pid is specified
if|if
condition|(
name|pidProperties
operator|.
name|length
operator|==
literal|1
operator|&&
name|importPid
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Importing pid:"
operator|+
name|currentPid
operator|+
literal|" to profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|importPidFromLocalConfigAdmin
argument_list|(
name|currentPid
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
name|currentPid
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configMap
init|=
name|extractConfigs
argument_list|(
name|keyValuePair
argument_list|)
decl_stmt|;
if|if
condition|(
name|configMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|set
condition|)
block|{
name|editInline
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|delete
condition|)
block|{
name|editInline
operator|=
literal|true
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting pid:"
operator|+
name|currentPid
operator|+
literal|" from profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|deleteConfiguration
argument_list|(
name|currentPid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configEntries
range|:
name|configMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|configEntries
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|configEntries
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|&&
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting key:"
operator|+
name|key
operator|+
literal|" from pid:"
operator|+
name|currentPid
operator|+
literal|" and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|append
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Appending value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" to pid:"
operator|+
name|currentPid
operator|+
literal|" and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remove
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removing value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" from pid:"
operator|+
name|currentPid
operator|+
literal|" and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|set
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" on pid:"
operator|+
name|currentPid
operator|+
literal|" and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updatedDelimitedList
argument_list|(
name|conf
argument_list|,
name|key
argument_list|,
name|value
argument_list|,
name|delimiter
argument_list|,
name|set
argument_list|,
name|delete
argument_list|,
name|append
argument_list|,
name|remove
argument_list|)
expr_stmt|;
block|}
block|}
name|editInline
operator|=
literal|true
expr_stmt|;
name|builder
operator|.
name|addConfiguration
argument_list|(
name|currentPid
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|editInline
return|;
block|}
comment|/**      * Adds or remove the specified system properties to the specified profile.      * @param systemProperties      The array of system properties.      * @param profile               The target profile.      */
specifier|private
name|void
name|handleSystemProperties
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|systemProperties
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|systemProperty
range|:
name|systemProperties
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configMap
init|=
name|extractConfigs
argument_list|(
name|systemProperty
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configEntries
range|:
name|configMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|configEntries
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|configEntries
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|append
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Appending value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" from system properties and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting key:"
operator|+
name|key
operator|+
literal|" from system properties and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|set
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" from system properties and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Removing value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" from system properties and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updatedDelimitedList
argument_list|(
name|conf
argument_list|,
name|SYSTEM_PREFIX
operator|+
name|key
argument_list|,
name|value
argument_list|,
name|delimiter
argument_list|,
name|set
argument_list|,
name|delete
argument_list|,
name|append
argument_list|,
name|remove
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds or remove the specified config properties to the specified profile.      * @param configProperties      The array of config properties.      * @param profile               The target profile.      */
specifier|private
name|void
name|handleConfigProperties
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
index|[]
name|configProperties
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|conf
init|=
name|getConfigurationFromBuilder
argument_list|(
name|builder
argument_list|,
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|configProperty
range|:
name|configProperties
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configMap
init|=
name|extractConfigs
argument_list|(
name|configProperty
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configEntries
range|:
name|configMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|configEntries
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|configEntries
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|append
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Appending value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" from config properties and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleting key:"
operator|+
name|key
operator|+
literal|" from config properties and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|set
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting value:"
operator|+
name|value
operator|+
literal|" key:"
operator|+
name|key
operator|+
literal|" from config properties and profile:"
operator|+
name|profile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updatedDelimitedList
argument_list|(
name|conf
argument_list|,
name|CONFIG_PREFIX
operator|+
name|key
argument_list|,
name|value
argument_list|,
name|delimiter
argument_list|,
name|set
argument_list|,
name|delete
argument_list|,
name|append
argument_list|,
name|remove
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openInEditor
parameter_list|(
name|Profile
name|profile
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|profile
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|location
init|=
name|id
operator|+
literal|" "
operator|+
name|resource
decl_stmt|;
comment|//Call the editor
name|ConsoleEditor
name|editor
init|=
name|editorFactory
operator|.
name|create
argument_list|(
literal|"simple"
argument_list|,
name|getTerminal
argument_list|()
argument_list|)
decl_stmt|;
name|editor
operator|.
name|setTitle
argument_list|(
literal|"Profile"
argument_list|)
expr_stmt|;
name|editor
operator|.
name|setOpenEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|editor
operator|.
name|setContentManager
argument_list|(
operator|new
name|DatastoreContentManager
argument_list|(
name|profileService
argument_list|)
argument_list|)
expr_stmt|;
name|editor
operator|.
name|open
argument_list|(
name|location
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|editor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|updatedDelimitedList
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|delimiter
parameter_list|,
name|boolean
name|set
parameter_list|,
name|boolean
name|delete
parameter_list|,
name|boolean
name|append
parameter_list|,
name|boolean
name|remove
parameter_list|)
block|{
if|if
condition|(
name|append
operator|||
name|remove
condition|)
block|{
name|String
name|oldValue
init|=
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|?
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|""
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|oldValue
operator|.
name|split
argument_list|(
name|delimiter
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//We need to remove any possible blanks.
name|parts
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|append
condition|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remove
condition|)
block|{
name|parts
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|set
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|set
parameter_list|,
name|boolean
name|delete
parameter_list|)
block|{
if|if
condition|(
name|set
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|delete
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Imports the pid to the target Map.      */
specifier|private
name|void
name|importPidFromLocalConfigAdmin
parameter_list|(
name|String
name|pid
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|target
parameter_list|)
block|{
try|try
block|{
name|Configuration
index|[]
name|configuration
init|=
name|configurationAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.pid="
operator|+
name|pid
operator|+
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
operator|&&
name|configuration
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Dictionary
name|dictionary
init|=
name|configuration
index|[
literal|0
index|]
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|Enumeration
name|keyEnumeration
init|=
name|dictionary
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|keyEnumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|keyEnumeration
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
comment|//file.install.filename needs to be skipped as it specific to the current container.
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|FILE_INSTALL_FILENAME_PROPERTY
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|dictionary
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|target
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error while importing configuration {} to profile."
argument_list|,
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Extracts Key value pairs from a delimited string of key value pairs.      * Note: The value may contain commas.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|extractConfigs
parameter_list|(
name|String
name|configs
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//If contains key values.
name|String
name|key
decl_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|configs
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|key
operator|=
name|configs
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|configs
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|configs
operator|.
name|substring
argument_list|(
name|configs
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
name|configs
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|key
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|configMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|configMap
return|;
block|}
comment|/**      * Gets the {@link jline.Terminal} from the current session.      */
specifier|private
name|jline
operator|.
name|Terminal
name|getTerminal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
return|return
operator|(
name|jline
operator|.
name|Terminal
operator|)
name|terminal
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getTerminal"
argument_list|)
operator|.
name|invoke
argument_list|(
name|terminal
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|new
name|TerminalSupport
argument_list|(
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
return|return
name|terminal
operator|.
name|getWidth
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHeight
parameter_list|()
block|{
return|return
name|terminal
operator|.
name|getHeight
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfigurationFromBuilder
parameter_list|(
name|ProfileBuilder
name|builder
parameter_list|,
name|String
name|pid
parameter_list|)
block|{
return|return
name|builder
operator|.
name|getConfiguration
argument_list|(
name|pid
argument_list|)
return|;
block|}
specifier|static
class|class
name|DatastoreContentManager
implements|implements
name|ContentManager
block|{
specifier|private
specifier|static
specifier|final
name|Charset
name|UTF_8
init|=
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProfileService
name|profileService
decl_stmt|;
specifier|public
name|DatastoreContentManager
parameter_list|(
name|ProfileService
name|profileService
parameter_list|)
block|{
name|this
operator|.
name|profileService
operator|=
name|profileService
expr_stmt|;
block|}
comment|/**          * Loads content from the specified location.          */
annotation|@
name|Override
specifier|public
name|String
name|load
parameter_list|(
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|String
index|[]
name|parts
init|=
name|location
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid location:"
operator|+
name|location
argument_list|)
throw|;
block|}
name|String
name|profileId
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|resource
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|Profile
name|profile
init|=
name|profileService
operator|.
name|getRequiredProfile
argument_list|(
name|profileId
argument_list|)
decl_stmt|;
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|profile
operator|.
name|getFileConfiguration
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read data from zookeeper."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**          * Saves content to the specified location.          */
annotation|@
name|Override
specifier|public
name|boolean
name|save
parameter_list|(
name|String
name|content
parameter_list|,
name|String
name|location
parameter_list|)
block|{
try|try
block|{
name|String
index|[]
name|parts
init|=
name|location
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid location:"
operator|+
name|location
argument_list|)
throw|;
block|}
name|String
name|profileId
init|=
name|parts
index|[
literal|0
index|]
decl_stmt|;
name|String
name|resource
init|=
name|parts
index|[
literal|1
index|]
decl_stmt|;
name|Profile
name|profile
init|=
name|profileService
operator|.
name|getRequiredProfile
argument_list|(
name|profileId
argument_list|)
decl_stmt|;
name|ProfileBuilder
name|builder
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|createFrom
argument_list|(
name|profile
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addFileConfiguration
argument_list|(
name|resource
argument_list|,
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|profileService
operator|.
name|updateProfile
argument_list|(
name|builder
operator|.
name|getProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**          * Saves the {@link String} content to the specified location using the specified {@link java.nio.charset.Charset}.          */
annotation|@
name|Override
specifier|public
name|boolean
name|save
parameter_list|(
name|String
name|content
parameter_list|,
name|Charset
name|charset
parameter_list|,
name|String
name|location
parameter_list|)
block|{
return|return
name|save
argument_list|(
name|content
argument_list|,
name|location
argument_list|)
return|;
block|}
comment|/**          * Detect the Charset of the content in the specified location.          */
annotation|@
name|Override
specifier|public
name|Charset
name|detectCharset
parameter_list|(
name|String
name|location
parameter_list|)
block|{
return|return
name|UTF_8
return|;
block|}
block|}
block|}
end_class

end_unit

