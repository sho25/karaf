begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|startlevel
operator|.
name|BundleStartLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_comment
comment|/**  * Fake bundle revision implementation for resolution simulations without OSGi.  */
end_comment

begin_class
specifier|public
class|class
name|FakeBundleRevision
extends|extends
name|ResourceImpl
implements|implements
name|BundleRevision
implements|,
name|BundleStartLevel
block|{
specifier|private
specifier|final
name|Bundle
name|bundle
decl_stmt|;
specifier|private
name|int
name|startLevel
decl_stmt|;
specifier|public
name|FakeBundleRevision
parameter_list|(
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|long
name|bundleId
parameter_list|)
throws|throws
name|BundleException
block|{
name|ResourceBuilder
operator|.
name|build
argument_list|(
name|this
argument_list|,
name|location
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|this
operator|.
name|bundle
operator|=
operator|(
name|Bundle
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Bundle
operator|.
name|class
block|}
argument_list|,
operator|new
name|BundleRevisionInvocationHandler
argument_list|(
name|headers
argument_list|,
name|location
argument_list|,
name|bundleId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStartLevel
parameter_list|()
block|{
return|return
name|startLevel
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStartLevel
parameter_list|(
name|int
name|startLevel
parameter_list|)
block|{
name|this
operator|.
name|startLevel
operator|=
name|startLevel
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistentlyStarted
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isActivationPolicyUsed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSymbolicName
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getSymbolicName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Version
name|getVersion
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BundleCapability
argument_list|>
name|getDeclaredCapabilities
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|BundleRequirement
argument_list|>
name|getDeclaredRequirements
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTypes
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|BundleWiring
name|getWiring
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Bundle
name|getBundle
parameter_list|()
block|{
return|return
name|bundle
return|;
block|}
specifier|private
class|class
name|BundleRevisionInvocationHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
decl_stmt|;
specifier|private
specifier|final
name|String
name|location
decl_stmt|;
specifier|private
specifier|final
name|long
name|bundleId
decl_stmt|;
specifier|public
name|BundleRevisionInvocationHandler
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|,
name|String
name|location
parameter_list|,
name|long
name|bundleId
parameter_list|)
block|{
name|this
operator|.
name|headers
operator|=
name|headers
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|bundleId
operator|=
name|bundleId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"hashCode"
argument_list|)
condition|)
block|{
return|return
name|FakeBundleRevision
operator|.
name|this
operator|.
name|hashCode
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"equals"
argument_list|)
condition|)
block|{
return|return
name|proxy
operator|==
name|args
index|[
literal|0
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"toString"
argument_list|)
condition|)
block|{
return|return
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"/"
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"adapt"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|args
index|[
literal|0
index|]
operator|==
name|BundleRevision
operator|.
name|class
condition|)
block|{
return|return
name|FakeBundleRevision
operator|.
name|this
return|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|args
index|[
literal|0
index|]
operator|==
name|BundleStartLevel
operator|.
name|class
condition|)
block|{
return|return
name|FakeBundleRevision
operator|.
name|this
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getHeaders"
argument_list|)
condition|)
block|{
return|return
name|headers
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getBundleId"
argument_list|)
condition|)
block|{
return|return
name|bundleId
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getLocation"
argument_list|)
condition|)
block|{
return|return
name|location
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getSymbolicName"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getVersion"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Version
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getState"
argument_list|)
condition|)
block|{
return|return
name|Bundle
operator|.
name|ACTIVE
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getLastModified"
argument_list|)
condition|)
block|{
return|return
literal|0l
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

