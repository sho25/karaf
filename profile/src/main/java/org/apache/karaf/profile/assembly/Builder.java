begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystemNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|ResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|LocationPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|JaxbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|processing
operator|.
name|FeaturesProcessing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|BaseRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Blacklist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Deployer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|FeaturesProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|FeaturesProcessorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Overrides
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|internal
operator|.
name|Kar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Profiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tools
operator|.
name|utils
operator|.
name|KarafPropertiesEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|tools
operator|.
name|utils
operator|.
name|model
operator|.
name|KarafPropertyEdits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|ThreadUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|config
operator|.
name|PropertiesLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|maven
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|net
operator|.
name|URLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolvers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|repository
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
operator|.
name|MANIFEST_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
operator|.
name|Builder
operator|.
name|Stage
operator|.
name|Startup
import|;
end_import

begin_comment
comment|/**  * A builder-like class to create instances of {@link Profile profiles}.  */
end_comment

begin_class
specifier|public
class|class
name|Builder
block|{
specifier|private
specifier|static
specifier|final
name|String
name|STATIC_FEATURES_KAR
init|=
literal|"mvn:org.apache.karaf.features/static/%s/kar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Builder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_REPOSITORIES
init|=
literal|"featuresRepositories"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_BOOT
init|=
literal|"featuresBoot"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIBRARY_CLAUSE_TYPE
init|=
literal|"type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIBRARY_CLAUSE_EXPORT
init|=
literal|"export"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIBRARY_CLAUSE_DELEGATE
init|=
literal|"delegate"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ORG_OPS4J_PAX_URL_MVN_PID
init|=
literal|"org.ops4j.pax.url.mvn"
decl_stmt|;
comment|/**      *<p>An indication of<em>stage</em> for bundles/features/repositories/kars/profiles.</p>      */
specifier|public
enum|enum
name|Stage
block|{
comment|/**          * Karaf runtime is in<em>startup</em> stage when it installs OSGi bundles into OSGi framework before          * passing this responsibility to {@link FeaturesService}. A list of bundles to install is defined          * in<code>${karaf.etc}/startup.properties</code>.          */
name|Startup
block|,
comment|/**          * Karaf runtime is in<em>boot</em> stage when it installs OSGi bundles using Karaf features. Features          * (and features XML repositories) are defined in<code>${karaf.etc}/org.apache.karaf.features.cfg</code>.          * Repositories and features available in startup stage should be<em>visible</em> in boot stage as well, as          * this is the stage where term<em>Karaf feature</em> gets its meaning.          */
name|Boot
block|,
comment|/**          *<em>Installed</em> stage is just a space where bundles and features may be installed after starting          * Karaf runtime (e.g., using Karaf shell commands, JMX or UI).          */
name|Installed
block|;
comment|/**          * Get a {@link Stage} corresponding to Maven scope.          * @param scope          * @return          */
specifier|public
specifier|static
name|Stage
name|fromMavenScope
parameter_list|(
name|String
name|scope
parameter_list|)
block|{
switch|switch
condition|(
name|scope
condition|)
block|{
case|case
literal|"compile"
case|:
return|return
name|Builder
operator|.
name|Stage
operator|.
name|Startup
return|;
case|case
literal|"runtime"
case|:
return|return
name|Builder
operator|.
name|Stage
operator|.
name|Boot
return|;
case|case
literal|"provided"
case|:
return|return
name|Builder
operator|.
name|Stage
operator|.
name|Installed
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
comment|/**      *<p>An identifiier of Karaf version<em>family</em>. Each version family may have special methods      * or requirements for generating/preparing configuration.</p>      */
specifier|public
enum|enum
name|KarafVersion
block|{
name|v24
block|,
name|v3x
block|,
name|v4x
block|}
comment|/**      *<p>An idenfifier for supported Java version. This version is used for example in      *<code>${karaf.etc}/jre.properties</code> to define system packages for given Java version. Only      * supported versions are defined.</p>      */
specifier|public
enum|enum
name|JavaVersion
block|{
name|Java16
argument_list|(
literal|"1.6"
argument_list|,
literal|1
argument_list|)
block|,
name|Java17
argument_list|(
literal|"1.7"
argument_list|,
literal|2
argument_list|)
block|,
name|Java18
argument_list|(
literal|"1.8"
argument_list|,
literal|3
argument_list|)
block|,
name|Java9
argument_list|(
literal|"9"
argument_list|,
literal|4
argument_list|)
block|;
specifier|private
name|String
name|version
decl_stmt|;
specifier|private
name|int
name|ordinal
decl_stmt|;
name|JavaVersion
parameter_list|(
name|String
name|version
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|ordinal
operator|=
name|ordinal
expr_stmt|;
block|}
specifier|public
specifier|static
name|JavaVersion
name|from
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|Optional
argument_list|<
name|JavaVersion
argument_list|>
name|v
init|=
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|jv
lambda|->
name|jv
operator|.
name|version
operator|.
name|equals
argument_list|(
name|version
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Java version \""
operator|+
name|version
operator|+
literal|"\" is not supported"
argument_list|)
throw|;
block|}
return|return
name|v
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|supportsEndorsedAndExtLibraries
parameter_list|()
block|{
return|return
name|this
operator|.
name|ordinal
operator|<
name|Java9
operator|.
name|ordinal
return|;
block|}
block|}
comment|/**      * TODOCUMENT      */
specifier|public
enum|enum
name|BlacklistPolicy
block|{
name|Discard
block|,
name|Fail
block|}
comment|/**      * Configuration of features XML repository (standalone or inside KAR).<code>addAll</code> may configure      * given repository to install all defined features if no explicit feature is specified.      */
specifier|static
class|class
name|RepositoryInfo
block|{
name|Stage
name|stage
decl_stmt|;
name|boolean
name|addAll
decl_stmt|;
specifier|public
name|RepositoryInfo
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|boolean
name|addAll
parameter_list|)
block|{
name|this
operator|.
name|stage
operator|=
name|stage
expr_stmt|;
name|this
operator|.
name|addAll
operator|=
name|addAll
expr_stmt|;
block|}
block|}
comment|/**      * Class similar to {@link FeaturePattern} but simplified for profile name matching      */
specifier|private
specifier|static
class|class
name|ProfileNamePattern
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Pattern
name|namePattern
decl_stmt|;
specifier|public
name|ProfileNamePattern
parameter_list|(
name|String
name|profileName
parameter_list|)
block|{
if|if
condition|(
name|profileName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Profile name to match should not be null"
argument_list|)
throw|;
block|}
name|name
operator|=
name|profileName
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|namePattern
operator|=
name|LocationPattern
operator|.
name|toRegExp
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Returns<code>if this feature pattern</code> matches given feature/version          * @param profileName          * @return          */
specifier|public
name|boolean
name|matches
parameter_list|(
name|String
name|profileName
parameter_list|)
block|{
if|if
condition|(
name|profileName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|namePattern
operator|!=
literal|null
condition|)
block|{
return|return
name|namePattern
operator|.
name|matcher
argument_list|(
name|profileName
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|name
operator|.
name|equals
argument_list|(
name|profileName
argument_list|)
return|;
block|}
block|}
block|}
comment|//
comment|// Input parameters
comment|//
name|List
argument_list|<
name|String
argument_list|>
name|profilesUris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|defaultAddAll
init|=
literal|true
decl_stmt|;
name|Stage
name|defaultStage
init|=
name|Stage
operator|.
name|Startup
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|kars
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|profiles
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|repositories
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|features
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|bundles
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedProfileNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedFeatureIdentifiers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedBundleURIs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedRepositoryURIs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BlacklistPolicy
name|blacklistPolicy
init|=
name|BlacklistPolicy
operator|.
name|Discard
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|libraries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|JavaVersion
name|javase
init|=
name|JavaVersion
operator|.
name|Java18
decl_stmt|;
name|KarafVersion
name|karafVersion
init|=
name|KarafVersion
operator|.
name|v4x
decl_stmt|;
name|String
name|environment
init|=
literal|null
decl_stmt|;
name|boolean
name|useReferenceUrls
decl_stmt|;
name|boolean
name|ignoreDependencyFlag
decl_stmt|;
name|int
name|defaultStartLevel
init|=
literal|50
decl_stmt|;
name|Path
name|homeDirectory
decl_stmt|;
name|Path
name|featuresProcessingLocation
decl_stmt|;
name|boolean
name|offline
decl_stmt|;
name|String
name|localRepository
decl_stmt|;
name|String
name|mavenRepositories
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|system
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pidsToExtract
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|writeProfiles
decl_stmt|;
name|String
name|generateConsistencyReport
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|executor
decl_stmt|;
specifier|private
name|DownloadManager
name|manager
decl_stmt|;
specifier|private
name|Resolver
name|resolver
decl_stmt|;
specifier|private
name|Path
name|etcDirectory
decl_stmt|;
specifier|private
name|Path
name|systemDirectory
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|allProfiles
decl_stmt|;
specifier|private
name|KarafPropertyEdits
name|propertyEdits
decl_stmt|;
specifier|private
name|FeaturesProcessing
name|featuresProcessing
init|=
operator|new
name|FeaturesProcessing
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|translatedUrls
decl_stmt|;
specifier|private
name|Blacklist
name|blacklist
decl_stmt|;
specifier|private
name|Function
argument_list|<
name|MavenResolver
argument_list|,
name|MavenResolver
argument_list|>
name|resolverWrapper
init|=
name|Function
operator|.
name|identity
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Builder
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Sets the {@link Stage} used by next builder invocations.      * @param stage      * @return      */
specifier|public
name|Builder
name|defaultStage
parameter_list|(
name|Stage
name|stage
parameter_list|)
block|{
name|this
operator|.
name|defaultStage
operator|=
name|stage
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets default<em>add all</em> flag for KARs and repositories.      * @param addAll      * @return      */
specifier|public
name|Builder
name|defaultAddAll
parameter_list|(
name|boolean
name|addAll
parameter_list|)
block|{
name|this
operator|.
name|defaultAddAll
operator|=
name|addAll
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure a list of profile URIs to be used for profile import      * @param profilesUri      * @return      */
specifier|public
name|Builder
name|profilesUris
parameter_list|(
name|String
modifier|...
name|profilesUri
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|profilesUris
argument_list|,
name|profilesUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure libraries to use. Each library may contain OSGi header-like directives:<code>type</code>,      *<code>url</code>,<code>export</code> and<code>delegate</code>.      * @param libraries      * @return      */
specifier|public
name|Builder
name|libraries
parameter_list|(
name|String
modifier|...
name|libraries
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|libraries
argument_list|,
name|libraries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure KARs to use at current {@link #defaultStage stage} with default<em>add all</em> flag      * @param kars      * @return      */
specifier|public
name|Builder
name|kars
parameter_list|(
name|String
modifier|...
name|kars
parameter_list|)
block|{
return|return
name|kars
argument_list|(
name|defaultStage
argument_list|,
name|defaultAddAll
argument_list|,
name|kars
argument_list|)
return|;
block|}
comment|/**      * Configure KARs to use at current {@link #defaultStage stage} with given<em>add all</em> flag      * @param addAll      * @param kars      * @return      */
specifier|public
name|Builder
name|kars
parameter_list|(
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|kars
parameter_list|)
block|{
return|return
name|kars
argument_list|(
name|defaultStage
argument_list|,
name|addAll
argument_list|,
name|kars
argument_list|)
return|;
block|}
comment|/**      * Configure KARs to use at given stage with given<em>add all</em> flag      * @param stage      * @param addAll      * @param kars      * @return      */
specifier|public
name|Builder
name|kars
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|kars
parameter_list|)
block|{
for|for
control|(
name|String
name|kar
range|:
name|kars
control|)
block|{
name|this
operator|.
name|kars
operator|.
name|put
argument_list|(
name|kar
argument_list|,
operator|new
name|RepositoryInfo
argument_list|(
name|stage
argument_list|,
name|addAll
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configure features XML repositories to use at current {@link #defaultStage stage} with default<em>add all</em> flag      * @param repositories      * @return      */
specifier|public
name|Builder
name|repositories
parameter_list|(
name|String
modifier|...
name|repositories
parameter_list|)
block|{
return|return
name|repositories
argument_list|(
name|defaultStage
argument_list|,
name|defaultAddAll
argument_list|,
name|repositories
argument_list|)
return|;
block|}
comment|/**      * Configure features XML repositories to use at current {@link #defaultStage stage} with given<em>add all</em> flag      * @param addAll      * @param repositories      * @return      */
specifier|public
name|Builder
name|repositories
parameter_list|(
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|repositories
parameter_list|)
block|{
return|return
name|repositories
argument_list|(
name|defaultStage
argument_list|,
name|addAll
argument_list|,
name|repositories
argument_list|)
return|;
block|}
comment|/**      * Configure features XML repositories to use at given stage with given<em>add all</em> flag      * @param stage      * @param addAll      * @param repositories      * @return      */
specifier|public
name|Builder
name|repositories
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|repositories
parameter_list|)
block|{
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
name|this
operator|.
name|repositories
operator|.
name|put
argument_list|(
name|repository
argument_list|,
operator|new
name|RepositoryInfo
argument_list|(
name|stage
argument_list|,
name|addAll
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configure features to use at current {@link #defaultStage stage}. Each feature may be specified as      *<code>name</code> or<code>name/version</code> (no version ranges allowed).      * @param features      * @return      */
specifier|public
name|Builder
name|features
parameter_list|(
name|String
modifier|...
name|features
parameter_list|)
block|{
return|return
name|features
argument_list|(
name|defaultStage
argument_list|,
name|features
argument_list|)
return|;
block|}
comment|/**      * Configure features to use at given stage. Each feature may be specified as<code>name</code> or      *<code>name/version</code> (no version ranges allowed).      * @param stage      * @param features      * @return      */
specifier|public
name|Builder
name|features
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|String
modifier|...
name|features
parameter_list|)
block|{
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|this
operator|.
name|features
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|stage
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configure bundle URIs to use at current {@link #defaultStage stage}.      * @param bundles      * @return      */
specifier|public
name|Builder
name|bundles
parameter_list|(
name|String
modifier|...
name|bundles
parameter_list|)
block|{
return|return
name|bundles
argument_list|(
name|defaultStage
argument_list|,
name|bundles
argument_list|)
return|;
block|}
comment|/**      * Configure bundle URIs to use at given stage.      * @param stage      * @param bundles      * @return      */
specifier|public
name|Builder
name|bundles
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|String
modifier|...
name|bundles
parameter_list|)
block|{
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|this
operator|.
name|bundles
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|stage
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configure profiles to use at current {@link #defaultStage stage}.      * @param profiles      * @return      */
specifier|public
name|Builder
name|profiles
parameter_list|(
name|String
modifier|...
name|profiles
parameter_list|)
block|{
return|return
name|profiles
argument_list|(
name|defaultStage
argument_list|,
name|profiles
argument_list|)
return|;
block|}
comment|/**      * Configure profiles to use at given stage.      * @param stage      * @param profiles      * @return      */
specifier|public
name|Builder
name|profiles
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|String
modifier|...
name|profiles
parameter_list|)
block|{
for|for
control|(
name|String
name|profile
range|:
name|profiles
control|)
block|{
name|this
operator|.
name|profiles
operator|.
name|put
argument_list|(
name|profile
argument_list|,
name|stage
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Configure target directory, where distribution is being assembled.      * @param homeDirectory      * @return      */
specifier|public
name|Builder
name|homeDirectory
parameter_list|(
name|Path
name|homeDirectory
parameter_list|)
block|{
if|if
condition|(
name|homeDirectory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"homeDirectory is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|homeDirectory
operator|=
name|homeDirectory
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure Java version to use. This version will be resolved in several property placeholders inside      *<code>${karaf.etc}/config.properties</code> and<code>${karaf.etc}/jre.properties</code>.      * @param javase      * @return      */
specifier|public
name|Builder
name|javase
parameter_list|(
name|String
name|javase
parameter_list|)
block|{
if|if
condition|(
name|javase
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"javase is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|javase
operator|=
name|JavaVersion
operator|.
name|from
argument_list|(
name|javase
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set environment to use that may be used to select different variant of PID configuration file, e.g.,      *<code>org.ops4j.pax.url.mvn.cfg#docker</code>.      * @param environment      * @return      */
specifier|public
name|Builder
name|environment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure builder to generate<code>reference:</code>-like URIs in<code>${karaf.etc}/startup.properties</code>.      * Bundles declared in this way are not copied (by Felix) to<code>data/cache</code> directory, but are      * used from original location.      * @return      */
specifier|public
name|Builder
name|useReferenceUrls
parameter_list|()
block|{
return|return
name|useReferenceUrls
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * Configure builder to use (when<code>true</code>)<code>reference:</code>-like URIs in      *<code>${karaf.etc}/startup.properties</code>.      * @param useReferenceUrls      * @return      */
specifier|public
name|Builder
name|useReferenceUrls
parameter_list|(
name|boolean
name|useReferenceUrls
parameter_list|)
block|{
name|this
operator|.
name|useReferenceUrls
operator|=
name|useReferenceUrls
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure builder to copy generated and configured profiles into<code>${karaf.etc}/profiles</code>      * directory.      * @param writeProfiles      */
specifier|public
name|void
name|writeProfiles
parameter_list|(
name|boolean
name|writeProfiles
parameter_list|)
block|{
name|this
operator|.
name|writeProfiles
operator|=
name|writeProfiles
expr_stmt|;
block|}
comment|/**      * Configure builder to generate consistency report      * @param generateConsistencyReport      */
specifier|public
name|void
name|generateConsistencyReport
parameter_list|(
name|String
name|generateConsistencyReport
parameter_list|)
block|{
name|this
operator|.
name|generateConsistencyReport
operator|=
name|generateConsistencyReport
expr_stmt|;
block|}
comment|/**      * Configure Karaf version to target. This impacts the way some configuration files are generated.      * @param karafVersion      * @return      */
specifier|public
name|Builder
name|karafVersion
parameter_list|(
name|KarafVersion
name|karafVersion
parameter_list|)
block|{
name|this
operator|.
name|karafVersion
operator|=
name|karafVersion
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets default start level for bundles declared in<code>${karaf.etc}/startup.properties</code>.      * @param defaultStartLevel      * @return      */
specifier|public
name|Builder
name|defaultStartLevel
parameter_list|(
name|int
name|defaultStartLevel
parameter_list|)
block|{
name|this
operator|.
name|defaultStartLevel
operator|=
name|defaultStartLevel
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      *<p>Configures custom location for a file with features processing instructions. Normally this file is generated      * by the builder if any of blacklisted options are configured.</p>      *<p>If custom location is provided and it's not<code>etc/org.apache.karaf.features.xml</code>, it is copied</p>      *<p>If custom location is provided and it's<code>etc/org.apache.karaf.features.xml</code>, it's left as is</p>      *<p>Any additional blacklisting/overrides configuration via Maven configuration causes overwrite of original      * content.</p>      * @param featuresProcessing      */
specifier|public
name|Builder
name|setFeaturesProcessing
parameter_list|(
name|Path
name|featuresProcessing
parameter_list|)
block|{
name|this
operator|.
name|featuresProcessingLocation
operator|=
name|featuresProcessing
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Ignore the dependency attribute (dependency="[true|false]") on bundles, effectively forcing their      * installation.      */
specifier|public
name|Builder
name|ignoreDependencyFlag
parameter_list|()
block|{
return|return
name|ignoreDependencyFlag
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * Configures builder to ignore (or not)<code>dependency</code> flag on bundles declared      * in features XML file.      * @param ignoreDependencyFlag      * @return      */
specifier|public
name|Builder
name|ignoreDependencyFlag
parameter_list|(
name|boolean
name|ignoreDependencyFlag
parameter_list|)
block|{
name|this
operator|.
name|ignoreDependencyFlag
operator|=
name|ignoreDependencyFlag
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures builder to use offline pax-url-aether resolver      * @return      */
specifier|public
name|Builder
name|offline
parameter_list|()
block|{
return|return
name|offline
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * Configures whether pax-url-aether resolver should work in offline mode      * @param offline      * @return      */
specifier|public
name|Builder
name|offline
parameter_list|(
name|boolean
name|offline
parameter_list|)
block|{
name|this
operator|.
name|offline
operator|=
name|offline
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures local Maven repository to use by pax-url-aether. By default, assembly mojo sets the value      * read from current Maven build.      * @param localRepository      * @return      */
specifier|public
name|Builder
name|localRepository
parameter_list|(
name|String
name|localRepository
parameter_list|)
block|{
name|this
operator|.
name|localRepository
operator|=
name|localRepository
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures comma-separated list of remote Maven repositories to use by pax-url-aether.      * By default, assembly mojo sets the repositories from current Maven build.      * @param mavenRepositories      * @return      */
specifier|public
name|Builder
name|mavenRepositories
parameter_list|(
name|String
name|mavenRepositories
parameter_list|)
block|{
name|this
operator|.
name|mavenRepositories
operator|=
name|mavenRepositories
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures a function that may alter/replace {@link MavenResolver} used to resolve<code>mvn:</code> URIs.      * @param wrapper      * @return      */
specifier|public
name|Builder
name|resolverWrapper
parameter_list|(
name|Function
argument_list|<
name|MavenResolver
argument_list|,
name|MavenResolver
argument_list|>
name|wrapper
parameter_list|)
block|{
name|this
operator|.
name|resolverWrapper
operator|=
name|wrapper
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Short-hand builder configuration to use standard Karaf static KAR at current Karaf version      * @return      */
specifier|public
name|Builder
name|staticFramework
parameter_list|()
block|{
return|return
name|staticFramework
argument_list|(
name|Version
operator|.
name|karafVersion
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Short-hand builder configuration to use standard Karaf static KAR at given Karaf version      * @param version      * @return      */
specifier|public
name|Builder
name|staticFramework
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|String
name|staticFeaturesKar
init|=
name|String
operator|.
name|format
argument_list|(
name|STATIC_FEATURES_KAR
argument_list|,
name|version
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|defaultStage
argument_list|(
name|Startup
argument_list|)
operator|.
name|useReferenceUrls
argument_list|()
operator|.
name|kars
argument_list|(
name|Startup
argument_list|,
literal|true
argument_list|,
name|staticFeaturesKar
argument_list|)
return|;
block|}
comment|/**      * Configure a list of blacklisted profile names (possibly using<code>*</code> glob)      * @param profiles      * @return      */
specifier|public
name|Builder
name|blacklistProfiles
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|profiles
parameter_list|)
block|{
name|this
operator|.
name|blacklistedProfileNames
operator|.
name|addAll
argument_list|(
name|profiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure a list of blacklisted feature names (see {@link FeaturePattern})      * @param features      * @return      */
specifier|public
name|Builder
name|blacklistFeatures
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|features
parameter_list|)
block|{
name|this
operator|.
name|blacklistedFeatureIdentifiers
operator|.
name|addAll
argument_list|(
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure a list of blacklisted bundle URIs (see {@link LocationPattern})      * @param bundles      * @return      */
specifier|public
name|Builder
name|blacklistBundles
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|bundles
parameter_list|)
block|{
name|this
operator|.
name|blacklistedBundleURIs
operator|.
name|addAll
argument_list|(
name|bundles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configure a list of blacklisted features XML repository URIs (see {@link LocationPattern})      * @param repositories      * @return      */
specifier|public
name|Builder
name|blacklistRepositories
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|)
block|{
name|this
operator|.
name|blacklistedRepositoryURIs
operator|.
name|addAll
argument_list|(
name|repositories
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * TODOCUMENT      * @param policy      * @return      */
specifier|public
name|Builder
name|blacklistPolicy
parameter_list|(
name|BlacklistPolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|blacklistPolicy
operator|=
name|policy
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Specify a set of edits to apply when moving etc files.      * @param propertyEdits the edits.      * @return this.      */
specifier|public
name|Builder
name|propertyEdits
parameter_list|(
name|KarafPropertyEdits
name|propertyEdits
parameter_list|)
block|{
name|this
operator|.
name|propertyEdits
operator|=
name|propertyEdits
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures a list of PIDs (or PID patterns) to copy to<code>${karaf.etc}</code> from features, when      * assembling a distribution      * @param pidsToExtract      * @return      */
specifier|public
name|Builder
name|pidsToExtract
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|pidsToExtract
parameter_list|)
block|{
if|if
condition|(
name|pidsToExtract
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|pid
range|:
name|pidsToExtract
control|)
block|{
name|this
operator|.
name|pidsToExtract
operator|.
name|add
argument_list|(
name|pid
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Specify a set of url mappings to use instead of      * downloading from the original urls.      * @param translatedUrls the urls translations.      * @return this.      */
specifier|public
name|Builder
name|translatedUrls
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|translatedUrls
parameter_list|)
block|{
name|this
operator|.
name|translatedUrls
operator|=
name|translatedUrls
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures additional properties to add to<code>${karaf.etc}/config.properties</code>      * @param key      * @param value      * @return      */
specifier|public
name|Builder
name|config
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Configures additional properties to add to<code>${karaf.etc}/system.properties</code>      * @param key      * @param value      * @return      */
specifier|public
name|Builder
name|system
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|system
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlacklistedProfileNames
parameter_list|()
block|{
return|return
name|blacklistedProfileNames
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlacklistedFeatureIdentifiers
parameter_list|()
block|{
return|return
name|blacklistedFeatureIdentifiers
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlacklistedBundleURIs
parameter_list|()
block|{
return|return
name|blacklistedBundleURIs
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlacklistedRepositoryURIs
parameter_list|()
block|{
return|return
name|blacklistedRepositoryURIs
return|;
block|}
specifier|public
name|BlacklistPolicy
name|getBlacklistPolicy
parameter_list|()
block|{
return|return
name|blacklistPolicy
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPidsToExtract
parameter_list|()
block|{
return|return
name|pidsToExtract
return|;
block|}
comment|/**      * Main method to generate custom Karaf distribution using configuration provided with builder-like methods.      * @throws Exception      */
specifier|public
name|void
name|generateAssembly
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|javase
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"javase is not set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|homeDirectory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"homeDirectory is not set"
argument_list|)
throw|;
block|}
try|try
block|{
name|executor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|8
argument_list|,
name|ThreadUtils
operator|.
name|namedThreadFactory
argument_list|(
literal|"builder"
argument_list|)
argument_list|)
expr_stmt|;
name|systemDirectory
operator|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
literal|"system"
argument_list|)
expr_stmt|;
name|etcDirectory
operator|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
literal|"etc"
argument_list|)
expr_stmt|;
name|doGenerateAssembly
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doGenerateAssembly
parameter_list|()
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Generating Karaf assembly: "
operator|+
name|homeDirectory
argument_list|)
expr_stmt|;
comment|//
comment|// Create download manager - combination of pax-url-aether and a resolver wrapper that may
comment|// alter the way pax-url-aether resolver works
comment|//
name|MavenResolver
name|resolver
init|=
name|createMavenResolver
argument_list|()
decl_stmt|;
name|manager
operator|=
operator|new
name|CustomDownloadManager
argument_list|(
name|resolver
argument_list|,
name|executor
argument_list|,
literal|null
argument_list|,
name|translatedUrls
argument_list|)
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
operator|new
name|ResolverImpl
argument_list|(
operator|new
name|Slf4jResolverLog
argument_list|(
name|LOGGER
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Unzip KARs
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Unzipping kars"
argument_list|)
expr_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|kar
range|:
name|kars
operator|.
name|keySet
argument_list|()
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|kar
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// each KAR is extracted and all features XML repositories found there are added to the same
comment|// stage as the KAR and with the same "add all" flag as the KAR itself
for|for
control|(
name|String
name|karUri
range|:
name|kars
operator|.
name|keySet
argument_list|()
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   processing KAR: "
operator|+
name|karUri
argument_list|)
expr_stmt|;
name|Kar
name|kar
init|=
operator|new
name|Kar
argument_list|(
name|manager
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
name|karUri
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|kar
operator|.
name|extract
argument_list|(
name|systemDirectory
operator|.
name|toFile
argument_list|()
argument_list|,
name|homeDirectory
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryInfo
name|info
init|=
name|kars
operator|.
name|get
argument_list|(
name|karUri
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|repositoryUri
range|:
name|kar
operator|.
name|getFeatureRepos
argument_list|()
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      found repository: "
operator|+
name|repositoryUri
argument_list|)
expr_stmt|;
name|repositories
operator|.
name|put
argument_list|(
name|repositoryUri
operator|.
name|toString
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Load profiles
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Loading profiles from:"
argument_list|)
expr_stmt|;
name|profilesUris
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   "
operator|+
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|allProfiles
operator|=
name|loadExternalProfiles
argument_list|(
name|profilesUris
argument_list|)
expr_stmt|;
if|if
condition|(
name|allProfiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   Found profiles: "
operator|+
name|allProfiles
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Generate initial profile to collect overrides and blacklisting instructions
name|Profile
name|initialProfile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
literal|"initial"
argument_list|)
operator|.
name|setParents
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|profiles
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|initialOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|initialProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|initialEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|initialOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//
comment|// Handle blacklist - we'll use SINGLE instance of Blacklist for all further downloads
comment|//
name|blacklist
operator|=
name|processBlacklist
argument_list|(
name|initialEffective
argument_list|)
expr_stmt|;
comment|//
comment|// Configure blacklisting and overriding features processor
comment|//
name|boolean
name|needFeaturesProcessorFileCopy
init|=
literal|false
decl_stmt|;
name|String
name|existingProcessorDefinitionURI
init|=
literal|null
decl_stmt|;
name|Path
name|existingProcessorDefinition
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"org.apache.karaf.features.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingProcessorDefinition
operator|.
name|toFile
argument_list|()
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|existingProcessorDefinitionURI
operator|=
name|existingProcessorDefinition
operator|.
name|toFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Found existing features processor configuration: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|existingProcessorDefinition
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|featuresProcessingLocation
operator|!=
literal|null
operator|&&
name|featuresProcessingLocation
operator|.
name|toFile
argument_list|()
operator|.
name|isFile
argument_list|()
operator|&&
operator|!
name|featuresProcessingLocation
operator|.
name|equals
argument_list|(
name|existingProcessorDefinition
argument_list|)
condition|)
block|{
if|if
condition|(
name|existingProcessorDefinitionURI
operator|!=
literal|null
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Explicitly configured {} will be used for features processor configuration."
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|featuresProcessingLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Found features processor configuration: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|featuresProcessingLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|existingProcessorDefinitionURI
operator|=
name|featuresProcessingLocation
operator|.
name|toFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// when there are no other (configured via Maven for example) processing instructions (e.g., blacklisting)
comment|// we don't have to generate this file and may take original content
name|needFeaturesProcessorFileCopy
operator|=
literal|true
expr_stmt|;
block|}
comment|// now we can configure blacklisting features processor which may have already defined (in XML)
comment|// configuration for bundle replacements or feature overrides.
name|FeaturesProcessorImpl
name|processor
init|=
operator|new
name|FeaturesProcessorImpl
argument_list|(
name|existingProcessorDefinitionURI
argument_list|,
literal|null
argument_list|,
name|blacklist
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
comment|// add overrides from initialProfile
name|Set
argument_list|<
name|String
argument_list|>
name|overrides
init|=
name|processOverrides
argument_list|(
name|initialEffective
operator|.
name|getOverrides
argument_list|()
argument_list|)
decl_stmt|;
name|processor
operator|.
name|addOverrides
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
comment|//
comment|// Propagate feature installation from repositories
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Loading repositories"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|karRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|repositories
operator|.
name|keySet
argument_list|()
argument_list|,
literal|false
argument_list|,
name|processor
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
name|repositories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|RepositoryInfo
name|info
init|=
name|repositories
operator|.
name|get
argument_list|(
name|repo
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|addAll
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   adding all non-blacklisted features from repository: "
operator|+
name|repo
operator|+
literal|" (stage: "
operator|+
name|info
operator|.
name|stage
operator|+
literal|")"
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|karRepositories
operator|.
name|get
argument_list|(
name|repo
argument_list|)
operator|.
name|getFeature
argument_list|()
control|)
block|{
if|if
condition|(
name|feature
operator|.
name|isBlacklisted
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      feature {}/{} is blacklisted - skipping."
argument_list|,
name|feature
operator|.
name|getId
argument_list|()
argument_list|,
name|feature
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|features
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|,
name|info
operator|.
name|stage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|generateConsistencyReport
operator|!=
literal|null
condition|)
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|generateConsistencyReport
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Writing bundle report"
argument_list|)
expr_stmt|;
name|generateConsistencyReport
argument_list|(
name|karRepositories
argument_list|,
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"bundle-report-full.xml"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateConsistencyReport
argument_list|(
name|karRepositories
argument_list|,
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"bundle-report.xml"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"/bundle-report.xslt"
argument_list|)
argument_list|,
name|directory
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"bundle-report.xslt"
argument_list|)
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Generate profiles. If user has configured additional profiles, they'll be used as parents
comment|// of the generated ones.
comment|//
name|Profile
name|startupProfile
init|=
name|generateProfile
argument_list|(
name|Stage
operator|.
name|Startup
argument_list|,
name|profiles
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
name|allProfiles
operator|.
name|put
argument_list|(
name|startupProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|startupProfile
argument_list|)
expr_stmt|;
comment|// generated startup profile should be used (together with configured startup and boot profiles) as parent
comment|// of the generated boot profile - similar visibility rule (boot stage requires startup stage) is applied
comment|// for repositories and features
name|profiles
operator|.
name|put
argument_list|(
name|startupProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|Stage
operator|.
name|Boot
argument_list|)
expr_stmt|;
name|Profile
name|bootProfile
init|=
name|generateProfile
argument_list|(
name|Stage
operator|.
name|Boot
argument_list|,
name|profiles
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
name|allProfiles
operator|.
name|put
argument_list|(
name|bootProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|bootProfile
argument_list|)
expr_stmt|;
name|Profile
name|installedProfile
init|=
name|generateProfile
argument_list|(
name|Stage
operator|.
name|Installed
argument_list|,
name|profiles
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
name|allProfiles
operator|.
name|put
argument_list|(
name|installedProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|installedProfile
argument_list|)
expr_stmt|;
comment|//
comment|// Compute "overlay" profile - a single profile with all parent profiles included (when there's the same
comment|// file in both profiles, parent profile's version has lower priority)
comment|//
name|ProfileBuilder
name|builder
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setParents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|startupProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|bootProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|installedProfile
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|config
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|Profile
operator|.
name|CONFIG_PREFIX
operator|+
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|system
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|builder
operator|.
name|addConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|,
name|Profile
operator|.
name|SYSTEM_PREFIX
operator|+
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
comment|// profile with all the parents configured and stage-agnostic blacklisting configuration added
name|blacklistedRepositoryURIs
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|addBlacklistedRepository
argument_list|)
expr_stmt|;
name|blacklistedFeatureIdentifiers
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|addBlacklistedFeature
argument_list|)
expr_stmt|;
name|blacklistedBundleURIs
operator|.
name|forEach
argument_list|(
name|builder
operator|::
name|addBlacklistedBundle
argument_list|)
expr_stmt|;
comment|// final profilep
name|Profile
name|overallProfile
init|=
name|builder
operator|.
name|getProfile
argument_list|()
decl_stmt|;
comment|// profile with parents included and "flattened" using inheritance rules (child files overwrite parent
comment|// files and child PIDs are merged with parent PIDs and same properties are taken from child profiles)
name|Profile
name|overallOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|overallProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
comment|// profile with property placeholders resolved or left unchanged (if there's no property value available,
comment|// so property placeholders are preserved - like ${karaf.base})
name|Profile
name|overallEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|overallOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeProfiles
condition|)
block|{
name|Path
name|profiles
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"profiles"
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Adding profiles to {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|profiles
argument_list|)
argument_list|)
expr_stmt|;
name|allProfiles
operator|.
name|forEach
argument_list|(
parameter_list|(
name|id
parameter_list|,
name|profile
parameter_list|)
lambda|->
block|{
try|try
block|{
name|Profiles
operator|.
name|writeProfile
argument_list|(
name|profiles
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Problem writing profile {}: {}"
argument_list|,
name|id
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|manager
operator|=
operator|new
name|CustomDownloadManager
argument_list|(
name|resolver
argument_list|,
name|executor
argument_list|,
name|overallEffective
argument_list|,
name|translatedUrls
argument_list|)
expr_stmt|;
comment|//        Hashtable<String, String> profileProps = new Hashtable<>(overallEffective.getConfiguration(ORG_OPS4J_PAX_URL_MVN_PID));
comment|//        final Map<String, String> properties = new HashMap<>();
comment|//        properties.put("karaf.default.repository", "system");
comment|//        InterpolationHelper.performSubstitution(profileProps, properties::get, false, false, true);
comment|//
comment|// Write config and system properties
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Configuring etc/config.properties and etc/system.properties"
argument_list|)
expr_stmt|;
name|Path
name|configPropertiesPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"config.properties"
argument_list|)
decl_stmt|;
name|Properties
name|configProperties
init|=
operator|new
name|Properties
argument_list|(
name|configPropertiesPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|configProperties
operator|.
name|putAll
argument_list|(
name|overallEffective
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|configProperties
operator|.
name|save
argument_list|()
expr_stmt|;
name|Path
name|systemPropertiesPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"system.properties"
argument_list|)
decl_stmt|;
name|Properties
name|systemProperties
init|=
operator|new
name|Properties
argument_list|(
name|systemPropertiesPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|systemProperties
operator|.
name|putAll
argument_list|(
name|overallEffective
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|systemProperties
operator|.
name|save
argument_list|()
expr_stmt|;
comment|//
comment|// Download libraries
comment|//
comment|// TODO: handle karaf 2.x and 3.x libraries
name|downloader
operator|=
name|manager
operator|.
name|createDownloader
argument_list|()
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Downloading libraries for generated profiles"
argument_list|)
expr_stmt|;
name|downloadLibraries
argument_list|(
name|downloader
argument_list|,
name|configProperties
argument_list|,
name|overallEffective
operator|.
name|getLibraries
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Downloading additional libraries"
argument_list|)
expr_stmt|;
name|downloadLibraries
argument_list|(
name|downloader
argument_list|,
name|configProperties
argument_list|,
name|libraries
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Reformat clauses
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|)
expr_stmt|;
name|configProperties
operator|.
name|save
argument_list|()
expr_stmt|;
comment|//
comment|// Write all configuration files
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Writing configurations"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|config
range|:
name|overallEffective
operator|.
name|getFileConfigurations
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|configFile
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
name|config
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   adding config file: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|configFile
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|configFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 'improve' configuration files.
if|if
condition|(
name|propertyEdits
operator|!=
literal|null
condition|)
block|{
name|KarafPropertiesEditor
name|editor
init|=
operator|new
name|KarafPropertiesEditor
argument_list|()
decl_stmt|;
name|editor
operator|.
name|setInputEtc
argument_list|(
name|etcDirectory
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|setOutputEtc
argument_list|(
name|etcDirectory
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|setEdits
argument_list|(
name|propertyEdits
argument_list|)
expr_stmt|;
name|editor
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|.
name|hasInstructions
argument_list|()
condition|)
block|{
name|Path
name|featuresProcessingXml
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"org.apache.karaf.features.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasOwnInstructions
argument_list|()
operator|||
name|overrides
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// just generate new etc/org.apache.karaf.features.xml file (with external config + builder config)
try|try
init|(
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|featuresProcessingXml
operator|.
name|toFile
argument_list|()
argument_list|)
init|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Generating features processor configuration: {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|featuresProcessingXml
argument_list|)
argument_list|)
expr_stmt|;
name|processor
operator|.
name|writeInstructions
argument_list|(
name|fos
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|needFeaturesProcessorFileCopy
condition|)
block|{
comment|// we may simply copy configured features processor XML configuration
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Copying features processor configuration: {} -> {}"
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|featuresProcessingLocation
argument_list|)
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|featuresProcessingXml
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|featuresProcessingLocation
argument_list|,
name|featuresProcessingXml
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Startup stage
comment|//
name|Profile
name|startupEffective
init|=
name|startupStage
argument_list|(
name|startupProfile
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|//
comment|// Boot stage
comment|//
name|Set
argument_list|<
name|Feature
argument_list|>
name|allBootFeatures
init|=
name|bootStage
argument_list|(
name|bootProfile
argument_list|,
name|startupEffective
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|//
comment|// Installed stage
comment|//
name|installStage
argument_list|(
name|installedProfile
argument_list|,
name|allBootFeatures
argument_list|,
name|processor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Produces human readable XML with<em>feature consistency report</em>.      * @param repositories      * @param result      */
specifier|public
name|void
name|generateConsistencyReport
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|repositories
parameter_list|,
name|File
name|result
parameter_list|,
name|boolean
name|full
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|featureId2repository
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// list of feature IDs containing given bundle URIs
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|bundle2featureId
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|URIAwareComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// map of groupId/artifactId to full URI list to detect "duplicates"
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|ga2uri
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|haveDuplicates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// collect closure of bundles and features
name|repositories
operator|.
name|forEach
argument_list|(
parameter_list|(
name|name
parameter_list|,
name|features
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|full
operator|||
operator|!
name|features
operator|.
name|isBlacklisted
argument_list|()
condition|)
block|{
name|features
operator|.
name|getFeature
argument_list|()
operator|.
name|forEach
argument_list|(
name|feature
lambda|->
block|{
if|if
condition|(
name|full
operator|||
operator|!
name|feature
operator|.
name|isBlacklisted
argument_list|()
condition|)
block|{
name|featureId2repository
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|feature
operator|.
name|getBundle
argument_list|()
operator|.
name|forEach
argument_list|(
name|bundle
lambda|->
block|{
comment|// normal bundles of feature
name|bundle2featureId
operator|.
name|computeIfAbsent
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|TreeSet
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|feature
operator|.
name|getConditional
argument_list|()
operator|.
name|forEach
argument_list|(
name|cond
lambda|->
block|{
name|cond
operator|.
name|asFeature
argument_list|()
operator|.
name|getBundles
argument_list|()
operator|.
name|forEach
argument_list|(
name|bundle
lambda|->
block|{
comment|// conditional bundles of feature
name|bundle2featureId
operator|.
name|computeIfAbsent
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|k
lambda|->
operator|new
name|TreeSet
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// collect bundle URIs - for now, only wrap:mvn: and mvn: are interesting
name|bundle2featureId
operator|.
name|keySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|uri
lambda|->
block|{
name|String
name|originalUri
init|=
name|uri
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"wrap:mvn:"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|.
name|indexOf
argument_list|(
literal|"$"
argument_list|)
operator|>
literal|0
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri
operator|.
name|indexOf
argument_list|(
literal|"$"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
try|try
block|{
name|LocationPattern
name|pattern
init|=
operator|new
name|LocationPattern
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|String
name|ga
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s"
argument_list|,
name|pattern
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|pattern
operator|.
name|getArtifactId
argument_list|()
argument_list|)
decl_stmt|;
name|ga2uri
operator|.
name|computeIfAbsent
argument_list|(
name|ga
argument_list|,
name|k
lambda|->
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|originalUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignored
parameter_list|)
block|{
comment|/*<!-- hibernate-validator-osgi-karaf-features-5.3.4.Final-features.xml --><feature name="hibernate-validator-paranamer" version="5.3.4.Final"><feature>hibernate-validator</feature><bundle>wrap:mvn:com.thoughtworks.paranamer:paranamer:2.8</bundle></feature>                      */
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ga2uri
operator|.
name|values
argument_list|()
operator|.
name|forEach
argument_list|(
name|l
lambda|->
block|{
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|haveDuplicates
operator|.
name|addAll
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
init|(
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|result
argument_list|)
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<?xml-stylesheet type=\"text/xsl\" href=\"bundle-report.xslt\"?>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<consistency-report xmlns=\"urn:apache:karaf:consistency:1.0\">\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<duplicates>\n"
argument_list|)
expr_stmt|;
name|ga2uri
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|uris
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|uris
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<duplicate ga=\"%s\">\n"
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|uris
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<bundle uri=\"%s\">\n"
argument_list|,
name|sanitize
argument_list|(
name|uri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fid
range|:
name|bundle2featureId
operator|.
name|get
argument_list|(
name|uri
argument_list|)
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<feature repository=\"%s\">%s</feature>\n"
argument_list|,
name|featureId2repository
operator|.
name|get
argument_list|(
name|fid
argument_list|)
argument_list|,
name|fid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</bundle>\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</duplicate>\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                     }
block|}
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</duplicates>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"<bundles>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|uri
range|:
name|bundle2featureId
operator|.
name|keySet
argument_list|()
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<bundle uri=\"%s\" duplicate=\"%b\">\n"
argument_list|,
name|sanitize
argument_list|(
name|uri
argument_list|)
argument_list|,
name|haveDuplicates
operator|.
name|contains
argument_list|(
name|uri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fid
range|:
name|bundle2featureId
operator|.
name|get
argument_list|(
name|uri
argument_list|)
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"<feature>%s</feature>\n"
argument_list|,
name|fid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</bundle>\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
literal|"</bundles>\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</consistency-report>\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Sanitize before putting to XML      * @param uri      * @return      */
specifier|public
name|String
name|sanitize
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|uri
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|"&amp;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|">"
argument_list|,
literal|"&lt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"<"
argument_list|,
literal|"&gt;"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|"&quot;"
argument_list|)
return|;
block|}
comment|/**      * Similar to {@link FeaturesProcessorImpl#hasInstructions()}, we check if there are any builder configuration      * options for blacklisted repos/features/bundles or overwrites.      * @return      */
specifier|private
name|boolean
name|hasOwnInstructions
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|count
operator|+=
name|blacklistedRepositoryURIs
operator|.
name|size
argument_list|()
expr_stmt|;
name|count
operator|+=
name|blacklistedFeatureIdentifiers
operator|.
name|size
argument_list|()
expr_stmt|;
name|count
operator|+=
name|blacklistedBundleURIs
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|count
operator|>
literal|0
return|;
block|}
comment|/**      * Checks existing (etc/overrides.properties) and configured (in profiles) overrides definitions      * @param profileOverrides      * @return      */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|processOverrides
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|profileOverrides
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|existingOverridesLocation
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"overrides.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingOverridesLocation
operator|.
name|toFile
argument_list|()
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Found {} which is deprecated, please use new feature processor configuration."
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|existingOverridesLocation
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|Overrides
operator|.
name|loadOverrides
argument_list|(
name|existingOverridesLocation
operator|.
name|toFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|addAll
argument_list|(
name|profileOverrides
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Checks existing and configured blacklisting definitions      * @param initialProfile      * @return      * @throws IOException      */
specifier|private
name|Blacklist
name|processBlacklist
parameter_list|(
name|Profile
name|initialProfile
parameter_list|)
throws|throws
name|IOException
block|{
name|Blacklist
name|existingBlacklist
init|=
literal|null
decl_stmt|;
name|Blacklist
name|blacklist
init|=
operator|new
name|Blacklist
argument_list|()
decl_stmt|;
name|Path
name|existingBLacklistedLocation
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"blacklisted.properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingBLacklistedLocation
operator|.
name|toFile
argument_list|()
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Found {} which is deprecated, please use new feature processor configuration."
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|existingBLacklistedLocation
argument_list|)
argument_list|)
expr_stmt|;
name|existingBlacklist
operator|=
operator|new
name|Blacklist
argument_list|(
name|Files
operator|.
name|readAllLines
argument_list|(
name|existingBLacklistedLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|br
range|:
name|blacklistedRepositoryURIs
control|)
block|{
comment|// from Maven/Builder configuration
try|try
block|{
name|blacklist
operator|.
name|blacklistRepository
argument_list|(
operator|new
name|LocationPattern
argument_list|(
name|br
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Blacklisted features XML repository URI is invalid: {}, ignoring"
argument_list|,
name|br
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|LocationPattern
name|br
range|:
name|initialProfile
operator|.
name|getBlacklistedRepositories
argument_list|()
control|)
block|{
comment|// from profile configuration
name|blacklist
operator|.
name|blacklistRepository
argument_list|(
name|br
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|bf
range|:
name|blacklistedFeatureIdentifiers
control|)
block|{
comment|// from Maven/Builder configuration
name|blacklist
operator|.
name|blacklistFeature
argument_list|(
operator|new
name|FeaturePattern
argument_list|(
name|bf
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeaturePattern
name|bf
range|:
name|initialProfile
operator|.
name|getBlacklistedFeatures
argument_list|()
control|)
block|{
comment|// from profile configuration
name|blacklist
operator|.
name|blacklistFeature
argument_list|(
name|bf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|bb
range|:
name|blacklistedBundleURIs
control|)
block|{
comment|// from Maven/Builder configuration
try|try
block|{
name|blacklist
operator|.
name|blacklistBundle
argument_list|(
operator|new
name|LocationPattern
argument_list|(
name|bb
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Blacklisted bundle URI is invalid: {}, ignoring"
argument_list|,
name|bb
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|LocationPattern
name|bb
range|:
name|initialProfile
operator|.
name|getBlacklistedBundles
argument_list|()
control|)
block|{
comment|// from profile configuration
name|blacklist
operator|.
name|blacklistBundle
argument_list|(
name|bb
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existingBlacklist
operator|!=
literal|null
condition|)
block|{
name|blacklist
operator|.
name|merge
argument_list|(
name|existingBlacklist
argument_list|)
expr_stmt|;
block|}
return|return
name|blacklist
return|;
block|}
specifier|private
name|MavenResolver
name|createMavenResolver
parameter_list|()
block|{
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|offline
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ORG_OPS4J_PAX_URL_MVN_PID
operator|+
literal|"offline"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localRepository
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ORG_OPS4J_PAX_URL_MVN_PID
operator|+
literal|".localRepository"
argument_list|,
name|localRepository
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mavenRepositories
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ORG_OPS4J_PAX_URL_MVN_PID
operator|+
literal|".repositories"
argument_list|,
name|mavenRepositories
argument_list|)
expr_stmt|;
block|}
name|MavenResolver
name|resolver
init|=
name|MavenResolvers
operator|.
name|createMavenResolver
argument_list|(
name|props
argument_list|,
name|ORG_OPS4J_PAX_URL_MVN_PID
argument_list|)
decl_stmt|;
return|return
name|resolverWrapper
operator|.
name|apply
argument_list|(
name|resolver
argument_list|)
return|;
block|}
comment|/**      * Loads all profiles declared in profile URIs. These will be used in addition to generated      *<em>startup</em>,<em>boot</em> and<em>installed</em> profiles.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|loadExternalProfiles
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|profilesUris
parameter_list|)
throws|throws
name|IOException
throws|,
name|MultiException
throws|,
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|profiles
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|filteredProfiles
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|profilesUri
range|:
name|profilesUris
control|)
block|{
name|String
name|uri
init|=
name|profilesUri
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
operator|&&
name|uri
operator|.
name|contains
argument_list|(
literal|"!/"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|"jar:"
operator|.
name|length
argument_list|()
argument_list|,
name|uri
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
name|downloader
operator|.
name|download
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
name|StreamProvider
name|provider
init|=
name|manager
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|profilesUri
operator|=
name|profilesUri
operator|.
name|replace
argument_list|(
name|uri
argument_list|,
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URI
name|profileURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|profilesUri
argument_list|)
decl_stmt|;
name|Path
name|profilePath
decl_stmt|;
try|try
block|{
name|profilePath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|profileURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileSystemNotFoundException
name|e
parameter_list|)
block|{
comment|// file system does not exist, try to create it
name|FileSystem
name|fs
init|=
name|FileSystems
operator|.
name|newFileSystem
argument_list|(
name|profileURI
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|Builder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|profilePath
operator|=
name|fs
operator|.
name|provider
argument_list|()
operator|.
name|getPath
argument_list|(
name|profileURI
argument_list|)
expr_stmt|;
block|}
name|profiles
operator|.
name|putAll
argument_list|(
name|Profiles
operator|.
name|loadProfiles
argument_list|(
name|profilePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Handle blacklisted profiles
name|List
argument_list|<
name|ProfileNamePattern
argument_list|>
name|blacklistedProfilePatterns
init|=
name|blacklistedProfileNames
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ProfileNamePattern
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|profileName
range|:
name|profiles
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|blacklisted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ProfileNamePattern
name|pattern
range|:
name|blacklistedProfilePatterns
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|matches
argument_list|(
name|profileName
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   blacklisting profile {} from {}"
argument_list|,
name|profileName
argument_list|,
name|profilePath
argument_list|)
expr_stmt|;
comment|// TODO review blacklist policy options
if|if
condition|(
name|blacklistPolicy
operator|==
name|BlacklistPolicy
operator|.
name|Discard
condition|)
block|{
comment|// Override blacklisted profiles with empty one
name|filteredProfiles
operator|.
name|put
argument_list|(
name|profileName
argument_list|,
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|profileName
argument_list|)
operator|.
name|getProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Remove profile completely
block|}
comment|// no need to check other patterns
name|blacklisted
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|blacklisted
condition|)
block|{
name|filteredProfiles
operator|.
name|put
argument_list|(
name|profileName
argument_list|,
name|profiles
operator|.
name|get
argument_list|(
name|profileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|filteredProfiles
return|;
block|}
specifier|private
name|void
name|reformatClauses
parameter_list|(
name|Properties
name|config
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|val
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|comments
init|=
name|config
operator|.
name|getComments
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Clause
index|[]
name|clauses
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseHeader
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Clause
name|clause
range|:
name|clauses
control|)
block|{
name|strings
operator|.
name|add
argument_list|(
name|clause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
name|String
name|s
init|=
literal|"    "
operator|+
name|string
decl_stmt|;
if|if
condition|(
name|index
operator|++
operator|<
name|strings
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|s
operator|+=
literal|", "
expr_stmt|;
block|}
name|lines
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|comments
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|downloadLibraries
parameter_list|(
name|Downloader
name|downloader
parameter_list|,
specifier|final
name|Properties
name|config
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|libraries
parameter_list|,
name|String
name|indent
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|Clause
index|[]
name|clauses
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseClauses
argument_list|(
name|libraries
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|libraries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Clause
name|clause
range|:
name|clauses
control|)
block|{
specifier|final
name|String
name|filename
decl_stmt|;
specifier|final
name|String
name|library
decl_stmt|;
if|if
condition|(
name|clause
operator|.
name|getDirective
argument_list|(
literal|"url"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
name|clause
operator|.
name|getName
argument_list|()
expr_stmt|;
name|library
operator|=
name|clause
operator|.
name|getDirective
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
literal|null
expr_stmt|;
name|library
operator|=
name|clause
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|type
init|=
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_TYPE
argument_list|)
operator|!=
literal|null
condition|?
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_TYPE
argument_list|)
else|:
name|Library
operator|.
name|TYPE_DEFAULT
decl_stmt|;
if|if
condition|(
operator|!
name|javase
operator|.
name|supportsEndorsedAndExtLibraries
argument_list|()
operator|&&
operator|(
name|Library
operator|.
name|TYPE_ENDORSED
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|Library
operator|.
name|TYPE_EXTENSION
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Ignoring library "
operator|+
name|library
operator|+
literal|" of type "
operator|+
name|type
operator|+
literal|" which is only supported for Java 1.8."
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|path
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Library
operator|.
name|TYPE_ENDORSED
case|:
name|path
operator|=
literal|"lib/endorsed"
expr_stmt|;
break|break;
case|case
name|Library
operator|.
name|TYPE_EXTENSION
case|:
name|path
operator|=
literal|"lib/ext"
expr_stmt|;
break|break;
case|case
name|Library
operator|.
name|TYPE_BOOT
case|:
name|path
operator|=
literal|"lib/boot"
expr_stmt|;
break|break;
default|default:
name|path
operator|=
literal|"lib"
expr_stmt|;
break|break;
block|}
name|downloader
operator|.
name|download
argument_list|(
name|library
argument_list|,
name|provider
lambda|->
block|{
synchronized|synchronized
init|(
name|provider
init|)
block|{
name|Path
name|input
init|=
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|filename
operator|!=
literal|null
condition|?
name|filename
else|:
name|input
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Path
name|libOutput
init|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|libOutput
operator|.
name|toFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|libOutput
operator|.
name|toFile
argument_list|()
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|LOGGER
operator|.
name|info
argument_list|(
literal|"{}   adding library: {}"
argument_list|,
name|indent
argument_list|,
name|homeDirectory
operator|.
name|relativize
argument_list|(
name|libOutput
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|libOutput
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
if|if
condition|(
name|provider
operator|.
name|getUrl
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
comment|// copy boot library in system repository
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Library
operator|.
name|TYPE_BOOT
argument_list|)
condition|)
block|{
name|String
name|mvnPath
init|=
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|sysOutput
init|=
name|systemDirectory
operator|.
name|resolve
argument_list|(
name|mvnPath
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|sysOutput
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|sysOutput
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|libOutput
operator|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// copy the file
name|LOGGER
operator|.
name|info
argument_list|(
literal|"{}   adding maven library: {}"
argument_list|,
name|indent
argument_list|,
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|libOutput
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
comment|/* a symlink could be used instead                                  if (Files.notExists(libOutput, LinkOption.NOFOLLOW_LINKS)) {                                     try {                                         Files.createSymbolicLink(libOutput, libOutput.getParent().relativize(sysOutput));                                     } catch (FileSystemException e) {                                         Files.copy(input, libOutput, StandardCopyOption.REPLACE_EXISTING);                                     }                                 }                                 */
block|}
block|}
block|}
name|boolean
name|export
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_EXPORT
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|delegate
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_DELEGATE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|export
operator|||
name|delegate
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|getHeaders
argument_list|(
name|provider
argument_list|)
decl_stmt|;
name|String
name|packages
init|=
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|packages
operator|!=
literal|null
condition|)
block|{
name|Clause
index|[]
name|clauses1
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseHeader
argument_list|(
name|packages
argument_list|)
decl_stmt|;
if|if
condition|(
name|export
condition|)
block|{
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Clause
name|clause1
range|:
name|clauses1
control|)
block|{
name|val
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|clause1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
condition|)
block|{
name|StringBuilder
name|val
init|=
operator|new
name|StringBuilder
argument_list|(
name|config
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Clause
name|clause1
range|:
name|clauses1
control|)
block|{
name|val
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|clause1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|,
name|val
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|installStage
parameter_list|(
name|Profile
name|installedProfile
parameter_list|,
name|Set
argument_list|<
name|Feature
argument_list|>
name|allBootFeatures
parameter_list|,
name|FeaturesProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Install stage"
argument_list|)
expr_stmt|;
comment|//
comment|// Handle installed profiles
comment|//
name|Profile
name|installedOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|installedProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|installedEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|installedOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
comment|// Load startup repositories
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   Loading installed repositories"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|installedRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|installedEffective
operator|.
name|getRepositories
argument_list|()
argument_list|,
literal|true
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|allInstalledFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|installedRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|allInstalledFeatures
operator|.
name|addAll
argument_list|(
name|repo
operator|.
name|getFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add boot features for search
name|allInstalledFeatures
operator|.
name|addAll
argument_list|(
name|allBootFeatures
argument_list|)
expr_stmt|;
name|FeatureSelector
name|selector
init|=
operator|new
name|FeatureSelector
argument_list|(
name|allInstalledFeatures
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Feature
argument_list|>
name|installedFeatures
init|=
name|selector
operator|.
name|getMatching
argument_list|(
name|installedEffective
operator|.
name|getFeatures
argument_list|()
argument_list|)
decl_stmt|;
name|ArtifactInstaller
name|installer
init|=
operator|new
name|ArtifactInstaller
argument_list|(
name|systemDirectory
argument_list|,
name|downloader
argument_list|,
name|blacklist
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|installedFeatures
control|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   Feature {} is defined as an installed feature"
argument_list|,
name|feature
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|installer
operator|.
name|installArtifact
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Install config files
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|feature
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
name|installer
operator|.
name|installArtifact
argument_list|(
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|cond
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|installer
operator|.
name|installArtifact
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|location
range|:
name|installedEffective
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|installer
operator|.
name|installArtifact
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|Feature
argument_list|>
name|bootStage
parameter_list|(
name|Profile
name|bootProfile
parameter_list|,
name|Profile
name|startupEffective
parameter_list|,
name|FeaturesProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Boot stage"
argument_list|)
expr_stmt|;
comment|//
comment|// Handle boot profiles
comment|//
name|Profile
name|bootOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|bootProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|bootEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|bootOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Load startup repositories
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   Loading boot repositories"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|bootRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|bootEffective
operator|.
name|getRepositories
argument_list|()
argument_list|,
literal|true
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|allBootFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|bootRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|allBootFeatures
operator|.
name|addAll
argument_list|(
name|repo
operator|.
name|getFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Generate a global feature
name|Map
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|generatedDep
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Feature
name|generated
init|=
operator|new
name|Feature
argument_list|()
decl_stmt|;
name|generated
operator|.
name|setName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add feature dependencies
for|for
control|(
name|String
name|nameOrPattern
range|:
name|bootEffective
operator|.
name|getFeatures
argument_list|()
control|)
block|{
comment|// KARAF-5273: feature may be a pattern
for|for
control|(
name|String
name|dependency
range|:
name|FeatureSelector
operator|.
name|getMatchingFeatures
argument_list|(
name|nameOrPattern
argument_list|,
name|bootRepositories
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|Dependency
name|dep
init|=
name|generatedDep
operator|.
name|get
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
name|dep
operator|=
name|createDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|generatedDep
operator|.
name|put
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|.
name|setDependency
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add bundles
for|for
control|(
name|String
name|location
range|:
name|bootEffective
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|location
operator|=
name|location
operator|.
name|replace
argument_list|(
literal|"profile:"
argument_list|,
literal|"file:etc/"
argument_list|)
expr_stmt|;
name|Bundle
name|bun
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|bun
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getBundle
argument_list|()
operator|.
name|add
argument_list|(
name|bun
argument_list|)
expr_stmt|;
block|}
name|Features
name|rep
init|=
operator|new
name|Features
argument_list|()
decl_stmt|;
name|rep
operator|.
name|setName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|getRepository
argument_list|()
operator|.
name|addAll
argument_list|(
name|bootEffective
operator|.
name|getRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|allBootFeatures
operator|.
name|add
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
comment|// Compute startup feature dependencies
name|FeatureSelector
name|selector
init|=
operator|new
name|FeatureSelector
argument_list|(
name|allBootFeatures
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Feature
argument_list|>
name|bootFeatures
init|=
name|selector
operator|.
name|getMatching
argument_list|(
name|singletonList
argument_list|(
name|generated
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|bootFeatures
control|)
block|{
comment|// the feature is a startup feature, updating startup.properties file
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   Feature "
operator|+
name|feature
operator|.
name|getId
argument_list|()
operator|+
literal|" is defined as a boot feature"
argument_list|)
expr_stmt|;
comment|// add the feature in the system folder
name|Set
argument_list|<
name|BundleInfo
argument_list|>
name|bundleInfos
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|bundleInfos
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|cond
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|bundleInfos
operator|.
name|add
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Build optional features and known prerequisites
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|prereqs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"blueprint:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"deployer"
argument_list|,
literal|"aries-blueprint"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"spring:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"deployer"
argument_list|,
literal|"spring"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"wrap:"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"wrap"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"war:"
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"war"
argument_list|)
argument_list|)
expr_stmt|;
name|ArtifactInstaller
name|installer
init|=
operator|new
name|ArtifactInstaller
argument_list|(
name|systemDirectory
argument_list|,
name|downloader
argument_list|,
name|blacklist
argument_list|)
decl_stmt|;
for|for
control|(
name|BundleInfo
name|bundleInfo
range|:
name|bundleInfos
control|)
block|{
name|installer
operator|.
name|installArtifact
argument_list|(
name|bundleInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|prereqs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|bundleInfo
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|prereq
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Dependency
name|dep
init|=
name|generatedDep
operator|.
name|get
argument_list|(
name|prereq
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
name|dep
operator|=
operator|new
name|Dependency
argument_list|()
expr_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|prereq
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|generatedDep
operator|.
name|put
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|.
name|setPrerequisite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
operator|new
name|ConfigInstaller
argument_list|(
name|etcDirectory
argument_list|,
name|pidsToExtract
argument_list|)
operator|.
name|installConfigs
argument_list|(
name|feature
argument_list|,
name|downloader
argument_list|,
name|installer
argument_list|)
expr_stmt|;
comment|// Install libraries
name|List
argument_list|<
name|String
argument_list|>
name|libraries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Library
name|library
range|:
name|feature
operator|.
name|getLibraries
argument_list|()
control|)
block|{
name|String
name|lib
init|=
name|library
operator|.
name|getLocation
argument_list|()
operator|+
literal|";type:="
operator|+
name|library
operator|.
name|getType
argument_list|()
operator|+
literal|";export:="
operator|+
name|library
operator|.
name|isExport
argument_list|()
operator|+
literal|";delegate:="
operator|+
name|library
operator|.
name|isDelegate
argument_list|()
decl_stmt|;
name|libraries
operator|.
name|add
argument_list|(
name|lib
argument_list|)
expr_stmt|;
block|}
name|Path
name|configPropertiesPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"config.properties"
argument_list|)
decl_stmt|;
name|Properties
name|configProperties
init|=
operator|new
name|Properties
argument_list|(
name|configPropertiesPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|downloadLibraries
argument_list|(
name|downloader
argument_list|,
name|configProperties
argument_list|,
name|libraries
argument_list|,
literal|"   "
argument_list|)
expr_stmt|;
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Reformat clauses
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|)
expr_stmt|;
name|configProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// If there are bundles to install, we can't use the boot features only
comment|// so keep the generated feature
name|Path
name|featuresCfgFile
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"org.apache.karaf.features.cfg"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|generated
operator|.
name|getBundle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|output
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
name|rep
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JaxbUtil
operator|.
name|marshal
argument_list|(
name|rep
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
decl_stmt|;
name|String
name|repoUrl
decl_stmt|;
if|if
condition|(
name|karafVersion
operator|==
name|KarafVersion
operator|.
name|v24
condition|)
block|{
name|String
name|str
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|replace
argument_list|(
literal|"http://karaf.apache.org/xmlns/features/v1.3.0"
argument_list|,
literal|"http://karaf.apache.org/xmlns/features/v1.2.0"
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|" dependency=\".*?\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|" prerequisite=\".*?\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|rep
operator|.
name|getFeature
argument_list|()
control|)
block|{
for|for
control|(
name|Dependency
name|d
range|:
name|f
operator|.
name|getFeature
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isPrerequisite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|startupEffective
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Feature "
operator|+
name|d
operator|.
name|getName
argument_list|()
operator|+
literal|" is a prerequisite and should be installed as a startup feature."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|repoUrl
operator|=
literal|"file:etc/"
operator|+
name|output
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|repoUrl
operator|=
literal|"file:${karaf.home}/etc/"
operator|+
name|output
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Files
operator|.
name|copy
argument_list|(
name|bais
argument_list|,
name|output
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|(
name|featuresCfgFile
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|repoUrl
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|generated
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|repos
init|=
name|getRepos
argument_list|(
name|rep
argument_list|)
decl_stmt|;
name|String
name|boot
init|=
name|getBootFeatures
argument_list|(
name|generatedDep
argument_list|)
decl_stmt|;
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|(
name|featuresCfgFile
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|repos
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|boot
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|featuresProperties
argument_list|,
name|FEATURES_REPOSITORIES
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|featuresProperties
argument_list|,
name|FEATURES_BOOT
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|allBootFeatures
return|;
block|}
specifier|private
name|String
name|getRepos
parameter_list|(
name|Features
name|rep
parameter_list|)
block|{
name|StringBuilder
name|repos
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|rep
operator|.
name|getRepository
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|repos
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|repos
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|repos
operator|.
name|append
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|repos
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getBootFeatures
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|generatedDep
parameter_list|)
block|{
name|StringBuilder
name|boot
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Dependency
name|dep
range|:
name|generatedDep
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|isPrerequisite
argument_list|()
condition|)
block|{
if|if
condition|(
name|boot
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boot
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|boot
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|boot
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: for dependencies, we'd need to resolve the features completely
for|for
control|(
name|Dependency
name|dep
range|:
name|generatedDep
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dep
operator|.
name|isPrerequisite
argument_list|()
operator|&&
operator|!
name|dep
operator|.
name|isDependency
argument_list|()
condition|)
block|{
if|if
condition|(
name|boot
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|boot
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Feature
operator|.
name|DEFAULT_VERSION
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|karafVersion
operator|==
name|KarafVersion
operator|.
name|v4x
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boot
operator|.
name|append
argument_list|(
literal|";version="
argument_list|)
expr_stmt|;
block|}
name|boot
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|boot
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Dependency
name|createDependency
parameter_list|(
name|String
name|dependency
parameter_list|)
block|{
name|Dependency
name|dep
decl_stmt|;
name|dep
operator|=
operator|new
name|Dependency
argument_list|()
expr_stmt|;
name|String
index|[]
name|split
init|=
name|dependency
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|dep
operator|.
name|setVersion
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|dep
return|;
block|}
specifier|private
name|Profile
name|startupStage
parameter_list|(
name|Profile
name|startupProfile
parameter_list|,
name|FeaturesProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Startup stage"
argument_list|)
expr_stmt|;
comment|//
comment|// Compute startup
comment|//
name|Profile
name|startupOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|startupProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|startupEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|startupOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Load startup repositories
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   Loading startup repositories"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|startupRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|startupEffective
operator|.
name|getRepositories
argument_list|()
argument_list|,
literal|false
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|//
comment|// Resolve
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   Resolving startup features and bundles"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      Features: "
operator|+
name|startupEffective
operator|.
name|getFeatures
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      Bundles: "
operator|+
name|startupEffective
operator|.
name|getBundles
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bundles
init|=
name|resolve
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|startupRepositories
operator|.
name|values
argument_list|()
argument_list|,
name|startupEffective
operator|.
name|getFeatures
argument_list|()
argument_list|,
name|startupEffective
operator|.
name|getBundles
argument_list|()
argument_list|,
name|startupEffective
operator|.
name|getOptionals
argument_list|()
argument_list|,
name|processor
argument_list|)
decl_stmt|;
comment|//
comment|// Generate startup.properties
comment|//
name|Properties
name|startup
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|startup
operator|.
name|setHeader
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"# Bundles to be started on startup, with startlevel"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|invertedStartupBundles
init|=
name|MapUtils
operator|.
name|invert
argument_list|(
name|bundles
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|invertedStartupBundles
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|startLevel
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|location
range|:
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|useReferenceUrls
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|location
operator|=
literal|"file:"
operator|+
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|location
operator|=
literal|"reference:"
operator|+
name|location
expr_stmt|;
block|}
block|}
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|&&
name|karafVersion
operator|==
name|KarafVersion
operator|.
name|v24
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startup
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
block|}
name|Path
name|startupProperties
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"startup.properties"
argument_list|)
decl_stmt|;
name|startup
operator|.
name|save
argument_list|(
name|startupProperties
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|startupEffective
return|;
block|}
comment|/**      * Gets a list of objects (bundle URIs, profile IDs, feature IDs) configured for given stage      * @param stage      * @param data      * @return      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getStaged
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|data
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|staged
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|data
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|==
name|stage
condition|)
block|{
name|staged
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|staged
return|;
block|}
comment|/**      * Gets a list of features XML repository URIs configured for given stage. There's one special rule - startup      * repositories are added as boot repositories as well.      * @param stage      * @param data      * @return      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getStagedRepositories
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|data
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|staged
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|data
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|stage
operator|==
name|stage
operator|||
name|data
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|stage
operator|==
name|Stage
operator|.
name|Startup
operator|&&
name|stage
operator|==
name|Stage
operator|.
name|Boot
condition|)
block|{
comment|// For boot stage, we also want the startup repositories
name|staged
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|staged
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loadRepositories
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
specifier|final
name|boolean
name|install
parameter_list|,
name|FeaturesProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loaded
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|repository
argument_list|,
operator|new
name|DownloadCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
specifier|final
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|url
init|=
name|provider
operator|.
name|getUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|processor
operator|.
name|isRepositoryBlacklisted
argument_list|(
name|url
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"   feature repository "
operator|+
name|url
operator|+
literal|" is blacklisted"
argument_list|)
expr_stmt|;
return|return;
block|}
synchronized|synchronized
init|(
name|loaded
init|)
block|{
if|if
condition|(
operator|!
name|loaded
operator|.
name|containsKey
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|install
condition|)
block|{
synchronized|synchronized
init|(
name|provider
init|)
block|{
name|Path
name|path
init|=
name|ArtifactInstaller
operator|.
name|pathFromProviderUrl
argument_list|(
name|systemDirectory
argument_list|,
name|url
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"      adding feature repository: "
operator|+
name|url
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|path
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|provider
operator|.
name|open
argument_list|()
init|)
block|{
name|Features
name|featuresModel
init|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|url
argument_list|,
name|is
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// always process according to processor configuration
name|featuresModel
operator|.
name|setBlacklisted
argument_list|(
name|processor
operator|.
name|isRepositoryBlacklisted
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|processor
operator|.
name|process
argument_list|(
name|featuresModel
argument_list|)
expr_stmt|;
name|loaded
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|,
name|featuresModel
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|innerRepository
range|:
name|featuresModel
operator|.
name|getRepository
argument_list|()
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|innerRepository
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|loaded
return|;
block|}
comment|/**      * Generate internal profile (for the purpose of custom assembly builder) for given<code>stage</code>.      * @param stage a {@link Stage} for which the profile is being generated      * @param parentProfiles all profiles for given stage will be used as parent profiles      * @param repositories repositories to use in generated profile      * @param features features to declare in generated profile      * @param bundles bundles to declare in generated profile      * @return      */
specifier|private
name|Profile
name|generateProfile
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|parentProfiles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|repositories
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|features
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|bundles
parameter_list|)
block|{
name|String
name|name
init|=
literal|"generated-"
operator|+
name|stage
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stagedParentProfiles
init|=
name|getStaged
argument_list|(
name|stage
argument_list|,
name|parentProfiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|stagedParentProfiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Generating {} profile"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Generating {} profile with parents: {}"
argument_list|,
name|name
argument_list|,
name|stagedParentProfiles
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|name
argument_list|)
operator|.
name|setParents
argument_list|(
name|stagedParentProfiles
argument_list|)
operator|.
name|setRepositories
argument_list|(
name|getStagedRepositories
argument_list|(
name|stage
argument_list|,
name|repositories
argument_list|)
argument_list|)
operator|.
name|setFeatures
argument_list|(
name|getStaged
argument_list|(
name|stage
argument_list|,
name|features
argument_list|)
argument_list|)
operator|.
name|setBundles
argument_list|(
name|getStaged
argument_list|(
name|stage
argument_list|,
name|bundles
argument_list|)
argument_list|)
operator|.
name|getProfile
argument_list|()
return|;
block|}
comment|/**      *<p>Resolves set of features and bundles using OSGi resolver to calculate startup stage bundles.</p>      *<p>Startup stage means that<em>current</em> state of the OSGi framework is just single system bundle installed      * and bundles+features are being resolved against this single<em>bundle 0</em>.</p>      *      * @param manager {@link DownloadManager} to help downloading bundles and resources      * @param resolver OSGi resolver which will resolve features and bundles in framework with only system bundle installed      * @param repositories all available (not only to-be-installed) features      * @param features feature identifiers to resolve      * @param bundles bundle locations to resolve      * @param optionals optional URI locations that'll be available through {@link org.osgi.service.repository.Repository},      * used in resolution process      * @param processor {@link FeaturesProcessor} to process repositories/features/bundles      * @return map from bundle URI to bundle start-level      * @throws Exception      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|resolve
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|Resolver
name|resolver
parameter_list|,
name|Collection
argument_list|<
name|Features
argument_list|>
name|repositories
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|bundles
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|optionals
parameter_list|,
name|FeaturesProcessor
name|processor
parameter_list|)
throws|throws
name|Exception
block|{
comment|// System bundle will be single bundle installed with bundleId == 0
name|BundleRevision
name|systemBundle
init|=
name|getSystemBundle
argument_list|()
decl_stmt|;
comment|// Static distribution building callback and deployer that's used to deploy/collect startup-stage artifacts
name|AssemblyDeployCallback
name|callback
init|=
operator|new
name|AssemblyDeployCallback
argument_list|(
name|manager
argument_list|,
name|this
argument_list|,
name|systemBundle
argument_list|,
name|repositories
argument_list|,
name|processor
argument_list|)
decl_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|callback
argument_list|)
decl_stmt|;
comment|// Install framework
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
name|Deployer
operator|.
name|DeploymentRequest
operator|.
name|defaultDeploymentRequest
argument_list|()
decl_stmt|;
comment|// Add optional resources available through OSGi resource repository
name|request
operator|.
name|globalRepository
operator|=
name|repositoryOfOptionalResources
argument_list|(
name|manager
argument_list|,
name|optionals
argument_list|)
expr_stmt|;
comment|// Specify feature requirements
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
comment|// KARAF-5273: feature may be a pattern
for|for
control|(
name|String
name|featureName
range|:
name|FeatureSelector
operator|.
name|getMatchingFeatures
argument_list|(
name|feature
argument_list|,
name|repositories
argument_list|)
control|)
block|{
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
name|featureName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Specify bundle requirements
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
literal|"bundle:"
operator|+
name|bundle
argument_list|)
expr_stmt|;
block|}
name|deployer
operator|.
name|deployFully
argument_list|(
name|callback
operator|.
name|getDeploymentState
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
return|return
name|callback
operator|.
name|getStartupBundles
argument_list|()
return|;
block|}
comment|/**      * Optional resource URIs will be made available through OSGi {@link Repository}      * @param manager      * @param optionals      * @return      * @throws Exception      */
specifier|private
name|Repository
name|repositoryOfOptionalResources
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|optionals
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|optional
range|:
name|optionals
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|optional
argument_list|,
name|provider
lambda|->
block|{
name|Resource
name|resource
init|=
name|ResourceBuilder
operator|.
name|build
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|,
name|getHeaders
argument_list|(
name|provider
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|resources
init|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
operator|new
name|BaseRepository
argument_list|(
name|resources
argument_list|)
return|;
block|}
comment|/**      * Prepares {@link BundleRevision} that represents System Bundle (a.k.a.<em>bundle 0</em>)      * @return      * @throws Exception      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|BundleRevision
name|getSystemBundle
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|configPropPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"config.properties"
argument_list|)
decl_stmt|;
name|Properties
name|configProps
init|=
name|PropertiesLoader
operator|.
name|loadPropertiesOrFail
argument_list|(
name|configPropPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|configProps
operator|.
name|put
argument_list|(
literal|"java.specification.version"
argument_list|,
name|javase
operator|.
name|version
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|substitute
argument_list|()
expr_stmt|;
name|Attributes
name|attributes
init|=
operator|new
name|Attributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_MANIFESTVERSION
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|,
literal|"system.bundle"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|,
literal|"0.0.0"
argument_list|)
expr_stmt|;
name|String
name|exportPackages
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|exportPackages
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"\"org.osgi.framework.system.packages\" property should specify system bundle"
operator|+
literal|" packages. It can't be empty, please check etc/config.properties of the assembly."
argument_list|)
throw|;
block|}
if|if
condition|(
name|configProps
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
condition|)
block|{
name|exportPackages
operator|+=
literal|","
operator|+
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
expr_stmt|;
block|}
name|exportPackages
operator|=
name|exportPackages
operator|.
name|replaceAll
argument_list|(
literal|",\\s*,"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|,
name|exportPackages
argument_list|)
expr_stmt|;
name|String
name|systemCaps
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMCAPABILITIES
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|PROVIDE_CAPABILITY
argument_list|,
name|systemCaps
argument_list|)
expr_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FakeBundleRevision
argument_list|(
name|headers
argument_list|,
literal|"system-bundle"
argument_list|,
literal|0L
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|(
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|provider
operator|.
name|open
argument_list|()
argument_list|)
init|)
block|{
name|ZipEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|MANIFEST_NAME
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Attributes
name|attributes
init|=
operator|new
name|Manifest
argument_list|(
name|zis
argument_list|)
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|provider
operator|.
name|getUrl
argument_list|()
operator|+
literal|" does not contain a manifest"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

