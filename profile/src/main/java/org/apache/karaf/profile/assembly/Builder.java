begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|resolver
operator|.
name|ResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Clause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|FeaturesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|Library
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|DownloadManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|Downloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|StreamProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|download
operator|.
name|impl
operator|.
name|DownloadManagerHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Conditional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|ConfigFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|model
operator|.
name|JaxbUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|repository
operator|.
name|BaseRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|resolver
operator|.
name|ResourceBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Blacklist
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|service
operator|.
name|Deployer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|features
operator|.
name|internal
operator|.
name|util
operator|.
name|MapUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kar
operator|.
name|internal
operator|.
name|Kar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Profiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|config
operator|.
name|PropertiesLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|maven
operator|.
name|Parser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolvers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|resolver
operator|.
name|Resolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
operator|.
name|MANIFEST_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|assembly
operator|.
name|Builder
operator|.
name|Stage
operator|.
name|Startup
import|;
end_import

begin_class
specifier|public
class|class
name|Builder
block|{
specifier|private
specifier|static
specifier|final
name|String
name|STATIC_FEATURES_KAR
init|=
literal|"mvn:org.apache.karaf.features/static/%s/kar"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Builder
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_REPOSITORIES
init|=
literal|"featuresRepositories"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FEATURES_BOOT
init|=
literal|"featuresBoot"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIBRARY_CLAUSE_TYPE
init|=
literal|"type"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIBRARY_CLAUSE_EXPORT
init|=
literal|"export"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIBRARY_CLAUSE_DELEGATE
init|=
literal|"delegate"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ORG_OPS4J_PAX_URL_MVN_PID
init|=
literal|"org.ops4j.pax.url.mvn"
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Stage
block|{
name|Startup
block|,
name|Boot
block|,
name|Installed
block|}
specifier|public
specifier|static
enum|enum
name|KarafVersion
block|{
name|v24
block|,
name|v3x
block|,
name|v4x
block|}
specifier|public
specifier|static
enum|enum
name|BlacklistPolicy
block|{
name|Discard
block|,
name|Fail
block|}
specifier|static
class|class
name|RepositoryInfo
block|{
name|Stage
name|stage
decl_stmt|;
name|boolean
name|addAll
decl_stmt|;
block|}
comment|//
comment|// Input parameters
comment|//
name|List
argument_list|<
name|String
argument_list|>
name|profilesUris
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|defaultAddAll
init|=
literal|true
decl_stmt|;
name|Stage
name|defaultStage
init|=
name|Stage
operator|.
name|Startup
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|kars
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|profiles
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|repositories
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|features
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|bundles
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedProfiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedFeatures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistedBundles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|BlacklistPolicy
name|blacklistPolicy
init|=
name|BlacklistPolicy
operator|.
name|Discard
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|libraries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|javase
init|=
literal|"1.7"
decl_stmt|;
name|KarafVersion
name|karafVersion
init|=
name|KarafVersion
operator|.
name|v4x
decl_stmt|;
name|String
name|environment
init|=
literal|null
decl_stmt|;
name|boolean
name|useReferenceUrls
decl_stmt|;
name|boolean
name|ignoreDependencyFlag
decl_stmt|;
name|int
name|defaultStartLevel
init|=
literal|50
decl_stmt|;
name|Path
name|homeDirectory
decl_stmt|;
name|boolean
name|offline
decl_stmt|;
name|String
name|localRepository
decl_stmt|;
name|String
name|mavenRepositories
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|executor
decl_stmt|;
specifier|private
name|DownloadManager
name|manager
decl_stmt|;
specifier|private
name|Resolver
name|resolver
decl_stmt|;
specifier|private
name|Path
name|etcDirectory
decl_stmt|;
specifier|private
name|Path
name|systemDirectory
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|allProfiles
decl_stmt|;
specifier|public
specifier|static
name|Builder
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
name|Builder
name|defaultStage
parameter_list|(
name|Stage
name|stage
parameter_list|)
block|{
name|this
operator|.
name|defaultStage
operator|=
name|stage
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|defaultAddAll
parameter_list|(
name|boolean
name|addAll
parameter_list|)
block|{
name|this
operator|.
name|defaultAddAll
operator|=
name|addAll
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|profilesUris
parameter_list|(
name|String
modifier|...
name|profilesUri
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|profilesUris
argument_list|,
name|profilesUri
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|libraries
parameter_list|(
name|String
modifier|...
name|libraries
parameter_list|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|libraries
argument_list|,
name|libraries
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|kars
parameter_list|(
name|String
modifier|...
name|kars
parameter_list|)
block|{
return|return
name|kars
argument_list|(
name|defaultStage
argument_list|,
name|defaultAddAll
argument_list|,
name|kars
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|kars
parameter_list|(
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|kars
parameter_list|)
block|{
return|return
name|kars
argument_list|(
name|defaultStage
argument_list|,
name|addAll
argument_list|,
name|kars
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|kars
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|kars
parameter_list|)
block|{
for|for
control|(
name|String
name|kar
range|:
name|kars
control|)
block|{
name|RepositoryInfo
name|info
init|=
operator|new
name|RepositoryInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|stage
operator|=
name|stage
expr_stmt|;
name|info
operator|.
name|addAll
operator|=
name|addAll
expr_stmt|;
name|this
operator|.
name|kars
operator|.
name|put
argument_list|(
name|kar
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|repositories
parameter_list|(
name|String
modifier|...
name|repositories
parameter_list|)
block|{
return|return
name|repositories
argument_list|(
name|defaultStage
argument_list|,
name|defaultAddAll
argument_list|,
name|repositories
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|repositories
parameter_list|(
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|repositories
parameter_list|)
block|{
return|return
name|repositories
argument_list|(
name|defaultStage
argument_list|,
name|addAll
argument_list|,
name|repositories
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|repositories
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|boolean
name|addAll
parameter_list|,
name|String
modifier|...
name|repositories
parameter_list|)
block|{
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
name|RepositoryInfo
name|info
init|=
operator|new
name|RepositoryInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|stage
operator|=
name|stage
expr_stmt|;
name|info
operator|.
name|addAll
operator|=
name|addAll
expr_stmt|;
name|this
operator|.
name|repositories
operator|.
name|put
argument_list|(
name|repository
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|features
parameter_list|(
name|String
modifier|...
name|features
parameter_list|)
block|{
return|return
name|features
argument_list|(
name|defaultStage
argument_list|,
name|features
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|features
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|String
modifier|...
name|features
parameter_list|)
block|{
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|this
operator|.
name|features
operator|.
name|put
argument_list|(
name|feature
argument_list|,
name|stage
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|bundles
parameter_list|(
name|String
modifier|...
name|bundles
parameter_list|)
block|{
return|return
name|bundles
argument_list|(
name|defaultStage
argument_list|,
name|bundles
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|bundles
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|String
modifier|...
name|bundles
parameter_list|)
block|{
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|this
operator|.
name|bundles
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|stage
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|profiles
parameter_list|(
name|String
modifier|...
name|profiles
parameter_list|)
block|{
return|return
name|profiles
argument_list|(
name|defaultStage
argument_list|,
name|profiles
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|profiles
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|String
modifier|...
name|profiles
parameter_list|)
block|{
for|for
control|(
name|String
name|profile
range|:
name|profiles
control|)
block|{
name|this
operator|.
name|profiles
operator|.
name|put
argument_list|(
name|profile
argument_list|,
name|stage
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|homeDirectory
parameter_list|(
name|Path
name|homeDirectory
parameter_list|)
block|{
if|if
condition|(
name|homeDirectory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"homeDirectory is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|homeDirectory
operator|=
name|homeDirectory
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|javase
parameter_list|(
name|String
name|javase
parameter_list|)
block|{
if|if
condition|(
name|javase
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"javase is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|javase
operator|=
name|javase
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|environment
parameter_list|(
name|String
name|environment
parameter_list|)
block|{
name|this
operator|.
name|environment
operator|=
name|environment
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|useReferenceUrls
parameter_list|()
block|{
return|return
name|useReferenceUrls
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|useReferenceUrls
parameter_list|(
name|boolean
name|useReferenceUrls
parameter_list|)
block|{
name|this
operator|.
name|useReferenceUrls
operator|=
name|useReferenceUrls
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|karafVersion
parameter_list|(
name|KarafVersion
name|karafVersion
parameter_list|)
block|{
name|this
operator|.
name|karafVersion
operator|=
name|karafVersion
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|defaultStartLevel
parameter_list|(
name|int
name|defaultStartLevel
parameter_list|)
block|{
name|this
operator|.
name|defaultStartLevel
operator|=
name|defaultStartLevel
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|ignoreDependencyFlag
parameter_list|()
block|{
return|return
name|ignoreDependencyFlag
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|ignoreDependencyFlag
parameter_list|(
name|boolean
name|ignoreDependencyFlag
parameter_list|)
block|{
name|this
operator|.
name|ignoreDependencyFlag
operator|=
name|ignoreDependencyFlag
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|offline
parameter_list|(
name|boolean
name|offline
parameter_list|)
block|{
name|this
operator|.
name|offline
operator|=
name|offline
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|offline
parameter_list|()
block|{
return|return
name|offline
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|localRepository
parameter_list|(
name|String
name|localRepository
parameter_list|)
block|{
name|this
operator|.
name|localRepository
operator|=
name|localRepository
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|mavenRepositories
parameter_list|(
name|String
name|mavenRepositories
parameter_list|)
block|{
name|this
operator|.
name|mavenRepositories
operator|=
name|mavenRepositories
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|staticFramework
parameter_list|()
block|{
comment|// TODO: load this from resources
return|return
name|staticFramework
argument_list|(
literal|"4.0.0-SNAPSHOT"
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|staticFramework
parameter_list|(
name|String
name|version
parameter_list|)
block|{
name|String
name|staticFeaturesKar
init|=
name|String
operator|.
name|format
argument_list|(
name|STATIC_FEATURES_KAR
argument_list|,
name|version
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|defaultStage
argument_list|(
name|Startup
argument_list|)
operator|.
name|useReferenceUrls
argument_list|()
operator|.
name|kars
argument_list|(
name|Startup
argument_list|,
literal|true
argument_list|,
name|staticFeaturesKar
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|blacklistProfiles
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|profiles
parameter_list|)
block|{
name|this
operator|.
name|blacklistedProfiles
operator|.
name|addAll
argument_list|(
name|profiles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|blacklistFeatures
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|features
parameter_list|)
block|{
name|this
operator|.
name|blacklistedFeatures
operator|.
name|addAll
argument_list|(
name|features
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|blacklistBundles
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|bundles
parameter_list|)
block|{
name|this
operator|.
name|blacklistedBundles
operator|.
name|addAll
argument_list|(
name|bundles
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|blacklistPolicy
parameter_list|(
name|BlacklistPolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|blacklistPolicy
operator|=
name|policy
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlacklistedProfiles
parameter_list|()
block|{
return|return
name|blacklistedProfiles
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlacklistedFeatures
parameter_list|()
block|{
return|return
name|blacklistedFeatures
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBlacklistedBundles
parameter_list|()
block|{
return|return
name|blacklistedBundles
return|;
block|}
specifier|public
name|BlacklistPolicy
name|getBlacklistPolicy
parameter_list|()
block|{
return|return
name|blacklistPolicy
return|;
block|}
specifier|public
name|void
name|generateAssembly
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|javase
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"javase is not set"
argument_list|)
throw|;
block|}
if|if
condition|(
name|homeDirectory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"homeDirectory is not set"
argument_list|)
throw|;
block|}
try|try
block|{
name|doGenerateAssembly
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doGenerateAssembly
parameter_list|()
throws|throws
name|Exception
block|{
name|systemDirectory
operator|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
literal|"system"
argument_list|)
expr_stmt|;
name|etcDirectory
operator|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
literal|"etc"
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Generating karaf assembly: "
operator|+
name|homeDirectory
argument_list|)
expr_stmt|;
comment|//
comment|// Create download manager
comment|//
name|Dictionary
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|offline
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ORG_OPS4J_PAX_URL_MVN_PID
operator|+
literal|"offline"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localRepository
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Builder
operator|.
name|ORG_OPS4J_PAX_URL_MVN_PID
operator|+
literal|".localRepository"
argument_list|,
name|localRepository
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mavenRepositories
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|Builder
operator|.
name|ORG_OPS4J_PAX_URL_MVN_PID
operator|+
literal|".repositories"
argument_list|,
name|mavenRepositories
argument_list|)
expr_stmt|;
block|}
name|MavenResolver
name|resolver
init|=
name|MavenResolvers
operator|.
name|createMavenResolver
argument_list|(
name|props
argument_list|,
name|ORG_OPS4J_PAX_URL_MVN_PID
argument_list|)
decl_stmt|;
name|executor
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|manager
operator|=
operator|new
name|CustomDownloadManager
argument_list|(
name|resolver
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|resolver
operator|=
operator|new
name|ResolverImpl
argument_list|(
operator|new
name|Slf4jResolverLog
argument_list|(
name|LOGGER
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Unzip kars
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Unzipping kars"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|repositories
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|repositories
argument_list|)
decl_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|kar
range|:
name|kars
operator|.
name|keySet
argument_list|()
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|kar
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|karUri
range|:
name|kars
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Kar
name|kar
init|=
operator|new
name|Kar
argument_list|(
name|manager
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
name|karUri
argument_list|)
operator|.
name|getFile
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|kar
operator|.
name|extract
argument_list|(
name|systemDirectory
operator|.
name|toFile
argument_list|()
argument_list|,
name|homeDirectory
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|RepositoryInfo
name|info
init|=
name|kars
operator|.
name|get
argument_list|(
name|karUri
argument_list|)
decl_stmt|;
for|for
control|(
name|URI
name|repositoryUri
range|:
name|kar
operator|.
name|getFeatureRepos
argument_list|()
control|)
block|{
name|repositories
operator|.
name|put
argument_list|(
name|repositoryUri
operator|.
name|toString
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// Propagate feature installation from repositories
comment|//
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|features
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|features
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|karRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|repositories
operator|.
name|keySet
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
name|repositories
operator|.
name|keySet
argument_list|()
control|)
block|{
name|RepositoryInfo
name|info
init|=
name|repositories
operator|.
name|get
argument_list|(
name|repo
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|addAll
condition|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|karRepositories
operator|.
name|get
argument_list|(
name|repo
argument_list|)
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|features
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getId
argument_list|()
argument_list|,
name|info
operator|.
name|stage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Load profiles
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Loading profiles"
argument_list|)
expr_stmt|;
name|allProfiles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|profilesUri
range|:
name|profilesUris
control|)
block|{
name|String
name|uri
init|=
name|profilesUri
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
operator|&&
name|uri
operator|.
name|contains
argument_list|(
literal|"!/"
argument_list|)
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|substring
argument_list|(
literal|"jar:"
operator|.
name|length
argument_list|()
argument_list|,
name|uri
operator|.
name|indexOf
argument_list|(
literal|"!/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|downloader
operator|=
name|manager
operator|.
name|createDownloader
argument_list|()
expr_stmt|;
name|downloader
operator|.
name|download
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
name|StreamProvider
name|provider
init|=
name|manager
operator|.
name|getProviders
argument_list|()
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|profilesUri
operator|=
name|profilesUri
operator|.
name|replace
argument_list|(
name|uri
argument_list|,
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|URI
name|profileURI
init|=
name|URI
operator|.
name|create
argument_list|(
name|profilesUri
argument_list|)
decl_stmt|;
name|Path
name|profilePath
decl_stmt|;
try|try
block|{
name|profilePath
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|profileURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileSystemNotFoundException
name|e
parameter_list|)
block|{
comment|// file system does not exist, try to create it
name|FileSystem
name|fs
init|=
name|FileSystems
operator|.
name|newFileSystem
argument_list|(
name|profileURI
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|Builder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|profilePath
operator|=
name|fs
operator|.
name|provider
argument_list|()
operator|.
name|getPath
argument_list|(
name|profileURI
argument_list|)
expr_stmt|;
block|}
name|allProfiles
operator|.
name|putAll
argument_list|(
name|Profiles
operator|.
name|loadProfiles
argument_list|(
name|profilePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Handle blacklisted profiles
if|if
condition|(
operator|!
name|blacklistedProfiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|blacklistPolicy
operator|==
name|BlacklistPolicy
operator|.
name|Discard
condition|)
block|{
comment|// Override blacklisted profiles with empty ones
for|for
control|(
name|String
name|profile
range|:
name|blacklistedProfiles
control|)
block|{
name|allProfiles
operator|.
name|put
argument_list|(
name|profile
argument_list|,
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|profile
argument_list|)
operator|.
name|getProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Remove profiles completely
name|allProfiles
operator|.
name|keySet
argument_list|()
operator|.
name|removeAll
argument_list|(
name|blacklistedProfiles
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Generate profiles
name|Profile
name|startupProfile
init|=
name|generateProfile
argument_list|(
name|Stage
operator|.
name|Startup
argument_list|,
name|profiles
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
name|Profile
name|bootProfile
init|=
name|generateProfile
argument_list|(
name|Stage
operator|.
name|Boot
argument_list|,
name|profiles
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
name|Profile
name|installedProfile
init|=
name|generateProfile
argument_list|(
name|Stage
operator|.
name|Installed
argument_list|,
name|profiles
argument_list|,
name|repositories
argument_list|,
name|features
argument_list|,
name|bundles
argument_list|)
decl_stmt|;
comment|//
comment|// Compute overall profile
comment|//
name|Profile
name|overallProfile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setParents
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|startupProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|bootProfile
operator|.
name|getId
argument_list|()
argument_list|,
name|installedProfile
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|Profile
name|overallOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|overallProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|overallEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|overallOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|manager
operator|=
operator|new
name|CustomDownloadManager
argument_list|(
name|resolver
argument_list|,
name|executor
argument_list|,
name|overallEffective
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|agentProps
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|overallEffective
operator|.
name|getConfiguration
argument_list|(
name|ORG_OPS4J_PAX_URL_MVN_PID
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"karaf.default.repository"
argument_list|,
literal|"system"
argument_list|)
expr_stmt|;
name|InterpolationHelper
operator|.
name|performSubstitution
argument_list|(
name|agentProps
argument_list|,
operator|new
name|InterpolationHelper
operator|.
name|SubstitutionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//
comment|// Write config and system properties
comment|//
name|Path
name|configPropertiesPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"config.properties"
argument_list|)
decl_stmt|;
name|Properties
name|configProperties
init|=
operator|new
name|Properties
argument_list|(
name|configPropertiesPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|configProperties
operator|.
name|putAll
argument_list|(
name|overallEffective
operator|.
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|configProperties
operator|.
name|save
argument_list|()
expr_stmt|;
name|Path
name|systemPropertiesPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"system.properties"
argument_list|)
decl_stmt|;
name|Properties
name|systemProperties
init|=
operator|new
name|Properties
argument_list|(
name|systemPropertiesPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|systemProperties
operator|.
name|putAll
argument_list|(
name|overallEffective
operator|.
name|getSystem
argument_list|()
argument_list|)
expr_stmt|;
name|systemProperties
operator|.
name|save
argument_list|()
expr_stmt|;
comment|//
comment|// Download libraries
comment|//
comment|// TODO: handle karaf 2.x and 3.x libraries
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Downloading libraries"
argument_list|)
expr_stmt|;
name|downloader
operator|=
name|manager
operator|.
name|createDownloader
argument_list|()
expr_stmt|;
name|downloadLibraries
argument_list|(
name|downloader
argument_list|,
name|configProperties
argument_list|,
name|overallEffective
operator|.
name|getLibraries
argument_list|()
argument_list|)
expr_stmt|;
name|downloadLibraries
argument_list|(
name|downloader
argument_list|,
name|configProperties
argument_list|,
name|libraries
argument_list|)
expr_stmt|;
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Reformat clauses
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|)
expr_stmt|;
name|configProperties
operator|.
name|save
argument_list|()
expr_stmt|;
comment|//
comment|// Write all configuration files
comment|//
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|config
range|:
name|overallEffective
operator|.
name|getFileConfigurations
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Path
name|configFile
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
name|config
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|configFile
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configFile
argument_list|,
name|config
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Handle overrides
comment|//
if|if
condition|(
operator|!
name|overallEffective
operator|.
name|getOverrides
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|overrides
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"override.properties"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"# Generated by the karaf assembly builder"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|addAll
argument_list|(
name|overallEffective
operator|.
name|getOverrides
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|overrides
argument_list|,
name|lines
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Handle blacklist
comment|//
if|if
condition|(
operator|!
name|blacklistedFeatures
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|blacklistedBundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|blacklist
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"blacklisted.properties"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"# Generated by the karaf assembly builder"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|blacklistedFeatures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"# Features"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|addAll
argument_list|(
name|blacklistedFeatures
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|blacklistedBundles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"# Bundles"
argument_list|)
expr_stmt|;
name|lines
operator|.
name|addAll
argument_list|(
name|blacklistedBundles
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|write
argument_list|(
name|blacklist
argument_list|,
name|lines
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|,
name|StandardOpenOption
operator|.
name|CREATE
argument_list|,
name|StandardOpenOption
operator|.
name|TRUNCATE_EXISTING
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Startup stage
comment|//
name|Profile
name|startupEffective
init|=
name|startupStage
argument_list|(
name|startupProfile
argument_list|)
decl_stmt|;
comment|//
comment|// Boot stage
comment|//
name|Set
argument_list|<
name|Feature
argument_list|>
name|allBootFeatures
init|=
name|bootStage
argument_list|(
name|bootProfile
argument_list|,
name|startupEffective
argument_list|)
decl_stmt|;
comment|//
comment|// Installed stage
comment|//
name|installStage
argument_list|(
name|installedProfile
argument_list|,
name|allBootFeatures
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reformatClauses
parameter_list|(
name|Properties
name|config
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|val
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|comments
init|=
name|config
operator|.
name|getComments
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Clause
index|[]
name|clauses
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseHeader
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Clause
name|clause
range|:
name|clauses
control|)
block|{
name|strings
operator|.
name|add
argument_list|(
name|clause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
name|String
name|s
init|=
literal|"    "
operator|+
name|string
decl_stmt|;
if|if
condition|(
name|index
operator|++
operator|<
name|strings
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|s
operator|+=
literal|", "
expr_stmt|;
block|}
name|lines
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|comments
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|downloadLibraries
parameter_list|(
name|Downloader
name|downloader
parameter_list|,
specifier|final
name|Properties
name|config
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|libraries
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|Clause
index|[]
name|clauses
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseClauses
argument_list|(
name|libraries
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|libraries
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Clause
name|clause
range|:
name|clauses
control|)
block|{
specifier|final
name|String
name|filename
decl_stmt|;
specifier|final
name|String
name|library
decl_stmt|;
if|if
condition|(
name|clause
operator|.
name|getDirective
argument_list|(
literal|"url"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|filename
operator|=
name|clause
operator|.
name|getName
argument_list|()
expr_stmt|;
name|library
operator|=
name|clause
operator|.
name|getDirective
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filename
operator|=
literal|null
expr_stmt|;
name|library
operator|=
name|clause
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|type
init|=
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_TYPE
argument_list|)
operator|!=
literal|null
condition|?
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_TYPE
argument_list|)
else|:
name|Library
operator|.
name|TYPE_DEFAULT
decl_stmt|;
specifier|final
name|String
name|path
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Library
operator|.
name|TYPE_ENDORSED
case|:
name|path
operator|=
literal|"lib/endorsed"
expr_stmt|;
break|break;
case|case
name|Library
operator|.
name|TYPE_EXTENSION
case|:
name|path
operator|=
literal|"lib/ext"
expr_stmt|;
break|break;
case|case
name|Library
operator|.
name|TYPE_BOOT
case|:
name|path
operator|=
literal|"lib/boot"
expr_stmt|;
break|break;
default|default:
name|path
operator|=
literal|"lib"
expr_stmt|;
break|break;
block|}
name|downloader
operator|.
name|download
argument_list|(
name|library
argument_list|,
operator|new
name|DownloadCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
specifier|final
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|provider
init|)
block|{
name|Path
name|input
init|=
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|filename
operator|!=
literal|null
condition|?
name|filename
else|:
name|input
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|provider
operator|.
name|getUrl
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|Path
name|libOutput
init|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|libOutput
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
comment|// copy boot library in system repository
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|Library
operator|.
name|TYPE_BOOT
argument_list|)
condition|)
block|{
name|String
name|mvnPath
init|=
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|sysOutput
init|=
name|systemDirectory
operator|.
name|resolve
argument_list|(
name|mvnPath
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|sysOutput
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|sysOutput
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
name|libOutput
operator|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// copy the file
name|Files
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|libOutput
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
comment|/* a symlink could be used instead                                  if (Files.notExists(libOutput, LinkOption.NOFOLLOW_LINKS)) {                                     try {                                         Files.createSymbolicLink(libOutput, libOutput.getParent().relativize(sysOutput));                                     } catch (FileSystemException e) {                                         Files.copy(input, libOutput, StandardCopyOption.REPLACE_EXISTING);                                     }                                 }                                 */
block|}
block|}
else|else
block|{
name|Path
name|output
init|=
name|homeDirectory
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|input
argument_list|,
name|output
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|export
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_EXPORT
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|delegate
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|clause
operator|.
name|getDirective
argument_list|(
name|LIBRARY_CLAUSE_DELEGATE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|export
operator|||
name|delegate
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|getHeaders
argument_list|(
name|provider
argument_list|)
decl_stmt|;
name|String
name|packages
init|=
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|packages
operator|!=
literal|null
condition|)
block|{
name|Clause
index|[]
name|clauses
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseHeader
argument_list|(
name|packages
argument_list|)
decl_stmt|;
if|if
condition|(
name|export
condition|)
block|{
name|String
name|val
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
decl_stmt|;
for|for
control|(
name|Clause
name|clause
range|:
name|clauses
control|)
block|{
name|val
operator|+=
literal|","
operator|+
name|clause
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|config
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegate
condition|)
block|{
name|String
name|val
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|)
decl_stmt|;
for|for
control|(
name|Clause
name|clause
range|:
name|clauses
control|)
block|{
name|val
operator|+=
literal|","
operator|+
name|clause
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|config
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|installStage
parameter_list|(
name|Profile
name|installedProfile
parameter_list|,
name|Set
argument_list|<
name|Feature
argument_list|>
name|allBootFeatures
parameter_list|)
throws|throws
name|Exception
block|{
comment|//
comment|// Handle installed profiles
comment|//
name|Profile
name|installedOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|installedProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|installedEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|installedOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
comment|// Load startup repositories
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|installedRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|installedEffective
operator|.
name|getRepositories
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|allInstalledFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|installedRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|allInstalledFeatures
operator|.
name|addAll
argument_list|(
name|repo
operator|.
name|getFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Feature
argument_list|>
name|installedFeatures
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add boot features for search
name|allInstalledFeatures
operator|.
name|addAll
argument_list|(
name|allBootFeatures
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|feature
range|:
name|installedEffective
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|addFeatures
argument_list|(
name|installedFeatures
argument_list|,
name|allInstalledFeatures
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Feature
name|feature
range|:
name|installedFeatures
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|installArtifact
argument_list|(
name|downloader
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|cond
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|installArtifact
argument_list|(
name|downloader
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|location
range|:
name|installedEffective
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|downloader
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|Feature
argument_list|>
name|bootStage
parameter_list|(
name|Profile
name|bootProfile
parameter_list|,
name|Profile
name|startupEffective
parameter_list|)
throws|throws
name|Exception
block|{
comment|//
comment|// Handle boot profiles
comment|//
name|Profile
name|bootOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|bootProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|bootEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|bootOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Load startup repositories
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|bootRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|bootEffective
operator|.
name|getRepositories
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|allBootFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Features
name|repo
range|:
name|bootRepositories
operator|.
name|values
argument_list|()
control|)
block|{
name|allBootFeatures
operator|.
name|addAll
argument_list|(
name|repo
operator|.
name|getFeature
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Generate a global feature
name|Map
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|generatedDep
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Feature
name|generated
init|=
operator|new
name|Feature
argument_list|()
decl_stmt|;
name|generated
operator|.
name|setName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add feature dependencies
for|for
control|(
name|String
name|dependency
range|:
name|bootEffective
operator|.
name|getFeatures
argument_list|()
control|)
block|{
name|Dependency
name|dep
init|=
name|generatedDep
operator|.
name|get
argument_list|(
name|dependency
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
name|dep
operator|=
name|createDependency
argument_list|(
name|dependency
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|generatedDep
operator|.
name|put
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|.
name|setDependency
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Add bundles
for|for
control|(
name|String
name|location
range|:
name|bootEffective
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|location
operator|=
name|location
operator|.
name|replace
argument_list|(
literal|"profile:"
argument_list|,
literal|"file:etc/"
argument_list|)
expr_stmt|;
name|Bundle
name|bun
init|=
operator|new
name|Bundle
argument_list|()
decl_stmt|;
name|bun
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getBundle
argument_list|()
operator|.
name|add
argument_list|(
name|bun
argument_list|)
expr_stmt|;
block|}
name|Features
name|rep
init|=
operator|new
name|Features
argument_list|()
decl_stmt|;
name|rep
operator|.
name|setName
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|getRepository
argument_list|()
operator|.
name|addAll
argument_list|(
name|bootEffective
operator|.
name|getRepositories
argument_list|()
argument_list|)
expr_stmt|;
name|rep
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|allBootFeatures
operator|.
name|add
argument_list|(
name|generated
argument_list|)
expr_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
comment|// Compute startup feature dependencies
name|Set
argument_list|<
name|Feature
argument_list|>
name|bootFeatures
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|addFeatures
argument_list|(
name|bootFeatures
argument_list|,
name|allBootFeatures
argument_list|,
name|generated
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|feature
range|:
name|bootFeatures
control|)
block|{
comment|// the feature is a startup feature, updating startup.properties file
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Feature "
operator|+
name|feature
operator|.
name|getName
argument_list|()
operator|+
literal|" is defined as a boot feature"
argument_list|)
expr_stmt|;
comment|// add the feature in the system folder
name|Set
argument_list|<
name|String
argument_list|>
name|locations
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|feature
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|Bundle
name|bundle
range|:
name|cond
operator|.
name|getBundle
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ignoreDependencyFlag
operator|||
operator|!
name|bundle
operator|.
name|isDependency
argument_list|()
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|bundle
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Build optional features and known prerequisites
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|prereqs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"blueprint:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"deployer"
argument_list|,
literal|"aries-blueprint"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"spring:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"deployer"
argument_list|,
literal|"spring"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"wrap:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"wrap"
argument_list|)
argument_list|)
expr_stmt|;
name|prereqs
operator|.
name|put
argument_list|(
literal|"war:"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"war"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|location
range|:
name|locations
control|)
block|{
name|installArtifact
argument_list|(
name|downloader
argument_list|,
name|location
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|prereqs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|prereq
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|Dependency
name|dep
init|=
name|generatedDep
operator|.
name|get
argument_list|(
name|prereq
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|==
literal|null
condition|)
block|{
name|dep
operator|=
operator|new
name|Dependency
argument_list|()
expr_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|prereq
argument_list|)
expr_stmt|;
name|generated
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|generatedDep
operator|.
name|put
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|,
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|.
name|setPrerequisite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Install config files
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|feature
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|downloader
argument_list|,
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Conditional
name|cond
range|:
name|feature
operator|.
name|getConditional
argument_list|()
control|)
block|{
for|for
control|(
name|ConfigFile
name|configFile
range|:
name|cond
operator|.
name|getConfigfile
argument_list|()
control|)
block|{
name|installArtifact
argument_list|(
name|downloader
argument_list|,
name|configFile
operator|.
name|getLocation
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Install libraries
name|List
argument_list|<
name|String
argument_list|>
name|libraries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Library
name|library
range|:
name|feature
operator|.
name|getLibraries
argument_list|()
control|)
block|{
name|String
name|lib
init|=
name|library
operator|.
name|getLocation
argument_list|()
operator|+
literal|";type:="
operator|+
name|library
operator|.
name|getType
argument_list|()
operator|+
literal|";export:="
operator|+
name|library
operator|.
name|isExport
argument_list|()
operator|+
literal|";delegate:="
operator|+
name|library
operator|.
name|isDelegate
argument_list|()
decl_stmt|;
name|libraries
operator|.
name|add
argument_list|(
name|lib
argument_list|)
expr_stmt|;
block|}
name|Path
name|configPropertiesPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"config.properties"
argument_list|)
decl_stmt|;
name|Properties
name|configProperties
init|=
operator|new
name|Properties
argument_list|(
name|configPropertiesPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|downloadLibraries
argument_list|(
name|downloader
argument_list|,
name|configProperties
argument_list|,
name|libraries
argument_list|)
expr_stmt|;
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Reformat clauses
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|configProperties
argument_list|,
name|Constants
operator|.
name|FRAMEWORK_BOOTDELEGATION
argument_list|)
expr_stmt|;
name|configProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|// If there are bundles to install, we can't use the boot features only
comment|// so keep the generated feature
name|Path
name|featuresCfgFile
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"org.apache.karaf.features.cfg"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|generated
operator|.
name|getBundle
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|output
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
name|rep
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|JaxbUtil
operator|.
name|marshal
argument_list|(
name|rep
argument_list|,
name|baos
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
decl_stmt|;
name|String
name|repoUrl
decl_stmt|;
if|if
condition|(
name|karafVersion
operator|==
name|KarafVersion
operator|.
name|v24
condition|)
block|{
name|String
name|str
init|=
name|baos
operator|.
name|toString
argument_list|()
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|replace
argument_list|(
literal|"http://karaf.apache.org/xmlns/features/v1.3.0"
argument_list|,
literal|"http://karaf.apache.org/xmlns/features/v1.2.0"
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|" dependency=\".*?\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|" prerequisite=\".*?\""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|rep
operator|.
name|getFeature
argument_list|()
control|)
block|{
for|for
control|(
name|Dependency
name|d
range|:
name|f
operator|.
name|getFeature
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|.
name|isPrerequisite
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|startupEffective
operator|.
name|getFeatures
argument_list|()
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Feature "
operator|+
name|d
operator|.
name|getName
argument_list|()
operator|+
literal|" is a prerequisite and should be installed as a startup feature."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|repoUrl
operator|=
literal|"file:etc/"
operator|+
name|output
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bais
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|repoUrl
operator|=
literal|"file:${karaf.home}/etc/"
operator|+
name|output
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|Files
operator|.
name|copy
argument_list|(
name|bais
argument_list|,
name|output
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|(
name|featuresCfgFile
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|repoUrl
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|generated
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|repos
init|=
name|getRepos
argument_list|(
name|rep
argument_list|)
decl_stmt|;
name|String
name|boot
init|=
name|getBootFeatures
argument_list|(
name|generatedDep
argument_list|)
decl_stmt|;
name|Properties
name|featuresProperties
init|=
operator|new
name|Properties
argument_list|(
name|featuresCfgFile
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_REPOSITORIES
argument_list|,
name|repos
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|put
argument_list|(
name|FEATURES_BOOT
argument_list|,
name|boot
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|featuresProperties
argument_list|,
name|FEATURES_REPOSITORIES
argument_list|)
expr_stmt|;
name|reformatClauses
argument_list|(
name|featuresProperties
argument_list|,
name|FEATURES_BOOT
argument_list|)
expr_stmt|;
name|featuresProperties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|allBootFeatures
return|;
block|}
specifier|private
name|String
name|getRepos
parameter_list|(
name|Features
name|rep
parameter_list|)
block|{
name|StringBuilder
name|repos
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|repo
range|:
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|rep
operator|.
name|getRepository
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|repos
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|repos
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|repos
operator|.
name|append
argument_list|(
name|repo
argument_list|)
expr_stmt|;
block|}
return|return
name|repos
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getBootFeatures
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Dependency
argument_list|>
name|generatedDep
parameter_list|)
block|{
name|StringBuilder
name|boot
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Dependency
name|dep
range|:
name|generatedDep
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|isPrerequisite
argument_list|()
condition|)
block|{
if|if
condition|(
name|boot
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boot
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|boot
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|boot
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: for dependencies, we'd need to resolve the features completely
for|for
control|(
name|Dependency
name|dep
range|:
name|generatedDep
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dep
operator|.
name|isPrerequisite
argument_list|()
operator|&&
operator|!
name|dep
operator|.
name|isDependency
argument_list|()
condition|)
block|{
if|if
condition|(
name|boot
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|boot
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Feature
operator|.
name|DEFAULT_VERSION
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|karafVersion
operator|==
name|KarafVersion
operator|.
name|v4x
condition|)
block|{
name|boot
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boot
operator|.
name|append
argument_list|(
literal|";version="
argument_list|)
expr_stmt|;
block|}
name|boot
operator|.
name|append
argument_list|(
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|boot
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Dependency
name|createDependency
parameter_list|(
name|String
name|dependency
parameter_list|)
block|{
name|Dependency
name|dep
decl_stmt|;
name|dep
operator|=
operator|new
name|Dependency
argument_list|()
expr_stmt|;
name|String
index|[]
name|split
init|=
name|dependency
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|dep
operator|.
name|setName
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|split
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|dep
operator|.
name|setVersion
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|dep
return|;
block|}
specifier|private
name|Profile
name|startupStage
parameter_list|(
name|Profile
name|startupProfile
parameter_list|)
throws|throws
name|Exception
block|{
comment|//
comment|// Compute startup
comment|//
name|Profile
name|startupOverlay
init|=
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|startupProfile
argument_list|,
name|allProfiles
argument_list|,
name|environment
argument_list|)
decl_stmt|;
name|Profile
name|startupEffective
init|=
name|Profiles
operator|.
name|getEffective
argument_list|(
name|startupOverlay
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Load startup repositories
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Loading repositories"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|startupRepositories
init|=
name|loadRepositories
argument_list|(
name|manager
argument_list|,
name|startupEffective
operator|.
name|getRepositories
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//
comment|// Resolve
comment|//
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Resolving features"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|bundles
init|=
name|resolve
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|startupRepositories
operator|.
name|values
argument_list|()
argument_list|,
name|startupEffective
operator|.
name|getFeatures
argument_list|()
argument_list|,
name|startupEffective
operator|.
name|getBundles
argument_list|()
argument_list|,
name|startupEffective
operator|.
name|getOverrides
argument_list|()
argument_list|,
name|startupEffective
operator|.
name|getOptionals
argument_list|()
argument_list|)
decl_stmt|;
comment|//
comment|// Generate startup.properties
comment|//
name|Properties
name|startup
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|startup
operator|.
name|setHeader
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"# Bundles to be started on startup, with startlevel"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|invertedStartupBundles
init|=
name|MapUtils
operator|.
name|invert
argument_list|(
name|bundles
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|invertedStartupBundles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|startLevel
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|location
range|:
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|useReferenceUrls
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|location
operator|=
literal|"file:"
operator|+
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
name|location
operator|=
literal|"reference:"
operator|+
name|location
expr_stmt|;
block|}
block|}
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
operator|&&
name|karafVersion
operator|==
name|KarafVersion
operator|.
name|v24
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startup
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|startLevel
argument_list|)
expr_stmt|;
block|}
block|}
name|Path
name|startupProperties
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"startup.properties"
argument_list|)
decl_stmt|;
name|startup
operator|.
name|save
argument_list|(
name|startupProperties
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|startupEffective
return|;
block|}
specifier|private
name|void
name|installArtifact
parameter_list|(
name|Downloader
name|downloader
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|Exception
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"== Installing artifact "
operator|+
name|location
argument_list|)
expr_stmt|;
name|location
operator|=
name|DownloadManagerHelper
operator|.
name|stripUrl
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
if|if
condition|(
name|location
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// for bad formed URL (like in Camel for mustache-compiler), we remove the trailing /
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|location
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|download
argument_list|(
name|location
argument_list|,
operator|new
name|DownloadCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
specifier|final
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
name|provider
operator|.
name|getUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|Blacklist
operator|.
name|isBundleBlacklisted
argument_list|(
name|blacklistedBundles
argument_list|,
name|uri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bundle "
operator|+
name|uri
operator|+
literal|" is blacklisted"
argument_list|)
throw|;
block|}
name|Path
name|path
init|=
name|pathFromProviderUrl
argument_list|(
name|uri
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|provider
init|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|path
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Ignoring artifact "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addFeatures
parameter_list|(
name|Set
argument_list|<
name|Feature
argument_list|>
name|startupFeatures
parameter_list|,
name|Set
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|,
name|String
name|featureSt
parameter_list|)
block|{
name|int
name|nbFound
init|=
literal|0
decl_stmt|;
name|Dependency
name|featureRef
init|=
name|createDependency
argument_list|(
name|featureSt
argument_list|)
decl_stmt|;
for|for
control|(
name|Feature
name|f
range|:
name|features
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|f
argument_list|,
name|featureRef
argument_list|)
condition|)
block|{
for|for
control|(
name|Dependency
name|dep
range|:
name|f
operator|.
name|getFeature
argument_list|()
control|)
block|{
name|addFeatures
argument_list|(
name|startupFeatures
argument_list|,
name|features
argument_list|,
name|getFeatureSt
argument_list|(
name|dep
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startupFeatures
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|nbFound
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nbFound
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find matching feature for "
operator|+
name|featureSt
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getFeatureSt
parameter_list|(
name|Dependency
name|dep
parameter_list|)
block|{
name|String
name|version
init|=
name|dep
operator|.
name|getVersion
argument_list|()
operator|==
literal|null
operator|||
literal|"0.0.0"
operator|.
name|equals
argument_list|(
name|dep
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|?
literal|""
else|:
literal|"/"
operator|+
name|dep
operator|.
name|getVersion
argument_list|()
decl_stmt|;
return|return
name|dep
operator|.
name|getName
argument_list|()
operator|+
name|version
return|;
block|}
comment|/**      * Checks if a given feature f matches the featureRef.      * TODO Need to also check for version ranges. Currently ranges are ignored and all features matching the name      * are copied in that case.      *        * @param f      * @param featureRef      * @return      */
specifier|private
name|boolean
name|matches
parameter_list|(
name|Feature
name|f
parameter_list|,
name|Dependency
name|featureRef
parameter_list|)
block|{
name|String
name|version
init|=
name|featureRef
operator|.
name|getVersion
argument_list|()
decl_stmt|;
return|return
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|featureRef
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
name|version
operator|==
literal|null
operator|||
name|version
operator|.
name|equals
argument_list|(
literal|"0.0.0"
argument_list|)
operator|||
name|version
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|||
name|f
operator|.
name|getVersion
argument_list|()
operator|.
name|equals
argument_list|(
name|version
argument_list|)
operator|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getStaged
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|data
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|staged
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|data
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|==
name|stage
condition|)
block|{
name|staged
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|staged
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getStagedRepositories
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|data
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|staged
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|data
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|data
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|stage
operator|==
name|stage
operator|||
name|data
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|.
name|stage
operator|==
name|Stage
operator|.
name|Startup
operator|&&
name|stage
operator|==
name|Stage
operator|.
name|Boot
condition|)
block|{
comment|// For boot stage, we also want the startup repositories
name|staged
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|staged
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loadRepositories
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|repositories
parameter_list|,
specifier|final
name|boolean
name|install
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Features
argument_list|>
name|loaded
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|blacklist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|blacklist
operator|.
name|addAll
argument_list|(
name|blacklistedBundles
argument_list|)
expr_stmt|;
name|blacklist
operator|.
name|addAll
argument_list|(
name|blacklistedFeatures
argument_list|)
expr_stmt|;
specifier|final
name|Clause
index|[]
name|clauses
init|=
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|manifest
operator|.
name|Parser
operator|.
name|parseClauses
argument_list|(
name|blacklist
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|blacklist
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|repository
range|:
name|repositories
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|repository
argument_list|,
operator|new
name|DownloadCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
specifier|final
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|install
condition|)
block|{
synchronized|synchronized
init|(
name|provider
init|)
block|{
name|Path
name|path
init|=
name|systemDirectory
operator|.
name|resolve
argument_list|(
name|pathFromProviderUrl
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|provider
operator|.
name|getFile
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|,
name|path
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|InputStream
name|is
init|=
name|provider
operator|.
name|open
argument_list|()
init|)
block|{
name|Features
name|featuresModel
init|=
name|JaxbUtil
operator|.
name|unmarshal
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|,
name|is
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|blacklistPolicy
operator|==
name|BlacklistPolicy
operator|.
name|Discard
condition|)
block|{
name|Blacklist
operator|.
name|blacklist
argument_list|(
name|featuresModel
argument_list|,
name|clauses
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|loaded
init|)
block|{
name|loaded
operator|.
name|put
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|,
name|featuresModel
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|innerRepository
range|:
name|featuresModel
operator|.
name|getRepository
argument_list|()
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|innerRepository
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|loaded
return|;
block|}
specifier|private
name|Profile
name|generateProfile
parameter_list|(
name|Stage
name|stage
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|profiles
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RepositoryInfo
argument_list|>
name|repositories
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|features
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Stage
argument_list|>
name|bundles
parameter_list|)
block|{
name|Profile
name|profile
init|=
name|ProfileBuilder
operator|.
name|Factory
operator|.
name|create
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setParents
argument_list|(
name|getStaged
argument_list|(
name|stage
argument_list|,
name|profiles
argument_list|)
argument_list|)
operator|.
name|setRepositories
argument_list|(
name|getStagedRepositories
argument_list|(
name|stage
argument_list|,
name|repositories
argument_list|)
argument_list|)
operator|.
name|setFeatures
argument_list|(
name|getStaged
argument_list|(
name|stage
argument_list|,
name|features
argument_list|)
argument_list|)
operator|.
name|setBundles
argument_list|(
name|getStaged
argument_list|(
name|stage
argument_list|,
name|bundles
argument_list|)
argument_list|)
operator|.
name|getProfile
argument_list|()
decl_stmt|;
name|allProfiles
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
return|return
name|profile
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|resolve
parameter_list|(
name|DownloadManager
name|manager
parameter_list|,
name|Resolver
name|resolver
parameter_list|,
name|Collection
argument_list|<
name|Features
argument_list|>
name|repositories
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|bundles
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|overrides
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|optionals
parameter_list|)
throws|throws
name|Exception
block|{
name|BundleRevision
name|systemBundle
init|=
name|getSystemBundle
argument_list|()
decl_stmt|;
name|AssemblyDeployCallback
name|callback
init|=
operator|new
name|AssemblyDeployCallback
argument_list|(
name|manager
argument_list|,
name|this
argument_list|,
name|systemBundle
argument_list|,
name|repositories
argument_list|)
decl_stmt|;
name|Deployer
name|deployer
init|=
operator|new
name|Deployer
argument_list|(
name|manager
argument_list|,
name|resolver
argument_list|,
name|callback
argument_list|)
decl_stmt|;
comment|// Install framework
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
name|createDeploymentRequest
argument_list|()
decl_stmt|;
comment|// Add overrides
name|request
operator|.
name|overrides
operator|.
name|addAll
argument_list|(
name|overrides
argument_list|)
expr_stmt|;
comment|// Add optional resources
specifier|final
name|List
argument_list|<
name|Resource
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Downloader
name|downloader
init|=
name|manager
operator|.
name|createDownloader
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|optional
range|:
name|optionals
control|)
block|{
name|downloader
operator|.
name|download
argument_list|(
name|optional
argument_list|,
operator|new
name|DownloadCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|ResourceBuilder
operator|.
name|build
argument_list|(
name|provider
operator|.
name|getUrl
argument_list|()
argument_list|,
name|getHeaders
argument_list|(
name|provider
argument_list|)
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|resources
init|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|downloader
operator|.
name|await
argument_list|()
expr_stmt|;
name|request
operator|.
name|globalRepository
operator|=
operator|new
name|BaseRepository
argument_list|(
name|resources
argument_list|)
expr_stmt|;
comment|// Install features
for|for
control|(
name|String
name|feature
range|:
name|features
control|)
block|{
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|bundle
range|:
name|bundles
control|)
block|{
name|MapUtils
operator|.
name|addToMapSet
argument_list|(
name|request
operator|.
name|requirements
argument_list|,
name|FeaturesService
operator|.
name|ROOT_REGION
argument_list|,
literal|"bundle:"
operator|+
name|bundle
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|prereqs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|deployer
operator|.
name|deploy
argument_list|(
name|callback
operator|.
name|getDeploymentState
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Deployer
operator|.
name|PartialDeploymentException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prereqs
operator|.
name|containsAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
condition|)
block|{
name|prereqs
operator|.
name|addAll
argument_list|(
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Deployment aborted due to loop in missing prerequisites: "
operator|+
name|e
operator|.
name|getMissing
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|callback
operator|.
name|getStartupBundles
argument_list|()
return|;
block|}
specifier|private
name|Deployer
operator|.
name|DeploymentRequest
name|createDeploymentRequest
parameter_list|()
block|{
name|Deployer
operator|.
name|DeploymentRequest
name|request
init|=
operator|new
name|Deployer
operator|.
name|DeploymentRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|bundleUpdateRange
operator|=
name|FeaturesService
operator|.
name|DEFAULT_BUNDLE_UPDATE_RANGE
expr_stmt|;
name|request
operator|.
name|featureResolutionRange
operator|=
name|FeaturesService
operator|.
name|DEFAULT_FEATURE_RESOLUTION_RANGE
expr_stmt|;
name|request
operator|.
name|overrides
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|request
operator|.
name|requirements
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|request
operator|.
name|stateChanges
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|request
operator|.
name|options
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|FeaturesService
operator|.
name|Option
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
specifier|private
name|BundleRevision
name|getSystemBundle
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|configPropPath
init|=
name|etcDirectory
operator|.
name|resolve
argument_list|(
literal|"config.properties"
argument_list|)
decl_stmt|;
name|Properties
name|configProps
init|=
name|PropertiesLoader
operator|.
name|loadPropertiesOrFail
argument_list|(
name|configPropPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|configProps
operator|.
name|put
argument_list|(
literal|"java.specification.version"
argument_list|,
name|javase
argument_list|)
expr_stmt|;
name|configProps
operator|.
name|substitute
argument_list|()
expr_stmt|;
name|Attributes
name|attributes
init|=
operator|new
name|Attributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_MANIFESTVERSION
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|,
literal|"system.bundle"
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|,
literal|"0.0.0"
argument_list|)
expr_stmt|;
name|String
name|exportPackages
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|configProps
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
condition|)
block|{
name|exportPackages
operator|+=
literal|","
operator|+
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMPACKAGES_EXTRA
argument_list|)
expr_stmt|;
block|}
name|exportPackages
operator|=
name|exportPackages
operator|.
name|replaceAll
argument_list|(
literal|",\\s*,"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|,
name|exportPackages
argument_list|)
expr_stmt|;
name|String
name|systemCaps
init|=
name|configProps
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|FRAMEWORK_SYSTEMCAPABILITIES
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|putValue
argument_list|(
name|Constants
operator|.
name|PROVIDE_CAPABILITY
argument_list|,
name|systemCaps
argument_list|)
expr_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FakeBundleRevision
argument_list|(
name|headers
argument_list|,
literal|"system-bundle"
argument_list|,
literal|0l
argument_list|)
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getHeaders
parameter_list|(
name|StreamProvider
name|provider
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|provider
operator|.
name|open
argument_list|()
init|)
block|{
name|ZipInputStream
name|zis
init|=
operator|new
name|ZipInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|ZipEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|zis
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|MANIFEST_NAME
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Attributes
name|attributes
init|=
operator|new
name|Manifest
argument_list|(
name|zis
argument_list|)
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|attr
range|:
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|provider
operator|.
name|getUrl
argument_list|()
operator|+
literal|" does not contain a manifest"
argument_list|)
throw|;
block|}
specifier|private
name|Path
name|pathFromProviderUrl
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|String
name|pathString
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
name|url
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"mvn:"
argument_list|)
condition|)
block|{
name|pathString
operator|=
name|Parser
operator|.
name|pathFromMaven
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pathString
operator|=
name|url
expr_stmt|;
block|}
return|return
name|systemDirectory
operator|.
name|resolve
argument_list|(
name|pathString
argument_list|)
return|;
block|}
block|}
end_class

end_unit

