begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Utils
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Utils
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This immutable profile implementation.  */
end_comment

begin_class
specifier|final
class|class
name|ProfileImpl
implements|implements
name|Profile
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|ALLOWED_PROFILE_NAMES_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[A-Za-z0-9]+[\\.A-Za-z0-9_-]*$"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|profileId
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attributes
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|parents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|fileConfigurations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|configurations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isOverlay
decl_stmt|;
specifier|private
name|int
name|hash
decl_stmt|;
comment|// Only the {@link ProfileBuilder} should construct this
name|ProfileImpl
parameter_list|(
name|String
name|profileId
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parents
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|fileConfigs
parameter_list|,
name|boolean
name|isOverlay
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|profileId
argument_list|,
literal|"profileId is null"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|parents
argument_list|,
literal|"parents is null"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fileConfigs
argument_list|,
literal|"fileConfigs is null"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ALLOWED_PROFILE_NAMES_PATTERN
operator|.
name|matcher
argument_list|(
name|profileId
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|,
literal|"Profile id '"
operator|+
name|profileId
operator|+
literal|"' is invalid. Profile id must be: lower-case letters, numbers, and . _ or - characters"
argument_list|)
expr_stmt|;
name|this
operator|.
name|profileId
operator|=
name|profileId
expr_stmt|;
name|this
operator|.
name|isOverlay
operator|=
name|isOverlay
expr_stmt|;
comment|// Parents
name|this
operator|.
name|parents
operator|.
name|addAll
argument_list|(
name|parents
argument_list|)
expr_stmt|;
comment|// File configurations and derived configurations
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|fileConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|fileKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|fileConfigurations
operator|.
name|put
argument_list|(
name|fileKey
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileKey
operator|.
name|endsWith
argument_list|(
name|Profile
operator|.
name|PROPERTIES_SUFFIX
argument_list|)
condition|)
block|{
name|String
name|pid
init|=
name|fileKey
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileKey
operator|.
name|indexOf
argument_list|(
name|Profile
operator|.
name|PROPERTIES_SUFFIX
argument_list|)
argument_list|)
decl_stmt|;
name|configurations
operator|.
name|put
argument_list|(
name|pid
argument_list|,
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|Utils
operator|.
name|toProperties
argument_list|(
name|bytes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Attributes are agent configuration with prefix 'attribute.'
name|attributes
operator|=
name|getPrefixedMap
argument_list|(
name|ATTRIBUTE_PREFIX
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|profileId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getConfig
parameter_list|()
block|{
return|return
name|getPrefixedMap
argument_list|(
name|CONFIG_PREFIX
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSystem
parameter_list|()
block|{
return|return
name|getPrefixedMap
argument_list|(
name|SYSTEM_PREFIX
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPrefixedMap
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|agentConfig
init|=
name|configurations
operator|.
name|get
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
if|if
condition|(
name|agentConfig
operator|!=
literal|null
condition|)
block|{
name|int
name|prefixLength
init|=
name|prefix
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|agentConfig
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|prefixLength
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLibraries
parameter_list|()
block|{
return|return
name|getContainerConfigList
argument_list|(
name|ConfigListType
operator|.
name|LIBRARIES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBundles
parameter_list|()
block|{
return|return
name|getContainerConfigList
argument_list|(
name|ConfigListType
operator|.
name|BUNDLES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|getContainerConfigList
argument_list|(
name|ConfigListType
operator|.
name|FEATURES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRepositories
parameter_list|()
block|{
return|return
name|getContainerConfigList
argument_list|(
name|ConfigListType
operator|.
name|REPOSITORIES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOverrides
parameter_list|()
block|{
return|return
name|getContainerConfigList
argument_list|(
name|ConfigListType
operator|.
name|OVERRIDES
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getOptionals
parameter_list|()
block|{
return|return
name|getContainerConfigList
argument_list|(
name|ConfigListType
operator|.
name|OPTIONALS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParentIds
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|parents
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
name|parseBoolean
argument_list|(
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|ABSTRACT
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isHidden
parameter_list|()
block|{
return|return
name|parseBoolean
argument_list|(
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|HIDDEN
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Boolean
name|parseBoolean
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|instanceof
name|Boolean
condition|?
operator|(
name|Boolean
operator|)
name|obj
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isOverlay
parameter_list|()
block|{
return|return
name|isOverlay
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|getFileConfigurations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|fileConfigurations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getConfigurationFileNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|fileConfigurations
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getFileConfiguration
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
return|return
name|fileConfigurations
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|getConfigurations
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|configurations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getConfiguration
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|configurations
operator|.
name|get
argument_list|(
name|pid
argument_list|)
decl_stmt|;
name|config
operator|=
name|config
operator|!=
literal|null
condition|?
name|config
else|:
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|config
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getContainerConfigList
parameter_list|(
name|ConfigListType
name|type
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|containerProps
init|=
name|getConfiguration
argument_list|(
name|Profile
operator|.
name|INTERNAL_PID
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rc
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|type
operator|+
literal|"."
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|containerProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|e
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
name|CRC32
name|crc
init|=
operator|new
name|CRC32
argument_list|()
decl_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|profileId
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fileConfigurations
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|crc
operator|.
name|update
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|crc
operator|.
name|update
argument_list|(
name|fileConfigurations
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hash
operator|=
operator|(
name|int
operator|)
name|crc
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ProfileImpl
operator|)
condition|)
return|return
literal|false
return|;
name|ProfileImpl
name|other
init|=
operator|(
name|ProfileImpl
operator|)
name|obj
decl_stmt|;
comment|// Equality based on identity
return|return
name|profileId
operator|.
name|equals
argument_list|(
name|other
operator|.
name|profileId
argument_list|)
operator|&&
name|fileConfigurations
operator|.
name|equals
argument_list|(
name|other
operator|.
name|fileConfigurations
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Profile[id="
operator|+
name|profileId
operator|+
literal|",attrs="
operator|+
name|getAttributes
argument_list|()
operator|+
literal|"]"
return|;
block|}
enum|enum
name|ConfigListType
block|{
name|BUNDLES
argument_list|(
literal|"bundle"
argument_list|)
block|,
name|FEATURES
argument_list|(
literal|"feature"
argument_list|)
block|,
name|LIBRARIES
argument_list|(
literal|"library"
argument_list|)
block|,
name|OPTIONALS
argument_list|(
literal|"optional"
argument_list|)
block|,
name|OVERRIDES
argument_list|(
literal|"override"
argument_list|)
block|,
name|REPOSITORIES
argument_list|(
literal|"repository"
argument_list|)
block|;
specifier|private
name|String
name|value
decl_stmt|;
name|ConfigListType
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

