begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|LockHandle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|PlaceholderResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|Profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|ProfileService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Utils
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Utils
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|profile
operator|.
name|impl
operator|.
name|Utils
operator|.
name|join
import|;
end_import

begin_class
specifier|public
class|class
name|ProfileServiceImpl
implements|implements
name|ProfileService
block|{
specifier|private
specifier|static
specifier|final
name|long
name|ACQUIRE_LOCK_TIMEOUT
init|=
literal|25
operator|*
literal|1000L
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|PlaceholderResolver
argument_list|>
name|resolvers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Path
name|profilesDirectory
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|cache
decl_stmt|;
specifier|public
name|ProfileServiceImpl
parameter_list|(
name|Path
name|profilesDirectory
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|profilesDirectory
operator|=
name|profilesDirectory
expr_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|profilesDirectory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LockHandle
name|acquireWriteLock
parameter_list|()
block|{
return|return
name|acquireLock
argument_list|(
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
argument_list|,
literal|"Cannot obtain profile write lock in time"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LockHandle
name|acquireReadLock
parameter_list|()
block|{
return|return
name|acquireLock
argument_list|(
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
argument_list|,
literal|"Cannot obtain profile read lock in time"
argument_list|)
return|;
block|}
specifier|protected
name|LockHandle
name|acquireLock
parameter_list|(
specifier|final
name|Lock
name|lock
parameter_list|,
name|String
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|lock
operator|.
name|tryLock
argument_list|(
name|ACQUIRE_LOCK_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
operator|new
name|LockHandle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|protected
name|ReadWriteLock
name|getLock
parameter_list|()
block|{
return|return
name|readWriteLock
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerResolver
parameter_list|(
name|PlaceholderResolver
name|resolver
parameter_list|)
block|{
name|resolvers
operator|.
name|add
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unregisterResolver
parameter_list|(
name|PlaceholderResolver
name|resolver
parameter_list|)
block|{
name|resolvers
operator|.
name|remove
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|createProfile
parameter_list|(
name|Profile
name|profile
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|profile
argument_list|,
literal|"profile is null"
argument_list|)
expr_stmt|;
try|try
init|(
name|LockHandle
name|lock
init|=
name|acquireWriteLock
argument_list|()
init|)
block|{
name|String
name|profileId
init|=
name|profile
operator|.
name|getId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|hasProfile
argument_list|(
name|profileId
argument_list|)
argument_list|,
literal|"Profile already exists: "
operator|+
name|profileId
argument_list|)
expr_stmt|;
name|createOrUpdateProfile
argument_list|(
literal|null
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|updateProfile
parameter_list|(
name|Profile
name|profile
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|profile
argument_list|,
literal|"profile is null"
argument_list|)
expr_stmt|;
try|try
init|(
name|LockHandle
name|lock
init|=
name|acquireWriteLock
argument_list|()
init|)
block|{
specifier|final
name|String
name|profileId
init|=
name|profile
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Profile
name|lastProfile
init|=
name|getRequiredProfile
argument_list|(
name|profileId
argument_list|)
decl_stmt|;
name|createOrUpdateProfile
argument_list|(
name|lastProfile
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|boolean
name|hasProfile
parameter_list|(
name|String
name|profileId
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|profileId
argument_list|,
literal|"profileId is null"
argument_list|)
expr_stmt|;
try|try
init|(
name|LockHandle
name|lock
init|=
name|acquireReadLock
argument_list|()
init|)
block|{
name|Profile
name|profile
init|=
name|getProfileFromCache
argument_list|(
name|profileId
argument_list|)
decl_stmt|;
return|return
name|profile
operator|!=
literal|null
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|Profile
name|getProfile
parameter_list|(
name|String
name|profileId
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|profileId
argument_list|,
literal|"profileId is null"
argument_list|)
expr_stmt|;
try|try
init|(
name|LockHandle
name|lock
init|=
name|acquireReadLock
argument_list|()
init|)
block|{
return|return
name|getProfileFromCache
argument_list|(
name|profileId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|Profile
name|getRequiredProfile
parameter_list|(
name|String
name|profileId
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|profileId
argument_list|,
literal|"profileId is null"
argument_list|)
expr_stmt|;
try|try
init|(
name|LockHandle
name|lock
init|=
name|acquireReadLock
argument_list|()
init|)
block|{
name|Profile
name|profile
init|=
name|getProfileFromCache
argument_list|(
name|profileId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|profile
argument_list|,
literal|"Profile does not exist: "
operator|+
name|profileId
argument_list|)
expr_stmt|;
return|return
name|profile
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getProfiles
parameter_list|()
block|{
try|try
init|(
name|LockHandle
name|lock
init|=
name|acquireReadLock
argument_list|()
init|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|profiles
init|=
name|getProfilesFromCache
argument_list|()
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|profiles
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|deleteProfile
parameter_list|(
name|String
name|profileId
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|profileId
argument_list|,
literal|"profileId is null"
argument_list|)
expr_stmt|;
try|try
init|(
name|LockHandle
name|lock
init|=
name|acquireWriteLock
argument_list|()
init|)
block|{
specifier|final
name|Profile
name|lastProfile
init|=
name|getRequiredProfile
argument_list|(
name|profileId
argument_list|)
decl_stmt|;
name|deleteProfileFromCache
argument_list|(
name|lastProfile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Profile
name|getOverlayProfile
parameter_list|(
name|Profile
name|profile
parameter_list|)
block|{
return|return
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|profile
argument_list|,
name|loadCache
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Profile
name|getOverlayProfile
parameter_list|(
name|Profile
name|profile
parameter_list|,
name|String
name|environment
parameter_list|)
block|{
return|return
name|Profiles
operator|.
name|getOverlay
argument_list|(
name|profile
argument_list|,
name|loadCache
argument_list|()
argument_list|,
name|environment
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Profile
name|getEffectiveProfile
parameter_list|(
name|Profile
name|profile
parameter_list|)
block|{
return|return
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|,
name|resolvers
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Profile
name|getEffectiveProfile
parameter_list|(
name|Profile
name|profile
parameter_list|,
name|boolean
name|defaultsToEmptyString
parameter_list|)
block|{
return|return
name|Profiles
operator|.
name|getEffective
argument_list|(
name|profile
argument_list|,
name|resolvers
argument_list|,
name|defaultsToEmptyString
argument_list|)
return|;
block|}
specifier|protected
name|void
name|createOrUpdateProfile
parameter_list|(
name|Profile
name|lastProfile
parameter_list|,
name|Profile
name|profile
parameter_list|)
block|{
if|if
condition|(
name|lastProfile
operator|!=
literal|null
condition|)
block|{
name|deleteProfileFromCache
argument_list|(
name|lastProfile
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|loadCache
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|parentId
range|:
name|profile
operator|.
name|getParentIds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cache
operator|.
name|containsKey
argument_list|(
name|parentId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Parent profile "
operator|+
name|parentId
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
name|Profiles
operator|.
name|writeProfile
argument_list|(
name|profilesDirectory
argument_list|,
name|profile
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|profile
operator|.
name|getId
argument_list|()
argument_list|,
name|profile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error writing profiles"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Profile
name|getProfileFromCache
parameter_list|(
name|String
name|profileId
parameter_list|)
block|{
return|return
name|loadCache
argument_list|()
operator|.
name|get
argument_list|(
name|profileId
argument_list|)
return|;
block|}
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|getProfilesFromCache
parameter_list|()
block|{
return|return
name|loadCache
argument_list|()
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|protected
name|void
name|deleteProfileFromCache
parameter_list|(
name|Profile
name|lastProfile
parameter_list|)
block|{
name|loadCache
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Profile
name|p
range|:
name|cache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getParentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|lastProfile
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|children
operator|.
name|add
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Profile "
operator|+
name|lastProfile
operator|.
name|getId
argument_list|()
operator|+
literal|" is a parent of "
operator|+
name|join
argument_list|(
literal|", "
argument_list|,
name|children
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|Profiles
operator|.
name|deleteProfile
argument_list|(
name|profilesDirectory
argument_list|,
name|lastProfile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|lastProfile
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|cache
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error deleting profiles"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Profile
argument_list|>
name|loadCache
parameter_list|()
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|cache
operator|=
name|Profiles
operator|.
name|loadProfiles
argument_list|(
name|profilesDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Error reading profiles"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|cache
return|;
block|}
block|}
end_class

end_unit

