begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|kittests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|ArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|tar
operator|.
name|TarArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|archivers
operator|.
name|zip
operator|.
name|ZipArchiveInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|compress
operator|.
name|compressors
operator|.
name|gzip
operator|.
name|GzipCompressorInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|process
operator|.
name|PumpStreamHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Helper
block|{
specifier|private
name|Helper
parameter_list|()
block|{     }
specifier|public
specifier|static
class|class
name|Instance
block|{
specifier|public
specifier|static
specifier|final
name|String
name|STOPPED
init|=
literal|"Stopped"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STARTING
init|=
literal|"Starting"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STARTED
init|=
literal|"Started"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ERROR
init|=
literal|"Error"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT
init|=
literal|"karaf.shutdown.port"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_HOST
init|=
literal|"karaf.shutdown.host"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT_FILE
init|=
literal|"karaf.shutdown.port.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_COMMAND
init|=
literal|"karaf.shutdown.command"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PID_FILE
init|=
literal|"karaf.shutdown.pid.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SHUTDOWN_COMMAND
init|=
literal|"SHUTDOWN"
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|Process
name|process
decl_stmt|;
specifier|public
name|Instance
parameter_list|(
name|String
name|location
parameter_list|,
name|Process
name|process
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|process
operator|=
name|process
expr_stmt|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSshPort
parameter_list|()
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc/org.apache.karaf.shell.cfg"
argument_list|)
decl_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|loc
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"sshPort"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|loc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|String
name|getState
parameter_list|()
block|{
name|int
name|port
init|=
name|getSshPort
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|()
operator|||
name|port
operator|<=
literal|0
condition|)
block|{
return|return
name|ERROR
return|;
block|}
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|==
literal|null
condition|)
block|{
return|return
name|STOPPED
return|;
block|}
else|else
block|{
try|try
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|STARTED
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|STARTING
return|;
block|}
block|}
specifier|protected
name|void
name|checkProcess
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|process
operator|.
name|exitValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|process
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalThreadStateException
name|e
parameter_list|)
block|{                 }
block|}
block|}
specifier|private
specifier|static
name|String
name|getProperty
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|deflt
parameter_list|)
block|{
name|String
name|res
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|res
operator|=
name|deflt
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
comment|// Try a clean shutdown
name|cleanShutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|cleanShutdown
parameter_list|()
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|URL
name|configPropURL
init|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.base"
argument_list|,
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.home"
argument_list|,
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.data"
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
argument_list|,
literal|"data"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|InterpolationHelper
operator|.
name|performSubstitution
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|getProperty
argument_list|(
name|props
argument_list|,
name|KARAF_SHUTDOWN_PORT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
name|KARAF_SHUTDOWN_HOST
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|String
name|portFile
init|=
name|props
operator|.
name|get
argument_list|(
name|KARAF_SHUTDOWN_PORT_FILE
argument_list|)
decl_stmt|;
name|String
name|shutdown
init|=
name|getProperty
argument_list|(
name|props
argument_list|,
name|KARAF_SHUTDOWN_COMMAND
argument_list|,
name|DEFAULT_SHUTDOWN_COMMAND
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
operator|&&
name|portFile
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|portFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|portStr
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portStr
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// We found the port, try to send the command
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|shutdown
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|5000
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkProcess
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|t
operator|&&
name|process
operator|!=
literal|null
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|loadPropertiesFile
parameter_list|(
name|URL
name|configPropURL
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read the properties file.
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|configPropURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|configProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Map
operator|)
name|configProps
return|;
block|}
block|}
specifier|protected
specifier|static
specifier|final
name|boolean
name|IS_WINDOWS_OS
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"windows"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|extractKit
parameter_list|(
name|File
name|targetDir
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindowsOs
argument_list|()
condition|)
block|{
name|extractWindowsKit
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extractUnixKit
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isWindowsOs
parameter_list|()
block|{
return|return
name|IS_WINDOWS_OS
return|;
block|}
specifier|protected
specifier|static
name|void
name|extractWindowsKit
parameter_list|(
name|File
name|targetDir
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|Helper
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/karaf.zip"
argument_list|)
decl_stmt|;
name|extract
argument_list|(
operator|new
name|ZipArchiveInputStream
argument_list|(
name|is
argument_list|)
argument_list|,
name|targetDir
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|extractUnixKit
parameter_list|(
name|File
name|targetDir
parameter_list|)
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|Helper
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/karaf.tar.gz"
argument_list|)
decl_stmt|;
name|extract
argument_list|(
operator|new
name|TarArchiveInputStream
argument_list|(
operator|new
name|GzipCompressorInputStream
argument_list|(
name|is
argument_list|)
argument_list|)
argument_list|,
name|targetDir
argument_list|)
expr_stmt|;
name|File
name|bin
init|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
literal|"bin"
argument_list|)
decl_stmt|;
name|String
index|[]
name|files
init|=
name|bin
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|args
argument_list|,
literal|"chmod"
argument_list|,
literal|"+x"
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|args
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|Process
name|chmod
init|=
operator|new
name|ProcessBuilder
argument_list|()
operator|.
name|directory
argument_list|(
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
literal|"bin"
argument_list|)
argument_list|)
operator|.
name|command
argument_list|(
name|args
argument_list|)
operator|.
name|start
argument_list|()
decl_stmt|;
name|PumpStreamHandler
name|pump
init|=
operator|new
name|PumpStreamHandler
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|pump
operator|.
name|attach
argument_list|(
name|chmod
argument_list|)
expr_stmt|;
name|pump
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForProcessEnd
argument_list|(
name|chmod
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|extract
parameter_list|(
name|ArchiveInputStream
name|is
parameter_list|,
name|File
name|targetDir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|targetDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|forceDelete
argument_list|(
name|targetDir
argument_list|)
expr_stmt|;
block|}
name|targetDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ArchiveEntry
name|entry
init|=
name|is
operator|.
name|getNextEntry
argument_list|()
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
name|entry
operator|=
name|is
operator|.
name|getNextEntry
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Process
name|launchScript
parameter_list|(
name|File
name|homeDir
parameter_list|,
name|String
name|script
parameter_list|,
name|String
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|directory
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|isWindowsOs
argument_list|()
condition|)
block|{
name|builder
operator|.
name|command
argument_list|(
literal|"cmd.exe"
argument_list|,
literal|"/c"
argument_list|,
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"bin\\"
operator|+
name|script
operator|+
literal|".bat"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|command
argument_list|(
literal|"/bin/sh"
argument_list|,
operator|new
name|File
argument_list|(
name|homeDir
argument_list|,
literal|"bin/"
operator|+
name|script
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Process
name|process
init|=
name|builder
operator|.
name|start
argument_list|()
decl_stmt|;
name|PumpStreamHandler
name|pump
init|=
operator|new
name|PumpStreamHandler
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|pump
operator|.
name|attach
argument_list|(
name|process
argument_list|)
expr_stmt|;
name|pump
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|process
return|;
block|}
specifier|public
specifier|static
name|Instance
name|startKaraf
parameter_list|(
name|File
name|home
parameter_list|)
throws|throws
name|Exception
block|{
name|Process
name|karaf
init|=
name|launchScript
argument_list|(
name|home
argument_list|,
literal|"karaf"
argument_list|,
literal|"server"
argument_list|)
decl_stmt|;
return|return
operator|new
name|Instance
argument_list|(
name|home
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|karaf
argument_list|)
return|;
comment|//        InstanceImpl instance = new InstanceImpl(null, "root", home.getAbsolutePath(), null, true);
comment|//        instance.attach(karaf.getPid());
comment|//        return instance;
block|}
specifier|public
specifier|static
name|void
name|waitForKarafStarted
parameter_list|(
name|Instance
name|karaf
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timeout
operator|/
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Instance
operator|.
name|STARTING
operator|.
name|equals
argument_list|(
name|karaf
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|Instance
operator|.
name|STARTED
operator|.
name|equals
argument_list|(
name|karaf
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Karaf did not start correctly"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|waitForKarafStopped
parameter_list|(
name|Instance
name|karaf
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|waitForProcessEnd
argument_list|(
name|karaf
operator|.
name|process
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|waitForProcessEnd
parameter_list|(
name|Process
name|process
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timeout
operator|/
literal|100
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|process
operator|.
name|exitValue
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IllegalThreadStateException
name|e
parameter_list|)
block|{             }
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Process is still running"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|void
name|kill
parameter_list|(
name|Process
name|process
parameter_list|)
block|{
try|try
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
block|}
specifier|public
specifier|static
name|void
name|kill
parameter_list|(
name|Instance
name|instance
parameter_list|)
block|{
try|try
block|{
name|instance
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

