begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|examples
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|KarafTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|ExamReactorStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|PerClass
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
annotation|@
name|ExamReactorStrategy
argument_list|(
name|PerClass
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JpaExampleTest
extends|extends
name|KarafTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|RolePrincipal
index|[]
name|ADMIN_ROLES
init|=
block|{
operator|new
name|RolePrincipal
argument_list|(
name|BundleService
operator|.
name|SYSTEM_BUNDLES_ROLE
argument_list|)
block|,
operator|new
name|RolePrincipal
argument_list|(
literal|"admin"
argument_list|)
block|,
operator|new
name|RolePrincipal
argument_list|(
literal|"manager"
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|// adding jpa example features repository
name|addFeaturesRepository
argument_list|(
literal|"mvn:org.apache.karaf.examples/karaf-jpa-example-features/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.version"
argument_list|)
operator|+
literal|"/xml"
argument_list|)
expr_stmt|;
comment|// install the karaf-jpa-example-datasource& karaf-jpa-example-common
name|executeCommand
argument_list|(
literal|"feature:install karaf-jpa-example-datasource"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
name|executeCommand
argument_list|(
literal|"feature:install karaf-jpa-example-common"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
comment|// declarative service EclipseLink
name|executeCommand
argument_list|(
literal|"feature:install karaf-jpa-example-provider-ds-eclipselink"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
comment|// install the karaf-jpa-example-command feature
name|installAndAssertFeature
argument_list|(
literal|"karaf-jpa-example-command"
argument_list|)
expr_stmt|;
name|testCommand
argument_list|()
expr_stmt|;
name|executeCommand
argument_list|(
literal|"feature:uninstall karaf-jpa-example-provider-ds-eclipselink"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
comment|// declarative service Hibernate
name|executeCommand
argument_list|(
literal|"feature:install karaf-jpa-example-provider-ds-hibernate"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
name|testCommand
argument_list|()
expr_stmt|;
name|executeCommand
argument_list|(
literal|"feature:uninstall karaf-jpa-example-provider-ds-hibernate"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
comment|// blueprint EclipseLink
name|executeCommand
argument_list|(
literal|"feature:install karaf-jpa-example-provider-blueprint-eclipselink"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
name|testCommand
argument_list|()
expr_stmt|;
name|executeCommand
argument_list|(
literal|"feature:uninstall karaf-jpa-example-provider-blueprint-eclipselink"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
comment|// blueprint Hibernate
name|executeCommand
argument_list|(
literal|"feature:install karaf-jpa-example-provider-blueprint-hibernate"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
name|testCommand
argument_list|()
expr_stmt|;
name|executeCommand
argument_list|(
literal|"feature:uninstall karaf-jpa-example-provider-blueprint-hibernate"
argument_list|,
name|ADMIN_ROLES
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCommand
parameter_list|()
block|{
comment|// add booking
name|executeCommand
argument_list|(
literal|"booking:add Foo AF520"
argument_list|)
expr_stmt|;
comment|// list booking
name|String
name|bookings
init|=
name|executeCommand
argument_list|(
literal|"booking:list"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bookings
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"AF520"
argument_list|,
name|bookings
argument_list|)
expr_stmt|;
comment|// get booking
name|String
name|booking
init|=
name|executeCommand
argument_list|(
literal|"booking:get 1"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|booking
argument_list|)
expr_stmt|;
name|assertContains
argument_list|(
literal|"AF520"
argument_list|,
name|booking
argument_list|)
expr_stmt|;
comment|// remove booking
name|executeCommand
argument_list|(
literal|"booking:remove 1"
argument_list|)
expr_stmt|;
name|bookings
operator|=
name|executeCommand
argument_list|(
literal|"booking:list"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bookings
argument_list|)
expr_stmt|;
name|assertContainsNot
argument_list|(
literal|"AF520"
argument_list|,
name|bookings
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

