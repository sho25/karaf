begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|karaf
operator|.
name|options
operator|.
name|KarafDistributionOption
operator|.
name|replaceConfigurationFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|ExamReactorStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|PerClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
annotation|@
name|ExamReactorStrategy
argument_list|(
name|PerClass
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ConfigManagedServiceFactoryTest
extends|extends
name|KarafTestSupport
block|{
annotation|@
name|Inject
name|ConfigurationAdmin
name|configAdmin
decl_stmt|;
annotation|@
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Configuration
specifier|public
name|Option
index|[]
name|config
parameter_list|()
block|{
return|return
operator|new
name|Option
index|[]
block|{
name|CoreOptions
operator|.
name|composite
argument_list|(
name|super
operator|.
name|config
argument_list|()
argument_list|)
block|,
name|replaceConfigurationFile
argument_list|(
literal|"etc/myconfig-test1.cfg"
argument_list|,
name|getConfigFile
argument_list|(
literal|"/etc/myconfig-test1.cfg"
argument_list|)
argument_list|)
block|,
comment|// KarafDistributionOption.debugConfiguration()
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|updateProperties
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|checkInitialValuesFromFelixConfigAdmin
argument_list|()
expr_stmt|;
name|checkEditByFactoryPid
argument_list|()
expr_stmt|;
name|CheckEditByArbitraryAttribute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNewFactoryConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|executeCommand
argument_list|(
literal|"config:edit --factory myconfig2\n"
operator|+
literal|"config:property-set test1 data1\n"
operator|+
literal|"config:update"
argument_list|,
operator|new
name|RolePrincipal
argument_list|(
literal|"manager"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.factorypid=myconfig2)"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"data1"
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkInitialValuesFromFelixConfigAdmin
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|Configuration
name|config
init|=
name|readConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"data1"
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"data2"
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkEditByFactoryPid
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|executeCommand
argument_list|(
literal|"config:edit '(service.factorypid=myconfig)'\n"
operator|+
literal|"config:property-set test1 data1new\n"
operator|+
literal|"config:update"
argument_list|,
operator|new
name|RolePrincipal
argument_list|(
literal|"manager"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|readConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"data1new"
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"data2"
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|CheckEditByArbitraryAttribute
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|executeCommand
argument_list|(
literal|"config:edit '(test2=data2)'\n"
operator|+
literal|"config:property-set test1 data1new2\n"
operator|+
literal|"config:update"
argument_list|,
operator|new
name|RolePrincipal
argument_list|(
literal|"manager"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|readConfig
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"data1new2"
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"data2"
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Configuration
name|readConfig
parameter_list|()
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|Configuration
index|[]
name|configs
init|=
name|configAdmin
operator|.
name|listConfigurations
argument_list|(
literal|"(service.factorypid=myconfig)"
argument_list|)
decl_stmt|;
return|return
name|configs
index|[
literal|0
index|]
return|;
block|}
block|}
end_class

end_unit

