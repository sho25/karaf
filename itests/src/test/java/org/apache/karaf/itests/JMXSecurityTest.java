begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|karaf
operator|.
name|options
operator|.
name|KarafDistributionOption
operator|.
name|editConfigurationFilePut
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InvalidAttributeValueException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|jaas
operator|.
name|boot
operator|.
name|principal
operator|.
name|RolePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|extra
operator|.
name|VMOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|ExamReactorStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|PerClass
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
annotation|@
name|ExamReactorStrategy
argument_list|(
name|PerClass
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JMXSecurityTest
extends|extends
name|KarafTestSupport
block|{
specifier|private
specifier|static
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Configuration
specifier|public
name|Option
index|[]
name|config
parameter_list|()
block|{
name|List
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<
name|Option
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|super
operator|.
name|config
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add some extra options used by this test...
name|options
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|editConfigurationFilePut
argument_list|(
literal|"etc/jmx.acl.org.apache.karaf.service.cfg"
argument_list|,
literal|"getServices()"
argument_list|,
literal|"admin"
argument_list|)
argument_list|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/jmx.acl.org.apache.karaf.service.cfg"
argument_list|,
literal|"getServices(boolean)"
argument_list|,
literal|"viewer"
argument_list|)
argument_list|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/jmx.acl.org.apache.karaf.service.cfg"
argument_list|,
literal|"getServices(long)"
argument_list|,
literal|"manager"
argument_list|)
argument_list|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/jmx.acl.org.apache.karaf.service.cfg"
argument_list|,
literal|"getServices(long,boolean)"
argument_list|,
literal|"admin"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|options
operator|.
name|toArray
argument_list|(
operator|new
name|Option
index|[]
block|{}
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJMXSecurityAsViewer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|suffix
init|=
literal|"_"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|managerUser
init|=
literal|"managerUser"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|String
name|managerGroup
init|=
literal|"managerGroup"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|String
name|viewerUser
init|=
literal|"viewerUser"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|executeCommand
argument_list|(
literal|"jaas:realm-manage --realm karaf"
operator|+
literal|";jaas:user-add "
operator|+
name|managerUser
operator|+
literal|" "
operator|+
name|managerUser
operator|+
literal|";jaas:group-add "
operator|+
name|managerUser
operator|+
literal|" "
operator|+
name|managerGroup
operator|+
literal|";jaas:group-role-add "
operator|+
name|managerGroup
operator|+
literal|" viewer"
operator|+
literal|";jaas:group-role-add "
operator|+
name|managerGroup
operator|+
literal|" manager"
operator|+
literal|";jaas:user-add "
operator|+
name|viewerUser
operator|+
literal|" "
operator|+
name|viewerUser
operator|+
literal|";jaas:role-add "
operator|+
name|viewerUser
operator|+
literal|" viewer"
operator|+
literal|";jaas:update"
operator|+
literal|";jaas:realm-manage --realm karaf"
operator|+
literal|";jaas:user-list"
argument_list|,
operator|new
name|RolePrincipal
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|JMXConnector
name|connector
init|=
name|getJMXConnector
argument_list|(
name|viewerUser
argument_list|,
name|viewerUser
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|systemMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.karaf:type=system,name=root"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|systemMBean
argument_list|,
literal|"StartLevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSetAttributeSecEx
argument_list|(
name|connection
argument_list|,
name|systemMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"StartLevel"
argument_list|,
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Changing the start level should have no effect for a viewer"
argument_list|,
literal|100
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|systemMBean
argument_list|,
literal|"StartLevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInvokeSecEx
argument_list|(
name|connection
argument_list|,
name|systemMBean
argument_list|,
literal|"halt"
argument_list|)
expr_stmt|;
name|ObjectName
name|memoryMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"java.lang:type=Memory"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|memoryMBean
argument_list|,
literal|"Verbose"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSetAttributeSecEx
argument_list|(
name|connection
argument_list|,
name|memoryMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"Verbose"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Changing the verbosity should have no effect for a viewer"
argument_list|,
literal|false
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|memoryMBean
argument_list|,
literal|"Verbose"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInvokeSecEx
argument_list|(
name|connection
argument_list|,
name|memoryMBean
argument_list|,
literal|"gc"
argument_list|)
expr_stmt|;
name|testJMXSecurityMBean
argument_list|(
name|connection
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJMXSecurityAsManager
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|suffix
init|=
literal|"_"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|managerUser
init|=
literal|"managerUser"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|String
name|managerGroup
init|=
literal|"managerGroup"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|String
name|viewerUser
init|=
literal|"viewerUser"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|executeCommand
argument_list|(
literal|"jaas:realm-manage --realm karaf"
operator|+
literal|";jaas:user-add "
operator|+
name|managerUser
operator|+
literal|" "
operator|+
name|managerUser
operator|+
literal|";jaas:group-add "
operator|+
name|managerUser
operator|+
literal|" "
operator|+
name|managerGroup
operator|+
literal|";jaas:group-role-add "
operator|+
name|managerGroup
operator|+
literal|" viewer"
operator|+
literal|";jaas:group-role-add "
operator|+
name|managerGroup
operator|+
literal|" manager"
operator|+
literal|";jaas:user-add "
operator|+
name|viewerUser
operator|+
literal|" "
operator|+
name|viewerUser
operator|+
literal|";jaas:role-add "
operator|+
name|viewerUser
operator|+
literal|" viewer"
operator|+
literal|";jaas:update"
operator|+
literal|";jaas:realm-manage --realm karaf"
operator|+
literal|";jaas:user-list"
argument_list|,
operator|new
name|RolePrincipal
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|JMXConnector
name|connector
init|=
name|getJMXConnector
argument_list|(
name|managerUser
argument_list|,
name|managerUser
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|systemMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.karaf:type=system,name=root"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|systemMBean
argument_list|,
literal|"StartLevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSetAttributeSecEx
argument_list|(
name|connection
argument_list|,
name|systemMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"StartLevel"
argument_list|,
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Changing the start level should have no effect for a viewer"
argument_list|,
literal|100
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|systemMBean
argument_list|,
literal|"StartLevel"
argument_list|)
argument_list|)
expr_stmt|;
name|assertInvokeSecEx
argument_list|(
name|connection
argument_list|,
name|systemMBean
argument_list|,
literal|"halt"
argument_list|)
expr_stmt|;
name|ObjectName
name|memoryMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"java.lang:type=Memory"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|memoryMBean
argument_list|,
literal|"Verbose"
argument_list|)
argument_list|)
expr_stmt|;
name|assertSetAttributeSecEx
argument_list|(
name|connection
argument_list|,
name|memoryMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"Verbose"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Changing the verbosity should have no effect for a viewer"
argument_list|,
literal|false
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|memoryMBean
argument_list|,
literal|"Verbose"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|invoke
argument_list|(
name|memoryMBean
argument_list|,
literal|"gc"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|testJMXSecurityMBean
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJMXSecurityAsAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|JMXConnector
name|connector
init|=
name|getJMXConnector
argument_list|()
decl_stmt|;
name|MBeanServerConnection
name|connection
init|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|systemMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.karaf:type=system,name=root"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|systemMBean
argument_list|,
literal|"StartLevel"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|setAttribute
argument_list|(
name|systemMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"StartLevel"
argument_list|,
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|assertGetAttributeRetry
argument_list|(
literal|"Start level should have been changed"
argument_list|,
literal|101
argument_list|,
name|connection
argument_list|,
name|systemMBean
argument_list|,
literal|"StartLevel"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|setAttribute
argument_list|(
name|systemMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"StartLevel"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertGetAttributeRetry
argument_list|(
literal|"Start level should be changed back now"
argument_list|,
literal|100
argument_list|,
name|connection
argument_list|,
name|systemMBean
argument_list|,
literal|"StartLevel"
argument_list|)
expr_stmt|;
name|ObjectName
name|memoryMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"java.lang:type=Memory"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|memoryMBean
argument_list|,
literal|"Verbose"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|setAttribute
argument_list|(
name|memoryMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"Verbose"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|memoryMBean
argument_list|,
literal|"Verbose"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|setAttribute
argument_list|(
name|memoryMBean
argument_list|,
operator|new
name|Attribute
argument_list|(
literal|"Verbose"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Verbosity should be changed back to false"
argument_list|,
literal|false
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|memoryMBean
argument_list|,
literal|"Verbose"
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|invoke
argument_list|(
name|memoryMBean
argument_list|,
literal|"gc"
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|testJMXSecurityMBean
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJMXSecurityCannotLogInAsGroupDirectly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|suffix
init|=
literal|"_"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|managerUser
init|=
literal|"managerUser"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|String
name|managerGroup
init|=
literal|"managerGroup"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|String
name|viewerUser
init|=
literal|"viewerUser"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|suffix
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|executeCommand
argument_list|(
literal|"jaas:realm-manage --realm karaf"
operator|+
literal|";jaas:user-add "
operator|+
name|managerUser
operator|+
literal|" "
operator|+
name|managerUser
operator|+
literal|";jaas:group-add "
operator|+
name|managerUser
operator|+
literal|" "
operator|+
name|managerGroup
operator|+
literal|";jaas:group-role-add "
operator|+
name|managerGroup
operator|+
literal|" viewer"
operator|+
literal|";jaas:group-role-add "
operator|+
name|managerGroup
operator|+
literal|" manager"
operator|+
literal|";jaas:user-add "
operator|+
name|viewerUser
operator|+
literal|" "
operator|+
name|viewerUser
operator|+
literal|";jaas:role-add "
operator|+
name|viewerUser
operator|+
literal|" viewer"
operator|+
literal|";jaas:update"
operator|+
literal|";jaas:realm-manage --realm karaf"
operator|+
literal|";jaas:user-list"
argument_list|,
operator|new
name|RolePrincipal
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|getJMXConnector
argument_list|(
literal|"admingroup"
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Login with a group name should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|getJMXConnector
argument_list|(
literal|"_g_:admingroup"
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Login with a group name should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|getJMXConnector
argument_list|(
name|managerGroup
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Login with a group name should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|getJMXConnector
argument_list|(
literal|"_g_:"
operator|+
name|managerGroup
argument_list|,
literal|"group"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Login with a group name should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
block|}
specifier|private
name|void
name|testJMXSecurityMBean
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|boolean
name|isManager
parameter_list|,
name|boolean
name|isAdmin
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|InstanceNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
throws|,
name|IOException
block|{
name|ObjectName
name|securityMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.karaf:type=security,area=jmx,name=root"
argument_list|)
decl_stmt|;
name|ObjectName
name|systemMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.karaf:type=system,name=root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|systemMBean
operator|.
name|toString
argument_list|()
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|systemMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getStartLevel"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAdmin
argument_list|,
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|systemMBean
operator|.
name|toString
argument_list|()
block|,
literal|"setStartLevel"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAdmin
argument_list|,
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|systemMBean
operator|.
name|toString
argument_list|()
block|,
literal|"halt"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ObjectName
name|serviceMBean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.karaf:type=service,name=root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices"
block|,
operator|new
name|String
index|[]
block|{
name|boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
expr|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isManager
argument_list|,
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices"
block|,
operator|new
name|String
index|[]
block|{
name|long
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
expr|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAdmin
argument_list|,
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices"
block|,
operator|new
name|String
index|[]
block|{
name|long
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
expr|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAdmin
argument_list|,
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices"
block|,
operator|new
name|String
index|[]
block|{}
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
index|[]
operator|.
expr|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TabularData
name|td
init|=
operator|(
name|TabularData
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|map
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|td
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|map2
operator|.
name|put
argument_list|(
name|systemMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
name|serviceMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"getServices(boolean)"
argument_list|,
literal|"getServices(long)"
argument_list|,
literal|"getServices(long,boolean)"
argument_list|,
literal|"getServices()"
argument_list|)
argument_list|)
expr_stmt|;
name|TabularData
name|td2
init|=
operator|(
name|TabularData
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|map2
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|td2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompositeData
name|cd1
init|=
name|td2
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices(boolean)"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|serviceMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|cd1
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getServices(boolean)"
argument_list|,
name|cd1
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|cd1
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd2
init|=
name|td2
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices(long)"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|serviceMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|cd2
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getServices(long)"
argument_list|,
name|cd2
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isManager
argument_list|,
name|cd2
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd3
init|=
name|td2
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices(long,boolean)"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|serviceMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|cd3
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getServices(long,boolean)"
argument_list|,
name|cd3
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAdmin
argument_list|,
name|cd3
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd4
init|=
name|td2
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices()"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|serviceMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|cd4
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getServices()"
argument_list|,
name|cd4
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAdmin
argument_list|,
name|cd4
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|CompositeData
name|cd5
init|=
name|td2
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|systemMBean
operator|.
name|toString
argument_list|()
block|,
literal|""
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|systemMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|cd5
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|cd5
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|cd5
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map3
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|map3
operator|.
name|put
argument_list|(
name|serviceMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"getServices"
argument_list|)
argument_list|)
expr_stmt|;
name|TabularData
name|td3
init|=
operator|(
name|TabularData
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|map3
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|td3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompositeData
name|cd6
init|=
name|td3
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|serviceMBean
operator|.
name|toString
argument_list|()
block|,
literal|"getServices"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|serviceMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|cd6
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getServices"
argument_list|,
name|cd6
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|Boolean
operator|)
name|cd6
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map4
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|map4
operator|.
name|put
argument_list|(
name|systemMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"halt"
argument_list|)
argument_list|)
expr_stmt|;
name|TabularData
name|td4
init|=
operator|(
name|TabularData
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|securityMBean
argument_list|,
literal|"canInvoke"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|map4
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|td4
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompositeData
name|cd7
init|=
name|td4
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
name|systemMBean
operator|.
name|toString
argument_list|()
block|,
literal|"halt"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|systemMBean
operator|.
name|toString
argument_list|()
argument_list|,
name|cd7
operator|.
name|get
argument_list|(
literal|"ObjectName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"halt"
argument_list|,
name|cd7
operator|.
name|get
argument_list|(
literal|"Method"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isAdmin
argument_list|,
name|cd7
operator|.
name|get
argument_list|(
literal|"CanInvoke"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testKarafConfigAdminMBean
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|boolean
name|isManager
parameter_list|,
name|boolean
name|isAdmin
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|NullPointerException
throws|,
name|InstanceNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
throws|,
name|IOException
throws|,
name|AttributeNotFoundException
block|{
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|"foo.bar"
argument_list|,
name|isManager
argument_list|)
expr_stmt|;
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|"jmx.acl"
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|"org.apache.karaf.command.acl"
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|"org.apache.karaf.service.acl"
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|testKarafConfigAdminMBean
argument_list|(
name|connection
argument_list|,
literal|"org.apache.karaf.somethingelse"
argument_list|,
name|isManager
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testKarafConfigAdminMBean
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|String
name|pidPrefix
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|InstanceNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
throws|,
name|IOException
throws|,
name|AttributeNotFoundException
block|{
name|ObjectName
name|mbean
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.karaf:type=config,name=root"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"_"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|pidPrefix
operator|+
name|suffix
decl_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"create"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"setProperty"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|,
literal|"x"
block|,
literal|"y"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m1
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"listProperties"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|m1
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assertNull
argument_list|(
name|m1
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"appendProperty"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|,
literal|"x"
block|,
literal|"z"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m2
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"listProperties"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
name|assertEquals
argument_list|(
literal|"yz"
argument_list|,
name|m2
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assertNull
argument_list|(
name|m2
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newProps
operator|.
name|put
argument_list|(
literal|"a.b.c"
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|newProps
operator|.
name|put
argument_list|(
literal|"d.e.f"
argument_list|,
literal|"def"
argument_list|)
expr_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"update"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|,
name|newProps
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|Map
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"deleteProperty"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|,
literal|"d.e.f"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|m3
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"listProperties"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertEquals
argument_list|(
literal|"abc"
argument_list|,
name|m3
operator|.
name|get
argument_list|(
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m3
operator|.
name|get
argument_list|(
literal|"d.e.f"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|connection
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"Configs"
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|m3
operator|.
name|get
argument_list|(
literal|"a.b.c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|connection
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"Configs"
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testOSGiConfigAdminMBean
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|boolean
name|isManager
parameter_list|,
name|boolean
name|isAdmin
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// Find the OSGi Config Admin MBean(s) based on the Object Name pattern
for|for
control|(
name|ObjectName
name|name
range|:
name|connection
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"osgi.compendium:service=cm,*"
argument_list|)
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
name|name
argument_list|,
literal|"foo.bar"
argument_list|,
name|isManager
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
name|name
argument_list|,
literal|"jmx.acl"
argument_list|,
name|isAdmin
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
name|name
argument_list|,
literal|"org.apache.karaf.command.acl"
argument_list|,
name|isAdmin
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
name|name
argument_list|,
literal|"org.apache.karaf.service.acl"
argument_list|,
name|isAdmin
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|testOSGiConfigAdminMBean
argument_list|(
name|connection
argument_list|,
name|name
argument_list|,
literal|"org.apache.karaf.somethingelse"
argument_list|,
name|isManager
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should be at least one ConfigAdmin MBean"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testOSGiConfigAdminMBean
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|ObjectName
name|mbean
parameter_list|,
name|String
name|pidPrefix
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|,
name|boolean
name|isAdmin
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|infix
init|=
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|suffix
init|=
name|infix
operator|+
literal|"_"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|pid
init|=
name|pidPrefix
operator|+
name|suffix
decl_stmt|;
name|CompositeType
name|ct
init|=
operator|new
name|CompositeType
argument_list|(
literal|"PROPERTY"
argument_list|,
literal|"X"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Key"
block|,
literal|"Value"
block|,
literal|"Type"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"X"
block|,
literal|"X"
block|,
literal|"X"
block|}
argument_list|,
operator|new
name|OpenType
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|SimpleType
operator|.
name|STRING
operator|,
name|SimpleType
operator|.
name|STRING
operator|,
name|SimpleType
operator|.
name|STRING
block|}
block|)
function|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"PROPERTIES"
argument_list|,
literal|"X"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Key"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|tds
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Key"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Value"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
literal|"Type"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|CompositeDataSupport
name|cds
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|tds
operator|.
name|put
parameter_list|(
name|cds
parameter_list|)
constructor_decl|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"update"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|,
name|tds
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|TabularData
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|TabularData
name|td
init|=
operator|(
name|TabularData
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"getProperties"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|td
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"foo"
block|}
argument_list|)
operator|.
name|get
argument_list|(
literal|"Value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
index|[]
name|configs
init|=
operator|(
name|String
index|[]
index|[]
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"getConfigurations"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"(service.pid="
operator|+
name|pid
operator|+
literal|")"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pid
argument_list|,
name|configs
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"delete"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|TabularDataSupport
name|tds2
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|data2
operator|.
name|put
argument_list|(
literal|"Key"
argument_list|,
literal|"a.b.c"
argument_list|)
expr_stmt|;
name|data2
operator|.
name|put
argument_list|(
literal|"Value"
argument_list|,
literal|"d.e.f"
argument_list|)
expr_stmt|;
name|data2
operator|.
name|put
argument_list|(
literal|"Type"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|CompositeDataSupport
name|cds2
init|=
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|data2
argument_list|)
decl_stmt|;
name|tds2
operator|.
name|put
parameter_list|(
name|cds2
parameter_list|)
constructor_decl|;
name|String
name|suffix2
init|=
name|infix
operator|+
literal|"_"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|pid2
init|=
name|pidPrefix
operator|+
name|suffix2
decl_stmt|;
name|String
name|location2
init|=
literal|"mylocation"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"updateForLocation"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid2
block|,
name|location2
block|,
name|tds2
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|TabularData
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|TabularData
name|td2
init|=
operator|(
name|TabularData
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"getPropertiesForLocation"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid2
block|,
name|location2
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertEquals
argument_list|(
literal|"d.e.f"
argument_list|,
name|td2
operator|.
name|get
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"a.b.c"
block|}
argument_list|)
operator|.
name|get
argument_list|(
literal|"Value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"deleteForLocation"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid2
block|,
name|location2
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAdmin
condition|)
block|{
name|String
name|suffix3
init|=
name|infix
operator|+
literal|"_"
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|String
name|pid3
init|=
name|pidPrefix
operator|+
name|suffix3
decl_stmt|;
name|TabularDataSupport
name|tds3
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"update"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid3
block|,
name|tds3
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|TabularData
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|configs2
init|=
operator|(
name|String
index|[]
index|[]
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"getConfigurations"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"(service.pid="
operator|+
name|pidPrefix
operator|+
name|infix
operator|+
literal|"*)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configs2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pid3
argument_list|,
name|configs2
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|String
name|location3
init|=
literal|"my.other.location."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertJmxInvoke
argument_list|(
name|shouldSucceed
argument_list|,
name|connection
argument_list|,
name|mbean
argument_list|,
literal|"setBundleLocation"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|pid3
block|,
name|location3
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|configs3
init|=
operator|(
name|String
index|[]
index|[]
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"getConfigurations"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"(service.pid="
operator|+
name|pidPrefix
operator|+
name|infix
operator|+
literal|"*)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configs3
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pid3
argument_list|,
name|configs3
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"deleteConfigurations"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"(service.pid="
operator|+
name|pid3
operator|+
literal|")"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|String
index|[]
index|[]
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
literal|"getConfigurations"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"(service.pid="
operator|+
name|pidPrefix
operator|+
name|infix
operator|+
literal|"*)"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
specifier|private
name|void
name|assertGetAttributeRetry
parameter_list|(
name|String
name|explanation
parameter_list|,
name|Object
name|expected
parameter_list|,
name|MBeanServerConnection
name|connection
parameter_list|,
name|ObjectName
name|mbean
parameter_list|,
name|String
name|attrName
parameter_list|)
throws|throws
name|AttributeNotFoundException
throws|,
name|InstanceNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
throws|,
name|IOException
block|{
name|int
name|count
init|=
literal|5
decl_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|count
operator|--
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|explanation
argument_list|,
name|expected
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
name|attrName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|ae
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
block|}
name|assertEquals
argument_list|(
name|explanation
argument_list|,
name|expected
argument_list|,
name|connection
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
name|attrName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|Object
name|assertJmxInvoke
parameter_list|(
name|boolean
name|expectSuccess
parameter_list|,
name|MBeanServerConnection
name|connection
parameter_list|,
name|ObjectName
name|mbean
parameter_list|,
name|String
name|method
parameter_list|,
name|Object
index|[]
name|params
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
throws|,
name|IOException
block|{
try|try
block|{
name|Object
name|result
init|=
name|connection
operator|.
name|invoke
argument_list|(
name|mbean
argument_list|,
name|method
argument_list|,
name|params
argument_list|,
name|signature
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expectSuccess
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|expectSuccess
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|assertSetAttributeSecEx
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|ObjectName
name|mbeanObjectName
parameter_list|,
name|Attribute
name|attribute
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|AttributeNotFoundException
throws|,
name|InvalidAttributeValueException
throws|,
name|MBeanException
throws|,
name|ReflectionException
throws|,
name|IOException
block|{
try|try
block|{
name|connection
operator|.
name|setAttribute
argument_list|(
name|mbeanObjectName
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting a SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|assertInvokeSecEx
parameter_list|(
name|MBeanServerConnection
name|connection
parameter_list|,
name|ObjectName
name|mbeanObjectName
parameter_list|,
name|String
name|method
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
throws|,
name|IOException
block|{
try|try
block|{
name|connection
operator|.
name|invoke
argument_list|(
name|mbeanObjectName
argument_list|,
name|method
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting a SecurityException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
comment|// good
block|}
block|}
end_function

unit|}
end_unit

