begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|mavenresolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|KarafTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|monitoring
operator|.
name|Activator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|monitoring
operator|.
name|RegisteredService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|monitoring
operator|.
name|ServiceMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|karaf
operator|.
name|options
operator|.
name|LogLevelOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|options
operator|.
name|MavenArtifactUrlReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|store
operator|.
name|Handle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|store
operator|.
name|intern
operator|.
name|TemporaryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
operator|.
name|KarafTestSupport
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|composite
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|maven
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|karaf
operator|.
name|options
operator|.
name|KarafDistributionOption
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|tinybundles
operator|.
name|core
operator|.
name|TinyBundles
operator|.
name|bundle
import|;
end_import

begin_comment
comment|// don't extend, because we don't want @Rule Retry
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|KarafMinimalMonitoredTestSupport
block|{
specifier|public
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KarafMinimalMonitoredTestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Inject
specifier|protected
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|Option
index|[]
name|baseConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|MavenArtifactUrlReference
name|karafUrl
init|=
name|maven
argument_list|()
operator|.
name|groupId
argument_list|(
literal|"org.apache.karaf"
argument_list|)
operator|.
name|artifactId
argument_list|(
literal|"apache-karaf-minimal"
argument_list|)
operator|.
name|versionAsInProject
argument_list|()
operator|.
name|type
argument_list|(
literal|"tar.gz"
argument_list|)
decl_stmt|;
name|String
name|rmiRegistryPort
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|KarafTestSupport
operator|.
name|getAvailablePort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|MIN_RMI_REG_PORT
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|MAX_RMI_REG_PORT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rmiServerPort
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|KarafTestSupport
operator|.
name|getAvailablePort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|MIN_RMI_SERVER_PORT
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|MAX_RMI_SERVER_PORT
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Store
argument_list|<
name|InputStream
argument_list|>
name|store
init|=
operator|new
name|TemporaryStore
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/exam"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Handle
name|handle
init|=
name|store
operator|.
name|store
argument_list|(
name|createMonitorBundle
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|store
operator|.
name|getLocation
argument_list|(
name|handle
argument_list|)
operator|.
name|toURL
argument_list|()
decl_stmt|;
return|return
operator|new
name|Option
index|[]
block|{
name|karafDistributionConfiguration
argument_list|()
operator|.
name|frameworkUrl
argument_list|(
name|karafUrl
argument_list|)
operator|.
name|name
argument_list|(
literal|"Apache Karaf"
argument_list|)
operator|.
name|unpackDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/exam"
argument_list|)
argument_list|)
block|,
comment|// enable JMX RBAC security, thanks to the KarafMBeanServerBuilder
name|configureSecurity
argument_list|()
operator|.
name|disableKarafMBeanServerBuilder
argument_list|()
block|,
name|keepRuntimeFolder
argument_list|()
block|,
name|logLevel
argument_list|(
name|LogLevelOption
operator|.
name|LogLevel
operator|.
name|INFO
argument_list|)
block|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiRegistryPort"
argument_list|,
name|rmiRegistryPort
argument_list|)
block|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/org.apache.karaf.management.cfg"
argument_list|,
literal|"rmiServerPort"
argument_list|,
name|rmiServerPort
argument_list|)
block|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/startup.properties"
argument_list|,
literal|"file:../../"
operator|+
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"1"
argument_list|)
block|,
comment|//                new TimeoutOption(3600000),
comment|//                KarafDistributionOption.debugConfiguration("8889", true),
name|composite
argument_list|(
name|editConfigurationFilePut
argument_list|(
literal|"etc/org.apache.karaf.features.cfg"
argument_list|,
operator|new
name|File
argument_list|(
literal|"target/test-classes/etc/org.apache.karaf.features.cfg"
argument_list|)
argument_list|)
argument_list|)
block|}
return|;
block|}
specifier|private
name|InputStream
name|createMonitorBundle
parameter_list|()
block|{
return|return
name|bundle
argument_list|()
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|BUNDLE_SYMBOLICNAME
argument_list|,
literal|"monitor"
argument_list|)
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|BUNDLE_ACTIVATOR
argument_list|,
name|Activator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|IMPORT_PACKAGE
argument_list|,
literal|"org.osgi.framework"
argument_list|)
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|EXPORT_PACKAGE
argument_list|,
name|Activator
operator|.
name|class
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|,
literal|"1.0.0"
argument_list|)
operator|.
name|set
argument_list|(
name|Constants
operator|.
name|BUNDLE_MANIFESTVERSION
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|Activator
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|RegisteredService
operator|.
name|class
argument_list|)
operator|.
name|add
argument_list|(
name|ServiceMonitor
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|protected
name|long
name|numberOfServiceEventsFor
parameter_list|(
name|String
name|serviceName
parameter_list|)
block|{
name|ServiceReference
argument_list|<
name|List
argument_list|>
name|sr
init|=
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0L
argument_list|)
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getServiceReference
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bundleContext
operator|.
name|getService
argument_list|(
name|sr
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|services
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|.
name|equals
argument_list|(
name|serviceName
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
return|;
block|}
block|}
end_class

end_unit

