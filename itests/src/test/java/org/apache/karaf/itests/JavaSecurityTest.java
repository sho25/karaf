begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|itests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|bundle
operator|.
name|core
operator|.
name|BundleState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|MavenUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|PaxExam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|ExamReactorStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|spi
operator|.
name|reactors
operator|.
name|PerClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|maven
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|karaf
operator|.
name|options
operator|.
name|KarafDistributionOption
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|PaxExam
operator|.
name|class
argument_list|)
annotation|@
name|ExamReactorStrategy
argument_list|(
name|PerClass
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JavaSecurityTest
extends|extends
name|KarafTestSupport
block|{
annotation|@
name|Configuration
specifier|public
name|Option
index|[]
name|config
parameter_list|()
block|{
name|String
name|version
init|=
name|MavenUtils
operator|.
name|getArtifactVersion
argument_list|(
literal|"org.apache.felix"
argument_list|,
literal|"org.apache.felix.framework.security"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|maven
argument_list|(
literal|"org.apache.felix"
argument_list|,
literal|"org.apache.felix.framework.security"
argument_list|,
name|version
argument_list|)
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|Path
name|temp
decl_stmt|;
try|try
block|{
name|temp
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"org.apache.felix.framework.security-"
operator|+
name|version
operator|+
literal|"-"
argument_list|,
literal|".jar"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.protocol.handler.pkgs"
argument_list|,
literal|"org.ops4j.pax.url"
argument_list|)
expr_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openStream
argument_list|()
init|)
block|{
name|Files
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|temp
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Option
argument_list|>
name|options
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|super
operator|.
name|config
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add some extra options used by this test...
name|options
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|editConfigurationFilePut
argument_list|(
literal|"etc/system.properties"
argument_list|,
literal|"java.security.policy"
argument_list|,
literal|"${karaf.etc}/all.policy"
argument_list|)
argument_list|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/system.properties"
argument_list|,
literal|"org.osgi.framework.security"
argument_list|,
literal|"osgi"
argument_list|)
argument_list|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/system.properties"
argument_list|,
literal|"org.osgi.framework.trust.repositories"
argument_list|,
literal|"${karaf.etc}/trustStore.ks"
argument_list|)
argument_list|,
name|editConfigurationFilePut
argument_list|(
literal|"etc/startup.properties"
argument_list|,
literal|"mvn:org.apache.felix/org.apache.felix.framework.security/"
operator|+
name|version
argument_list|,
literal|"1"
argument_list|)
argument_list|,
name|replaceConfigurationFile
argument_list|(
literal|"system/org/apache/felix/org.apache.felix.framework.security/"
operator|+
name|version
operator|+
literal|"/org.apache.felix.framework.security-"
operator|+
name|version
operator|+
literal|".jar"
argument_list|,
name|temp
operator|.
name|toFile
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|options
operator|.
name|toArray
argument_list|(
operator|new
name|Option
index|[]
block|{}
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJavaSecurity
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNotNull
argument_list|(
literal|"Karaf should run under a security manager"
argument_list|,
name|System
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
name|BundleService
name|service
init|=
name|getOsgiService
argument_list|(
name|BundleService
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|tried
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Map
argument_list|<
name|Bundle
argument_list|,
name|BundleState
argument_list|>
name|incorrect
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
name|bundle
range|:
name|bundleContext
operator|.
name|getBundles
argument_list|()
control|)
block|{
name|BundleInfo
name|info
init|=
name|service
operator|.
name|getInfo
argument_list|(
name|bundle
argument_list|)
decl_stmt|;
name|BundleState
name|state
init|=
name|info
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|!=
name|BundleState
operator|.
name|Active
operator|&&
name|state
operator|!=
name|BundleState
operator|.
name|Resolved
condition|)
block|{
name|incorrect
operator|.
name|put
argument_list|(
name|bundle
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|incorrect
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
if|if
condition|(
operator|++
name|tried
operator|>=
literal|10
condition|)
block|{
name|fail
argument_list|(
literal|"Unable to start bundles correctly: "
operator|+
name|incorrect
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

