begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|gshell
operator|.
name|itests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commandline
operator|.
name|CommandLineExecutionFailed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|NoSuchCommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Shell
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|JUnit4TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4TestRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CoreTest
extends|extends
name|AbstractIntegrationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHelp
parameter_list|()
throws|throws
name|Exception
block|{
name|Shell
name|shell
init|=
name|getOsgiService
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"help"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|Shell
name|shell
init|=
name|getOsgiService
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|shell
operator|.
name|execute
argument_list|(
literal|"log/display"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"command should not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandLineExecutionFailed
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchCommandException
argument_list|)
expr_stmt|;
block|}
name|Bundle
name|b
init|=
name|getInstalledBundle
argument_list|(
literal|"org.apache.felix.karaf.gshell.log"
argument_list|)
decl_stmt|;
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"log/display"
argument_list|)
expr_stmt|;
name|b
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|shell
operator|.
name|execute
argument_list|(
literal|"log/display"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"command should not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandLineExecutionFailed
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchCommandException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommandGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Shell
name|shell
init|=
name|getOsgiService
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"osgi"
argument_list|)
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"help"
argument_list|)
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommandGroupAfterInstall
parameter_list|()
throws|throws
name|Exception
block|{
name|Bundle
name|b
init|=
name|getInstalledBundle
argument_list|(
literal|"org.apache.felix.karaf.gshell.log"
argument_list|)
decl_stmt|;
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
name|Shell
name|shell
init|=
name|getOsgiService
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"log"
argument_list|)
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"help"
argument_list|)
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Configuration
specifier|public
specifier|static
name|Option
index|[]
name|configuration
parameter_list|()
block|{
return|return
name|AbstractIntegrationTest
operator|.
name|configuration
argument_list|()
return|;
block|}
block|}
end_class

end_unit

