begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|servicemix
operator|.
name|kernel
operator|.
name|gshell
operator|.
name|itests
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|commandline
operator|.
name|CommandLineExecutionFailed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|registry
operator|.
name|NoSuchCommandException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gshell
operator|.
name|shell
operator|.
name|Shell
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|felix
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|mavenConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|options
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|systemPackages
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|systemProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|CoreOptions
operator|.
name|bootClasspathLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|OptionUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|container
operator|.
name|def
operator|.
name|PaxRunnerOptions
operator|.
name|configProfile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|container
operator|.
name|def
operator|.
name|PaxRunnerOptions
operator|.
name|logProfile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|container
operator|.
name|def
operator|.
name|PaxRunnerOptions
operator|.
name|profile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|exam
operator|.
name|junit
operator|.
name|JUnit4TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|JUnit4TestRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CoreTest
extends|extends
name|AbstractIntegrationTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHelp
parameter_list|()
throws|throws
name|Exception
block|{
name|Shell
name|shell
init|=
name|getOsgiService
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"help"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstallCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|Shell
name|shell
init|=
name|getOsgiService
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|shell
operator|.
name|execute
argument_list|(
literal|"log/display"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"command should not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandLineExecutionFailed
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchCommandException
argument_list|)
expr_stmt|;
block|}
name|Bundle
name|b
init|=
name|getInstalledBundle
argument_list|(
literal|"org.apache.servicemix.kernel.gshell.log"
argument_list|)
decl_stmt|;
name|b
operator|.
name|start
argument_list|()
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"log/display"
argument_list|)
expr_stmt|;
name|b
operator|.
name|uninstall
argument_list|()
expr_stmt|;
try|try
block|{
name|shell
operator|.
name|execute
argument_list|(
literal|"log/display"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"command should not exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommandLineExecutionFailed
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|NoSuchCommandException
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCommandGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|Shell
name|shell
init|=
name|getOsgiService
argument_list|(
name|Shell
operator|.
name|class
argument_list|)
decl_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"osgi"
argument_list|)
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|"help"
argument_list|)
expr_stmt|;
name|shell
operator|.
name|execute
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
comment|//    @Test
comment|//    public void testInstallFeature() throws Exception {
comment|//        Shell shell = getOsgiService(Shell.class);
comment|//
comment|//        try {
comment|//            shell.execute("obr");
comment|//            fail("command should not exist");
comment|//        } catch (CommandLineExecutionFailed e) {
comment|//            assertNotNull(e.getCause());
comment|//            assertTrue(e.getCause() instanceof NoSuchCommandException);
comment|//        }
comment|//        try {
comment|//            shell.execute("wrapper");
comment|//            fail("command should not exist");
comment|//        } catch (CommandLineExecutionFailed e) {
comment|//            assertNotNull(e.getCause());
comment|//            assertTrue(e.getCause() instanceof NoSuchCommandException);
comment|//        }
comment|//        String url = getClass().getClassLoader().getResource("features.xml").toString();
comment|//        addFeatureRepo(url);
comment|//        installFeature("obr");
comment|//        installFeature("wrapper");
comment|//        shell.execute("obr");
comment|//        shell.execute("wrapper");
comment|//    }
comment|/**      * TODO: This test seems to fail, there must be a timing issue somewhere      *     public void testCommandGroupAfterInstall() throws Exception {         Bundle b = installBundle("org.apache.servicemix.kernel.gshell", "org.apache.servicemix.kernel.gshell.log", null, "jar");         Shell shell = getOsgiService(Shell.class);         shell.execute("log");         shell.execute("help");         shell.execute("..");     }      */
annotation|@
name|Configuration
specifier|public
specifier|static
name|Option
index|[]
name|configuration
parameter_list|()
block|{
name|Option
index|[]
name|options
init|=
name|options
argument_list|(
comment|// install log service using pax runners profile abstraction (there are more profiles, like DS)
name|logProfile
argument_list|()
argument_list|,
name|configProfile
argument_list|()
argument_list|,
name|profile
argument_list|(
literal|"spring.dm"
argument_list|)
operator|.
name|version
argument_list|(
literal|"1.2.0-rc1"
argument_list|)
argument_list|,
comment|// this is how you set the default log level when using pax logging (logProfile)
name|systemProperty
argument_list|(
literal|"org.ops4j.pax.logging.DefaultServiceLog.level"
argument_list|)
operator|.
name|value
argument_list|(
literal|"INFO"
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
literal|"servicemix.name"
argument_list|)
operator|.
name|value
argument_list|(
literal|"root"
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
literal|"servicemix.base"
argument_list|)
operator|.
name|value
argument_list|(
literal|"target/smx.base"
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
literal|"servicemix.startLocalConsole"
argument_list|)
operator|.
name|value
argument_list|(
literal|"false"
argument_list|)
argument_list|,
name|systemProperty
argument_list|(
literal|"servicemix.startRemoteShell"
argument_list|)
operator|.
name|value
argument_list|(
literal|"false"
argument_list|)
argument_list|,
comment|// hack system packages
name|systemPackages
argument_list|(
literal|"org.apache.servicemix.kernel.main.spi;version=1.0.0"
argument_list|,
literal|"org.apache.servicemix.kernel.jaas.boot"
argument_list|)
argument_list|,
name|bootClasspathLibrary
argument_list|(
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.kernel.jaas"
argument_list|,
literal|"org.apache.servicemix.kernel.jaas.boot"
argument_list|)
argument_list|)
operator|.
name|afterFramework
argument_list|()
argument_list|,
name|bootClasspathLibrary
argument_list|(
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.kernel"
argument_list|,
literal|"org.apache.servicemix.kernel.main"
argument_list|)
argument_list|)
operator|.
name|afterFramework
argument_list|()
argument_list|,
comment|// Bundles
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.jline"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.commons-httpclient"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.commons-jexl"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.commons-vfs"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.mina"
argument_list|,
literal|"mina-core"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.bundles"
argument_list|,
literal|"org.apache.servicemix.bundles.oro"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.kernel.jaas"
argument_list|,
literal|"org.apache.servicemix.kernel.jaas.config"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.sshd"
argument_list|,
literal|"sshd-core"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.kernel.gshell"
argument_list|,
literal|"org.apache.servicemix.kernel.gshell.core"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.kernel.gshell"
argument_list|,
literal|"org.apache.servicemix.kernel.gshell.osgi"
argument_list|)
argument_list|,
name|mavenBundle
argument_list|(
literal|"org.apache.servicemix.kernel.gshell"
argument_list|,
literal|"org.apache.servicemix.kernel.gshell.log"
argument_list|)
operator|.
name|noStart
argument_list|()
argument_list|,
name|felix
argument_list|()
argument_list|)
decl_stmt|;
comment|// use config generated by the Maven plugin (until PAXEXAM-62/64 get resolved)
if|if
condition|(
name|CoreTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"META-INF/maven/paxexam-config.args"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|options
operator|=
name|OptionUtils
operator|.
name|combine
argument_list|(
name|options
argument_list|,
name|mavenConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|options
return|;
block|}
block|}
end_class

end_unit

