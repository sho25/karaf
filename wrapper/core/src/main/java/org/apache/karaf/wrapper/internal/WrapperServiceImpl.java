begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|wrapper
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|wrapper
operator|.
name|WrapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|jansi
operator|.
name|Ansi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_comment
comment|/**  * Default implementation of the wrapper service.  */
end_comment

begin_class
specifier|public
class|class
name|WrapperServiceImpl
implements|implements
name|WrapperService
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WrapperServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|install
parameter_list|()
throws|throws
name|Exception
block|{
name|install
argument_list|(
literal|"karaf"
argument_list|,
literal|"karaf"
argument_list|,
literal|""
argument_list|,
literal|"AUTO_START"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
index|[]
name|install
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|displayName
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|startType
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|etc
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|bin
init|=
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"bin"
argument_list|)
decl_stmt|;
name|File
name|lib
init|=
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|base
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${java.home}"
argument_list|,
name|System
operator|.
name|getenv
argument_list|(
literal|"JAVA_HOME"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.home}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.base}"
argument_list|,
name|base
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.data}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.data"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${karaf.etc}"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.etc"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${name}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${displayName}"
argument_list|,
name|displayName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${description}"
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"${startType}"
argument_list|,
name|startType
argument_list|)
expr_stmt|;
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|,
literal|"Unknown"
argument_list|)
decl_stmt|;
name|File
name|serviceFile
init|=
literal|null
decl_stmt|;
name|File
name|wrapperConf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Win"
argument_list|)
condition|)
block|{
name|String
name|arch
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|arch
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"amd64"
argument_list|)
operator|||
name|arch
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"x86_64"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper.exe"
argument_list|)
argument_list|,
literal|"windows64/karaf-wrapper.exe"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service.bat"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"windows64/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"windows64/karaf-service.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"wrapper.dll"
argument_list|)
argument_list|,
literal|"windows64/wrapper.dll"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper.exe"
argument_list|)
argument_list|,
literal|"windows/karaf-wrapper.exe"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service.bat"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"windows/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"windows/karaf-service.bat"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"wrapper.dll"
argument_list|)
argument_list|,
literal|"windows/wrapper.dll"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Mac OS X"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"macosx/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|File
name|plistConf
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
literal|"org.apache.karaf."
operator|+
name|name
operator|+
literal|".plist"
argument_list|)
decl_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|plistConf
argument_list|,
literal|"macosx/org.apache.karaf.KARAF.plist"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.jnilib"
argument_list|)
argument_list|,
literal|"macosx/libwrapper.jnilib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|String
name|arch
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|arch
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"amd64"
argument_list|)
operator|||
name|arch
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"x86_64"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"linux64/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.so"
argument_list|)
argument_list|,
literal|"linux64/libwrapper.so"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"linux/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.so"
argument_list|)
argument_list|,
literal|"linux/libwrapper.so"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"AIX"
argument_list|)
condition|)
block|{
name|String
name|arch
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|arch
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ppc64"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"aix/ppc64/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.a"
argument_list|)
argument_list|,
literal|"aix/ppc64/libwrapper.a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"aix/ppc32/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.a"
argument_list|)
argument_list|,
literal|"aix/ppc32/libwrapper.a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Solaris"
argument_list|)
operator|||
name|os
operator|.
name|startsWith
argument_list|(
literal|"SunOS"
argument_list|)
condition|)
block|{
name|String
name|arch
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
decl_stmt|;
if|if
condition|(
name|arch
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sparc"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"solaris/sparc64/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.so"
argument_list|)
argument_list|,
literal|"solaris/sparc64/libwrapper.so"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|arch
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"x86"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"solaris/x86/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.so"
argument_list|)
argument_list|,
literal|"solaris/x86/libwrapper.so"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"solaris/sparc32/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.so"
argument_list|)
argument_list|,
literal|"solaris/sparc32/libwrapper.so"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"HP-UX"
argument_list|)
operator|||
name|os
operator|.
name|startsWith
argument_list|(
literal|"HPUX"
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-wrapper"
argument_list|)
decl_stmt|;
name|copyResourceTo
argument_list|(
name|file
argument_list|,
literal|"hpux/parisc64/karaf-wrapper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|file
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|serviceFile
operator|=
operator|new
name|File
argument_list|(
name|bin
argument_list|,
name|name
operator|+
literal|"-service"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|serviceFile
argument_list|,
literal|"unix/karaf-service"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
name|serviceFile
argument_list|,
literal|"a+x"
argument_list|)
expr_stmt|;
name|wrapperConf
operator|=
operator|new
name|File
argument_list|(
name|etc
argument_list|,
name|name
operator|+
literal|"-wrapper.conf"
argument_list|)
expr_stmt|;
name|copyFilteredResourceTo
argument_list|(
name|wrapperConf
argument_list|,
literal|"unix/karaf-wrapper.conf"
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"libwrapper.sl"
argument_list|)
argument_list|,
literal|"hpux/parisc64/libwrapper.sl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Your operating system '"
operator|+
name|os
operator|+
literal|"' is not currently supported."
argument_list|)
throw|;
block|}
comment|// install the wrapper jar to the lib directory
name|mkdir
argument_list|(
name|lib
argument_list|)
expr_stmt|;
name|copyResourceTo
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"karaf-wrapper.jar"
argument_list|)
argument_list|,
literal|"all/karaf-wrapper.jar"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|etc
argument_list|)
expr_stmt|;
name|createJar
argument_list|(
operator|new
name|File
argument_list|(
name|lib
argument_list|,
literal|"karaf-wrapper-main.jar"
argument_list|)
argument_list|,
literal|"org/apache/karaf/wrapper/internal/Main.class"
argument_list|)
expr_stmt|;
name|File
index|[]
name|wrapperPaths
init|=
operator|new
name|File
index|[
literal|2
index|]
decl_stmt|;
name|wrapperPaths
index|[
literal|0
index|]
operator|=
name|wrapperConf
expr_stmt|;
name|wrapperPaths
index|[
literal|1
index|]
operator|=
name|serviceFile
expr_stmt|;
return|return
name|wrapperPaths
return|;
block|}
specifier|private
name|void
name|mkdir
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creating missing directory: {}"
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating missing directory: "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyResourceTo
parameter_list|(
name|File
name|outFile
parameter_list|,
name|String
name|resource
parameter_list|,
name|boolean
name|text
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creating file: {}"
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating file: "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|WrapperServiceImpl
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|text
condition|)
block|{
comment|// read it line at a time so what we can use the platform line ending when we write it out
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"writing: {}"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// binary resource so just write it out the way it came in
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|c
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"File already exists. Move it out of the way if you wish to recreate it: {}"
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"File already exists"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|a
argument_list|(
literal|". Move it out of the way if you wish to recreate it: "
argument_list|)
operator|.
name|a
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyFilteredResourceTo
parameter_list|(
name|File
name|outFile
parameter_list|,
name|String
name|resource
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creating file: {}"
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating file: "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|WrapperServiceImpl
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
try|try
block|{
comment|// read it line at a time so that we can use the platform line ending when we write it out
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|is
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNextLine
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|scanner
operator|.
name|nextLine
argument_list|()
decl_stmt|;
name|line
operator|=
name|filter
argument_list|(
name|line
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"File already exists. Move it out of the way if you wish to recreate it: {}"
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|fg
argument_list|(
name|Ansi
operator|.
name|Color
operator|.
name|RED
argument_list|)
operator|.
name|a
argument_list|(
literal|"File already exists"
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|a
argument_list|(
literal|". Move it out of the way if you wish to recreate it: "
argument_list|)
operator|.
name|a
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
specifier|private
name|void
name|safeClose
parameter_list|(
name|OutputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
specifier|private
name|String
name|filter
parameter_list|(
name|String
name|line
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|i
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|p1
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|i
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|>=
literal|0
condition|)
block|{
name|String
name|l1
init|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|String
name|l2
init|=
name|line
operator|.
name|substring
argument_list|(
name|p1
operator|+
name|i
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|=
name|l1
operator|+
name|i
operator|.
name|getValue
argument_list|()
operator|+
name|l2
expr_stmt|;
block|}
block|}
return|return
name|line
return|;
block|}
specifier|private
name|int
name|chmod
parameter_list|(
name|File
name|serviceFile
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|ProcessBuilder
name|builder
init|=
operator|new
name|ProcessBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|command
argument_list|(
literal|"chmod"
argument_list|,
name|mode
argument_list|,
name|serviceFile
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|Process
name|p
init|=
name|builder
operator|.
name|start
argument_list|()
decl_stmt|;
name|PumpStreamHandler
name|handler
init|=
operator|new
name|PumpStreamHandler
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
decl_stmt|;
name|handler
operator|.
name|attach
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|handler
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|status
init|=
name|p
operator|.
name|waitFor
argument_list|()
decl_stmt|;
name|handler
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|status
return|;
block|}
specifier|private
name|void
name|createJar
parameter_list|(
name|File
name|outFile
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|outFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Creating file: {}"
argument_list|,
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Ansi
operator|.
name|ansi
argument_list|()
operator|.
name|a
argument_list|(
literal|"Creating file: "
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|INTENSITY_BOLD
argument_list|)
operator|.
name|a
argument_list|(
name|outFile
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|a
argument_list|(
name|Ansi
operator|.
name|Attribute
operator|.
name|RESET
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Resource "
operator|+
name|resource
operator|+
literal|" not found!"
argument_list|)
throw|;
block|}
try|try
block|{
name|JarOutputStream
name|jar
init|=
operator|new
name|JarOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|resource
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|jar
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|resource
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|jar
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|idx
operator|=
name|resource
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|jar
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|jar
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|jar
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|jar
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|safeClose
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

