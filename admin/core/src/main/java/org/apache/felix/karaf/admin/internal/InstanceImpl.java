begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|admin
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|admin
operator|.
name|Instance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|Process
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|ProcessBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|karaf
operator|.
name|jpm
operator|.
name|impl
operator|.
name|ScriptUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|InstanceImpl
implements|implements
name|Instance
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InstanceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PROPERTIES_FILE_NAME
init|=
literal|"config.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT
init|=
literal|"karaf.shutdown.port"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_HOST
init|=
literal|"karaf.shutdown.host"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PORT_FILE
init|=
literal|"karaf.shutdown.port.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_COMMAND
init|=
literal|"karaf.shutdown.command"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KARAF_SHUTDOWN_PID_FILE
init|=
literal|"karaf.shutdown.pid.file"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SHUTDOWN_COMMAND
init|=
literal|"SHUTDOWN"
decl_stmt|;
specifier|private
name|AdminServiceImpl
name|service
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|private
name|Process
name|process
decl_stmt|;
specifier|private
name|boolean
name|root
decl_stmt|;
specifier|public
name|InstanceImpl
parameter_list|(
name|AdminServiceImpl
name|service
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|this
argument_list|(
name|service
argument_list|,
name|name
argument_list|,
name|location
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|InstanceImpl
parameter_list|(
name|AdminServiceImpl
name|service
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|location
parameter_list|,
name|boolean
name|root
parameter_list|)
block|{
name|this
operator|.
name|service
operator|=
name|service
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
specifier|public
name|void
name|attach
parameter_list|(
name|int
name|pid
parameter_list|)
throws|throws
name|IOException
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already started"
argument_list|)
throw|;
block|}
name|this
operator|.
name|process
operator|=
name|ProcessBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|attach
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|boolean
name|isRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
return|return
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|isDirectory
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPid
parameter_list|()
block|{
name|checkProcess
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|process
operator|!=
literal|null
condition|?
name|this
operator|.
name|process
operator|.
name|getPid
argument_list|()
else|:
literal|0
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc/org.apache.felix.karaf.shell.cfg"
argument_list|)
decl_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|loc
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"sshPort"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|loc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
specifier|public
name|void
name|changePort
parameter_list|(
name|int
name|port
parameter_list|)
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc/org.apache.felix.karaf.shell.cfg"
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|props
operator|.
name|setProperty
argument_list|(
literal|"sshPort"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|store
argument_list|(
name|os
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|(
name|String
name|javaOpts
parameter_list|)
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already started"
argument_list|)
throw|;
block|}
if|if
condition|(
name|javaOpts
operator|==
literal|null
condition|)
block|{
name|javaOpts
operator|=
literal|"-server -Xmx512M -Dcom.sun.management.jmxremote"
expr_stmt|;
block|}
name|File
name|libDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
decl_stmt|;
name|File
index|[]
name|jars
init|=
name|libDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|StringBuilder
name|classpath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|jar
range|:
name|jars
control|)
block|{
if|if
condition|(
name|classpath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classpath
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|classpath
operator|.
name|append
argument_list|(
name|jar
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|command
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
name|ScriptUtils
operator|.
name|isWindows
argument_list|()
condition|?
literal|"bin\\java.exe"
else|:
literal|"bin/java"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|" "
operator|+
name|javaOpts
operator|+
literal|" -Djava.util.logging.config.file=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc/java.util.logging.properties"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Djava.endorsed.dirs=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"endorsed"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
name|libDir
argument_list|,
literal|"endorsed"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Djava.ext.dirs=\""
operator|+
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"ext"
argument_list|)
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
operator|+
operator|new
name|File
argument_list|(
name|libDir
argument_list|,
literal|"ext"
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.home=\""
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.base=\""
operator|+
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
operator|+
literal|"\""
operator|+
literal|" -Dkaraf.startLocalConsole=false"
operator|+
literal|" -Dkaraf.startRemoteShell=true"
operator|+
literal|" -classpath "
operator|+
name|classpath
operator|.
name|toString
argument_list|()
operator|+
literal|" org.apache.felix.karaf.main.Main"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting instance "
operator|+
name|name
operator|+
literal|" with command: "
operator|+
name|command
argument_list|)
expr_stmt|;
name|this
operator|.
name|process
operator|=
name|ProcessBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newBuilder
argument_list|()
operator|.
name|directory
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
argument_list|)
operator|.
name|command
argument_list|(
name|command
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|saveState
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not started"
argument_list|)
throw|;
block|}
comment|// Try a clean shutdown
name|cleanShutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance not stopped"
argument_list|)
throw|;
block|}
name|deleteFile
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|forget
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|service
operator|.
name|saveState
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|String
name|getState
parameter_list|()
block|{
name|int
name|port
init|=
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|()
operator|||
name|port
operator|<=
literal|0
condition|)
block|{
return|return
name|ERROR
return|;
block|}
name|checkProcess
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|process
operator|==
literal|null
condition|)
block|{
return|return
name|STOPPED
return|;
block|}
else|else
block|{
try|try
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|STARTED
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
return|return
name|STARTING
return|;
block|}
block|}
specifier|protected
name|void
name|checkProcess
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|process
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|process
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|this
operator|.
name|process
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|protected
name|void
name|cleanShutdown
parameter_list|()
block|{
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"etc"
argument_list|)
argument_list|,
name|CONFIG_PROPERTIES_FILE_NAME
argument_list|)
decl_stmt|;
name|URL
name|configPropURL
init|=
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|Properties
name|props
init|=
name|loadPropertiesFile
argument_list|(
name|configPropURL
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.base"
argument_list|,
operator|new
name|File
argument_list|(
name|location
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"karaf.home"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.home"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|props
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|substVars
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_HOST
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|String
name|portFile
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_PORT_FILE
argument_list|)
decl_stmt|;
name|String
name|shutdown
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|KARAF_SHUTDOWN_COMMAND
argument_list|,
name|DEFAULT_SHUTDOWN_COMMAND
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
operator|&&
name|portFile
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|portFile
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|portStr
init|=
name|r
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|portStr
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// We found the port, try to send the command
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
name|Socket
name|s
init|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|s
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|shutdown
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|service
operator|.
name|getStopTimeout
argument_list|()
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkProcess
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|t
operator|&&
name|process
operator|!=
literal|null
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to cleanly shutdown instance"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|boolean
name|deleteFile
parameter_list|(
name|File
name|fileToDelete
parameter_list|)
block|{
if|if
condition|(
name|fileToDelete
operator|==
literal|null
operator|||
operator|!
name|fileToDelete
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|result
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|fileToDelete
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
index|[]
name|files
init|=
name|fileToDelete
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"."
argument_list|)
operator|||
name|file
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|result
operator|&=
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|&=
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|result
operator|&=
name|fileToDelete
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
specifier|static
name|Properties
name|loadPropertiesFile
parameter_list|(
name|URL
name|configPropURL
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read the properties file.
name|Properties
name|configProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|configPropURL
operator|.
name|openConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|configProps
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error loading config properties from "
operator|+
name|configPropURL
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Main: "
operator|+
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex2
parameter_list|)
block|{
comment|// Nothing we can do.
block|}
return|return
literal|null
return|;
block|}
return|return
name|configProps
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_START
init|=
literal|"${"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIM_STOP
init|=
literal|"}"
decl_stmt|;
specifier|protected
specifier|static
name|String
name|substVars
parameter_list|(
name|String
name|val
parameter_list|,
name|String
name|currentKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cycleMap
parameter_list|,
name|Properties
name|configProps
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
comment|// If there is currently no cycle map, then create
comment|// one for detecting cycles for this invocation.
if|if
condition|(
name|cycleMap
operator|==
literal|null
condition|)
block|{
name|cycleMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// Put the current key in the cycle map.
name|cycleMap
operator|.
name|put
argument_list|(
name|currentKey
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
comment|// Assume we have a value that is something like:
comment|// "leading ${foo.${bar}} middle ${baz} trailing"
comment|// Find the first ending '}' variable delimiter, which
comment|// will correspond to the first deepest nested variable
comment|// placeholder.
name|int
name|stopDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_STOP
argument_list|)
decl_stmt|;
comment|// Find the matching starting "${" variable delimiter
comment|// by looping until we find a start delimiter that is
comment|// greater than the stop delimiter we have found.
name|int
name|startDelim
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|)
decl_stmt|;
while|while
condition|(
name|stopDelim
operator|>=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
name|DELIM_START
argument_list|,
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|idx
operator|<
literal|0
operator|)
operator|||
operator|(
name|idx
operator|>
name|stopDelim
operator|)
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|idx
operator|<
name|stopDelim
condition|)
block|{
name|startDelim
operator|=
name|idx
expr_stmt|;
block|}
block|}
comment|// If we do not have a start or stop delimiter, then just
comment|// return the existing value.
if|if
condition|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|&&
operator|(
name|stopDelim
operator|<
literal|0
operator|)
condition|)
block|{
return|return
name|val
return|;
block|}
comment|// At this point, we found a stop delimiter without a start,
comment|// so throw an exception.
elseif|else
if|if
condition|(
operator|(
operator|(
name|startDelim
operator|<
literal|0
operator|)
operator|||
operator|(
name|startDelim
operator|>
name|stopDelim
operator|)
operator|)
operator|&&
operator|(
name|stopDelim
operator|>=
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stop delimiter with no start delimiter: "
operator|+
name|val
argument_list|)
throw|;
block|}
comment|// At this point, we have found a variable placeholder so
comment|// we must perform a variable substitution on it.
comment|// Using the start and stop delimiter indices, extract
comment|// the first, deepest nested variable placeholder.
name|String
name|variable
init|=
name|val
operator|.
name|substring
argument_list|(
name|startDelim
operator|+
name|DELIM_START
operator|.
name|length
argument_list|()
argument_list|,
name|stopDelim
argument_list|)
decl_stmt|;
comment|// Verify that this is not a recursive variable reference.
if|if
condition|(
name|cycleMap
operator|.
name|get
argument_list|(
name|variable
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"recursive variable reference: "
operator|+
name|variable
argument_list|)
throw|;
block|}
comment|// Get the value of the deepest nested variable placeholder.
comment|// Try to configuration properties first.
name|String
name|substValue
init|=
operator|(
name|configProps
operator|!=
literal|null
operator|)
condition|?
name|configProps
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|null
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|substValue
operator|==
literal|null
condition|)
block|{
comment|// Ignore unknown property values.
name|substValue
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|variable
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// Remove the found variable from the cycle map, since
comment|// it may appear more than once in the value and we don't
comment|// want such situations to appear as a recursive reference.
name|cycleMap
operator|.
name|remove
argument_list|(
name|variable
argument_list|)
expr_stmt|;
comment|// Append the leading characters, the substituted value of
comment|// the variable, and the trailing characters to get the new
comment|// value.
name|val
operator|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startDelim
argument_list|)
operator|+
name|substValue
operator|+
name|val
operator|.
name|substring
argument_list|(
name|stopDelim
operator|+
name|DELIM_STOP
operator|.
name|length
argument_list|()
argument_list|,
name|val
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now perform substitution again, since there could still
comment|// be substitutions to make.
name|val
operator|=
name|substVars
argument_list|(
name|val
argument_list|,
name|currentKey
argument_list|,
name|cycleMap
argument_list|,
name|configProps
argument_list|)
expr_stmt|;
comment|// Return the value.
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

