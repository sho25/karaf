begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|dev
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|dev
operator|.
name|core
operator|.
name|DevService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|dev
operator|.
name|core
operator|.
name|FrameworkType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleRevisions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWire
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|BundleWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|wiring
operator|.
name|FrameworkWiring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DevServiceImpl
implements|implements
name|DevService
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DevServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The header key where we store the active wires when we enable DynamicImport=*      */
specifier|private
specifier|static
specifier|final
name|String
name|ORIGINAL_WIRES
init|=
literal|"Original-Wires"
decl_stmt|;
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|DevServiceImpl
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|FrameworkType
name|getFramework
parameter_list|()
block|{
if|if
condition|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"felix"
argument_list|)
condition|)
block|{
return|return
name|FrameworkType
operator|.
name|felix
return|;
block|}
else|else
block|{
return|return
name|FrameworkType
operator|.
name|equinox
return|;
block|}
block|}
specifier|private
name|Properties
name|loadProps
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Properties
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|,
literal|"etc/config.properties"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setFramework
parameter_list|(
name|FrameworkType
name|framework
parameter_list|)
block|{
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Properties
name|properties
init|=
name|loadProps
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"karaf.framework"
argument_list|,
name|framework
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error settting framework: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setFrameworkDebug
parameter_list|(
name|boolean
name|debug
parameter_list|)
block|{
try|try
block|{
name|Properties
name|properties
init|=
name|loadProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"felix.log.level"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"osgi.debug"
argument_list|,
literal|"etc/equinox-debug.properties"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|remove
argument_list|(
literal|"felix.log.level"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"osgi.debug"
argument_list|)
expr_stmt|;
block|}
comment|// TODO populate the equinox-debug.properties file with the one provided in shell/dev module
name|properties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error settting framework debugging: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|restart
parameter_list|(
name|boolean
name|clean
parameter_list|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart.clean"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|clean
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error stopping framework bundle: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|setSystemProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|persist
parameter_list|)
block|{
if|if
condition|(
name|persist
condition|)
block|{
try|try
block|{
name|String
name|base
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|(
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"etc/system.properties"
argument_list|)
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|props
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error persisting system property"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|System
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/*      * Enable DynamicImport=* on the bundle      */
specifier|public
name|void
name|enableDynamicImports
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|String
name|location
init|=
name|String
operator|.
name|format
argument_list|(
literal|"wrap:%s$"
operator|+
literal|"Bundle-UpdateLocation=%s&"
operator|+
literal|"DynamicImport-Package=*&"
operator|+
literal|"%s=%s&"
operator|+
literal|"overwrite=merge"
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|,
name|bundle
operator|.
name|getLocation
argument_list|()
argument_list|,
name|ORIGINAL_WIRES
argument_list|,
name|explode
argument_list|(
name|getWiredBundles
argument_list|(
name|bundle
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|format
argument_list|(
literal|"Updating %s with URL %s"
argument_list|,
name|bundle
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|bundle
operator|.
name|update
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|adapt
argument_list|(
name|FrameworkWiring
operator|.
name|class
argument_list|)
operator|.
name|refreshBundles
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|bundle
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error enabling dynamic imports on bundle"
operator|+
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*      * Disable DynamicImport=* on the bundle      *      * At this time, we will also calculate the difference in package wiring for the bundle compared to      * when we enabled the DynamicImport      */
specifier|public
name|void
name|disableDynamicImports
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|current
init|=
name|getWiredBundles
argument_list|(
name|bundle
argument_list|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|original
range|:
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|ORIGINAL_WIRES
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|current
operator|.
name|remove
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No additional packages have been wired since dynamic import was enabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Additional packages wired since dynamic import was enabled"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|pkg
range|:
name|current
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"- "
operator|+
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|bundle
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error disabling dynamic imports on bundle"
operator|+
name|bundle
operator|.
name|getBundleId
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*      * Explode a set of string values in to a ,-delimited string      */
specifier|private
name|String
name|explode
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"--none--"
return|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*      * Get the list of bundles from which the given bundle imports packages      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
name|getWiredBundles
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
comment|// the set of bundles from which the bundle imports packages
name|Map
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
name|exporters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Bundle
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BundleRevision
name|revision
range|:
name|bundle
operator|.
name|adapt
argument_list|(
name|BundleRevisions
operator|.
name|class
argument_list|)
operator|.
name|getRevisions
argument_list|()
control|)
block|{
name|BundleWiring
name|wiring
init|=
name|revision
operator|.
name|getWiring
argument_list|()
decl_stmt|;
if|if
condition|(
name|wiring
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BundleWire
argument_list|>
name|wires
init|=
name|wiring
operator|.
name|getRequiredWires
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
decl_stmt|;
if|if
condition|(
name|wires
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|BundleWire
name|wire
range|:
name|wires
control|)
block|{
if|if
condition|(
name|wire
operator|.
name|getProviderWiring
argument_list|()
operator|.
name|getBundle
argument_list|()
operator|.
name|getBundleId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|exporters
operator|.
name|put
argument_list|(
name|wire
operator|.
name|getCapability
argument_list|()
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|BundleRevision
operator|.
name|PACKAGE_NAMESPACE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|wire
operator|.
name|getProviderWiring
argument_list|()
operator|.
name|getBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|exporters
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDynamicImport
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
return|return
name|bundle
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|ORIGINAL_WIRES
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

