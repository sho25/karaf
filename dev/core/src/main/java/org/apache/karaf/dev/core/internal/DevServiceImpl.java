begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|dev
operator|.
name|core
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|dev
operator|.
name|core
operator|.
name|DevService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|dev
operator|.
name|core
operator|.
name|FrameworkType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleException
import|;
end_import

begin_class
specifier|public
class|class
name|DevServiceImpl
implements|implements
name|DevService
block|{
specifier|private
name|BundleContext
name|bundleContext
decl_stmt|;
specifier|public
name|DevServiceImpl
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
block|{
name|this
operator|.
name|bundleContext
operator|=
name|bundleContext
expr_stmt|;
block|}
specifier|public
name|FrameworkType
name|getFramework
parameter_list|()
block|{
if|if
condition|(
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"felix"
argument_list|)
condition|)
block|{
return|return
name|FrameworkType
operator|.
name|felix
return|;
block|}
else|else
block|{
return|return
name|FrameworkType
operator|.
name|equinox
return|;
block|}
block|}
specifier|private
name|Properties
name|loadProps
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Properties
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
argument_list|,
literal|"etc/config.properties"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setFramework
parameter_list|(
name|FrameworkType
name|framework
parameter_list|)
block|{
if|if
condition|(
name|framework
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Properties
name|properties
init|=
name|loadProps
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"karaf.framework"
argument_list|,
name|framework
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error settting framework: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setFrameworkDebug
parameter_list|(
name|boolean
name|debug
parameter_list|)
block|{
try|try
block|{
name|Properties
name|properties
init|=
name|loadProps
argument_list|()
decl_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|properties
operator|.
name|put
argument_list|(
literal|"felix.log.level"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
literal|"osgi.debug"
argument_list|,
literal|"etc/equinox-debug.properties"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|remove
argument_list|(
literal|"felix.log.level"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|remove
argument_list|(
literal|"osgi.debug"
argument_list|)
expr_stmt|;
block|}
comment|// TODO populate the equinox-debug.properties file with the one provided in shell/dev module
name|properties
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error settting framework debugging: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|restart
parameter_list|(
name|boolean
name|clean
parameter_list|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"karaf.restart.clean"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|clean
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|bundleContext
operator|.
name|getBundle
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BundleException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error stopping framework bundle: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|setSystemProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|persist
parameter_list|)
block|{
if|if
condition|(
name|persist
condition|)
block|{
try|try
block|{
name|String
name|base
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.base"
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|(
operator|new
name|File
argument_list|(
name|base
argument_list|,
literal|"etc/system.properties"
argument_list|)
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|props
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error persisting system property"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|System
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

