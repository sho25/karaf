begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|services
operator|.
name|mavenproxy
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A simple future  */
end_comment

begin_class
specifier|public
class|class
name|DefaultFuture
parameter_list|<
name|T
extends|extends
name|DefaultFuture
parameter_list|>
block|{
comment|/**      * A default value to indicate the future has been canceled      */
specifier|private
specifier|static
specifier|final
name|Object
name|CANCELED
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**      * A number of seconds to wait between two deadlock controls ( 5 seconds )      */
specifier|private
specifier|static
specifier|final
name|long
name|DEAD_LOCK_CHECK_INTERVAL
init|=
literal|5000L
decl_stmt|;
comment|/**      * A lock used by the wait() method      */
specifier|private
specifier|final
name|Object
name|lock
decl_stmt|;
specifier|private
name|FutureListener
argument_list|<
name|T
argument_list|>
name|firstListener
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FutureListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|otherListeners
decl_stmt|;
specifier|private
name|Object
name|result
decl_stmt|;
specifier|private
name|boolean
name|ready
decl_stmt|;
specifier|private
name|int
name|waiters
decl_stmt|;
specifier|public
name|DefaultFuture
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance.      */
specifier|public
name|DefaultFuture
parameter_list|(
name|Object
name|lock
parameter_list|)
block|{
name|this
operator|.
name|lock
operator|=
name|lock
operator|!=
literal|null
condition|?
name|lock
else|:
name|this
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|T
name|await
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
while|while
condition|(
operator|!
name|ready
condition|)
block|{
name|waiters
operator|++
expr_stmt|;
try|try
block|{
comment|// Wait for a notify, or if no notify is called,
comment|// assume that we have a deadlock and exit the
comment|// loop to check for a potential deadlock.
name|lock
operator|.
name|wait
argument_list|(
name|DEAD_LOCK_CHECK_INTERVAL
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|waiters
operator|--
expr_stmt|;
if|if
condition|(
operator|!
name|ready
condition|)
block|{
name|checkDeadLock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|await
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|await
argument_list|(
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|await
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|await0
argument_list|(
name|timeoutMillis
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|T
name|awaitUninterruptibly
parameter_list|()
block|{
try|try
block|{
name|await0
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// Do nothing : this catch is just mandatory by contract
block|}
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|awaitUninterruptibly
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
name|awaitUninterruptibly
argument_list|(
name|unit
operator|.
name|toMillis
argument_list|(
name|timeout
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|awaitUninterruptibly
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
block|{
try|try
block|{
return|return
name|await0
argument_list|(
name|timeoutMillis
argument_list|,
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InternalError
argument_list|()
throw|;
block|}
block|}
comment|/**      * Wait for the Future to be ready. If the requested delay is 0 or      * negative, this method immediately returns the value of the      * 'ready' flag.      * Every 5 second, the wait will be suspended to be able to check if      * there is a deadlock or not.      *      * @param timeoutMillis The delay we will wait for the Future to be ready      * @param interruptable Tells if the wait can be interrupted or not      * @return<code>true</code> if the Future is ready      * @throws InterruptedException If the thread has been interrupted      *                              when it's not allowed.      */
specifier|private
name|boolean
name|await0
parameter_list|(
name|long
name|timeoutMillis
parameter_list|,
name|boolean
name|interruptable
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeoutMillis
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|ready
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|timeoutMillis
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|waiters
operator|++
expr_stmt|;
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|long
name|timeOut
init|=
name|Math
operator|.
name|min
argument_list|(
name|timeoutMillis
argument_list|,
name|DEAD_LOCK_CHECK_INTERVAL
argument_list|)
decl_stmt|;
name|lock
operator|.
name|wait
argument_list|(
name|timeOut
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|interruptable
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|ready
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|endTime
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
finally|finally
block|{
name|waiters
operator|--
expr_stmt|;
if|if
condition|(
operator|!
name|ready
condition|)
block|{
name|checkDeadLock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * TODO checkDeadLock.      */
specifier|private
name|void
name|checkDeadLock
parameter_list|()
block|{
comment|//        // Only read / write / connect / write future can cause dead lock.
comment|//        if (!(this instanceof CloseFuture || this instanceof WriteFuture ||
comment|//              this instanceof ReadFuture || this instanceof ConnectFuture)) {
comment|//            return;
comment|//        }
comment|//
comment|//        // Get the current thread stackTrace.
comment|//        // Using Thread.currentThread().getStackTrace() is the best solution,
comment|//        // even if slightly less efficient than doing a new Exception().getStackTrace(),
comment|//        // as internally, it does exactly the same thing. The advantage of using
comment|//        // this solution is that we may benefit some improvement with some
comment|//        // future versions of Java.
comment|//        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
comment|//
comment|//        // Simple and quick check.
comment|//        for (StackTraceElement s: stackTrace) {
comment|//            if (AbstractPollingIoProcessor.class.getName().equals(s.getClassName())) {
comment|//                IllegalStateException e = new IllegalStateException( "t" );
comment|//                e.getStackTrace();
comment|//                throw new IllegalStateException(
comment|//                    "DEAD LOCK: " + IoFuture.class.getSimpleName() +
comment|//                    ".await() was invoked from an I/O processor thread.  " +
comment|//                    "Please use " + IoFutureListener.class.getSimpleName() +
comment|//                    " or configure a proper thread model alternatively.");
comment|//            }
comment|//        }
comment|//
comment|//        // And then more precisely.
comment|//        for (StackTraceElement s: stackTrace) {
comment|//            try {
comment|//                Class<?> cls = DefaultSshFuture.class.getClassLoader().loadClass(s.getClassName());
comment|//                if (IoProcessor.class.isAssignableFrom(cls)) {
comment|//                    throw new IllegalStateException(
comment|//                        "DEAD LOCK: " + IoFuture.class.getSimpleName() +
comment|//                        ".await() was invoked from an I/O processor thread.  " +
comment|//                        "Please use " + IoFutureListener.class.getSimpleName() +
comment|//                        " or configure a proper thread model alternatively.");
comment|//                }
comment|//            } catch (Exception cnfe) {
comment|//                // Ignore
comment|//            }
comment|//        }
block|}
comment|/**      * {@inheritDoc}      */
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|ready
return|;
block|}
block|}
comment|/**      * Sets the result of the asynchronous operation, and mark it as finished.      */
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|newValue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|// Allow only once.
if|if
condition|(
name|ready
condition|)
block|{
return|return;
block|}
name|result
operator|=
name|newValue
expr_stmt|;
name|ready
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|waiters
operator|>
literal|0
condition|)
block|{
name|lock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
name|notifyListeners
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the result of the asynchronous operation.      */
specifier|protected
name|Object
name|getValue
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|result
return|;
block|}
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|T
name|addListener
parameter_list|(
name|FutureListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"listener"
argument_list|)
throw|;
block|}
name|boolean
name|notifyNow
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|ready
condition|)
block|{
name|notifyNow
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|firstListener
operator|==
literal|null
condition|)
block|{
name|firstListener
operator|=
name|listener
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|otherListeners
operator|==
literal|null
condition|)
block|{
name|otherListeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|otherListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|notifyNow
condition|)
block|{
name|notifyListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
comment|/**      * {@inheritDoc}      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|T
name|removeListener
parameter_list|(
name|FutureListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"listener"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
operator|!
name|ready
condition|)
block|{
if|if
condition|(
name|listener
operator|==
name|firstListener
condition|)
block|{
if|if
condition|(
name|otherListeners
operator|!=
literal|null
operator|&&
operator|!
name|otherListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|firstListener
operator|=
name|otherListeners
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstListener
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|otherListeners
operator|!=
literal|null
condition|)
block|{
name|otherListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
specifier|private
name|void
name|notifyListeners
parameter_list|()
block|{
comment|// There won't be any visibility problem or concurrent modification
comment|// because 'ready' flag will be checked against both addListener and
comment|// removeListener calls.
if|if
condition|(
name|firstListener
operator|!=
literal|null
condition|)
block|{
name|notifyListener
argument_list|(
name|firstListener
argument_list|)
expr_stmt|;
name|firstListener
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|otherListeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FutureListener
argument_list|<
name|T
argument_list|>
name|l
range|:
name|otherListeners
control|)
block|{
name|notifyListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|otherListeners
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|notifyListener
parameter_list|(
name|FutureListener
argument_list|<
name|T
argument_list|>
name|l
parameter_list|)
block|{
try|try
block|{
name|l
operator|.
name|operationComplete
argument_list|(
operator|(
name|T
operator|)
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// TODO
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
operator|==
name|CANCELED
return|;
block|}
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|setValue
argument_list|(
name|CANCELED
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

