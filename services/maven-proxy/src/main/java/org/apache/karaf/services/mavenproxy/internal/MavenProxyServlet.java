begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|services
operator|.
name|mavenproxy
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AccountException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|FailedLoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|AsyncContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|util
operator|.
name|StreamUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ops4j
operator|.
name|pax
operator|.
name|url
operator|.
name|mvn
operator|.
name|MavenResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|http
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MavenProxyServlet
extends|extends
name|HttpServlet
block|{
specifier|public
specifier|static
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MavenProxyServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Pattern
name|REPOSITORY_ID_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^ ]*(@id=([^@ ]+))+[^ ]*"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SNAPSHOT_TIMESTAMP_REGEX
init|=
literal|"^([0-9]{8}.[0-9]{6}-[0-9]+).*"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|SNAPSHOT_TIMESTAMP_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|SNAPSHOT_TIMESTAMP_REGEX
argument_list|)
decl_stmt|;
comment|//The pattern below matches a path to the following:
comment|//1: groupId
comment|//2: artifactId
comment|//3: version
comment|//4: artifact filename
specifier|public
specifier|static
specifier|final
name|Pattern
name|ARTIFACT_REQUEST_URL_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^ ]+)/([^/ ]+)/([^/ ]+)/([^/ ]+)"
argument_list|)
decl_stmt|;
comment|//The pattern bellow matches the path to the following:
comment|//1: groupId
comment|//2: artifactId
comment|//3: version
comment|//4: maven-metadata xml filename
comment|//7: repository id.
comment|//9: type
specifier|public
specifier|static
specifier|final
name|Pattern
name|ARTIFACT_METADATA_URL_REGEX
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([^ ]+)/([^/ ]+)/([^/ ]+)/(maven-metadata([-]([^ .]+))?.xml)([.]([^ ]+))?"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_WWW_AUTHENTICATE
init|=
literal|"WWW-Authenticate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HEADER_AUTHORIZATION
init|=
literal|"Authorization"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AUTHENTICATION_SCHEME_BASIC
init|=
literal|"Basic"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|LOCATION_HEADER
init|=
literal|"X-Location"
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|ArtifactDownloadFuture
argument_list|>
name|requestMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|threadMaximumPoolSize
decl_stmt|;
specifier|private
specifier|final
name|String
name|realm
decl_stmt|;
specifier|private
specifier|final
name|String
name|downloadRole
decl_stmt|;
specifier|private
specifier|final
name|String
name|uploadRole
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|executorService
decl_stmt|;
specifier|protected
name|File
name|tmpFolder
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"karaf.data"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"maven"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"proxy"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tmp"
argument_list|)
decl_stmt|;
specifier|final
name|MavenResolver
name|resolver
decl_stmt|;
specifier|public
name|MavenProxyServlet
parameter_list|(
name|MavenResolver
name|resolver
parameter_list|,
name|int
name|threadMaximumPoolSize
parameter_list|,
name|String
name|realm
parameter_list|,
name|String
name|downloadRole
parameter_list|,
name|String
name|uploadRole
parameter_list|)
block|{
name|this
operator|.
name|resolver
operator|=
name|resolver
expr_stmt|;
name|this
operator|.
name|threadMaximumPoolSize
operator|=
name|threadMaximumPoolSize
expr_stmt|;
name|this
operator|.
name|realm
operator|=
name|realm
expr_stmt|;
name|this
operator|.
name|downloadRole
operator|=
name|downloadRole
expr_stmt|;
name|this
operator|.
name|uploadRole
operator|=
name|uploadRole
expr_stmt|;
block|}
comment|//
comment|//  Lifecycle
comment|//
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
if|if
condition|(
operator|!
name|tmpFolder
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|tmpFolder
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Failed to create temporary artifact folder"
argument_list|)
throw|;
block|}
comment|// Create a thread pool with the given maxmimum number of threads
comment|// All threads will time out after 60 seconds
name|int
name|nbThreads
init|=
name|threadMaximumPoolSize
operator|>
literal|0
condition|?
name|threadMaximumPoolSize
else|:
literal|8
decl_stmt|;
name|executorService
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|nbThreads
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|(
literal|"MavenDownloadProxyServlet"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|//
comment|// Security
comment|//
specifier|protected
name|boolean
name|authorize
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|String
name|role
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|role
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Return immediately if the header is missing
name|String
name|authHeader
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|HEADER_AUTHORIZATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|authHeader
operator|!=
literal|null
operator|&&
name|authHeader
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Get the authType (Basic, Digest) and authInfo (user/password)
comment|// from the header
name|authHeader
operator|=
name|authHeader
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|blank
init|=
name|authHeader
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|blank
operator|>
literal|0
condition|)
block|{
name|String
name|authType
init|=
name|authHeader
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|blank
argument_list|)
decl_stmt|;
name|String
name|authInfo
init|=
name|authHeader
operator|.
name|substring
argument_list|(
name|blank
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Check whether authorization type matches
if|if
condition|(
name|authType
operator|.
name|equalsIgnoreCase
argument_list|(
name|AUTHENTICATION_SCHEME_BASIC
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|srcString
init|=
name|base64Decode
argument_list|(
name|authInfo
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|srcString
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|srcString
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|srcString
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// authenticate
name|Subject
name|subject
init|=
name|doAuthenticate
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
comment|// as per the spec, set attributes
name|request
operator|.
name|setAttribute
argument_list|(
name|HttpContext
operator|.
name|AUTHENTICATION_TYPE
argument_list|,
name|HttpServletRequest
operator|.
name|BASIC_AUTH
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|HttpContext
operator|.
name|REMOTE_USER
argument_list|,
name|username
argument_list|)
expr_stmt|;
comment|// succeed
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore
block|}
block|}
block|}
block|}
comment|// request authentication
try|try
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|HEADER_WWW_AUTHENTICATE
argument_list|,
name|AUTHENTICATION_SCHEME_BASIC
operator|+
literal|" realm=\""
operator|+
name|this
operator|.
name|realm
operator|+
literal|"\""
argument_list|)
expr_stmt|;
comment|// must response with status and flush as Jetty may report org.eclipse.jetty.server.Response Committed before 401 null
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// failed sending the response ... cannot do anything about it
block|}
comment|// inform HttpService that authentication failed
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|String
name|base64Decode
parameter_list|(
name|String
name|srcString
parameter_list|)
block|{
name|byte
index|[]
name|transformed
init|=
name|DatatypeConverter
operator|.
name|parseBase64Binary
argument_list|(
name|srcString
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|transformed
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
return|;
block|}
specifier|public
name|Subject
name|doAuthenticate
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|,
specifier|final
name|String
name|role
parameter_list|)
block|{
try|try
block|{
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|LoginContext
name|loginContext
init|=
operator|new
name|LoginContext
argument_list|(
name|realm
argument_list|,
name|subject
argument_list|,
operator|new
name|CallbackHandler
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Callback
index|[]
name|callbacks
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedCallbackException
block|{
for|for
control|(
name|Callback
name|callback
range|:
name|callbacks
control|)
block|{
if|if
condition|(
name|callback
operator|instanceof
name|NameCallback
condition|)
block|{
operator|(
operator|(
name|NameCallback
operator|)
name|callback
operator|)
operator|.
name|setName
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|callback
operator|instanceof
name|PasswordCallback
condition|)
block|{
operator|(
operator|(
name|PasswordCallback
operator|)
name|callback
operator|)
operator|.
name|setPassword
argument_list|(
name|password
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedCallbackException
argument_list|(
name|callback
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|loginContext
operator|.
name|login
argument_list|()
expr_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
operator|&&
name|role
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|clazz
init|=
literal|"org.apache.karaf.jaas.boot.principal.RolePrincipal"
decl_stmt|;
name|String
name|name
init|=
name|role
decl_stmt|;
name|int
name|idx
init|=
name|role
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|clazz
operator|=
name|role
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|name
operator|=
name|role
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Principal
name|p
range|:
name|subject
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|&&
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|FailedLoginException
argument_list|(
literal|"User does not have the required role "
operator|+
name|role
argument_list|)
throw|;
block|}
block|}
return|return
name|subject
return|;
block|}
catch|catch
parameter_list|(
name|AccountException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Account failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Login failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
comment|//
comment|// Download
comment|//
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|authorize
argument_list|(
name|req
argument_list|,
name|resp
argument_list|,
name|downloadRole
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|tpath
init|=
name|req
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|tpath
operator|==
literal|null
condition|)
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|tpath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|tpath
operator|=
name|tpath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|path
init|=
name|tpath
decl_stmt|;
specifier|final
name|AsyncContext
name|asyncContext
init|=
name|req
operator|.
name|startAsync
argument_list|()
decl_stmt|;
name|asyncContext
operator|.
name|setTimeout
argument_list|(
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ArtifactDownloadFuture
name|future
init|=
operator|new
name|ArtifactDownloadFuture
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|ArtifactDownloadFuture
name|masterFuture
init|=
name|requestMap
operator|.
name|putIfAbsent
argument_list|(
name|path
argument_list|,
name|future
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterFuture
operator|==
literal|null
condition|)
block|{
name|masterFuture
operator|=
name|future
expr_stmt|;
name|masterFuture
operator|.
name|lock
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|File
name|file
init|=
name|download
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|future
operator|.
name|setValue
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|future
operator|.
name|setValue
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|masterFuture
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
name|masterFuture
operator|.
name|addListener
argument_list|(
operator|new
name|FutureListener
argument_list|<
name|ArtifactDownloadFuture
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|operationComplete
parameter_list|(
name|ArtifactDownloadFuture
name|future
parameter_list|)
block|{
name|Object
name|value
init|=
name|future
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Throwable
condition|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error while downloading artifact: {}"
argument_list|,
operator|(
operator|(
name|Throwable
operator|)
name|value
operator|)
operator|.
name|getMessage
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|File
condition|)
block|{
name|File
name|artifactFile
init|=
operator|(
name|File
operator|)
name|value
decl_stmt|;
try|try
init|(
name|InputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|artifactFile
argument_list|)
init|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Writing response for file : {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setContentType
argument_list|(
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setDateHeader
argument_list|(
literal|"Date"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setHeader
argument_list|(
literal|"Connection"
argument_list|,
literal|"close"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setContentLength
argument_list|(
name|is
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|Bundle
name|bundle
init|=
name|FrameworkUtil
operator|.
name|getBundle
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|!=
literal|null
condition|)
block|{
name|resp
operator|.
name|setHeader
argument_list|(
literal|"Server"
argument_list|,
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|"/"
operator|+
name|bundle
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resp
operator|.
name|setHeader
argument_list|(
literal|"Server"
argument_list|,
literal|"Karaf Maven Proxy"
argument_list|)
expr_stmt|;
block|}
name|StreamUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|resp
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
literal|"Error while sending artifact: {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|resp
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|)
expr_stmt|;
block|}
name|future
operator|.
name|release
argument_list|()
expr_stmt|;
try|try
block|{
name|asyncContext
operator|.
name|complete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// Ignore, the response must have already been sent with an error
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|download
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InvalidMavenArtifactRequest
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidMavenArtifactRequest
argument_list|()
throw|;
block|}
name|Matcher
name|artifactMatcher
init|=
name|ARTIFACT_REQUEST_URL_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Matcher
name|metadataMatcher
init|=
name|ARTIFACT_METADATA_URL_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Received request for maven metadata : {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|MavenCoord
name|coord
init|=
name|convertMetadataPathToCoord
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|resolver
operator|.
name|resolveMetadata
argument_list|(
name|coord
operator|.
name|groupId
argument_list|,
name|coord
operator|.
name|artifactId
argument_list|,
name|coord
operator|.
name|type
argument_list|,
name|coord
operator|.
name|version
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not find metadata : %s due to %s"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|artifactMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Received request for maven artifact : {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|MavenCoord
name|artifact
init|=
name|convertArtifactPathToCoord
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Path
name|download
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|artifact
operator|.
name|groupId
argument_list|,
name|artifact
operator|.
name|artifactId
argument_list|,
name|artifact
operator|.
name|classifier
argument_list|,
name|artifact
operator|.
name|type
argument_list|,
name|artifact
operator|.
name|version
argument_list|)
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|Path
name|tmpFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"mvn-"
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|copy
argument_list|(
name|download
argument_list|,
name|tmpFile
argument_list|,
name|StandardCopyOption
operator|.
name|REPLACE_EXISTING
argument_list|)
expr_stmt|;
return|return
name|tmpFile
operator|.
name|toFile
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Could not find artifact : %s due to %s"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|ArtifactDownloadFuture
extends|extends
name|DefaultFuture
argument_list|<
name|ArtifactDownloadFuture
argument_list|>
block|{
specifier|private
specifier|final
name|AtomicInteger
name|participants
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
name|ArtifactDownloadFuture
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|participants
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|release
parameter_list|()
block|{
if|if
condition|(
name|participants
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
condition|)
block|{
name|requestMap
operator|.
name|remove
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Object
name|v
init|=
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|File
condition|)
block|{
operator|(
operator|(
name|File
operator|)
name|v
operator|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//
comment|// Upload
comment|//
annotation|@
name|Override
specifier|protected
name|void
name|doPut
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|authorize
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|uploadRole
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
name|String
name|path
init|=
name|request
operator|.
name|getPathInfo
argument_list|()
decl_stmt|;
comment|//Make sure path is valid
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|result
decl_stmt|;
comment|// handle move
name|String
name|location
init|=
name|request
operator|.
name|getHeader
argument_list|(
name|LOCATION_HEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|upload
argument_list|(
operator|new
name|File
argument_list|(
name|location
argument_list|)
argument_list|,
name|path
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Path
name|dir
init|=
name|tmpFolder
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|temp
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|getFileName
argument_list|()
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|dir
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|temp
argument_list|)
init|)
block|{
name|StreamUtils
operator|.
name|copy
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|upload
argument_list|(
name|temp
operator|.
name|toFile
argument_list|()
argument_list|,
name|path
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|result
condition|?
name|HttpServletResponse
operator|.
name|SC_ACCEPTED
else|:
name|HttpServletResponse
operator|.
name|SC_NOT_ACCEPTABLE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidMavenArtifactRequest
name|ex
parameter_list|)
block|{
comment|// must response with status and flush as Jetty may report org.eclipse.jetty.server.Response Committed before 401 null
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// must response with status and flush as Jetty may report org.eclipse.jetty.server.Response Committed before 401 null
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|upload
parameter_list|(
name|File
name|input
parameter_list|,
name|String
name|path
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|InvalidMavenArtifactRequest
throws|,
name|NoSuchFileException
block|{
if|if
condition|(
operator|!
name|input
operator|.
name|isFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchFileException
argument_list|(
name|input
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidMavenArtifactRequest
argument_list|()
throw|;
block|}
comment|// root path, try reading mvn coords
if|if
condition|(
name|path
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|<
literal|0
condition|)
block|{
try|try
block|{
name|String
name|mvnCoordsPath
init|=
name|readMvnCoordsPath
argument_list|(
name|input
argument_list|)
decl_stmt|;
if|if
condition|(
name|mvnCoordsPath
operator|!=
literal|null
condition|)
block|{
return|return
name|install
argument_list|(
name|input
argument_list|,
name|mvnCoordsPath
argument_list|)
return|;
block|}
else|else
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|LOCATION_HEADER
argument_list|,
name|input
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// we need manual mvn coords input
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to deploy artifact : %s due to %s"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
name|install
argument_list|(
name|input
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|install
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Matcher
name|artifactMatcher
init|=
name|ARTIFACT_REQUEST_URL_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Matcher
name|metadataMatcher
init|=
name|ARTIFACT_METADATA_URL_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadataMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Received upload request for maven metadata : {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|MavenCoord
name|coord
init|=
name|convertMetadataPathToCoord
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|uploadMetadata
argument_list|(
name|coord
operator|.
name|groupId
argument_list|,
name|coord
operator|.
name|artifactId
argument_list|,
name|coord
operator|.
name|type
argument_list|,
name|coord
operator|.
name|version
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Maven metadata installed: {}"
argument_list|,
name|coord
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to upload metadata: %s due to %s"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//If no matching metadata found return nothing
block|}
elseif|else
if|if
condition|(
name|artifactMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Received upload request for maven artifact : {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|MavenCoord
name|coord
init|=
name|convertArtifactPathToCoord
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|upload
argument_list|(
name|coord
operator|.
name|groupId
argument_list|,
name|coord
operator|.
name|artifactId
argument_list|,
name|coord
operator|.
name|classifier
argument_list|,
name|coord
operator|.
name|type
argument_list|,
name|coord
operator|.
name|version
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Artifact installed: {}"
argument_list|,
name|coord
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to upload artifact : %s due to %s"
argument_list|,
name|path
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
specifier|static
name|String
name|readMvnCoordsPath
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|file
argument_list|)
init|)
block|{
name|String
name|previous
init|=
literal|null
decl_stmt|;
name|String
name|match
init|=
literal|null
decl_stmt|;
name|Enumeration
argument_list|<
name|JarEntry
argument_list|>
name|entries
init|=
name|jarFile
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|JarEntry
name|entry
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"META-INF/maven/"
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|"pom.properties"
argument_list|)
condition|)
block|{
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Duplicate pom.properties found: %s != %s"
argument_list|,
name|name
argument_list|,
name|previous
argument_list|)
argument_list|)
throw|;
block|}
name|previous
operator|=
name|name
expr_stmt|;
comment|// check for dups
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|jarFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|String
name|groupId
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"groupId"
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"artifactId"
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|getFileExtension
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|match
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"%s/%s/%s/%s-%s.%s"
argument_list|,
name|groupId
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|artifactId
argument_list|,
name|version
argument_list|,
name|type
operator|!=
literal|null
condition|?
name|type
else|:
literal|"jar"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|match
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getFileExtension
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|1
condition|)
block|{
name|String
name|answer
init|=
name|fileName
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|answer
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Converts the path of the request to maven coords.      *      * @param path The request path, following the format: {@code<groupId>/<artifactId>/<version>/<artifactId>-<version>-[<classifier>].extension}      * @return A {@link MavenCoord}      * @throws InvalidMavenArtifactRequest      */
specifier|protected
name|MavenCoord
name|convertArtifactPathToCoord
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InvalidMavenArtifactRequest
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidMavenArtifactRequest
argument_list|(
literal|"Cannot match request path to maven url, request path is empty."
argument_list|)
throw|;
block|}
name|Matcher
name|pathMatcher
init|=
name|ARTIFACT_REQUEST_URL_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|groupId
init|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|String
name|artifactId
init|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|version
init|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|String
name|extension
decl_stmt|;
name|String
name|classifier
init|=
literal|""
decl_stmt|;
name|String
name|filePerfix
init|=
name|artifactId
operator|+
literal|"-"
operator|+
name|version
decl_stmt|;
name|String
name|stripedFileName
decl_stmt|;
if|if
condition|(
name|version
operator|.
name|endsWith
argument_list|(
literal|"SNAPSHOT"
argument_list|)
condition|)
block|{
name|String
name|baseVersion
init|=
name|version
operator|.
name|replaceAll
argument_list|(
literal|"-SNAPSHOT"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|timestampedFileName
init|=
name|filename
operator|.
name|substring
argument_list|(
name|artifactId
operator|.
name|length
argument_list|()
operator|+
name|baseVersion
operator|.
name|length
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
comment|//Check if snapshot is timestamped and override the version. @{link Artifact} will still treat it as a SNAPSHOT.
comment|//and also in case of artifact installation the proper filename will be used.
name|Matcher
name|ts
init|=
name|SNAPSHOT_TIMESTAMP_PATTERN
operator|.
name|matcher
argument_list|(
name|timestampedFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|.
name|matches
argument_list|()
condition|)
block|{
name|version
operator|=
name|baseVersion
operator|+
literal|"-"
operator|+
name|ts
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|filePerfix
operator|=
name|artifactId
operator|+
literal|"-"
operator|+
name|version
expr_stmt|;
block|}
name|stripedFileName
operator|=
name|filename
operator|.
name|replaceAll
argument_list|(
name|SNAPSHOT_TIMESTAMP_REGEX
argument_list|,
literal|"SNAPSHOT"
argument_list|)
expr_stmt|;
name|stripedFileName
operator|=
name|stripedFileName
operator|.
name|substring
argument_list|(
name|filePerfix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stripedFileName
operator|=
name|filename
operator|.
name|substring
argument_list|(
name|filePerfix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stripedFileName
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|&&
name|stripedFileName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|classifier
operator|=
name|stripedFileName
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|stripedFileName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|extension
operator|=
name|stripedFileName
operator|.
name|substring
argument_list|(
name|stripedFileName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|MavenCoord
name|coord
init|=
operator|new
name|MavenCoord
argument_list|()
decl_stmt|;
name|coord
operator|.
name|groupId
operator|=
name|groupId
expr_stmt|;
name|coord
operator|.
name|artifactId
operator|=
name|artifactId
expr_stmt|;
name|coord
operator|.
name|type
operator|=
name|extension
expr_stmt|;
name|coord
operator|.
name|classifier
operator|=
name|classifier
expr_stmt|;
name|coord
operator|.
name|version
operator|=
name|version
expr_stmt|;
return|return
name|coord
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Converts the path of the request to {@link MavenCoord}.      *      * @param path The request path, following the format: {@code<groupId>/<artifactId>/<version>/<artifactId>-<version>-[<classifier>].extension}      * @return A {@link MavenCoord}      * @throws InvalidMavenArtifactRequest      */
specifier|protected
name|MavenCoord
name|convertMetadataPathToCoord
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|InvalidMavenArtifactRequest
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidMavenArtifactRequest
argument_list|(
literal|"Cannot match request path to maven url, request path is empty."
argument_list|)
throw|;
block|}
name|Matcher
name|pathMatcher
init|=
name|ARTIFACT_METADATA_URL_REGEX
operator|.
name|matcher
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathMatcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|MavenCoord
name|coord
init|=
operator|new
name|MavenCoord
argument_list|()
decl_stmt|;
name|coord
operator|.
name|groupId
operator|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|coord
operator|.
name|artifactId
operator|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|coord
operator|.
name|version
operator|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|pathMatcher
operator|.
name|group
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|coord
operator|.
name|type
operator|=
name|type
operator|==
literal|null
condition|?
literal|"maven-metadata.xml"
else|:
literal|"maven-metadata.xml."
operator|+
name|type
expr_stmt|;
return|return
name|coord
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|static
class|class
name|MavenCoord
block|{
name|String
name|groupId
decl_stmt|;
name|String
name|artifactId
decl_stmt|;
name|String
name|type
decl_stmt|;
name|String
name|classifier
decl_stmt|;
name|String
name|version
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|groupId
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|artifactId
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|classifier
operator|!=
literal|null
operator|&&
operator|!
name|classifier
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|classifier
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Reads a {@link java.io.File} from the {@link java.io.InputStream} then saves it under a temp location and returns the file.      *      * @param is           The source input stream.      * @param tempLocation The temporary location to save the content of the stream.      * @param name         The name of the file.      * @return      * @throws java.io.FileNotFoundException      */
specifier|protected
name|File
name|copyFile
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|File
name|tempLocation
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tmpFile
init|=
name|tempLocation
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
name|StreamUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
return|return
name|tmpFile
operator|.
name|toFile
argument_list|()
return|;
block|}
block|}
end_class

end_unit

