begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|services
operator|.
name|staticcm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ManagedServiceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|util
operator|.
name|tracker
operator|.
name|ServiceTracker
import|;
end_import

begin_class
specifier|public
class|class
name|StaticConfigAdminImpl
implements|implements
name|ConfigurationAdmin
block|{
specifier|private
specifier|final
name|BundleContext
name|context
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Configuration
argument_list|>
name|configurations
decl_stmt|;
specifier|public
name|StaticConfigAdminImpl
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|List
argument_list|<
name|Configuration
argument_list|>
name|configs
parameter_list|)
throws|throws
name|IOException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|configs
argument_list|,
literal|"configs"
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|configurations
operator|=
name|configs
expr_stmt|;
name|ServiceTracker
argument_list|<
name|ManagedService
argument_list|,
name|ManagedService
argument_list|>
name|serviceTracker
init|=
operator|new
name|ServiceTracker
argument_list|<
name|ManagedService
argument_list|,
name|ManagedService
argument_list|>
argument_list|(
name|context
argument_list|,
name|ManagedService
operator|.
name|class
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ManagedService
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|ManagedService
argument_list|>
name|reference
parameter_list|)
block|{
name|ManagedService
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|Object
name|pidObj
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidObj
operator|instanceof
name|String
condition|)
block|{
name|String
name|pid
init|=
operator|(
name|String
operator|)
name|pidObj
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Configuration
name|config
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getPid
argument_list|()
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
operator|&&
name|config
operator|.
name|getFactoryPid
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|service
operator|.
name|updated
argument_list|(
name|config
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
try|try
block|{
name|service
operator|.
name|updated
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unsupported pid: "
operator|+
name|pidObj
argument_list|)
expr_stmt|;
block|}
return|return
name|service
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|ManagedService
argument_list|>
name|reference
parameter_list|,
name|ManagedService
name|service
parameter_list|)
block|{
name|context
operator|.
name|ungetService
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|serviceTracker
operator|.
name|open
argument_list|()
expr_stmt|;
name|ServiceTracker
argument_list|<
name|ManagedServiceFactory
argument_list|,
name|ManagedServiceFactory
argument_list|>
name|factoryTracker
init|=
operator|new
name|ServiceTracker
argument_list|<
name|ManagedServiceFactory
argument_list|,
name|ManagedServiceFactory
argument_list|>
argument_list|(
name|context
argument_list|,
name|ManagedServiceFactory
operator|.
name|class
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ManagedServiceFactory
name|addingService
parameter_list|(
name|ServiceReference
argument_list|<
name|ManagedServiceFactory
argument_list|>
name|reference
parameter_list|)
block|{
name|ManagedServiceFactory
name|factory
init|=
name|context
operator|.
name|getService
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|Object
name|pidObj
init|=
name|reference
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|)
decl_stmt|;
if|if
condition|(
name|pidObj
operator|instanceof
name|String
condition|)
block|{
name|String
name|pid
init|=
operator|(
name|String
operator|)
name|pidObj
decl_stmt|;
for|for
control|(
name|Configuration
name|config
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getPid
argument_list|()
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
operator|&&
name|config
operator|.
name|getFactoryPid
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|factory
operator|.
name|updated
argument_list|(
name|config
operator|.
name|getFactoryPid
argument_list|()
argument_list|,
name|config
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unsupported pid: "
operator|+
name|pidObj
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removedService
parameter_list|(
name|ServiceReference
argument_list|<
name|ManagedServiceFactory
argument_list|>
name|reference
parameter_list|,
name|ManagedServiceFactory
name|service
parameter_list|)
block|{
name|super
operator|.
name|removedService
argument_list|(
name|reference
argument_list|,
name|service
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|factoryTracker
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|createFactoryConfiguration
parameter_list|(
name|String
name|factoryPid
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|createFactoryConfiguration
parameter_list|(
name|String
name|factoryPid
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|(
name|String
name|pid
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getConfiguration
argument_list|(
name|pid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|(
name|String
name|pid
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Configuration
name|config
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getPid
argument_list|()
operator|.
name|equals
argument_list|(
name|pid
argument_list|)
operator|&&
name|config
operator|.
name|getFactoryPid
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|config
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
index|[]
name|listConfigurations
parameter_list|(
name|String
name|filter
parameter_list|)
throws|throws
name|IOException
throws|,
name|InvalidSyntaxException
block|{
name|List
argument_list|<
name|Configuration
argument_list|>
name|configs
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|configs
operator|=
name|configurations
expr_stmt|;
block|}
else|else
block|{
name|configs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|Filter
name|flt
init|=
name|context
operator|.
name|createFilter
argument_list|(
name|filter
argument_list|)
decl_stmt|;
for|for
control|(
name|Configuration
name|config
range|:
name|configurations
control|)
block|{
if|if
condition|(
name|flt
operator|.
name|match
argument_list|(
name|config
operator|.
name|getProperties
argument_list|()
argument_list|)
condition|)
block|{
name|configs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|configs
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|configs
operator|.
name|toArray
argument_list|(
operator|new
name|Configuration
index|[
name|configs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

