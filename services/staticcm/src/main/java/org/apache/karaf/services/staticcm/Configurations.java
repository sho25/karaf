begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|karaf
operator|.
name|services
operator|.
name|staticcm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|InterpolationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|utils
operator|.
name|properties
operator|.
name|TypedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_class
specifier|public
class|class
name|Configurations
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|Configuration
argument_list|>
name|loadConfigurations
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|configs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|()
decl_stmt|;
specifier|final
name|InterpolationHelper
operator|.
name|SubstitutionCallback
name|cb
init|=
operator|new
name|InterpolationHelper
operator|.
name|BundleContextSubstitutionCallback
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|TypedProperties
operator|.
name|SubstitutionCallback
name|substitutionCallback
init|=
parameter_list|(
name|name
parameter_list|,
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|cb
operator|.
name|getValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".cfg"
argument_list|)
condition|)
block|{
try|try
init|(
name|InputStream
name|in
init|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
init|)
block|{
name|in
operator|.
name|mark
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|isXml
init|=
name|in
operator|.
name|read
argument_list|()
operator|==
literal|'<'
decl_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|isXml
condition|)
block|{
specifier|final
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|loadFromXML
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|strMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
name|p
operator|.
name|keySet
argument_list|()
control|)
block|{
name|strMap
operator|.
name|put
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|,
name|p
operator|.
name|getProperty
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|configs
operator|.
name|put
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|strMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TypedProperties
name|prop
init|=
operator|new
name|TypedProperties
argument_list|(
name|substitutionCallback
argument_list|)
decl_stmt|;
name|prop
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|createConfigurations
argument_list|(
name|context
argument_list|,
name|configs
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Configuration
argument_list|>
name|createConfigurations
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|configs
parameter_list|)
block|{
name|List
argument_list|<
name|Configuration
argument_list|>
name|configurations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entry
range|:
name|configs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pid
index|[]
init|=
name|parsePid
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|cfg
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|servicePid
decl_stmt|;
name|String
name|factoryPid
decl_stmt|;
if|if
condition|(
name|pid
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|servicePid
operator|=
name|pid
index|[
literal|0
index|]
expr_stmt|;
name|factoryPid
operator|=
literal|null
expr_stmt|;
name|cfg
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|pid
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|servicePid
operator|=
name|pid
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|pid
index|[
literal|1
index|]
expr_stmt|;
name|factoryPid
operator|=
name|pid
index|[
literal|0
index|]
expr_stmt|;
block|}
name|cfg
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|servicePid
argument_list|)
expr_stmt|;
if|if
condition|(
name|factoryPid
operator|!=
literal|null
condition|)
block|{
name|cfg
operator|.
name|put
argument_list|(
name|ConfigurationAdmin
operator|.
name|SERVICE_FACTORYPID
argument_list|,
name|factoryPid
argument_list|)
expr_stmt|;
block|}
name|configurations
operator|.
name|add
argument_list|(
operator|new
name|StaticConfigurationImpl
argument_list|(
name|servicePid
argument_list|,
name|factoryPid
argument_list|,
operator|new
name|Hashtable
argument_list|<>
argument_list|(
name|cfg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|configurations
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|parsePid
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|pid
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|n
init|=
name|pid
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|String
name|factoryPid
init|=
name|pid
operator|.
name|substring
argument_list|(
name|n
operator|+
literal|1
argument_list|)
decl_stmt|;
name|pid
operator|=
name|pid
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|pid
block|,
name|factoryPid
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[]
block|{
name|pid
block|,
literal|null
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

